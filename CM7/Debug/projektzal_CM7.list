
projektzal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800eb80  0800eb80  0000fb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f008  0800f008  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f008  0800f008  00010008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f010  0800f010  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f010  0800f010  00010010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f014  0800f014  00010014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800f018  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  240001d8  0800f1f0  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240004e0  0800f1f0  000114e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6fe  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369d  00000000  00000000  0002e904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00031fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fe  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cab5  00000000  00000000  0003466e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021635  00000000  00000000  00071123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a097  00000000  00000000  00092758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021c7ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fac  00000000  00000000  0021c834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  002237e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb64 	.word	0x0800eb64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800eb64 	.word	0x0800eb64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <BMP280_Init>:
// File: bmp2.c
#include "bmp2.h"

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Configuration for control measurement register
    config[0] = 0xF4; // Address of control register
 8000b9c:	23f4      	movs	r3, #244	@ 0xf4
 8000b9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x27; // Normal mode, oversampling x1 for temperature
 8000ba0:	2327      	movs	r3, #39	@ 0x27
 8000ba2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	21ec      	movs	r1, #236	@ 0xec
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f002 f8de 	bl	8002d74 <HAL_I2C_Master_Transmit>

    // Configuration for configuration register
    config[0] = 0xF5; // Address of configuration register
 8000bb8:	23f5      	movs	r3, #245	@ 0xf5
 8000bba:	733b      	strb	r3, [r7, #12]
    config[1] = 0xA0; // Filter x4, standby time 1000 ms
 8000bbc:	23a0      	movs	r3, #160	@ 0xa0
 8000bbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	21ec      	movs	r1, #236	@ 0xec
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f002 f8d0 	bl	8002d74 <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    uint8_t calib_raw[24];

    // Read 24 bytes of calibration data starting at register 0x88
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0x88, 1, calib_raw, 24, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2318      	movs	r3, #24
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	21ec      	movs	r1, #236	@ 0xec
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 f9d1 	bl	8002fa4 <HAL_I2C_Mem_Read>

    // Parse calibration data
    calib_data->dig_T1 = (uint16_t)(calib_raw[1] << 8 | calib_raw[0]);
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)(calib_raw[3] << 8 | calib_raw[2]);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)(calib_raw[5] << 8 | calib_raw[4]);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	809a      	strh	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    uint8_t temp_raw[3];
    int32_t temp_adc;
    float var1, var2, temperature;

    // Read 3 bytes of temperature data starting from register 0xFA
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0xFA, 1, temp_raw, 3, HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	22fa      	movs	r2, #250	@ 0xfa
 8000c66:	21ec      	movs	r1, #236	@ 0xec
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 f99b 	bl	8002fa4 <HAL_I2C_Mem_Read>

    // Combine bytes into 20-bit raw temperature value
    temp_adc = ((int32_t)(temp_raw[0] << 12)) | ((int32_t)(temp_raw[1] << 4)) | ((temp_raw[2] >> 4));
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	031a      	lsls	r2, r3, #12
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]

    // Compensate temperature using calibration data
    var1 = (((float)temp_adc) / 16384.0 - ((float)calib_data->dig_T1) / 1024.0) * ((float)calib_data->dig_T2);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c90:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d80 <BMP280_ReadTemperature+0x138>
 8000c94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ca8:	ed9f 4b37 	vldr	d4, [pc, #220]	@ 8000d88 <BMP280_ReadTemperature+0x140>
 8000cac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
    var2 = ((((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0) * (((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0)) * ((float)calib_data->dig_T3);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000ce4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf8:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000cfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 4b1f 	vldr	d4, [pc, #124]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000d16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d2a:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000d2e:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
    temperature = (var1 + var2) / 5120.0;
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <BMP280_ReadTemperature+0x158>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40d00000 	.word	0x40d00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40900000 	.word	0x40900000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	41000000 	.word	0x41000000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40c00000 	.word	0x40c00000
 8000da0:	45a00000 	.word	0x45a00000

08000da4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e50:	2332      	movs	r3, #50	@ 0x32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0x160>)
 8000e6c:	f001 fd08 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e70:	2386      	movs	r3, #134	@ 0x86
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000e8c:	f001 fcf8 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x168>)
 8000eae:	f001 fce7 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000ed0:	f001 fcd6 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x16c>)
 8000ef2:	f001 fcc5 	bl	8002880 <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f001 fe74 	bl	8002c3c <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fa0d 	bl	8001378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f003 fa6f 	bl	8004444 <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 fa04 	bl	8001378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 fab1 	bl	80044da <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f9fb 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240001f4 	.word	0x240001f4
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	00707cbb 	.word	0x00707cbb

08000f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	@ 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22c0      	movs	r2, #192	@ 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00a fb3c 	bl	800b632 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <HAL_I2C_MspInit+0xe4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d155      	bne.n	8001070 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	f04f 0208 	mov.w	r2, #8
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fb0a 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f000 f9c7 	bl	8001378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <HAL_I2C_MspInit+0xec>)
 800102e:	f001 fc27 	bl	8002880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	201f      	movs	r0, #31
 8001056:	f000 fe6c 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800105a:	201f      	movs	r0, #31
 800105c:	f000 fe83 	bl	8001d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2020      	movs	r0, #32
 8001066:	f000 fe64 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800106a:	2020      	movs	r0, #32
 800106c:	f000 fe7b 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	37e8      	adds	r7, #232	@ 0xe8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001090:	bf00      	nop
 8001092:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <main+0x17c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x24>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dcf4      	bgt.n	8001092 <main+0xe>
  if ( timeout < 0 )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <main+0x2e>
  {
  Error_Handler();
 80010ae:	f000 f963 	bl	8001378 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fcc5 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f8b9 	bl	800122c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010ba:	4b51      	ldr	r3, [pc, #324]	@ (8001200 <main+0x17c>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <main+0x17c>)
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <main+0x17c>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 fd81 	bl	8002be0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 fd97 	bl	8002c14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80010e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ea:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010ec:	bf00      	nop
 80010ee:	4b44      	ldr	r3, [pc, #272]	@ (8001200 <main+0x17c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <main+0x80>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dcf4      	bgt.n	80010ee <main+0x6a>
if ( timeout < 0 )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <main+0x8a>
{
Error_Handler();
 800110a:	f000 f935 	bl	8001378 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff fe49 	bl	8000da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001112:	f7ff feff 	bl	8000f14 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001116:	f000 fbab 	bl	8001870 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800111a:	f000 fa75 	bl	8001608 <MX_TIM2_Init>
  MX_TIM3_Init();
 800111e:	f000 fac1 	bl	80016a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1);
 8001122:	4838      	ldr	r0, [pc, #224]	@ (8001204 <main+0x180>)
 8001124:	f7ff fd36 	bl	8000b94 <BMP280_Init>


  BMP280_ReadCalibrationData(&hi2c1, &calib_data);
 8001128:	4937      	ldr	r1, [pc, #220]	@ (8001208 <main+0x184>)
 800112a:	4836      	ldr	r0, [pc, #216]	@ (8001204 <main+0x180>)
 800112c:	f7ff fd56 	bl	8000bdc <BMP280_ReadCalibrationData>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001130:	2108      	movs	r1, #8
 8001132:	4836      	ldr	r0, [pc, #216]	@ (800120c <main+0x188>)
 8001134:	f006 fb30 	bl	8007798 <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001138:	4b34      	ldr	r3, [pc, #208]	@ (800120c <main+0x188>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c
  	  htim3.Init.Period = 999;
 8001140:	4b32      	ldr	r3, [pc, #200]	@ (800120c <main+0x188>)
 8001142:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim3);
 8001148:	4830      	ldr	r0, [pc, #192]	@ (800120c <main+0x188>)
 800114a:	f006 f87f 	bl	800724c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 800114e:	482f      	ldr	r0, [pc, #188]	@ (800120c <main+0x188>)
 8001150:	f006 f8d4 	bl	80072fc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001154:	2108      	movs	r1, #8
 8001156:	482d      	ldr	r0, [pc, #180]	@ (800120c <main+0x188>)
 8001158:	f006 fa10 	bl	800757c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 800115c:	482c      	ldr	r0, [pc, #176]	@ (8001210 <main+0x18c>)
 800115e:	f006 f93d 	bl	80073dc <HAL_TIM_Base_Start_IT>
  while (1)
  {

	  	  HAL_UART_Receive(&huart3, wejscie, 4, 10);
 8001162:	230a      	movs	r3, #10
 8001164:	2204      	movs	r2, #4
 8001166:	492b      	ldr	r1, [pc, #172]	@ (8001214 <main+0x190>)
 8001168:	482b      	ldr	r0, [pc, #172]	@ (8001218 <main+0x194>)
 800116a:	f007 fcb1 	bl	8008ad0 <HAL_UART_Receive>
	 	  if(strncmp("R", (char*)wejscie,1 )==0)
 800116e:	2201      	movs	r2, #1
 8001170:	4928      	ldr	r1, [pc, #160]	@ (8001214 <main+0x190>)
 8001172:	482a      	ldr	r0, [pc, #168]	@ (800121c <main+0x198>)
 8001174:	f00a fa65 	bl	800b642 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f1      	bne.n	8001162 <main+0xde>
	 	  {

	 		  pomoc[0]=wejscie[1];
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <main+0x190>)
 8001180:	785a      	ldrb	r2, [r3, #1]
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <main+0x19c>)
 8001184:	701a      	strb	r2, [r3, #0]
	 		  pomoc[1]=wejscie[2];
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <main+0x190>)
 8001188:	789a      	ldrb	r2, [r3, #2]
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <main+0x19c>)
 800118c:	705a      	strb	r2, [r3, #1]
	 		  pomoc[2]=wejscie[3];
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <main+0x190>)
 8001190:	78da      	ldrb	r2, [r3, #3]
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <main+0x19c>)
 8001194:	709a      	strb	r2, [r3, #2]
	 		  liczba_pom = atoi(pomoc);
 8001196:	4822      	ldr	r0, [pc, #136]	@ (8001220 <main+0x19c>)
 8001198:	f009 fa26 	bl	800a5e8 <atoi>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <main+0x1a0>)
 80011a2:	601a      	str	r2, [r3, #0]
	 		  HAL_UART_Transmit(&huart3, "R", 1, 10);
 80011a4:	230a      	movs	r3, #10
 80011a6:	2201      	movs	r2, #1
 80011a8:	491c      	ldr	r1, [pc, #112]	@ (800121c <main+0x198>)
 80011aa:	481b      	ldr	r0, [pc, #108]	@ (8001218 <main+0x194>)
 80011ac:	f007 fc02 	bl	80089b4 <HAL_UART_Transmit>
	 		  HAL_UART_Transmit(&huart3, pomoc, 3, 10);
 80011b0:	230a      	movs	r3, #10
 80011b2:	2203      	movs	r2, #3
 80011b4:	491a      	ldr	r1, [pc, #104]	@ (8001220 <main+0x19c>)
 80011b6:	4818      	ldr	r0, [pc, #96]	@ (8001218 <main+0x194>)
 80011b8:	f007 fbfc 	bl	80089b4 <HAL_UART_Transmit>
	 		  memcpy ( wejscie , " " , 3 ) ;
 80011bc:	2203      	movs	r2, #3
 80011be:	491a      	ldr	r1, [pc, #104]	@ (8001228 <main+0x1a4>)
 80011c0:	4814      	ldr	r0, [pc, #80]	@ (8001214 <main+0x190>)
 80011c2:	f00a fac8 	bl	800b756 <memcpy>

	 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80011c6:	2108      	movs	r1, #8
 80011c8:	4810      	ldr	r0, [pc, #64]	@ (800120c <main+0x188>)
 80011ca:	f006 fae5 	bl	8007798 <HAL_TIM_PWM_Stop>
	 		   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, liczba_pom*10);
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <main+0x1a0>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <main+0x188>)
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	63cb      	str	r3, [r1, #60]	@ 0x3c
	 		   htim3.Init.Period = 999;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <main+0x188>)
 80011e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e6:	60da      	str	r2, [r3, #12]
	 		   HAL_TIM_Base_Init(&htim3);
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <main+0x188>)
 80011ea:	f006 f82f 	bl	800724c <HAL_TIM_Base_Init>
	 		   HAL_TIM_Base_Start(&htim3);
 80011ee:	4807      	ldr	r0, [pc, #28]	@ (800120c <main+0x188>)
 80011f0:	f006 f884 	bl	80072fc <HAL_TIM_Base_Start>
	 		   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011f4:	2108      	movs	r1, #8
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <main+0x188>)
 80011f8:	f006 f9c0 	bl	800757c <HAL_TIM_PWM_Start>
	  	  HAL_UART_Receive(&huart3, wejscie, 4, 10);
 80011fc:	e7b1      	b.n	8001162 <main+0xde>
 80011fe:	bf00      	nop
 8001200:	58024400 	.word	0x58024400
 8001204:	240001f4 	.word	0x240001f4
 8001208:	24000248 	.word	0x24000248
 800120c:	240002b0 	.word	0x240002b0
 8001210:	24000264 	.word	0x24000264
 8001214:	24000258 	.word	0x24000258
 8001218:	240002fc 	.word	0x240002fc
 800121c:	0800eb80 	.word	0x0800eb80
 8001220:	2400025c 	.word	0x2400025c
 8001224:	24000254 	.word	0x24000254
 8001228:	0800eb84 	.word	0x0800eb84

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09c      	sub	sp, #112	@ 0x70
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	224c      	movs	r2, #76	@ 0x4c
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f00a f9f9 	bl	800b632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2220      	movs	r2, #32
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f00a f9f3 	bl	800b632 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800124c:	2004      	movs	r0, #4
 800124e:	f003 f991 	bl	8004574 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <SystemClock_Config+0xcc>)
 8001258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125a:	4a27      	ldr	r2, [pc, #156]	@ (80012f8 <SystemClock_Config+0xcc>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <SystemClock_Config+0xcc>)
 8001264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <SystemClock_Config+0xd0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001274:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <SystemClock_Config+0xd0>)
 8001276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <SystemClock_Config+0xd0>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001288:	bf00      	nop
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <SystemClock_Config+0xd0>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001296:	d1f8      	bne.n	800128a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800129c:	2301      	movs	r3, #1
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f9bb 	bl	8004628 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012b8:	f000 f85e 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	233f      	movs	r3, #63	@ 0x3f
 80012be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2101      	movs	r1, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fdfb 	bl	8004edc <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012ec:	f000 f844 	bl	8001378 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3770      	adds	r7, #112	@ 0x70
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	58000400 	.word	0x58000400
 80012fc:	58024800 	.word	0x58024800

08001300 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	@ 0x48
 8001304:	af02      	add	r7, sp, #8
 8001306:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001310:	d124      	bne.n	800135c <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
    // Timer interrupt triggered, perform UART transmission here
    temperature = BMP280_ReadTemperature(&hi2c1, &calib_data);
 8001312:	4914      	ldr	r1, [pc, #80]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001314:	4814      	ldr	r0, [pc, #80]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001316:	f7ff fc97 	bl	8000c48 <BMP280_ReadTemperature>
 800131a:	eef0 7a40 	vmov.f32	s15, s0
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001320:	edc3 7a00 	vstr	s15, [r3]
    char uart_msg[50];
    snprintf(uart_msg, sizeof(uart_msg), "Temperature: %.2f C\r\n", temperature);
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	ed8d 7b00 	vstr	d7, [sp]
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001338:	2132      	movs	r1, #50	@ 0x32
 800133a:	4618      	mov	r0, r3
 800133c:	f00a f8e2 	bl	800b504 <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f81b 	bl	8000380 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	4807      	ldr	r0, [pc, #28]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001358:	f007 fb2c 	bl	80089b4 <HAL_UART_Transmit>

  }
}
 800135c:	bf00      	nop
 800135e:	3740      	adds	r7, #64	@ 0x40
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	24000248 	.word	0x24000248
 8001368:	240001f4 	.word	0x240001f4
 800136c:	24000250 	.word	0x24000250
 8001370:	0800eb88 	.word	0x0800eb88
 8001374:	240002fc 	.word	0x240002fc

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_MspInit+0x30>)
 800138c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001390:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_MspInit+0x30>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_MspInit+0x30>)
 800139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	58024400 	.word	0x58024400

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 fb89 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <TIM2_IRQHandler+0x10>)
 800141e:	f006 fa51 	bl	80078c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	24000264 	.word	0x24000264

0800142c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <TIM3_IRQHandler+0x10>)
 8001432:	f006 fa47 	bl	80078c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	240002b0 	.word	0x240002b0

08001440 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <I2C1_EV_IRQHandler+0x10>)
 8001446:	f001 fec7 	bl	80031d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	240001f4 	.word	0x240001f4

08001454 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <I2C1_ER_IRQHandler+0x10>)
 800145a:	f001 fed7 	bl	800320c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	240001f4 	.word	0x240001f4

08001468 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <USART3_IRQHandler+0x10>)
 800146e:	f007 fbf7 	bl	8008c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	240002fc 	.word	0x240002fc

0800147c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_kill>:

int _kill(int pid, int sig)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001496:	f00a f931 	bl	800b6fc <__errno>
 800149a:	4603      	mov	r3, r0
 800149c:	2216      	movs	r2, #22
 800149e:	601a      	str	r2, [r3, #0]
  return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_exit>:

void _exit (int status)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffe7 	bl	800148c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014be:	bf00      	nop
 80014c0:	e7fd      	b.n	80014be <_exit+0x12>

080014c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e00a      	b.n	80014ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d4:	f3af 8000 	nop.w
 80014d8:	4601      	mov	r1, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	b2ca      	uxtb	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbf0      	blt.n	80014d4 <_read+0x12>
  }

  return len;
 80014f2:	687b      	ldr	r3, [r7, #4]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e009      	b.n	8001522 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	60ba      	str	r2, [r7, #8]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	dbf1      	blt.n	800150e <_write+0x12>
  }
  return len;
 800152a:	687b      	ldr	r3, [r7, #4]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_close>:

int _close(int file)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800155c:	605a      	str	r2, [r3, #4]
  return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_isatty>:

int _isatty(int file)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f00a f896 	bl	800b6fc <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	24080000 	.word	0x24080000
 80015fc:	00000400 	.word	0x00000400
 8001600:	24000260 	.word	0x24000260
 8001604:	240004e0 	.word	0x240004e0

08001608 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001626:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <MX_TIM2_Init+0x98>)
 8001628:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800162c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <MX_TIM2_Init+0x98>)
 8001630:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_TIM2_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_TIM2_Init+0x98>)
 800163e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001642:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_TIM2_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_TIM2_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <MX_TIM2_Init+0x98>)
 8001652:	f005 fdfb 	bl	800724c <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800165c:	f7ff fe8c 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <MX_TIM2_Init+0x98>)
 800166e:	f006 fb45 	bl	8007cfc <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001678:	f7ff fe7e 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_TIM2_Init+0x98>)
 800168a:	f007 f897 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001694:	f7ff fe70 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	24000264 	.word	0x24000264

080016a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c8:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016ca:	4a23      	ldr	r2, [pc, #140]	@ (8001758 <MX_TIM3_Init+0xb4>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016d0:	223f      	movs	r2, #63	@ 0x3f
 80016d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ee:	4819      	ldr	r0, [pc, #100]	@ (8001754 <MX_TIM3_Init+0xb0>)
 80016f0:	f005 feec 	bl	80074cc <HAL_TIM_PWM_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016fa:	f7ff fe3d 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4811      	ldr	r0, [pc, #68]	@ (8001754 <MX_TIM3_Init+0xb0>)
 800170e:	f007 f855 	bl	80087bc <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001718:	f7ff fe2e 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171c:	2360      	movs	r3, #96	@ 0x60
 800171e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001720:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001724:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	2208      	movs	r2, #8
 8001732:	4619      	mov	r1, r3
 8001734:	4807      	ldr	r0, [pc, #28]	@ (8001754 <MX_TIM3_Init+0xb0>)
 8001736:	f006 f9cd 	bl	8007ad4 <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001740:	f7ff fe1a 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <MX_TIM3_Init+0xb0>)
 8001746:	f000 f857 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	240002b0 	.word	0x240002b0
 8001758:	40000400 	.word	0x40000400

0800175c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800176c:	d116      	bne.n	800179c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <HAL_TIM_Base_MspInit+0x48>)
 8001770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001774:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <HAL_TIM_Base_MspInit+0x48>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_TIM_Base_MspInit+0x48>)
 8001780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	201c      	movs	r0, #28
 8001792:	f000 face 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001796:	201c      	movs	r0, #28
 8001798:	f000 fae5 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	58024400 	.word	0x58024400

080017a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x48>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d116      	bne.n	80017e8 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c0:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	201d      	movs	r0, #29
 80017de:	f000 faa8 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017e2:	201d      	movs	r0, #29
 80017e4:	f000 fabf 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40000400 	.word	0x40000400
 80017f4:	58024400 	.word	0x58024400

080017f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d11f      	bne.n	800185a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_TIM_MspPostInit+0x70>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001820:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <HAL_TIM_MspPostInit+0x70>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_TIM_MspPostInit+0x70>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800184a:	2302      	movs	r3, #2
 800184c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <HAL_TIM_MspPostInit+0x74>)
 8001856:	f001 f813 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40000400 	.word	0x40000400
 8001868:	58024400 	.word	0x58024400
 800186c:	58020800 	.word	0x58020800

08001870 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001874:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 8001876:	4a23      	ldr	r2, [pc, #140]	@ (8001904 <MX_USART3_UART_Init+0x94>)
 8001878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188e:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b8:	4811      	ldr	r0, [pc, #68]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018ba:	f007 f82b 	bl	8008914 <HAL_UART_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018c4:	f7ff fd58 	bl	8001378 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	480d      	ldr	r0, [pc, #52]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018cc:	f008 fdc2 	bl	800a454 <HAL_UARTEx_SetTxFifoThreshold>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018d6:	f7ff fd4f 	bl	8001378 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	4808      	ldr	r0, [pc, #32]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018de:	f008 fdf7 	bl	800a4d0 <HAL_UARTEx_SetRxFifoThreshold>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018e8:	f7ff fd46 	bl	8001378 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	@ (8001900 <MX_USART3_UART_Init+0x90>)
 80018ee:	f008 fd78 	bl	800a3e2 <HAL_UARTEx_DisableFifoMode>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018f8:	f7ff fd3e 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	240002fc 	.word	0x240002fc
 8001904:	40004800 	.word	0x40004800

08001908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0ba      	sub	sp, #232	@ 0xe8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	22c0      	movs	r2, #192	@ 0xc0
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f009 fe82 	bl	800b632 <memset>
  if(uartHandle->Instance==USART3)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2b      	ldr	r2, [pc, #172]	@ (80019e0 <HAL_UART_MspInit+0xd8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d14e      	bne.n	80019d6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001938:	f04f 0202 	mov.w	r2, #2
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194a:	f107 0310 	add.w	r3, r7, #16
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fe50 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800195a:	f7ff fd0d 	bl	8001378 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <HAL_UART_MspInit+0xdc>)
 8001960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001964:	4a1f      	ldr	r2, [pc, #124]	@ (80019e4 <HAL_UART_MspInit+0xdc>)
 8001966:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <HAL_UART_MspInit+0xdc>)
 8001970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001974:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_UART_MspInit+0xdc>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001982:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_UART_MspInit+0xdc>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_UART_MspInit+0xdc>)
 800198e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800199e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b4:	2307      	movs	r3, #7
 80019b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019be:	4619      	mov	r1, r3
 80019c0:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <HAL_UART_MspInit+0xe0>)
 80019c2:	f000 ff5d 	bl	8002880 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2027      	movs	r0, #39	@ 0x27
 80019cc:	f000 f9b1 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019d0:	2027      	movs	r0, #39	@ 0x27
 80019d2:	f000 f9c8 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019d6:	bf00      	nop
 80019d8:	37e8      	adds	r7, #232	@ 0xe8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40004800 	.word	0x40004800
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58020c00 	.word	0x58020c00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f0:	f7ff f83a 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	@ (8001a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f009 fe75 	bl	800b708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff fb31 	bl	8001084 <main>
  bx  lr
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a2c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001a30:	0800f018 	.word	0x0800f018
  ldr r2, =_sbss
 8001a34:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001a38:	240004e0 	.word	0x240004e0

08001a3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC3_IRQHandler>
	...

08001a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a46:	2003      	movs	r0, #3
 8001a48:	f000 f968 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a4c:	f003 fbfc 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_Init+0x68>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	4913      	ldr	r1, [pc, #76]	@ (8001aac <HAL_Init+0x6c>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_Init+0x68>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <HAL_Init+0x6c>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_Init+0x70>)
 8001a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a84:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab4 <HAL_Init+0x74>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 f814 	bl	8001ab8 <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e002      	b.n	8001aa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9a:	f7ff fc73 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	0800eba0 	.word	0x0800eba0
 8001ab0:	24000004 	.word	0x24000004
 8001ab4:	24000000 	.word	0x24000000

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_InitTick+0x60>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e021      	b.n	8001b10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_InitTick+0x64>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_InitTick+0x60>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f94d 	bl	8001d82 <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f917 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_InitTick+0x68>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2400000c 	.word	0x2400000c
 8001b1c:	24000000 	.word	0x24000000
 8001b20:	24000008 	.word	0x24000008

08001b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_IncTick+0x24>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	2400000c 	.word	0x2400000c
 8001b48:	24000390 	.word	0x24000390

08001b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <HAL_GetTick+0x14>)
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	24000390 	.word	0x24000390

08001b64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetREVID+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0c1b      	lsrs	r3, r3, #16
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	5c001000 	.word	0x5c001000

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x40>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x40>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	05fa0000 	.word	0x05fa0000

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	@ (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	@ (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff40 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff90 	bl	8001c70 <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5f 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff33 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa4 	bl	8001cd8 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff fed2 	bl	8001b4c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e2dc      	b.n	800236e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d008      	beq.n	8001dd2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e2cd      	b.n	800236e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a76      	ldr	r2, [pc, #472]	@ (8001fb0 <HAL_DMA_Abort+0x214>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04a      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a74      	ldr	r2, [pc, #464]	@ (8001fb4 <HAL_DMA_Abort+0x218>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d045      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a73      	ldr	r2, [pc, #460]	@ (8001fb8 <HAL_DMA_Abort+0x21c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d040      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a71      	ldr	r2, [pc, #452]	@ (8001fbc <HAL_DMA_Abort+0x220>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d03b      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a70      	ldr	r2, [pc, #448]	@ (8001fc0 <HAL_DMA_Abort+0x224>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d036      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc4 <HAL_DMA_Abort+0x228>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d031      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6d      	ldr	r2, [pc, #436]	@ (8001fc8 <HAL_DMA_Abort+0x22c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d02c      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a6b      	ldr	r2, [pc, #428]	@ (8001fcc <HAL_DMA_Abort+0x230>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d027      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd0 <HAL_DMA_Abort+0x234>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a68      	ldr	r2, [pc, #416]	@ (8001fd4 <HAL_DMA_Abort+0x238>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01d      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a67      	ldr	r2, [pc, #412]	@ (8001fd8 <HAL_DMA_Abort+0x23c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d018      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	@ (8001fdc <HAL_DMA_Abort+0x240>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a64      	ldr	r2, [pc, #400]	@ (8001fe0 <HAL_DMA_Abort+0x244>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a62      	ldr	r2, [pc, #392]	@ (8001fe4 <HAL_DMA_Abort+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a61      	ldr	r2, [pc, #388]	@ (8001fe8 <HAL_DMA_Abort+0x24c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_DMA_Abort+0xd6>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8001fec <HAL_DMA_Abort+0x250>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_DMA_Abort+0xda>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_DMA_Abort+0xdc>
 8001e76:	2300      	movs	r3, #0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 021e 	bic.w	r2, r2, #30
 8001e8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e00a      	b.n	8001eba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020e 	bic.w	r2, r2, #14
 8001eb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <HAL_DMA_Abort+0x214>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d072      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb4 <HAL_DMA_Abort+0x218>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d06d      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a39      	ldr	r2, [pc, #228]	@ (8001fb8 <HAL_DMA_Abort+0x21c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d068      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a37      	ldr	r2, [pc, #220]	@ (8001fbc <HAL_DMA_Abort+0x220>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d063      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a36      	ldr	r2, [pc, #216]	@ (8001fc0 <HAL_DMA_Abort+0x224>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d05e      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a34      	ldr	r2, [pc, #208]	@ (8001fc4 <HAL_DMA_Abort+0x228>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d059      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a33      	ldr	r2, [pc, #204]	@ (8001fc8 <HAL_DMA_Abort+0x22c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d054      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a31      	ldr	r2, [pc, #196]	@ (8001fcc <HAL_DMA_Abort+0x230>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d04f      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a30      	ldr	r2, [pc, #192]	@ (8001fd0 <HAL_DMA_Abort+0x234>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04a      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd4 <HAL_DMA_Abort+0x238>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d045      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <HAL_DMA_Abort+0x23c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d040      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fdc <HAL_DMA_Abort+0x240>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d03b      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe0 <HAL_DMA_Abort+0x244>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d036      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a28      	ldr	r2, [pc, #160]	@ (8001fe4 <HAL_DMA_Abort+0x248>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a27      	ldr	r2, [pc, #156]	@ (8001fe8 <HAL_DMA_Abort+0x24c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d02c      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a25      	ldr	r2, [pc, #148]	@ (8001fec <HAL_DMA_Abort+0x250>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d027      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a24      	ldr	r2, [pc, #144]	@ (8001ff0 <HAL_DMA_Abort+0x254>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <HAL_DMA_Abort+0x258>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01d      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	@ (8001ff8 <HAL_DMA_Abort+0x25c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d018      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ffc <HAL_DMA_Abort+0x260>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_DMA_Abort+0x264>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_DMA_Abort+0x268>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_DMA_Abort+0x26c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_DMA_Abort+0x20e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_DMA_Abort+0x270>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d132      	bne.n	8002010 <HAL_DMA_Abort+0x274>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e031      	b.n	8002012 <HAL_DMA_Abort+0x276>
 8001fae:	bf00      	nop
 8001fb0:	40020010 	.word	0x40020010
 8001fb4:	40020028 	.word	0x40020028
 8001fb8:	40020040 	.word	0x40020040
 8001fbc:	40020058 	.word	0x40020058
 8001fc0:	40020070 	.word	0x40020070
 8001fc4:	40020088 	.word	0x40020088
 8001fc8:	400200a0 	.word	0x400200a0
 8001fcc:	400200b8 	.word	0x400200b8
 8001fd0:	40020410 	.word	0x40020410
 8001fd4:	40020428 	.word	0x40020428
 8001fd8:	40020440 	.word	0x40020440
 8001fdc:	40020458 	.word	0x40020458
 8001fe0:	40020470 	.word	0x40020470
 8001fe4:	40020488 	.word	0x40020488
 8001fe8:	400204a0 	.word	0x400204a0
 8001fec:	400204b8 	.word	0x400204b8
 8001ff0:	58025408 	.word	0x58025408
 8001ff4:	5802541c 	.word	0x5802541c
 8001ff8:	58025430 	.word	0x58025430
 8001ffc:	58025444 	.word	0x58025444
 8002000:	58025458 	.word	0x58025458
 8002004:	5802546c 	.word	0x5802546c
 8002008:	58025480 	.word	0x58025480
 800200c:	58025494 	.word	0x58025494
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002024:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6d      	ldr	r2, [pc, #436]	@ (80021e0 <HAL_DMA_Abort+0x444>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6b      	ldr	r2, [pc, #428]	@ (80021e4 <HAL_DMA_Abort+0x448>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6a      	ldr	r2, [pc, #424]	@ (80021e8 <HAL_DMA_Abort+0x44c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a68      	ldr	r2, [pc, #416]	@ (80021ec <HAL_DMA_Abort+0x450>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a67      	ldr	r2, [pc, #412]	@ (80021f0 <HAL_DMA_Abort+0x454>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a65      	ldr	r2, [pc, #404]	@ (80021f4 <HAL_DMA_Abort+0x458>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a64      	ldr	r2, [pc, #400]	@ (80021f8 <HAL_DMA_Abort+0x45c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a62      	ldr	r2, [pc, #392]	@ (80021fc <HAL_DMA_Abort+0x460>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a61      	ldr	r2, [pc, #388]	@ (8002200 <HAL_DMA_Abort+0x464>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5f      	ldr	r2, [pc, #380]	@ (8002204 <HAL_DMA_Abort+0x468>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5e      	ldr	r2, [pc, #376]	@ (8002208 <HAL_DMA_Abort+0x46c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5c      	ldr	r2, [pc, #368]	@ (800220c <HAL_DMA_Abort+0x470>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002210 <HAL_DMA_Abort+0x474>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a59      	ldr	r2, [pc, #356]	@ (8002214 <HAL_DMA_Abort+0x478>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a58      	ldr	r2, [pc, #352]	@ (8002218 <HAL_DMA_Abort+0x47c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_Abort+0x32a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a56      	ldr	r2, [pc, #344]	@ (800221c <HAL_DMA_Abort+0x480>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <HAL_DMA_Abort+0x33c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_DMA_Abort+0x34c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80020e8:	e013      	b.n	8002112 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ea:	f7ff fd2f 	bl	8001b4c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d90c      	bls.n	8002112 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e12d      	b.n	800236e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1e5      	bne.n	80020ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2f      	ldr	r2, [pc, #188]	@ (80021e0 <HAL_DMA_Abort+0x444>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d04a      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a2d      	ldr	r2, [pc, #180]	@ (80021e4 <HAL_DMA_Abort+0x448>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d045      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <HAL_DMA_Abort+0x44c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d040      	beq.n	80021be <HAL_DMA_Abort+0x422>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2a      	ldr	r2, [pc, #168]	@ (80021ec <HAL_DMA_Abort+0x450>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d03b      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <HAL_DMA_Abort+0x454>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d036      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <HAL_DMA_Abort+0x458>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d031      	beq.n	80021be <HAL_DMA_Abort+0x422>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a26      	ldr	r2, [pc, #152]	@ (80021f8 <HAL_DMA_Abort+0x45c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d02c      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a24      	ldr	r2, [pc, #144]	@ (80021fc <HAL_DMA_Abort+0x460>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d027      	beq.n	80021be <HAL_DMA_Abort+0x422>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <HAL_DMA_Abort+0x464>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_DMA_Abort+0x468>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01d      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a20      	ldr	r2, [pc, #128]	@ (8002208 <HAL_DMA_Abort+0x46c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d018      	beq.n	80021be <HAL_DMA_Abort+0x422>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <HAL_DMA_Abort+0x470>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_DMA_Abort+0x422>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1d      	ldr	r2, [pc, #116]	@ (8002210 <HAL_DMA_Abort+0x474>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Abort+0x422>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002214 <HAL_DMA_Abort+0x478>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d009      	beq.n	80021be <HAL_DMA_Abort+0x422>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002218 <HAL_DMA_Abort+0x47c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_DMA_Abort+0x422>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a18      	ldr	r2, [pc, #96]	@ (800221c <HAL_DMA_Abort+0x480>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Abort+0x426>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_DMA_Abort+0x428>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02b      	beq.n	8002220 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	223f      	movs	r2, #63	@ 0x3f
 80021d8:	409a      	lsls	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	e02a      	b.n	8002236 <HAL_DMA_Abort+0x49a>
 80021e0:	40020010 	.word	0x40020010
 80021e4:	40020028 	.word	0x40020028
 80021e8:	40020040 	.word	0x40020040
 80021ec:	40020058 	.word	0x40020058
 80021f0:	40020070 	.word	0x40020070
 80021f4:	40020088 	.word	0x40020088
 80021f8:	400200a0 	.word	0x400200a0
 80021fc:	400200b8 	.word	0x400200b8
 8002200:	40020410 	.word	0x40020410
 8002204:	40020428 	.word	0x40020428
 8002208:	40020440 	.word	0x40020440
 800220c:	40020458 	.word	0x40020458
 8002210:	40020470 	.word	0x40020470
 8002214:	40020488 	.word	0x40020488
 8002218:	400204a0 	.word	0x400204a0
 800221c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a4f      	ldr	r2, [pc, #316]	@ (8002378 <HAL_DMA_Abort+0x5dc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d072      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4d      	ldr	r2, [pc, #308]	@ (800237c <HAL_DMA_Abort+0x5e0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d06d      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4c      	ldr	r2, [pc, #304]	@ (8002380 <HAL_DMA_Abort+0x5e4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d068      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4a      	ldr	r2, [pc, #296]	@ (8002384 <HAL_DMA_Abort+0x5e8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d063      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a49      	ldr	r2, [pc, #292]	@ (8002388 <HAL_DMA_Abort+0x5ec>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d05e      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a47      	ldr	r2, [pc, #284]	@ (800238c <HAL_DMA_Abort+0x5f0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d059      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a46      	ldr	r2, [pc, #280]	@ (8002390 <HAL_DMA_Abort+0x5f4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d054      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a44      	ldr	r2, [pc, #272]	@ (8002394 <HAL_DMA_Abort+0x5f8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04f      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a43      	ldr	r2, [pc, #268]	@ (8002398 <HAL_DMA_Abort+0x5fc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04a      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a41      	ldr	r2, [pc, #260]	@ (800239c <HAL_DMA_Abort+0x600>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d045      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a40      	ldr	r2, [pc, #256]	@ (80023a0 <HAL_DMA_Abort+0x604>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d040      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3e      	ldr	r2, [pc, #248]	@ (80023a4 <HAL_DMA_Abort+0x608>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d03b      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a3d      	ldr	r2, [pc, #244]	@ (80023a8 <HAL_DMA_Abort+0x60c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d036      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3b      	ldr	r2, [pc, #236]	@ (80023ac <HAL_DMA_Abort+0x610>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3a      	ldr	r2, [pc, #232]	@ (80023b0 <HAL_DMA_Abort+0x614>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d02c      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a38      	ldr	r2, [pc, #224]	@ (80023b4 <HAL_DMA_Abort+0x618>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d027      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <HAL_DMA_Abort+0x61c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a35      	ldr	r2, [pc, #212]	@ (80023bc <HAL_DMA_Abort+0x620>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01d      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a34      	ldr	r2, [pc, #208]	@ (80023c0 <HAL_DMA_Abort+0x624>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <HAL_DMA_Abort+0x628>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a31      	ldr	r2, [pc, #196]	@ (80023c8 <HAL_DMA_Abort+0x62c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <HAL_DMA_Abort+0x630>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2e      	ldr	r2, [pc, #184]	@ (80023d0 <HAL_DMA_Abort+0x634>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort+0x58a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2c      	ldr	r2, [pc, #176]	@ (80023d4 <HAL_DMA_Abort+0x638>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_DMA_Abort+0x58e>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_DMA_Abort+0x590>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002338:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002350:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800235a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020010 	.word	0x40020010
 800237c:	40020028 	.word	0x40020028
 8002380:	40020040 	.word	0x40020040
 8002384:	40020058 	.word	0x40020058
 8002388:	40020070 	.word	0x40020070
 800238c:	40020088 	.word	0x40020088
 8002390:	400200a0 	.word	0x400200a0
 8002394:	400200b8 	.word	0x400200b8
 8002398:	40020410 	.word	0x40020410
 800239c:	40020428 	.word	0x40020428
 80023a0:	40020440 	.word	0x40020440
 80023a4:	40020458 	.word	0x40020458
 80023a8:	40020470 	.word	0x40020470
 80023ac:	40020488 	.word	0x40020488
 80023b0:	400204a0 	.word	0x400204a0
 80023b4:	400204b8 	.word	0x400204b8
 80023b8:	58025408 	.word	0x58025408
 80023bc:	5802541c 	.word	0x5802541c
 80023c0:	58025430 	.word	0x58025430
 80023c4:	58025444 	.word	0x58025444
 80023c8:	58025458 	.word	0x58025458
 80023cc:	5802546c 	.word	0x5802546c
 80023d0:	58025480 	.word	0x58025480
 80023d4:	58025494 	.word	0x58025494

080023d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e237      	b.n	800285a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d004      	beq.n	8002400 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e22c      	b.n	800285a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5c      	ldr	r2, [pc, #368]	@ (8002578 <HAL_DMA_Abort_IT+0x1a0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d04a      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5b      	ldr	r2, [pc, #364]	@ (800257c <HAL_DMA_Abort_IT+0x1a4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d045      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a59      	ldr	r2, [pc, #356]	@ (8002580 <HAL_DMA_Abort_IT+0x1a8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d040      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_DMA_Abort_IT+0x1ac>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d03b      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a56      	ldr	r2, [pc, #344]	@ (8002588 <HAL_DMA_Abort_IT+0x1b0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d036      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a55      	ldr	r2, [pc, #340]	@ (800258c <HAL_DMA_Abort_IT+0x1b4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d031      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a53      	ldr	r2, [pc, #332]	@ (8002590 <HAL_DMA_Abort_IT+0x1b8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02c      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <HAL_DMA_Abort_IT+0x1bc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d027      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a50      	ldr	r2, [pc, #320]	@ (8002598 <HAL_DMA_Abort_IT+0x1c0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d022      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4f      	ldr	r2, [pc, #316]	@ (800259c <HAL_DMA_Abort_IT+0x1c4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01d      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4d      	ldr	r2, [pc, #308]	@ (80025a0 <HAL_DMA_Abort_IT+0x1c8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d018      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4c      	ldr	r2, [pc, #304]	@ (80025a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d013      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a4a      	ldr	r2, [pc, #296]	@ (80025a8 <HAL_DMA_Abort_IT+0x1d0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00e      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a49      	ldr	r2, [pc, #292]	@ (80025ac <HAL_DMA_Abort_IT+0x1d4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a47      	ldr	r2, [pc, #284]	@ (80025b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_Abort_IT+0xc8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a46      	ldr	r2, [pc, #280]	@ (80025b4 <HAL_DMA_Abort_IT+0x1dc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Abort_IT+0xcc>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_DMA_Abort_IT+0xce>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8086 	beq.w	80025b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002578 <HAL_DMA_Abort_IT+0x1a0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d04a      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2e      	ldr	r2, [pc, #184]	@ (800257c <HAL_DMA_Abort_IT+0x1a4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d045      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002580 <HAL_DMA_Abort_IT+0x1a8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002584 <HAL_DMA_Abort_IT+0x1ac>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d03b      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a29      	ldr	r2, [pc, #164]	@ (8002588 <HAL_DMA_Abort_IT+0x1b0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d036      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a28      	ldr	r2, [pc, #160]	@ (800258c <HAL_DMA_Abort_IT+0x1b4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a26      	ldr	r2, [pc, #152]	@ (8002590 <HAL_DMA_Abort_IT+0x1b8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02c      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a25      	ldr	r2, [pc, #148]	@ (8002594 <HAL_DMA_Abort_IT+0x1bc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a23      	ldr	r2, [pc, #140]	@ (8002598 <HAL_DMA_Abort_IT+0x1c0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a22      	ldr	r2, [pc, #136]	@ (800259c <HAL_DMA_Abort_IT+0x1c4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01d      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a20      	ldr	r2, [pc, #128]	@ (80025a0 <HAL_DMA_Abort_IT+0x1c8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <HAL_DMA_Abort_IT+0x1d0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_DMA_Abort_IT+0x1d4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1a      	ldr	r2, [pc, #104]	@ (80025b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_DMA_Abort_IT+0x17c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a19      	ldr	r2, [pc, #100]	@ (80025b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d108      	bne.n	8002566 <HAL_DMA_Abort_IT+0x18e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e178      	b.n	8002858 <HAL_DMA_Abort_IT+0x480>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e16f      	b.n	8002858 <HAL_DMA_Abort_IT+0x480>
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	40020040 	.word	0x40020040
 8002584:	40020058 	.word	0x40020058
 8002588:	40020070 	.word	0x40020070
 800258c:	40020088 	.word	0x40020088
 8002590:	400200a0 	.word	0x400200a0
 8002594:	400200b8 	.word	0x400200b8
 8002598:	40020410 	.word	0x40020410
 800259c:	40020428 	.word	0x40020428
 80025a0:	40020440 	.word	0x40020440
 80025a4:	40020458 	.word	0x40020458
 80025a8:	40020470 	.word	0x40020470
 80025ac:	40020488 	.word	0x40020488
 80025b0:	400204a0 	.word	0x400204a0
 80025b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 020e 	bic.w	r2, r2, #14
 80025c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002780 <HAL_DMA_Abort_IT+0x3a8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d04a      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002784 <HAL_DMA_Abort_IT+0x3ac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d045      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a69      	ldr	r2, [pc, #420]	@ (8002788 <HAL_DMA_Abort_IT+0x3b0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d040      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_DMA_Abort_IT+0x3b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d03b      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a66      	ldr	r2, [pc, #408]	@ (8002790 <HAL_DMA_Abort_IT+0x3b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d036      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a65      	ldr	r2, [pc, #404]	@ (8002794 <HAL_DMA_Abort_IT+0x3bc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d031      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a63      	ldr	r2, [pc, #396]	@ (8002798 <HAL_DMA_Abort_IT+0x3c0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02c      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a62      	ldr	r2, [pc, #392]	@ (800279c <HAL_DMA_Abort_IT+0x3c4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d027      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a60      	ldr	r2, [pc, #384]	@ (80027a0 <HAL_DMA_Abort_IT+0x3c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d022      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5f      	ldr	r2, [pc, #380]	@ (80027a4 <HAL_DMA_Abort_IT+0x3cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d01d      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5d      	ldr	r2, [pc, #372]	@ (80027a8 <HAL_DMA_Abort_IT+0x3d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d018      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5c      	ldr	r2, [pc, #368]	@ (80027ac <HAL_DMA_Abort_IT+0x3d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5a      	ldr	r2, [pc, #360]	@ (80027b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a59      	ldr	r2, [pc, #356]	@ (80027b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a57      	ldr	r2, [pc, #348]	@ (80027b8 <HAL_DMA_Abort_IT+0x3e0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_DMA_Abort_IT+0x290>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a56      	ldr	r2, [pc, #344]	@ (80027bc <HAL_DMA_Abort_IT+0x3e4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d108      	bne.n	800267a <HAL_DMA_Abort_IT+0x2a2>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e007      	b.n	800268a <HAL_DMA_Abort_IT+0x2b2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3c      	ldr	r2, [pc, #240]	@ (8002780 <HAL_DMA_Abort_IT+0x3a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d072      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3a      	ldr	r2, [pc, #232]	@ (8002784 <HAL_DMA_Abort_IT+0x3ac>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d06d      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_DMA_Abort_IT+0x3b0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d068      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a37      	ldr	r2, [pc, #220]	@ (800278c <HAL_DMA_Abort_IT+0x3b4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d063      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a36      	ldr	r2, [pc, #216]	@ (8002790 <HAL_DMA_Abort_IT+0x3b8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d05e      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a34      	ldr	r2, [pc, #208]	@ (8002794 <HAL_DMA_Abort_IT+0x3bc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d059      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a33      	ldr	r2, [pc, #204]	@ (8002798 <HAL_DMA_Abort_IT+0x3c0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d054      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a31      	ldr	r2, [pc, #196]	@ (800279c <HAL_DMA_Abort_IT+0x3c4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04f      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <HAL_DMA_Abort_IT+0x3c8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d04a      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2e      	ldr	r2, [pc, #184]	@ (80027a4 <HAL_DMA_Abort_IT+0x3cc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d045      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <HAL_DMA_Abort_IT+0x3d0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d040      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2b      	ldr	r2, [pc, #172]	@ (80027ac <HAL_DMA_Abort_IT+0x3d4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d03b      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2a      	ldr	r2, [pc, #168]	@ (80027b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d036      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a28      	ldr	r2, [pc, #160]	@ (80027b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d031      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a27      	ldr	r2, [pc, #156]	@ (80027b8 <HAL_DMA_Abort_IT+0x3e0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d02c      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a25      	ldr	r2, [pc, #148]	@ (80027bc <HAL_DMA_Abort_IT+0x3e4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d027      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a24      	ldr	r2, [pc, #144]	@ (80027c0 <HAL_DMA_Abort_IT+0x3e8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a22      	ldr	r2, [pc, #136]	@ (80027c4 <HAL_DMA_Abort_IT+0x3ec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01d      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a21      	ldr	r2, [pc, #132]	@ (80027c8 <HAL_DMA_Abort_IT+0x3f0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d018      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1f      	ldr	r2, [pc, #124]	@ (80027cc <HAL_DMA_Abort_IT+0x3f4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1e      	ldr	r2, [pc, #120]	@ (80027d0 <HAL_DMA_Abort_IT+0x3f8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1c      	ldr	r2, [pc, #112]	@ (80027d4 <HAL_DMA_Abort_IT+0x3fc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1b      	ldr	r2, [pc, #108]	@ (80027d8 <HAL_DMA_Abort_IT+0x400>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_DMA_Abort_IT+0x3a2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <HAL_DMA_Abort_IT+0x404>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d132      	bne.n	80027e0 <HAL_DMA_Abort_IT+0x408>
 800277a:	2301      	movs	r3, #1
 800277c:	e031      	b.n	80027e2 <HAL_DMA_Abort_IT+0x40a>
 800277e:	bf00      	nop
 8002780:	40020010 	.word	0x40020010
 8002784:	40020028 	.word	0x40020028
 8002788:	40020040 	.word	0x40020040
 800278c:	40020058 	.word	0x40020058
 8002790:	40020070 	.word	0x40020070
 8002794:	40020088 	.word	0x40020088
 8002798:	400200a0 	.word	0x400200a0
 800279c:	400200b8 	.word	0x400200b8
 80027a0:	40020410 	.word	0x40020410
 80027a4:	40020428 	.word	0x40020428
 80027a8:	40020440 	.word	0x40020440
 80027ac:	40020458 	.word	0x40020458
 80027b0:	40020470 	.word	0x40020470
 80027b4:	40020488 	.word	0x40020488
 80027b8:	400204a0 	.word	0x400204a0
 80027bc:	400204b8 	.word	0x400204b8
 80027c0:	58025408 	.word	0x58025408
 80027c4:	5802541c 	.word	0x5802541c
 80027c8:	58025430 	.word	0x58025430
 80027cc:	58025444 	.word	0x58025444
 80027d0:	58025458 	.word	0x58025458
 80027d4:	5802546c 	.word	0x5802546c
 80027d8:	58025480 	.word	0x58025480
 80027dc:	58025494 	.word	0x58025494
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d028      	beq.n	8002838 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2201      	movs	r2, #1
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002814:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002836:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop

08002864 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800288e:	4b89      	ldr	r3, [pc, #548]	@ (8002ab4 <HAL_GPIO_Init+0x234>)
 8002890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002892:	e194      	b.n	8002bbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8186 	beq.w	8002bb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d005      	beq.n	80028c4 <HAL_GPIO_Init+0x44>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d130      	bne.n	8002926 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fa:	2201      	movs	r2, #1
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0201 	and.w	r2, r3, #1
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b03      	cmp	r3, #3
 8002930:	d017      	beq.n	8002962 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d123      	bne.n	80029b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	69b9      	ldr	r1, [r7, #24]
 80029b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0203 	and.w	r2, r3, #3
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80e0 	beq.w	8002bb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab8 <HAL_GPIO_Init+0x238>)
 80029fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029fe:	4a2e      	ldr	r2, [pc, #184]	@ (8002ab8 <HAL_GPIO_Init+0x238>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a08:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab8 <HAL_GPIO_Init+0x238>)
 8002a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <HAL_GPIO_Init+0x23c>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	@ (8002ac0 <HAL_GPIO_Init+0x240>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d052      	beq.n	8002ae8 <HAL_GPIO_Init+0x268>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac4 <HAL_GPIO_Init+0x244>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac8 <HAL_GPIO_Init+0x248>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02b      	beq.n	8002aaa <HAL_GPIO_Init+0x22a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_GPIO_Init+0x24c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d025      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <HAL_GPIO_Init+0x250>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01f      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <HAL_GPIO_Init+0x254>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d019      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <HAL_GPIO_Init+0x258>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_GPIO_Init+0x25c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x216>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_GPIO_Init+0x260>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x212>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a17      	ldr	r2, [pc, #92]	@ (8002ae4 <HAL_GPIO_Init+0x264>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x20e>
 8002a8a:	2309      	movs	r3, #9
 8002a8c:	e02d      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002a8e:	230a      	movs	r3, #10
 8002a90:	e02b      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e029      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e027      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e025      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e023      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e021      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e01f      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e01d      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01b      	b.n	8002aea <HAL_GPIO_Init+0x26a>
 8002ab2:	bf00      	nop
 8002ab4:	58000080 	.word	0x58000080
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	58000400 	.word	0x58000400
 8002ac0:	58020000 	.word	0x58020000
 8002ac4:	58020400 	.word	0x58020400
 8002ac8:	58020800 	.word	0x58020800
 8002acc:	58020c00 	.word	0x58020c00
 8002ad0:	58021000 	.word	0x58021000
 8002ad4:	58021400 	.word	0x58021400
 8002ad8:	58021800 	.word	0x58021800
 8002adc:	58021c00 	.word	0x58021c00
 8002ae0:	58022000 	.word	0x58022000
 8002ae4:	58022400 	.word	0x58022400
 8002ae8:	2300      	movs	r3, #0
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f002 0203 	and.w	r2, r2, #3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4093      	lsls	r3, r2
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002afa:	4938      	ldr	r1, [pc, #224]	@ (8002bdc <HAL_GPIO_Init+0x35c>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f ae63 	bne.w	8002894 <HAL_GPIO_Init+0x14>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3724      	adds	r7, #36	@ 0x24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	58000400 	.word	0x58000400

08002be0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002be8:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_HSEM_FastTake+0x2c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3320      	adds	r3, #32
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	4a07      	ldr	r2, [pc, #28]	@ (8002c10 <HAL_HSEM_FastTake+0x30>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	58026400 	.word	0x58026400
 8002c10:	80000300 	.word	0x80000300

08002c14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002c1e:	4906      	ldr	r1, [pc, #24]	@ (8002c38 <HAL_HSEM_Release+0x24>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	58026400 	.word	0x58026400

08002c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e08b      	b.n	8002d66 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f996 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e006      	b.n	8002cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d108      	bne.n	8002cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	e007      	b.n	8002cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_I2C_Init+0x134>)
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69d9      	ldr	r1, [r3, #28]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1a      	ldr	r2, [r3, #32]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	02008000 	.word	0x02008000

08002d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	460b      	mov	r3, r1
 8002d82:	817b      	strh	r3, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	f040 80fd 	bne.w	8002f90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0x30>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e0f6      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x21e>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dac:	f7fe fece 	bl	8001b4c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2319      	movs	r3, #25
 8002db8:	2201      	movs	r2, #1
 8002dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f001 f8ed 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e1      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	@ 0x21
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2210      	movs	r2, #16
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2bff      	cmp	r3, #255	@ 0xff
 8002dfe:	d906      	bls.n	8002e0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	22ff      	movs	r2, #255	@ 0xff
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e007      	b.n	8002e1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d024      	beq.n	8002e70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	4b4e      	ldr	r3, [pc, #312]	@ (8002f9c <HAL_I2C_Master_Transmit+0x228>)
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f001 fa5b 	bl	8004324 <I2C_TransferConfig>
 8002e6e:	e066      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	4b48      	ldr	r3, [pc, #288]	@ (8002f9c <HAL_I2C_Master_Transmit+0x228>)
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 fa50 	bl	8004324 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e84:	e05b      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f001 f8e0 	bl	8004050 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e07b      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d034      	beq.n	8002f3e <HAL_I2C_Master_Transmit+0x1ca>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d130      	bne.n	8002f3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f001 f859 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e04d      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2bff      	cmp	r3, #255	@ 0xff
 8002efe:	d90e      	bls.n	8002f1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	22ff      	movs	r2, #255	@ 0xff
 8002f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	8979      	ldrh	r1, [r7, #10]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f001 fa04 	bl	8004324 <I2C_TransferConfig>
 8002f1c:	e00f      	b.n	8002f3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	2300      	movs	r3, #0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f001 f9f3 	bl	8004324 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d19e      	bne.n	8002e86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	6a39      	ldr	r1, [r7, #32]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f001 f8c6 	bl	80040de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01a      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2220      	movs	r2, #32
 8002f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <HAL_I2C_Master_Transmit+0x22c>)
 8002f70:	400b      	ands	r3, r1
 8002f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	80002000 	.word	0x80002000
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	f040 80fd 	bne.w	80031c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_I2C_Mem_Read+0x34>
 8002fd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0f1      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2C_Mem_Read+0x4e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0ea      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fe fda7 	bl	8001b4c <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2319      	movs	r3, #25
 8003006:	2201      	movs	r2, #1
 8003008:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 ffc6 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0d5      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2222      	movs	r2, #34	@ 0x22
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003044:	88f8      	ldrh	r0, [r7, #6]
 8003046:	893a      	ldrh	r2, [r7, #8]
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	4603      	mov	r3, r0
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fa6d 	bl	8003534 <I2C_RequestMemoryRead>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0ad      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2bff      	cmp	r3, #255	@ 0xff
 8003074:	d90e      	bls.n	8003094 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22ff      	movs	r2, #255	@ 0xff
 800307a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	4b52      	ldr	r3, [pc, #328]	@ (80031d0 <HAL_I2C_Mem_Read+0x22c>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f001 f949 	bl	8004324 <I2C_TransferConfig>
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	8979      	ldrh	r1, [r7, #10]
 80030a6:	4b4a      	ldr	r3, [pc, #296]	@ (80031d0 <HAL_I2C_Mem_Read+0x22c>)
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 f938 	bl	8004324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	2200      	movs	r2, #0
 80030bc:	2104      	movs	r1, #4
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 ff6d 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07c      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d034      	beq.n	8003174 <HAL_I2C_Mem_Read+0x1d0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	d130      	bne.n	8003174 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	2200      	movs	r2, #0
 800311a:	2180      	movs	r1, #128	@ 0x80
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 ff3e 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e04d      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2bff      	cmp	r3, #255	@ 0xff
 8003134:	d90e      	bls.n	8003154 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22ff      	movs	r2, #255	@ 0xff
 800313a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	b2da      	uxtb	r2, r3
 8003142:	8979      	ldrh	r1, [r7, #10]
 8003144:	2300      	movs	r3, #0
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f001 f8e9 	bl	8004324 <I2C_TransferConfig>
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003162:	b2da      	uxtb	r2, r3
 8003164:	8979      	ldrh	r1, [r7, #10]
 8003166:	2300      	movs	r3, #0
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f001 f8d8 	bl	8004324 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d19a      	bne.n	80030b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 ffab 	bl	80040de <I2C_WaitOnSTOPFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01a      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2220      	movs	r2, #32
 8003198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b0b      	ldr	r3, [pc, #44]	@ (80031d4 <HAL_I2C_Mem_Read+0x230>)
 80031a6:	400b      	ands	r3, r1
 80031a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	80002400 	.word	0x80002400
 80031d4:	fe00e800 	.word	0xfe00e800

080031d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800324c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00f      	beq.n	8003278 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0208 	orr.w	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003276:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00f      	beq.n	80032a2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	f043 0202 	orr.w	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 030b 	and.w	r3, r3, #11
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fd19 	bl	8003cec <I2C_ITError>
  }
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
 80032f6:	4613      	mov	r3, r2
 80032f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <I2C_Slave_ISR_IT+0x24>
 8003362:	2302      	movs	r3, #2
 8003364:	e0e2      	b.n	800352c <I2C_Slave_ISR_IT+0x1ea>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa09 	bl	800379c <I2C_ITSlaveCplt>
 800338a:	e0ca      	b.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d04b      	beq.n	800342e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800339c:	2b00      	cmp	r3, #0
 800339e:	d046      	beq.n	800342e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d128      	bne.n	80033fc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b28      	cmp	r3, #40	@ 0x28
 80033b4:	d108      	bne.n	80033c8 <I2C_Slave_ISR_IT+0x86>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033bc:	d104      	bne.n	80033c8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033be:	6939      	ldr	r1, [r7, #16]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fc3f 	bl	8003c44 <I2C_ITListenCplt>
 80033c6:	e031      	b.n	800342c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b29      	cmp	r3, #41	@ 0x29
 80033d2:	d10e      	bne.n	80033f2 <I2C_Slave_ISR_IT+0xb0>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033da:	d00a      	beq.n	80033f2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2210      	movs	r2, #16
 80033e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fd98 	bl	8003f1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f97a 	bl	80036e4 <I2C_ITSlaveSeqCplt>
 80033f0:	e01c      	b.n	800342c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2210      	movs	r2, #16
 80033f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80033fa:	e08f      	b.n	800351c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <I2C_Slave_ISR_IT+0xdc>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800341c:	d17e      	bne.n	800351c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	4619      	mov	r1, r3
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fc61 	bl	8003cec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800342a:	e077      	b.n	800351c <I2C_Slave_ISR_IT+0x1da>
 800342c:	e076      	b.n	800351c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02f      	beq.n	8003498 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02a      	beq.n	8003498 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d018      	beq.n	800347e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d14b      	bne.n	8003520 <I2C_Slave_ISR_IT+0x1de>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800348e:	d047      	beq.n	8003520 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f927 	bl	80036e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003496:	e043      	b.n	8003520 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f894 	bl	80035dc <I2C_ITAddrCplt>
 80034b4:	e035      	b.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d030      	beq.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02b      	beq.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d018      	beq.n	8003506 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003504:	e00d      	b.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800350c:	d002      	beq.n	8003514 <I2C_Slave_ISR_IT+0x1d2>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d106      	bne.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8e5 	bl	80036e4 <I2C_ITSlaveSeqCplt>
 800351a:	e002      	b.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003520:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	460b      	mov	r3, r1
 8003548:	813b      	strh	r3, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	4b20      	ldr	r3, [pc, #128]	@ (80035d8 <I2C_RequestMemoryRead+0xa4>)
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fee2 	bl	8004324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fd73 	bl	8004050 <I2C_WaitOnTXISFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e02c      	b.n	80035ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
 8003584:	e015      	b.n	80035b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003586:	893b      	ldrh	r3, [r7, #8]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	b29b      	uxth	r3, r3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fd59 	bl	8004050 <I2C_WaitOnTXISFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e012      	b.n	80035ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2140      	movs	r1, #64	@ 0x40
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fcee 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	80002000 	.word	0x80002000

080035dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035f2:	2b28      	cmp	r3, #40	@ 0x28
 80035f4:	d16a      	bne.n	80036cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b29b      	uxth	r3, r3
 8003610:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003614:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003622:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003630:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d138      	bne.n	80036ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	09db      	lsrs	r3, r3, #7
 800363e:	b29a      	uxth	r2, r3
 8003640:	89bb      	ldrh	r3, [r7, #12]
 8003642:	4053      	eors	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11c      	bne.n	8003688 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003660:	2b02      	cmp	r3, #2
 8003662:	d13b      	bne.n	80036dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2208      	movs	r2, #8
 8003670:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800367a:	89ba      	ldrh	r2, [r7, #12]
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fe32 	bl	80032ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003686:	e029      	b.n	80036dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003688:	893b      	ldrh	r3, [r7, #8]
 800368a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800368c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fe79 	bl	8004388 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800369e:	89ba      	ldrh	r2, [r7, #12]
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fe20 	bl	80032ea <HAL_I2C_AddrCallback>
}
 80036aa:	e017      	b.n	80036dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fe69 	bl	8004388 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036be:	89ba      	ldrh	r2, [r7, #12]
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fe10 	bl	80032ea <HAL_I2C_AddrCallback>
}
 80036ca:	e007      	b.n	80036dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e00c      	b.n	8003732 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003730:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b29      	cmp	r3, #41	@ 0x29
 800373c:	d112      	bne.n	8003764 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2228      	movs	r2, #40	@ 0x28
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2221      	movs	r2, #33	@ 0x21
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800374c:	2101      	movs	r1, #1
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fe1a 	bl	8004388 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fdb0 	bl	80032c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003762:	e017      	b.n	8003794 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b2a      	cmp	r3, #42	@ 0x2a
 800376e:	d111      	bne.n	8003794 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2228      	movs	r2, #40	@ 0x28
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2222      	movs	r2, #34	@ 0x22
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800377e:	2102      	movs	r1, #2
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fe01 	bl	8004388 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fda1 	bl	80032d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037be:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2220      	movs	r2, #32
 80037c6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037c8:	7afb      	ldrb	r3, [r7, #11]
 80037ca:	2b21      	cmp	r3, #33	@ 0x21
 80037cc:	d002      	beq.n	80037d4 <I2C_ITSlaveCplt+0x38>
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	2b29      	cmp	r3, #41	@ 0x29
 80037d2:	d108      	bne.n	80037e6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80037d4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fdd5 	bl	8004388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2221      	movs	r2, #33	@ 0x21
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80037e4:	e019      	b.n	800381a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037e6:	7afb      	ldrb	r3, [r7, #11]
 80037e8:	2b22      	cmp	r3, #34	@ 0x22
 80037ea:	d002      	beq.n	80037f2 <I2C_ITSlaveCplt+0x56>
 80037ec:	7afb      	ldrb	r3, [r7, #11]
 80037ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80037f0:	d108      	bne.n	8003804 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80037f2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fdc6 	bl	8004388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2222      	movs	r2, #34	@ 0x22
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
 8003802:	e00a      	b.n	800381a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	2b28      	cmp	r3, #40	@ 0x28
 8003808:	d107      	bne.n	800381a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800380a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fdba 	bl	8004388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003828:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b7f      	ldr	r3, [pc, #508]	@ (8003a34 <I2C_ITSlaveCplt+0x298>)
 8003836:	400b      	ands	r3, r1
 8003838:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fb6d 	bl	8003f1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d07a      	beq.n	8003940 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003858:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8111 	beq.w	8003a86 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	@ (8003a38 <I2C_ITSlaveCplt+0x29c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d059      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a71      	ldr	r2, [pc, #452]	@ (8003a3c <I2C_ITSlaveCplt+0x2a0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d053      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6f      	ldr	r2, [pc, #444]	@ (8003a40 <I2C_ITSlaveCplt+0x2a4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04d      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6d      	ldr	r2, [pc, #436]	@ (8003a44 <I2C_ITSlaveCplt+0x2a8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d047      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a48 <I2C_ITSlaveCplt+0x2ac>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d041      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a69      	ldr	r2, [pc, #420]	@ (8003a4c <I2C_ITSlaveCplt+0x2b0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d03b      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a67      	ldr	r2, [pc, #412]	@ (8003a50 <I2C_ITSlaveCplt+0x2b4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d035      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a65      	ldr	r2, [pc, #404]	@ (8003a54 <I2C_ITSlaveCplt+0x2b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02f      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a63      	ldr	r2, [pc, #396]	@ (8003a58 <I2C_ITSlaveCplt+0x2bc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d029      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a61      	ldr	r2, [pc, #388]	@ (8003a5c <I2C_ITSlaveCplt+0x2c0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d023      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003a60 <I2C_ITSlaveCplt+0x2c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003a64 <I2C_ITSlaveCplt+0x2c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d017      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003a68 <I2C_ITSlaveCplt+0x2cc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d011      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a59      	ldr	r2, [pc, #356]	@ (8003a6c <I2C_ITSlaveCplt+0x2d0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00b      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a57      	ldr	r2, [pc, #348]	@ (8003a70 <I2C_ITSlaveCplt+0x2d4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d005      	beq.n	8003924 <I2C_ITSlaveCplt+0x188>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a55      	ldr	r2, [pc, #340]	@ (8003a74 <I2C_ITSlaveCplt+0x2d8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d105      	bne.n	8003930 <I2C_ITSlaveCplt+0x194>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	b29b      	uxth	r3, r3
 800392e:	e004      	b.n	800393a <I2C_ITSlaveCplt+0x19e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	b29b      	uxth	r3, r3
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800393e:	e0a2      	b.n	8003a86 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 809d 	beq.w	8003a86 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800395a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8090 	beq.w	8003a86 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <I2C_ITSlaveCplt+0x29c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d059      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <I2C_ITSlaveCplt+0x2a0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d053      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2e      	ldr	r2, [pc, #184]	@ (8003a40 <I2C_ITSlaveCplt+0x2a4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04d      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2c      	ldr	r2, [pc, #176]	@ (8003a44 <I2C_ITSlaveCplt+0x2a8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d047      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <I2C_ITSlaveCplt+0x2ac>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d041      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a28      	ldr	r2, [pc, #160]	@ (8003a4c <I2C_ITSlaveCplt+0x2b0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a26      	ldr	r2, [pc, #152]	@ (8003a50 <I2C_ITSlaveCplt+0x2b4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d035      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a24      	ldr	r2, [pc, #144]	@ (8003a54 <I2C_ITSlaveCplt+0x2b8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02f      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <I2C_ITSlaveCplt+0x2bc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d029      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a20      	ldr	r2, [pc, #128]	@ (8003a5c <I2C_ITSlaveCplt+0x2c0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d023      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <I2C_ITSlaveCplt+0x2c4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a64 <I2C_ITSlaveCplt+0x2c8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d017      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a68 <I2C_ITSlaveCplt+0x2cc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d011      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <I2C_ITSlaveCplt+0x2d0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <I2C_ITSlaveCplt+0x2d4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d005      	beq.n	8003a26 <I2C_ITSlaveCplt+0x28a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <I2C_ITSlaveCplt+0x2d8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d128      	bne.n	8003a78 <I2C_ITSlaveCplt+0x2dc>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	e027      	b.n	8003a82 <I2C_ITSlaveCplt+0x2e6>
 8003a32:	bf00      	nop
 8003a34:	fe00e800 	.word	0xfe00e800
 8003a38:	40020010 	.word	0x40020010
 8003a3c:	40020028 	.word	0x40020028
 8003a40:	40020040 	.word	0x40020040
 8003a44:	40020058 	.word	0x40020058
 8003a48:	40020070 	.word	0x40020070
 8003a4c:	40020088 	.word	0x40020088
 8003a50:	400200a0 	.word	0x400200a0
 8003a54:	400200b8 	.word	0x400200b8
 8003a58:	40020410 	.word	0x40020410
 8003a5c:	40020428 	.word	0x40020428
 8003a60:	40020440 	.word	0x40020440
 8003a64:	40020458 	.word	0x40020458
 8003a68:	40020470 	.word	0x40020470
 8003a6c:	40020488 	.word	0x40020488
 8003a70:	400204a0 	.word	0x400204a0
 8003a74:	400204b8 	.word	0x400204b8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0304 	bic.w	r3, r3, #4
 8003a96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	f043 0204 	orr.w	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d049      	beq.n	8003b86 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d044      	beq.n	8003b86 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d128      	bne.n	8003b58 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b28      	cmp	r3, #40	@ 0x28
 8003b10:	d108      	bne.n	8003b24 <I2C_ITSlaveCplt+0x388>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b18:	d104      	bne.n	8003b24 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f891 	bl	8003c44 <I2C_ITListenCplt>
 8003b22:	e030      	b.n	8003b86 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b29      	cmp	r3, #41	@ 0x29
 8003b2e:	d10e      	bne.n	8003b4e <I2C_ITSlaveCplt+0x3b2>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b36:	d00a      	beq.n	8003b4e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f9ea 	bl	8003f1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fdcc 	bl	80036e4 <I2C_ITSlaveSeqCplt>
 8003b4c:	e01b      	b.n	8003b86 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2210      	movs	r2, #16
 8003b54:	61da      	str	r2, [r3, #28]
 8003b56:	e016      	b.n	8003b86 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <I2C_ITSlaveCplt+0x3de>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b78:	d105      	bne.n	8003b86 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8b3 	bl	8003cec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8a2 	bl	8003cec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b28      	cmp	r3, #40	@ 0x28
 8003bb2:	d141      	bne.n	8003c38 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003bb4:	6979      	ldr	r1, [r7, #20]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f844 	bl	8003c44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bbc:	e03c      	b.n	8003c38 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bc6:	d014      	beq.n	8003bf2 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fd8b 	bl	80036e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <I2C_ITSlaveCplt+0x4a4>)
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fb8b 	bl	8003306 <HAL_I2C_ListenCpltCallback>
}
 8003bf0:	e022      	b.n	8003c38 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b22      	cmp	r3, #34	@ 0x22
 8003bfc:	d10e      	bne.n	8003c1c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fb5e 	bl	80032d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c1a:	e00d      	b.n	8003c38 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fb45 	bl	80032c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	ffff0000 	.word	0xffff0000

08003c44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a25      	ldr	r2, [pc, #148]	@ (8003ce8 <I2C_ITListenCplt+0xa4>)
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d022      	beq.n	8003cc0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d012      	beq.n	8003cc0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cc0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb5f 	bl	8004388 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fb13 	bl	8003306 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	ffff0000 	.word	0xffff0000

08003cec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a6d      	ldr	r2, [pc, #436]	@ (8003ec0 <I2C_ITError+0x1d4>)
 8003d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b28      	cmp	r3, #40	@ 0x28
 8003d22:	d005      	beq.n	8003d30 <I2C_ITError+0x44>
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b29      	cmp	r3, #41	@ 0x29
 8003d28:	d002      	beq.n	8003d30 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d2e:	d10b      	bne.n	8003d48 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d30:	2103      	movs	r1, #3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fb28 	bl	8004388 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2228      	movs	r2, #40	@ 0x28
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a60      	ldr	r2, [pc, #384]	@ (8003ec4 <I2C_ITError+0x1d8>)
 8003d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d46:	e030      	b.n	8003daa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d48:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fb1b 	bl	8004388 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8e1 	bl	8003f1a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b60      	cmp	r3, #96	@ 0x60
 8003d62:	d01f      	beq.n	8003da4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d114      	bne.n	8003da4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d109      	bne.n	8003d9c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2210      	movs	r2, #16
 8003d8e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2220      	movs	r2, #32
 8003da2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d039      	beq.n	8003e2c <I2C_ITError+0x140>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b11      	cmp	r3, #17
 8003dbc:	d002      	beq.n	8003dc4 <I2C_ITError+0xd8>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b21      	cmp	r3, #33	@ 0x21
 8003dc2:	d133      	bne.n	8003e2c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd2:	d107      	bne.n	8003de4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003de2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe fd3b 	bl	8002864 <HAL_DMA_GetState>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d017      	beq.n	8003e24 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	4a33      	ldr	r2, [pc, #204]	@ (8003ec8 <I2C_ITError+0x1dc>)
 8003dfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fae5 	bl	80023d8 <HAL_DMA_Abort_IT>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d04d      	beq.n	8003eb0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e22:	e045      	b.n	8003eb0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f851 	bl	8003ecc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e2a:	e041      	b.n	8003eb0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d039      	beq.n	8003ea8 <I2C_ITError+0x1bc>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b12      	cmp	r3, #18
 8003e38:	d002      	beq.n	8003e40 <I2C_ITError+0x154>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b22      	cmp	r3, #34	@ 0x22
 8003e3e:	d133      	bne.n	8003ea8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e4e:	d107      	bne.n	8003e60 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fcfd 	bl	8002864 <HAL_DMA_GetState>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d017      	beq.n	8003ea0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	4a14      	ldr	r2, [pc, #80]	@ (8003ec8 <I2C_ITError+0x1dc>)
 8003e76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe faa7 	bl	80023d8 <HAL_DMA_Abort_IT>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d011      	beq.n	8003eb4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e9e:	e009      	b.n	8003eb4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f813 	bl	8003ecc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ea6:	e005      	b.n	8003eb4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f80f 	bl	8003ecc <I2C_TreatErrorCallback>
  }
}
 8003eae:	e002      	b.n	8003eb6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eb4:	bf00      	nop
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	ffff0000 	.word	0xffff0000
 8003ec4:	08003343 	.word	0x08003343
 8003ec8:	08003f63 	.word	0x08003f63

08003ecc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b60      	cmp	r3, #96	@ 0x60
 8003ede:	d10e      	bne.n	8003efe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fa19 	bl	800332e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003efc:	e009      	b.n	8003f12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fa04 	bl	800331a <HAL_I2C_ErrorCallback>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d103      	bne.n	8003f38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d007      	beq.n	8003f56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	619a      	str	r2, [r3, #24]
  }
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ff9b 	bl	8003ecc <I2C_TreatErrorCallback>
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fae:	e03b      	b.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8d5 	bl	8004164 <I2C_IsErrorOccurred>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e041      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fca:	d02d      	beq.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fcc:	f7fd fdbe 	bl	8001b4c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d122      	bne.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d113      	bne.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e00f      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d0b4      	beq.n	8003fb0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800405c:	e033      	b.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f87e 	bl	8004164 <I2C_IsErrorOccurred>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e031      	b.n	80040d6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d025      	beq.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fd fd67 	bl	8001b4c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d11a      	bne.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d013      	beq.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e007      	b.n	80040d6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d1c4      	bne.n	800405e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ea:	e02f      	b.n	800414c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f837 	bl	8004164 <I2C_IsErrorOccurred>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e02d      	b.n	800415c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004100:	f7fd fd24 	bl	8001b4c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11a      	bne.n	800414c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b20      	cmp	r3, #32
 8004122:	d013      	beq.n	800414c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e007      	b.n	800415c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b20      	cmp	r3, #32
 8004158:	d1c8      	bne.n	80040ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d068      	beq.n	8004262 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004198:	e049      	b.n	800422e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d045      	beq.n	800422e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fd fcd3 	bl	8001b4c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_IsErrorOccurred+0x54>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d13a      	bne.n	800422e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041da:	d121      	bne.n	8004220 <I2C_IsErrorOccurred+0xbc>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e2:	d01d      	beq.n	8004220 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d01a      	beq.n	8004220 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041fa:	f7fd fca7 	bl	8001b4c <HAL_GetTick>
 80041fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004200:	e00e      	b.n	8004220 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004202:	f7fd fca3 	bl	8001b4c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b19      	cmp	r3, #25
 800420e:	d907      	bls.n	8004220 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800421e:	e006      	b.n	800422e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d1e9      	bne.n	8004202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b20      	cmp	r3, #32
 800423a:	d003      	beq.n	8004244 <I2C_IsErrorOccurred+0xe0>
 800423c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0aa      	beq.n	800419a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2220      	movs	r2, #32
 8004252:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80042d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01c      	beq.n	8004312 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fe1e 	bl	8003f1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <I2C_IsErrorOccurred+0x1bc>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	@ 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	fe00e800 	.word	0xfe00e800

08004324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	4613      	mov	r3, r2
 8004334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004336:	897b      	ldrh	r3, [r7, #10]
 8004338:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800433c:	7a7b      	ldrb	r3, [r7, #9]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004344:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	4313      	orrs	r3, r2
 800434e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004352:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	0d5b      	lsrs	r3, r3, #21
 800435e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <I2C_TransferConfig+0x60>)
 8004364:	430b      	orrs	r3, r1
 8004366:	43db      	mvns	r3, r3
 8004368:	ea02 0103 	and.w	r1, r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	03ff63ff 	.word	0x03ff63ff

08004388 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00f      	beq.n	80043c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80043a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043b6:	2b28      	cmp	r3, #40	@ 0x28
 80043b8:	d003      	beq.n	80043c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80043c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00f      	beq.n	80043ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80043d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043e0:	2b28      	cmp	r3, #40	@ 0x28
 80043e2:	d003      	beq.n	80043ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80043ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80043ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da03      	bge.n	80043fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80043fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80043fc:	887b      	ldrh	r3, [r7, #2]
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d103      	bne.n	800440a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004408:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d103      	bne.n	8004418 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	2b40      	cmp	r3, #64	@ 0x40
 800441c:	d103      	bne.n	8004426 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004424:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	43da      	mvns	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	400a      	ands	r2, r1
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	d138      	bne.n	80044cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004464:	2302      	movs	r3, #2
 8004466:	e032      	b.n	80044ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	@ 0x24
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d139      	bne.n	8004564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e033      	b.n	8004566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2224      	movs	r2, #36	@ 0x24
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800452c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800457c:	4b29      	ldr	r3, [pc, #164]	@ (8004624 <HAL_PWREx_ConfigSupply+0xb0>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	2b06      	cmp	r3, #6
 8004586:	d00a      	beq.n	800459e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004588:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <HAL_PWREx_ConfigSupply+0xb0>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e040      	b.n	800461c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e03e      	b.n	800461c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800459e:	4b21      	ldr	r3, [pc, #132]	@ (8004624 <HAL_PWREx_ConfigSupply+0xb0>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80045a6:	491f      	ldr	r1, [pc, #124]	@ (8004624 <HAL_PWREx_ConfigSupply+0xb0>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045ae:	f7fd facd 	bl	8001b4c <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045b4:	e009      	b.n	80045ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045b6:	f7fd fac9 	bl	8001b4c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045c4:	d901      	bls.n	80045ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e028      	b.n	800461c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045ca:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <HAL_PWREx_ConfigSupply+0xb0>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d6:	d1ee      	bne.n	80045b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b1e      	cmp	r3, #30
 80045dc:	d008      	beq.n	80045f0 <HAL_PWREx_ConfigSupply+0x7c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80045e2:	d005      	beq.n	80045f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b1d      	cmp	r3, #29
 80045e8:	d002      	beq.n	80045f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b2d      	cmp	r3, #45	@ 0x2d
 80045ee:	d114      	bne.n	800461a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80045f0:	f7fd faac 	bl	8001b4c <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045f6:	e009      	b.n	800460c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045f8:	f7fd faa8 	bl	8001b4c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004606:	d901      	bls.n	800460c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_PWREx_ConfigSupply+0xb0>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004618:	d1ee      	bne.n	80045f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	58024800 	.word	0x58024800

08004628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08c      	sub	sp, #48	@ 0x30
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f000 bc48 	b.w	8004ecc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8088 	beq.w	800475a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464a:	4b99      	ldr	r3, [pc, #612]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004654:	4b96      	ldr	r3, [pc, #600]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800465a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465c:	2b10      	cmp	r3, #16
 800465e:	d007      	beq.n	8004670 <HAL_RCC_OscConfig+0x48>
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	2b18      	cmp	r3, #24
 8004664:	d111      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d10c      	bne.n	800468a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b8f      	ldr	r3, [pc, #572]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d06d      	beq.n	8004758 <HAL_RCC_OscConfig+0x130>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d169      	bne.n	8004758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f000 bc21 	b.w	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x7a>
 8004694:	4b86      	ldr	r3, [pc, #536]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a85      	ldr	r2, [pc, #532]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e02e      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x9c>
 80046aa:	4b81      	ldr	r3, [pc, #516]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a80      	ldr	r2, [pc, #512]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b7e      	ldr	r3, [pc, #504]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a7d      	ldr	r2, [pc, #500]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0xc0>
 80046ce:	4b78      	ldr	r3, [pc, #480]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a77      	ldr	r2, [pc, #476]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b75      	ldr	r3, [pc, #468]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a74      	ldr	r2, [pc, #464]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xd8>
 80046e8:	4b71      	ldr	r3, [pc, #452]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a70      	ldr	r2, [pc, #448]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b6e      	ldr	r3, [pc, #440]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a6d      	ldr	r2, [pc, #436]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fa20 	bl	8001b4c <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fd fa1c 	bl	8001b4c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	@ 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e3d4      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xe8>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd fa0c 	bl	8001b4c <HAL_GetTick>
 8004734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004738:	f7fd fa08 	bl	8001b4c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	@ 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e3c0      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800474a:	4b59      	ldr	r3, [pc, #356]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x110>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80ca 	beq.w	80048fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004768:	4b51      	ldr	r3, [pc, #324]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004770:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004772:	4b4f      	ldr	r3, [pc, #316]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_RCC_OscConfig+0x166>
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	2b18      	cmp	r3, #24
 8004782:	d156      	bne.n	8004832 <HAL_RCC_OscConfig+0x20a>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d151      	bne.n	8004832 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478e:	4b48      	ldr	r3, [pc, #288]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_RCC_OscConfig+0x17e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e392      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047a6:	4b42      	ldr	r3, [pc, #264]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 0219 	bic.w	r2, r3, #25
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	493f      	ldr	r1, [pc, #252]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd f9c8 	bl	8001b4c <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c0:	f7fd f9c4 	bl	8001b4c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e37c      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d2:	4b37      	ldr	r3, [pc, #220]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	f7fd f9c1 	bl	8001b64 <HAL_GetREVID>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d817      	bhi.n	800481c <HAL_RCC_OscConfig+0x1f4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d108      	bne.n	8004806 <HAL_RCC_OscConfig+0x1de>
 80047f4:	4b2e      	ldr	r3, [pc, #184]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047fc:	4a2c      	ldr	r2, [pc, #176]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004802:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004804:	e07a      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	4b2a      	ldr	r3, [pc, #168]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	031b      	lsls	r3, r3, #12
 8004814:	4926      	ldr	r1, [pc, #152]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481a:	e06f      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	061b      	lsls	r3, r3, #24
 800482a:	4921      	ldr	r1, [pc, #132]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004830:	e064      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d047      	beq.n	80048ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 0219 	bic.w	r2, r3, #25
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	491a      	ldr	r1, [pc, #104]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd f97e 	bl	8001b4c <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004854:	f7fd f97a 	bl	8001b4c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e332      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004866:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	f7fd f977 	bl	8001b64 <HAL_GetREVID>
 8004876:	4603      	mov	r3, r0
 8004878:	f241 0203 	movw	r2, #4099	@ 0x1003
 800487c:	4293      	cmp	r3, r2
 800487e:	d819      	bhi.n	80048b4 <HAL_RCC_OscConfig+0x28c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d108      	bne.n	800489a <HAL_RCC_OscConfig+0x272>
 8004888:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004890:	4a07      	ldr	r2, [pc, #28]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004896:	6053      	str	r3, [r2, #4]
 8004898:	e030      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
 800489a:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	031b      	lsls	r3, r3, #12
 80048a8:	4901      	ldr	r1, [pc, #4]	@ (80048b0 <HAL_RCC_OscConfig+0x288>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
 80048ae:	e025      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
 80048b0:	58024400 	.word	0x58024400
 80048b4:	4b9a      	ldr	r3, [pc, #616]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	4997      	ldr	r1, [pc, #604]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	e018      	b.n	80048fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b95      	ldr	r3, [pc, #596]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a94      	ldr	r2, [pc, #592]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd f939 	bl	8001b4c <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7fd f935 	bl	8001b4c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e2ed      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048f0:	4b8b      	ldr	r3, [pc, #556]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f0      	bne.n	80048de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a9 	beq.w	8004a5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800490a:	4b85      	ldr	r3, [pc, #532]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004912:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004914:	4b82      	ldr	r3, [pc, #520]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d007      	beq.n	8004930 <HAL_RCC_OscConfig+0x308>
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b18      	cmp	r3, #24
 8004924:	d13a      	bne.n	800499c <HAL_RCC_OscConfig+0x374>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d135      	bne.n	800499c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004930:	4b7b      	ldr	r3, [pc, #492]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_OscConfig+0x320>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	2b80      	cmp	r3, #128	@ 0x80
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e2c1      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004948:	f7fd f90c 	bl	8001b64 <HAL_GetREVID>
 800494c:	4603      	mov	r3, r0
 800494e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004952:	4293      	cmp	r3, r2
 8004954:	d817      	bhi.n	8004986 <HAL_RCC_OscConfig+0x35e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	2b20      	cmp	r3, #32
 800495c:	d108      	bne.n	8004970 <HAL_RCC_OscConfig+0x348>
 800495e:	4b70      	ldr	r3, [pc, #448]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004966:	4a6e      	ldr	r2, [pc, #440]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800496c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800496e:	e075      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004970:	4b6b      	ldr	r3, [pc, #428]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	069b      	lsls	r3, r3, #26
 800497e:	4968      	ldr	r1, [pc, #416]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004984:	e06a      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004986:	4b66      	ldr	r3, [pc, #408]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	4962      	ldr	r1, [pc, #392]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800499a:	e05f      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d042      	beq.n	8004a2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd f8cc 	bl	8001b4c <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049b8:	f7fd f8c8 	bl	8001b4c <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e280      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ca:	4b55      	ldr	r3, [pc, #340]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049d6:	f7fd f8c5 	bl	8001b64 <HAL_GetREVID>
 80049da:	4603      	mov	r3, r0
 80049dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d817      	bhi.n	8004a14 <HAL_RCC_OscConfig+0x3ec>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d108      	bne.n	80049fe <HAL_RCC_OscConfig+0x3d6>
 80049ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	e02e      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
 80049fe:	4b48      	ldr	r3, [pc, #288]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	069b      	lsls	r3, r3, #26
 8004a0c:	4944      	ldr	r1, [pc, #272]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
 8004a12:	e023      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
 8004a14:	4b42      	ldr	r3, [pc, #264]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	493f      	ldr	r1, [pc, #252]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60cb      	str	r3, [r1, #12]
 8004a28:	e018      	b.n	8004a5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd f889 	bl	8001b4c <HAL_GetTick>
 8004a3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a3e:	f7fd f885 	bl	8001b4c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e23d      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a50:	4b33      	ldr	r3, [pc, #204]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d036      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d019      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a74:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd f866 	bl	8001b4c <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fd f862 	bl	8001b4c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e21a      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a96:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x45c>
 8004aa2:	e018      	b.n	8004ad6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fd f84c 	bl	8001b4c <HAL_GetTick>
 8004ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab8:	f7fd f848 	bl	8001b4c <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e200      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aca:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d039      	beq.n	8004b56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004af4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004af6:	f7fd f829 	bl	8001b4c <HAL_GetTick>
 8004afa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004afe:	f7fd f825 	bl	8001b4c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1dd      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b10:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <HAL_RCC_OscConfig+0x4f8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x4d6>
 8004b1c:	e01b      	b.n	8004b56 <HAL_RCC_OscConfig+0x52e>
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b24:	4b9b      	ldr	r3, [pc, #620]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a9a      	ldr	r2, [pc, #616]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b30:	f7fd f80c 	bl	8001b4c <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b38:	f7fd f808 	bl	8001b4c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1c0      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8081 	beq.w	8004c66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b64:	4b8c      	ldr	r3, [pc, #560]	@ (8004d98 <HAL_RCC_OscConfig+0x770>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a8b      	ldr	r2, [pc, #556]	@ (8004d98 <HAL_RCC_OscConfig+0x770>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b70:	f7fc ffec 	bl	8001b4c <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fc ffe8 	bl	8001b4c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	@ 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e1a0      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b8a:	4b83      	ldr	r3, [pc, #524]	@ (8004d98 <HAL_RCC_OscConfig+0x770>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d106      	bne.n	8004bac <HAL_RCC_OscConfig+0x584>
 8004b9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	4a7c      	ldr	r2, [pc, #496]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004baa:	e02d      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0x5a6>
 8004bb4:	4b77      	ldr	r3, [pc, #476]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb8:	4a76      	ldr	r2, [pc, #472]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc0:	4b74      	ldr	r3, [pc, #464]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a73      	ldr	r2, [pc, #460]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bcc:	e01c      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e0>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c8>
 8004bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	4a6e      	ldr	r2, [pc, #440]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be2:	4b6c      	ldr	r3, [pc, #432]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e0>
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfc:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c00:	4a64      	ldr	r2, [pc, #400]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c02:	f023 0304 	bic.w	r3, r3, #4
 8004c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fc ff9c 	bl	8001b4c <HAL_GetTick>
 8004c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c18:	f7fc ff98 	bl	8001b4c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e14e      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c2e:	4b59      	ldr	r3, [pc, #356]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ee      	beq.n	8004c18 <HAL_RCC_OscConfig+0x5f0>
 8004c3a:	e014      	b.n	8004c66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fc ff86 	bl	8001b4c <HAL_GetTick>
 8004c40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fc ff82 	bl	8001b4c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e138      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ee      	bne.n	8004c44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 812d 	beq.w	8004eca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c70:	4b48      	ldr	r3, [pc, #288]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c78:	2b18      	cmp	r3, #24
 8004c7a:	f000 80bd 	beq.w	8004df8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	f040 809e 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c88:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a41      	ldr	r2, [pc, #260]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fc ff5a 	bl	8001b4c <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fc ff56 	bl	8001b4c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e10e      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cae:	4b39      	ldr	r3, [pc, #228]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cba:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cbe:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <HAL_RCC_OscConfig+0x774>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	4931      	ldr	r1, [pc, #196]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	025b      	lsls	r3, r3, #9
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d04:	4923      	ldr	r1, [pc, #140]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a21      	ldr	r2, [pc, #132]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d16:	4b1f      	ldr	r3, [pc, #124]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d1a:	4b21      	ldr	r3, [pc, #132]	@ (8004da0 <HAL_RCC_OscConfig+0x778>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d22:	00d2      	lsls	r2, r2, #3
 8004d24:	491b      	ldr	r1, [pc, #108]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	f023 020c 	bic.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	4917      	ldr	r1, [pc, #92]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d3c:	4b15      	ldr	r3, [pc, #84]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	f023 0202 	bic.w	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d48:	4912      	ldr	r1, [pc, #72]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d4e:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	4a10      	ldr	r2, [pc, #64]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d66:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a07      	ldr	r2, [pc, #28]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a04      	ldr	r2, [pc, #16]	@ (8004d94 <HAL_RCC_OscConfig+0x76c>)
 8004d84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fc fedf 	bl	8001b4c <HAL_GetTick>
 8004d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d90:	e011      	b.n	8004db6 <HAL_RCC_OscConfig+0x78e>
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	58024800 	.word	0x58024800
 8004d9c:	fffffc0c 	.word	0xfffffc0c
 8004da0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fc fed2 	bl	8001b4c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e08a      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004db6:	4b47      	ldr	r3, [pc, #284]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x77c>
 8004dc2:	e082      	b.n	8004eca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a42      	ldr	r2, [pc, #264]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fc febc 	bl	8001b4c <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fc feb8 	bl	8001b4c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e070      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dea:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x7b0>
 8004df6:	e068      	b.n	8004eca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004df8:	4b36      	ldr	r3, [pc, #216]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dfe:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d031      	beq.n	8004e70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 0203 	and.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d12a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d122      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d11a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	0a5b      	lsrs	r3, r3, #9
 8004e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d111      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	0e1b      	lsrs	r3, r3, #24
 8004e62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e02b      	b.n	8004ecc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e74:	4b17      	ldr	r3, [pc, #92]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d01f      	beq.n	8004eca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e96:	f7fc fe59 	bl	8001b4c <HAL_GetTick>
 8004e9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e9c:	bf00      	nop
 8004e9e:	f7fc fe55 	bl	8001b4c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d0f9      	beq.n	8004e9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <HAL_RCC_OscConfig+0x8b0>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4906      	ldr	r1, [pc, #24]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ebe:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a04      	ldr	r2, [pc, #16]	@ (8004ed4 <HAL_RCC_OscConfig+0x8ac>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3730      	adds	r7, #48	@ 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	ffff0007 	.word	0xffff0007

08004edc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e19c      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d910      	bls.n	8004f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b87      	ldr	r3, [pc, #540]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 020f 	bic.w	r2, r3, #15
 8004f06:	4985      	ldr	r1, [pc, #532]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b83      	ldr	r3, [pc, #524]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e184      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	4b7b      	ldr	r3, [pc, #492]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d908      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f3c:	4b78      	ldr	r3, [pc, #480]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	4975      	ldr	r1, [pc, #468]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	4b70      	ldr	r3, [pc, #448]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d908      	bls.n	8004f7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	496a      	ldr	r1, [pc, #424]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	4b64      	ldr	r3, [pc, #400]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d908      	bls.n	8004faa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f98:	4b61      	ldr	r3, [pc, #388]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	495e      	ldr	r1, [pc, #376]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d908      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fc6:	4b56      	ldr	r3, [pc, #344]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	4953      	ldr	r1, [pc, #332]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d908      	bls.n	8005006 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f023 020f 	bic.w	r2, r3, #15
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4947      	ldr	r1, [pc, #284]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005002:	4313      	orrs	r3, r2
 8005004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d055      	beq.n	80050be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005012:	4b43      	ldr	r3, [pc, #268]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4940      	ldr	r1, [pc, #256]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005020:	4313      	orrs	r3, r2
 8005022:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d107      	bne.n	800503c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800502c:	4b3c      	ldr	r3, [pc, #240]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d121      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0f6      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d107      	bne.n	8005054 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005044:	4b36      	ldr	r3, [pc, #216]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d115      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0ea      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800505c:	4b30      	ldr	r3, [pc, #192]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0de      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800506c:	4b2c      	ldr	r3, [pc, #176]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0d6      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507c:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f023 0207 	bic.w	r2, r3, #7
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4925      	ldr	r1, [pc, #148]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508e:	f7fc fd5d 	bl	8001b4c <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005094:	e00a      	b.n	80050ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005096:	f7fc fd59 	bl	8001b4c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0be      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d1eb      	bne.n	8005096 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	4b14      	ldr	r3, [pc, #80]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d208      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050da:	4b11      	ldr	r3, [pc, #68]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f023 020f 	bic.w	r2, r3, #15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	490e      	ldr	r1, [pc, #56]	@ (8005120 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d214      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b08      	ldr	r3, [pc, #32]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 020f 	bic.w	r2, r3, #15
 8005102:	4906      	ldr	r1, [pc, #24]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b04      	ldr	r3, [pc, #16]	@ (800511c <HAL_RCC_ClockConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e086      	b.n	800522a <HAL_RCC_ClockConfig+0x34e>
 800511c:	52002000 	.word	0x52002000
 8005120:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d010      	beq.n	8005152 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	4b3f      	ldr	r3, [pc, #252]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800513c:	429a      	cmp	r2, r3
 800513e:	d208      	bcs.n	8005152 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005140:	4b3c      	ldr	r3, [pc, #240]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	4939      	ldr	r1, [pc, #228]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 800514e:	4313      	orrs	r3, r2
 8005150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d010      	beq.n	8005180 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	4b34      	ldr	r3, [pc, #208]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800516a:	429a      	cmp	r2, r3
 800516c:	d208      	bcs.n	8005180 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800516e:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	492e      	ldr	r1, [pc, #184]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 800517c:	4313      	orrs	r3, r2
 800517e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d010      	beq.n	80051ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	4b28      	ldr	r3, [pc, #160]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005198:	429a      	cmp	r2, r3
 800519a:	d208      	bcs.n	80051ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	4922      	ldr	r1, [pc, #136]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d010      	beq.n	80051dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	4b1d      	ldr	r3, [pc, #116]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d208      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4917      	ldr	r1, [pc, #92]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051dc:	f000 f834 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	4912      	ldr	r1, [pc, #72]	@ (8005238 <HAL_RCC_ClockConfig+0x35c>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <HAL_RCC_ClockConfig+0x358>)
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	4a0d      	ldr	r2, [pc, #52]	@ (8005238 <HAL_RCC_ClockConfig+0x35c>)
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_RCC_ClockConfig+0x360>)
 8005212:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005214:	4a0a      	ldr	r2, [pc, #40]	@ (8005240 <HAL_RCC_ClockConfig+0x364>)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x368>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fc fc4a 	bl	8001ab8 <HAL_InitTick>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	0800eba0 	.word	0x0800eba0
 800523c:	24000004 	.word	0x24000004
 8005240:	24000000 	.word	0x24000000
 8005244:	24000008 	.word	0x24000008

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	@ 0x24
 800524c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800524e:	4bb3      	ldr	r3, [pc, #716]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005256:	2b18      	cmp	r3, #24
 8005258:	f200 8155 	bhi.w	8005506 <HAL_RCC_GetSysClockFreq+0x2be>
 800525c:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <HAL_RCC_GetSysClockFreq+0x1c>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	080052c9 	.word	0x080052c9
 8005268:	08005507 	.word	0x08005507
 800526c:	08005507 	.word	0x08005507
 8005270:	08005507 	.word	0x08005507
 8005274:	08005507 	.word	0x08005507
 8005278:	08005507 	.word	0x08005507
 800527c:	08005507 	.word	0x08005507
 8005280:	08005507 	.word	0x08005507
 8005284:	080052ef 	.word	0x080052ef
 8005288:	08005507 	.word	0x08005507
 800528c:	08005507 	.word	0x08005507
 8005290:	08005507 	.word	0x08005507
 8005294:	08005507 	.word	0x08005507
 8005298:	08005507 	.word	0x08005507
 800529c:	08005507 	.word	0x08005507
 80052a0:	08005507 	.word	0x08005507
 80052a4:	080052f5 	.word	0x080052f5
 80052a8:	08005507 	.word	0x08005507
 80052ac:	08005507 	.word	0x08005507
 80052b0:	08005507 	.word	0x08005507
 80052b4:	08005507 	.word	0x08005507
 80052b8:	08005507 	.word	0x08005507
 80052bc:	08005507 	.word	0x08005507
 80052c0:	08005507 	.word	0x08005507
 80052c4:	080052fb 	.word	0x080052fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c8:	4b94      	ldr	r3, [pc, #592]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d4:	4b91      	ldr	r3, [pc, #580]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	4a90      	ldr	r2, [pc, #576]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052e6:	e111      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ea:	61bb      	str	r3, [r7, #24]
      break;
 80052ec:	e10e      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052f0:	61bb      	str	r3, [r7, #24]
      break;
 80052f2:	e10b      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052f6:	61bb      	str	r3, [r7, #24]
      break;
 80052f8:	e108      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052fa:	4b88      	ldr	r3, [pc, #544]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005304:	4b85      	ldr	r3, [pc, #532]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	091b      	lsrs	r3, r3, #4
 800530a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800530e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005310:	4b82      	ldr	r3, [pc, #520]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800531a:	4b80      	ldr	r3, [pc, #512]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531e:	08db      	lsrs	r3, r3, #3
 8005320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80e1 	beq.w	8005500 <HAL_RCC_GetSysClockFreq+0x2b8>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b02      	cmp	r3, #2
 8005342:	f000 8083 	beq.w	800544c <HAL_RCC_GetSysClockFreq+0x204>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b02      	cmp	r3, #2
 800534a:	f200 80a1 	bhi.w	8005490 <HAL_RCC_GetSysClockFreq+0x248>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x114>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d056      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x1c0>
 800535a:	e099      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800535c:	4b6f      	ldr	r3, [pc, #444]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02d      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005368:	4b6c      	ldr	r3, [pc, #432]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b62      	ldr	r3, [pc, #392]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053c2:	e087      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005530 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b51      	ldr	r3, [pc, #324]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005406:	e065      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005534 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541a:	4b40      	ldr	r3, [pc, #256]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a02 	vldr	s12, [r7, #8]
 800542e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800544a:	e043      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005538 <HAL_RCC_GetSysClockFreq+0x2f0>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	4b2f      	ldr	r3, [pc, #188]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005472:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800548e:	e021      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005534 <HAL_RCC_GetSysClockFreq+0x2ec>
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a2:	4b1e      	ldr	r3, [pc, #120]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054d4:	4b11      	ldr	r3, [pc, #68]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d8:	0a5b      	lsrs	r3, r3, #9
 80054da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054de:	3301      	adds	r3, #1
 80054e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f8:	ee17 3a90 	vmov	r3, s15
 80054fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054fe:	e005      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
      break;
 8005504:	e002      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005506:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005508:	61bb      	str	r3, [r7, #24]
      break;
 800550a:	bf00      	nop
  }

  return sysclockfreq;
 800550c:	69bb      	ldr	r3, [r7, #24]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3724      	adds	r7, #36	@ 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	58024400 	.word	0x58024400
 8005520:	03d09000 	.word	0x03d09000
 8005524:	003d0900 	.word	0x003d0900
 8005528:	017d7840 	.word	0x017d7840
 800552c:	46000000 	.word	0x46000000
 8005530:	4c742400 	.word	0x4c742400
 8005534:	4a742400 	.word	0x4a742400
 8005538:	4bbebc20 	.word	0x4bbebc20

0800553c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005542:	f7ff fe81 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005546:	4602      	mov	r2, r0
 8005548:	4b10      	ldr	r3, [pc, #64]	@ (800558c <HAL_RCC_GetHCLKFreq+0x50>)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	490f      	ldr	r1, [pc, #60]	@ (8005590 <HAL_RCC_GetHCLKFreq+0x54>)
 8005554:	5ccb      	ldrb	r3, [r1, r3]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005560:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCC_GetHCLKFreq+0x50>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4a09      	ldr	r2, [pc, #36]	@ (8005590 <HAL_RCC_GetHCLKFreq+0x54>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	fa22 f303 	lsr.w	r3, r2, r3
 8005576:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <HAL_RCC_GetHCLKFreq+0x58>)
 8005578:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800557a:	4a07      	ldr	r2, [pc, #28]	@ (8005598 <HAL_RCC_GetHCLKFreq+0x5c>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005580:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <HAL_RCC_GetHCLKFreq+0x58>)
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	58024400 	.word	0x58024400
 8005590:	0800eba0 	.word	0x0800eba0
 8005594:	24000004 	.word	0x24000004
 8005598:	24000000 	.word	0x24000000

0800559c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055a0:	f7ff ffcc 	bl	800553c <HAL_RCC_GetHCLKFreq>
 80055a4:	4602      	mov	r2, r0
 80055a6:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	4904      	ldr	r1, [pc, #16]	@ (80055c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055b2:	5ccb      	ldrb	r3, [r1, r3]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	58024400 	.word	0x58024400
 80055c4:	0800eba0 	.word	0x0800eba0

080055c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055cc:	f7ff ffb6 	bl	800553c <HAL_RCC_GetHCLKFreq>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	4904      	ldr	r1, [pc, #16]	@ (80055f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055de:	5ccb      	ldrb	r3, [r1, r3]
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	58024400 	.word	0x58024400
 80055f0:	0800eba0 	.word	0x0800eba0

080055f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f8:	b0ca      	sub	sp, #296	@ 0x128
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005606:	2300      	movs	r3, #0
 8005608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005618:	2500      	movs	r5, #0
 800561a:	ea54 0305 	orrs.w	r3, r4, r5
 800561e:	d049      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005626:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800562a:	d02f      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800562c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005630:	d828      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005632:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005636:	d01a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005638:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800563c:	d822      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005646:	d007      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005648:	e01c      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564a:	4bb8      	ldr	r3, [pc, #736]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	4ab7      	ldr	r2, [pc, #732]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005654:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005656:	e01a      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565c:	3308      	adds	r3, #8
 800565e:	2102      	movs	r1, #2
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fc8f 	bl	8006f84 <RCCEx_PLL2_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800566c:	e00f      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005672:	3328      	adds	r3, #40	@ 0x28
 8005674:	2102      	movs	r1, #2
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fd36 	bl	80070e8 <RCCEx_PLL3_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005682:	e004      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800568a:	e000      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800568c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005696:	4ba5      	ldr	r3, [pc, #660]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a4:	4aa1      	ldr	r2, [pc, #644]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a6:	430b      	orrs	r3, r1
 80056a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80056aa:	e003      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80056c0:	f04f 0900 	mov.w	r9, #0
 80056c4:	ea58 0309 	orrs.w	r3, r8, r9
 80056c8:	d047      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d82a      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056d4:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	080056f1 	.word	0x080056f1
 80056e0:	080056ff 	.word	0x080056ff
 80056e4:	08005715 	.word	0x08005715
 80056e8:	08005733 	.word	0x08005733
 80056ec:	08005733 	.word	0x08005733
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f0:	4b8e      	ldr	r3, [pc, #568]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	4a8d      	ldr	r2, [pc, #564]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056fc:	e01a      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	3308      	adds	r3, #8
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f001 fc3c 	bl	8006f84 <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005712:	e00f      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	3328      	adds	r3, #40	@ 0x28
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fce3 	bl	80070e8 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800573c:	4b7b      	ldr	r3, [pc, #492]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005740:	f023 0107 	bic.w	r1, r3, #7
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	4a78      	ldr	r2, [pc, #480]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800574c:	430b      	orrs	r3, r1
 800574e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005766:	f04f 0b00 	mov.w	fp, #0
 800576a:	ea5a 030b 	orrs.w	r3, sl, fp
 800576e:	d04c      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800577a:	d030      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800577c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005780:	d829      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005782:	2bc0      	cmp	r3, #192	@ 0xc0
 8005784:	d02d      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005786:	2bc0      	cmp	r3, #192	@ 0xc0
 8005788:	d825      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	d018      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800578e:	2b80      	cmp	r3, #128	@ 0x80
 8005790:	d821      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005796:	2b40      	cmp	r3, #64	@ 0x40
 8005798:	d007      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800579a:	e01c      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579c:	4b63      	ldr	r3, [pc, #396]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	4a62      	ldr	r2, [pc, #392]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057a8:	e01c      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	3308      	adds	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 fbe6 	bl	8006f84 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	3328      	adds	r3, #40	@ 0x28
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 fc8d 	bl	80070e8 <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057ec:	4b4f      	ldr	r3, [pc, #316]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fa:	4a4c      	ldr	r2, [pc, #304]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005816:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800581a:	2300      	movs	r3, #0
 800581c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005820:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005824:	460b      	mov	r3, r1
 8005826:	4313      	orrs	r3, r2
 8005828:	d053      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005836:	d035      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800583c:	d82e      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800583e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005842:	d031      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005844:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005848:	d828      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800584a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800584e:	d01a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005850:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005854:	d822      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800585a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800585e:	d007      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005860:	e01c      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005862:	4b32      	ldr	r3, [pc, #200]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	4a31      	ldr	r2, [pc, #196]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800586c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800586e:	e01c      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	3308      	adds	r3, #8
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fb83 	bl	8006f84 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005884:	e011      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3328      	adds	r3, #40	@ 0x28
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fc2a 	bl	80070e8 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800589a:	e006      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058b2:	4b1e      	ldr	r3, [pc, #120]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058c2:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c8:	e003      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058e2:	2300      	movs	r3, #0
 80058e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80058e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80058ec:	460b      	mov	r3, r1
 80058ee:	4313      	orrs	r3, r2
 80058f0:	d056      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058fe:	d038      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005904:	d831      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005906:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800590a:	d034      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800590c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005910:	d82b      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005912:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005916:	d01d      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005918:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800591c:	d825      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005928:	e01f      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4ba2      	ldr	r3, [pc, #648]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	4aa1      	ldr	r2, [pc, #644]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800593c:	e01c      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	3308      	adds	r3, #8
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f001 fb1c 	bl	8006f84 <RCCEx_PLL2_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005952:	e011      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	3328      	adds	r3, #40	@ 0x28
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fbc3 	bl	80070e8 <RCCEx_PLL3_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005980:	4b8e      	ldr	r3, [pc, #568]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005984:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005990:	4a8a      	ldr	r2, [pc, #552]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005992:	430b      	orrs	r3, r1
 8005994:	6593      	str	r3, [r2, #88]	@ 0x58
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800599c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d03a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c6:	2b30      	cmp	r3, #48	@ 0x30
 80059c8:	d01f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059ca:	2b30      	cmp	r3, #48	@ 0x30
 80059cc:	d819      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d00c      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d815      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d019      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d111      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059de:	4b77      	ldr	r3, [pc, #476]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	4a76      	ldr	r2, [pc, #472]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	3308      	adds	r3, #8
 80059f2:	2102      	movs	r1, #2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fac5 	bl	8006f84 <RCCEx_PLL2_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a18:	4b68      	ldr	r3, [pc, #416]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a26:	4a65      	ldr	r2, [pc, #404]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d051      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a60:	d035      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a66:	d82e      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a6c:	d031      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a72:	d828      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a78:	d01a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7e:	d822      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a88:	d007      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a8a:	e01c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a90:	4a4a      	ldr	r2, [pc, #296]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fa6e 	bl	8006f84 <RCCEx_PLL2_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aae:	e011      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	3328      	adds	r3, #40	@ 0x28
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fb15 	bl	80070e8 <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e006      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005acc:	e002      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005adc:	4b37      	ldr	r3, [pc, #220]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aea:	4a34      	ldr	r2, [pc, #208]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005af0:	e003      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b14:	460b      	mov	r3, r1
 8005b16:	4313      	orrs	r3, r2
 8005b18:	d056      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b24:	d033      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b2a:	d82c      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b30:	d02f      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b36:	d826      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b3c:	d02b      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b42:	d820      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b48:	d012      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b4e:	d81a      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d022      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b58:	d115      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	3308      	adds	r3, #8
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fa0e 	bl	8006f84 <RCCEx_PLL2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b6e:	e015      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	3328      	adds	r3, #40	@ 0x28
 8005b76:	2101      	movs	r1, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 fab5 	bl	80070e8 <RCCEx_PLL3_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b84:	e00a      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b8e:	bf00      	nop
 8005b90:	e004      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b92:	bf00      	nop
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb2:	4a02      	ldr	r2, [pc, #8]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d055      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bf4:	d033      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bfa:	d82c      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c00:	d02f      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c06:	d826      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c0c:	d02b      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c12:	d820      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c18:	d012      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c1e:	d81a      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d022      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c28:	d115      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2101      	movs	r1, #1
 8005c32:	4618      	mov	r0, r3
 8005c34:	f001 f9a6 	bl	8006f84 <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c3e:	e015      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c44:	3328      	adds	r3, #40	@ 0x28
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fa4d 	bl	80070e8 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c54:	e00a      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c74:	4ba3      	ldr	r3, [pc, #652]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c78:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c84:	4a9f      	ldr	r2, [pc, #636]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c86:	430b      	orrs	r3, r1
 8005c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d037      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cbe:	d00e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc4:	d816      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cce:	d111      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	4a8b      	ldr	r2, [pc, #556]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cdc:	e00f      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f94c 	bl	8006f84 <RCCEx_PLL2_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d06:	4b7f      	ldr	r3, [pc, #508]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d14:	4a7b      	ldr	r2, [pc, #492]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d16:	430b      	orrs	r3, r1
 8005d18:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d1a:	e003      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d039      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d81c      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d65 	.word	0x08005d65
 8005d5c:	08005d73 	.word	0x08005d73
 8005d60:	08005d91 	.word	0x08005d91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d64:	4b67      	ldr	r3, [pc, #412]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4a66      	ldr	r2, [pc, #408]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d70:	e00f      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d76:	3308      	adds	r3, #8
 8005d78:	2102      	movs	r1, #2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f902 	bl	8006f84 <RCCEx_PLL2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d86:	e004      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9e:	f023 0103 	bic.w	r1, r3, #3
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	4a56      	ldr	r2, [pc, #344]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005daa:	430b      	orrs	r3, r1
 8005dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f000 809f 	beq.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dda:	4b4b      	ldr	r3, [pc, #300]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a4a      	ldr	r2, [pc, #296]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de6:	f7fb feb1 	bl	8001b4c <HAL_GetTick>
 8005dea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dee:	e00b      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df0:	f7fb feac 	bl	8001b4c <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b64      	cmp	r3, #100	@ 0x64
 8005dfe:	d903      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e06:	e005      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e08:	4b3f      	ldr	r3, [pc, #252]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ed      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d179      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e1c:	4b39      	ldr	r3, [pc, #228]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e28:	4053      	eors	r3, r2
 8005e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e32:	4b34      	ldr	r3, [pc, #208]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b31      	ldr	r3, [pc, #196]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e42:	4a30      	ldr	r2, [pc, #192]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e56:	4a2b      	ldr	r2, [pc, #172]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e6a:	d118      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fb fe6e 	bl	8001b4c <HAL_GetTick>
 8005e70:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e74:	e00d      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fb fe69 	bl	8001b4c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d903      	bls.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e90:	e005      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e92:	4b1c      	ldr	r3, [pc, #112]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0eb      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d129      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb6:	d10e      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005eb8:	4b12      	ldr	r3, [pc, #72]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ec8:	091a      	lsrs	r2, r3, #4
 8005eca:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	4a0d      	ldr	r2, [pc, #52]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6113      	str	r3, [r2, #16]
 8005ed4:	e005      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	4a0a      	ldr	r2, [pc, #40]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005edc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ee0:	6113      	str	r3, [r2, #16]
 8005ee2:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef2:	4a04      	ldr	r2, [pc, #16]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef8:	e00e      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f02:	e009      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f04:	58024400 	.word	0x58024400
 8005f08:	58024800 	.word	0x58024800
 8005f0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f002 0301 	and.w	r3, r2, #1
 8005f24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f000 8089 	beq.w	800604c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f40:	2b28      	cmp	r3, #40	@ 0x28
 8005f42:	d86b      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f44:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08006025 	.word	0x08006025
 8005f50:	0800601d 	.word	0x0800601d
 8005f54:	0800601d 	.word	0x0800601d
 8005f58:	0800601d 	.word	0x0800601d
 8005f5c:	0800601d 	.word	0x0800601d
 8005f60:	0800601d 	.word	0x0800601d
 8005f64:	0800601d 	.word	0x0800601d
 8005f68:	0800601d 	.word	0x0800601d
 8005f6c:	08005ff1 	.word	0x08005ff1
 8005f70:	0800601d 	.word	0x0800601d
 8005f74:	0800601d 	.word	0x0800601d
 8005f78:	0800601d 	.word	0x0800601d
 8005f7c:	0800601d 	.word	0x0800601d
 8005f80:	0800601d 	.word	0x0800601d
 8005f84:	0800601d 	.word	0x0800601d
 8005f88:	0800601d 	.word	0x0800601d
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	0800601d 	.word	0x0800601d
 8005f94:	0800601d 	.word	0x0800601d
 8005f98:	0800601d 	.word	0x0800601d
 8005f9c:	0800601d 	.word	0x0800601d
 8005fa0:	0800601d 	.word	0x0800601d
 8005fa4:	0800601d 	.word	0x0800601d
 8005fa8:	0800601d 	.word	0x0800601d
 8005fac:	08006025 	.word	0x08006025
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	0800601d 	.word	0x0800601d
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800601d 	.word	0x0800601d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
 8005fe8:	0800601d 	.word	0x0800601d
 8005fec:	08006025 	.word	0x08006025
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 ffc3 	bl	8006f84 <RCCEx_PLL2_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006004:	e00f      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	3328      	adds	r3, #40	@ 0x28
 800600c:	2101      	movs	r1, #1
 800600e:	4618      	mov	r0, r3
 8006010:	f001 f86a 	bl	80070e8 <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800601a:	e004      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006022:	e000      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800602e:	4bbf      	ldr	r3, [pc, #764]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006032:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800603c:	4abb      	ldr	r2, [pc, #748]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603e:	430b      	orrs	r3, r1
 8006040:	6553      	str	r3, [r2, #84]	@ 0x54
 8006042:	e003      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f002 0302 	and.w	r3, r2, #2
 8006058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800605c:	2300      	movs	r3, #0
 800605e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006062:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d041      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006072:	2b05      	cmp	r3, #5
 8006074:	d824      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060c9 	.word	0x080060c9
 8006080:	08006095 	.word	0x08006095
 8006084:	080060ab 	.word	0x080060ab
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	3308      	adds	r3, #8
 800609a:	2101      	movs	r1, #1
 800609c:	4618      	mov	r0, r3
 800609e:	f000 ff71 	bl	8006f84 <RCCEx_PLL2_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060a8:	e00f      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ae:	3328      	adds	r3, #40	@ 0x28
 80060b0:	2101      	movs	r1, #1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 f818 	bl	80070e8 <RCCEx_PLL3_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060be:	e004      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060d2:	4b96      	ldr	r3, [pc, #600]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d6:	f023 0107 	bic.w	r1, r3, #7
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060e0:	4a92      	ldr	r2, [pc, #584]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80060e6:	e003      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f002 0304 	and.w	r3, r2, #4
 80060fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006106:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d044      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006118:	2b05      	cmp	r3, #5
 800611a:	d825      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800611c:	a201      	add	r2, pc, #4	@ (adr r2, 8006124 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006171 	.word	0x08006171
 8006128:	0800613d 	.word	0x0800613d
 800612c:	08006153 	.word	0x08006153
 8006130:	08006171 	.word	0x08006171
 8006134:	08006171 	.word	0x08006171
 8006138:	08006171 	.word	0x08006171
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	3308      	adds	r3, #8
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f000 ff1d 	bl	8006f84 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006150:	e00f      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006156:	3328      	adds	r3, #40	@ 0x28
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f000 ffc4 	bl	80070e8 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800617a:	4b6c      	ldr	r3, [pc, #432]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617e:	f023 0107 	bic.w	r1, r3, #7
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800618a:	4a68      	ldr	r2, [pc, #416]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800618c:	430b      	orrs	r3, r1
 800618e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006190:	e003      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f002 0320 	and.w	r3, r2, #32
 80061a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061aa:	2300      	movs	r3, #0
 80061ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061b4:	460b      	mov	r3, r1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	d055      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061c6:	d033      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061cc:	d82c      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d2:	d02f      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d8:	d826      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061de:	d02b      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061e4:	d820      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ea:	d012      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f0:	d81a      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d022      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061fa:	d115      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006200:	3308      	adds	r3, #8
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f000 febd 	bl	8006f84 <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006210:	e015      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006216:	3328      	adds	r3, #40	@ 0x28
 8006218:	2102      	movs	r1, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f000 ff64 	bl	80070e8 <RCCEx_PLL3_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006226:	e00a      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800622e:	e006      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006230:	bf00      	nop
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006234:	bf00      	nop
 8006236:	e002      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006238:	bf00      	nop
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006246:	4b39      	ldr	r3, [pc, #228]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006256:	4a35      	ldr	r2, [pc, #212]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6553      	str	r3, [r2, #84]	@ 0x54
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800627c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006280:	460b      	mov	r3, r1
 8006282:	4313      	orrs	r3, r2
 8006284:	d058      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800628e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006292:	d033      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006294:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006298:	d82c      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629e:	d02f      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a4:	d826      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062aa:	d02b      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062b0:	d820      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062b6:	d012      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062bc:	d81a      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d022      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c6:	d115      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062cc:	3308      	adds	r3, #8
 80062ce:	2100      	movs	r1, #0
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fe57 	bl	8006f84 <RCCEx_PLL2_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062dc:	e015      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3328      	adds	r3, #40	@ 0x28
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fefe 	bl	80070e8 <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062f2:	e00a      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062fa:	e006      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062fc:	bf00      	nop
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006300:	bf00      	nop
 8006302:	e002      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10e      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006312:	4b06      	ldr	r3, [pc, #24]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006316:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006322:	4a02      	ldr	r2, [pc, #8]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006324:	430b      	orrs	r3, r1
 8006326:	6593      	str	r3, [r2, #88]	@ 0x58
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800634e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006352:	460b      	mov	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	d055      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006360:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006364:	d033      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006366:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800636a:	d82c      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006370:	d02f      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006376:	d826      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006378:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800637c:	d02b      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800637e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006382:	d820      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006388:	d012      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800638e:	d81a      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d022      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006398:	d115      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639e:	3308      	adds	r3, #8
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fdee 	bl	8006f84 <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063ae:	e015      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	3328      	adds	r3, #40	@ 0x28
 80063b6:	2102      	movs	r1, #2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fe95 	bl	80070e8 <RCCEx_PLL3_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063c4:	e00a      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063cc:	e006      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ce:	bf00      	nop
 80063d0:	e004      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063d2:	bf00      	nop
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063e4:	4ba1      	ldr	r3, [pc, #644]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063f4:	4a9d      	ldr	r2, [pc, #628]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f002 0308 	and.w	r3, r2, #8
 8006410:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006414:	2300      	movs	r3, #0
 8006416:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800641a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800641e:	460b      	mov	r3, r1
 8006420:	4313      	orrs	r3, r2
 8006422:	d01e      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006430:	d10c      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	3328      	adds	r3, #40	@ 0x28
 8006438:	2102      	movs	r1, #2
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fe54 	bl	80070e8 <RCCEx_PLL3_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800644c:	4b87      	ldr	r3, [pc, #540]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006450:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800645c:	4a83      	ldr	r2, [pc, #524]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645e:	430b      	orrs	r3, r1
 8006460:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f002 0310 	and.w	r3, r2, #16
 800646e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006472:	2300      	movs	r3, #0
 8006474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006478:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800647c:	460b      	mov	r3, r1
 800647e:	4313      	orrs	r3, r2
 8006480:	d01e      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800648a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800648e:	d10c      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	3328      	adds	r3, #40	@ 0x28
 8006496:	2102      	movs	r1, #2
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fe25 	bl	80070e8 <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064aa:	4b70      	ldr	r3, [pc, #448]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ba:	4a6c      	ldr	r2, [pc, #432]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064bc:	430b      	orrs	r3, r1
 80064be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80064cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d03e      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ec:	d022      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064f2:	d81b      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fc:	d00b      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064fe:	e015      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006504:	3308      	adds	r3, #8
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fd3b 	bl	8006f84 <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	3328      	adds	r3, #40	@ 0x28
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fde2 	bl	80070e8 <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800652a:	e004      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800653e:	4b4b      	ldr	r3, [pc, #300]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006542:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800654e:	4a47      	ldr	r2, [pc, #284]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006550:	430b      	orrs	r3, r1
 8006552:	6593      	str	r3, [r2, #88]	@ 0x58
 8006554:	e003      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800656a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800656c:	2300      	movs	r3, #0
 800656e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006570:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d03b      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006586:	d01f      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006588:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800658c:	d818      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006592:	d003      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006594:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006598:	d007      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800659a:	e011      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4b33      	ldr	r3, [pc, #204]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a0:	4a32      	ldr	r2, [pc, #200]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065a8:	e00f      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	3328      	adds	r3, #40	@ 0x28
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fd98 	bl	80070e8 <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80065be:	e004      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065d2:	4b26      	ldr	r3, [pc, #152]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e2:	4a22      	ldr	r2, [pc, #136]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006600:	2300      	movs	r3, #0
 8006602:	677b      	str	r3, [r7, #116]	@ 0x74
 8006604:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d034      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661c:	d007      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800661e:	e011      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4b12      	ldr	r3, [pc, #72]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	4a11      	ldr	r2, [pc, #68]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800662c:	e00e      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	3308      	adds	r3, #8
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fca4 	bl	8006f84 <RCCEx_PLL2_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006642:	e003      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800664a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006654:	4b05      	ldr	r3, [pc, #20]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006658:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006662:	4a02      	ldr	r2, [pc, #8]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006664:	430b      	orrs	r3, r1
 8006666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006668:	e006      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006686:	2300      	movs	r3, #0
 8006688:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800668a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d00c      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006698:	3328      	adds	r3, #40	@ 0x28
 800669a:	2102      	movs	r1, #2
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fd23 	bl	80070e8 <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80066bc:	2300      	movs	r3, #0
 80066be:	667b      	str	r3, [r7, #100]	@ 0x64
 80066c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d038      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d6:	d018      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066dc:	d811      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e2:	d014      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e8:	d80b      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d011      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066f2:	d106      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4bc3      	ldr	r3, [pc, #780]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	4ac2      	ldr	r2, [pc, #776]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006700:	e008      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006708:	e004      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800671c:	4bb9      	ldr	r3, [pc, #740]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672c:	4ab5      	ldr	r2, [pc, #724]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672e:	430b      	orrs	r3, r1
 8006730:	6553      	str	r3, [r2, #84]	@ 0x54
 8006732:	e003      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006748:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674a:	2300      	movs	r3, #0
 800674c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800674e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d009      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006758:	4baa      	ldr	r3, [pc, #680]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800675a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800675c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006766:	4aa7      	ldr	r2, [pc, #668]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006778:	653b      	str	r3, [r7, #80]	@ 0x50
 800677a:	2300      	movs	r3, #0
 800677c:	657b      	str	r3, [r7, #84]	@ 0x54
 800677e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006788:	4b9e      	ldr	r3, [pc, #632]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006798:	4a9a      	ldr	r2, [pc, #616]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800679a:	430b      	orrs	r3, r1
 800679c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ac:	2300      	movs	r3, #0
 80067ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067ba:	4b92      	ldr	r3, [pc, #584]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067be:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c8:	4a8e      	ldr	r2, [pc, #568]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80067da:	643b      	str	r3, [r7, #64]	@ 0x40
 80067dc:	2300      	movs	r3, #0
 80067de:	647b      	str	r3, [r7, #68]	@ 0x44
 80067e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067ea:	4b86      	ldr	r3, [pc, #536]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	4a85      	ldr	r2, [pc, #532]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067f4:	6113      	str	r3, [r2, #16]
 80067f6:	4b83      	ldr	r3, [pc, #524]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f8:	6919      	ldr	r1, [r3, #16]
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006802:	4a80      	ldr	r2, [pc, #512]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006814:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800681a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006824:	4b77      	ldr	r3, [pc, #476]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006828:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	4a74      	ldr	r2, [pc, #464]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006834:	430b      	orrs	r3, r1
 8006836:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006844:	633b      	str	r3, [r7, #48]	@ 0x30
 8006846:	2300      	movs	r3, #0
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
 800684a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800684e:	460b      	mov	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006854:	4b6b      	ldr	r3, [pc, #428]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006858:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006864:	4a67      	ldr	r2, [pc, #412]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006866:	430b      	orrs	r3, r1
 8006868:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	2100      	movs	r1, #0
 8006874:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800687c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d011      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	3308      	adds	r3, #8
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fb78 	bl	8006f84 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	2100      	movs	r1, #0
 80068b4:	6239      	str	r1, [r7, #32]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d011      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	3308      	adds	r3, #8
 80068cc:	2101      	movs	r1, #1
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fb58 	bl	8006f84 <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	2100      	movs	r1, #0
 80068f4:	61b9      	str	r1, [r7, #24]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d011      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	3308      	adds	r3, #8
 800690c:	2102      	movs	r1, #2
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fb38 	bl	8006f84 <RCCEx_PLL2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	2100      	movs	r1, #0
 8006934:	6139      	str	r1, [r7, #16]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006940:	460b      	mov	r3, r1
 8006942:	4313      	orrs	r3, r2
 8006944:	d011      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	3328      	adds	r3, #40	@ 0x28
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fbca 	bl	80070e8 <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800695a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	2100      	movs	r1, #0
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d011      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698a:	3328      	adds	r3, #40	@ 0x28
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fbaa 	bl	80070e8 <RCCEx_PLL3_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800699a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	2100      	movs	r1, #0
 80069b4:	6039      	str	r1, [r7, #0]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069c0:	460b      	mov	r3, r1
 80069c2:	4313      	orrs	r3, r2
 80069c4:	d011      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ca:	3328      	adds	r3, #40	@ 0x28
 80069cc:	2102      	movs	r1, #2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fb8a 	bl	80070e8 <RCCEx_PLL3_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80069ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a04:	58024400 	.word	0x58024400

08006a08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a0c:	f7fe fd96 	bl	800553c <HAL_RCC_GetHCLKFreq>
 8006a10:	4602      	mov	r2, r0
 8006a12:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	091b      	lsrs	r3, r3, #4
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	4904      	ldr	r1, [pc, #16]	@ (8006a30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a1e:	5ccb      	ldrb	r3, [r1, r3]
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	0800eba0 	.word	0x0800eba0

08006a34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	@ 0x24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a3c:	4ba1      	ldr	r3, [pc, #644]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a46:	4b9f      	ldr	r3, [pc, #636]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4a:	0b1b      	lsrs	r3, r3, #12
 8006a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a52:	4b9c      	ldr	r3, [pc, #624]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a5e:	4b99      	ldr	r3, [pc, #612]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	08db      	lsrs	r3, r3, #3
 8006a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8111 	beq.w	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f000 8083 	beq.w	8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	f200 80a1 	bhi.w	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d056      	beq.n	8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a9e:	e099      	b.n	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa0:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02d      	beq.n	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aac:	4b85      	ldr	r3, [pc, #532]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	08db      	lsrs	r3, r3, #3
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	4a84      	ldr	r2, [pc, #528]	@ (8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8006abc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b06:	e087      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4a:	e065      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b59      	ldr	r3, [pc, #356]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b8e:	e043      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b48      	ldr	r3, [pc, #288]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd2:	e021      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	4b37      	ldr	r3, [pc, #220]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c18:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	0a5b      	lsrs	r3, r3, #9
 8006c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3e:	ee17 2a90 	vmov	r2, s15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c46:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6c:	ee17 2a90 	vmov	r2, s15
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c74:	4b13      	ldr	r3, [pc, #76]	@ (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	0e1b      	lsrs	r3, r3, #24
 8006c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9a:	ee17 2a90 	vmov	r2, s15
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	3724      	adds	r7, #36	@ 0x24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	03d09000 	.word	0x03d09000
 8006ccc:	46000000 	.word	0x46000000
 8006cd0:	4c742400 	.word	0x4c742400
 8006cd4:	4a742400 	.word	0x4a742400
 8006cd8:	4bbebc20 	.word	0x4bbebc20

08006cdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b089      	sub	sp, #36	@ 0x24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ce4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cee:	4b9f      	ldr	r3, [pc, #636]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf2:	0d1b      	lsrs	r3, r3, #20
 8006cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	0a1b      	lsrs	r3, r3, #8
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d06:	4b99      	ldr	r3, [pc, #612]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	08db      	lsrs	r3, r3, #3
 8006d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	fb02 f303 	mul.w	r3, r2, r3
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8111 	beq.w	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	f000 8083 	beq.w	8006e38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	f200 80a1 	bhi.w	8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d056      	beq.n	8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d46:	e099      	b.n	8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d48:	4b88      	ldr	r3, [pc, #544]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d02d      	beq.n	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d54:	4b85      	ldr	r3, [pc, #532]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	08db      	lsrs	r3, r3, #3
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	4a84      	ldr	r2, [pc, #528]	@ (8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d60:	fa22 f303 	lsr.w	r3, r2, r3
 8006d64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006daa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dae:	e087      	b.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df2:	e065      	b.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e06:	4b59      	ldr	r3, [pc, #356]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e36:	e043      	b.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4a:	4b48      	ldr	r3, [pc, #288]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e7a:	e021      	b.n	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b37      	ldr	r3, [pc, #220]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ebe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	0a5b      	lsrs	r3, r3, #9
 8006ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee6:	ee17 2a90 	vmov	r2, s15
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006eee:	4b1f      	ldr	r3, [pc, #124]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	0c1b      	lsrs	r3, r3, #16
 8006ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef8:	ee07 3a90 	vmov	s15, r3
 8006efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f14:	ee17 2a90 	vmov	r2, s15
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f1c:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	0e1b      	lsrs	r3, r3, #24
 8006f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f42:	ee17 2a90 	vmov	r2, s15
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f4a:	e008      	b.n	8006f5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	609a      	str	r2, [r3, #8]
}
 8006f5e:	bf00      	nop
 8006f60:	3724      	adds	r7, #36	@ 0x24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	03d09000 	.word	0x03d09000
 8006f74:	46000000 	.word	0x46000000
 8006f78:	4c742400 	.word	0x4c742400
 8006f7c:	4a742400 	.word	0x4a742400
 8006f80:	4bbebc20 	.word	0x4bbebc20

08006f84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f92:	4b53      	ldr	r3, [pc, #332]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d101      	bne.n	8006fa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e099      	b.n	80070d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8006fa8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fae:	f7fa fdcd 	bl	8001b4c <HAL_GetTick>
 8006fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fb6:	f7fa fdc9 	bl	8001b4c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e086      	b.n	80070d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fc8:	4b45      	ldr	r3, [pc, #276]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fd4:	4b42      	ldr	r3, [pc, #264]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	031b      	lsls	r3, r3, #12
 8006fe2:	493f      	ldr	r1, [pc, #252]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	025b      	lsls	r3, r3, #9
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	3b01      	subs	r3, #1
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	3b01      	subs	r3, #1
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007018:	4931      	ldr	r1, [pc, #196]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800701e:	4b30      	ldr	r3, [pc, #192]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	492d      	ldr	r1, [pc, #180]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800702c:	4313      	orrs	r3, r2
 800702e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007030:	4b2b      	ldr	r3, [pc, #172]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007034:	f023 0220 	bic.w	r2, r3, #32
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	4928      	ldr	r1, [pc, #160]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007042:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	4a26      	ldr	r2, [pc, #152]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007048:	f023 0310 	bic.w	r3, r3, #16
 800704c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800704e:	4b24      	ldr	r3, [pc, #144]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007052:	4b24      	ldr	r3, [pc, #144]	@ (80070e4 <RCCEx_PLL2_Config+0x160>)
 8007054:	4013      	ands	r3, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	69d2      	ldr	r2, [r2, #28]
 800705a:	00d2      	lsls	r2, r2, #3
 800705c:	4920      	ldr	r1, [pc, #128]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007062:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007068:	f043 0310 	orr.w	r3, r3, #16
 800706c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800707a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800707e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007080:	e00f      	b.n	80070a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d106      	bne.n	8007096 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007088:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	4a14      	ldr	r2, [pc, #80]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800708e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007094:	e005      	b.n	80070a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007096:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4a11      	ldr	r2, [pc, #68]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 800709c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070a2:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 80070a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ae:	f7fa fd4d 	bl	8001b4c <HAL_GetTick>
 80070b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070b4:	e008      	b.n	80070c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070b6:	f7fa fd49 	bl	8001b4c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e006      	b.n	80070d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070c8:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <RCCEx_PLL2_Config+0x15c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0f0      	beq.n	80070b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400
 80070e4:	ffff0007 	.word	0xffff0007

080070e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070f6:	4b53      	ldr	r3, [pc, #332]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d101      	bne.n	8007106 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e099      	b.n	800723a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007106:	4b4f      	ldr	r3, [pc, #316]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a4e      	ldr	r2, [pc, #312]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 800710c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007112:	f7fa fd1b 	bl	8001b4c <HAL_GetTick>
 8007116:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007118:	e008      	b.n	800712c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800711a:	f7fa fd17 	bl	8001b4c <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e086      	b.n	800723a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800712c:	4b45      	ldr	r3, [pc, #276]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007138:	4b42      	ldr	r3, [pc, #264]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 800713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	493f      	ldr	r1, [pc, #252]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	628b      	str	r3, [r1, #40]	@ 0x28
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	3b01      	subs	r3, #1
 8007152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	025b      	lsls	r3, r3, #9
 800715e:	b29b      	uxth	r3, r3
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	3b01      	subs	r3, #1
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	3b01      	subs	r3, #1
 8007176:	061b      	lsls	r3, r3, #24
 8007178:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800717c:	4931      	ldr	r1, [pc, #196]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 800717e:	4313      	orrs	r3, r2
 8007180:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007182:	4b30      	ldr	r3, [pc, #192]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	492d      	ldr	r1, [pc, #180]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007190:	4313      	orrs	r3, r2
 8007192:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007194:	4b2b      	ldr	r3, [pc, #172]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	4928      	ldr	r1, [pc, #160]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071a6:	4b27      	ldr	r3, [pc, #156]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	4a26      	ldr	r2, [pc, #152]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071b2:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071b6:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <RCCEx_PLL3_Config+0x160>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	69d2      	ldr	r2, [r2, #28]
 80071be:	00d2      	lsls	r2, r2, #3
 80071c0:	4920      	ldr	r1, [pc, #128]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	4a19      	ldr	r2, [pc, #100]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071e4:	e00f      	b.n	8007206 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d106      	bne.n	80071fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071ec:	4b15      	ldr	r3, [pc, #84]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	4a14      	ldr	r2, [pc, #80]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071f8:	e005      	b.n	8007206 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071fa:	4b12      	ldr	r3, [pc, #72]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	4a11      	ldr	r2, [pc, #68]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007200:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007204:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007206:	4b0f      	ldr	r3, [pc, #60]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a0e      	ldr	r2, [pc, #56]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 800720c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007212:	f7fa fc9b 	bl	8001b4c <HAL_GetTick>
 8007216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007218:	e008      	b.n	800722c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800721a:	f7fa fc97 	bl	8001b4c <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e006      	b.n	800723a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800722c:	4b05      	ldr	r3, [pc, #20]	@ (8007244 <RCCEx_PLL3_Config+0x15c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	58024400 	.word	0x58024400
 8007248:	ffff0007 	.word	0xffff0007

0800724c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e049      	b.n	80072f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fa fa72 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f000 fe56 	bl	8007f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e04c      	b.n	80073ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a26      	ldr	r2, [pc, #152]	@ (80073bc <HAL_TIM_Base_Start+0xc0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d022      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800732e:	d01d      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a22      	ldr	r2, [pc, #136]	@ (80073c0 <HAL_TIM_Base_Start+0xc4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d018      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a21      	ldr	r2, [pc, #132]	@ (80073c4 <HAL_TIM_Base_Start+0xc8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d013      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1f      	ldr	r2, [pc, #124]	@ (80073c8 <HAL_TIM_Base_Start+0xcc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1e      	ldr	r2, [pc, #120]	@ (80073cc <HAL_TIM_Base_Start+0xd0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1c      	ldr	r2, [pc, #112]	@ (80073d0 <HAL_TIM_Base_Start+0xd4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_TIM_Base_Start+0x70>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1b      	ldr	r2, [pc, #108]	@ (80073d4 <HAL_TIM_Base_Start+0xd8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d115      	bne.n	8007398 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	4b19      	ldr	r3, [pc, #100]	@ (80073d8 <HAL_TIM_Base_Start+0xdc>)
 8007374:	4013      	ands	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b06      	cmp	r3, #6
 800737c:	d015      	beq.n	80073aa <HAL_TIM_Base_Start+0xae>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007384:	d011      	beq.n	80073aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007396:	e008      	b.n	80073aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e000      	b.n	80073ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	40010400 	.word	0x40010400
 80073d0:	40001800 	.word	0x40001800
 80073d4:	40014000 	.word	0x40014000
 80073d8:	00010007 	.word	0x00010007

080073dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d001      	beq.n	80073f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e054      	b.n	800749e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a26      	ldr	r2, [pc, #152]	@ (80074ac <HAL_TIM_Base_Start_IT+0xd0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d022      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800741e:	d01d      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a22      	ldr	r2, [pc, #136]	@ (80074b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d018      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a21      	ldr	r2, [pc, #132]	@ (80074b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d013      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1f      	ldr	r2, [pc, #124]	@ (80074b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00e      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a1e      	ldr	r2, [pc, #120]	@ (80074bc <HAL_TIM_Base_Start_IT+0xe0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d009      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1c      	ldr	r2, [pc, #112]	@ (80074c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d004      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x80>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1b      	ldr	r2, [pc, #108]	@ (80074c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d115      	bne.n	8007488 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	4b19      	ldr	r3, [pc, #100]	@ (80074c8 <HAL_TIM_Base_Start_IT+0xec>)
 8007464:	4013      	ands	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b06      	cmp	r3, #6
 800746c:	d015      	beq.n	800749a <HAL_TIM_Base_Start_IT+0xbe>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007474:	d011      	beq.n	800749a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0201 	orr.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007486:	e008      	b.n	800749a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e000      	b.n	800749c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40010400 	.word	0x40010400
 80074c0:	40001800 	.word	0x40001800
 80074c4:	40014000 	.word	0x40014000
 80074c8:	00010007 	.word	0x00010007

080074cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e049      	b.n	8007572 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fa f958 	bl	80017a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f000 fd16 	bl	8007f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d109      	bne.n	80075a0 <HAL_TIM_PWM_Start+0x24>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b01      	cmp	r3, #1
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e03c      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d109      	bne.n	80075ba <HAL_TIM_PWM_Start+0x3e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	bf14      	ite	ne
 80075b2:	2301      	movne	r3, #1
 80075b4:	2300      	moveq	r3, #0
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	e02f      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d109      	bne.n	80075d4 <HAL_TIM_PWM_Start+0x58>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	bf14      	ite	ne
 80075cc:	2301      	movne	r3, #1
 80075ce:	2300      	moveq	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	e022      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b0c      	cmp	r3, #12
 80075d8:	d109      	bne.n	80075ee <HAL_TIM_PWM_Start+0x72>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	e015      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d109      	bne.n	8007608 <HAL_TIM_PWM_Start+0x8c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	bf14      	ite	ne
 8007600:	2301      	movne	r3, #1
 8007602:	2300      	moveq	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e008      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0a1      	b.n	8007766 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <HAL_TIM_PWM_Start+0xb6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007630:	e023      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b04      	cmp	r3, #4
 8007636:	d104      	bne.n	8007642 <HAL_TIM_PWM_Start+0xc6>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007640:	e01b      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d104      	bne.n	8007652 <HAL_TIM_PWM_Start+0xd6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007650:	e013      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b0c      	cmp	r3, #12
 8007656:	d104      	bne.n	8007662 <HAL_TIM_PWM_Start+0xe6>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007660:	e00b      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b10      	cmp	r3, #16
 8007666:	d104      	bne.n	8007672 <HAL_TIM_PWM_Start+0xf6>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007670:	e003      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f001 f874 	bl	8008770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a38      	ldr	r2, [pc, #224]	@ (8007770 <HAL_TIM_PWM_Start+0x1f4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <HAL_TIM_PWM_Start+0x13e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a37      	ldr	r2, [pc, #220]	@ (8007774 <HAL_TIM_PWM_Start+0x1f8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_TIM_PWM_Start+0x13e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a35      	ldr	r2, [pc, #212]	@ (8007778 <HAL_TIM_PWM_Start+0x1fc>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIM_PWM_Start+0x13e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a34      	ldr	r2, [pc, #208]	@ (800777c <HAL_TIM_PWM_Start+0x200>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIM_PWM_Start+0x13e>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a32      	ldr	r2, [pc, #200]	@ (8007780 <HAL_TIM_PWM_Start+0x204>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d101      	bne.n	80076be <HAL_TIM_PWM_Start+0x142>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <HAL_TIM_PWM_Start+0x144>
 80076be:	2300      	movs	r3, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a25      	ldr	r2, [pc, #148]	@ (8007770 <HAL_TIM_PWM_Start+0x1f4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e6:	d01d      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a25      	ldr	r2, [pc, #148]	@ (8007784 <HAL_TIM_PWM_Start+0x208>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a24      	ldr	r2, [pc, #144]	@ (8007788 <HAL_TIM_PWM_Start+0x20c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	@ (800778c <HAL_TIM_PWM_Start+0x210>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1a      	ldr	r2, [pc, #104]	@ (8007774 <HAL_TIM_PWM_Start+0x1f8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1e      	ldr	r2, [pc, #120]	@ (8007790 <HAL_TIM_PWM_Start+0x214>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_TIM_PWM_Start+0x1a8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a16      	ldr	r2, [pc, #88]	@ (8007778 <HAL_TIM_PWM_Start+0x1fc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d115      	bne.n	8007750 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	4b1a      	ldr	r3, [pc, #104]	@ (8007794 <HAL_TIM_PWM_Start+0x218>)
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b06      	cmp	r3, #6
 8007734:	d015      	beq.n	8007762 <HAL_TIM_PWM_Start+0x1e6>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800773c:	d011      	beq.n	8007762 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0201 	orr.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	e008      	b.n	8007762 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e000      	b.n	8007764 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	40010400 	.word	0x40010400
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40000c00 	.word	0x40000c00
 8007790:	40001800 	.word	0x40001800
 8007794:	00010007 	.word	0x00010007

08007798 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2200      	movs	r2, #0
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 ffe0 	bl	8008770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a3e      	ldr	r2, [pc, #248]	@ (80078b0 <HAL_TIM_PWM_Stop+0x118>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d013      	beq.n	80077e2 <HAL_TIM_PWM_Stop+0x4a>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a3d      	ldr	r2, [pc, #244]	@ (80078b4 <HAL_TIM_PWM_Stop+0x11c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00e      	beq.n	80077e2 <HAL_TIM_PWM_Stop+0x4a>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3b      	ldr	r2, [pc, #236]	@ (80078b8 <HAL_TIM_PWM_Stop+0x120>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d009      	beq.n	80077e2 <HAL_TIM_PWM_Stop+0x4a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3a      	ldr	r2, [pc, #232]	@ (80078bc <HAL_TIM_PWM_Stop+0x124>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d004      	beq.n	80077e2 <HAL_TIM_PWM_Stop+0x4a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a38      	ldr	r2, [pc, #224]	@ (80078c0 <HAL_TIM_PWM_Stop+0x128>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d101      	bne.n	80077e6 <HAL_TIM_PWM_Stop+0x4e>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <HAL_TIM_PWM_Stop+0x50>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d017      	beq.n	800781c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6a1a      	ldr	r2, [r3, #32]
 80077f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10f      	bne.n	800781c <HAL_TIM_PWM_Stop+0x84>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a1a      	ldr	r2, [r3, #32]
 8007802:	f240 4344 	movw	r3, #1092	@ 0x444
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <HAL_TIM_PWM_Stop+0x84>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800781a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a1a      	ldr	r2, [r3, #32]
 8007822:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10f      	bne.n	800784c <HAL_TIM_PWM_Stop+0xb4>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a1a      	ldr	r2, [r3, #32]
 8007832:	f240 4344 	movw	r3, #1092	@ 0x444
 8007836:	4013      	ands	r3, r2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d107      	bne.n	800784c <HAL_TIM_PWM_Stop+0xb4>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <HAL_TIM_PWM_Stop+0xc4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800785a:	e023      	b.n	80078a4 <HAL_TIM_PWM_Stop+0x10c>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b04      	cmp	r3, #4
 8007860:	d104      	bne.n	800786c <HAL_TIM_PWM_Stop+0xd4>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800786a:	e01b      	b.n	80078a4 <HAL_TIM_PWM_Stop+0x10c>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b08      	cmp	r3, #8
 8007870:	d104      	bne.n	800787c <HAL_TIM_PWM_Stop+0xe4>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800787a:	e013      	b.n	80078a4 <HAL_TIM_PWM_Stop+0x10c>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b0c      	cmp	r3, #12
 8007880:	d104      	bne.n	800788c <HAL_TIM_PWM_Stop+0xf4>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800788a:	e00b      	b.n	80078a4 <HAL_TIM_PWM_Stop+0x10c>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b10      	cmp	r3, #16
 8007890:	d104      	bne.n	800789c <HAL_TIM_PWM_Stop+0x104>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800789a:	e003      	b.n	80078a4 <HAL_TIM_PWM_Stop+0x10c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40014400 	.word	0x40014400
 80078c0:	40014800 	.word	0x40014800

080078c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d020      	beq.n	8007928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01b      	beq.n	8007928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0202 	mvn.w	r2, #2
 80078f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 faf6 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 8007914:	e005      	b.n	8007922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fae8 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 faf9 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d020      	beq.n	8007974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01b      	beq.n	8007974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0204 	mvn.w	r2, #4
 8007944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fad0 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 8007960:	e005      	b.n	800796e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fac2 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fad3 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d020      	beq.n	80079c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01b      	beq.n	80079c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0208 	mvn.w	r2, #8
 8007990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2204      	movs	r2, #4
 8007996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 faaa 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 80079ac:	e005      	b.n	80079ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa9c 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 faad 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f003 0310 	and.w	r3, r3, #16
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d020      	beq.n	8007a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01b      	beq.n	8007a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0210 	mvn.w	r2, #16
 80079dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2208      	movs	r2, #8
 80079e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa84 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 80079f8:	e005      	b.n	8007a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa76 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fa87 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00c      	beq.n	8007a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f06f 0201 	mvn.w	r2, #1
 8007a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7f9 fc68 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 ff47 	bl	80088ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 ff3f 	bl	8008900 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00c      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fa41 	bl	8007f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00c      	beq.n	8007aca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f06f 0220 	mvn.w	r2, #32
 8007ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 ff07 	bl	80088d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d101      	bne.n	8007af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007aee:	2302      	movs	r3, #2
 8007af0:	e0ff      	b.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b14      	cmp	r3, #20
 8007afe:	f200 80f0 	bhi.w	8007ce2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b02:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b5d 	.word	0x08007b5d
 8007b0c:	08007ce3 	.word	0x08007ce3
 8007b10:	08007ce3 	.word	0x08007ce3
 8007b14:	08007ce3 	.word	0x08007ce3
 8007b18:	08007b9d 	.word	0x08007b9d
 8007b1c:	08007ce3 	.word	0x08007ce3
 8007b20:	08007ce3 	.word	0x08007ce3
 8007b24:	08007ce3 	.word	0x08007ce3
 8007b28:	08007bdf 	.word	0x08007bdf
 8007b2c:	08007ce3 	.word	0x08007ce3
 8007b30:	08007ce3 	.word	0x08007ce3
 8007b34:	08007ce3 	.word	0x08007ce3
 8007b38:	08007c1f 	.word	0x08007c1f
 8007b3c:	08007ce3 	.word	0x08007ce3
 8007b40:	08007ce3 	.word	0x08007ce3
 8007b44:	08007ce3 	.word	0x08007ce3
 8007b48:	08007c61 	.word	0x08007c61
 8007b4c:	08007ce3 	.word	0x08007ce3
 8007b50:	08007ce3 	.word	0x08007ce3
 8007b54:	08007ce3 	.word	0x08007ce3
 8007b58:	08007ca1 	.word	0x08007ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fa90 	bl	8008088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0208 	orr.w	r2, r2, #8
 8007b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0204 	bic.w	r2, r2, #4
 8007b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6999      	ldr	r1, [r3, #24]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	619a      	str	r2, [r3, #24]
      break;
 8007b9a:	e0a5      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb00 	bl	80081a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6999      	ldr	r1, [r3, #24]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	021a      	lsls	r2, r3, #8
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	619a      	str	r2, [r3, #24]
      break;
 8007bdc:	e084      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fb69 	bl	80082bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0208 	orr.w	r2, r2, #8
 8007bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69da      	ldr	r2, [r3, #28]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0204 	bic.w	r2, r2, #4
 8007c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69d9      	ldr	r1, [r3, #28]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	61da      	str	r2, [r3, #28]
      break;
 8007c1c:	e064      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fbd1 	bl	80083cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69da      	ldr	r2, [r3, #28]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69d9      	ldr	r1, [r3, #28]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	021a      	lsls	r2, r3, #8
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	61da      	str	r2, [r3, #28]
      break;
 8007c5e:	e043      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fc1a 	bl	80084a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0208 	orr.w	r2, r2, #8
 8007c7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0204 	bic.w	r2, r2, #4
 8007c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	691a      	ldr	r2, [r3, #16]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c9e:	e023      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fc5e 	bl	8008568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	021a      	lsls	r2, r3, #8
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ce0:	e002      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_TIM_ConfigClockSource+0x1c>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e0dc      	b.n	8007ed2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	4b6a      	ldr	r3, [pc, #424]	@ (8007edc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a64      	ldr	r2, [pc, #400]	@ (8007ee0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	f000 80a9 	beq.w	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d54:	4a62      	ldr	r2, [pc, #392]	@ (8007ee0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	f200 80ae 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d5c:	4a61      	ldr	r2, [pc, #388]	@ (8007ee4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	f000 80a1 	beq.w	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d64:	4a5f      	ldr	r2, [pc, #380]	@ (8007ee4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	f200 80a6 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ee8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	f000 8099 	beq.w	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d74:	4a5c      	ldr	r2, [pc, #368]	@ (8007ee8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	f200 809e 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d80:	f000 8091 	beq.w	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d88:	f200 8096 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d90:	f000 8089 	beq.w	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d98:	f200 808e 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da0:	d03e      	beq.n	8007e20 <HAL_TIM_ConfigClockSource+0x124>
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007da6:	f200 8087 	bhi.w	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dae:	f000 8086 	beq.w	8007ebe <HAL_TIM_ConfigClockSource+0x1c2>
 8007db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db6:	d87f      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007db8:	2b70      	cmp	r3, #112	@ 0x70
 8007dba:	d01a      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0xf6>
 8007dbc:	2b70      	cmp	r3, #112	@ 0x70
 8007dbe:	d87b      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc0:	2b60      	cmp	r3, #96	@ 0x60
 8007dc2:	d050      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x16a>
 8007dc4:	2b60      	cmp	r3, #96	@ 0x60
 8007dc6:	d877      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc8:	2b50      	cmp	r3, #80	@ 0x50
 8007dca:	d03c      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x14a>
 8007dcc:	2b50      	cmp	r3, #80	@ 0x50
 8007dce:	d873      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d058      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x18a>
 8007dd4:	2b40      	cmp	r3, #64	@ 0x40
 8007dd6:	d86f      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd8:	2b30      	cmp	r3, #48	@ 0x30
 8007dda:	d064      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ddc:	2b30      	cmp	r3, #48	@ 0x30
 8007dde:	d86b      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d060      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d867      	bhi.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d05c      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d05a      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007df0:	e062      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e02:	f000 fc95 	bl	8008730 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	609a      	str	r2, [r3, #8]
      break;
 8007e1e:	e04f      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e30:	f000 fc7e 	bl	8008730 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e42:	609a      	str	r2, [r3, #8]
      break;
 8007e44:	e03c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 fbee 	bl	8008634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2150      	movs	r1, #80	@ 0x50
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fc48 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007e64:	e02c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 fc0d 	bl	8008692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2160      	movs	r1, #96	@ 0x60
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fc38 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007e84:	e01c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e92:	461a      	mov	r2, r3
 8007e94:	f000 fbce 	bl	8008634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2140      	movs	r1, #64	@ 0x40
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fc28 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007ea4:	e00c      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f000 fc1f 	bl	80086f4 <TIM_ITRx_SetConfig>
      break;
 8007eb6:	e003      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
      break;
 8007ebc:	e000      	b.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	ffceff88 	.word	0xffceff88
 8007ee0:	00100040 	.word	0x00100040
 8007ee4:	00100030 	.word	0x00100030
 8007ee8:	00100020 	.word	0x00100020

08007eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a46      	ldr	r2, [pc, #280]	@ (8008068 <TIM_Base_SetConfig+0x12c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5a:	d00f      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a43      	ldr	r2, [pc, #268]	@ (800806c <TIM_Base_SetConfig+0x130>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00b      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a42      	ldr	r2, [pc, #264]	@ (8008070 <TIM_Base_SetConfig+0x134>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d007      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a41      	ldr	r2, [pc, #260]	@ (8008074 <TIM_Base_SetConfig+0x138>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a40      	ldr	r2, [pc, #256]	@ (8008078 <TIM_Base_SetConfig+0x13c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d108      	bne.n	8007f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a35      	ldr	r2, [pc, #212]	@ (8008068 <TIM_Base_SetConfig+0x12c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d01f      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9c:	d01b      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a32      	ldr	r2, [pc, #200]	@ (800806c <TIM_Base_SetConfig+0x130>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d017      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a31      	ldr	r2, [pc, #196]	@ (8008070 <TIM_Base_SetConfig+0x134>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d013      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a30      	ldr	r2, [pc, #192]	@ (8008074 <TIM_Base_SetConfig+0x138>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00f      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8008078 <TIM_Base_SetConfig+0x13c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00b      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800807c <TIM_Base_SetConfig+0x140>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d007      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008080 <TIM_Base_SetConfig+0x144>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <TIM_Base_SetConfig+0x9a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8008084 <TIM_Base_SetConfig+0x148>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d108      	bne.n	8007fe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a16      	ldr	r2, [pc, #88]	@ (8008068 <TIM_Base_SetConfig+0x12c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00f      	beq.n	8008034 <TIM_Base_SetConfig+0xf8>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a18      	ldr	r2, [pc, #96]	@ (8008078 <TIM_Base_SetConfig+0x13c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00b      	beq.n	8008034 <TIM_Base_SetConfig+0xf8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a17      	ldr	r2, [pc, #92]	@ (800807c <TIM_Base_SetConfig+0x140>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d007      	beq.n	8008034 <TIM_Base_SetConfig+0xf8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a16      	ldr	r2, [pc, #88]	@ (8008080 <TIM_Base_SetConfig+0x144>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_Base_SetConfig+0xf8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <TIM_Base_SetConfig+0x148>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d103      	bne.n	800803c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b01      	cmp	r3, #1
 800804c:	d105      	bne.n	800805a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	611a      	str	r2, [r3, #16]
  }
}
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40010000 	.word	0x40010000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800

08008088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f023 0201 	bic.w	r2, r3, #1
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	4b37      	ldr	r3, [pc, #220]	@ (8008190 <TIM_OC1_SetConfig+0x108>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f023 0302 	bic.w	r3, r3, #2
 80080d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a2d      	ldr	r2, [pc, #180]	@ (8008194 <TIM_OC1_SetConfig+0x10c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00f      	beq.n	8008104 <TIM_OC1_SetConfig+0x7c>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008198 <TIM_OC1_SetConfig+0x110>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00b      	beq.n	8008104 <TIM_OC1_SetConfig+0x7c>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a2b      	ldr	r2, [pc, #172]	@ (800819c <TIM_OC1_SetConfig+0x114>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <TIM_OC1_SetConfig+0x7c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a2a      	ldr	r2, [pc, #168]	@ (80081a0 <TIM_OC1_SetConfig+0x118>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_OC1_SetConfig+0x7c>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a29      	ldr	r2, [pc, #164]	@ (80081a4 <TIM_OC1_SetConfig+0x11c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10c      	bne.n	800811e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0308 	bic.w	r3, r3, #8
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f023 0304 	bic.w	r3, r3, #4
 800811c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a1c      	ldr	r2, [pc, #112]	@ (8008194 <TIM_OC1_SetConfig+0x10c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00f      	beq.n	8008146 <TIM_OC1_SetConfig+0xbe>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <TIM_OC1_SetConfig+0x110>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00b      	beq.n	8008146 <TIM_OC1_SetConfig+0xbe>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <TIM_OC1_SetConfig+0x114>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <TIM_OC1_SetConfig+0xbe>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a19      	ldr	r2, [pc, #100]	@ (80081a0 <TIM_OC1_SetConfig+0x118>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <TIM_OC1_SetConfig+0xbe>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a18      	ldr	r2, [pc, #96]	@ (80081a4 <TIM_OC1_SetConfig+0x11c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d111      	bne.n	800816a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800814c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4313      	orrs	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	621a      	str	r2, [r3, #32]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	fffeff8f 	.word	0xfffeff8f
 8008194:	40010000 	.word	0x40010000
 8008198:	40010400 	.word	0x40010400
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800

080081a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	f023 0210 	bic.w	r2, r3, #16
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	4b34      	ldr	r3, [pc, #208]	@ (80082a4 <TIM_OC2_SetConfig+0xfc>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f023 0320 	bic.w	r3, r3, #32
 80081f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a29      	ldr	r2, [pc, #164]	@ (80082a8 <TIM_OC2_SetConfig+0x100>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_OC2_SetConfig+0x68>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a28      	ldr	r2, [pc, #160]	@ (80082ac <TIM_OC2_SetConfig+0x104>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10d      	bne.n	800822c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4313      	orrs	r3, r2
 8008222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800822a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a1e      	ldr	r2, [pc, #120]	@ (80082a8 <TIM_OC2_SetConfig+0x100>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00f      	beq.n	8008254 <TIM_OC2_SetConfig+0xac>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a1d      	ldr	r2, [pc, #116]	@ (80082ac <TIM_OC2_SetConfig+0x104>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00b      	beq.n	8008254 <TIM_OC2_SetConfig+0xac>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a1c      	ldr	r2, [pc, #112]	@ (80082b0 <TIM_OC2_SetConfig+0x108>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d007      	beq.n	8008254 <TIM_OC2_SetConfig+0xac>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a1b      	ldr	r2, [pc, #108]	@ (80082b4 <TIM_OC2_SetConfig+0x10c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC2_SetConfig+0xac>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a1a      	ldr	r2, [pc, #104]	@ (80082b8 <TIM_OC2_SetConfig+0x110>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d113      	bne.n	800827c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800825a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	feff8fff 	.word	0xfeff8fff
 80082a8:	40010000 	.word	0x40010000
 80082ac:	40010400 	.word	0x40010400
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800

080082bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4b33      	ldr	r3, [pc, #204]	@ (80083b4 <TIM_OC3_SetConfig+0xf8>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a28      	ldr	r2, [pc, #160]	@ (80083b8 <TIM_OC3_SetConfig+0xfc>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_OC3_SetConfig+0x66>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a27      	ldr	r2, [pc, #156]	@ (80083bc <TIM_OC3_SetConfig+0x100>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d10d      	bne.n	800833e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800833c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a1d      	ldr	r2, [pc, #116]	@ (80083b8 <TIM_OC3_SetConfig+0xfc>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00f      	beq.n	8008366 <TIM_OC3_SetConfig+0xaa>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a1c      	ldr	r2, [pc, #112]	@ (80083bc <TIM_OC3_SetConfig+0x100>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00b      	beq.n	8008366 <TIM_OC3_SetConfig+0xaa>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a1b      	ldr	r2, [pc, #108]	@ (80083c0 <TIM_OC3_SetConfig+0x104>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d007      	beq.n	8008366 <TIM_OC3_SetConfig+0xaa>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1a      	ldr	r2, [pc, #104]	@ (80083c4 <TIM_OC3_SetConfig+0x108>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d003      	beq.n	8008366 <TIM_OC3_SetConfig+0xaa>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a19      	ldr	r2, [pc, #100]	@ (80083c8 <TIM_OC3_SetConfig+0x10c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d113      	bne.n	800838e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800836c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	621a      	str	r2, [r3, #32]
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	fffeff8f 	.word	0xfffeff8f
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40010400 	.word	0x40010400
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800

080083cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4b24      	ldr	r3, [pc, #144]	@ (8008488 <TIM_OC4_SetConfig+0xbc>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	031b      	lsls	r3, r3, #12
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a19      	ldr	r2, [pc, #100]	@ (800848c <TIM_OC4_SetConfig+0xc0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00f      	beq.n	800844c <TIM_OC4_SetConfig+0x80>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a18      	ldr	r2, [pc, #96]	@ (8008490 <TIM_OC4_SetConfig+0xc4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00b      	beq.n	800844c <TIM_OC4_SetConfig+0x80>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a17      	ldr	r2, [pc, #92]	@ (8008494 <TIM_OC4_SetConfig+0xc8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d007      	beq.n	800844c <TIM_OC4_SetConfig+0x80>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a16      	ldr	r2, [pc, #88]	@ (8008498 <TIM_OC4_SetConfig+0xcc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_OC4_SetConfig+0x80>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a15      	ldr	r2, [pc, #84]	@ (800849c <TIM_OC4_SetConfig+0xd0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d109      	bne.n	8008460 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	019b      	lsls	r3, r3, #6
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	4313      	orrs	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	feff8fff 	.word	0xfeff8fff
 800848c:	40010000 	.word	0x40010000
 8008490:	40010400 	.word	0x40010400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800

080084a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4b21      	ldr	r3, [pc, #132]	@ (8008550 <TIM_OC5_SetConfig+0xb0>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80084e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a18      	ldr	r2, [pc, #96]	@ (8008554 <TIM_OC5_SetConfig+0xb4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00f      	beq.n	8008516 <TIM_OC5_SetConfig+0x76>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a17      	ldr	r2, [pc, #92]	@ (8008558 <TIM_OC5_SetConfig+0xb8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00b      	beq.n	8008516 <TIM_OC5_SetConfig+0x76>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a16      	ldr	r2, [pc, #88]	@ (800855c <TIM_OC5_SetConfig+0xbc>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d007      	beq.n	8008516 <TIM_OC5_SetConfig+0x76>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <TIM_OC5_SetConfig+0xc0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_OC5_SetConfig+0x76>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a14      	ldr	r2, [pc, #80]	@ (8008564 <TIM_OC5_SetConfig+0xc4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d109      	bne.n	800852a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800851c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	fffeff8f 	.word	0xfffeff8f
 8008554:	40010000 	.word	0x40010000
 8008558:	40010400 	.word	0x40010400
 800855c:	40014000 	.word	0x40014000
 8008560:	40014400 	.word	0x40014400
 8008564:	40014800 	.word	0x40014800

08008568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a1b      	ldr	r3, [r3, #32]
 800857c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	4b22      	ldr	r3, [pc, #136]	@ (800861c <TIM_OC6_SetConfig+0xb4>)
 8008594:	4013      	ands	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	051b      	lsls	r3, r3, #20
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a19      	ldr	r2, [pc, #100]	@ (8008620 <TIM_OC6_SetConfig+0xb8>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00f      	beq.n	80085e0 <TIM_OC6_SetConfig+0x78>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a18      	ldr	r2, [pc, #96]	@ (8008624 <TIM_OC6_SetConfig+0xbc>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00b      	beq.n	80085e0 <TIM_OC6_SetConfig+0x78>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <TIM_OC6_SetConfig+0xc0>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d007      	beq.n	80085e0 <TIM_OC6_SetConfig+0x78>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a16      	ldr	r2, [pc, #88]	@ (800862c <TIM_OC6_SetConfig+0xc4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_OC6_SetConfig+0x78>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a15      	ldr	r2, [pc, #84]	@ (8008630 <TIM_OC6_SetConfig+0xc8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d109      	bne.n	80085f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	feff8fff 	.word	0xfeff8fff
 8008620:	40010000 	.word	0x40010000
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800

08008634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	f023 0201 	bic.w	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800865e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f023 030a 	bic.w	r3, r3, #10
 8008670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4313      	orrs	r3, r2
 8008678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008692:	b480      	push	{r7}
 8008694:	b087      	sub	sp, #28
 8008696:	af00      	add	r7, sp, #0
 8008698:	60f8      	str	r0, [r7, #12]
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	f023 0210 	bic.w	r2, r3, #16
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	031b      	lsls	r3, r3, #12
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	621a      	str	r2, [r3, #32]
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4b09      	ldr	r3, [pc, #36]	@ (800872c <TIM_ITRx_SetConfig+0x38>)
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4313      	orrs	r3, r2
 8008712:	f043 0307 	orr.w	r3, r3, #7
 8008716:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	ffcfff8f 	.word	0xffcfff8f

08008730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	021a      	lsls	r2, r3, #8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	431a      	orrs	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4313      	orrs	r3, r2
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	609a      	str	r2, [r3, #8]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2201      	movs	r2, #1
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1a      	ldr	r2, [r3, #32]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 031f 	and.w	r3, r3, #31
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	fa01 f303 	lsl.w	r3, r1, r3
 80087a8:	431a      	orrs	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e06d      	b.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a30      	ldr	r2, [pc, #192]	@ (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2f      	ldr	r2, [pc, #188]	@ (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d108      	bne.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800880e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008820:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a20      	ldr	r2, [pc, #128]	@ (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d022      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008846:	d01d      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1d      	ldr	r2, [pc, #116]	@ (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d018      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a1c      	ldr	r2, [pc, #112]	@ (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d013      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1a      	ldr	r2, [pc, #104]	@ (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d00e      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a15      	ldr	r2, [pc, #84]	@ (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d009      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a16      	ldr	r2, [pc, #88]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d004      	beq.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a15      	ldr	r2, [pc, #84]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d10c      	bne.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800888a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4313      	orrs	r3, r2
 8008894:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40001800 	.word	0x40001800
 80088d4:	40014000 	.word	0x40014000

080088d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e042      	b.n	80089ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800892c:	2b00      	cmp	r3, #0
 800892e:	d106      	bne.n	800893e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7f8 ffe5 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2224      	movs	r2, #36	@ 0x24
 8008942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0201 	bic.w	r2, r2, #1
 8008954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fac0 	bl	8009ee4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fd55 	bl	8009414 <UART_SetConfig>
 800896a:	4603      	mov	r3, r0
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e01b      	b.n	80089ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0201 	orr.w	r2, r2, #1
 80089a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 fb3f 	bl	800a028 <UART_CheckIdleState>
 80089aa:	4603      	mov	r3, r0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	@ 0x28
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	d17b      	bne.n	8008ac6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <HAL_UART_Transmit+0x26>
 80089d4:	88fb      	ldrh	r3, [r7, #6]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e074      	b.n	8008ac8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2221      	movs	r2, #33	@ 0x21
 80089ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ee:	f7f9 f8ad 	bl	8001b4c <HAL_GetTick>
 80089f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0c:	d108      	bne.n	8008a20 <HAL_UART_Transmit+0x6c>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	e003      	b.n	8008a28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a28:	e030      	b.n	8008a8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	2180      	movs	r1, #128	@ 0x80
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f001 fba1 	bl	800a17c <UART_WaitOnFlagUntilTimeout>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e03d      	b.n	8008ac8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	3302      	adds	r3, #2
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	e007      	b.n	8008a7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	3301      	adds	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1c8      	bne.n	8008a2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	2140      	movs	r1, #64	@ 0x40
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f001 fb6a 	bl	800a17c <UART_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d005      	beq.n	8008aba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e006      	b.n	8008ac8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e000      	b.n	8008ac8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ac6:	2302      	movs	r3, #2
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3720      	adds	r7, #32
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08a      	sub	sp, #40	@ 0x28
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4613      	mov	r3, r2
 8008ade:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	f040 80b5 	bne.w	8008c56 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <HAL_UART_Receive+0x28>
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0ad      	b.n	8008c58 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2222      	movs	r2, #34	@ 0x22
 8008b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b12:	f7f9 f81b 	bl	8001b4c <HAL_GetTick>
 8008b16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	88fa      	ldrh	r2, [r7, #6]
 8008b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b30:	d10e      	bne.n	8008b50 <HAL_UART_Receive+0x80>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <HAL_UART_Receive+0x76>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b44:	e02d      	b.n	8008ba2 <HAL_UART_Receive+0xd2>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	22ff      	movs	r2, #255	@ 0xff
 8008b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b4e:	e028      	b.n	8008ba2 <HAL_UART_Receive+0xd2>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10d      	bne.n	8008b74 <HAL_UART_Receive+0xa4>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <HAL_UART_Receive+0x9a>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	22ff      	movs	r2, #255	@ 0xff
 8008b64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b68:	e01b      	b.n	8008ba2 <HAL_UART_Receive+0xd2>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	227f      	movs	r2, #127	@ 0x7f
 8008b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b72:	e016      	b.n	8008ba2 <HAL_UART_Receive+0xd2>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b7c:	d10d      	bne.n	8008b9a <HAL_UART_Receive+0xca>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <HAL_UART_Receive+0xc0>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	227f      	movs	r2, #127	@ 0x7f
 8008b8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b8e:	e008      	b.n	8008ba2 <HAL_UART_Receive+0xd2>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	223f      	movs	r2, #63	@ 0x3f
 8008b94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b98:	e003      	b.n	8008ba2 <HAL_UART_Receive+0xd2>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ba8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb2:	d108      	bne.n	8008bc6 <HAL_UART_Receive+0xf6>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	61bb      	str	r3, [r7, #24]
 8008bc4:	e003      	b.n	8008bce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bce:	e036      	b.n	8008c3e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2120      	movs	r1, #32
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f001 face 	bl	800a17c <UART_WaitOnFlagUntilTimeout>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e032      	b.n	8008c58 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10c      	bne.n	8008c12 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	8a7b      	ldrh	r3, [r7, #18]
 8008c02:	4013      	ands	r3, r2
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	61bb      	str	r3, [r7, #24]
 8008c10:	e00c      	b.n	8008c2c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	8a7b      	ldrh	r3, [r7, #18]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	4013      	ands	r3, r2
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	3b01      	subs	r3, #1
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1c2      	bne.n	8008bd0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	e000      	b.n	8008c58 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008c56:	2302      	movs	r3, #2
  }
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b0ba      	sub	sp, #232	@ 0xe8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c8e:	4013      	ands	r3, r2
 8008c90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d11b      	bne.n	8008cd4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d015      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d105      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 8377 	beq.w	80093b8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
      }
      return;
 8008cd2:	e371      	b.n	80093b8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 8123 	beq.w	8008f24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8008f18 <HAL_UART_IRQHandler+0x2b8>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d106      	bne.n	8008cf8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008cee:	4b8b      	ldr	r3, [pc, #556]	@ (8008f1c <HAL_UART_IRQHandler+0x2bc>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8116 	beq.w	8008f24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d011      	beq.n	8008d28 <HAL_UART_IRQHandler+0xc8>
 8008d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2201      	movs	r2, #1
 8008d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1e:	f043 0201 	orr.w	r2, r3, #1
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d011      	beq.n	8008d58 <HAL_UART_IRQHandler+0xf8>
 8008d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2202      	movs	r2, #2
 8008d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d4e:	f043 0204 	orr.w	r2, r3, #4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d011      	beq.n	8008d88 <HAL_UART_IRQHandler+0x128>
 8008d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2204      	movs	r2, #4
 8008d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7e:	f043 0202 	orr.w	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d017      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008da0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008da4:	4b5c      	ldr	r3, [pc, #368]	@ (8008f18 <HAL_UART_IRQHandler+0x2b8>)
 8008da6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00b      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2208      	movs	r2, #8
 8008db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dba:	f043 0208 	orr.w	r2, r3, #8
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d012      	beq.n	8008df6 <HAL_UART_IRQHandler+0x196>
 8008dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00c      	beq.n	8008df6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dec:	f043 0220 	orr.w	r2, r3, #32
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 82dd 	beq.w	80093bc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d013      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e12:	f003 0320 	and.w	r3, r3, #32
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d007      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4a:	2b40      	cmp	r3, #64	@ 0x40
 8008e4c:	d005      	beq.n	8008e5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d054      	beq.n	8008f04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f9fc 	bl	800a258 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e6a:	2b40      	cmp	r3, #64	@ 0x40
 8008e6c:	d146      	bne.n	8008efc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3308      	adds	r3, #8
 8008e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1d9      	bne.n	8008e6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d017      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eca:	4a15      	ldr	r2, [pc, #84]	@ (8008f20 <HAL_UART_IRQHandler+0x2c0>)
 8008ecc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7f9 fa7f 	bl	80023d8 <HAL_DMA_Abort_IT>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d019      	beq.n	8008f14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef2:	e00f      	b.n	8008f14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa77 	bl	80093e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efa:	e00b      	b.n	8008f14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa73 	bl	80093e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f02:	e007      	b.n	8008f14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa6f 	bl	80093e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f12:	e253      	b.n	80093bc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f14:	bf00      	nop
    return;
 8008f16:	e251      	b.n	80093bc <HAL_UART_IRQHandler+0x75c>
 8008f18:	10000001 	.word	0x10000001
 8008f1c:	04000120 	.word	0x04000120
 8008f20:	0800a325 	.word	0x0800a325

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f040 81e7 	bne.w	80092fc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 81e0 	beq.w	80092fc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 81d9 	beq.w	80092fc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2210      	movs	r2, #16
 8008f50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5c:	2b40      	cmp	r3, #64	@ 0x40
 8008f5e:	f040 8151 	bne.w	8009204 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a96      	ldr	r2, [pc, #600]	@ (80091c4 <HAL_UART_IRQHandler+0x564>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d068      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a93      	ldr	r2, [pc, #588]	@ (80091c8 <HAL_UART_IRQHandler+0x568>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d061      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a91      	ldr	r2, [pc, #580]	@ (80091cc <HAL_UART_IRQHandler+0x56c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d05a      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a8e      	ldr	r2, [pc, #568]	@ (80091d0 <HAL_UART_IRQHandler+0x570>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d053      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a8c      	ldr	r2, [pc, #560]	@ (80091d4 <HAL_UART_IRQHandler+0x574>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d04c      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a89      	ldr	r2, [pc, #548]	@ (80091d8 <HAL_UART_IRQHandler+0x578>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d045      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a87      	ldr	r2, [pc, #540]	@ (80091dc <HAL_UART_IRQHandler+0x57c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d03e      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a84      	ldr	r2, [pc, #528]	@ (80091e0 <HAL_UART_IRQHandler+0x580>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d037      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a82      	ldr	r2, [pc, #520]	@ (80091e4 <HAL_UART_IRQHandler+0x584>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d030      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a7f      	ldr	r2, [pc, #508]	@ (80091e8 <HAL_UART_IRQHandler+0x588>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d029      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a7d      	ldr	r2, [pc, #500]	@ (80091ec <HAL_UART_IRQHandler+0x58c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d022      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a7a      	ldr	r2, [pc, #488]	@ (80091f0 <HAL_UART_IRQHandler+0x590>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01b      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a78      	ldr	r2, [pc, #480]	@ (80091f4 <HAL_UART_IRQHandler+0x594>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d014      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a75      	ldr	r2, [pc, #468]	@ (80091f8 <HAL_UART_IRQHandler+0x598>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00d      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a73      	ldr	r2, [pc, #460]	@ (80091fc <HAL_UART_IRQHandler+0x59c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d006      	beq.n	8009042 <HAL_UART_IRQHandler+0x3e2>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a70      	ldr	r2, [pc, #448]	@ (8009200 <HAL_UART_IRQHandler+0x5a0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d106      	bne.n	8009050 <HAL_UART_IRQHandler+0x3f0>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	b29b      	uxth	r3, r3
 800904e:	e005      	b.n	800905c <HAL_UART_IRQHandler+0x3fc>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	b29b      	uxth	r3, r3
 800905c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009060:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 81ab 	beq.w	80093c0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009074:	429a      	cmp	r2, r3
 8009076:	f080 81a3 	bcs.w	80093c0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009080:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009090:	f000 8087 	beq.w	80091a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1da      	bne.n	8009094 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090f0:	f023 0301 	bic.w	r3, r3, #1
 80090f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009102:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009106:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800910a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e1      	bne.n	80090de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800912a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800912c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3308      	adds	r3, #8
 800913a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800913e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009140:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009144:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800914c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e3      	bne.n	800911a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800916e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009170:	f023 0310 	bic.w	r3, r3, #16
 8009174:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009182:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009184:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e4      	bne.n	8009160 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800919c:	4618      	mov	r0, r3
 800919e:	f7f8 fdfd 	bl	8001d9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2202      	movs	r2, #2
 80091a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f91d 	bl	80093fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091c2:	e0fd      	b.n	80093c0 <HAL_UART_IRQHandler+0x760>
 80091c4:	40020010 	.word	0x40020010
 80091c8:	40020028 	.word	0x40020028
 80091cc:	40020040 	.word	0x40020040
 80091d0:	40020058 	.word	0x40020058
 80091d4:	40020070 	.word	0x40020070
 80091d8:	40020088 	.word	0x40020088
 80091dc:	400200a0 	.word	0x400200a0
 80091e0:	400200b8 	.word	0x400200b8
 80091e4:	40020410 	.word	0x40020410
 80091e8:	40020428 	.word	0x40020428
 80091ec:	40020440 	.word	0x40020440
 80091f0:	40020458 	.word	0x40020458
 80091f4:	40020470 	.word	0x40020470
 80091f8:	40020488 	.word	0x40020488
 80091fc:	400204a0 	.word	0x400204a0
 8009200:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009210:	b29b      	uxth	r3, r3
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800921e:	b29b      	uxth	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 80cf 	beq.w	80093c4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80ca 	beq.w	80093c4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800923e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009244:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009252:	647b      	str	r3, [r7, #68]	@ 0x44
 8009254:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e4      	bne.n	8009230 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	623b      	str	r3, [r7, #32]
   return(result);
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	4b55      	ldr	r3, [pc, #340]	@ (80093d0 <HAL_UART_IRQHandler+0x770>)
 800927a:	4013      	ands	r3, r2
 800927c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800928a:	633a      	str	r2, [r7, #48]	@ 0x30
 800928c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e3      	bne.n	8009266 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0310 	bic.w	r3, r3, #16
 80092c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	617b      	str	r3, [r7, #20]
   return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e4      	bne.n	80092b2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f881 	bl	80093fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092fa:	e063      	b.n	80093c4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <HAL_UART_IRQHandler+0x6c6>
 8009308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800930c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800931c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f841 	bl	800a3a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009324:	e051      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800932a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800932e:	2b00      	cmp	r3, #0
 8009330:	d014      	beq.n	800935c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800933a:	2b00      	cmp	r3, #0
 800933c:	d105      	bne.n	800934a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800933e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d008      	beq.n	800935c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800934e:	2b00      	cmp	r3, #0
 8009350:	d03a      	beq.n	80093c8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
    }
    return;
 800935a:	e035      	b.n	80093c8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800935c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <HAL_UART_IRQHandler+0x71c>
 8009368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 ffeb 	bl	800a350 <UART_EndTransmit_IT>
    return;
 800937a:	e026      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <HAL_UART_IRQHandler+0x73c>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 f81a 	bl	800a3ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800939a:	e016      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d010      	beq.n	80093ca <HAL_UART_IRQHandler+0x76a>
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	da0c      	bge.n	80093ca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 f802 	bl	800a3ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093b6:	e008      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
      return;
 80093b8:	bf00      	nop
 80093ba:	e006      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
    return;
 80093bc:	bf00      	nop
 80093be:	e004      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
      return;
 80093c0:	bf00      	nop
 80093c2:	e002      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
      return;
 80093c4:	bf00      	nop
 80093c6:	e000      	b.n	80093ca <HAL_UART_IRQHandler+0x76a>
    return;
 80093c8:	bf00      	nop
  }
}
 80093ca:	37e8      	adds	r7, #232	@ 0xe8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	effffffe 	.word	0xeffffffe

080093d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009418:	b092      	sub	sp, #72	@ 0x48
 800941a:	af00      	add	r7, sp, #0
 800941c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	431a      	orrs	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	431a      	orrs	r2, r3
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	4313      	orrs	r3, r2
 800943a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4bbe      	ldr	r3, [pc, #760]	@ (800973c <UART_SetConfig+0x328>)
 8009444:	4013      	ands	r3, r2
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800944c:	430b      	orrs	r3, r1
 800944e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4ab3      	ldr	r2, [pc, #716]	@ (8009740 <UART_SetConfig+0x32c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d004      	beq.n	8009480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800947c:	4313      	orrs	r3, r2
 800947e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	4baf      	ldr	r3, [pc, #700]	@ (8009744 <UART_SetConfig+0x330>)
 8009488:	4013      	ands	r3, r2
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009490:	430b      	orrs	r3, r1
 8009492:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949a:	f023 010f 	bic.w	r1, r3, #15
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4aa6      	ldr	r2, [pc, #664]	@ (8009748 <UART_SetConfig+0x334>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d177      	bne.n	80095a4 <UART_SetConfig+0x190>
 80094b4:	4ba5      	ldr	r3, [pc, #660]	@ (800974c <UART_SetConfig+0x338>)
 80094b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094bc:	2b28      	cmp	r3, #40	@ 0x28
 80094be:	d86d      	bhi.n	800959c <UART_SetConfig+0x188>
 80094c0:	a201      	add	r2, pc, #4	@ (adr r2, 80094c8 <UART_SetConfig+0xb4>)
 80094c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c6:	bf00      	nop
 80094c8:	0800956d 	.word	0x0800956d
 80094cc:	0800959d 	.word	0x0800959d
 80094d0:	0800959d 	.word	0x0800959d
 80094d4:	0800959d 	.word	0x0800959d
 80094d8:	0800959d 	.word	0x0800959d
 80094dc:	0800959d 	.word	0x0800959d
 80094e0:	0800959d 	.word	0x0800959d
 80094e4:	0800959d 	.word	0x0800959d
 80094e8:	08009575 	.word	0x08009575
 80094ec:	0800959d 	.word	0x0800959d
 80094f0:	0800959d 	.word	0x0800959d
 80094f4:	0800959d 	.word	0x0800959d
 80094f8:	0800959d 	.word	0x0800959d
 80094fc:	0800959d 	.word	0x0800959d
 8009500:	0800959d 	.word	0x0800959d
 8009504:	0800959d 	.word	0x0800959d
 8009508:	0800957d 	.word	0x0800957d
 800950c:	0800959d 	.word	0x0800959d
 8009510:	0800959d 	.word	0x0800959d
 8009514:	0800959d 	.word	0x0800959d
 8009518:	0800959d 	.word	0x0800959d
 800951c:	0800959d 	.word	0x0800959d
 8009520:	0800959d 	.word	0x0800959d
 8009524:	0800959d 	.word	0x0800959d
 8009528:	08009585 	.word	0x08009585
 800952c:	0800959d 	.word	0x0800959d
 8009530:	0800959d 	.word	0x0800959d
 8009534:	0800959d 	.word	0x0800959d
 8009538:	0800959d 	.word	0x0800959d
 800953c:	0800959d 	.word	0x0800959d
 8009540:	0800959d 	.word	0x0800959d
 8009544:	0800959d 	.word	0x0800959d
 8009548:	0800958d 	.word	0x0800958d
 800954c:	0800959d 	.word	0x0800959d
 8009550:	0800959d 	.word	0x0800959d
 8009554:	0800959d 	.word	0x0800959d
 8009558:	0800959d 	.word	0x0800959d
 800955c:	0800959d 	.word	0x0800959d
 8009560:	0800959d 	.word	0x0800959d
 8009564:	0800959d 	.word	0x0800959d
 8009568:	08009595 	.word	0x08009595
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e222      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009574:	2304      	movs	r3, #4
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e21e      	b.n	80099ba <UART_SetConfig+0x5a6>
 800957c:	2308      	movs	r3, #8
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e21a      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009584:	2310      	movs	r3, #16
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958a:	e216      	b.n	80099ba <UART_SetConfig+0x5a6>
 800958c:	2320      	movs	r3, #32
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009592:	e212      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009594:	2340      	movs	r3, #64	@ 0x40
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e20e      	b.n	80099ba <UART_SetConfig+0x5a6>
 800959c:	2380      	movs	r3, #128	@ 0x80
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e20a      	b.n	80099ba <UART_SetConfig+0x5a6>
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a69      	ldr	r2, [pc, #420]	@ (8009750 <UART_SetConfig+0x33c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d130      	bne.n	8009610 <UART_SetConfig+0x1fc>
 80095ae:	4b67      	ldr	r3, [pc, #412]	@ (800974c <UART_SetConfig+0x338>)
 80095b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d826      	bhi.n	8009608 <UART_SetConfig+0x1f4>
 80095ba:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <UART_SetConfig+0x1ac>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	080095d9 	.word	0x080095d9
 80095c4:	080095e1 	.word	0x080095e1
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	080095f9 	.word	0x080095f9
 80095d4:	08009601 	.word	0x08009601
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e1ec      	b.n	80099ba <UART_SetConfig+0x5a6>
 80095e0:	2304      	movs	r3, #4
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e1e8      	b.n	80099ba <UART_SetConfig+0x5a6>
 80095e8:	2308      	movs	r3, #8
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e1e4      	b.n	80099ba <UART_SetConfig+0x5a6>
 80095f0:	2310      	movs	r3, #16
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e1e0      	b.n	80099ba <UART_SetConfig+0x5a6>
 80095f8:	2320      	movs	r3, #32
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e1dc      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009600:	2340      	movs	r3, #64	@ 0x40
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e1d8      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009608:	2380      	movs	r3, #128	@ 0x80
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e1d4      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a4f      	ldr	r2, [pc, #316]	@ (8009754 <UART_SetConfig+0x340>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d130      	bne.n	800967c <UART_SetConfig+0x268>
 800961a:	4b4c      	ldr	r3, [pc, #304]	@ (800974c <UART_SetConfig+0x338>)
 800961c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	2b05      	cmp	r3, #5
 8009624:	d826      	bhi.n	8009674 <UART_SetConfig+0x260>
 8009626:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <UART_SetConfig+0x218>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	08009645 	.word	0x08009645
 8009630:	0800964d 	.word	0x0800964d
 8009634:	08009655 	.word	0x08009655
 8009638:	0800965d 	.word	0x0800965d
 800963c:	08009665 	.word	0x08009665
 8009640:	0800966d 	.word	0x0800966d
 8009644:	2300      	movs	r3, #0
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e1b6      	b.n	80099ba <UART_SetConfig+0x5a6>
 800964c:	2304      	movs	r3, #4
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e1b2      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009654:	2308      	movs	r3, #8
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e1ae      	b.n	80099ba <UART_SetConfig+0x5a6>
 800965c:	2310      	movs	r3, #16
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e1aa      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009664:	2320      	movs	r3, #32
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e1a6      	b.n	80099ba <UART_SetConfig+0x5a6>
 800966c:	2340      	movs	r3, #64	@ 0x40
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e1a2      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009674:	2380      	movs	r3, #128	@ 0x80
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e19e      	b.n	80099ba <UART_SetConfig+0x5a6>
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a35      	ldr	r2, [pc, #212]	@ (8009758 <UART_SetConfig+0x344>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d130      	bne.n	80096e8 <UART_SetConfig+0x2d4>
 8009686:	4b31      	ldr	r3, [pc, #196]	@ (800974c <UART_SetConfig+0x338>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	2b05      	cmp	r3, #5
 8009690:	d826      	bhi.n	80096e0 <UART_SetConfig+0x2cc>
 8009692:	a201      	add	r2, pc, #4	@ (adr r2, 8009698 <UART_SetConfig+0x284>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b9 	.word	0x080096b9
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e180      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e17c      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e178      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e174      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096d0:	2320      	movs	r3, #32
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e170      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096d8:	2340      	movs	r3, #64	@ 0x40
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e16c      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096e0:	2380      	movs	r3, #128	@ 0x80
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e6:	e168      	b.n	80099ba <UART_SetConfig+0x5a6>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1b      	ldr	r2, [pc, #108]	@ (800975c <UART_SetConfig+0x348>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d142      	bne.n	8009778 <UART_SetConfig+0x364>
 80096f2:	4b16      	ldr	r3, [pc, #88]	@ (800974c <UART_SetConfig+0x338>)
 80096f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b05      	cmp	r3, #5
 80096fc:	d838      	bhi.n	8009770 <UART_SetConfig+0x35c>
 80096fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009704 <UART_SetConfig+0x2f0>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	0800971d 	.word	0x0800971d
 8009708:	08009725 	.word	0x08009725
 800970c:	0800972d 	.word	0x0800972d
 8009710:	08009735 	.word	0x08009735
 8009714:	08009761 	.word	0x08009761
 8009718:	08009769 	.word	0x08009769
 800971c:	2300      	movs	r3, #0
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e14a      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009724:	2304      	movs	r3, #4
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e146      	b.n	80099ba <UART_SetConfig+0x5a6>
 800972c:	2308      	movs	r3, #8
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e142      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009734:	2310      	movs	r3, #16
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973a:	e13e      	b.n	80099ba <UART_SetConfig+0x5a6>
 800973c:	cfff69f3 	.word	0xcfff69f3
 8009740:	58000c00 	.word	0x58000c00
 8009744:	11fff4ff 	.word	0x11fff4ff
 8009748:	40011000 	.word	0x40011000
 800974c:	58024400 	.word	0x58024400
 8009750:	40004400 	.word	0x40004400
 8009754:	40004800 	.word	0x40004800
 8009758:	40004c00 	.word	0x40004c00
 800975c:	40005000 	.word	0x40005000
 8009760:	2320      	movs	r3, #32
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e128      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009768:	2340      	movs	r3, #64	@ 0x40
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e124      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009770:	2380      	movs	r3, #128	@ 0x80
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e120      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4acb      	ldr	r2, [pc, #812]	@ (8009aac <UART_SetConfig+0x698>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d176      	bne.n	8009870 <UART_SetConfig+0x45c>
 8009782:	4bcb      	ldr	r3, [pc, #812]	@ (8009ab0 <UART_SetConfig+0x69c>)
 8009784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800978a:	2b28      	cmp	r3, #40	@ 0x28
 800978c:	d86c      	bhi.n	8009868 <UART_SetConfig+0x454>
 800978e:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <UART_SetConfig+0x380>)
 8009790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009794:	08009839 	.word	0x08009839
 8009798:	08009869 	.word	0x08009869
 800979c:	08009869 	.word	0x08009869
 80097a0:	08009869 	.word	0x08009869
 80097a4:	08009869 	.word	0x08009869
 80097a8:	08009869 	.word	0x08009869
 80097ac:	08009869 	.word	0x08009869
 80097b0:	08009869 	.word	0x08009869
 80097b4:	08009841 	.word	0x08009841
 80097b8:	08009869 	.word	0x08009869
 80097bc:	08009869 	.word	0x08009869
 80097c0:	08009869 	.word	0x08009869
 80097c4:	08009869 	.word	0x08009869
 80097c8:	08009869 	.word	0x08009869
 80097cc:	08009869 	.word	0x08009869
 80097d0:	08009869 	.word	0x08009869
 80097d4:	08009849 	.word	0x08009849
 80097d8:	08009869 	.word	0x08009869
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009869 	.word	0x08009869
 80097e4:	08009869 	.word	0x08009869
 80097e8:	08009869 	.word	0x08009869
 80097ec:	08009869 	.word	0x08009869
 80097f0:	08009869 	.word	0x08009869
 80097f4:	08009851 	.word	0x08009851
 80097f8:	08009869 	.word	0x08009869
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009869 	.word	0x08009869
 8009804:	08009869 	.word	0x08009869
 8009808:	08009869 	.word	0x08009869
 800980c:	08009869 	.word	0x08009869
 8009810:	08009869 	.word	0x08009869
 8009814:	08009859 	.word	0x08009859
 8009818:	08009869 	.word	0x08009869
 800981c:	08009869 	.word	0x08009869
 8009820:	08009869 	.word	0x08009869
 8009824:	08009869 	.word	0x08009869
 8009828:	08009869 	.word	0x08009869
 800982c:	08009869 	.word	0x08009869
 8009830:	08009869 	.word	0x08009869
 8009834:	08009861 	.word	0x08009861
 8009838:	2301      	movs	r3, #1
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e0bc      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e0b8      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e0b4      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e0b0      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e0ac      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009860:	2340      	movs	r3, #64	@ 0x40
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e0a8      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009868:	2380      	movs	r3, #128	@ 0x80
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e0a4      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a8f      	ldr	r2, [pc, #572]	@ (8009ab4 <UART_SetConfig+0x6a0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d130      	bne.n	80098dc <UART_SetConfig+0x4c8>
 800987a:	4b8d      	ldr	r3, [pc, #564]	@ (8009ab0 <UART_SetConfig+0x69c>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b05      	cmp	r3, #5
 8009884:	d826      	bhi.n	80098d4 <UART_SetConfig+0x4c0>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <UART_SetConfig+0x478>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098b5 	.word	0x080098b5
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e086      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e082      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e07e      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e07a      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e076      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098cc:	2340      	movs	r3, #64	@ 0x40
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e072      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098d4:	2380      	movs	r3, #128	@ 0x80
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e06e      	b.n	80099ba <UART_SetConfig+0x5a6>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a75      	ldr	r2, [pc, #468]	@ (8009ab8 <UART_SetConfig+0x6a4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d130      	bne.n	8009948 <UART_SetConfig+0x534>
 80098e6:	4b72      	ldr	r3, [pc, #456]	@ (8009ab0 <UART_SetConfig+0x69c>)
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d826      	bhi.n	8009940 <UART_SetConfig+0x52c>
 80098f2:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <UART_SetConfig+0x4e4>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	08009911 	.word	0x08009911
 80098fc:	08009919 	.word	0x08009919
 8009900:	08009921 	.word	0x08009921
 8009904:	08009929 	.word	0x08009929
 8009908:	08009931 	.word	0x08009931
 800990c:	08009939 	.word	0x08009939
 8009910:	2300      	movs	r3, #0
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e050      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e04c      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e048      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e044      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009930:	2320      	movs	r3, #32
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e040      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009938:	2340      	movs	r3, #64	@ 0x40
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e03c      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e038      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a5b      	ldr	r2, [pc, #364]	@ (8009abc <UART_SetConfig+0x6a8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d130      	bne.n	80099b4 <UART_SetConfig+0x5a0>
 8009952:	4b57      	ldr	r3, [pc, #348]	@ (8009ab0 <UART_SetConfig+0x69c>)
 8009954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b05      	cmp	r3, #5
 800995c:	d826      	bhi.n	80099ac <UART_SetConfig+0x598>
 800995e:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <UART_SetConfig+0x550>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	0800997d 	.word	0x0800997d
 8009968:	08009985 	.word	0x08009985
 800996c:	0800998d 	.word	0x0800998d
 8009970:	08009995 	.word	0x08009995
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099a5 	.word	0x080099a5
 800997c:	2302      	movs	r3, #2
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e01a      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e016      	b.n	80099ba <UART_SetConfig+0x5a6>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e012      	b.n	80099ba <UART_SetConfig+0x5a6>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e00e      	b.n	80099ba <UART_SetConfig+0x5a6>
 800999c:	2320      	movs	r3, #32
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e00a      	b.n	80099ba <UART_SetConfig+0x5a6>
 80099a4:	2340      	movs	r3, #64	@ 0x40
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e006      	b.n	80099ba <UART_SetConfig+0x5a6>
 80099ac:	2380      	movs	r3, #128	@ 0x80
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b2:	e002      	b.n	80099ba <UART_SetConfig+0x5a6>
 80099b4:	2380      	movs	r3, #128	@ 0x80
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a3f      	ldr	r2, [pc, #252]	@ (8009abc <UART_SetConfig+0x6a8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	f040 80f8 	bne.w	8009bb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099ca:	2b20      	cmp	r3, #32
 80099cc:	dc46      	bgt.n	8009a5c <UART_SetConfig+0x648>
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	f2c0 8082 	blt.w	8009ad8 <UART_SetConfig+0x6c4>
 80099d4:	3b02      	subs	r3, #2
 80099d6:	2b1e      	cmp	r3, #30
 80099d8:	d87e      	bhi.n	8009ad8 <UART_SetConfig+0x6c4>
 80099da:	a201      	add	r2, pc, #4	@ (adr r2, 80099e0 <UART_SetConfig+0x5cc>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	08009a63 	.word	0x08009a63
 80099e4:	08009ad9 	.word	0x08009ad9
 80099e8:	08009a6b 	.word	0x08009a6b
 80099ec:	08009ad9 	.word	0x08009ad9
 80099f0:	08009ad9 	.word	0x08009ad9
 80099f4:	08009ad9 	.word	0x08009ad9
 80099f8:	08009a7b 	.word	0x08009a7b
 80099fc:	08009ad9 	.word	0x08009ad9
 8009a00:	08009ad9 	.word	0x08009ad9
 8009a04:	08009ad9 	.word	0x08009ad9
 8009a08:	08009ad9 	.word	0x08009ad9
 8009a0c:	08009ad9 	.word	0x08009ad9
 8009a10:	08009ad9 	.word	0x08009ad9
 8009a14:	08009ad9 	.word	0x08009ad9
 8009a18:	08009a8b 	.word	0x08009a8b
 8009a1c:	08009ad9 	.word	0x08009ad9
 8009a20:	08009ad9 	.word	0x08009ad9
 8009a24:	08009ad9 	.word	0x08009ad9
 8009a28:	08009ad9 	.word	0x08009ad9
 8009a2c:	08009ad9 	.word	0x08009ad9
 8009a30:	08009ad9 	.word	0x08009ad9
 8009a34:	08009ad9 	.word	0x08009ad9
 8009a38:	08009ad9 	.word	0x08009ad9
 8009a3c:	08009ad9 	.word	0x08009ad9
 8009a40:	08009ad9 	.word	0x08009ad9
 8009a44:	08009ad9 	.word	0x08009ad9
 8009a48:	08009ad9 	.word	0x08009ad9
 8009a4c:	08009ad9 	.word	0x08009ad9
 8009a50:	08009ad9 	.word	0x08009ad9
 8009a54:	08009ad9 	.word	0x08009ad9
 8009a58:	08009acb 	.word	0x08009acb
 8009a5c:	2b40      	cmp	r3, #64	@ 0x40
 8009a5e:	d037      	beq.n	8009ad0 <UART_SetConfig+0x6bc>
 8009a60:	e03a      	b.n	8009ad8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a62:	f7fc ffd1 	bl	8006a08 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a68:	e03c      	b.n	8009ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fc ffe0 	bl	8006a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a78:	e034      	b.n	8009ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a7a:	f107 0318 	add.w	r3, r7, #24
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fd f92c 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a88:	e02c      	b.n	8009ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a8a:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <UART_SetConfig+0x69c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d016      	beq.n	8009ac4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a96:	4b06      	ldr	r3, [pc, #24]	@ (8009ab0 <UART_SetConfig+0x69c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	08db      	lsrs	r3, r3, #3
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	4a07      	ldr	r2, [pc, #28]	@ (8009ac0 <UART_SetConfig+0x6ac>)
 8009aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa8:	e01c      	b.n	8009ae4 <UART_SetConfig+0x6d0>
 8009aaa:	bf00      	nop
 8009aac:	40011400 	.word	0x40011400
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	40007800 	.word	0x40007800
 8009ab8:	40007c00 	.word	0x40007c00
 8009abc:	58000c00 	.word	0x58000c00
 8009ac0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009ac4:	4b9d      	ldr	r3, [pc, #628]	@ (8009d3c <UART_SetConfig+0x928>)
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e00c      	b.n	8009ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aca:	4b9d      	ldr	r3, [pc, #628]	@ (8009d40 <UART_SetConfig+0x92c>)
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ace:	e009      	b.n	8009ae4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad6:	e005      	b.n	8009ae4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ae2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 81de 	beq.w	8009ea8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	4a94      	ldr	r2, [pc, #592]	@ (8009d44 <UART_SetConfig+0x930>)
 8009af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009af6:	461a      	mov	r2, r3
 8009af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009afe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	4613      	mov	r3, r2
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	4413      	add	r3, r2
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d305      	bcc.n	8009b1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d903      	bls.n	8009b24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b22:	e1c1      	b.n	8009ea8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b26:	2200      	movs	r2, #0
 8009b28:	60bb      	str	r3, [r7, #8]
 8009b2a:	60fa      	str	r2, [r7, #12]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	4a84      	ldr	r2, [pc, #528]	@ (8009d44 <UART_SetConfig+0x930>)
 8009b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2200      	movs	r2, #0
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	607a      	str	r2, [r7, #4]
 8009b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b46:	f7f6 fddf 	bl	8000708 <__aeabi_uldivmod>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4610      	mov	r0, r2
 8009b50:	4619      	mov	r1, r3
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	020b      	lsls	r3, r1, #8
 8009b5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b60:	0202      	lsls	r2, r0, #8
 8009b62:	6979      	ldr	r1, [r7, #20]
 8009b64:	6849      	ldr	r1, [r1, #4]
 8009b66:	0849      	lsrs	r1, r1, #1
 8009b68:	2000      	movs	r0, #0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	eb12 0804 	adds.w	r8, r2, r4
 8009b72:	eb43 0905 	adc.w	r9, r3, r5
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	469a      	mov	sl, r3
 8009b7e:	4693      	mov	fp, r2
 8009b80:	4652      	mov	r2, sl
 8009b82:	465b      	mov	r3, fp
 8009b84:	4640      	mov	r0, r8
 8009b86:	4649      	mov	r1, r9
 8009b88:	f7f6 fdbe 	bl	8000708 <__aeabi_uldivmod>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4613      	mov	r3, r2
 8009b92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b9a:	d308      	bcc.n	8009bae <UART_SetConfig+0x79a>
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ba2:	d204      	bcs.n	8009bae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009baa:	60da      	str	r2, [r3, #12]
 8009bac:	e17c      	b.n	8009ea8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bb4:	e178      	b.n	8009ea8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bbe:	f040 80c5 	bne.w	8009d4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009bc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	dc48      	bgt.n	8009c5c <UART_SetConfig+0x848>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	db7b      	blt.n	8009cc6 <UART_SetConfig+0x8b2>
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d879      	bhi.n	8009cc6 <UART_SetConfig+0x8b2>
 8009bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd8 <UART_SetConfig+0x7c4>)
 8009bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd8:	08009c63 	.word	0x08009c63
 8009bdc:	08009c6b 	.word	0x08009c6b
 8009be0:	08009cc7 	.word	0x08009cc7
 8009be4:	08009cc7 	.word	0x08009cc7
 8009be8:	08009c73 	.word	0x08009c73
 8009bec:	08009cc7 	.word	0x08009cc7
 8009bf0:	08009cc7 	.word	0x08009cc7
 8009bf4:	08009cc7 	.word	0x08009cc7
 8009bf8:	08009c83 	.word	0x08009c83
 8009bfc:	08009cc7 	.word	0x08009cc7
 8009c00:	08009cc7 	.word	0x08009cc7
 8009c04:	08009cc7 	.word	0x08009cc7
 8009c08:	08009cc7 	.word	0x08009cc7
 8009c0c:	08009cc7 	.word	0x08009cc7
 8009c10:	08009cc7 	.word	0x08009cc7
 8009c14:	08009cc7 	.word	0x08009cc7
 8009c18:	08009c93 	.word	0x08009c93
 8009c1c:	08009cc7 	.word	0x08009cc7
 8009c20:	08009cc7 	.word	0x08009cc7
 8009c24:	08009cc7 	.word	0x08009cc7
 8009c28:	08009cc7 	.word	0x08009cc7
 8009c2c:	08009cc7 	.word	0x08009cc7
 8009c30:	08009cc7 	.word	0x08009cc7
 8009c34:	08009cc7 	.word	0x08009cc7
 8009c38:	08009cc7 	.word	0x08009cc7
 8009c3c:	08009cc7 	.word	0x08009cc7
 8009c40:	08009cc7 	.word	0x08009cc7
 8009c44:	08009cc7 	.word	0x08009cc7
 8009c48:	08009cc7 	.word	0x08009cc7
 8009c4c:	08009cc7 	.word	0x08009cc7
 8009c50:	08009cc7 	.word	0x08009cc7
 8009c54:	08009cc7 	.word	0x08009cc7
 8009c58:	08009cb9 	.word	0x08009cb9
 8009c5c:	2b40      	cmp	r3, #64	@ 0x40
 8009c5e:	d02e      	beq.n	8009cbe <UART_SetConfig+0x8aa>
 8009c60:	e031      	b.n	8009cc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c62:	f7fb fc9b 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 8009c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c68:	e033      	b.n	8009cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c6a:	f7fb fcad 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 8009c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c70:	e02f      	b.n	8009cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fc fedc 	bl	8006a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c80:	e027      	b.n	8009cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c82:	f107 0318 	add.w	r3, r7, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fd f828 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c90:	e01f      	b.n	8009cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c92:	4b2d      	ldr	r3, [pc, #180]	@ (8009d48 <UART_SetConfig+0x934>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8009d48 <UART_SetConfig+0x934>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	08db      	lsrs	r3, r3, #3
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	4a24      	ldr	r2, [pc, #144]	@ (8009d3c <UART_SetConfig+0x928>)
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cb0:	e00f      	b.n	8009cd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009cb2:	4b22      	ldr	r3, [pc, #136]	@ (8009d3c <UART_SetConfig+0x928>)
 8009cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb6:	e00c      	b.n	8009cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb8:	4b21      	ldr	r3, [pc, #132]	@ (8009d40 <UART_SetConfig+0x92c>)
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e009      	b.n	8009cd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc4:	e005      	b.n	8009cd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 80e7 	beq.w	8009ea8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	4a19      	ldr	r2, [pc, #100]	@ (8009d44 <UART_SetConfig+0x930>)
 8009ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cec:	005a      	lsls	r2, r3, #1
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	085b      	lsrs	r3, r3, #1
 8009cf4:	441a      	add	r2, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d02:	2b0f      	cmp	r3, #15
 8009d04:	d916      	bls.n	8009d34 <UART_SetConfig+0x920>
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d0c:	d212      	bcs.n	8009d34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	f023 030f 	bic.w	r3, r3, #15
 8009d16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d26:	4313      	orrs	r3, r2
 8009d28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d30:	60da      	str	r2, [r3, #12]
 8009d32:	e0b9      	b.n	8009ea8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d3a:	e0b5      	b.n	8009ea8 <UART_SetConfig+0xa94>
 8009d3c:	03d09000 	.word	0x03d09000
 8009d40:	003d0900 	.word	0x003d0900
 8009d44:	0800ebb0 	.word	0x0800ebb0
 8009d48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	dc49      	bgt.n	8009de8 <UART_SetConfig+0x9d4>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	db7c      	blt.n	8009e52 <UART_SetConfig+0xa3e>
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	d87a      	bhi.n	8009e52 <UART_SetConfig+0xa3e>
 8009d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d64 <UART_SetConfig+0x950>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009def 	.word	0x08009def
 8009d68:	08009df7 	.word	0x08009df7
 8009d6c:	08009e53 	.word	0x08009e53
 8009d70:	08009e53 	.word	0x08009e53
 8009d74:	08009dff 	.word	0x08009dff
 8009d78:	08009e53 	.word	0x08009e53
 8009d7c:	08009e53 	.word	0x08009e53
 8009d80:	08009e53 	.word	0x08009e53
 8009d84:	08009e0f 	.word	0x08009e0f
 8009d88:	08009e53 	.word	0x08009e53
 8009d8c:	08009e53 	.word	0x08009e53
 8009d90:	08009e53 	.word	0x08009e53
 8009d94:	08009e53 	.word	0x08009e53
 8009d98:	08009e53 	.word	0x08009e53
 8009d9c:	08009e53 	.word	0x08009e53
 8009da0:	08009e53 	.word	0x08009e53
 8009da4:	08009e1f 	.word	0x08009e1f
 8009da8:	08009e53 	.word	0x08009e53
 8009dac:	08009e53 	.word	0x08009e53
 8009db0:	08009e53 	.word	0x08009e53
 8009db4:	08009e53 	.word	0x08009e53
 8009db8:	08009e53 	.word	0x08009e53
 8009dbc:	08009e53 	.word	0x08009e53
 8009dc0:	08009e53 	.word	0x08009e53
 8009dc4:	08009e53 	.word	0x08009e53
 8009dc8:	08009e53 	.word	0x08009e53
 8009dcc:	08009e53 	.word	0x08009e53
 8009dd0:	08009e53 	.word	0x08009e53
 8009dd4:	08009e53 	.word	0x08009e53
 8009dd8:	08009e53 	.word	0x08009e53
 8009ddc:	08009e53 	.word	0x08009e53
 8009de0:	08009e53 	.word	0x08009e53
 8009de4:	08009e45 	.word	0x08009e45
 8009de8:	2b40      	cmp	r3, #64	@ 0x40
 8009dea:	d02e      	beq.n	8009e4a <UART_SetConfig+0xa36>
 8009dec:	e031      	b.n	8009e52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dee:	f7fb fbd5 	bl	800559c <HAL_RCC_GetPCLK1Freq>
 8009df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009df4:	e033      	b.n	8009e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df6:	f7fb fbe7 	bl	80055c8 <HAL_RCC_GetPCLK2Freq>
 8009dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dfc:	e02f      	b.n	8009e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fc fe16 	bl	8006a34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0c:	e027      	b.n	8009e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0e:	f107 0318 	add.w	r3, r7, #24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fc ff62 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1c:	e01f      	b.n	8009e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed4 <UART_SetConfig+0xac0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ed4 <UART_SetConfig+0xac0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	08db      	lsrs	r3, r3, #3
 8009e30:	f003 0303 	and.w	r3, r3, #3
 8009e34:	4a28      	ldr	r2, [pc, #160]	@ (8009ed8 <UART_SetConfig+0xac4>)
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e3c:	e00f      	b.n	8009e5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009e3e:	4b26      	ldr	r3, [pc, #152]	@ (8009ed8 <UART_SetConfig+0xac4>)
 8009e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e42:	e00c      	b.n	8009e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e44:	4b25      	ldr	r3, [pc, #148]	@ (8009edc <UART_SetConfig+0xac8>)
 8009e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e48:	e009      	b.n	8009e5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e50:	e005      	b.n	8009e5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e5c:	bf00      	nop
    }

    if (pclk != 0U)
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d021      	beq.n	8009ea8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee0 <UART_SetConfig+0xacc>)
 8009e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e72:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	085b      	lsrs	r3, r3, #1
 8009e7c:	441a      	add	r2, r3
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8a:	2b0f      	cmp	r3, #15
 8009e8c:	d909      	bls.n	8009ea2 <UART_SetConfig+0xa8e>
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e94:	d205      	bcs.n	8009ea2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60da      	str	r2, [r3, #12]
 8009ea0:	e002      	b.n	8009ea8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ec4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3748      	adds	r7, #72	@ 0x48
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	03d09000 	.word	0x03d09000
 8009edc:	003d0900 	.word	0x003d0900
 8009ee0:	0800ebb0 	.word	0x0800ebb0

08009ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00a      	beq.n	8009f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d01a      	beq.n	8009ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fe2:	d10a      	bne.n	8009ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  }
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b098      	sub	sp, #96	@ 0x60
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a038:	f7f7 fd88 	bl	8001b4c <HAL_GetTick>
 800a03c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d12f      	bne.n	800a0ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a04c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a054:	2200      	movs	r2, #0
 800a056:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f88e 	bl	800a17c <UART_WaitOnFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d022      	beq.n	800a0ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a07a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a084:	647b      	str	r3, [r7, #68]	@ 0x44
 800a086:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a08a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e6      	bne.n	800a066 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e063      	b.n	800a174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d149      	bne.n	800a14e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f857 	bl	800a17c <UART_WaitOnFlagUntilTimeout>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d03c      	beq.n	800a14e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e6      	bne.n	800a0d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3308      	adds	r3, #8
 800a10c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	60fb      	str	r3, [r7, #12]
   return(result);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f023 0301 	bic.w	r3, r3, #1
 800a11c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3308      	adds	r3, #8
 800a124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a126:	61fa      	str	r2, [r7, #28]
 800a128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	69b9      	ldr	r1, [r7, #24]
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	617b      	str	r3, [r7, #20]
   return(result);
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e5      	bne.n	800a106 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2220      	movs	r2, #32
 800a13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e012      	b.n	800a174 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2220      	movs	r2, #32
 800a152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3758      	adds	r7, #88	@ 0x58
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a18c:	e04f      	b.n	800a22e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a194:	d04b      	beq.n	800a22e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a196:	f7f7 fcd9 	bl	8001b4c <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d302      	bcc.n	800a1ac <UART_WaitOnFlagUntilTimeout+0x30>
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e04e      	b.n	800a24e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0304 	and.w	r3, r3, #4
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d037      	beq.n	800a22e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b80      	cmp	r3, #128	@ 0x80
 800a1c2:	d034      	beq.n	800a22e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b40      	cmp	r3, #64	@ 0x40
 800a1c8:	d031      	beq.n	800a22e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	69db      	ldr	r3, [r3, #28]
 800a1d0:	f003 0308 	and.w	r3, r3, #8
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d110      	bne.n	800a1fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2208      	movs	r2, #8
 800a1de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 f839 	bl	800a258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e029      	b.n	800a24e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a208:	d111      	bne.n	800a22e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f81f 	bl	800a258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e00f      	b.n	800a24e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	69da      	ldr	r2, [r3, #28]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4013      	ands	r3, r2
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	bf0c      	ite	eq
 800a23e:	2301      	moveq	r3, #1
 800a240:	2300      	movne	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	461a      	mov	r2, r3
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d0a0      	beq.n	800a18e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b095      	sub	sp, #84	@ 0x54
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a27e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a280:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a284:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e6      	bne.n	800a260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3308      	adds	r3, #8
 800a298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a320 <UART_EndRxTransfer+0xc8>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e5      	bne.n	800a292 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d118      	bne.n	800a300 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f023 0310 	bic.w	r3, r3, #16
 800a2e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6979      	ldr	r1, [r7, #20]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e6      	bne.n	800a2ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2220      	movs	r2, #32
 800a304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a314:	bf00      	nop
 800a316:	3754      	adds	r7, #84	@ 0x54
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	effffffe 	.word	0xeffffffe

0800a324 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff f850 	bl	80093e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	60bb      	str	r3, [r7, #8]
   return(result);
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a36c:	61fb      	str	r3, [r7, #28]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	61bb      	str	r3, [r7, #24]
 800a378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	6979      	ldr	r1, [r7, #20]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	613b      	str	r3, [r7, #16]
   return(result);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e6      	bne.n	800a358 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff f81b 	bl	80093d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a39e:	bf00      	nop
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b085      	sub	sp, #20
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e027      	b.n	800a448 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2224      	movs	r2, #36	@ 0x24
 800a404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0201 	bic.w	r2, r2, #1
 800a41e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a426:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2220      	movs	r2, #32
 800a43a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a464:	2b01      	cmp	r3, #1
 800a466:	d101      	bne.n	800a46c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a468:	2302      	movs	r3, #2
 800a46a:	e02d      	b.n	800a4c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2224      	movs	r2, #36	@ 0x24
 800a478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f84f 	bl	800a54c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d101      	bne.n	800a4e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	e02d      	b.n	800a544 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2224      	movs	r2, #36	@ 0x24
 800a4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0201 	bic.w	r2, r2, #1
 800a50e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f811 	bl	800a54c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2220      	movs	r2, #32
 800a536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d108      	bne.n	800a56e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a56c:	e031      	b.n	800a5d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a56e:	2310      	movs	r3, #16
 800a570:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a572:	2310      	movs	r3, #16
 800a574:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	0e5b      	lsrs	r3, r3, #25
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 0307 	and.w	r3, r3, #7
 800a584:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	0f5b      	lsrs	r3, r3, #29
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f003 0307 	and.w	r3, r3, #7
 800a594:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	7b3a      	ldrb	r2, [r7, #12]
 800a59a:	4911      	ldr	r1, [pc, #68]	@ (800a5e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a59c:	5c8a      	ldrb	r2, [r1, r2]
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5a2:	7b3a      	ldrb	r2, [r7, #12]
 800a5a4:	490f      	ldr	r1, [pc, #60]	@ (800a5e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a5a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	7b7a      	ldrb	r2, [r7, #13]
 800a5b8:	4909      	ldr	r1, [pc, #36]	@ (800a5e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a5ba:	5c8a      	ldrb	r2, [r1, r2]
 800a5bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5c0:	7b7a      	ldrb	r2, [r7, #13]
 800a5c2:	4908      	ldr	r1, [pc, #32]	@ (800a5e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a5c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	0800ebc8 	.word	0x0800ebc8
 800a5e4:	0800ebd0 	.word	0x0800ebd0

0800a5e8 <atoi>:
 800a5e8:	220a      	movs	r2, #10
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f000 b87c 	b.w	800a6e8 <strtol>

0800a5f0 <_strtol_l.constprop.0>:
 800a5f0:	2b24      	cmp	r3, #36	@ 0x24
 800a5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f6:	4686      	mov	lr, r0
 800a5f8:	4690      	mov	r8, r2
 800a5fa:	d801      	bhi.n	800a600 <_strtol_l.constprop.0+0x10>
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d106      	bne.n	800a60e <_strtol_l.constprop.0+0x1e>
 800a600:	f001 f87c 	bl	800b6fc <__errno>
 800a604:	2316      	movs	r3, #22
 800a606:	6003      	str	r3, [r0, #0]
 800a608:	2000      	movs	r0, #0
 800a60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60e:	4834      	ldr	r0, [pc, #208]	@ (800a6e0 <_strtol_l.constprop.0+0xf0>)
 800a610:	460d      	mov	r5, r1
 800a612:	462a      	mov	r2, r5
 800a614:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a618:	5d06      	ldrb	r6, [r0, r4]
 800a61a:	f016 0608 	ands.w	r6, r6, #8
 800a61e:	d1f8      	bne.n	800a612 <_strtol_l.constprop.0+0x22>
 800a620:	2c2d      	cmp	r4, #45	@ 0x2d
 800a622:	d12d      	bne.n	800a680 <_strtol_l.constprop.0+0x90>
 800a624:	782c      	ldrb	r4, [r5, #0]
 800a626:	2601      	movs	r6, #1
 800a628:	1c95      	adds	r5, r2, #2
 800a62a:	f033 0210 	bics.w	r2, r3, #16
 800a62e:	d109      	bne.n	800a644 <_strtol_l.constprop.0+0x54>
 800a630:	2c30      	cmp	r4, #48	@ 0x30
 800a632:	d12a      	bne.n	800a68a <_strtol_l.constprop.0+0x9a>
 800a634:	782a      	ldrb	r2, [r5, #0]
 800a636:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a63a:	2a58      	cmp	r2, #88	@ 0x58
 800a63c:	d125      	bne.n	800a68a <_strtol_l.constprop.0+0x9a>
 800a63e:	786c      	ldrb	r4, [r5, #1]
 800a640:	2310      	movs	r3, #16
 800a642:	3502      	adds	r5, #2
 800a644:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a648:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a64c:	2200      	movs	r2, #0
 800a64e:	fbbc f9f3 	udiv	r9, ip, r3
 800a652:	4610      	mov	r0, r2
 800a654:	fb03 ca19 	mls	sl, r3, r9, ip
 800a658:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a65c:	2f09      	cmp	r7, #9
 800a65e:	d81b      	bhi.n	800a698 <_strtol_l.constprop.0+0xa8>
 800a660:	463c      	mov	r4, r7
 800a662:	42a3      	cmp	r3, r4
 800a664:	dd27      	ble.n	800a6b6 <_strtol_l.constprop.0+0xc6>
 800a666:	1c57      	adds	r7, r2, #1
 800a668:	d007      	beq.n	800a67a <_strtol_l.constprop.0+0x8a>
 800a66a:	4581      	cmp	r9, r0
 800a66c:	d320      	bcc.n	800a6b0 <_strtol_l.constprop.0+0xc0>
 800a66e:	d101      	bne.n	800a674 <_strtol_l.constprop.0+0x84>
 800a670:	45a2      	cmp	sl, r4
 800a672:	db1d      	blt.n	800a6b0 <_strtol_l.constprop.0+0xc0>
 800a674:	fb00 4003 	mla	r0, r0, r3, r4
 800a678:	2201      	movs	r2, #1
 800a67a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a67e:	e7eb      	b.n	800a658 <_strtol_l.constprop.0+0x68>
 800a680:	2c2b      	cmp	r4, #43	@ 0x2b
 800a682:	bf04      	itt	eq
 800a684:	782c      	ldrbeq	r4, [r5, #0]
 800a686:	1c95      	addeq	r5, r2, #2
 800a688:	e7cf      	b.n	800a62a <_strtol_l.constprop.0+0x3a>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1da      	bne.n	800a644 <_strtol_l.constprop.0+0x54>
 800a68e:	2c30      	cmp	r4, #48	@ 0x30
 800a690:	bf0c      	ite	eq
 800a692:	2308      	moveq	r3, #8
 800a694:	230a      	movne	r3, #10
 800a696:	e7d5      	b.n	800a644 <_strtol_l.constprop.0+0x54>
 800a698:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a69c:	2f19      	cmp	r7, #25
 800a69e:	d801      	bhi.n	800a6a4 <_strtol_l.constprop.0+0xb4>
 800a6a0:	3c37      	subs	r4, #55	@ 0x37
 800a6a2:	e7de      	b.n	800a662 <_strtol_l.constprop.0+0x72>
 800a6a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a6a8:	2f19      	cmp	r7, #25
 800a6aa:	d804      	bhi.n	800a6b6 <_strtol_l.constprop.0+0xc6>
 800a6ac:	3c57      	subs	r4, #87	@ 0x57
 800a6ae:	e7d8      	b.n	800a662 <_strtol_l.constprop.0+0x72>
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b4:	e7e1      	b.n	800a67a <_strtol_l.constprop.0+0x8a>
 800a6b6:	1c53      	adds	r3, r2, #1
 800a6b8:	d108      	bne.n	800a6cc <_strtol_l.constprop.0+0xdc>
 800a6ba:	2322      	movs	r3, #34	@ 0x22
 800a6bc:	f8ce 3000 	str.w	r3, [lr]
 800a6c0:	4660      	mov	r0, ip
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	d0a0      	beq.n	800a60a <_strtol_l.constprop.0+0x1a>
 800a6c8:	1e69      	subs	r1, r5, #1
 800a6ca:	e006      	b.n	800a6da <_strtol_l.constprop.0+0xea>
 800a6cc:	b106      	cbz	r6, 800a6d0 <_strtol_l.constprop.0+0xe0>
 800a6ce:	4240      	negs	r0, r0
 800a6d0:	f1b8 0f00 	cmp.w	r8, #0
 800a6d4:	d099      	beq.n	800a60a <_strtol_l.constprop.0+0x1a>
 800a6d6:	2a00      	cmp	r2, #0
 800a6d8:	d1f6      	bne.n	800a6c8 <_strtol_l.constprop.0+0xd8>
 800a6da:	f8c8 1000 	str.w	r1, [r8]
 800a6de:	e794      	b.n	800a60a <_strtol_l.constprop.0+0x1a>
 800a6e0:	0800ebd9 	.word	0x0800ebd9

0800a6e4 <_strtol_r>:
 800a6e4:	f7ff bf84 	b.w	800a5f0 <_strtol_l.constprop.0>

0800a6e8 <strtol>:
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	460a      	mov	r2, r1
 800a6ec:	4601      	mov	r1, r0
 800a6ee:	4802      	ldr	r0, [pc, #8]	@ (800a6f8 <strtol+0x10>)
 800a6f0:	6800      	ldr	r0, [r0, #0]
 800a6f2:	f7ff bf7d 	b.w	800a5f0 <_strtol_l.constprop.0>
 800a6f6:	bf00      	nop
 800a6f8:	2400001c 	.word	0x2400001c

0800a6fc <__cvt>:
 800a6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fe:	ed2d 8b02 	vpush	{d8}
 800a702:	eeb0 8b40 	vmov.f64	d8, d0
 800a706:	b085      	sub	sp, #20
 800a708:	4617      	mov	r7, r2
 800a70a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a70c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a70e:	ee18 2a90 	vmov	r2, s17
 800a712:	f025 0520 	bic.w	r5, r5, #32
 800a716:	2a00      	cmp	r2, #0
 800a718:	bfb6      	itet	lt
 800a71a:	222d      	movlt	r2, #45	@ 0x2d
 800a71c:	2200      	movge	r2, #0
 800a71e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a722:	2d46      	cmp	r5, #70	@ 0x46
 800a724:	460c      	mov	r4, r1
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	d004      	beq.n	800a734 <__cvt+0x38>
 800a72a:	2d45      	cmp	r5, #69	@ 0x45
 800a72c:	d100      	bne.n	800a730 <__cvt+0x34>
 800a72e:	3401      	adds	r4, #1
 800a730:	2102      	movs	r1, #2
 800a732:	e000      	b.n	800a736 <__cvt+0x3a>
 800a734:	2103      	movs	r1, #3
 800a736:	ab03      	add	r3, sp, #12
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	ab02      	add	r3, sp, #8
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	4622      	mov	r2, r4
 800a740:	4633      	mov	r3, r6
 800a742:	eeb0 0b48 	vmov.f64	d0, d8
 800a746:	f001 f8a3 	bl	800b890 <_dtoa_r>
 800a74a:	2d47      	cmp	r5, #71	@ 0x47
 800a74c:	d114      	bne.n	800a778 <__cvt+0x7c>
 800a74e:	07fb      	lsls	r3, r7, #31
 800a750:	d50a      	bpl.n	800a768 <__cvt+0x6c>
 800a752:	1902      	adds	r2, r0, r4
 800a754:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75c:	bf08      	it	eq
 800a75e:	9203      	streq	r2, [sp, #12]
 800a760:	2130      	movs	r1, #48	@ 0x30
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	4293      	cmp	r3, r2
 800a766:	d319      	bcc.n	800a79c <__cvt+0xa0>
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a76c:	1a1b      	subs	r3, r3, r0
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	b005      	add	sp, #20
 800a772:	ecbd 8b02 	vpop	{d8}
 800a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a778:	2d46      	cmp	r5, #70	@ 0x46
 800a77a:	eb00 0204 	add.w	r2, r0, r4
 800a77e:	d1e9      	bne.n	800a754 <__cvt+0x58>
 800a780:	7803      	ldrb	r3, [r0, #0]
 800a782:	2b30      	cmp	r3, #48	@ 0x30
 800a784:	d107      	bne.n	800a796 <__cvt+0x9a>
 800a786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78e:	bf1c      	itt	ne
 800a790:	f1c4 0401 	rsbne	r4, r4, #1
 800a794:	6034      	strne	r4, [r6, #0]
 800a796:	6833      	ldr	r3, [r6, #0]
 800a798:	441a      	add	r2, r3
 800a79a:	e7db      	b.n	800a754 <__cvt+0x58>
 800a79c:	1c5c      	adds	r4, r3, #1
 800a79e:	9403      	str	r4, [sp, #12]
 800a7a0:	7019      	strb	r1, [r3, #0]
 800a7a2:	e7de      	b.n	800a762 <__cvt+0x66>

0800a7a4 <__exponent>:
 800a7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	bfba      	itte	lt
 800a7aa:	4249      	neglt	r1, r1
 800a7ac:	232d      	movlt	r3, #45	@ 0x2d
 800a7ae:	232b      	movge	r3, #43	@ 0x2b
 800a7b0:	2909      	cmp	r1, #9
 800a7b2:	7002      	strb	r2, [r0, #0]
 800a7b4:	7043      	strb	r3, [r0, #1]
 800a7b6:	dd29      	ble.n	800a80c <__exponent+0x68>
 800a7b8:	f10d 0307 	add.w	r3, sp, #7
 800a7bc:	461d      	mov	r5, r3
 800a7be:	270a      	movs	r7, #10
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	fbb1 f6f7 	udiv	r6, r1, r7
 800a7c6:	fb07 1416 	mls	r4, r7, r6, r1
 800a7ca:	3430      	adds	r4, #48	@ 0x30
 800a7cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	2c63      	cmp	r4, #99	@ 0x63
 800a7d4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7d8:	4631      	mov	r1, r6
 800a7da:	dcf1      	bgt.n	800a7c0 <__exponent+0x1c>
 800a7dc:	3130      	adds	r1, #48	@ 0x30
 800a7de:	1e94      	subs	r4, r2, #2
 800a7e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7e4:	1c41      	adds	r1, r0, #1
 800a7e6:	4623      	mov	r3, r4
 800a7e8:	42ab      	cmp	r3, r5
 800a7ea:	d30a      	bcc.n	800a802 <__exponent+0x5e>
 800a7ec:	f10d 0309 	add.w	r3, sp, #9
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	42ac      	cmp	r4, r5
 800a7f4:	bf88      	it	hi
 800a7f6:	2300      	movhi	r3, #0
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	4403      	add	r3, r0
 800a7fc:	1a18      	subs	r0, r3, r0
 800a7fe:	b003      	add	sp, #12
 800a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a802:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a806:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a80a:	e7ed      	b.n	800a7e8 <__exponent+0x44>
 800a80c:	2330      	movs	r3, #48	@ 0x30
 800a80e:	3130      	adds	r1, #48	@ 0x30
 800a810:	7083      	strb	r3, [r0, #2]
 800a812:	70c1      	strb	r1, [r0, #3]
 800a814:	1d03      	adds	r3, r0, #4
 800a816:	e7f1      	b.n	800a7fc <__exponent+0x58>

0800a818 <_printf_float>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	b08d      	sub	sp, #52	@ 0x34
 800a81e:	460c      	mov	r4, r1
 800a820:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a824:	4616      	mov	r6, r2
 800a826:	461f      	mov	r7, r3
 800a828:	4605      	mov	r5, r0
 800a82a:	f000 ff1d 	bl	800b668 <_localeconv_r>
 800a82e:	f8d0 b000 	ldr.w	fp, [r0]
 800a832:	4658      	mov	r0, fp
 800a834:	f7f5 fda4 	bl	8000380 <strlen>
 800a838:	2300      	movs	r3, #0
 800a83a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a83c:	f8d8 3000 	ldr.w	r3, [r8]
 800a840:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a844:	6822      	ldr	r2, [r4, #0]
 800a846:	9005      	str	r0, [sp, #20]
 800a848:	3307      	adds	r3, #7
 800a84a:	f023 0307 	bic.w	r3, r3, #7
 800a84e:	f103 0108 	add.w	r1, r3, #8
 800a852:	f8c8 1000 	str.w	r1, [r8]
 800a856:	ed93 0b00 	vldr	d0, [r3]
 800a85a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aab8 <_printf_float+0x2a0>
 800a85e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a862:	eeb4 7b46 	vcmp.f64	d7, d6
 800a866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a86e:	dd24      	ble.n	800a8ba <_printf_float+0xa2>
 800a870:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a878:	d502      	bpl.n	800a880 <_printf_float+0x68>
 800a87a:	232d      	movs	r3, #45	@ 0x2d
 800a87c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a880:	498f      	ldr	r1, [pc, #572]	@ (800aac0 <_printf_float+0x2a8>)
 800a882:	4b90      	ldr	r3, [pc, #576]	@ (800aac4 <_printf_float+0x2ac>)
 800a884:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a888:	bf94      	ite	ls
 800a88a:	4688      	movls	r8, r1
 800a88c:	4698      	movhi	r8, r3
 800a88e:	f022 0204 	bic.w	r2, r2, #4
 800a892:	2303      	movs	r3, #3
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	f04f 0a00 	mov.w	sl, #0
 800a89c:	9700      	str	r7, [sp, #0]
 800a89e:	4633      	mov	r3, r6
 800a8a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	f000 f9d1 	bl	800ac4c <_printf_common>
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	f040 8089 	bne.w	800a9c2 <_printf_float+0x1aa>
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	b00d      	add	sp, #52	@ 0x34
 800a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ba:	eeb4 0b40 	vcmp.f64	d0, d0
 800a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c2:	d709      	bvc.n	800a8d8 <_printf_float+0xc0>
 800a8c4:	ee10 3a90 	vmov	r3, s1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfbc      	itt	lt
 800a8cc:	232d      	movlt	r3, #45	@ 0x2d
 800a8ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8d2:	497d      	ldr	r1, [pc, #500]	@ (800aac8 <_printf_float+0x2b0>)
 800a8d4:	4b7d      	ldr	r3, [pc, #500]	@ (800aacc <_printf_float+0x2b4>)
 800a8d6:	e7d5      	b.n	800a884 <_printf_float+0x6c>
 800a8d8:	6863      	ldr	r3, [r4, #4]
 800a8da:	1c59      	adds	r1, r3, #1
 800a8dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a8e0:	d139      	bne.n	800a956 <_printf_float+0x13e>
 800a8e2:	2306      	movs	r3, #6
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	6022      	str	r2, [r4, #0]
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a8f6:	ab09      	add	r3, sp, #36	@ 0x24
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	6861      	ldr	r1, [r4, #4]
 800a8fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a900:	4628      	mov	r0, r5
 800a902:	f7ff fefb 	bl	800a6fc <__cvt>
 800a906:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a90a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a90c:	4680      	mov	r8, r0
 800a90e:	d129      	bne.n	800a964 <_printf_float+0x14c>
 800a910:	1cc8      	adds	r0, r1, #3
 800a912:	db02      	blt.n	800a91a <_printf_float+0x102>
 800a914:	6863      	ldr	r3, [r4, #4]
 800a916:	4299      	cmp	r1, r3
 800a918:	dd41      	ble.n	800a99e <_printf_float+0x186>
 800a91a:	f1a9 0902 	sub.w	r9, r9, #2
 800a91e:	fa5f f989 	uxtb.w	r9, r9
 800a922:	3901      	subs	r1, #1
 800a924:	464a      	mov	r2, r9
 800a926:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a92a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a92c:	f7ff ff3a 	bl	800a7a4 <__exponent>
 800a930:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a932:	1813      	adds	r3, r2, r0
 800a934:	2a01      	cmp	r2, #1
 800a936:	4682      	mov	sl, r0
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	dc02      	bgt.n	800a942 <_printf_float+0x12a>
 800a93c:	6822      	ldr	r2, [r4, #0]
 800a93e:	07d2      	lsls	r2, r2, #31
 800a940:	d501      	bpl.n	800a946 <_printf_float+0x12e>
 800a942:	3301      	adds	r3, #1
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0a6      	beq.n	800a89c <_printf_float+0x84>
 800a94e:	232d      	movs	r3, #45	@ 0x2d
 800a950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a954:	e7a2      	b.n	800a89c <_printf_float+0x84>
 800a956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a95a:	d1c4      	bne.n	800a8e6 <_printf_float+0xce>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1c2      	bne.n	800a8e6 <_printf_float+0xce>
 800a960:	2301      	movs	r3, #1
 800a962:	e7bf      	b.n	800a8e4 <_printf_float+0xcc>
 800a964:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a968:	d9db      	bls.n	800a922 <_printf_float+0x10a>
 800a96a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a96e:	d118      	bne.n	800a9a2 <_printf_float+0x18a>
 800a970:	2900      	cmp	r1, #0
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	dd0b      	ble.n	800a98e <_printf_float+0x176>
 800a976:	6121      	str	r1, [r4, #16]
 800a978:	b913      	cbnz	r3, 800a980 <_printf_float+0x168>
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	07d0      	lsls	r0, r2, #31
 800a97e:	d502      	bpl.n	800a986 <_printf_float+0x16e>
 800a980:	3301      	adds	r3, #1
 800a982:	440b      	add	r3, r1
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a988:	f04f 0a00 	mov.w	sl, #0
 800a98c:	e7db      	b.n	800a946 <_printf_float+0x12e>
 800a98e:	b913      	cbnz	r3, 800a996 <_printf_float+0x17e>
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	07d2      	lsls	r2, r2, #31
 800a994:	d501      	bpl.n	800a99a <_printf_float+0x182>
 800a996:	3302      	adds	r3, #2
 800a998:	e7f4      	b.n	800a984 <_printf_float+0x16c>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7f2      	b.n	800a984 <_printf_float+0x16c>
 800a99e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a4:	4299      	cmp	r1, r3
 800a9a6:	db05      	blt.n	800a9b4 <_printf_float+0x19c>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	6121      	str	r1, [r4, #16]
 800a9ac:	07d8      	lsls	r0, r3, #31
 800a9ae:	d5ea      	bpl.n	800a986 <_printf_float+0x16e>
 800a9b0:	1c4b      	adds	r3, r1, #1
 800a9b2:	e7e7      	b.n	800a984 <_printf_float+0x16c>
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	bfd4      	ite	le
 800a9b8:	f1c1 0202 	rsble	r2, r1, #2
 800a9bc:	2201      	movgt	r2, #1
 800a9be:	4413      	add	r3, r2
 800a9c0:	e7e0      	b.n	800a984 <_printf_float+0x16c>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	055a      	lsls	r2, r3, #21
 800a9c6:	d407      	bmi.n	800a9d8 <_printf_float+0x1c0>
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	47b8      	blx	r7
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d12a      	bne.n	800aa2c <_printf_float+0x214>
 800a9d6:	e76b      	b.n	800a8b0 <_printf_float+0x98>
 800a9d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a9dc:	f240 80e0 	bls.w	800aba0 <_printf_float+0x388>
 800a9e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a9e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ec:	d133      	bne.n	800aa56 <_printf_float+0x23e>
 800a9ee:	4a38      	ldr	r2, [pc, #224]	@ (800aad0 <_printf_float+0x2b8>)
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f43f af59 	beq.w	800a8b0 <_printf_float+0x98>
 800a9fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa02:	4543      	cmp	r3, r8
 800aa04:	db02      	blt.n	800aa0c <_printf_float+0x1f4>
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	07d8      	lsls	r0, r3, #31
 800aa0a:	d50f      	bpl.n	800aa2c <_printf_float+0x214>
 800aa0c:	9b05      	ldr	r3, [sp, #20]
 800aa0e:	465a      	mov	r2, fp
 800aa10:	4631      	mov	r1, r6
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f af4a 	beq.w	800a8b0 <_printf_float+0x98>
 800aa1c:	f04f 0900 	mov.w	r9, #0
 800aa20:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa24:	f104 0a1a 	add.w	sl, r4, #26
 800aa28:	45c8      	cmp	r8, r9
 800aa2a:	dc09      	bgt.n	800aa40 <_printf_float+0x228>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	079b      	lsls	r3, r3, #30
 800aa30:	f100 8107 	bmi.w	800ac42 <_printf_float+0x42a>
 800aa34:	68e0      	ldr	r0, [r4, #12]
 800aa36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa38:	4298      	cmp	r0, r3
 800aa3a:	bfb8      	it	lt
 800aa3c:	4618      	movlt	r0, r3
 800aa3e:	e739      	b.n	800a8b4 <_printf_float+0x9c>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4652      	mov	r2, sl
 800aa44:	4631      	mov	r1, r6
 800aa46:	4628      	mov	r0, r5
 800aa48:	47b8      	blx	r7
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	f43f af30 	beq.w	800a8b0 <_printf_float+0x98>
 800aa50:	f109 0901 	add.w	r9, r9, #1
 800aa54:	e7e8      	b.n	800aa28 <_printf_float+0x210>
 800aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dc3b      	bgt.n	800aad4 <_printf_float+0x2bc>
 800aa5c:	4a1c      	ldr	r2, [pc, #112]	@ (800aad0 <_printf_float+0x2b8>)
 800aa5e:	2301      	movs	r3, #1
 800aa60:	4631      	mov	r1, r6
 800aa62:	4628      	mov	r0, r5
 800aa64:	47b8      	blx	r7
 800aa66:	3001      	adds	r0, #1
 800aa68:	f43f af22 	beq.w	800a8b0 <_printf_float+0x98>
 800aa6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa70:	ea59 0303 	orrs.w	r3, r9, r3
 800aa74:	d102      	bne.n	800aa7c <_printf_float+0x264>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	07d9      	lsls	r1, r3, #31
 800aa7a:	d5d7      	bpl.n	800aa2c <_printf_float+0x214>
 800aa7c:	9b05      	ldr	r3, [sp, #20]
 800aa7e:	465a      	mov	r2, fp
 800aa80:	4631      	mov	r1, r6
 800aa82:	4628      	mov	r0, r5
 800aa84:	47b8      	blx	r7
 800aa86:	3001      	adds	r0, #1
 800aa88:	f43f af12 	beq.w	800a8b0 <_printf_float+0x98>
 800aa8c:	f04f 0a00 	mov.w	sl, #0
 800aa90:	f104 0b1a 	add.w	fp, r4, #26
 800aa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa96:	425b      	negs	r3, r3
 800aa98:	4553      	cmp	r3, sl
 800aa9a:	dc01      	bgt.n	800aaa0 <_printf_float+0x288>
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	e794      	b.n	800a9ca <_printf_float+0x1b2>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	465a      	mov	r2, fp
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f af00 	beq.w	800a8b0 <_printf_float+0x98>
 800aab0:	f10a 0a01 	add.w	sl, sl, #1
 800aab4:	e7ee      	b.n	800aa94 <_printf_float+0x27c>
 800aab6:	bf00      	nop
 800aab8:	ffffffff 	.word	0xffffffff
 800aabc:	7fefffff 	.word	0x7fefffff
 800aac0:	0800ecd9 	.word	0x0800ecd9
 800aac4:	0800ecdd 	.word	0x0800ecdd
 800aac8:	0800ece1 	.word	0x0800ece1
 800aacc:	0800ece5 	.word	0x0800ece5
 800aad0:	0800ece9 	.word	0x0800ece9
 800aad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aad6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aada:	4553      	cmp	r3, sl
 800aadc:	bfa8      	it	ge
 800aade:	4653      	movge	r3, sl
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	4699      	mov	r9, r3
 800aae4:	dc37      	bgt.n	800ab56 <_printf_float+0x33e>
 800aae6:	2300      	movs	r3, #0
 800aae8:	9307      	str	r3, [sp, #28]
 800aaea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaee:	f104 021a 	add.w	r2, r4, #26
 800aaf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaf4:	9907      	ldr	r1, [sp, #28]
 800aaf6:	9306      	str	r3, [sp, #24]
 800aaf8:	eba3 0309 	sub.w	r3, r3, r9
 800aafc:	428b      	cmp	r3, r1
 800aafe:	dc31      	bgt.n	800ab64 <_printf_float+0x34c>
 800ab00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab02:	459a      	cmp	sl, r3
 800ab04:	dc3b      	bgt.n	800ab7e <_printf_float+0x366>
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	07da      	lsls	r2, r3, #31
 800ab0a:	d438      	bmi.n	800ab7e <_printf_float+0x366>
 800ab0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0e:	ebaa 0903 	sub.w	r9, sl, r3
 800ab12:	9b06      	ldr	r3, [sp, #24]
 800ab14:	ebaa 0303 	sub.w	r3, sl, r3
 800ab18:	4599      	cmp	r9, r3
 800ab1a:	bfa8      	it	ge
 800ab1c:	4699      	movge	r9, r3
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	dc34      	bgt.n	800ab8e <_printf_float+0x376>
 800ab24:	f04f 0800 	mov.w	r8, #0
 800ab28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab2c:	f104 0b1a 	add.w	fp, r4, #26
 800ab30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab32:	ebaa 0303 	sub.w	r3, sl, r3
 800ab36:	eba3 0309 	sub.w	r3, r3, r9
 800ab3a:	4543      	cmp	r3, r8
 800ab3c:	f77f af76 	ble.w	800aa2c <_printf_float+0x214>
 800ab40:	2301      	movs	r3, #1
 800ab42:	465a      	mov	r2, fp
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	f43f aeb0 	beq.w	800a8b0 <_printf_float+0x98>
 800ab50:	f108 0801 	add.w	r8, r8, #1
 800ab54:	e7ec      	b.n	800ab30 <_printf_float+0x318>
 800ab56:	4642      	mov	r2, r8
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	47b8      	blx	r7
 800ab5e:	3001      	adds	r0, #1
 800ab60:	d1c1      	bne.n	800aae6 <_printf_float+0x2ce>
 800ab62:	e6a5      	b.n	800a8b0 <_printf_float+0x98>
 800ab64:	2301      	movs	r3, #1
 800ab66:	4631      	mov	r1, r6
 800ab68:	4628      	mov	r0, r5
 800ab6a:	9206      	str	r2, [sp, #24]
 800ab6c:	47b8      	blx	r7
 800ab6e:	3001      	adds	r0, #1
 800ab70:	f43f ae9e 	beq.w	800a8b0 <_printf_float+0x98>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	9a06      	ldr	r2, [sp, #24]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	9307      	str	r3, [sp, #28]
 800ab7c:	e7b9      	b.n	800aaf2 <_printf_float+0x2da>
 800ab7e:	9b05      	ldr	r3, [sp, #20]
 800ab80:	465a      	mov	r2, fp
 800ab82:	4631      	mov	r1, r6
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d1bf      	bne.n	800ab0c <_printf_float+0x2f4>
 800ab8c:	e690      	b.n	800a8b0 <_printf_float+0x98>
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	464b      	mov	r3, r9
 800ab92:	4442      	add	r2, r8
 800ab94:	4631      	mov	r1, r6
 800ab96:	4628      	mov	r0, r5
 800ab98:	47b8      	blx	r7
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	d1c2      	bne.n	800ab24 <_printf_float+0x30c>
 800ab9e:	e687      	b.n	800a8b0 <_printf_float+0x98>
 800aba0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aba4:	f1b9 0f01 	cmp.w	r9, #1
 800aba8:	dc01      	bgt.n	800abae <_printf_float+0x396>
 800abaa:	07db      	lsls	r3, r3, #31
 800abac:	d536      	bpl.n	800ac1c <_printf_float+0x404>
 800abae:	2301      	movs	r3, #1
 800abb0:	4642      	mov	r2, r8
 800abb2:	4631      	mov	r1, r6
 800abb4:	4628      	mov	r0, r5
 800abb6:	47b8      	blx	r7
 800abb8:	3001      	adds	r0, #1
 800abba:	f43f ae79 	beq.w	800a8b0 <_printf_float+0x98>
 800abbe:	9b05      	ldr	r3, [sp, #20]
 800abc0:	465a      	mov	r2, fp
 800abc2:	4631      	mov	r1, r6
 800abc4:	4628      	mov	r0, r5
 800abc6:	47b8      	blx	r7
 800abc8:	3001      	adds	r0, #1
 800abca:	f43f ae71 	beq.w	800a8b0 <_printf_float+0x98>
 800abce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800abd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800abd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abda:	f109 39ff 	add.w	r9, r9, #4294967295
 800abde:	d018      	beq.n	800ac12 <_printf_float+0x3fa>
 800abe0:	464b      	mov	r3, r9
 800abe2:	f108 0201 	add.w	r2, r8, #1
 800abe6:	4631      	mov	r1, r6
 800abe8:	4628      	mov	r0, r5
 800abea:	47b8      	blx	r7
 800abec:	3001      	adds	r0, #1
 800abee:	d10c      	bne.n	800ac0a <_printf_float+0x3f2>
 800abf0:	e65e      	b.n	800a8b0 <_printf_float+0x98>
 800abf2:	2301      	movs	r3, #1
 800abf4:	465a      	mov	r2, fp
 800abf6:	4631      	mov	r1, r6
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b8      	blx	r7
 800abfc:	3001      	adds	r0, #1
 800abfe:	f43f ae57 	beq.w	800a8b0 <_printf_float+0x98>
 800ac02:	f108 0801 	add.w	r8, r8, #1
 800ac06:	45c8      	cmp	r8, r9
 800ac08:	dbf3      	blt.n	800abf2 <_printf_float+0x3da>
 800ac0a:	4653      	mov	r3, sl
 800ac0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac10:	e6dc      	b.n	800a9cc <_printf_float+0x1b4>
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	f104 0b1a 	add.w	fp, r4, #26
 800ac1a:	e7f4      	b.n	800ac06 <_printf_float+0x3ee>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	4642      	mov	r2, r8
 800ac20:	e7e1      	b.n	800abe6 <_printf_float+0x3ce>
 800ac22:	2301      	movs	r3, #1
 800ac24:	464a      	mov	r2, r9
 800ac26:	4631      	mov	r1, r6
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b8      	blx	r7
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	f43f ae3f 	beq.w	800a8b0 <_printf_float+0x98>
 800ac32:	f108 0801 	add.w	r8, r8, #1
 800ac36:	68e3      	ldr	r3, [r4, #12]
 800ac38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac3a:	1a5b      	subs	r3, r3, r1
 800ac3c:	4543      	cmp	r3, r8
 800ac3e:	dcf0      	bgt.n	800ac22 <_printf_float+0x40a>
 800ac40:	e6f8      	b.n	800aa34 <_printf_float+0x21c>
 800ac42:	f04f 0800 	mov.w	r8, #0
 800ac46:	f104 0919 	add.w	r9, r4, #25
 800ac4a:	e7f4      	b.n	800ac36 <_printf_float+0x41e>

0800ac4c <_printf_common>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	4616      	mov	r6, r2
 800ac52:	4698      	mov	r8, r3
 800ac54:	688a      	ldr	r2, [r1, #8]
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	bfb8      	it	lt
 800ac60:	4613      	movlt	r3, r2
 800ac62:	6033      	str	r3, [r6, #0]
 800ac64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac68:	4607      	mov	r7, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	b10a      	cbz	r2, 800ac72 <_printf_common+0x26>
 800ac6e:	3301      	adds	r3, #1
 800ac70:	6033      	str	r3, [r6, #0]
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	0699      	lsls	r1, r3, #26
 800ac76:	bf42      	ittt	mi
 800ac78:	6833      	ldrmi	r3, [r6, #0]
 800ac7a:	3302      	addmi	r3, #2
 800ac7c:	6033      	strmi	r3, [r6, #0]
 800ac7e:	6825      	ldr	r5, [r4, #0]
 800ac80:	f015 0506 	ands.w	r5, r5, #6
 800ac84:	d106      	bne.n	800ac94 <_printf_common+0x48>
 800ac86:	f104 0a19 	add.w	sl, r4, #25
 800ac8a:	68e3      	ldr	r3, [r4, #12]
 800ac8c:	6832      	ldr	r2, [r6, #0]
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	42ab      	cmp	r3, r5
 800ac92:	dc26      	bgt.n	800ace2 <_printf_common+0x96>
 800ac94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	3b00      	subs	r3, #0
 800ac9c:	bf18      	it	ne
 800ac9e:	2301      	movne	r3, #1
 800aca0:	0692      	lsls	r2, r2, #26
 800aca2:	d42b      	bmi.n	800acfc <_printf_common+0xb0>
 800aca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aca8:	4641      	mov	r1, r8
 800acaa:	4638      	mov	r0, r7
 800acac:	47c8      	blx	r9
 800acae:	3001      	adds	r0, #1
 800acb0:	d01e      	beq.n	800acf0 <_printf_common+0xa4>
 800acb2:	6823      	ldr	r3, [r4, #0]
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	f003 0306 	and.w	r3, r3, #6
 800acba:	2b04      	cmp	r3, #4
 800acbc:	bf02      	ittt	eq
 800acbe:	68e5      	ldreq	r5, [r4, #12]
 800acc0:	6833      	ldreq	r3, [r6, #0]
 800acc2:	1aed      	subeq	r5, r5, r3
 800acc4:	68a3      	ldr	r3, [r4, #8]
 800acc6:	bf0c      	ite	eq
 800acc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800accc:	2500      	movne	r5, #0
 800acce:	4293      	cmp	r3, r2
 800acd0:	bfc4      	itt	gt
 800acd2:	1a9b      	subgt	r3, r3, r2
 800acd4:	18ed      	addgt	r5, r5, r3
 800acd6:	2600      	movs	r6, #0
 800acd8:	341a      	adds	r4, #26
 800acda:	42b5      	cmp	r5, r6
 800acdc:	d11a      	bne.n	800ad14 <_printf_common+0xc8>
 800acde:	2000      	movs	r0, #0
 800ace0:	e008      	b.n	800acf4 <_printf_common+0xa8>
 800ace2:	2301      	movs	r3, #1
 800ace4:	4652      	mov	r2, sl
 800ace6:	4641      	mov	r1, r8
 800ace8:	4638      	mov	r0, r7
 800acea:	47c8      	blx	r9
 800acec:	3001      	adds	r0, #1
 800acee:	d103      	bne.n	800acf8 <_printf_common+0xac>
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf8:	3501      	adds	r5, #1
 800acfa:	e7c6      	b.n	800ac8a <_printf_common+0x3e>
 800acfc:	18e1      	adds	r1, r4, r3
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	2030      	movs	r0, #48	@ 0x30
 800ad02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad06:	4422      	add	r2, r4
 800ad08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad10:	3302      	adds	r3, #2
 800ad12:	e7c7      	b.n	800aca4 <_printf_common+0x58>
 800ad14:	2301      	movs	r3, #1
 800ad16:	4622      	mov	r2, r4
 800ad18:	4641      	mov	r1, r8
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	47c8      	blx	r9
 800ad1e:	3001      	adds	r0, #1
 800ad20:	d0e6      	beq.n	800acf0 <_printf_common+0xa4>
 800ad22:	3601      	adds	r6, #1
 800ad24:	e7d9      	b.n	800acda <_printf_common+0x8e>
	...

0800ad28 <_printf_i>:
 800ad28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	7e0f      	ldrb	r7, [r1, #24]
 800ad2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad30:	2f78      	cmp	r7, #120	@ 0x78
 800ad32:	4691      	mov	r9, r2
 800ad34:	4680      	mov	r8, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	469a      	mov	sl, r3
 800ad3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad3e:	d807      	bhi.n	800ad50 <_printf_i+0x28>
 800ad40:	2f62      	cmp	r7, #98	@ 0x62
 800ad42:	d80a      	bhi.n	800ad5a <_printf_i+0x32>
 800ad44:	2f00      	cmp	r7, #0
 800ad46:	f000 80d2 	beq.w	800aeee <_printf_i+0x1c6>
 800ad4a:	2f58      	cmp	r7, #88	@ 0x58
 800ad4c:	f000 80b9 	beq.w	800aec2 <_printf_i+0x19a>
 800ad50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad58:	e03a      	b.n	800add0 <_printf_i+0xa8>
 800ad5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad5e:	2b15      	cmp	r3, #21
 800ad60:	d8f6      	bhi.n	800ad50 <_printf_i+0x28>
 800ad62:	a101      	add	r1, pc, #4	@ (adr r1, 800ad68 <_printf_i+0x40>)
 800ad64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad68:	0800adc1 	.word	0x0800adc1
 800ad6c:	0800add5 	.word	0x0800add5
 800ad70:	0800ad51 	.word	0x0800ad51
 800ad74:	0800ad51 	.word	0x0800ad51
 800ad78:	0800ad51 	.word	0x0800ad51
 800ad7c:	0800ad51 	.word	0x0800ad51
 800ad80:	0800add5 	.word	0x0800add5
 800ad84:	0800ad51 	.word	0x0800ad51
 800ad88:	0800ad51 	.word	0x0800ad51
 800ad8c:	0800ad51 	.word	0x0800ad51
 800ad90:	0800ad51 	.word	0x0800ad51
 800ad94:	0800aed5 	.word	0x0800aed5
 800ad98:	0800adff 	.word	0x0800adff
 800ad9c:	0800ae8f 	.word	0x0800ae8f
 800ada0:	0800ad51 	.word	0x0800ad51
 800ada4:	0800ad51 	.word	0x0800ad51
 800ada8:	0800aef7 	.word	0x0800aef7
 800adac:	0800ad51 	.word	0x0800ad51
 800adb0:	0800adff 	.word	0x0800adff
 800adb4:	0800ad51 	.word	0x0800ad51
 800adb8:	0800ad51 	.word	0x0800ad51
 800adbc:	0800ae97 	.word	0x0800ae97
 800adc0:	6833      	ldr	r3, [r6, #0]
 800adc2:	1d1a      	adds	r2, r3, #4
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6032      	str	r2, [r6, #0]
 800adc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800add0:	2301      	movs	r3, #1
 800add2:	e09d      	b.n	800af10 <_printf_i+0x1e8>
 800add4:	6833      	ldr	r3, [r6, #0]
 800add6:	6820      	ldr	r0, [r4, #0]
 800add8:	1d19      	adds	r1, r3, #4
 800adda:	6031      	str	r1, [r6, #0]
 800addc:	0606      	lsls	r6, r0, #24
 800adde:	d501      	bpl.n	800ade4 <_printf_i+0xbc>
 800ade0:	681d      	ldr	r5, [r3, #0]
 800ade2:	e003      	b.n	800adec <_printf_i+0xc4>
 800ade4:	0645      	lsls	r5, r0, #25
 800ade6:	d5fb      	bpl.n	800ade0 <_printf_i+0xb8>
 800ade8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adec:	2d00      	cmp	r5, #0
 800adee:	da03      	bge.n	800adf8 <_printf_i+0xd0>
 800adf0:	232d      	movs	r3, #45	@ 0x2d
 800adf2:	426d      	negs	r5, r5
 800adf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adf8:	4859      	ldr	r0, [pc, #356]	@ (800af60 <_printf_i+0x238>)
 800adfa:	230a      	movs	r3, #10
 800adfc:	e011      	b.n	800ae22 <_printf_i+0xfa>
 800adfe:	6821      	ldr	r1, [r4, #0]
 800ae00:	6833      	ldr	r3, [r6, #0]
 800ae02:	0608      	lsls	r0, r1, #24
 800ae04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae08:	d402      	bmi.n	800ae10 <_printf_i+0xe8>
 800ae0a:	0649      	lsls	r1, r1, #25
 800ae0c:	bf48      	it	mi
 800ae0e:	b2ad      	uxthmi	r5, r5
 800ae10:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae12:	4853      	ldr	r0, [pc, #332]	@ (800af60 <_printf_i+0x238>)
 800ae14:	6033      	str	r3, [r6, #0]
 800ae16:	bf14      	ite	ne
 800ae18:	230a      	movne	r3, #10
 800ae1a:	2308      	moveq	r3, #8
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae22:	6866      	ldr	r6, [r4, #4]
 800ae24:	60a6      	str	r6, [r4, #8]
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	bfa2      	ittt	ge
 800ae2a:	6821      	ldrge	r1, [r4, #0]
 800ae2c:	f021 0104 	bicge.w	r1, r1, #4
 800ae30:	6021      	strge	r1, [r4, #0]
 800ae32:	b90d      	cbnz	r5, 800ae38 <_printf_i+0x110>
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	d04b      	beq.n	800aed0 <_printf_i+0x1a8>
 800ae38:	4616      	mov	r6, r2
 800ae3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae42:	5dc7      	ldrb	r7, [r0, r7]
 800ae44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae48:	462f      	mov	r7, r5
 800ae4a:	42bb      	cmp	r3, r7
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	d9f4      	bls.n	800ae3a <_printf_i+0x112>
 800ae50:	2b08      	cmp	r3, #8
 800ae52:	d10b      	bne.n	800ae6c <_printf_i+0x144>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	07df      	lsls	r7, r3, #31
 800ae58:	d508      	bpl.n	800ae6c <_printf_i+0x144>
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	6861      	ldr	r1, [r4, #4]
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	bfde      	ittt	le
 800ae62:	2330      	movle	r3, #48	@ 0x30
 800ae64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae6c:	1b92      	subs	r2, r2, r6
 800ae6e:	6122      	str	r2, [r4, #16]
 800ae70:	f8cd a000 	str.w	sl, [sp]
 800ae74:	464b      	mov	r3, r9
 800ae76:	aa03      	add	r2, sp, #12
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f7ff fee6 	bl	800ac4c <_printf_common>
 800ae80:	3001      	adds	r0, #1
 800ae82:	d14a      	bne.n	800af1a <_printf_i+0x1f2>
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	b004      	add	sp, #16
 800ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	f043 0320 	orr.w	r3, r3, #32
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	4833      	ldr	r0, [pc, #204]	@ (800af64 <_printf_i+0x23c>)
 800ae98:	2778      	movs	r7, #120	@ 0x78
 800ae9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	6831      	ldr	r1, [r6, #0]
 800aea2:	061f      	lsls	r7, r3, #24
 800aea4:	f851 5b04 	ldr.w	r5, [r1], #4
 800aea8:	d402      	bmi.n	800aeb0 <_printf_i+0x188>
 800aeaa:	065f      	lsls	r7, r3, #25
 800aeac:	bf48      	it	mi
 800aeae:	b2ad      	uxthmi	r5, r5
 800aeb0:	6031      	str	r1, [r6, #0]
 800aeb2:	07d9      	lsls	r1, r3, #31
 800aeb4:	bf44      	itt	mi
 800aeb6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeba:	6023      	strmi	r3, [r4, #0]
 800aebc:	b11d      	cbz	r5, 800aec6 <_printf_i+0x19e>
 800aebe:	2310      	movs	r3, #16
 800aec0:	e7ac      	b.n	800ae1c <_printf_i+0xf4>
 800aec2:	4827      	ldr	r0, [pc, #156]	@ (800af60 <_printf_i+0x238>)
 800aec4:	e7e9      	b.n	800ae9a <_printf_i+0x172>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	f023 0320 	bic.w	r3, r3, #32
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	e7f6      	b.n	800aebe <_printf_i+0x196>
 800aed0:	4616      	mov	r6, r2
 800aed2:	e7bd      	b.n	800ae50 <_printf_i+0x128>
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	6825      	ldr	r5, [r4, #0]
 800aed8:	6961      	ldr	r1, [r4, #20]
 800aeda:	1d18      	adds	r0, r3, #4
 800aedc:	6030      	str	r0, [r6, #0]
 800aede:	062e      	lsls	r6, r5, #24
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	d501      	bpl.n	800aee8 <_printf_i+0x1c0>
 800aee4:	6019      	str	r1, [r3, #0]
 800aee6:	e002      	b.n	800aeee <_printf_i+0x1c6>
 800aee8:	0668      	lsls	r0, r5, #25
 800aeea:	d5fb      	bpl.n	800aee4 <_printf_i+0x1bc>
 800aeec:	8019      	strh	r1, [r3, #0]
 800aeee:	2300      	movs	r3, #0
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	4616      	mov	r6, r2
 800aef4:	e7bc      	b.n	800ae70 <_printf_i+0x148>
 800aef6:	6833      	ldr	r3, [r6, #0]
 800aef8:	1d1a      	adds	r2, r3, #4
 800aefa:	6032      	str	r2, [r6, #0]
 800aefc:	681e      	ldr	r6, [r3, #0]
 800aefe:	6862      	ldr	r2, [r4, #4]
 800af00:	2100      	movs	r1, #0
 800af02:	4630      	mov	r0, r6
 800af04:	f7f5 f9ec 	bl	80002e0 <memchr>
 800af08:	b108      	cbz	r0, 800af0e <_printf_i+0x1e6>
 800af0a:	1b80      	subs	r0, r0, r6
 800af0c:	6060      	str	r0, [r4, #4]
 800af0e:	6863      	ldr	r3, [r4, #4]
 800af10:	6123      	str	r3, [r4, #16]
 800af12:	2300      	movs	r3, #0
 800af14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af18:	e7aa      	b.n	800ae70 <_printf_i+0x148>
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	4632      	mov	r2, r6
 800af1e:	4649      	mov	r1, r9
 800af20:	4640      	mov	r0, r8
 800af22:	47d0      	blx	sl
 800af24:	3001      	adds	r0, #1
 800af26:	d0ad      	beq.n	800ae84 <_printf_i+0x15c>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	079b      	lsls	r3, r3, #30
 800af2c:	d413      	bmi.n	800af56 <_printf_i+0x22e>
 800af2e:	68e0      	ldr	r0, [r4, #12]
 800af30:	9b03      	ldr	r3, [sp, #12]
 800af32:	4298      	cmp	r0, r3
 800af34:	bfb8      	it	lt
 800af36:	4618      	movlt	r0, r3
 800af38:	e7a6      	b.n	800ae88 <_printf_i+0x160>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4632      	mov	r2, r6
 800af3e:	4649      	mov	r1, r9
 800af40:	4640      	mov	r0, r8
 800af42:	47d0      	blx	sl
 800af44:	3001      	adds	r0, #1
 800af46:	d09d      	beq.n	800ae84 <_printf_i+0x15c>
 800af48:	3501      	adds	r5, #1
 800af4a:	68e3      	ldr	r3, [r4, #12]
 800af4c:	9903      	ldr	r1, [sp, #12]
 800af4e:	1a5b      	subs	r3, r3, r1
 800af50:	42ab      	cmp	r3, r5
 800af52:	dcf2      	bgt.n	800af3a <_printf_i+0x212>
 800af54:	e7eb      	b.n	800af2e <_printf_i+0x206>
 800af56:	2500      	movs	r5, #0
 800af58:	f104 0619 	add.w	r6, r4, #25
 800af5c:	e7f5      	b.n	800af4a <_printf_i+0x222>
 800af5e:	bf00      	nop
 800af60:	0800eceb 	.word	0x0800eceb
 800af64:	0800ecfc 	.word	0x0800ecfc

0800af68 <_scanf_float>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	b087      	sub	sp, #28
 800af6e:	4617      	mov	r7, r2
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	688b      	ldr	r3, [r1, #8]
 800af74:	1e5a      	subs	r2, r3, #1
 800af76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af7a:	bf81      	itttt	hi
 800af7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af80:	eb03 0b05 	addhi.w	fp, r3, r5
 800af84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af88:	608b      	strhi	r3, [r1, #8]
 800af8a:	680b      	ldr	r3, [r1, #0]
 800af8c:	460a      	mov	r2, r1
 800af8e:	f04f 0500 	mov.w	r5, #0
 800af92:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af96:	f842 3b1c 	str.w	r3, [r2], #28
 800af9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af9e:	4680      	mov	r8, r0
 800afa0:	460c      	mov	r4, r1
 800afa2:	bf98      	it	ls
 800afa4:	f04f 0b00 	movls.w	fp, #0
 800afa8:	9201      	str	r2, [sp, #4]
 800afaa:	4616      	mov	r6, r2
 800afac:	46aa      	mov	sl, r5
 800afae:	46a9      	mov	r9, r5
 800afb0:	9502      	str	r5, [sp, #8]
 800afb2:	68a2      	ldr	r2, [r4, #8]
 800afb4:	b152      	cbz	r2, 800afcc <_scanf_float+0x64>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b4e      	cmp	r3, #78	@ 0x4e
 800afbc:	d864      	bhi.n	800b088 <_scanf_float+0x120>
 800afbe:	2b40      	cmp	r3, #64	@ 0x40
 800afc0:	d83c      	bhi.n	800b03c <_scanf_float+0xd4>
 800afc2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800afc6:	b2c8      	uxtb	r0, r1
 800afc8:	280e      	cmp	r0, #14
 800afca:	d93a      	bls.n	800b042 <_scanf_float+0xda>
 800afcc:	f1b9 0f00 	cmp.w	r9, #0
 800afd0:	d003      	beq.n	800afda <_scanf_float+0x72>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afde:	f1ba 0f01 	cmp.w	sl, #1
 800afe2:	f200 8117 	bhi.w	800b214 <_scanf_float+0x2ac>
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	429e      	cmp	r6, r3
 800afea:	f200 8108 	bhi.w	800b1fe <_scanf_float+0x296>
 800afee:	2001      	movs	r0, #1
 800aff0:	b007      	add	sp, #28
 800aff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800affa:	2a0d      	cmp	r2, #13
 800affc:	d8e6      	bhi.n	800afcc <_scanf_float+0x64>
 800affe:	a101      	add	r1, pc, #4	@ (adr r1, 800b004 <_scanf_float+0x9c>)
 800b000:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b004:	0800b14b 	.word	0x0800b14b
 800b008:	0800afcd 	.word	0x0800afcd
 800b00c:	0800afcd 	.word	0x0800afcd
 800b010:	0800afcd 	.word	0x0800afcd
 800b014:	0800b1ab 	.word	0x0800b1ab
 800b018:	0800b183 	.word	0x0800b183
 800b01c:	0800afcd 	.word	0x0800afcd
 800b020:	0800afcd 	.word	0x0800afcd
 800b024:	0800b159 	.word	0x0800b159
 800b028:	0800afcd 	.word	0x0800afcd
 800b02c:	0800afcd 	.word	0x0800afcd
 800b030:	0800afcd 	.word	0x0800afcd
 800b034:	0800afcd 	.word	0x0800afcd
 800b038:	0800b111 	.word	0x0800b111
 800b03c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b040:	e7db      	b.n	800affa <_scanf_float+0x92>
 800b042:	290e      	cmp	r1, #14
 800b044:	d8c2      	bhi.n	800afcc <_scanf_float+0x64>
 800b046:	a001      	add	r0, pc, #4	@ (adr r0, 800b04c <_scanf_float+0xe4>)
 800b048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b04c:	0800b101 	.word	0x0800b101
 800b050:	0800afcd 	.word	0x0800afcd
 800b054:	0800b101 	.word	0x0800b101
 800b058:	0800b197 	.word	0x0800b197
 800b05c:	0800afcd 	.word	0x0800afcd
 800b060:	0800b0a9 	.word	0x0800b0a9
 800b064:	0800b0e7 	.word	0x0800b0e7
 800b068:	0800b0e7 	.word	0x0800b0e7
 800b06c:	0800b0e7 	.word	0x0800b0e7
 800b070:	0800b0e7 	.word	0x0800b0e7
 800b074:	0800b0e7 	.word	0x0800b0e7
 800b078:	0800b0e7 	.word	0x0800b0e7
 800b07c:	0800b0e7 	.word	0x0800b0e7
 800b080:	0800b0e7 	.word	0x0800b0e7
 800b084:	0800b0e7 	.word	0x0800b0e7
 800b088:	2b6e      	cmp	r3, #110	@ 0x6e
 800b08a:	d809      	bhi.n	800b0a0 <_scanf_float+0x138>
 800b08c:	2b60      	cmp	r3, #96	@ 0x60
 800b08e:	d8b2      	bhi.n	800aff6 <_scanf_float+0x8e>
 800b090:	2b54      	cmp	r3, #84	@ 0x54
 800b092:	d07b      	beq.n	800b18c <_scanf_float+0x224>
 800b094:	2b59      	cmp	r3, #89	@ 0x59
 800b096:	d199      	bne.n	800afcc <_scanf_float+0x64>
 800b098:	2d07      	cmp	r5, #7
 800b09a:	d197      	bne.n	800afcc <_scanf_float+0x64>
 800b09c:	2508      	movs	r5, #8
 800b09e:	e02c      	b.n	800b0fa <_scanf_float+0x192>
 800b0a0:	2b74      	cmp	r3, #116	@ 0x74
 800b0a2:	d073      	beq.n	800b18c <_scanf_float+0x224>
 800b0a4:	2b79      	cmp	r3, #121	@ 0x79
 800b0a6:	e7f6      	b.n	800b096 <_scanf_float+0x12e>
 800b0a8:	6821      	ldr	r1, [r4, #0]
 800b0aa:	05c8      	lsls	r0, r1, #23
 800b0ac:	d51b      	bpl.n	800b0e6 <_scanf_float+0x17e>
 800b0ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b0b2:	6021      	str	r1, [r4, #0]
 800b0b4:	f109 0901 	add.w	r9, r9, #1
 800b0b8:	f1bb 0f00 	cmp.w	fp, #0
 800b0bc:	d003      	beq.n	800b0c6 <_scanf_float+0x15e>
 800b0be:	3201      	adds	r2, #1
 800b0c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0c4:	60a2      	str	r2, [r4, #8]
 800b0c6:	68a3      	ldr	r3, [r4, #8]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	60a3      	str	r3, [r4, #8]
 800b0cc:	6923      	ldr	r3, [r4, #16]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]
 800b0da:	f340 8087 	ble.w	800b1ec <_scanf_float+0x284>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	e765      	b.n	800afb2 <_scanf_float+0x4a>
 800b0e6:	eb1a 0105 	adds.w	r1, sl, r5
 800b0ea:	f47f af6f 	bne.w	800afcc <_scanf_float+0x64>
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0f4:	6022      	str	r2, [r4, #0]
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	468a      	mov	sl, r1
 800b0fa:	f806 3b01 	strb.w	r3, [r6], #1
 800b0fe:	e7e2      	b.n	800b0c6 <_scanf_float+0x15e>
 800b100:	6822      	ldr	r2, [r4, #0]
 800b102:	0610      	lsls	r0, r2, #24
 800b104:	f57f af62 	bpl.w	800afcc <_scanf_float+0x64>
 800b108:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b10c:	6022      	str	r2, [r4, #0]
 800b10e:	e7f4      	b.n	800b0fa <_scanf_float+0x192>
 800b110:	f1ba 0f00 	cmp.w	sl, #0
 800b114:	d10e      	bne.n	800b134 <_scanf_float+0x1cc>
 800b116:	f1b9 0f00 	cmp.w	r9, #0
 800b11a:	d10e      	bne.n	800b13a <_scanf_float+0x1d2>
 800b11c:	6822      	ldr	r2, [r4, #0]
 800b11e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b122:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b126:	d108      	bne.n	800b13a <_scanf_float+0x1d2>
 800b128:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b12c:	6022      	str	r2, [r4, #0]
 800b12e:	f04f 0a01 	mov.w	sl, #1
 800b132:	e7e2      	b.n	800b0fa <_scanf_float+0x192>
 800b134:	f1ba 0f02 	cmp.w	sl, #2
 800b138:	d055      	beq.n	800b1e6 <_scanf_float+0x27e>
 800b13a:	2d01      	cmp	r5, #1
 800b13c:	d002      	beq.n	800b144 <_scanf_float+0x1dc>
 800b13e:	2d04      	cmp	r5, #4
 800b140:	f47f af44 	bne.w	800afcc <_scanf_float+0x64>
 800b144:	3501      	adds	r5, #1
 800b146:	b2ed      	uxtb	r5, r5
 800b148:	e7d7      	b.n	800b0fa <_scanf_float+0x192>
 800b14a:	f1ba 0f01 	cmp.w	sl, #1
 800b14e:	f47f af3d 	bne.w	800afcc <_scanf_float+0x64>
 800b152:	f04f 0a02 	mov.w	sl, #2
 800b156:	e7d0      	b.n	800b0fa <_scanf_float+0x192>
 800b158:	b97d      	cbnz	r5, 800b17a <_scanf_float+0x212>
 800b15a:	f1b9 0f00 	cmp.w	r9, #0
 800b15e:	f47f af38 	bne.w	800afd2 <_scanf_float+0x6a>
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b168:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b16c:	f040 8101 	bne.w	800b372 <_scanf_float+0x40a>
 800b170:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b174:	6022      	str	r2, [r4, #0]
 800b176:	2501      	movs	r5, #1
 800b178:	e7bf      	b.n	800b0fa <_scanf_float+0x192>
 800b17a:	2d03      	cmp	r5, #3
 800b17c:	d0e2      	beq.n	800b144 <_scanf_float+0x1dc>
 800b17e:	2d05      	cmp	r5, #5
 800b180:	e7de      	b.n	800b140 <_scanf_float+0x1d8>
 800b182:	2d02      	cmp	r5, #2
 800b184:	f47f af22 	bne.w	800afcc <_scanf_float+0x64>
 800b188:	2503      	movs	r5, #3
 800b18a:	e7b6      	b.n	800b0fa <_scanf_float+0x192>
 800b18c:	2d06      	cmp	r5, #6
 800b18e:	f47f af1d 	bne.w	800afcc <_scanf_float+0x64>
 800b192:	2507      	movs	r5, #7
 800b194:	e7b1      	b.n	800b0fa <_scanf_float+0x192>
 800b196:	6822      	ldr	r2, [r4, #0]
 800b198:	0591      	lsls	r1, r2, #22
 800b19a:	f57f af17 	bpl.w	800afcc <_scanf_float+0x64>
 800b19e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b1a2:	6022      	str	r2, [r4, #0]
 800b1a4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1a8:	e7a7      	b.n	800b0fa <_scanf_float+0x192>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b1b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b1b4:	d006      	beq.n	800b1c4 <_scanf_float+0x25c>
 800b1b6:	0550      	lsls	r0, r2, #21
 800b1b8:	f57f af08 	bpl.w	800afcc <_scanf_float+0x64>
 800b1bc:	f1b9 0f00 	cmp.w	r9, #0
 800b1c0:	f000 80d7 	beq.w	800b372 <_scanf_float+0x40a>
 800b1c4:	0591      	lsls	r1, r2, #22
 800b1c6:	bf58      	it	pl
 800b1c8:	9902      	ldrpl	r1, [sp, #8]
 800b1ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1ce:	bf58      	it	pl
 800b1d0:	eba9 0101 	subpl.w	r1, r9, r1
 800b1d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b1d8:	bf58      	it	pl
 800b1da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1de:	6022      	str	r2, [r4, #0]
 800b1e0:	f04f 0900 	mov.w	r9, #0
 800b1e4:	e789      	b.n	800b0fa <_scanf_float+0x192>
 800b1e6:	f04f 0a03 	mov.w	sl, #3
 800b1ea:	e786      	b.n	800b0fa <_scanf_float+0x192>
 800b1ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4798      	blx	r3
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f43f aedb 	beq.w	800afb2 <_scanf_float+0x4a>
 800b1fc:	e6e6      	b.n	800afcc <_scanf_float+0x64>
 800b1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b202:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b206:	463a      	mov	r2, r7
 800b208:	4640      	mov	r0, r8
 800b20a:	4798      	blx	r3
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	3b01      	subs	r3, #1
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	e6e8      	b.n	800afe6 <_scanf_float+0x7e>
 800b214:	1e6b      	subs	r3, r5, #1
 800b216:	2b06      	cmp	r3, #6
 800b218:	d824      	bhi.n	800b264 <_scanf_float+0x2fc>
 800b21a:	2d02      	cmp	r5, #2
 800b21c:	d836      	bhi.n	800b28c <_scanf_float+0x324>
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	429e      	cmp	r6, r3
 800b222:	f67f aee4 	bls.w	800afee <_scanf_float+0x86>
 800b226:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b22a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b22e:	463a      	mov	r2, r7
 800b230:	4640      	mov	r0, r8
 800b232:	4798      	blx	r3
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	3b01      	subs	r3, #1
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	e7f0      	b.n	800b21e <_scanf_float+0x2b6>
 800b23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b240:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b244:	463a      	mov	r2, r7
 800b246:	4640      	mov	r0, r8
 800b248:	4798      	blx	r3
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	6123      	str	r3, [r4, #16]
 800b250:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b254:	fa5f fa8a 	uxtb.w	sl, sl
 800b258:	f1ba 0f02 	cmp.w	sl, #2
 800b25c:	d1ee      	bne.n	800b23c <_scanf_float+0x2d4>
 800b25e:	3d03      	subs	r5, #3
 800b260:	b2ed      	uxtb	r5, r5
 800b262:	1b76      	subs	r6, r6, r5
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	05da      	lsls	r2, r3, #23
 800b268:	d530      	bpl.n	800b2cc <_scanf_float+0x364>
 800b26a:	055b      	lsls	r3, r3, #21
 800b26c:	d511      	bpl.n	800b292 <_scanf_float+0x32a>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	429e      	cmp	r6, r3
 800b272:	f67f aebc 	bls.w	800afee <_scanf_float+0x86>
 800b276:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b27a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b27e:	463a      	mov	r2, r7
 800b280:	4640      	mov	r0, r8
 800b282:	4798      	blx	r3
 800b284:	6923      	ldr	r3, [r4, #16]
 800b286:	3b01      	subs	r3, #1
 800b288:	6123      	str	r3, [r4, #16]
 800b28a:	e7f0      	b.n	800b26e <_scanf_float+0x306>
 800b28c:	46aa      	mov	sl, r5
 800b28e:	46b3      	mov	fp, r6
 800b290:	e7de      	b.n	800b250 <_scanf_float+0x2e8>
 800b292:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	2965      	cmp	r1, #101	@ 0x65
 800b29a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b29e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	d00c      	beq.n	800b2c0 <_scanf_float+0x358>
 800b2a6:	2945      	cmp	r1, #69	@ 0x45
 800b2a8:	d00a      	beq.n	800b2c0 <_scanf_float+0x358>
 800b2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ae:	463a      	mov	r2, r7
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4798      	blx	r3
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	1eb5      	subs	r5, r6, #2
 800b2be:	6123      	str	r3, [r4, #16]
 800b2c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2c4:	463a      	mov	r2, r7
 800b2c6:	4640      	mov	r0, r8
 800b2c8:	4798      	blx	r3
 800b2ca:	462e      	mov	r6, r5
 800b2cc:	6822      	ldr	r2, [r4, #0]
 800b2ce:	f012 0210 	ands.w	r2, r2, #16
 800b2d2:	d001      	beq.n	800b2d8 <_scanf_float+0x370>
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e68b      	b.n	800aff0 <_scanf_float+0x88>
 800b2d8:	7032      	strb	r2, [r6, #0]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2e4:	d11a      	bne.n	800b31c <_scanf_float+0x3b4>
 800b2e6:	9b02      	ldr	r3, [sp, #8]
 800b2e8:	454b      	cmp	r3, r9
 800b2ea:	eba3 0209 	sub.w	r2, r3, r9
 800b2ee:	d121      	bne.n	800b334 <_scanf_float+0x3cc>
 800b2f0:	9901      	ldr	r1, [sp, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	f002 fb81 	bl	800d9fc <_strtod_r>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f011 0f02 	tst.w	r1, #2
 800b304:	f103 0204 	add.w	r2, r3, #4
 800b308:	d01f      	beq.n	800b34a <_scanf_float+0x3e2>
 800b30a:	9903      	ldr	r1, [sp, #12]
 800b30c:	600a      	str	r2, [r1, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	ed83 0b00 	vstr	d0, [r3]
 800b314:	68e3      	ldr	r3, [r4, #12]
 800b316:	3301      	adds	r3, #1
 800b318:	60e3      	str	r3, [r4, #12]
 800b31a:	e7db      	b.n	800b2d4 <_scanf_float+0x36c>
 800b31c:	9b04      	ldr	r3, [sp, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0e6      	beq.n	800b2f0 <_scanf_float+0x388>
 800b322:	9905      	ldr	r1, [sp, #20]
 800b324:	230a      	movs	r3, #10
 800b326:	3101      	adds	r1, #1
 800b328:	4640      	mov	r0, r8
 800b32a:	f7ff f9db 	bl	800a6e4 <_strtol_r>
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	9e05      	ldr	r6, [sp, #20]
 800b332:	1ac2      	subs	r2, r0, r3
 800b334:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b338:	429e      	cmp	r6, r3
 800b33a:	bf28      	it	cs
 800b33c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b340:	490d      	ldr	r1, [pc, #52]	@ (800b378 <_scanf_float+0x410>)
 800b342:	4630      	mov	r0, r6
 800b344:	f000 f912 	bl	800b56c <siprintf>
 800b348:	e7d2      	b.n	800b2f0 <_scanf_float+0x388>
 800b34a:	f011 0f04 	tst.w	r1, #4
 800b34e:	9903      	ldr	r1, [sp, #12]
 800b350:	600a      	str	r2, [r1, #0]
 800b352:	d1dc      	bne.n	800b30e <_scanf_float+0x3a6>
 800b354:	eeb4 0b40 	vcmp.f64	d0, d0
 800b358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35c:	681d      	ldr	r5, [r3, #0]
 800b35e:	d705      	bvc.n	800b36c <_scanf_float+0x404>
 800b360:	4806      	ldr	r0, [pc, #24]	@ (800b37c <_scanf_float+0x414>)
 800b362:	f000 fa07 	bl	800b774 <nanf>
 800b366:	ed85 0a00 	vstr	s0, [r5]
 800b36a:	e7d3      	b.n	800b314 <_scanf_float+0x3ac>
 800b36c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b370:	e7f9      	b.n	800b366 <_scanf_float+0x3fe>
 800b372:	f04f 0900 	mov.w	r9, #0
 800b376:	e630      	b.n	800afda <_scanf_float+0x72>
 800b378:	0800ed0d 	.word	0x0800ed0d
 800b37c:	0800efa4 	.word	0x0800efa4

0800b380 <std>:
 800b380:	2300      	movs	r3, #0
 800b382:	b510      	push	{r4, lr}
 800b384:	4604      	mov	r4, r0
 800b386:	e9c0 3300 	strd	r3, r3, [r0]
 800b38a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b38e:	6083      	str	r3, [r0, #8]
 800b390:	8181      	strh	r1, [r0, #12]
 800b392:	6643      	str	r3, [r0, #100]	@ 0x64
 800b394:	81c2      	strh	r2, [r0, #14]
 800b396:	6183      	str	r3, [r0, #24]
 800b398:	4619      	mov	r1, r3
 800b39a:	2208      	movs	r2, #8
 800b39c:	305c      	adds	r0, #92	@ 0x5c
 800b39e:	f000 f948 	bl	800b632 <memset>
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d8 <std+0x58>)
 800b3a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <std+0x5c>)
 800b3a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <std+0x60>)
 800b3ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <std+0x64>)
 800b3b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e8 <std+0x68>)
 800b3b4:	6224      	str	r4, [r4, #32]
 800b3b6:	429c      	cmp	r4, r3
 800b3b8:	d006      	beq.n	800b3c8 <std+0x48>
 800b3ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3be:	4294      	cmp	r4, r2
 800b3c0:	d002      	beq.n	800b3c8 <std+0x48>
 800b3c2:	33d0      	adds	r3, #208	@ 0xd0
 800b3c4:	429c      	cmp	r4, r3
 800b3c6:	d105      	bne.n	800b3d4 <std+0x54>
 800b3c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d0:	f000 b9be 	b.w	800b750 <__retarget_lock_init_recursive>
 800b3d4:	bd10      	pop	{r4, pc}
 800b3d6:	bf00      	nop
 800b3d8:	0800b5ad 	.word	0x0800b5ad
 800b3dc:	0800b5cf 	.word	0x0800b5cf
 800b3e0:	0800b607 	.word	0x0800b607
 800b3e4:	0800b62b 	.word	0x0800b62b
 800b3e8:	24000394 	.word	0x24000394

0800b3ec <stdio_exit_handler>:
 800b3ec:	4a02      	ldr	r2, [pc, #8]	@ (800b3f8 <stdio_exit_handler+0xc>)
 800b3ee:	4903      	ldr	r1, [pc, #12]	@ (800b3fc <stdio_exit_handler+0x10>)
 800b3f0:	4803      	ldr	r0, [pc, #12]	@ (800b400 <stdio_exit_handler+0x14>)
 800b3f2:	f000 b869 	b.w	800b4c8 <_fwalk_sglue>
 800b3f6:	bf00      	nop
 800b3f8:	24000010 	.word	0x24000010
 800b3fc:	0800ddc1 	.word	0x0800ddc1
 800b400:	24000020 	.word	0x24000020

0800b404 <cleanup_stdio>:
 800b404:	6841      	ldr	r1, [r0, #4]
 800b406:	4b0c      	ldr	r3, [pc, #48]	@ (800b438 <cleanup_stdio+0x34>)
 800b408:	4299      	cmp	r1, r3
 800b40a:	b510      	push	{r4, lr}
 800b40c:	4604      	mov	r4, r0
 800b40e:	d001      	beq.n	800b414 <cleanup_stdio+0x10>
 800b410:	f002 fcd6 	bl	800ddc0 <_fflush_r>
 800b414:	68a1      	ldr	r1, [r4, #8]
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <cleanup_stdio+0x38>)
 800b418:	4299      	cmp	r1, r3
 800b41a:	d002      	beq.n	800b422 <cleanup_stdio+0x1e>
 800b41c:	4620      	mov	r0, r4
 800b41e:	f002 fccf 	bl	800ddc0 <_fflush_r>
 800b422:	68e1      	ldr	r1, [r4, #12]
 800b424:	4b06      	ldr	r3, [pc, #24]	@ (800b440 <cleanup_stdio+0x3c>)
 800b426:	4299      	cmp	r1, r3
 800b428:	d004      	beq.n	800b434 <cleanup_stdio+0x30>
 800b42a:	4620      	mov	r0, r4
 800b42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b430:	f002 bcc6 	b.w	800ddc0 <_fflush_r>
 800b434:	bd10      	pop	{r4, pc}
 800b436:	bf00      	nop
 800b438:	24000394 	.word	0x24000394
 800b43c:	240003fc 	.word	0x240003fc
 800b440:	24000464 	.word	0x24000464

0800b444 <global_stdio_init.part.0>:
 800b444:	b510      	push	{r4, lr}
 800b446:	4b0b      	ldr	r3, [pc, #44]	@ (800b474 <global_stdio_init.part.0+0x30>)
 800b448:	4c0b      	ldr	r4, [pc, #44]	@ (800b478 <global_stdio_init.part.0+0x34>)
 800b44a:	4a0c      	ldr	r2, [pc, #48]	@ (800b47c <global_stdio_init.part.0+0x38>)
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	4620      	mov	r0, r4
 800b450:	2200      	movs	r2, #0
 800b452:	2104      	movs	r1, #4
 800b454:	f7ff ff94 	bl	800b380 <std>
 800b458:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b45c:	2201      	movs	r2, #1
 800b45e:	2109      	movs	r1, #9
 800b460:	f7ff ff8e 	bl	800b380 <std>
 800b464:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b468:	2202      	movs	r2, #2
 800b46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b46e:	2112      	movs	r1, #18
 800b470:	f7ff bf86 	b.w	800b380 <std>
 800b474:	240004cc 	.word	0x240004cc
 800b478:	24000394 	.word	0x24000394
 800b47c:	0800b3ed 	.word	0x0800b3ed

0800b480 <__sfp_lock_acquire>:
 800b480:	4801      	ldr	r0, [pc, #4]	@ (800b488 <__sfp_lock_acquire+0x8>)
 800b482:	f000 b966 	b.w	800b752 <__retarget_lock_acquire_recursive>
 800b486:	bf00      	nop
 800b488:	240004d5 	.word	0x240004d5

0800b48c <__sfp_lock_release>:
 800b48c:	4801      	ldr	r0, [pc, #4]	@ (800b494 <__sfp_lock_release+0x8>)
 800b48e:	f000 b961 	b.w	800b754 <__retarget_lock_release_recursive>
 800b492:	bf00      	nop
 800b494:	240004d5 	.word	0x240004d5

0800b498 <__sinit>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	4604      	mov	r4, r0
 800b49c:	f7ff fff0 	bl	800b480 <__sfp_lock_acquire>
 800b4a0:	6a23      	ldr	r3, [r4, #32]
 800b4a2:	b11b      	cbz	r3, 800b4ac <__sinit+0x14>
 800b4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a8:	f7ff bff0 	b.w	800b48c <__sfp_lock_release>
 800b4ac:	4b04      	ldr	r3, [pc, #16]	@ (800b4c0 <__sinit+0x28>)
 800b4ae:	6223      	str	r3, [r4, #32]
 800b4b0:	4b04      	ldr	r3, [pc, #16]	@ (800b4c4 <__sinit+0x2c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1f5      	bne.n	800b4a4 <__sinit+0xc>
 800b4b8:	f7ff ffc4 	bl	800b444 <global_stdio_init.part.0>
 800b4bc:	e7f2      	b.n	800b4a4 <__sinit+0xc>
 800b4be:	bf00      	nop
 800b4c0:	0800b405 	.word	0x0800b405
 800b4c4:	240004cc 	.word	0x240004cc

0800b4c8 <_fwalk_sglue>:
 800b4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	4688      	mov	r8, r1
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	2600      	movs	r6, #0
 800b4d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b4dc:	d505      	bpl.n	800b4ea <_fwalk_sglue+0x22>
 800b4de:	6824      	ldr	r4, [r4, #0]
 800b4e0:	2c00      	cmp	r4, #0
 800b4e2:	d1f7      	bne.n	800b4d4 <_fwalk_sglue+0xc>
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d907      	bls.n	800b500 <_fwalk_sglue+0x38>
 800b4f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	d003      	beq.n	800b500 <_fwalk_sglue+0x38>
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	47c0      	blx	r8
 800b4fe:	4306      	orrs	r6, r0
 800b500:	3568      	adds	r5, #104	@ 0x68
 800b502:	e7e9      	b.n	800b4d8 <_fwalk_sglue+0x10>

0800b504 <sniprintf>:
 800b504:	b40c      	push	{r2, r3}
 800b506:	b530      	push	{r4, r5, lr}
 800b508:	4b17      	ldr	r3, [pc, #92]	@ (800b568 <sniprintf+0x64>)
 800b50a:	1e0c      	subs	r4, r1, #0
 800b50c:	681d      	ldr	r5, [r3, #0]
 800b50e:	b09d      	sub	sp, #116	@ 0x74
 800b510:	da08      	bge.n	800b524 <sniprintf+0x20>
 800b512:	238b      	movs	r3, #139	@ 0x8b
 800b514:	602b      	str	r3, [r5, #0]
 800b516:	f04f 30ff 	mov.w	r0, #4294967295
 800b51a:	b01d      	add	sp, #116	@ 0x74
 800b51c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b520:	b002      	add	sp, #8
 800b522:	4770      	bx	lr
 800b524:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b528:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b52c:	bf14      	ite	ne
 800b52e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b532:	4623      	moveq	r3, r4
 800b534:	9304      	str	r3, [sp, #16]
 800b536:	9307      	str	r3, [sp, #28]
 800b538:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b53c:	9002      	str	r0, [sp, #8]
 800b53e:	9006      	str	r0, [sp, #24]
 800b540:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b544:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b546:	ab21      	add	r3, sp, #132	@ 0x84
 800b548:	a902      	add	r1, sp, #8
 800b54a:	4628      	mov	r0, r5
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	f002 fab7 	bl	800dac0 <_svfiprintf_r>
 800b552:	1c43      	adds	r3, r0, #1
 800b554:	bfbc      	itt	lt
 800b556:	238b      	movlt	r3, #139	@ 0x8b
 800b558:	602b      	strlt	r3, [r5, #0]
 800b55a:	2c00      	cmp	r4, #0
 800b55c:	d0dd      	beq.n	800b51a <sniprintf+0x16>
 800b55e:	9b02      	ldr	r3, [sp, #8]
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
 800b564:	e7d9      	b.n	800b51a <sniprintf+0x16>
 800b566:	bf00      	nop
 800b568:	2400001c 	.word	0x2400001c

0800b56c <siprintf>:
 800b56c:	b40e      	push	{r1, r2, r3}
 800b56e:	b500      	push	{lr}
 800b570:	b09c      	sub	sp, #112	@ 0x70
 800b572:	ab1d      	add	r3, sp, #116	@ 0x74
 800b574:	9002      	str	r0, [sp, #8]
 800b576:	9006      	str	r0, [sp, #24]
 800b578:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b57c:	4809      	ldr	r0, [pc, #36]	@ (800b5a4 <siprintf+0x38>)
 800b57e:	9107      	str	r1, [sp, #28]
 800b580:	9104      	str	r1, [sp, #16]
 800b582:	4909      	ldr	r1, [pc, #36]	@ (800b5a8 <siprintf+0x3c>)
 800b584:	f853 2b04 	ldr.w	r2, [r3], #4
 800b588:	9105      	str	r1, [sp, #20]
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	a902      	add	r1, sp, #8
 800b590:	f002 fa96 	bl	800dac0 <_svfiprintf_r>
 800b594:	9b02      	ldr	r3, [sp, #8]
 800b596:	2200      	movs	r2, #0
 800b598:	701a      	strb	r2, [r3, #0]
 800b59a:	b01c      	add	sp, #112	@ 0x70
 800b59c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a0:	b003      	add	sp, #12
 800b5a2:	4770      	bx	lr
 800b5a4:	2400001c 	.word	0x2400001c
 800b5a8:	ffff0208 	.word	0xffff0208

0800b5ac <__sread>:
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b4:	f000 f87e 	bl	800b6b4 <_read_r>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	bfab      	itete	ge
 800b5bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5be:	89a3      	ldrhlt	r3, [r4, #12]
 800b5c0:	181b      	addge	r3, r3, r0
 800b5c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5c6:	bfac      	ite	ge
 800b5c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5ca:	81a3      	strhlt	r3, [r4, #12]
 800b5cc:	bd10      	pop	{r4, pc}

0800b5ce <__swrite>:
 800b5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	461f      	mov	r7, r3
 800b5d4:	898b      	ldrh	r3, [r1, #12]
 800b5d6:	05db      	lsls	r3, r3, #23
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	4616      	mov	r6, r2
 800b5de:	d505      	bpl.n	800b5ec <__swrite+0x1e>
 800b5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f000 f852 	bl	800b690 <_lseek_r>
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5f6:	81a3      	strh	r3, [r4, #12]
 800b5f8:	4632      	mov	r2, r6
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	f000 b869 	b.w	800b6d8 <_write_r>

0800b606 <__sseek>:
 800b606:	b510      	push	{r4, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 f83f 	bl	800b690 <_lseek_r>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	bf15      	itete	ne
 800b618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b61a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b61e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b622:	81a3      	strheq	r3, [r4, #12]
 800b624:	bf18      	it	ne
 800b626:	81a3      	strhne	r3, [r4, #12]
 800b628:	bd10      	pop	{r4, pc}

0800b62a <__sclose>:
 800b62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62e:	f000 b81f 	b.w	800b670 <_close_r>

0800b632 <memset>:
 800b632:	4402      	add	r2, r0
 800b634:	4603      	mov	r3, r0
 800b636:	4293      	cmp	r3, r2
 800b638:	d100      	bne.n	800b63c <memset+0xa>
 800b63a:	4770      	bx	lr
 800b63c:	f803 1b01 	strb.w	r1, [r3], #1
 800b640:	e7f9      	b.n	800b636 <memset+0x4>

0800b642 <strncmp>:
 800b642:	b510      	push	{r4, lr}
 800b644:	b16a      	cbz	r2, 800b662 <strncmp+0x20>
 800b646:	3901      	subs	r1, #1
 800b648:	1884      	adds	r4, r0, r2
 800b64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b64e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b652:	429a      	cmp	r2, r3
 800b654:	d103      	bne.n	800b65e <strncmp+0x1c>
 800b656:	42a0      	cmp	r0, r4
 800b658:	d001      	beq.n	800b65e <strncmp+0x1c>
 800b65a:	2a00      	cmp	r2, #0
 800b65c:	d1f5      	bne.n	800b64a <strncmp+0x8>
 800b65e:	1ad0      	subs	r0, r2, r3
 800b660:	bd10      	pop	{r4, pc}
 800b662:	4610      	mov	r0, r2
 800b664:	e7fc      	b.n	800b660 <strncmp+0x1e>
	...

0800b668 <_localeconv_r>:
 800b668:	4800      	ldr	r0, [pc, #0]	@ (800b66c <_localeconv_r+0x4>)
 800b66a:	4770      	bx	lr
 800b66c:	2400015c 	.word	0x2400015c

0800b670 <_close_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d06      	ldr	r5, [pc, #24]	@ (800b68c <_close_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	f7f5 ff5a 	bl	8001534 <_close>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_close_r+0x1a>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_close_r+0x1a>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	240004d0 	.word	0x240004d0

0800b690 <_lseek_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	@ (800b6b0 <_lseek_r+0x20>)
 800b694:	4604      	mov	r4, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f5 ff6f 	bl	8001582 <_lseek>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_lseek_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_lseek_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	240004d0 	.word	0x240004d0

0800b6b4 <_read_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d07      	ldr	r5, [pc, #28]	@ (800b6d4 <_read_r+0x20>)
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	4611      	mov	r1, r2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7f5 fefd 	bl	80014c2 <_read>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_read_r+0x1e>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_read_r+0x1e>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	240004d0 	.word	0x240004d0

0800b6d8 <_write_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	@ (800b6f8 <_write_r+0x20>)
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	602a      	str	r2, [r5, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f7f5 ff08 	bl	80014fc <_write>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_write_r+0x1e>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_write_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	240004d0 	.word	0x240004d0

0800b6fc <__errno>:
 800b6fc:	4b01      	ldr	r3, [pc, #4]	@ (800b704 <__errno+0x8>)
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2400001c 	.word	0x2400001c

0800b708 <__libc_init_array>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4d0d      	ldr	r5, [pc, #52]	@ (800b740 <__libc_init_array+0x38>)
 800b70c:	4c0d      	ldr	r4, [pc, #52]	@ (800b744 <__libc_init_array+0x3c>)
 800b70e:	1b64      	subs	r4, r4, r5
 800b710:	10a4      	asrs	r4, r4, #2
 800b712:	2600      	movs	r6, #0
 800b714:	42a6      	cmp	r6, r4
 800b716:	d109      	bne.n	800b72c <__libc_init_array+0x24>
 800b718:	4d0b      	ldr	r5, [pc, #44]	@ (800b748 <__libc_init_array+0x40>)
 800b71a:	4c0c      	ldr	r4, [pc, #48]	@ (800b74c <__libc_init_array+0x44>)
 800b71c:	f003 fa22 	bl	800eb64 <_init>
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	2600      	movs	r6, #0
 800b726:	42a6      	cmp	r6, r4
 800b728:	d105      	bne.n	800b736 <__libc_init_array+0x2e>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b730:	4798      	blx	r3
 800b732:	3601      	adds	r6, #1
 800b734:	e7ee      	b.n	800b714 <__libc_init_array+0xc>
 800b736:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73a:	4798      	blx	r3
 800b73c:	3601      	adds	r6, #1
 800b73e:	e7f2      	b.n	800b726 <__libc_init_array+0x1e>
 800b740:	0800f010 	.word	0x0800f010
 800b744:	0800f010 	.word	0x0800f010
 800b748:	0800f010 	.word	0x0800f010
 800b74c:	0800f014 	.word	0x0800f014

0800b750 <__retarget_lock_init_recursive>:
 800b750:	4770      	bx	lr

0800b752 <__retarget_lock_acquire_recursive>:
 800b752:	4770      	bx	lr

0800b754 <__retarget_lock_release_recursive>:
 800b754:	4770      	bx	lr

0800b756 <memcpy>:
 800b756:	440a      	add	r2, r1
 800b758:	4291      	cmp	r1, r2
 800b75a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b75e:	d100      	bne.n	800b762 <memcpy+0xc>
 800b760:	4770      	bx	lr
 800b762:	b510      	push	{r4, lr}
 800b764:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b76c:	4291      	cmp	r1, r2
 800b76e:	d1f9      	bne.n	800b764 <memcpy+0xe>
 800b770:	bd10      	pop	{r4, pc}
	...

0800b774 <nanf>:
 800b774:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b77c <nanf+0x8>
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	7fc00000 	.word	0x7fc00000

0800b780 <quorem>:
 800b780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	6903      	ldr	r3, [r0, #16]
 800b786:	690c      	ldr	r4, [r1, #16]
 800b788:	42a3      	cmp	r3, r4
 800b78a:	4607      	mov	r7, r0
 800b78c:	db7e      	blt.n	800b88c <quorem+0x10c>
 800b78e:	3c01      	subs	r4, #1
 800b790:	f101 0814 	add.w	r8, r1, #20
 800b794:	00a3      	lsls	r3, r4, #2
 800b796:	f100 0514 	add.w	r5, r0, #20
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7b6:	d32e      	bcc.n	800b816 <quorem+0x96>
 800b7b8:	f04f 0a00 	mov.w	sl, #0
 800b7bc:	46c4      	mov	ip, r8
 800b7be:	46ae      	mov	lr, r5
 800b7c0:	46d3      	mov	fp, sl
 800b7c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7c6:	b298      	uxth	r0, r3
 800b7c8:	fb06 a000 	mla	r0, r6, r0, sl
 800b7cc:	0c02      	lsrs	r2, r0, #16
 800b7ce:	0c1b      	lsrs	r3, r3, #16
 800b7d0:	fb06 2303 	mla	r3, r6, r3, r2
 800b7d4:	f8de 2000 	ldr.w	r2, [lr]
 800b7d8:	b280      	uxth	r0, r0
 800b7da:	b292      	uxth	r2, r2
 800b7dc:	1a12      	subs	r2, r2, r0
 800b7de:	445a      	add	r2, fp
 800b7e0:	f8de 0000 	ldr.w	r0, [lr]
 800b7e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7f8:	45e1      	cmp	r9, ip
 800b7fa:	f84e 2b04 	str.w	r2, [lr], #4
 800b7fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b802:	d2de      	bcs.n	800b7c2 <quorem+0x42>
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	58eb      	ldr	r3, [r5, r3]
 800b808:	b92b      	cbnz	r3, 800b816 <quorem+0x96>
 800b80a:	9b01      	ldr	r3, [sp, #4]
 800b80c:	3b04      	subs	r3, #4
 800b80e:	429d      	cmp	r5, r3
 800b810:	461a      	mov	r2, r3
 800b812:	d32f      	bcc.n	800b874 <quorem+0xf4>
 800b814:	613c      	str	r4, [r7, #16]
 800b816:	4638      	mov	r0, r7
 800b818:	f001 f954 	bl	800cac4 <__mcmp>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	db25      	blt.n	800b86c <quorem+0xec>
 800b820:	4629      	mov	r1, r5
 800b822:	2000      	movs	r0, #0
 800b824:	f858 2b04 	ldr.w	r2, [r8], #4
 800b828:	f8d1 c000 	ldr.w	ip, [r1]
 800b82c:	fa1f fe82 	uxth.w	lr, r2
 800b830:	fa1f f38c 	uxth.w	r3, ip
 800b834:	eba3 030e 	sub.w	r3, r3, lr
 800b838:	4403      	add	r3, r0
 800b83a:	0c12      	lsrs	r2, r2, #16
 800b83c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b840:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b844:	b29b      	uxth	r3, r3
 800b846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b84a:	45c1      	cmp	r9, r8
 800b84c:	f841 3b04 	str.w	r3, [r1], #4
 800b850:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b854:	d2e6      	bcs.n	800b824 <quorem+0xa4>
 800b856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b85a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b85e:	b922      	cbnz	r2, 800b86a <quorem+0xea>
 800b860:	3b04      	subs	r3, #4
 800b862:	429d      	cmp	r5, r3
 800b864:	461a      	mov	r2, r3
 800b866:	d30b      	bcc.n	800b880 <quorem+0x100>
 800b868:	613c      	str	r4, [r7, #16]
 800b86a:	3601      	adds	r6, #1
 800b86c:	4630      	mov	r0, r6
 800b86e:	b003      	add	sp, #12
 800b870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b874:	6812      	ldr	r2, [r2, #0]
 800b876:	3b04      	subs	r3, #4
 800b878:	2a00      	cmp	r2, #0
 800b87a:	d1cb      	bne.n	800b814 <quorem+0x94>
 800b87c:	3c01      	subs	r4, #1
 800b87e:	e7c6      	b.n	800b80e <quorem+0x8e>
 800b880:	6812      	ldr	r2, [r2, #0]
 800b882:	3b04      	subs	r3, #4
 800b884:	2a00      	cmp	r2, #0
 800b886:	d1ef      	bne.n	800b868 <quorem+0xe8>
 800b888:	3c01      	subs	r4, #1
 800b88a:	e7ea      	b.n	800b862 <quorem+0xe2>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7ee      	b.n	800b86e <quorem+0xee>

0800b890 <_dtoa_r>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	ed2d 8b02 	vpush	{d8}
 800b898:	69c7      	ldr	r7, [r0, #28]
 800b89a:	b091      	sub	sp, #68	@ 0x44
 800b89c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8a0:	ec55 4b10 	vmov	r4, r5, d0
 800b8a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b8a6:	9107      	str	r1, [sp, #28]
 800b8a8:	4681      	mov	r9, r0
 800b8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ac:	930d      	str	r3, [sp, #52]	@ 0x34
 800b8ae:	b97f      	cbnz	r7, 800b8d0 <_dtoa_r+0x40>
 800b8b0:	2010      	movs	r0, #16
 800b8b2:	f000 fd8d 	bl	800c3d0 <malloc>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b8bc:	b920      	cbnz	r0, 800b8c8 <_dtoa_r+0x38>
 800b8be:	4ba0      	ldr	r3, [pc, #640]	@ (800bb40 <_dtoa_r+0x2b0>)
 800b8c0:	21ef      	movs	r1, #239	@ 0xef
 800b8c2:	48a0      	ldr	r0, [pc, #640]	@ (800bb44 <_dtoa_r+0x2b4>)
 800b8c4:	f002 fad8 	bl	800de78 <__assert_func>
 800b8c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8cc:	6007      	str	r7, [r0, #0]
 800b8ce:	60c7      	str	r7, [r0, #12]
 800b8d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8d4:	6819      	ldr	r1, [r3, #0]
 800b8d6:	b159      	cbz	r1, 800b8f0 <_dtoa_r+0x60>
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	604a      	str	r2, [r1, #4]
 800b8dc:	2301      	movs	r3, #1
 800b8de:	4093      	lsls	r3, r2
 800b8e0:	608b      	str	r3, [r1, #8]
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	f000 fe6a 	bl	800c5bc <_Bfree>
 800b8e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	1e2b      	subs	r3, r5, #0
 800b8f2:	bfbb      	ittet	lt
 800b8f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8f8:	9303      	strlt	r3, [sp, #12]
 800b8fa:	2300      	movge	r3, #0
 800b8fc:	2201      	movlt	r2, #1
 800b8fe:	bfac      	ite	ge
 800b900:	6033      	strge	r3, [r6, #0]
 800b902:	6032      	strlt	r2, [r6, #0]
 800b904:	4b90      	ldr	r3, [pc, #576]	@ (800bb48 <_dtoa_r+0x2b8>)
 800b906:	9e03      	ldr	r6, [sp, #12]
 800b908:	43b3      	bics	r3, r6
 800b90a:	d110      	bne.n	800b92e <_dtoa_r+0x9e>
 800b90c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b90e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b918:	4323      	orrs	r3, r4
 800b91a:	f000 84de 	beq.w	800c2da <_dtoa_r+0xa4a>
 800b91e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b920:	4f8a      	ldr	r7, [pc, #552]	@ (800bb4c <_dtoa_r+0x2bc>)
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 84e0 	beq.w	800c2e8 <_dtoa_r+0xa58>
 800b928:	1cfb      	adds	r3, r7, #3
 800b92a:	f000 bcdb 	b.w	800c2e4 <_dtoa_r+0xa54>
 800b92e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b932:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b93a:	d10a      	bne.n	800b952 <_dtoa_r+0xc2>
 800b93c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b93e:	2301      	movs	r3, #1
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b944:	b113      	cbz	r3, 800b94c <_dtoa_r+0xbc>
 800b946:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b948:	4b81      	ldr	r3, [pc, #516]	@ (800bb50 <_dtoa_r+0x2c0>)
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	4f81      	ldr	r7, [pc, #516]	@ (800bb54 <_dtoa_r+0x2c4>)
 800b94e:	f000 bccb 	b.w	800c2e8 <_dtoa_r+0xa58>
 800b952:	aa0e      	add	r2, sp, #56	@ 0x38
 800b954:	a90f      	add	r1, sp, #60	@ 0x3c
 800b956:	4648      	mov	r0, r9
 800b958:	eeb0 0b48 	vmov.f64	d0, d8
 800b95c:	f001 f9d2 	bl	800cd04 <__d2b>
 800b960:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b966:	9001      	str	r0, [sp, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d045      	beq.n	800b9f8 <_dtoa_r+0x168>
 800b96c:	eeb0 7b48 	vmov.f64	d7, d8
 800b970:	ee18 1a90 	vmov	r1, s17
 800b974:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b978:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b97c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b980:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b984:	2500      	movs	r5, #0
 800b986:	ee07 1a90 	vmov	s15, r1
 800b98a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b98e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bb28 <_dtoa_r+0x298>
 800b992:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b996:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bb30 <_dtoa_r+0x2a0>
 800b99a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b99e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bb38 <_dtoa_r+0x2a8>
 800b9a2:	ee07 3a90 	vmov	s15, r3
 800b9a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b9aa:	eeb0 7b46 	vmov.f64	d7, d6
 800b9ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b9b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b9b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9be:	ee16 8a90 	vmov	r8, s13
 800b9c2:	d508      	bpl.n	800b9d6 <_dtoa_r+0x146>
 800b9c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b9c8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d0:	bf18      	it	ne
 800b9d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b9d6:	f1b8 0f16 	cmp.w	r8, #22
 800b9da:	d82b      	bhi.n	800ba34 <_dtoa_r+0x1a4>
 800b9dc:	495e      	ldr	r1, [pc, #376]	@ (800bb58 <_dtoa_r+0x2c8>)
 800b9de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b9e2:	ed91 7b00 	vldr	d7, [r1]
 800b9e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ee:	d501      	bpl.n	800b9f4 <_dtoa_r+0x164>
 800b9f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	e01e      	b.n	800ba36 <_dtoa_r+0x1a6>
 800b9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ba00:	2920      	cmp	r1, #32
 800ba02:	bfc1      	itttt	gt
 800ba04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ba08:	408e      	lslgt	r6, r1
 800ba0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ba0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ba12:	bfd6      	itet	le
 800ba14:	f1c1 0120 	rsble	r1, r1, #32
 800ba18:	4331      	orrgt	r1, r6
 800ba1a:	fa04 f101 	lslle.w	r1, r4, r1
 800ba1e:	ee07 1a90 	vmov	s15, r1
 800ba22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ba26:	3b01      	subs	r3, #1
 800ba28:	ee17 1a90 	vmov	r1, s15
 800ba2c:	2501      	movs	r5, #1
 800ba2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ba32:	e7a8      	b.n	800b986 <_dtoa_r+0xf6>
 800ba34:	2101      	movs	r1, #1
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	1e53      	subs	r3, r2, #1
 800ba3a:	9306      	str	r3, [sp, #24]
 800ba3c:	bf45      	ittet	mi
 800ba3e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ba42:	9305      	strmi	r3, [sp, #20]
 800ba44:	2300      	movpl	r3, #0
 800ba46:	2300      	movmi	r3, #0
 800ba48:	bf4c      	ite	mi
 800ba4a:	9306      	strmi	r3, [sp, #24]
 800ba4c:	9305      	strpl	r3, [sp, #20]
 800ba4e:	f1b8 0f00 	cmp.w	r8, #0
 800ba52:	910c      	str	r1, [sp, #48]	@ 0x30
 800ba54:	db18      	blt.n	800ba88 <_dtoa_r+0x1f8>
 800ba56:	9b06      	ldr	r3, [sp, #24]
 800ba58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ba5c:	4443      	add	r3, r8
 800ba5e:	9306      	str	r3, [sp, #24]
 800ba60:	2300      	movs	r3, #0
 800ba62:	9a07      	ldr	r2, [sp, #28]
 800ba64:	2a09      	cmp	r2, #9
 800ba66:	d849      	bhi.n	800bafc <_dtoa_r+0x26c>
 800ba68:	2a05      	cmp	r2, #5
 800ba6a:	bfc4      	itt	gt
 800ba6c:	3a04      	subgt	r2, #4
 800ba6e:	9207      	strgt	r2, [sp, #28]
 800ba70:	9a07      	ldr	r2, [sp, #28]
 800ba72:	f1a2 0202 	sub.w	r2, r2, #2
 800ba76:	bfcc      	ite	gt
 800ba78:	2400      	movgt	r4, #0
 800ba7a:	2401      	movle	r4, #1
 800ba7c:	2a03      	cmp	r2, #3
 800ba7e:	d848      	bhi.n	800bb12 <_dtoa_r+0x282>
 800ba80:	e8df f002 	tbb	[pc, r2]
 800ba84:	3a2c2e0b 	.word	0x3a2c2e0b
 800ba88:	9b05      	ldr	r3, [sp, #20]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	eba3 0308 	sub.w	r3, r3, r8
 800ba90:	9305      	str	r3, [sp, #20]
 800ba92:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba94:	f1c8 0300 	rsb	r3, r8, #0
 800ba98:	e7e3      	b.n	800ba62 <_dtoa_r+0x1d2>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	9208      	str	r2, [sp, #32]
 800ba9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	dc39      	bgt.n	800bb18 <_dtoa_r+0x288>
 800baa4:	f04f 0b01 	mov.w	fp, #1
 800baa8:	46da      	mov	sl, fp
 800baaa:	465a      	mov	r2, fp
 800baac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bab0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bab4:	2100      	movs	r1, #0
 800bab6:	2004      	movs	r0, #4
 800bab8:	f100 0614 	add.w	r6, r0, #20
 800babc:	4296      	cmp	r6, r2
 800babe:	d930      	bls.n	800bb22 <_dtoa_r+0x292>
 800bac0:	6079      	str	r1, [r7, #4]
 800bac2:	4648      	mov	r0, r9
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	f000 fd39 	bl	800c53c <_Balloc>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	4607      	mov	r7, r0
 800bace:	2800      	cmp	r0, #0
 800bad0:	d146      	bne.n	800bb60 <_dtoa_r+0x2d0>
 800bad2:	4b22      	ldr	r3, [pc, #136]	@ (800bb5c <_dtoa_r+0x2cc>)
 800bad4:	4602      	mov	r2, r0
 800bad6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bada:	e6f2      	b.n	800b8c2 <_dtoa_r+0x32>
 800badc:	2201      	movs	r2, #1
 800bade:	e7dd      	b.n	800ba9c <_dtoa_r+0x20c>
 800bae0:	2200      	movs	r2, #0
 800bae2:	9208      	str	r2, [sp, #32]
 800bae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bae6:	eb08 0b02 	add.w	fp, r8, r2
 800baea:	f10b 0a01 	add.w	sl, fp, #1
 800baee:	4652      	mov	r2, sl
 800baf0:	2a01      	cmp	r2, #1
 800baf2:	bfb8      	it	lt
 800baf4:	2201      	movlt	r2, #1
 800baf6:	e7db      	b.n	800bab0 <_dtoa_r+0x220>
 800baf8:	2201      	movs	r2, #1
 800bafa:	e7f2      	b.n	800bae2 <_dtoa_r+0x252>
 800bafc:	2401      	movs	r4, #1
 800bafe:	2200      	movs	r2, #0
 800bb00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bb04:	f04f 3bff 	mov.w	fp, #4294967295
 800bb08:	2100      	movs	r1, #0
 800bb0a:	46da      	mov	sl, fp
 800bb0c:	2212      	movs	r2, #18
 800bb0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb10:	e7ce      	b.n	800bab0 <_dtoa_r+0x220>
 800bb12:	2201      	movs	r2, #1
 800bb14:	9208      	str	r2, [sp, #32]
 800bb16:	e7f5      	b.n	800bb04 <_dtoa_r+0x274>
 800bb18:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800bb1c:	46da      	mov	sl, fp
 800bb1e:	465a      	mov	r2, fp
 800bb20:	e7c6      	b.n	800bab0 <_dtoa_r+0x220>
 800bb22:	3101      	adds	r1, #1
 800bb24:	0040      	lsls	r0, r0, #1
 800bb26:	e7c7      	b.n	800bab8 <_dtoa_r+0x228>
 800bb28:	636f4361 	.word	0x636f4361
 800bb2c:	3fd287a7 	.word	0x3fd287a7
 800bb30:	8b60c8b3 	.word	0x8b60c8b3
 800bb34:	3fc68a28 	.word	0x3fc68a28
 800bb38:	509f79fb 	.word	0x509f79fb
 800bb3c:	3fd34413 	.word	0x3fd34413
 800bb40:	0800ed1f 	.word	0x0800ed1f
 800bb44:	0800ed36 	.word	0x0800ed36
 800bb48:	7ff00000 	.word	0x7ff00000
 800bb4c:	0800ed1b 	.word	0x0800ed1b
 800bb50:	0800ecea 	.word	0x0800ecea
 800bb54:	0800ece9 	.word	0x0800ece9
 800bb58:	0800ee30 	.word	0x0800ee30
 800bb5c:	0800ed8e 	.word	0x0800ed8e
 800bb60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bb64:	f1ba 0f0e 	cmp.w	sl, #14
 800bb68:	6010      	str	r0, [r2, #0]
 800bb6a:	d86f      	bhi.n	800bc4c <_dtoa_r+0x3bc>
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	d06d      	beq.n	800bc4c <_dtoa_r+0x3bc>
 800bb70:	f1b8 0f00 	cmp.w	r8, #0
 800bb74:	f340 80c2 	ble.w	800bcfc <_dtoa_r+0x46c>
 800bb78:	4aca      	ldr	r2, [pc, #808]	@ (800bea4 <_dtoa_r+0x614>)
 800bb7a:	f008 010f 	and.w	r1, r8, #15
 800bb7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bb86:	ed92 7b00 	vldr	d7, [r2]
 800bb8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bb8e:	f000 80a9 	beq.w	800bce4 <_dtoa_r+0x454>
 800bb92:	4ac5      	ldr	r2, [pc, #788]	@ (800bea8 <_dtoa_r+0x618>)
 800bb94:	ed92 6b08 	vldr	d6, [r2, #32]
 800bb98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bb9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bba0:	f001 010f 	and.w	r1, r1, #15
 800bba4:	2203      	movs	r2, #3
 800bba6:	48c0      	ldr	r0, [pc, #768]	@ (800bea8 <_dtoa_r+0x618>)
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	f040 809d 	bne.w	800bce8 <_dtoa_r+0x458>
 800bbae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bbb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bbb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bbbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbc0:	2900      	cmp	r1, #0
 800bbc2:	f000 80c1 	beq.w	800bd48 <_dtoa_r+0x4b8>
 800bbc6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bbca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd2:	f140 80b9 	bpl.w	800bd48 <_dtoa_r+0x4b8>
 800bbd6:	f1ba 0f00 	cmp.w	sl, #0
 800bbda:	f000 80b5 	beq.w	800bd48 <_dtoa_r+0x4b8>
 800bbde:	f1bb 0f00 	cmp.w	fp, #0
 800bbe2:	dd31      	ble.n	800bc48 <_dtoa_r+0x3b8>
 800bbe4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bbe8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bbec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bbf0:	f108 31ff 	add.w	r1, r8, #4294967295
 800bbf4:	9104      	str	r1, [sp, #16]
 800bbf6:	3201      	adds	r2, #1
 800bbf8:	465c      	mov	r4, fp
 800bbfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bbfe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bc02:	ee07 2a90 	vmov	s15, r2
 800bc06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bc0e:	ee15 2a90 	vmov	r2, s11
 800bc12:	ec51 0b15 	vmov	r0, r1, d5
 800bc16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bc1a:	2c00      	cmp	r4, #0
 800bc1c:	f040 8098 	bne.w	800bd50 <_dtoa_r+0x4c0>
 800bc20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bc24:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc28:	ec41 0b17 	vmov	d7, r0, r1
 800bc2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc34:	f300 8261 	bgt.w	800c0fa <_dtoa_r+0x86a>
 800bc38:	eeb1 7b47 	vneg.f64	d7, d7
 800bc3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc44:	f100 80f5 	bmi.w	800be32 <_dtoa_r+0x5a2>
 800bc48:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc4e:	2a00      	cmp	r2, #0
 800bc50:	f2c0 812c 	blt.w	800beac <_dtoa_r+0x61c>
 800bc54:	f1b8 0f0e 	cmp.w	r8, #14
 800bc58:	f300 8128 	bgt.w	800beac <_dtoa_r+0x61c>
 800bc5c:	4b91      	ldr	r3, [pc, #580]	@ (800bea4 <_dtoa_r+0x614>)
 800bc5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc62:	ed93 6b00 	vldr	d6, [r3]
 800bc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	da03      	bge.n	800bc74 <_dtoa_r+0x3e4>
 800bc6c:	f1ba 0f00 	cmp.w	sl, #0
 800bc70:	f340 80d2 	ble.w	800be18 <_dtoa_r+0x588>
 800bc74:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bc78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc7c:	463e      	mov	r6, r7
 800bc7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc86:	ee15 3a10 	vmov	r3, s10
 800bc8a:	3330      	adds	r3, #48	@ 0x30
 800bc8c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc90:	1bf3      	subs	r3, r6, r7
 800bc92:	459a      	cmp	sl, r3
 800bc94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc9c:	f040 80f8 	bne.w	800be90 <_dtoa_r+0x600>
 800bca0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bca4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcac:	f300 80dd 	bgt.w	800be6a <_dtoa_r+0x5da>
 800bcb0:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb8:	d104      	bne.n	800bcc4 <_dtoa_r+0x434>
 800bcba:	ee15 3a10 	vmov	r3, s10
 800bcbe:	07db      	lsls	r3, r3, #31
 800bcc0:	f100 80d3 	bmi.w	800be6a <_dtoa_r+0x5da>
 800bcc4:	9901      	ldr	r1, [sp, #4]
 800bcc6:	4648      	mov	r0, r9
 800bcc8:	f000 fc78 	bl	800c5bc <_Bfree>
 800bccc:	2300      	movs	r3, #0
 800bcce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcd0:	7033      	strb	r3, [r6, #0]
 800bcd2:	f108 0301 	add.w	r3, r8, #1
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 8304 	beq.w	800c2e8 <_dtoa_r+0xa58>
 800bce0:	601e      	str	r6, [r3, #0]
 800bce2:	e301      	b.n	800c2e8 <_dtoa_r+0xa58>
 800bce4:	2202      	movs	r2, #2
 800bce6:	e75e      	b.n	800bba6 <_dtoa_r+0x316>
 800bce8:	07cc      	lsls	r4, r1, #31
 800bcea:	d504      	bpl.n	800bcf6 <_dtoa_r+0x466>
 800bcec:	ed90 6b00 	vldr	d6, [r0]
 800bcf0:	3201      	adds	r2, #1
 800bcf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcf6:	1049      	asrs	r1, r1, #1
 800bcf8:	3008      	adds	r0, #8
 800bcfa:	e755      	b.n	800bba8 <_dtoa_r+0x318>
 800bcfc:	d022      	beq.n	800bd44 <_dtoa_r+0x4b4>
 800bcfe:	f1c8 0100 	rsb	r1, r8, #0
 800bd02:	4a68      	ldr	r2, [pc, #416]	@ (800bea4 <_dtoa_r+0x614>)
 800bd04:	f001 000f 	and.w	r0, r1, #15
 800bd08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bd0c:	ed92 7b00 	vldr	d7, [r2]
 800bd10:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bd14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd18:	4863      	ldr	r0, [pc, #396]	@ (800bea8 <_dtoa_r+0x618>)
 800bd1a:	1109      	asrs	r1, r1, #4
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	2202      	movs	r2, #2
 800bd20:	b929      	cbnz	r1, 800bd2e <_dtoa_r+0x49e>
 800bd22:	2c00      	cmp	r4, #0
 800bd24:	f43f af49 	beq.w	800bbba <_dtoa_r+0x32a>
 800bd28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd2c:	e745      	b.n	800bbba <_dtoa_r+0x32a>
 800bd2e:	07ce      	lsls	r6, r1, #31
 800bd30:	d505      	bpl.n	800bd3e <_dtoa_r+0x4ae>
 800bd32:	ed90 6b00 	vldr	d6, [r0]
 800bd36:	3201      	adds	r2, #1
 800bd38:	2401      	movs	r4, #1
 800bd3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd3e:	1049      	asrs	r1, r1, #1
 800bd40:	3008      	adds	r0, #8
 800bd42:	e7ed      	b.n	800bd20 <_dtoa_r+0x490>
 800bd44:	2202      	movs	r2, #2
 800bd46:	e738      	b.n	800bbba <_dtoa_r+0x32a>
 800bd48:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd4c:	4654      	mov	r4, sl
 800bd4e:	e754      	b.n	800bbfa <_dtoa_r+0x36a>
 800bd50:	4a54      	ldr	r2, [pc, #336]	@ (800bea4 <_dtoa_r+0x614>)
 800bd52:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bd56:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bd5a:	9a08      	ldr	r2, [sp, #32]
 800bd5c:	ec41 0b17 	vmov	d7, r0, r1
 800bd60:	443c      	add	r4, r7
 800bd62:	b34a      	cbz	r2, 800bdb8 <_dtoa_r+0x528>
 800bd64:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bd68:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bd6c:	463e      	mov	r6, r7
 800bd6e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bd72:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bd76:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bd7a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bd7e:	ee14 2a90 	vmov	r2, s9
 800bd82:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd86:	3230      	adds	r2, #48	@ 0x30
 800bd88:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd94:	f806 2b01 	strb.w	r2, [r6], #1
 800bd98:	d438      	bmi.n	800be0c <_dtoa_r+0x57c>
 800bd9a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bd9e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	d462      	bmi.n	800be6e <_dtoa_r+0x5de>
 800bda8:	42a6      	cmp	r6, r4
 800bdaa:	f43f af4d 	beq.w	800bc48 <_dtoa_r+0x3b8>
 800bdae:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bdb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bdb6:	e7e0      	b.n	800bd7a <_dtoa_r+0x4ea>
 800bdb8:	4621      	mov	r1, r4
 800bdba:	463e      	mov	r6, r7
 800bdbc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bdc0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bdc4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bdc8:	ee14 2a90 	vmov	r2, s9
 800bdcc:	3230      	adds	r2, #48	@ 0x30
 800bdce:	f806 2b01 	strb.w	r2, [r6], #1
 800bdd2:	42a6      	cmp	r6, r4
 800bdd4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bdd8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bddc:	d119      	bne.n	800be12 <_dtoa_r+0x582>
 800bdde:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bde2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bde6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdee:	dc3e      	bgt.n	800be6e <_dtoa_r+0x5de>
 800bdf0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bdf4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdfc:	f57f af24 	bpl.w	800bc48 <_dtoa_r+0x3b8>
 800be00:	460e      	mov	r6, r1
 800be02:	3901      	subs	r1, #1
 800be04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be08:	2b30      	cmp	r3, #48	@ 0x30
 800be0a:	d0f9      	beq.n	800be00 <_dtoa_r+0x570>
 800be0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800be10:	e758      	b.n	800bcc4 <_dtoa_r+0x434>
 800be12:	ee26 6b03 	vmul.f64	d6, d6, d3
 800be16:	e7d5      	b.n	800bdc4 <_dtoa_r+0x534>
 800be18:	d10b      	bne.n	800be32 <_dtoa_r+0x5a2>
 800be1a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800be1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2e:	f2c0 8161 	blt.w	800c0f4 <_dtoa_r+0x864>
 800be32:	2400      	movs	r4, #0
 800be34:	4625      	mov	r5, r4
 800be36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be38:	43db      	mvns	r3, r3
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	463e      	mov	r6, r7
 800be3e:	f04f 0800 	mov.w	r8, #0
 800be42:	4621      	mov	r1, r4
 800be44:	4648      	mov	r0, r9
 800be46:	f000 fbb9 	bl	800c5bc <_Bfree>
 800be4a:	2d00      	cmp	r5, #0
 800be4c:	d0de      	beq.n	800be0c <_dtoa_r+0x57c>
 800be4e:	f1b8 0f00 	cmp.w	r8, #0
 800be52:	d005      	beq.n	800be60 <_dtoa_r+0x5d0>
 800be54:	45a8      	cmp	r8, r5
 800be56:	d003      	beq.n	800be60 <_dtoa_r+0x5d0>
 800be58:	4641      	mov	r1, r8
 800be5a:	4648      	mov	r0, r9
 800be5c:	f000 fbae 	bl	800c5bc <_Bfree>
 800be60:	4629      	mov	r1, r5
 800be62:	4648      	mov	r0, r9
 800be64:	f000 fbaa 	bl	800c5bc <_Bfree>
 800be68:	e7d0      	b.n	800be0c <_dtoa_r+0x57c>
 800be6a:	f8cd 8010 	str.w	r8, [sp, #16]
 800be6e:	4633      	mov	r3, r6
 800be70:	461e      	mov	r6, r3
 800be72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be76:	2a39      	cmp	r2, #57	@ 0x39
 800be78:	d106      	bne.n	800be88 <_dtoa_r+0x5f8>
 800be7a:	429f      	cmp	r7, r3
 800be7c:	d1f8      	bne.n	800be70 <_dtoa_r+0x5e0>
 800be7e:	9a04      	ldr	r2, [sp, #16]
 800be80:	3201      	adds	r2, #1
 800be82:	9204      	str	r2, [sp, #16]
 800be84:	2230      	movs	r2, #48	@ 0x30
 800be86:	703a      	strb	r2, [r7, #0]
 800be88:	781a      	ldrb	r2, [r3, #0]
 800be8a:	3201      	adds	r2, #1
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	e7bd      	b.n	800be0c <_dtoa_r+0x57c>
 800be90:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9c:	f47f aeef 	bne.w	800bc7e <_dtoa_r+0x3ee>
 800bea0:	e710      	b.n	800bcc4 <_dtoa_r+0x434>
 800bea2:	bf00      	nop
 800bea4:	0800ee30 	.word	0x0800ee30
 800bea8:	0800ee08 	.word	0x0800ee08
 800beac:	9908      	ldr	r1, [sp, #32]
 800beae:	2900      	cmp	r1, #0
 800beb0:	f000 80e3 	beq.w	800c07a <_dtoa_r+0x7ea>
 800beb4:	9907      	ldr	r1, [sp, #28]
 800beb6:	2901      	cmp	r1, #1
 800beb8:	f300 80c8 	bgt.w	800c04c <_dtoa_r+0x7bc>
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	f000 80c1 	beq.w	800c044 <_dtoa_r+0x7b4>
 800bec2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bec6:	9e05      	ldr	r6, [sp, #20]
 800bec8:	461c      	mov	r4, r3
 800beca:	9304      	str	r3, [sp, #16]
 800becc:	9b05      	ldr	r3, [sp, #20]
 800bece:	4413      	add	r3, r2
 800bed0:	9305      	str	r3, [sp, #20]
 800bed2:	9b06      	ldr	r3, [sp, #24]
 800bed4:	2101      	movs	r1, #1
 800bed6:	4413      	add	r3, r2
 800bed8:	4648      	mov	r0, r9
 800beda:	9306      	str	r3, [sp, #24]
 800bedc:	f000 fc6c 	bl	800c7b8 <__i2b>
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	4605      	mov	r5, r0
 800bee4:	b166      	cbz	r6, 800bf00 <_dtoa_r+0x670>
 800bee6:	9a06      	ldr	r2, [sp, #24]
 800bee8:	2a00      	cmp	r2, #0
 800beea:	dd09      	ble.n	800bf00 <_dtoa_r+0x670>
 800beec:	42b2      	cmp	r2, r6
 800beee:	9905      	ldr	r1, [sp, #20]
 800bef0:	bfa8      	it	ge
 800bef2:	4632      	movge	r2, r6
 800bef4:	1a89      	subs	r1, r1, r2
 800bef6:	9105      	str	r1, [sp, #20]
 800bef8:	9906      	ldr	r1, [sp, #24]
 800befa:	1ab6      	subs	r6, r6, r2
 800befc:	1a8a      	subs	r2, r1, r2
 800befe:	9206      	str	r2, [sp, #24]
 800bf00:	b1fb      	cbz	r3, 800bf42 <_dtoa_r+0x6b2>
 800bf02:	9a08      	ldr	r2, [sp, #32]
 800bf04:	2a00      	cmp	r2, #0
 800bf06:	f000 80bc 	beq.w	800c082 <_dtoa_r+0x7f2>
 800bf0a:	b19c      	cbz	r4, 800bf34 <_dtoa_r+0x6a4>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4622      	mov	r2, r4
 800bf10:	4648      	mov	r0, r9
 800bf12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf14:	f000 fd10 	bl	800c938 <__pow5mult>
 800bf18:	9a01      	ldr	r2, [sp, #4]
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	4648      	mov	r0, r9
 800bf20:	f000 fc60 	bl	800c7e4 <__multiply>
 800bf24:	9901      	ldr	r1, [sp, #4]
 800bf26:	9004      	str	r0, [sp, #16]
 800bf28:	4648      	mov	r0, r9
 800bf2a:	f000 fb47 	bl	800c5bc <_Bfree>
 800bf2e:	9a04      	ldr	r2, [sp, #16]
 800bf30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	1b1a      	subs	r2, r3, r4
 800bf36:	d004      	beq.n	800bf42 <_dtoa_r+0x6b2>
 800bf38:	9901      	ldr	r1, [sp, #4]
 800bf3a:	4648      	mov	r0, r9
 800bf3c:	f000 fcfc 	bl	800c938 <__pow5mult>
 800bf40:	9001      	str	r0, [sp, #4]
 800bf42:	2101      	movs	r1, #1
 800bf44:	4648      	mov	r0, r9
 800bf46:	f000 fc37 	bl	800c7b8 <__i2b>
 800bf4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 81d0 	beq.w	800c2f4 <_dtoa_r+0xa64>
 800bf54:	461a      	mov	r2, r3
 800bf56:	4601      	mov	r1, r0
 800bf58:	4648      	mov	r0, r9
 800bf5a:	f000 fced 	bl	800c938 <__pow5mult>
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	4604      	mov	r4, r0
 800bf64:	f300 8095 	bgt.w	800c092 <_dtoa_r+0x802>
 800bf68:	9b02      	ldr	r3, [sp, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f040 808b 	bne.w	800c086 <_dtoa_r+0x7f6>
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	f040 8087 	bne.w	800c08a <_dtoa_r+0x7fa>
 800bf7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bf80:	0d12      	lsrs	r2, r2, #20
 800bf82:	0512      	lsls	r2, r2, #20
 800bf84:	2a00      	cmp	r2, #0
 800bf86:	f000 8082 	beq.w	800c08e <_dtoa_r+0x7fe>
 800bf8a:	9b05      	ldr	r3, [sp, #20]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	9305      	str	r3, [sp, #20]
 800bf90:	9b06      	ldr	r3, [sp, #24]
 800bf92:	3301      	adds	r3, #1
 800bf94:	9306      	str	r3, [sp, #24]
 800bf96:	2301      	movs	r3, #1
 800bf98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 81af 	beq.w	800c300 <_dtoa_r+0xa70>
 800bfa2:	6922      	ldr	r2, [r4, #16]
 800bfa4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bfa8:	6910      	ldr	r0, [r2, #16]
 800bfaa:	f000 fbb9 	bl	800c720 <__hi0bits>
 800bfae:	f1c0 0020 	rsb	r0, r0, #32
 800bfb2:	9b06      	ldr	r3, [sp, #24]
 800bfb4:	4418      	add	r0, r3
 800bfb6:	f010 001f 	ands.w	r0, r0, #31
 800bfba:	d076      	beq.n	800c0aa <_dtoa_r+0x81a>
 800bfbc:	f1c0 0220 	rsb	r2, r0, #32
 800bfc0:	2a04      	cmp	r2, #4
 800bfc2:	dd69      	ble.n	800c098 <_dtoa_r+0x808>
 800bfc4:	9b05      	ldr	r3, [sp, #20]
 800bfc6:	f1c0 001c 	rsb	r0, r0, #28
 800bfca:	4403      	add	r3, r0
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	4406      	add	r6, r0
 800bfd2:	4403      	add	r3, r0
 800bfd4:	9306      	str	r3, [sp, #24]
 800bfd6:	9b05      	ldr	r3, [sp, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dd05      	ble.n	800bfe8 <_dtoa_r+0x758>
 800bfdc:	9901      	ldr	r1, [sp, #4]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	4648      	mov	r0, r9
 800bfe2:	f000 fd03 	bl	800c9ec <__lshift>
 800bfe6:	9001      	str	r0, [sp, #4]
 800bfe8:	9b06      	ldr	r3, [sp, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	dd05      	ble.n	800bffa <_dtoa_r+0x76a>
 800bfee:	4621      	mov	r1, r4
 800bff0:	461a      	mov	r2, r3
 800bff2:	4648      	mov	r0, r9
 800bff4:	f000 fcfa 	bl	800c9ec <__lshift>
 800bff8:	4604      	mov	r4, r0
 800bffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d056      	beq.n	800c0ae <_dtoa_r+0x81e>
 800c000:	9801      	ldr	r0, [sp, #4]
 800c002:	4621      	mov	r1, r4
 800c004:	f000 fd5e 	bl	800cac4 <__mcmp>
 800c008:	2800      	cmp	r0, #0
 800c00a:	da50      	bge.n	800c0ae <_dtoa_r+0x81e>
 800c00c:	f108 33ff 	add.w	r3, r8, #4294967295
 800c010:	9304      	str	r3, [sp, #16]
 800c012:	9901      	ldr	r1, [sp, #4]
 800c014:	2300      	movs	r3, #0
 800c016:	220a      	movs	r2, #10
 800c018:	4648      	mov	r0, r9
 800c01a:	f000 faf1 	bl	800c600 <__multadd>
 800c01e:	9b08      	ldr	r3, [sp, #32]
 800c020:	9001      	str	r0, [sp, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 816e 	beq.w	800c304 <_dtoa_r+0xa74>
 800c028:	4629      	mov	r1, r5
 800c02a:	2300      	movs	r3, #0
 800c02c:	220a      	movs	r2, #10
 800c02e:	4648      	mov	r0, r9
 800c030:	f000 fae6 	bl	800c600 <__multadd>
 800c034:	f1bb 0f00 	cmp.w	fp, #0
 800c038:	4605      	mov	r5, r0
 800c03a:	dc64      	bgt.n	800c106 <_dtoa_r+0x876>
 800c03c:	9b07      	ldr	r3, [sp, #28]
 800c03e:	2b02      	cmp	r3, #2
 800c040:	dc3e      	bgt.n	800c0c0 <_dtoa_r+0x830>
 800c042:	e060      	b.n	800c106 <_dtoa_r+0x876>
 800c044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c046:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c04a:	e73c      	b.n	800bec6 <_dtoa_r+0x636>
 800c04c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c050:	42a3      	cmp	r3, r4
 800c052:	bfbf      	itttt	lt
 800c054:	1ae2      	sublt	r2, r4, r3
 800c056:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c058:	189b      	addlt	r3, r3, r2
 800c05a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c05c:	bfae      	itee	ge
 800c05e:	1b1c      	subge	r4, r3, r4
 800c060:	4623      	movlt	r3, r4
 800c062:	2400      	movlt	r4, #0
 800c064:	f1ba 0f00 	cmp.w	sl, #0
 800c068:	bfb5      	itete	lt
 800c06a:	9a05      	ldrlt	r2, [sp, #20]
 800c06c:	9e05      	ldrge	r6, [sp, #20]
 800c06e:	eba2 060a 	sublt.w	r6, r2, sl
 800c072:	4652      	movge	r2, sl
 800c074:	bfb8      	it	lt
 800c076:	2200      	movlt	r2, #0
 800c078:	e727      	b.n	800beca <_dtoa_r+0x63a>
 800c07a:	9e05      	ldr	r6, [sp, #20]
 800c07c:	9d08      	ldr	r5, [sp, #32]
 800c07e:	461c      	mov	r4, r3
 800c080:	e730      	b.n	800bee4 <_dtoa_r+0x654>
 800c082:	461a      	mov	r2, r3
 800c084:	e758      	b.n	800bf38 <_dtoa_r+0x6a8>
 800c086:	2300      	movs	r3, #0
 800c088:	e786      	b.n	800bf98 <_dtoa_r+0x708>
 800c08a:	9b02      	ldr	r3, [sp, #8]
 800c08c:	e784      	b.n	800bf98 <_dtoa_r+0x708>
 800c08e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c090:	e783      	b.n	800bf9a <_dtoa_r+0x70a>
 800c092:	2300      	movs	r3, #0
 800c094:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c096:	e784      	b.n	800bfa2 <_dtoa_r+0x712>
 800c098:	d09d      	beq.n	800bfd6 <_dtoa_r+0x746>
 800c09a:	9b05      	ldr	r3, [sp, #20]
 800c09c:	321c      	adds	r2, #28
 800c09e:	4413      	add	r3, r2
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	9b06      	ldr	r3, [sp, #24]
 800c0a4:	4416      	add	r6, r2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	e794      	b.n	800bfd4 <_dtoa_r+0x744>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	e7f5      	b.n	800c09a <_dtoa_r+0x80a>
 800c0ae:	f1ba 0f00 	cmp.w	sl, #0
 800c0b2:	f8cd 8010 	str.w	r8, [sp, #16]
 800c0b6:	46d3      	mov	fp, sl
 800c0b8:	dc21      	bgt.n	800c0fe <_dtoa_r+0x86e>
 800c0ba:	9b07      	ldr	r3, [sp, #28]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	dd1e      	ble.n	800c0fe <_dtoa_r+0x86e>
 800c0c0:	f1bb 0f00 	cmp.w	fp, #0
 800c0c4:	f47f aeb7 	bne.w	800be36 <_dtoa_r+0x5a6>
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	465b      	mov	r3, fp
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	4648      	mov	r0, r9
 800c0d0:	f000 fa96 	bl	800c600 <__multadd>
 800c0d4:	4601      	mov	r1, r0
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	9801      	ldr	r0, [sp, #4]
 800c0da:	f000 fcf3 	bl	800cac4 <__mcmp>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f77f aea9 	ble.w	800be36 <_dtoa_r+0x5a6>
 800c0e4:	463e      	mov	r6, r7
 800c0e6:	2331      	movs	r3, #49	@ 0x31
 800c0e8:	f806 3b01 	strb.w	r3, [r6], #1
 800c0ec:	9b04      	ldr	r3, [sp, #16]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	e6a4      	b.n	800be3e <_dtoa_r+0x5ae>
 800c0f4:	f8cd 8010 	str.w	r8, [sp, #16]
 800c0f8:	4654      	mov	r4, sl
 800c0fa:	4625      	mov	r5, r4
 800c0fc:	e7f2      	b.n	800c0e4 <_dtoa_r+0x854>
 800c0fe:	9b08      	ldr	r3, [sp, #32]
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 8103 	beq.w	800c30c <_dtoa_r+0xa7c>
 800c106:	2e00      	cmp	r6, #0
 800c108:	dd05      	ble.n	800c116 <_dtoa_r+0x886>
 800c10a:	4629      	mov	r1, r5
 800c10c:	4632      	mov	r2, r6
 800c10e:	4648      	mov	r0, r9
 800c110:	f000 fc6c 	bl	800c9ec <__lshift>
 800c114:	4605      	mov	r5, r0
 800c116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d058      	beq.n	800c1ce <_dtoa_r+0x93e>
 800c11c:	6869      	ldr	r1, [r5, #4]
 800c11e:	4648      	mov	r0, r9
 800c120:	f000 fa0c 	bl	800c53c <_Balloc>
 800c124:	4606      	mov	r6, r0
 800c126:	b928      	cbnz	r0, 800c134 <_dtoa_r+0x8a4>
 800c128:	4b82      	ldr	r3, [pc, #520]	@ (800c334 <_dtoa_r+0xaa4>)
 800c12a:	4602      	mov	r2, r0
 800c12c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c130:	f7ff bbc7 	b.w	800b8c2 <_dtoa_r+0x32>
 800c134:	692a      	ldr	r2, [r5, #16]
 800c136:	3202      	adds	r2, #2
 800c138:	0092      	lsls	r2, r2, #2
 800c13a:	f105 010c 	add.w	r1, r5, #12
 800c13e:	300c      	adds	r0, #12
 800c140:	f7ff fb09 	bl	800b756 <memcpy>
 800c144:	2201      	movs	r2, #1
 800c146:	4631      	mov	r1, r6
 800c148:	4648      	mov	r0, r9
 800c14a:	f000 fc4f 	bl	800c9ec <__lshift>
 800c14e:	1c7b      	adds	r3, r7, #1
 800c150:	9305      	str	r3, [sp, #20]
 800c152:	eb07 030b 	add.w	r3, r7, fp
 800c156:	9309      	str	r3, [sp, #36]	@ 0x24
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	46a8      	mov	r8, r5
 800c160:	9308      	str	r3, [sp, #32]
 800c162:	4605      	mov	r5, r0
 800c164:	9b05      	ldr	r3, [sp, #20]
 800c166:	9801      	ldr	r0, [sp, #4]
 800c168:	4621      	mov	r1, r4
 800c16a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c16e:	f7ff fb07 	bl	800b780 <quorem>
 800c172:	4641      	mov	r1, r8
 800c174:	9002      	str	r0, [sp, #8]
 800c176:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c17a:	9801      	ldr	r0, [sp, #4]
 800c17c:	f000 fca2 	bl	800cac4 <__mcmp>
 800c180:	462a      	mov	r2, r5
 800c182:	9006      	str	r0, [sp, #24]
 800c184:	4621      	mov	r1, r4
 800c186:	4648      	mov	r0, r9
 800c188:	f000 fcb8 	bl	800cafc <__mdiff>
 800c18c:	68c2      	ldr	r2, [r0, #12]
 800c18e:	4606      	mov	r6, r0
 800c190:	b9fa      	cbnz	r2, 800c1d2 <_dtoa_r+0x942>
 800c192:	4601      	mov	r1, r0
 800c194:	9801      	ldr	r0, [sp, #4]
 800c196:	f000 fc95 	bl	800cac4 <__mcmp>
 800c19a:	4602      	mov	r2, r0
 800c19c:	4631      	mov	r1, r6
 800c19e:	4648      	mov	r0, r9
 800c1a0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c1a2:	f000 fa0b 	bl	800c5bc <_Bfree>
 800c1a6:	9b07      	ldr	r3, [sp, #28]
 800c1a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1aa:	9e05      	ldr	r6, [sp, #20]
 800c1ac:	ea43 0102 	orr.w	r1, r3, r2
 800c1b0:	9b08      	ldr	r3, [sp, #32]
 800c1b2:	4319      	orrs	r1, r3
 800c1b4:	d10f      	bne.n	800c1d6 <_dtoa_r+0x946>
 800c1b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c1ba:	d028      	beq.n	800c20e <_dtoa_r+0x97e>
 800c1bc:	9b06      	ldr	r3, [sp, #24]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	dd02      	ble.n	800c1c8 <_dtoa_r+0x938>
 800c1c2:	9b02      	ldr	r3, [sp, #8]
 800c1c4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c1c8:	f88b a000 	strb.w	sl, [fp]
 800c1cc:	e639      	b.n	800be42 <_dtoa_r+0x5b2>
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	e7bd      	b.n	800c14e <_dtoa_r+0x8be>
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	e7e2      	b.n	800c19c <_dtoa_r+0x90c>
 800c1d6:	9b06      	ldr	r3, [sp, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	db04      	blt.n	800c1e6 <_dtoa_r+0x956>
 800c1dc:	9907      	ldr	r1, [sp, #28]
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	9908      	ldr	r1, [sp, #32]
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	d120      	bne.n	800c228 <_dtoa_r+0x998>
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	ddee      	ble.n	800c1c8 <_dtoa_r+0x938>
 800c1ea:	9901      	ldr	r1, [sp, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	4648      	mov	r0, r9
 800c1f0:	f000 fbfc 	bl	800c9ec <__lshift>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	9001      	str	r0, [sp, #4]
 800c1f8:	f000 fc64 	bl	800cac4 <__mcmp>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	dc03      	bgt.n	800c208 <_dtoa_r+0x978>
 800c200:	d1e2      	bne.n	800c1c8 <_dtoa_r+0x938>
 800c202:	f01a 0f01 	tst.w	sl, #1
 800c206:	d0df      	beq.n	800c1c8 <_dtoa_r+0x938>
 800c208:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c20c:	d1d9      	bne.n	800c1c2 <_dtoa_r+0x932>
 800c20e:	2339      	movs	r3, #57	@ 0x39
 800c210:	f88b 3000 	strb.w	r3, [fp]
 800c214:	4633      	mov	r3, r6
 800c216:	461e      	mov	r6, r3
 800c218:	3b01      	subs	r3, #1
 800c21a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c21e:	2a39      	cmp	r2, #57	@ 0x39
 800c220:	d053      	beq.n	800c2ca <_dtoa_r+0xa3a>
 800c222:	3201      	adds	r2, #1
 800c224:	701a      	strb	r2, [r3, #0]
 800c226:	e60c      	b.n	800be42 <_dtoa_r+0x5b2>
 800c228:	2a00      	cmp	r2, #0
 800c22a:	dd07      	ble.n	800c23c <_dtoa_r+0x9ac>
 800c22c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c230:	d0ed      	beq.n	800c20e <_dtoa_r+0x97e>
 800c232:	f10a 0301 	add.w	r3, sl, #1
 800c236:	f88b 3000 	strb.w	r3, [fp]
 800c23a:	e602      	b.n	800be42 <_dtoa_r+0x5b2>
 800c23c:	9b05      	ldr	r3, [sp, #20]
 800c23e:	9a05      	ldr	r2, [sp, #20]
 800c240:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c246:	4293      	cmp	r3, r2
 800c248:	d029      	beq.n	800c29e <_dtoa_r+0xa0e>
 800c24a:	9901      	ldr	r1, [sp, #4]
 800c24c:	2300      	movs	r3, #0
 800c24e:	220a      	movs	r2, #10
 800c250:	4648      	mov	r0, r9
 800c252:	f000 f9d5 	bl	800c600 <__multadd>
 800c256:	45a8      	cmp	r8, r5
 800c258:	9001      	str	r0, [sp, #4]
 800c25a:	f04f 0300 	mov.w	r3, #0
 800c25e:	f04f 020a 	mov.w	r2, #10
 800c262:	4641      	mov	r1, r8
 800c264:	4648      	mov	r0, r9
 800c266:	d107      	bne.n	800c278 <_dtoa_r+0x9e8>
 800c268:	f000 f9ca 	bl	800c600 <__multadd>
 800c26c:	4680      	mov	r8, r0
 800c26e:	4605      	mov	r5, r0
 800c270:	9b05      	ldr	r3, [sp, #20]
 800c272:	3301      	adds	r3, #1
 800c274:	9305      	str	r3, [sp, #20]
 800c276:	e775      	b.n	800c164 <_dtoa_r+0x8d4>
 800c278:	f000 f9c2 	bl	800c600 <__multadd>
 800c27c:	4629      	mov	r1, r5
 800c27e:	4680      	mov	r8, r0
 800c280:	2300      	movs	r3, #0
 800c282:	220a      	movs	r2, #10
 800c284:	4648      	mov	r0, r9
 800c286:	f000 f9bb 	bl	800c600 <__multadd>
 800c28a:	4605      	mov	r5, r0
 800c28c:	e7f0      	b.n	800c270 <_dtoa_r+0x9e0>
 800c28e:	f1bb 0f00 	cmp.w	fp, #0
 800c292:	bfcc      	ite	gt
 800c294:	465e      	movgt	r6, fp
 800c296:	2601      	movle	r6, #1
 800c298:	443e      	add	r6, r7
 800c29a:	f04f 0800 	mov.w	r8, #0
 800c29e:	9901      	ldr	r1, [sp, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	4648      	mov	r0, r9
 800c2a4:	f000 fba2 	bl	800c9ec <__lshift>
 800c2a8:	4621      	mov	r1, r4
 800c2aa:	9001      	str	r0, [sp, #4]
 800c2ac:	f000 fc0a 	bl	800cac4 <__mcmp>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	dcaf      	bgt.n	800c214 <_dtoa_r+0x984>
 800c2b4:	d102      	bne.n	800c2bc <_dtoa_r+0xa2c>
 800c2b6:	f01a 0f01 	tst.w	sl, #1
 800c2ba:	d1ab      	bne.n	800c214 <_dtoa_r+0x984>
 800c2bc:	4633      	mov	r3, r6
 800c2be:	461e      	mov	r6, r3
 800c2c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2c4:	2a30      	cmp	r2, #48	@ 0x30
 800c2c6:	d0fa      	beq.n	800c2be <_dtoa_r+0xa2e>
 800c2c8:	e5bb      	b.n	800be42 <_dtoa_r+0x5b2>
 800c2ca:	429f      	cmp	r7, r3
 800c2cc:	d1a3      	bne.n	800c216 <_dtoa_r+0x986>
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	2331      	movs	r3, #49	@ 0x31
 800c2d6:	703b      	strb	r3, [r7, #0]
 800c2d8:	e5b3      	b.n	800be42 <_dtoa_r+0x5b2>
 800c2da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2dc:	4f16      	ldr	r7, [pc, #88]	@ (800c338 <_dtoa_r+0xaa8>)
 800c2de:	b11b      	cbz	r3, 800c2e8 <_dtoa_r+0xa58>
 800c2e0:	f107 0308 	add.w	r3, r7, #8
 800c2e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c2e6:	6013      	str	r3, [r2, #0]
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	b011      	add	sp, #68	@ 0x44
 800c2ec:	ecbd 8b02 	vpop	{d8}
 800c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f4:	9b07      	ldr	r3, [sp, #28]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	f77f ae36 	ble.w	800bf68 <_dtoa_r+0x6d8>
 800c2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c300:	2001      	movs	r0, #1
 800c302:	e656      	b.n	800bfb2 <_dtoa_r+0x722>
 800c304:	f1bb 0f00 	cmp.w	fp, #0
 800c308:	f77f aed7 	ble.w	800c0ba <_dtoa_r+0x82a>
 800c30c:	463e      	mov	r6, r7
 800c30e:	9801      	ldr	r0, [sp, #4]
 800c310:	4621      	mov	r1, r4
 800c312:	f7ff fa35 	bl	800b780 <quorem>
 800c316:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c31a:	f806 ab01 	strb.w	sl, [r6], #1
 800c31e:	1bf2      	subs	r2, r6, r7
 800c320:	4593      	cmp	fp, r2
 800c322:	ddb4      	ble.n	800c28e <_dtoa_r+0x9fe>
 800c324:	9901      	ldr	r1, [sp, #4]
 800c326:	2300      	movs	r3, #0
 800c328:	220a      	movs	r2, #10
 800c32a:	4648      	mov	r0, r9
 800c32c:	f000 f968 	bl	800c600 <__multadd>
 800c330:	9001      	str	r0, [sp, #4]
 800c332:	e7ec      	b.n	800c30e <_dtoa_r+0xa7e>
 800c334:	0800ed8e 	.word	0x0800ed8e
 800c338:	0800ed12 	.word	0x0800ed12

0800c33c <_free_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	4605      	mov	r5, r0
 800c340:	2900      	cmp	r1, #0
 800c342:	d041      	beq.n	800c3c8 <_free_r+0x8c>
 800c344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c348:	1f0c      	subs	r4, r1, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	bfb8      	it	lt
 800c34e:	18e4      	addlt	r4, r4, r3
 800c350:	f000 f8e8 	bl	800c524 <__malloc_lock>
 800c354:	4a1d      	ldr	r2, [pc, #116]	@ (800c3cc <_free_r+0x90>)
 800c356:	6813      	ldr	r3, [r2, #0]
 800c358:	b933      	cbnz	r3, 800c368 <_free_r+0x2c>
 800c35a:	6063      	str	r3, [r4, #4]
 800c35c:	6014      	str	r4, [r2, #0]
 800c35e:	4628      	mov	r0, r5
 800c360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c364:	f000 b8e4 	b.w	800c530 <__malloc_unlock>
 800c368:	42a3      	cmp	r3, r4
 800c36a:	d908      	bls.n	800c37e <_free_r+0x42>
 800c36c:	6820      	ldr	r0, [r4, #0]
 800c36e:	1821      	adds	r1, r4, r0
 800c370:	428b      	cmp	r3, r1
 800c372:	bf01      	itttt	eq
 800c374:	6819      	ldreq	r1, [r3, #0]
 800c376:	685b      	ldreq	r3, [r3, #4]
 800c378:	1809      	addeq	r1, r1, r0
 800c37a:	6021      	streq	r1, [r4, #0]
 800c37c:	e7ed      	b.n	800c35a <_free_r+0x1e>
 800c37e:	461a      	mov	r2, r3
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	b10b      	cbz	r3, 800c388 <_free_r+0x4c>
 800c384:	42a3      	cmp	r3, r4
 800c386:	d9fa      	bls.n	800c37e <_free_r+0x42>
 800c388:	6811      	ldr	r1, [r2, #0]
 800c38a:	1850      	adds	r0, r2, r1
 800c38c:	42a0      	cmp	r0, r4
 800c38e:	d10b      	bne.n	800c3a8 <_free_r+0x6c>
 800c390:	6820      	ldr	r0, [r4, #0]
 800c392:	4401      	add	r1, r0
 800c394:	1850      	adds	r0, r2, r1
 800c396:	4283      	cmp	r3, r0
 800c398:	6011      	str	r1, [r2, #0]
 800c39a:	d1e0      	bne.n	800c35e <_free_r+0x22>
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	6053      	str	r3, [r2, #4]
 800c3a2:	4408      	add	r0, r1
 800c3a4:	6010      	str	r0, [r2, #0]
 800c3a6:	e7da      	b.n	800c35e <_free_r+0x22>
 800c3a8:	d902      	bls.n	800c3b0 <_free_r+0x74>
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	e7d6      	b.n	800c35e <_free_r+0x22>
 800c3b0:	6820      	ldr	r0, [r4, #0]
 800c3b2:	1821      	adds	r1, r4, r0
 800c3b4:	428b      	cmp	r3, r1
 800c3b6:	bf04      	itt	eq
 800c3b8:	6819      	ldreq	r1, [r3, #0]
 800c3ba:	685b      	ldreq	r3, [r3, #4]
 800c3bc:	6063      	str	r3, [r4, #4]
 800c3be:	bf04      	itt	eq
 800c3c0:	1809      	addeq	r1, r1, r0
 800c3c2:	6021      	streq	r1, [r4, #0]
 800c3c4:	6054      	str	r4, [r2, #4]
 800c3c6:	e7ca      	b.n	800c35e <_free_r+0x22>
 800c3c8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ca:	bf00      	nop
 800c3cc:	240004dc 	.word	0x240004dc

0800c3d0 <malloc>:
 800c3d0:	4b02      	ldr	r3, [pc, #8]	@ (800c3dc <malloc+0xc>)
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	f000 b825 	b.w	800c424 <_malloc_r>
 800c3da:	bf00      	nop
 800c3dc:	2400001c 	.word	0x2400001c

0800c3e0 <sbrk_aligned>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	4e0f      	ldr	r6, [pc, #60]	@ (800c420 <sbrk_aligned+0x40>)
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	6831      	ldr	r1, [r6, #0]
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	b911      	cbnz	r1, 800c3f2 <sbrk_aligned+0x12>
 800c3ec:	f001 fd2a 	bl	800de44 <_sbrk_r>
 800c3f0:	6030      	str	r0, [r6, #0]
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f001 fd25 	bl	800de44 <_sbrk_r>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	d103      	bne.n	800c406 <sbrk_aligned+0x26>
 800c3fe:	f04f 34ff 	mov.w	r4, #4294967295
 800c402:	4620      	mov	r0, r4
 800c404:	bd70      	pop	{r4, r5, r6, pc}
 800c406:	1cc4      	adds	r4, r0, #3
 800c408:	f024 0403 	bic.w	r4, r4, #3
 800c40c:	42a0      	cmp	r0, r4
 800c40e:	d0f8      	beq.n	800c402 <sbrk_aligned+0x22>
 800c410:	1a21      	subs	r1, r4, r0
 800c412:	4628      	mov	r0, r5
 800c414:	f001 fd16 	bl	800de44 <_sbrk_r>
 800c418:	3001      	adds	r0, #1
 800c41a:	d1f2      	bne.n	800c402 <sbrk_aligned+0x22>
 800c41c:	e7ef      	b.n	800c3fe <sbrk_aligned+0x1e>
 800c41e:	bf00      	nop
 800c420:	240004d8 	.word	0x240004d8

0800c424 <_malloc_r>:
 800c424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c428:	1ccd      	adds	r5, r1, #3
 800c42a:	f025 0503 	bic.w	r5, r5, #3
 800c42e:	3508      	adds	r5, #8
 800c430:	2d0c      	cmp	r5, #12
 800c432:	bf38      	it	cc
 800c434:	250c      	movcc	r5, #12
 800c436:	2d00      	cmp	r5, #0
 800c438:	4606      	mov	r6, r0
 800c43a:	db01      	blt.n	800c440 <_malloc_r+0x1c>
 800c43c:	42a9      	cmp	r1, r5
 800c43e:	d904      	bls.n	800c44a <_malloc_r+0x26>
 800c440:	230c      	movs	r3, #12
 800c442:	6033      	str	r3, [r6, #0]
 800c444:	2000      	movs	r0, #0
 800c446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c520 <_malloc_r+0xfc>
 800c44e:	f000 f869 	bl	800c524 <__malloc_lock>
 800c452:	f8d8 3000 	ldr.w	r3, [r8]
 800c456:	461c      	mov	r4, r3
 800c458:	bb44      	cbnz	r4, 800c4ac <_malloc_r+0x88>
 800c45a:	4629      	mov	r1, r5
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff ffbf 	bl	800c3e0 <sbrk_aligned>
 800c462:	1c43      	adds	r3, r0, #1
 800c464:	4604      	mov	r4, r0
 800c466:	d158      	bne.n	800c51a <_malloc_r+0xf6>
 800c468:	f8d8 4000 	ldr.w	r4, [r8]
 800c46c:	4627      	mov	r7, r4
 800c46e:	2f00      	cmp	r7, #0
 800c470:	d143      	bne.n	800c4fa <_malloc_r+0xd6>
 800c472:	2c00      	cmp	r4, #0
 800c474:	d04b      	beq.n	800c50e <_malloc_r+0xea>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	4639      	mov	r1, r7
 800c47a:	4630      	mov	r0, r6
 800c47c:	eb04 0903 	add.w	r9, r4, r3
 800c480:	f001 fce0 	bl	800de44 <_sbrk_r>
 800c484:	4581      	cmp	r9, r0
 800c486:	d142      	bne.n	800c50e <_malloc_r+0xea>
 800c488:	6821      	ldr	r1, [r4, #0]
 800c48a:	1a6d      	subs	r5, r5, r1
 800c48c:	4629      	mov	r1, r5
 800c48e:	4630      	mov	r0, r6
 800c490:	f7ff ffa6 	bl	800c3e0 <sbrk_aligned>
 800c494:	3001      	adds	r0, #1
 800c496:	d03a      	beq.n	800c50e <_malloc_r+0xea>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	442b      	add	r3, r5
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	bb62      	cbnz	r2, 800c500 <_malloc_r+0xdc>
 800c4a6:	f8c8 7000 	str.w	r7, [r8]
 800c4aa:	e00f      	b.n	800c4cc <_malloc_r+0xa8>
 800c4ac:	6822      	ldr	r2, [r4, #0]
 800c4ae:	1b52      	subs	r2, r2, r5
 800c4b0:	d420      	bmi.n	800c4f4 <_malloc_r+0xd0>
 800c4b2:	2a0b      	cmp	r2, #11
 800c4b4:	d917      	bls.n	800c4e6 <_malloc_r+0xc2>
 800c4b6:	1961      	adds	r1, r4, r5
 800c4b8:	42a3      	cmp	r3, r4
 800c4ba:	6025      	str	r5, [r4, #0]
 800c4bc:	bf18      	it	ne
 800c4be:	6059      	strne	r1, [r3, #4]
 800c4c0:	6863      	ldr	r3, [r4, #4]
 800c4c2:	bf08      	it	eq
 800c4c4:	f8c8 1000 	streq.w	r1, [r8]
 800c4c8:	5162      	str	r2, [r4, r5]
 800c4ca:	604b      	str	r3, [r1, #4]
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f000 f82f 	bl	800c530 <__malloc_unlock>
 800c4d2:	f104 000b 	add.w	r0, r4, #11
 800c4d6:	1d23      	adds	r3, r4, #4
 800c4d8:	f020 0007 	bic.w	r0, r0, #7
 800c4dc:	1ac2      	subs	r2, r0, r3
 800c4de:	bf1c      	itt	ne
 800c4e0:	1a1b      	subne	r3, r3, r0
 800c4e2:	50a3      	strne	r3, [r4, r2]
 800c4e4:	e7af      	b.n	800c446 <_malloc_r+0x22>
 800c4e6:	6862      	ldr	r2, [r4, #4]
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	bf0c      	ite	eq
 800c4ec:	f8c8 2000 	streq.w	r2, [r8]
 800c4f0:	605a      	strne	r2, [r3, #4]
 800c4f2:	e7eb      	b.n	800c4cc <_malloc_r+0xa8>
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	6864      	ldr	r4, [r4, #4]
 800c4f8:	e7ae      	b.n	800c458 <_malloc_r+0x34>
 800c4fa:	463c      	mov	r4, r7
 800c4fc:	687f      	ldr	r7, [r7, #4]
 800c4fe:	e7b6      	b.n	800c46e <_malloc_r+0x4a>
 800c500:	461a      	mov	r2, r3
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	42a3      	cmp	r3, r4
 800c506:	d1fb      	bne.n	800c500 <_malloc_r+0xdc>
 800c508:	2300      	movs	r3, #0
 800c50a:	6053      	str	r3, [r2, #4]
 800c50c:	e7de      	b.n	800c4cc <_malloc_r+0xa8>
 800c50e:	230c      	movs	r3, #12
 800c510:	6033      	str	r3, [r6, #0]
 800c512:	4630      	mov	r0, r6
 800c514:	f000 f80c 	bl	800c530 <__malloc_unlock>
 800c518:	e794      	b.n	800c444 <_malloc_r+0x20>
 800c51a:	6005      	str	r5, [r0, #0]
 800c51c:	e7d6      	b.n	800c4cc <_malloc_r+0xa8>
 800c51e:	bf00      	nop
 800c520:	240004dc 	.word	0x240004dc

0800c524 <__malloc_lock>:
 800c524:	4801      	ldr	r0, [pc, #4]	@ (800c52c <__malloc_lock+0x8>)
 800c526:	f7ff b914 	b.w	800b752 <__retarget_lock_acquire_recursive>
 800c52a:	bf00      	nop
 800c52c:	240004d4 	.word	0x240004d4

0800c530 <__malloc_unlock>:
 800c530:	4801      	ldr	r0, [pc, #4]	@ (800c538 <__malloc_unlock+0x8>)
 800c532:	f7ff b90f 	b.w	800b754 <__retarget_lock_release_recursive>
 800c536:	bf00      	nop
 800c538:	240004d4 	.word	0x240004d4

0800c53c <_Balloc>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	69c6      	ldr	r6, [r0, #28]
 800c540:	4604      	mov	r4, r0
 800c542:	460d      	mov	r5, r1
 800c544:	b976      	cbnz	r6, 800c564 <_Balloc+0x28>
 800c546:	2010      	movs	r0, #16
 800c548:	f7ff ff42 	bl	800c3d0 <malloc>
 800c54c:	4602      	mov	r2, r0
 800c54e:	61e0      	str	r0, [r4, #28]
 800c550:	b920      	cbnz	r0, 800c55c <_Balloc+0x20>
 800c552:	4b18      	ldr	r3, [pc, #96]	@ (800c5b4 <_Balloc+0x78>)
 800c554:	4818      	ldr	r0, [pc, #96]	@ (800c5b8 <_Balloc+0x7c>)
 800c556:	216b      	movs	r1, #107	@ 0x6b
 800c558:	f001 fc8e 	bl	800de78 <__assert_func>
 800c55c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c560:	6006      	str	r6, [r0, #0]
 800c562:	60c6      	str	r6, [r0, #12]
 800c564:	69e6      	ldr	r6, [r4, #28]
 800c566:	68f3      	ldr	r3, [r6, #12]
 800c568:	b183      	cbz	r3, 800c58c <_Balloc+0x50>
 800c56a:	69e3      	ldr	r3, [r4, #28]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c572:	b9b8      	cbnz	r0, 800c5a4 <_Balloc+0x68>
 800c574:	2101      	movs	r1, #1
 800c576:	fa01 f605 	lsl.w	r6, r1, r5
 800c57a:	1d72      	adds	r2, r6, #5
 800c57c:	0092      	lsls	r2, r2, #2
 800c57e:	4620      	mov	r0, r4
 800c580:	f001 fc98 	bl	800deb4 <_calloc_r>
 800c584:	b160      	cbz	r0, 800c5a0 <_Balloc+0x64>
 800c586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c58a:	e00e      	b.n	800c5aa <_Balloc+0x6e>
 800c58c:	2221      	movs	r2, #33	@ 0x21
 800c58e:	2104      	movs	r1, #4
 800c590:	4620      	mov	r0, r4
 800c592:	f001 fc8f 	bl	800deb4 <_calloc_r>
 800c596:	69e3      	ldr	r3, [r4, #28]
 800c598:	60f0      	str	r0, [r6, #12]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1e4      	bne.n	800c56a <_Balloc+0x2e>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
 800c5a4:	6802      	ldr	r2, [r0, #0]
 800c5a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5b0:	e7f7      	b.n	800c5a2 <_Balloc+0x66>
 800c5b2:	bf00      	nop
 800c5b4:	0800ed1f 	.word	0x0800ed1f
 800c5b8:	0800ed9f 	.word	0x0800ed9f

0800c5bc <_Bfree>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	69c6      	ldr	r6, [r0, #28]
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	b976      	cbnz	r6, 800c5e4 <_Bfree+0x28>
 800c5c6:	2010      	movs	r0, #16
 800c5c8:	f7ff ff02 	bl	800c3d0 <malloc>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	61e8      	str	r0, [r5, #28]
 800c5d0:	b920      	cbnz	r0, 800c5dc <_Bfree+0x20>
 800c5d2:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <_Bfree+0x3c>)
 800c5d4:	4809      	ldr	r0, [pc, #36]	@ (800c5fc <_Bfree+0x40>)
 800c5d6:	218f      	movs	r1, #143	@ 0x8f
 800c5d8:	f001 fc4e 	bl	800de78 <__assert_func>
 800c5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5e0:	6006      	str	r6, [r0, #0]
 800c5e2:	60c6      	str	r6, [r0, #12]
 800c5e4:	b13c      	cbz	r4, 800c5f6 <_Bfree+0x3a>
 800c5e6:	69eb      	ldr	r3, [r5, #28]
 800c5e8:	6862      	ldr	r2, [r4, #4]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5f0:	6021      	str	r1, [r4, #0]
 800c5f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}
 800c5f8:	0800ed1f 	.word	0x0800ed1f
 800c5fc:	0800ed9f 	.word	0x0800ed9f

0800c600 <__multadd>:
 800c600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	690d      	ldr	r5, [r1, #16]
 800c606:	4607      	mov	r7, r0
 800c608:	460c      	mov	r4, r1
 800c60a:	461e      	mov	r6, r3
 800c60c:	f101 0c14 	add.w	ip, r1, #20
 800c610:	2000      	movs	r0, #0
 800c612:	f8dc 3000 	ldr.w	r3, [ip]
 800c616:	b299      	uxth	r1, r3
 800c618:	fb02 6101 	mla	r1, r2, r1, r6
 800c61c:	0c1e      	lsrs	r6, r3, #16
 800c61e:	0c0b      	lsrs	r3, r1, #16
 800c620:	fb02 3306 	mla	r3, r2, r6, r3
 800c624:	b289      	uxth	r1, r1
 800c626:	3001      	adds	r0, #1
 800c628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c62c:	4285      	cmp	r5, r0
 800c62e:	f84c 1b04 	str.w	r1, [ip], #4
 800c632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c636:	dcec      	bgt.n	800c612 <__multadd+0x12>
 800c638:	b30e      	cbz	r6, 800c67e <__multadd+0x7e>
 800c63a:	68a3      	ldr	r3, [r4, #8]
 800c63c:	42ab      	cmp	r3, r5
 800c63e:	dc19      	bgt.n	800c674 <__multadd+0x74>
 800c640:	6861      	ldr	r1, [r4, #4]
 800c642:	4638      	mov	r0, r7
 800c644:	3101      	adds	r1, #1
 800c646:	f7ff ff79 	bl	800c53c <_Balloc>
 800c64a:	4680      	mov	r8, r0
 800c64c:	b928      	cbnz	r0, 800c65a <__multadd+0x5a>
 800c64e:	4602      	mov	r2, r0
 800c650:	4b0c      	ldr	r3, [pc, #48]	@ (800c684 <__multadd+0x84>)
 800c652:	480d      	ldr	r0, [pc, #52]	@ (800c688 <__multadd+0x88>)
 800c654:	21ba      	movs	r1, #186	@ 0xba
 800c656:	f001 fc0f 	bl	800de78 <__assert_func>
 800c65a:	6922      	ldr	r2, [r4, #16]
 800c65c:	3202      	adds	r2, #2
 800c65e:	f104 010c 	add.w	r1, r4, #12
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	300c      	adds	r0, #12
 800c666:	f7ff f876 	bl	800b756 <memcpy>
 800c66a:	4621      	mov	r1, r4
 800c66c:	4638      	mov	r0, r7
 800c66e:	f7ff ffa5 	bl	800c5bc <_Bfree>
 800c672:	4644      	mov	r4, r8
 800c674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c678:	3501      	adds	r5, #1
 800c67a:	615e      	str	r6, [r3, #20]
 800c67c:	6125      	str	r5, [r4, #16]
 800c67e:	4620      	mov	r0, r4
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c684:	0800ed8e 	.word	0x0800ed8e
 800c688:	0800ed9f 	.word	0x0800ed9f

0800c68c <__s2b>:
 800c68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c690:	460c      	mov	r4, r1
 800c692:	4615      	mov	r5, r2
 800c694:	461f      	mov	r7, r3
 800c696:	2209      	movs	r2, #9
 800c698:	3308      	adds	r3, #8
 800c69a:	4606      	mov	r6, r0
 800c69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	db09      	blt.n	800c6bc <__s2b+0x30>
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	f7ff ff47 	bl	800c53c <_Balloc>
 800c6ae:	b940      	cbnz	r0, 800c6c2 <__s2b+0x36>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	4b19      	ldr	r3, [pc, #100]	@ (800c718 <__s2b+0x8c>)
 800c6b4:	4819      	ldr	r0, [pc, #100]	@ (800c71c <__s2b+0x90>)
 800c6b6:	21d3      	movs	r1, #211	@ 0xd3
 800c6b8:	f001 fbde 	bl	800de78 <__assert_func>
 800c6bc:	0052      	lsls	r2, r2, #1
 800c6be:	3101      	adds	r1, #1
 800c6c0:	e7f0      	b.n	800c6a4 <__s2b+0x18>
 800c6c2:	9b08      	ldr	r3, [sp, #32]
 800c6c4:	6143      	str	r3, [r0, #20]
 800c6c6:	2d09      	cmp	r5, #9
 800c6c8:	f04f 0301 	mov.w	r3, #1
 800c6cc:	6103      	str	r3, [r0, #16]
 800c6ce:	dd16      	ble.n	800c6fe <__s2b+0x72>
 800c6d0:	f104 0909 	add.w	r9, r4, #9
 800c6d4:	46c8      	mov	r8, r9
 800c6d6:	442c      	add	r4, r5
 800c6d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c6dc:	4601      	mov	r1, r0
 800c6de:	3b30      	subs	r3, #48	@ 0x30
 800c6e0:	220a      	movs	r2, #10
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f7ff ff8c 	bl	800c600 <__multadd>
 800c6e8:	45a0      	cmp	r8, r4
 800c6ea:	d1f5      	bne.n	800c6d8 <__s2b+0x4c>
 800c6ec:	f1a5 0408 	sub.w	r4, r5, #8
 800c6f0:	444c      	add	r4, r9
 800c6f2:	1b2d      	subs	r5, r5, r4
 800c6f4:	1963      	adds	r3, r4, r5
 800c6f6:	42bb      	cmp	r3, r7
 800c6f8:	db04      	blt.n	800c704 <__s2b+0x78>
 800c6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fe:	340a      	adds	r4, #10
 800c700:	2509      	movs	r5, #9
 800c702:	e7f6      	b.n	800c6f2 <__s2b+0x66>
 800c704:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c708:	4601      	mov	r1, r0
 800c70a:	3b30      	subs	r3, #48	@ 0x30
 800c70c:	220a      	movs	r2, #10
 800c70e:	4630      	mov	r0, r6
 800c710:	f7ff ff76 	bl	800c600 <__multadd>
 800c714:	e7ee      	b.n	800c6f4 <__s2b+0x68>
 800c716:	bf00      	nop
 800c718:	0800ed8e 	.word	0x0800ed8e
 800c71c:	0800ed9f 	.word	0x0800ed9f

0800c720 <__hi0bits>:
 800c720:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c724:	4603      	mov	r3, r0
 800c726:	bf36      	itet	cc
 800c728:	0403      	lslcc	r3, r0, #16
 800c72a:	2000      	movcs	r0, #0
 800c72c:	2010      	movcc	r0, #16
 800c72e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c732:	bf3c      	itt	cc
 800c734:	021b      	lslcc	r3, r3, #8
 800c736:	3008      	addcc	r0, #8
 800c738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c73c:	bf3c      	itt	cc
 800c73e:	011b      	lslcc	r3, r3, #4
 800c740:	3004      	addcc	r0, #4
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c746:	bf3c      	itt	cc
 800c748:	009b      	lslcc	r3, r3, #2
 800c74a:	3002      	addcc	r0, #2
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	db05      	blt.n	800c75c <__hi0bits+0x3c>
 800c750:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c754:	f100 0001 	add.w	r0, r0, #1
 800c758:	bf08      	it	eq
 800c75a:	2020      	moveq	r0, #32
 800c75c:	4770      	bx	lr

0800c75e <__lo0bits>:
 800c75e:	6803      	ldr	r3, [r0, #0]
 800c760:	4602      	mov	r2, r0
 800c762:	f013 0007 	ands.w	r0, r3, #7
 800c766:	d00b      	beq.n	800c780 <__lo0bits+0x22>
 800c768:	07d9      	lsls	r1, r3, #31
 800c76a:	d421      	bmi.n	800c7b0 <__lo0bits+0x52>
 800c76c:	0798      	lsls	r0, r3, #30
 800c76e:	bf49      	itett	mi
 800c770:	085b      	lsrmi	r3, r3, #1
 800c772:	089b      	lsrpl	r3, r3, #2
 800c774:	2001      	movmi	r0, #1
 800c776:	6013      	strmi	r3, [r2, #0]
 800c778:	bf5c      	itt	pl
 800c77a:	6013      	strpl	r3, [r2, #0]
 800c77c:	2002      	movpl	r0, #2
 800c77e:	4770      	bx	lr
 800c780:	b299      	uxth	r1, r3
 800c782:	b909      	cbnz	r1, 800c788 <__lo0bits+0x2a>
 800c784:	0c1b      	lsrs	r3, r3, #16
 800c786:	2010      	movs	r0, #16
 800c788:	b2d9      	uxtb	r1, r3
 800c78a:	b909      	cbnz	r1, 800c790 <__lo0bits+0x32>
 800c78c:	3008      	adds	r0, #8
 800c78e:	0a1b      	lsrs	r3, r3, #8
 800c790:	0719      	lsls	r1, r3, #28
 800c792:	bf04      	itt	eq
 800c794:	091b      	lsreq	r3, r3, #4
 800c796:	3004      	addeq	r0, #4
 800c798:	0799      	lsls	r1, r3, #30
 800c79a:	bf04      	itt	eq
 800c79c:	089b      	lsreq	r3, r3, #2
 800c79e:	3002      	addeq	r0, #2
 800c7a0:	07d9      	lsls	r1, r3, #31
 800c7a2:	d403      	bmi.n	800c7ac <__lo0bits+0x4e>
 800c7a4:	085b      	lsrs	r3, r3, #1
 800c7a6:	f100 0001 	add.w	r0, r0, #1
 800c7aa:	d003      	beq.n	800c7b4 <__lo0bits+0x56>
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	4770      	bx	lr
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	4770      	bx	lr
 800c7b4:	2020      	movs	r0, #32
 800c7b6:	4770      	bx	lr

0800c7b8 <__i2b>:
 800c7b8:	b510      	push	{r4, lr}
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	2101      	movs	r1, #1
 800c7be:	f7ff febd 	bl	800c53c <_Balloc>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	b928      	cbnz	r0, 800c7d2 <__i2b+0x1a>
 800c7c6:	4b05      	ldr	r3, [pc, #20]	@ (800c7dc <__i2b+0x24>)
 800c7c8:	4805      	ldr	r0, [pc, #20]	@ (800c7e0 <__i2b+0x28>)
 800c7ca:	f240 1145 	movw	r1, #325	@ 0x145
 800c7ce:	f001 fb53 	bl	800de78 <__assert_func>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	6144      	str	r4, [r0, #20]
 800c7d6:	6103      	str	r3, [r0, #16]
 800c7d8:	bd10      	pop	{r4, pc}
 800c7da:	bf00      	nop
 800c7dc:	0800ed8e 	.word	0x0800ed8e
 800c7e0:	0800ed9f 	.word	0x0800ed9f

0800c7e4 <__multiply>:
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	4614      	mov	r4, r2
 800c7ea:	690a      	ldr	r2, [r1, #16]
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	bfa8      	it	ge
 800c7f2:	4623      	movge	r3, r4
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	bfa4      	itt	ge
 800c7f8:	460c      	movge	r4, r1
 800c7fa:	461f      	movge	r7, r3
 800c7fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c800:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c804:	68a3      	ldr	r3, [r4, #8]
 800c806:	6861      	ldr	r1, [r4, #4]
 800c808:	eb0a 0609 	add.w	r6, sl, r9
 800c80c:	42b3      	cmp	r3, r6
 800c80e:	b085      	sub	sp, #20
 800c810:	bfb8      	it	lt
 800c812:	3101      	addlt	r1, #1
 800c814:	f7ff fe92 	bl	800c53c <_Balloc>
 800c818:	b930      	cbnz	r0, 800c828 <__multiply+0x44>
 800c81a:	4602      	mov	r2, r0
 800c81c:	4b44      	ldr	r3, [pc, #272]	@ (800c930 <__multiply+0x14c>)
 800c81e:	4845      	ldr	r0, [pc, #276]	@ (800c934 <__multiply+0x150>)
 800c820:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c824:	f001 fb28 	bl	800de78 <__assert_func>
 800c828:	f100 0514 	add.w	r5, r0, #20
 800c82c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c830:	462b      	mov	r3, r5
 800c832:	2200      	movs	r2, #0
 800c834:	4543      	cmp	r3, r8
 800c836:	d321      	bcc.n	800c87c <__multiply+0x98>
 800c838:	f107 0114 	add.w	r1, r7, #20
 800c83c:	f104 0214 	add.w	r2, r4, #20
 800c840:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c844:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c848:	9302      	str	r3, [sp, #8]
 800c84a:	1b13      	subs	r3, r2, r4
 800c84c:	3b15      	subs	r3, #21
 800c84e:	f023 0303 	bic.w	r3, r3, #3
 800c852:	3304      	adds	r3, #4
 800c854:	f104 0715 	add.w	r7, r4, #21
 800c858:	42ba      	cmp	r2, r7
 800c85a:	bf38      	it	cc
 800c85c:	2304      	movcc	r3, #4
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	9103      	str	r1, [sp, #12]
 800c864:	428b      	cmp	r3, r1
 800c866:	d80c      	bhi.n	800c882 <__multiply+0x9e>
 800c868:	2e00      	cmp	r6, #0
 800c86a:	dd03      	ble.n	800c874 <__multiply+0x90>
 800c86c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c870:	2b00      	cmp	r3, #0
 800c872:	d05b      	beq.n	800c92c <__multiply+0x148>
 800c874:	6106      	str	r6, [r0, #16]
 800c876:	b005      	add	sp, #20
 800c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87c:	f843 2b04 	str.w	r2, [r3], #4
 800c880:	e7d8      	b.n	800c834 <__multiply+0x50>
 800c882:	f8b1 a000 	ldrh.w	sl, [r1]
 800c886:	f1ba 0f00 	cmp.w	sl, #0
 800c88a:	d024      	beq.n	800c8d6 <__multiply+0xf2>
 800c88c:	f104 0e14 	add.w	lr, r4, #20
 800c890:	46a9      	mov	r9, r5
 800c892:	f04f 0c00 	mov.w	ip, #0
 800c896:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c89a:	f8d9 3000 	ldr.w	r3, [r9]
 800c89e:	fa1f fb87 	uxth.w	fp, r7
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8ac:	f8d9 7000 	ldr.w	r7, [r9]
 800c8b0:	4463      	add	r3, ip
 800c8b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8c4:	4572      	cmp	r2, lr
 800c8c6:	f849 3b04 	str.w	r3, [r9], #4
 800c8ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8ce:	d8e2      	bhi.n	800c896 <__multiply+0xb2>
 800c8d0:	9b01      	ldr	r3, [sp, #4]
 800c8d2:	f845 c003 	str.w	ip, [r5, r3]
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8dc:	3104      	adds	r1, #4
 800c8de:	f1b9 0f00 	cmp.w	r9, #0
 800c8e2:	d021      	beq.n	800c928 <__multiply+0x144>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	f104 0c14 	add.w	ip, r4, #20
 800c8ea:	46ae      	mov	lr, r5
 800c8ec:	f04f 0a00 	mov.w	sl, #0
 800c8f0:	f8bc b000 	ldrh.w	fp, [ip]
 800c8f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8f8:	fb09 770b 	mla	r7, r9, fp, r7
 800c8fc:	4457      	add	r7, sl
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c904:	f84e 3b04 	str.w	r3, [lr], #4
 800c908:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c90c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c910:	f8be 3000 	ldrh.w	r3, [lr]
 800c914:	fb09 330a 	mla	r3, r9, sl, r3
 800c918:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c91c:	4562      	cmp	r2, ip
 800c91e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c922:	d8e5      	bhi.n	800c8f0 <__multiply+0x10c>
 800c924:	9f01      	ldr	r7, [sp, #4]
 800c926:	51eb      	str	r3, [r5, r7]
 800c928:	3504      	adds	r5, #4
 800c92a:	e799      	b.n	800c860 <__multiply+0x7c>
 800c92c:	3e01      	subs	r6, #1
 800c92e:	e79b      	b.n	800c868 <__multiply+0x84>
 800c930:	0800ed8e 	.word	0x0800ed8e
 800c934:	0800ed9f 	.word	0x0800ed9f

0800c938 <__pow5mult>:
 800c938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c93c:	4615      	mov	r5, r2
 800c93e:	f012 0203 	ands.w	r2, r2, #3
 800c942:	4607      	mov	r7, r0
 800c944:	460e      	mov	r6, r1
 800c946:	d007      	beq.n	800c958 <__pow5mult+0x20>
 800c948:	4c25      	ldr	r4, [pc, #148]	@ (800c9e0 <__pow5mult+0xa8>)
 800c94a:	3a01      	subs	r2, #1
 800c94c:	2300      	movs	r3, #0
 800c94e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c952:	f7ff fe55 	bl	800c600 <__multadd>
 800c956:	4606      	mov	r6, r0
 800c958:	10ad      	asrs	r5, r5, #2
 800c95a:	d03d      	beq.n	800c9d8 <__pow5mult+0xa0>
 800c95c:	69fc      	ldr	r4, [r7, #28]
 800c95e:	b97c      	cbnz	r4, 800c980 <__pow5mult+0x48>
 800c960:	2010      	movs	r0, #16
 800c962:	f7ff fd35 	bl	800c3d0 <malloc>
 800c966:	4602      	mov	r2, r0
 800c968:	61f8      	str	r0, [r7, #28]
 800c96a:	b928      	cbnz	r0, 800c978 <__pow5mult+0x40>
 800c96c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9e4 <__pow5mult+0xac>)
 800c96e:	481e      	ldr	r0, [pc, #120]	@ (800c9e8 <__pow5mult+0xb0>)
 800c970:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c974:	f001 fa80 	bl	800de78 <__assert_func>
 800c978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c97c:	6004      	str	r4, [r0, #0]
 800c97e:	60c4      	str	r4, [r0, #12]
 800c980:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c988:	b94c      	cbnz	r4, 800c99e <__pow5mult+0x66>
 800c98a:	f240 2171 	movw	r1, #625	@ 0x271
 800c98e:	4638      	mov	r0, r7
 800c990:	f7ff ff12 	bl	800c7b8 <__i2b>
 800c994:	2300      	movs	r3, #0
 800c996:	f8c8 0008 	str.w	r0, [r8, #8]
 800c99a:	4604      	mov	r4, r0
 800c99c:	6003      	str	r3, [r0, #0]
 800c99e:	f04f 0900 	mov.w	r9, #0
 800c9a2:	07eb      	lsls	r3, r5, #31
 800c9a4:	d50a      	bpl.n	800c9bc <__pow5mult+0x84>
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	f7ff ff1a 	bl	800c7e4 <__multiply>
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4680      	mov	r8, r0
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	f7ff fe01 	bl	800c5bc <_Bfree>
 800c9ba:	4646      	mov	r6, r8
 800c9bc:	106d      	asrs	r5, r5, #1
 800c9be:	d00b      	beq.n	800c9d8 <__pow5mult+0xa0>
 800c9c0:	6820      	ldr	r0, [r4, #0]
 800c9c2:	b938      	cbnz	r0, 800c9d4 <__pow5mult+0x9c>
 800c9c4:	4622      	mov	r2, r4
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f7ff ff0b 	bl	800c7e4 <__multiply>
 800c9ce:	6020      	str	r0, [r4, #0]
 800c9d0:	f8c0 9000 	str.w	r9, [r0]
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	e7e4      	b.n	800c9a2 <__pow5mult+0x6a>
 800c9d8:	4630      	mov	r0, r6
 800c9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9de:	bf00      	nop
 800c9e0:	0800edf8 	.word	0x0800edf8
 800c9e4:	0800ed1f 	.word	0x0800ed1f
 800c9e8:	0800ed9f 	.word	0x0800ed9f

0800c9ec <__lshift>:
 800c9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	6849      	ldr	r1, [r1, #4]
 800c9f4:	6923      	ldr	r3, [r4, #16]
 800c9f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	4607      	mov	r7, r0
 800c9fe:	4691      	mov	r9, r2
 800ca00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca04:	f108 0601 	add.w	r6, r8, #1
 800ca08:	42b3      	cmp	r3, r6
 800ca0a:	db0b      	blt.n	800ca24 <__lshift+0x38>
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f7ff fd95 	bl	800c53c <_Balloc>
 800ca12:	4605      	mov	r5, r0
 800ca14:	b948      	cbnz	r0, 800ca2a <__lshift+0x3e>
 800ca16:	4602      	mov	r2, r0
 800ca18:	4b28      	ldr	r3, [pc, #160]	@ (800cabc <__lshift+0xd0>)
 800ca1a:	4829      	ldr	r0, [pc, #164]	@ (800cac0 <__lshift+0xd4>)
 800ca1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca20:	f001 fa2a 	bl	800de78 <__assert_func>
 800ca24:	3101      	adds	r1, #1
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	e7ee      	b.n	800ca08 <__lshift+0x1c>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f100 0114 	add.w	r1, r0, #20
 800ca30:	f100 0210 	add.w	r2, r0, #16
 800ca34:	4618      	mov	r0, r3
 800ca36:	4553      	cmp	r3, sl
 800ca38:	db33      	blt.n	800caa2 <__lshift+0xb6>
 800ca3a:	6920      	ldr	r0, [r4, #16]
 800ca3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca40:	f104 0314 	add.w	r3, r4, #20
 800ca44:	f019 091f 	ands.w	r9, r9, #31
 800ca48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca50:	d02b      	beq.n	800caaa <__lshift+0xbe>
 800ca52:	f1c9 0e20 	rsb	lr, r9, #32
 800ca56:	468a      	mov	sl, r1
 800ca58:	2200      	movs	r2, #0
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	fa00 f009 	lsl.w	r0, r0, r9
 800ca60:	4310      	orrs	r0, r2
 800ca62:	f84a 0b04 	str.w	r0, [sl], #4
 800ca66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca6a:	459c      	cmp	ip, r3
 800ca6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca70:	d8f3      	bhi.n	800ca5a <__lshift+0x6e>
 800ca72:	ebac 0304 	sub.w	r3, ip, r4
 800ca76:	3b15      	subs	r3, #21
 800ca78:	f023 0303 	bic.w	r3, r3, #3
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	f104 0015 	add.w	r0, r4, #21
 800ca82:	4584      	cmp	ip, r0
 800ca84:	bf38      	it	cc
 800ca86:	2304      	movcc	r3, #4
 800ca88:	50ca      	str	r2, [r1, r3]
 800ca8a:	b10a      	cbz	r2, 800ca90 <__lshift+0xa4>
 800ca8c:	f108 0602 	add.w	r6, r8, #2
 800ca90:	3e01      	subs	r6, #1
 800ca92:	4638      	mov	r0, r7
 800ca94:	612e      	str	r6, [r5, #16]
 800ca96:	4621      	mov	r1, r4
 800ca98:	f7ff fd90 	bl	800c5bc <_Bfree>
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa2:	f842 0f04 	str.w	r0, [r2, #4]!
 800caa6:	3301      	adds	r3, #1
 800caa8:	e7c5      	b.n	800ca36 <__lshift+0x4a>
 800caaa:	3904      	subs	r1, #4
 800caac:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cab4:	459c      	cmp	ip, r3
 800cab6:	d8f9      	bhi.n	800caac <__lshift+0xc0>
 800cab8:	e7ea      	b.n	800ca90 <__lshift+0xa4>
 800caba:	bf00      	nop
 800cabc:	0800ed8e 	.word	0x0800ed8e
 800cac0:	0800ed9f 	.word	0x0800ed9f

0800cac4 <__mcmp>:
 800cac4:	690a      	ldr	r2, [r1, #16]
 800cac6:	4603      	mov	r3, r0
 800cac8:	6900      	ldr	r0, [r0, #16]
 800caca:	1a80      	subs	r0, r0, r2
 800cacc:	b530      	push	{r4, r5, lr}
 800cace:	d10e      	bne.n	800caee <__mcmp+0x2a>
 800cad0:	3314      	adds	r3, #20
 800cad2:	3114      	adds	r1, #20
 800cad4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cad8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cadc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cae0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cae4:	4295      	cmp	r5, r2
 800cae6:	d003      	beq.n	800caf0 <__mcmp+0x2c>
 800cae8:	d205      	bcs.n	800caf6 <__mcmp+0x32>
 800caea:	f04f 30ff 	mov.w	r0, #4294967295
 800caee:	bd30      	pop	{r4, r5, pc}
 800caf0:	42a3      	cmp	r3, r4
 800caf2:	d3f3      	bcc.n	800cadc <__mcmp+0x18>
 800caf4:	e7fb      	b.n	800caee <__mcmp+0x2a>
 800caf6:	2001      	movs	r0, #1
 800caf8:	e7f9      	b.n	800caee <__mcmp+0x2a>
	...

0800cafc <__mdiff>:
 800cafc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb00:	4689      	mov	r9, r1
 800cb02:	4606      	mov	r6, r0
 800cb04:	4611      	mov	r1, r2
 800cb06:	4648      	mov	r0, r9
 800cb08:	4614      	mov	r4, r2
 800cb0a:	f7ff ffdb 	bl	800cac4 <__mcmp>
 800cb0e:	1e05      	subs	r5, r0, #0
 800cb10:	d112      	bne.n	800cb38 <__mdiff+0x3c>
 800cb12:	4629      	mov	r1, r5
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7ff fd11 	bl	800c53c <_Balloc>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	b928      	cbnz	r0, 800cb2a <__mdiff+0x2e>
 800cb1e:	4b3f      	ldr	r3, [pc, #252]	@ (800cc1c <__mdiff+0x120>)
 800cb20:	f240 2137 	movw	r1, #567	@ 0x237
 800cb24:	483e      	ldr	r0, [pc, #248]	@ (800cc20 <__mdiff+0x124>)
 800cb26:	f001 f9a7 	bl	800de78 <__assert_func>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb30:	4610      	mov	r0, r2
 800cb32:	b003      	add	sp, #12
 800cb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb38:	bfbc      	itt	lt
 800cb3a:	464b      	movlt	r3, r9
 800cb3c:	46a1      	movlt	r9, r4
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb44:	bfba      	itte	lt
 800cb46:	461c      	movlt	r4, r3
 800cb48:	2501      	movlt	r5, #1
 800cb4a:	2500      	movge	r5, #0
 800cb4c:	f7ff fcf6 	bl	800c53c <_Balloc>
 800cb50:	4602      	mov	r2, r0
 800cb52:	b918      	cbnz	r0, 800cb5c <__mdiff+0x60>
 800cb54:	4b31      	ldr	r3, [pc, #196]	@ (800cc1c <__mdiff+0x120>)
 800cb56:	f240 2145 	movw	r1, #581	@ 0x245
 800cb5a:	e7e3      	b.n	800cb24 <__mdiff+0x28>
 800cb5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb60:	6926      	ldr	r6, [r4, #16]
 800cb62:	60c5      	str	r5, [r0, #12]
 800cb64:	f109 0310 	add.w	r3, r9, #16
 800cb68:	f109 0514 	add.w	r5, r9, #20
 800cb6c:	f104 0e14 	add.w	lr, r4, #20
 800cb70:	f100 0b14 	add.w	fp, r0, #20
 800cb74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb7c:	9301      	str	r3, [sp, #4]
 800cb7e:	46d9      	mov	r9, fp
 800cb80:	f04f 0c00 	mov.w	ip, #0
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	fa1f f38a 	uxth.w	r3, sl
 800cb94:	4619      	mov	r1, r3
 800cb96:	b283      	uxth	r3, r0
 800cb98:	1acb      	subs	r3, r1, r3
 800cb9a:	0c00      	lsrs	r0, r0, #16
 800cb9c:	4463      	add	r3, ip
 800cb9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cba2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbac:	4576      	cmp	r6, lr
 800cbae:	f849 3b04 	str.w	r3, [r9], #4
 800cbb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbb6:	d8e5      	bhi.n	800cb84 <__mdiff+0x88>
 800cbb8:	1b33      	subs	r3, r6, r4
 800cbba:	3b15      	subs	r3, #21
 800cbbc:	f023 0303 	bic.w	r3, r3, #3
 800cbc0:	3415      	adds	r4, #21
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	42a6      	cmp	r6, r4
 800cbc6:	bf38      	it	cc
 800cbc8:	2304      	movcc	r3, #4
 800cbca:	441d      	add	r5, r3
 800cbcc:	445b      	add	r3, fp
 800cbce:	461e      	mov	r6, r3
 800cbd0:	462c      	mov	r4, r5
 800cbd2:	4544      	cmp	r4, r8
 800cbd4:	d30e      	bcc.n	800cbf4 <__mdiff+0xf8>
 800cbd6:	f108 0103 	add.w	r1, r8, #3
 800cbda:	1b49      	subs	r1, r1, r5
 800cbdc:	f021 0103 	bic.w	r1, r1, #3
 800cbe0:	3d03      	subs	r5, #3
 800cbe2:	45a8      	cmp	r8, r5
 800cbe4:	bf38      	it	cc
 800cbe6:	2100      	movcc	r1, #0
 800cbe8:	440b      	add	r3, r1
 800cbea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbee:	b191      	cbz	r1, 800cc16 <__mdiff+0x11a>
 800cbf0:	6117      	str	r7, [r2, #16]
 800cbf2:	e79d      	b.n	800cb30 <__mdiff+0x34>
 800cbf4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbf8:	46e6      	mov	lr, ip
 800cbfa:	0c08      	lsrs	r0, r1, #16
 800cbfc:	fa1c fc81 	uxtah	ip, ip, r1
 800cc00:	4471      	add	r1, lr
 800cc02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc06:	b289      	uxth	r1, r1
 800cc08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc0c:	f846 1b04 	str.w	r1, [r6], #4
 800cc10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc14:	e7dd      	b.n	800cbd2 <__mdiff+0xd6>
 800cc16:	3f01      	subs	r7, #1
 800cc18:	e7e7      	b.n	800cbea <__mdiff+0xee>
 800cc1a:	bf00      	nop
 800cc1c:	0800ed8e 	.word	0x0800ed8e
 800cc20:	0800ed9f 	.word	0x0800ed9f

0800cc24 <__ulp>:
 800cc24:	b082      	sub	sp, #8
 800cc26:	ed8d 0b00 	vstr	d0, [sp]
 800cc2a:	9a01      	ldr	r2, [sp, #4]
 800cc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc6c <__ulp+0x48>)
 800cc2e:	4013      	ands	r3, r2
 800cc30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dc08      	bgt.n	800cc4a <__ulp+0x26>
 800cc38:	425b      	negs	r3, r3
 800cc3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc42:	da04      	bge.n	800cc4e <__ulp+0x2a>
 800cc44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc48:	4113      	asrs	r3, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	e008      	b.n	800cc60 <__ulp+0x3c>
 800cc4e:	f1a2 0314 	sub.w	r3, r2, #20
 800cc52:	2b1e      	cmp	r3, #30
 800cc54:	bfda      	itte	le
 800cc56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cc5a:	40da      	lsrle	r2, r3
 800cc5c:	2201      	movgt	r2, #1
 800cc5e:	2300      	movs	r3, #0
 800cc60:	4619      	mov	r1, r3
 800cc62:	4610      	mov	r0, r2
 800cc64:	ec41 0b10 	vmov	d0, r0, r1
 800cc68:	b002      	add	sp, #8
 800cc6a:	4770      	bx	lr
 800cc6c:	7ff00000 	.word	0x7ff00000

0800cc70 <__b2d>:
 800cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc74:	6906      	ldr	r6, [r0, #16]
 800cc76:	f100 0814 	add.w	r8, r0, #20
 800cc7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cc7e:	1f37      	subs	r7, r6, #4
 800cc80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7ff fd4b 	bl	800c720 <__hi0bits>
 800cc8a:	f1c0 0320 	rsb	r3, r0, #32
 800cc8e:	280a      	cmp	r0, #10
 800cc90:	600b      	str	r3, [r1, #0]
 800cc92:	491b      	ldr	r1, [pc, #108]	@ (800cd00 <__b2d+0x90>)
 800cc94:	dc15      	bgt.n	800ccc2 <__b2d+0x52>
 800cc96:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc9a:	fa22 f30c 	lsr.w	r3, r2, ip
 800cc9e:	45b8      	cmp	r8, r7
 800cca0:	ea43 0501 	orr.w	r5, r3, r1
 800cca4:	bf34      	ite	cc
 800cca6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccaa:	2300      	movcs	r3, #0
 800ccac:	3015      	adds	r0, #21
 800ccae:	fa02 f000 	lsl.w	r0, r2, r0
 800ccb2:	fa23 f30c 	lsr.w	r3, r3, ip
 800ccb6:	4303      	orrs	r3, r0
 800ccb8:	461c      	mov	r4, r3
 800ccba:	ec45 4b10 	vmov	d0, r4, r5
 800ccbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc2:	45b8      	cmp	r8, r7
 800ccc4:	bf3a      	itte	cc
 800ccc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccca:	f1a6 0708 	subcc.w	r7, r6, #8
 800ccce:	2300      	movcs	r3, #0
 800ccd0:	380b      	subs	r0, #11
 800ccd2:	d012      	beq.n	800ccfa <__b2d+0x8a>
 800ccd4:	f1c0 0120 	rsb	r1, r0, #32
 800ccd8:	fa23 f401 	lsr.w	r4, r3, r1
 800ccdc:	4082      	lsls	r2, r0
 800ccde:	4322      	orrs	r2, r4
 800cce0:	4547      	cmp	r7, r8
 800cce2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cce6:	bf8c      	ite	hi
 800cce8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ccec:	2200      	movls	r2, #0
 800ccee:	4083      	lsls	r3, r0
 800ccf0:	40ca      	lsrs	r2, r1
 800ccf2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	e7de      	b.n	800ccb8 <__b2d+0x48>
 800ccfa:	ea42 0501 	orr.w	r5, r2, r1
 800ccfe:	e7db      	b.n	800ccb8 <__b2d+0x48>
 800cd00:	3ff00000 	.word	0x3ff00000

0800cd04 <__d2b>:
 800cd04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd08:	460f      	mov	r7, r1
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	ec59 8b10 	vmov	r8, r9, d0
 800cd10:	4616      	mov	r6, r2
 800cd12:	f7ff fc13 	bl	800c53c <_Balloc>
 800cd16:	4604      	mov	r4, r0
 800cd18:	b930      	cbnz	r0, 800cd28 <__d2b+0x24>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	4b23      	ldr	r3, [pc, #140]	@ (800cdac <__d2b+0xa8>)
 800cd1e:	4824      	ldr	r0, [pc, #144]	@ (800cdb0 <__d2b+0xac>)
 800cd20:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd24:	f001 f8a8 	bl	800de78 <__assert_func>
 800cd28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd30:	b10d      	cbz	r5, 800cd36 <__d2b+0x32>
 800cd32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	f1b8 0300 	subs.w	r3, r8, #0
 800cd3c:	d023      	beq.n	800cd86 <__d2b+0x82>
 800cd3e:	4668      	mov	r0, sp
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	f7ff fd0c 	bl	800c75e <__lo0bits>
 800cd46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd4a:	b1d0      	cbz	r0, 800cd82 <__d2b+0x7e>
 800cd4c:	f1c0 0320 	rsb	r3, r0, #32
 800cd50:	fa02 f303 	lsl.w	r3, r2, r3
 800cd54:	430b      	orrs	r3, r1
 800cd56:	40c2      	lsrs	r2, r0
 800cd58:	6163      	str	r3, [r4, #20]
 800cd5a:	9201      	str	r2, [sp, #4]
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	61a3      	str	r3, [r4, #24]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bf0c      	ite	eq
 800cd64:	2201      	moveq	r2, #1
 800cd66:	2202      	movne	r2, #2
 800cd68:	6122      	str	r2, [r4, #16]
 800cd6a:	b1a5      	cbz	r5, 800cd96 <__d2b+0x92>
 800cd6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd70:	4405      	add	r5, r0
 800cd72:	603d      	str	r5, [r7, #0]
 800cd74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd78:	6030      	str	r0, [r6, #0]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	b003      	add	sp, #12
 800cd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd82:	6161      	str	r1, [r4, #20]
 800cd84:	e7ea      	b.n	800cd5c <__d2b+0x58>
 800cd86:	a801      	add	r0, sp, #4
 800cd88:	f7ff fce9 	bl	800c75e <__lo0bits>
 800cd8c:	9b01      	ldr	r3, [sp, #4]
 800cd8e:	6163      	str	r3, [r4, #20]
 800cd90:	3020      	adds	r0, #32
 800cd92:	2201      	movs	r2, #1
 800cd94:	e7e8      	b.n	800cd68 <__d2b+0x64>
 800cd96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd9e:	6038      	str	r0, [r7, #0]
 800cda0:	6918      	ldr	r0, [r3, #16]
 800cda2:	f7ff fcbd 	bl	800c720 <__hi0bits>
 800cda6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdaa:	e7e5      	b.n	800cd78 <__d2b+0x74>
 800cdac:	0800ed8e 	.word	0x0800ed8e
 800cdb0:	0800ed9f 	.word	0x0800ed9f

0800cdb4 <__ratio>:
 800cdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	4688      	mov	r8, r1
 800cdba:	4669      	mov	r1, sp
 800cdbc:	4681      	mov	r9, r0
 800cdbe:	f7ff ff57 	bl	800cc70 <__b2d>
 800cdc2:	a901      	add	r1, sp, #4
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	ec55 4b10 	vmov	r4, r5, d0
 800cdca:	f7ff ff51 	bl	800cc70 <__b2d>
 800cdce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cdd2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cdd6:	1ad2      	subs	r2, r2, r3
 800cdd8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800cddc:	1a5b      	subs	r3, r3, r1
 800cdde:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800cde2:	ec57 6b10 	vmov	r6, r7, d0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	bfd6      	itet	le
 800cdea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cdee:	462a      	movgt	r2, r5
 800cdf0:	463a      	movle	r2, r7
 800cdf2:	46ab      	mov	fp, r5
 800cdf4:	46a2      	mov	sl, r4
 800cdf6:	bfce      	itee	gt
 800cdf8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cdfc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ce00:	ee00 3a90 	vmovle	s1, r3
 800ce04:	ec4b ab17 	vmov	d7, sl, fp
 800ce08:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ce0c:	b003      	add	sp, #12
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce12 <__copybits>:
 800ce12:	3901      	subs	r1, #1
 800ce14:	b570      	push	{r4, r5, r6, lr}
 800ce16:	1149      	asrs	r1, r1, #5
 800ce18:	6914      	ldr	r4, [r2, #16]
 800ce1a:	3101      	adds	r1, #1
 800ce1c:	f102 0314 	add.w	r3, r2, #20
 800ce20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce28:	1f05      	subs	r5, r0, #4
 800ce2a:	42a3      	cmp	r3, r4
 800ce2c:	d30c      	bcc.n	800ce48 <__copybits+0x36>
 800ce2e:	1aa3      	subs	r3, r4, r2
 800ce30:	3b11      	subs	r3, #17
 800ce32:	f023 0303 	bic.w	r3, r3, #3
 800ce36:	3211      	adds	r2, #17
 800ce38:	42a2      	cmp	r2, r4
 800ce3a:	bf88      	it	hi
 800ce3c:	2300      	movhi	r3, #0
 800ce3e:	4418      	add	r0, r3
 800ce40:	2300      	movs	r3, #0
 800ce42:	4288      	cmp	r0, r1
 800ce44:	d305      	bcc.n	800ce52 <__copybits+0x40>
 800ce46:	bd70      	pop	{r4, r5, r6, pc}
 800ce48:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce4c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce50:	e7eb      	b.n	800ce2a <__copybits+0x18>
 800ce52:	f840 3b04 	str.w	r3, [r0], #4
 800ce56:	e7f4      	b.n	800ce42 <__copybits+0x30>

0800ce58 <__any_on>:
 800ce58:	f100 0214 	add.w	r2, r0, #20
 800ce5c:	6900      	ldr	r0, [r0, #16]
 800ce5e:	114b      	asrs	r3, r1, #5
 800ce60:	4298      	cmp	r0, r3
 800ce62:	b510      	push	{r4, lr}
 800ce64:	db11      	blt.n	800ce8a <__any_on+0x32>
 800ce66:	dd0a      	ble.n	800ce7e <__any_on+0x26>
 800ce68:	f011 011f 	ands.w	r1, r1, #31
 800ce6c:	d007      	beq.n	800ce7e <__any_on+0x26>
 800ce6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce72:	fa24 f001 	lsr.w	r0, r4, r1
 800ce76:	fa00 f101 	lsl.w	r1, r0, r1
 800ce7a:	428c      	cmp	r4, r1
 800ce7c:	d10b      	bne.n	800ce96 <__any_on+0x3e>
 800ce7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d803      	bhi.n	800ce8e <__any_on+0x36>
 800ce86:	2000      	movs	r0, #0
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e7f7      	b.n	800ce7e <__any_on+0x26>
 800ce8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce92:	2900      	cmp	r1, #0
 800ce94:	d0f5      	beq.n	800ce82 <__any_on+0x2a>
 800ce96:	2001      	movs	r0, #1
 800ce98:	e7f6      	b.n	800ce88 <__any_on+0x30>

0800ce9a <sulp>:
 800ce9a:	b570      	push	{r4, r5, r6, lr}
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	460d      	mov	r5, r1
 800cea0:	4616      	mov	r6, r2
 800cea2:	ec45 4b10 	vmov	d0, r4, r5
 800cea6:	f7ff febd 	bl	800cc24 <__ulp>
 800ceaa:	b17e      	cbz	r6, 800cecc <sulp+0x32>
 800ceac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ceb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	dd09      	ble.n	800cecc <sulp+0x32>
 800ceb8:	051b      	lsls	r3, r3, #20
 800ceba:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cebe:	2000      	movs	r0, #0
 800cec0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cec4:	ec41 0b17 	vmov	d7, r0, r1
 800cec8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cecc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ced0 <_strtod_l>:
 800ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	ed2d 8b0a 	vpush	{d8-d12}
 800ced8:	b097      	sub	sp, #92	@ 0x5c
 800ceda:	4688      	mov	r8, r1
 800cedc:	920e      	str	r2, [sp, #56]	@ 0x38
 800cede:	2200      	movs	r2, #0
 800cee0:	9212      	str	r2, [sp, #72]	@ 0x48
 800cee2:	9005      	str	r0, [sp, #20]
 800cee4:	f04f 0a00 	mov.w	sl, #0
 800cee8:	f04f 0b00 	mov.w	fp, #0
 800ceec:	460a      	mov	r2, r1
 800ceee:	9211      	str	r2, [sp, #68]	@ 0x44
 800cef0:	7811      	ldrb	r1, [r2, #0]
 800cef2:	292b      	cmp	r1, #43	@ 0x2b
 800cef4:	d04c      	beq.n	800cf90 <_strtod_l+0xc0>
 800cef6:	d839      	bhi.n	800cf6c <_strtod_l+0x9c>
 800cef8:	290d      	cmp	r1, #13
 800cefa:	d833      	bhi.n	800cf64 <_strtod_l+0x94>
 800cefc:	2908      	cmp	r1, #8
 800cefe:	d833      	bhi.n	800cf68 <_strtod_l+0x98>
 800cf00:	2900      	cmp	r1, #0
 800cf02:	d03c      	beq.n	800cf7e <_strtod_l+0xae>
 800cf04:	2200      	movs	r2, #0
 800cf06:	9208      	str	r2, [sp, #32]
 800cf08:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800cf0a:	782a      	ldrb	r2, [r5, #0]
 800cf0c:	2a30      	cmp	r2, #48	@ 0x30
 800cf0e:	f040 80b5 	bne.w	800d07c <_strtod_l+0x1ac>
 800cf12:	786a      	ldrb	r2, [r5, #1]
 800cf14:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf18:	2a58      	cmp	r2, #88	@ 0x58
 800cf1a:	d170      	bne.n	800cffe <_strtod_l+0x12e>
 800cf1c:	9302      	str	r3, [sp, #8]
 800cf1e:	9b08      	ldr	r3, [sp, #32]
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	ab12      	add	r3, sp, #72	@ 0x48
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	4a8b      	ldr	r2, [pc, #556]	@ (800d154 <_strtod_l+0x284>)
 800cf28:	9805      	ldr	r0, [sp, #20]
 800cf2a:	ab13      	add	r3, sp, #76	@ 0x4c
 800cf2c:	a911      	add	r1, sp, #68	@ 0x44
 800cf2e:	f001 f83d 	bl	800dfac <__gethex>
 800cf32:	f010 060f 	ands.w	r6, r0, #15
 800cf36:	4604      	mov	r4, r0
 800cf38:	d005      	beq.n	800cf46 <_strtod_l+0x76>
 800cf3a:	2e06      	cmp	r6, #6
 800cf3c:	d12a      	bne.n	800cf94 <_strtod_l+0xc4>
 800cf3e:	3501      	adds	r5, #1
 800cf40:	2300      	movs	r3, #0
 800cf42:	9511      	str	r5, [sp, #68]	@ 0x44
 800cf44:	9308      	str	r3, [sp, #32]
 800cf46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f040 852f 	bne.w	800d9ac <_strtod_l+0xadc>
 800cf4e:	9b08      	ldr	r3, [sp, #32]
 800cf50:	ec4b ab10 	vmov	d0, sl, fp
 800cf54:	b1cb      	cbz	r3, 800cf8a <_strtod_l+0xba>
 800cf56:	eeb1 0b40 	vneg.f64	d0, d0
 800cf5a:	b017      	add	sp, #92	@ 0x5c
 800cf5c:	ecbd 8b0a 	vpop	{d8-d12}
 800cf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf64:	2920      	cmp	r1, #32
 800cf66:	d1cd      	bne.n	800cf04 <_strtod_l+0x34>
 800cf68:	3201      	adds	r2, #1
 800cf6a:	e7c0      	b.n	800ceee <_strtod_l+0x1e>
 800cf6c:	292d      	cmp	r1, #45	@ 0x2d
 800cf6e:	d1c9      	bne.n	800cf04 <_strtod_l+0x34>
 800cf70:	2101      	movs	r1, #1
 800cf72:	9108      	str	r1, [sp, #32]
 800cf74:	1c51      	adds	r1, r2, #1
 800cf76:	9111      	str	r1, [sp, #68]	@ 0x44
 800cf78:	7852      	ldrb	r2, [r2, #1]
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d1c4      	bne.n	800cf08 <_strtod_l+0x38>
 800cf7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf80:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f040 850f 	bne.w	800d9a8 <_strtod_l+0xad8>
 800cf8a:	ec4b ab10 	vmov	d0, sl, fp
 800cf8e:	e7e4      	b.n	800cf5a <_strtod_l+0x8a>
 800cf90:	2100      	movs	r1, #0
 800cf92:	e7ee      	b.n	800cf72 <_strtod_l+0xa2>
 800cf94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cf96:	b13a      	cbz	r2, 800cfa8 <_strtod_l+0xd8>
 800cf98:	2135      	movs	r1, #53	@ 0x35
 800cf9a:	a814      	add	r0, sp, #80	@ 0x50
 800cf9c:	f7ff ff39 	bl	800ce12 <__copybits>
 800cfa0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cfa2:	9805      	ldr	r0, [sp, #20]
 800cfa4:	f7ff fb0a 	bl	800c5bc <_Bfree>
 800cfa8:	1e73      	subs	r3, r6, #1
 800cfaa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d806      	bhi.n	800cfbe <_strtod_l+0xee>
 800cfb0:	e8df f003 	tbb	[pc, r3]
 800cfb4:	201d0314 	.word	0x201d0314
 800cfb8:	14          	.byte	0x14
 800cfb9:	00          	.byte	0x00
 800cfba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800cfbe:	05e3      	lsls	r3, r4, #23
 800cfc0:	bf48      	it	mi
 800cfc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cfc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfca:	0d1b      	lsrs	r3, r3, #20
 800cfcc:	051b      	lsls	r3, r3, #20
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1b9      	bne.n	800cf46 <_strtod_l+0x76>
 800cfd2:	f7fe fb93 	bl	800b6fc <__errno>
 800cfd6:	2322      	movs	r3, #34	@ 0x22
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	e7b4      	b.n	800cf46 <_strtod_l+0x76>
 800cfdc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800cfe0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cfe4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cfe8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cfec:	e7e7      	b.n	800cfbe <_strtod_l+0xee>
 800cfee:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d15c <_strtod_l+0x28c>
 800cff2:	e7e4      	b.n	800cfbe <_strtod_l+0xee>
 800cff4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cff8:	f04f 3aff 	mov.w	sl, #4294967295
 800cffc:	e7df      	b.n	800cfbe <_strtod_l+0xee>
 800cffe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d000:	1c5a      	adds	r2, r3, #1
 800d002:	9211      	str	r2, [sp, #68]	@ 0x44
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	2b30      	cmp	r3, #48	@ 0x30
 800d008:	d0f9      	beq.n	800cffe <_strtod_l+0x12e>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d09b      	beq.n	800cf46 <_strtod_l+0x76>
 800d00e:	2301      	movs	r3, #1
 800d010:	2600      	movs	r6, #0
 800d012:	9307      	str	r3, [sp, #28]
 800d014:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d016:	930a      	str	r3, [sp, #40]	@ 0x28
 800d018:	46b1      	mov	r9, r6
 800d01a:	4635      	mov	r5, r6
 800d01c:	220a      	movs	r2, #10
 800d01e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d020:	7804      	ldrb	r4, [r0, #0]
 800d022:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d026:	b2d9      	uxtb	r1, r3
 800d028:	2909      	cmp	r1, #9
 800d02a:	d929      	bls.n	800d080 <_strtod_l+0x1b0>
 800d02c:	494a      	ldr	r1, [pc, #296]	@ (800d158 <_strtod_l+0x288>)
 800d02e:	2201      	movs	r2, #1
 800d030:	f7fe fb07 	bl	800b642 <strncmp>
 800d034:	b378      	cbz	r0, 800d096 <_strtod_l+0x1c6>
 800d036:	2000      	movs	r0, #0
 800d038:	4622      	mov	r2, r4
 800d03a:	462b      	mov	r3, r5
 800d03c:	4607      	mov	r7, r0
 800d03e:	9006      	str	r0, [sp, #24]
 800d040:	2a65      	cmp	r2, #101	@ 0x65
 800d042:	d001      	beq.n	800d048 <_strtod_l+0x178>
 800d044:	2a45      	cmp	r2, #69	@ 0x45
 800d046:	d117      	bne.n	800d078 <_strtod_l+0x1a8>
 800d048:	b91b      	cbnz	r3, 800d052 <_strtod_l+0x182>
 800d04a:	9b07      	ldr	r3, [sp, #28]
 800d04c:	4303      	orrs	r3, r0
 800d04e:	d096      	beq.n	800cf7e <_strtod_l+0xae>
 800d050:	2300      	movs	r3, #0
 800d052:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d056:	f108 0201 	add.w	r2, r8, #1
 800d05a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d05c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d060:	2a2b      	cmp	r2, #43	@ 0x2b
 800d062:	d06b      	beq.n	800d13c <_strtod_l+0x26c>
 800d064:	2a2d      	cmp	r2, #45	@ 0x2d
 800d066:	d071      	beq.n	800d14c <_strtod_l+0x27c>
 800d068:	f04f 0e00 	mov.w	lr, #0
 800d06c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d070:	2c09      	cmp	r4, #9
 800d072:	d979      	bls.n	800d168 <_strtod_l+0x298>
 800d074:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d078:	2400      	movs	r4, #0
 800d07a:	e094      	b.n	800d1a6 <_strtod_l+0x2d6>
 800d07c:	2300      	movs	r3, #0
 800d07e:	e7c7      	b.n	800d010 <_strtod_l+0x140>
 800d080:	2d08      	cmp	r5, #8
 800d082:	f100 0001 	add.w	r0, r0, #1
 800d086:	bfd4      	ite	le
 800d088:	fb02 3909 	mlale	r9, r2, r9, r3
 800d08c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d090:	3501      	adds	r5, #1
 800d092:	9011      	str	r0, [sp, #68]	@ 0x44
 800d094:	e7c3      	b.n	800d01e <_strtod_l+0x14e>
 800d096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d09c:	785a      	ldrb	r2, [r3, #1]
 800d09e:	b375      	cbz	r5, 800d0fe <_strtod_l+0x22e>
 800d0a0:	4607      	mov	r7, r0
 800d0a2:	462b      	mov	r3, r5
 800d0a4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d0a8:	2909      	cmp	r1, #9
 800d0aa:	d913      	bls.n	800d0d4 <_strtod_l+0x204>
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	9106      	str	r1, [sp, #24]
 800d0b0:	e7c6      	b.n	800d040 <_strtod_l+0x170>
 800d0b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	9211      	str	r2, [sp, #68]	@ 0x44
 800d0b8:	785a      	ldrb	r2, [r3, #1]
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	2a30      	cmp	r2, #48	@ 0x30
 800d0be:	d0f8      	beq.n	800d0b2 <_strtod_l+0x1e2>
 800d0c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d0c4:	2b08      	cmp	r3, #8
 800d0c6:	f200 8476 	bhi.w	800d9b6 <_strtod_l+0xae6>
 800d0ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	3a30      	subs	r2, #48	@ 0x30
 800d0d6:	f100 0101 	add.w	r1, r0, #1
 800d0da:	d023      	beq.n	800d124 <_strtod_l+0x254>
 800d0dc:	440f      	add	r7, r1
 800d0de:	eb00 0c03 	add.w	ip, r0, r3
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	240a      	movs	r4, #10
 800d0e6:	4561      	cmp	r1, ip
 800d0e8:	d10b      	bne.n	800d102 <_strtod_l+0x232>
 800d0ea:	1c5c      	adds	r4, r3, #1
 800d0ec:	4403      	add	r3, r0
 800d0ee:	2b08      	cmp	r3, #8
 800d0f0:	4404      	add	r4, r0
 800d0f2:	dc11      	bgt.n	800d118 <_strtod_l+0x248>
 800d0f4:	230a      	movs	r3, #10
 800d0f6:	fb03 2909 	mla	r9, r3, r9, r2
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	e013      	b.n	800d126 <_strtod_l+0x256>
 800d0fe:	4628      	mov	r0, r5
 800d100:	e7dc      	b.n	800d0bc <_strtod_l+0x1ec>
 800d102:	2908      	cmp	r1, #8
 800d104:	f101 0101 	add.w	r1, r1, #1
 800d108:	dc02      	bgt.n	800d110 <_strtod_l+0x240>
 800d10a:	fb04 f909 	mul.w	r9, r4, r9
 800d10e:	e7ea      	b.n	800d0e6 <_strtod_l+0x216>
 800d110:	2910      	cmp	r1, #16
 800d112:	bfd8      	it	le
 800d114:	4366      	mulle	r6, r4
 800d116:	e7e6      	b.n	800d0e6 <_strtod_l+0x216>
 800d118:	2b0f      	cmp	r3, #15
 800d11a:	dcee      	bgt.n	800d0fa <_strtod_l+0x22a>
 800d11c:	230a      	movs	r3, #10
 800d11e:	fb03 2606 	mla	r6, r3, r6, r2
 800d122:	e7ea      	b.n	800d0fa <_strtod_l+0x22a>
 800d124:	461c      	mov	r4, r3
 800d126:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d128:	1c5a      	adds	r2, r3, #1
 800d12a:	9211      	str	r2, [sp, #68]	@ 0x44
 800d12c:	785a      	ldrb	r2, [r3, #1]
 800d12e:	4608      	mov	r0, r1
 800d130:	4623      	mov	r3, r4
 800d132:	e7b7      	b.n	800d0a4 <_strtod_l+0x1d4>
 800d134:	2301      	movs	r3, #1
 800d136:	2700      	movs	r7, #0
 800d138:	9306      	str	r3, [sp, #24]
 800d13a:	e786      	b.n	800d04a <_strtod_l+0x17a>
 800d13c:	f04f 0e00 	mov.w	lr, #0
 800d140:	f108 0202 	add.w	r2, r8, #2
 800d144:	9211      	str	r2, [sp, #68]	@ 0x44
 800d146:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d14a:	e78f      	b.n	800d06c <_strtod_l+0x19c>
 800d14c:	f04f 0e01 	mov.w	lr, #1
 800d150:	e7f6      	b.n	800d140 <_strtod_l+0x270>
 800d152:	bf00      	nop
 800d154:	0800ef10 	.word	0x0800ef10
 800d158:	0800eef8 	.word	0x0800eef8
 800d15c:	7ff00000 	.word	0x7ff00000
 800d160:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d162:	1c54      	adds	r4, r2, #1
 800d164:	9411      	str	r4, [sp, #68]	@ 0x44
 800d166:	7852      	ldrb	r2, [r2, #1]
 800d168:	2a30      	cmp	r2, #48	@ 0x30
 800d16a:	d0f9      	beq.n	800d160 <_strtod_l+0x290>
 800d16c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d170:	2c08      	cmp	r4, #8
 800d172:	d881      	bhi.n	800d078 <_strtod_l+0x1a8>
 800d174:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d178:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d17a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d17c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d17e:	1c51      	adds	r1, r2, #1
 800d180:	9111      	str	r1, [sp, #68]	@ 0x44
 800d182:	7852      	ldrb	r2, [r2, #1]
 800d184:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d188:	2c09      	cmp	r4, #9
 800d18a:	d938      	bls.n	800d1fe <_strtod_l+0x32e>
 800d18c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d18e:	1b0c      	subs	r4, r1, r4
 800d190:	2c08      	cmp	r4, #8
 800d192:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d196:	dc02      	bgt.n	800d19e <_strtod_l+0x2ce>
 800d198:	4564      	cmp	r4, ip
 800d19a:	bfa8      	it	ge
 800d19c:	4664      	movge	r4, ip
 800d19e:	f1be 0f00 	cmp.w	lr, #0
 800d1a2:	d000      	beq.n	800d1a6 <_strtod_l+0x2d6>
 800d1a4:	4264      	negs	r4, r4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d14e      	bne.n	800d248 <_strtod_l+0x378>
 800d1aa:	9b07      	ldr	r3, [sp, #28]
 800d1ac:	4318      	orrs	r0, r3
 800d1ae:	f47f aeca 	bne.w	800cf46 <_strtod_l+0x76>
 800d1b2:	9b06      	ldr	r3, [sp, #24]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f47f aee2 	bne.w	800cf7e <_strtod_l+0xae>
 800d1ba:	2a69      	cmp	r2, #105	@ 0x69
 800d1bc:	d027      	beq.n	800d20e <_strtod_l+0x33e>
 800d1be:	dc24      	bgt.n	800d20a <_strtod_l+0x33a>
 800d1c0:	2a49      	cmp	r2, #73	@ 0x49
 800d1c2:	d024      	beq.n	800d20e <_strtod_l+0x33e>
 800d1c4:	2a4e      	cmp	r2, #78	@ 0x4e
 800d1c6:	f47f aeda 	bne.w	800cf7e <_strtod_l+0xae>
 800d1ca:	4997      	ldr	r1, [pc, #604]	@ (800d428 <_strtod_l+0x558>)
 800d1cc:	a811      	add	r0, sp, #68	@ 0x44
 800d1ce:	f001 f90f 	bl	800e3f0 <__match>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	f43f aed3 	beq.w	800cf7e <_strtod_l+0xae>
 800d1d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b28      	cmp	r3, #40	@ 0x28
 800d1de:	d12d      	bne.n	800d23c <_strtod_l+0x36c>
 800d1e0:	4992      	ldr	r1, [pc, #584]	@ (800d42c <_strtod_l+0x55c>)
 800d1e2:	aa14      	add	r2, sp, #80	@ 0x50
 800d1e4:	a811      	add	r0, sp, #68	@ 0x44
 800d1e6:	f001 f917 	bl	800e418 <__hexnan>
 800d1ea:	2805      	cmp	r0, #5
 800d1ec:	d126      	bne.n	800d23c <_strtod_l+0x36c>
 800d1ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d1f0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d1f4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d1f8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d1fc:	e6a3      	b.n	800cf46 <_strtod_l+0x76>
 800d1fe:	240a      	movs	r4, #10
 800d200:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d204:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d208:	e7b8      	b.n	800d17c <_strtod_l+0x2ac>
 800d20a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d20c:	e7db      	b.n	800d1c6 <_strtod_l+0x2f6>
 800d20e:	4988      	ldr	r1, [pc, #544]	@ (800d430 <_strtod_l+0x560>)
 800d210:	a811      	add	r0, sp, #68	@ 0x44
 800d212:	f001 f8ed 	bl	800e3f0 <__match>
 800d216:	2800      	cmp	r0, #0
 800d218:	f43f aeb1 	beq.w	800cf7e <_strtod_l+0xae>
 800d21c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d21e:	4985      	ldr	r1, [pc, #532]	@ (800d434 <_strtod_l+0x564>)
 800d220:	3b01      	subs	r3, #1
 800d222:	a811      	add	r0, sp, #68	@ 0x44
 800d224:	9311      	str	r3, [sp, #68]	@ 0x44
 800d226:	f001 f8e3 	bl	800e3f0 <__match>
 800d22a:	b910      	cbnz	r0, 800d232 <_strtod_l+0x362>
 800d22c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d22e:	3301      	adds	r3, #1
 800d230:	9311      	str	r3, [sp, #68]	@ 0x44
 800d232:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d448 <_strtod_l+0x578>
 800d236:	f04f 0a00 	mov.w	sl, #0
 800d23a:	e684      	b.n	800cf46 <_strtod_l+0x76>
 800d23c:	487e      	ldr	r0, [pc, #504]	@ (800d438 <_strtod_l+0x568>)
 800d23e:	f000 fe13 	bl	800de68 <nan>
 800d242:	ec5b ab10 	vmov	sl, fp, d0
 800d246:	e67e      	b.n	800cf46 <_strtod_l+0x76>
 800d248:	ee07 9a90 	vmov	s15, r9
 800d24c:	1be2      	subs	r2, r4, r7
 800d24e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d252:	2d00      	cmp	r5, #0
 800d254:	bf08      	it	eq
 800d256:	461d      	moveq	r5, r3
 800d258:	2b10      	cmp	r3, #16
 800d25a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d25c:	461a      	mov	r2, r3
 800d25e:	bfa8      	it	ge
 800d260:	2210      	movge	r2, #16
 800d262:	2b09      	cmp	r3, #9
 800d264:	ec5b ab17 	vmov	sl, fp, d7
 800d268:	dc15      	bgt.n	800d296 <_strtod_l+0x3c6>
 800d26a:	1be1      	subs	r1, r4, r7
 800d26c:	2900      	cmp	r1, #0
 800d26e:	f43f ae6a 	beq.w	800cf46 <_strtod_l+0x76>
 800d272:	eba4 0107 	sub.w	r1, r4, r7
 800d276:	dd72      	ble.n	800d35e <_strtod_l+0x48e>
 800d278:	2916      	cmp	r1, #22
 800d27a:	dc59      	bgt.n	800d330 <_strtod_l+0x460>
 800d27c:	4b6f      	ldr	r3, [pc, #444]	@ (800d43c <_strtod_l+0x56c>)
 800d27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d284:	ed93 7b00 	vldr	d7, [r3]
 800d288:	ec4b ab16 	vmov	d6, sl, fp
 800d28c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d290:	ec5b ab17 	vmov	sl, fp, d7
 800d294:	e657      	b.n	800cf46 <_strtod_l+0x76>
 800d296:	4969      	ldr	r1, [pc, #420]	@ (800d43c <_strtod_l+0x56c>)
 800d298:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d29c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d2a0:	ee06 6a90 	vmov	s13, r6
 800d2a4:	2b0f      	cmp	r3, #15
 800d2a6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d2aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d2ae:	ec5b ab16 	vmov	sl, fp, d6
 800d2b2:	ddda      	ble.n	800d26a <_strtod_l+0x39a>
 800d2b4:	1a9a      	subs	r2, r3, r2
 800d2b6:	1be1      	subs	r1, r4, r7
 800d2b8:	440a      	add	r2, r1
 800d2ba:	2a00      	cmp	r2, #0
 800d2bc:	f340 8094 	ble.w	800d3e8 <_strtod_l+0x518>
 800d2c0:	f012 000f 	ands.w	r0, r2, #15
 800d2c4:	d00a      	beq.n	800d2dc <_strtod_l+0x40c>
 800d2c6:	495d      	ldr	r1, [pc, #372]	@ (800d43c <_strtod_l+0x56c>)
 800d2c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d2cc:	ed91 7b00 	vldr	d7, [r1]
 800d2d0:	ec4b ab16 	vmov	d6, sl, fp
 800d2d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2d8:	ec5b ab17 	vmov	sl, fp, d7
 800d2dc:	f032 020f 	bics.w	r2, r2, #15
 800d2e0:	d073      	beq.n	800d3ca <_strtod_l+0x4fa>
 800d2e2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d2e6:	dd47      	ble.n	800d378 <_strtod_l+0x4a8>
 800d2e8:	2400      	movs	r4, #0
 800d2ea:	4625      	mov	r5, r4
 800d2ec:	9407      	str	r4, [sp, #28]
 800d2ee:	4626      	mov	r6, r4
 800d2f0:	9a05      	ldr	r2, [sp, #20]
 800d2f2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d448 <_strtod_l+0x578>
 800d2f6:	2322      	movs	r3, #34	@ 0x22
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	f04f 0a00 	mov.w	sl, #0
 800d2fe:	9b07      	ldr	r3, [sp, #28]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f43f ae20 	beq.w	800cf46 <_strtod_l+0x76>
 800d306:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d308:	9805      	ldr	r0, [sp, #20]
 800d30a:	f7ff f957 	bl	800c5bc <_Bfree>
 800d30e:	9805      	ldr	r0, [sp, #20]
 800d310:	4631      	mov	r1, r6
 800d312:	f7ff f953 	bl	800c5bc <_Bfree>
 800d316:	9805      	ldr	r0, [sp, #20]
 800d318:	4629      	mov	r1, r5
 800d31a:	f7ff f94f 	bl	800c5bc <_Bfree>
 800d31e:	9907      	ldr	r1, [sp, #28]
 800d320:	9805      	ldr	r0, [sp, #20]
 800d322:	f7ff f94b 	bl	800c5bc <_Bfree>
 800d326:	9805      	ldr	r0, [sp, #20]
 800d328:	4621      	mov	r1, r4
 800d32a:	f7ff f947 	bl	800c5bc <_Bfree>
 800d32e:	e60a      	b.n	800cf46 <_strtod_l+0x76>
 800d330:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d334:	1be0      	subs	r0, r4, r7
 800d336:	4281      	cmp	r1, r0
 800d338:	dbbc      	blt.n	800d2b4 <_strtod_l+0x3e4>
 800d33a:	4a40      	ldr	r2, [pc, #256]	@ (800d43c <_strtod_l+0x56c>)
 800d33c:	f1c3 030f 	rsb	r3, r3, #15
 800d340:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d344:	ed91 7b00 	vldr	d7, [r1]
 800d348:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d34a:	ec4b ab16 	vmov	d6, sl, fp
 800d34e:	1acb      	subs	r3, r1, r3
 800d350:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d354:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d358:	ed92 6b00 	vldr	d6, [r2]
 800d35c:	e796      	b.n	800d28c <_strtod_l+0x3bc>
 800d35e:	3116      	adds	r1, #22
 800d360:	dba8      	blt.n	800d2b4 <_strtod_l+0x3e4>
 800d362:	4b36      	ldr	r3, [pc, #216]	@ (800d43c <_strtod_l+0x56c>)
 800d364:	1b3c      	subs	r4, r7, r4
 800d366:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d36a:	ed94 7b00 	vldr	d7, [r4]
 800d36e:	ec4b ab16 	vmov	d6, sl, fp
 800d372:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d376:	e78b      	b.n	800d290 <_strtod_l+0x3c0>
 800d378:	2000      	movs	r0, #0
 800d37a:	ec4b ab17 	vmov	d7, sl, fp
 800d37e:	4e30      	ldr	r6, [pc, #192]	@ (800d440 <_strtod_l+0x570>)
 800d380:	1112      	asrs	r2, r2, #4
 800d382:	4601      	mov	r1, r0
 800d384:	2a01      	cmp	r2, #1
 800d386:	dc23      	bgt.n	800d3d0 <_strtod_l+0x500>
 800d388:	b108      	cbz	r0, 800d38e <_strtod_l+0x4be>
 800d38a:	ec5b ab17 	vmov	sl, fp, d7
 800d38e:	4a2c      	ldr	r2, [pc, #176]	@ (800d440 <_strtod_l+0x570>)
 800d390:	482c      	ldr	r0, [pc, #176]	@ (800d444 <_strtod_l+0x574>)
 800d392:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d396:	ed92 7b00 	vldr	d7, [r2]
 800d39a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d39e:	ec4b ab16 	vmov	d6, sl, fp
 800d3a2:	4a29      	ldr	r2, [pc, #164]	@ (800d448 <_strtod_l+0x578>)
 800d3a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3a8:	ee17 1a90 	vmov	r1, s15
 800d3ac:	400a      	ands	r2, r1
 800d3ae:	4282      	cmp	r2, r0
 800d3b0:	ec5b ab17 	vmov	sl, fp, d7
 800d3b4:	d898      	bhi.n	800d2e8 <_strtod_l+0x418>
 800d3b6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d3ba:	4282      	cmp	r2, r0
 800d3bc:	bf86      	itte	hi
 800d3be:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d44c <_strtod_l+0x57c>
 800d3c2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d3c6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	9206      	str	r2, [sp, #24]
 800d3ce:	e076      	b.n	800d4be <_strtod_l+0x5ee>
 800d3d0:	f012 0f01 	tst.w	r2, #1
 800d3d4:	d004      	beq.n	800d3e0 <_strtod_l+0x510>
 800d3d6:	ed96 6b00 	vldr	d6, [r6]
 800d3da:	2001      	movs	r0, #1
 800d3dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3e0:	3101      	adds	r1, #1
 800d3e2:	1052      	asrs	r2, r2, #1
 800d3e4:	3608      	adds	r6, #8
 800d3e6:	e7cd      	b.n	800d384 <_strtod_l+0x4b4>
 800d3e8:	d0ef      	beq.n	800d3ca <_strtod_l+0x4fa>
 800d3ea:	4252      	negs	r2, r2
 800d3ec:	f012 000f 	ands.w	r0, r2, #15
 800d3f0:	d00a      	beq.n	800d408 <_strtod_l+0x538>
 800d3f2:	4912      	ldr	r1, [pc, #72]	@ (800d43c <_strtod_l+0x56c>)
 800d3f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d3f8:	ed91 7b00 	vldr	d7, [r1]
 800d3fc:	ec4b ab16 	vmov	d6, sl, fp
 800d400:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d404:	ec5b ab17 	vmov	sl, fp, d7
 800d408:	1112      	asrs	r2, r2, #4
 800d40a:	d0de      	beq.n	800d3ca <_strtod_l+0x4fa>
 800d40c:	2a1f      	cmp	r2, #31
 800d40e:	dd1f      	ble.n	800d450 <_strtod_l+0x580>
 800d410:	2400      	movs	r4, #0
 800d412:	4625      	mov	r5, r4
 800d414:	9407      	str	r4, [sp, #28]
 800d416:	4626      	mov	r6, r4
 800d418:	9a05      	ldr	r2, [sp, #20]
 800d41a:	2322      	movs	r3, #34	@ 0x22
 800d41c:	f04f 0a00 	mov.w	sl, #0
 800d420:	f04f 0b00 	mov.w	fp, #0
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	e76a      	b.n	800d2fe <_strtod_l+0x42e>
 800d428:	0800ece6 	.word	0x0800ece6
 800d42c:	0800eefc 	.word	0x0800eefc
 800d430:	0800ecde 	.word	0x0800ecde
 800d434:	0800ed15 	.word	0x0800ed15
 800d438:	0800efa4 	.word	0x0800efa4
 800d43c:	0800ee30 	.word	0x0800ee30
 800d440:	0800ee08 	.word	0x0800ee08
 800d444:	7ca00000 	.word	0x7ca00000
 800d448:	7ff00000 	.word	0x7ff00000
 800d44c:	7fefffff 	.word	0x7fefffff
 800d450:	f012 0110 	ands.w	r1, r2, #16
 800d454:	bf18      	it	ne
 800d456:	216a      	movne	r1, #106	@ 0x6a
 800d458:	9106      	str	r1, [sp, #24]
 800d45a:	ec4b ab17 	vmov	d7, sl, fp
 800d45e:	49b0      	ldr	r1, [pc, #704]	@ (800d720 <_strtod_l+0x850>)
 800d460:	2000      	movs	r0, #0
 800d462:	07d6      	lsls	r6, r2, #31
 800d464:	d504      	bpl.n	800d470 <_strtod_l+0x5a0>
 800d466:	ed91 6b00 	vldr	d6, [r1]
 800d46a:	2001      	movs	r0, #1
 800d46c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d470:	1052      	asrs	r2, r2, #1
 800d472:	f101 0108 	add.w	r1, r1, #8
 800d476:	d1f4      	bne.n	800d462 <_strtod_l+0x592>
 800d478:	b108      	cbz	r0, 800d47e <_strtod_l+0x5ae>
 800d47a:	ec5b ab17 	vmov	sl, fp, d7
 800d47e:	9a06      	ldr	r2, [sp, #24]
 800d480:	b1b2      	cbz	r2, 800d4b0 <_strtod_l+0x5e0>
 800d482:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d486:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	4658      	mov	r0, fp
 800d48e:	dd0f      	ble.n	800d4b0 <_strtod_l+0x5e0>
 800d490:	2a1f      	cmp	r2, #31
 800d492:	dd55      	ble.n	800d540 <_strtod_l+0x670>
 800d494:	2a34      	cmp	r2, #52	@ 0x34
 800d496:	bfde      	ittt	le
 800d498:	f04f 32ff 	movle.w	r2, #4294967295
 800d49c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d4a0:	408a      	lslle	r2, r1
 800d4a2:	f04f 0a00 	mov.w	sl, #0
 800d4a6:	bfcc      	ite	gt
 800d4a8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d4ac:	ea02 0b00 	andle.w	fp, r2, r0
 800d4b0:	ec4b ab17 	vmov	d7, sl, fp
 800d4b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4bc:	d0a8      	beq.n	800d410 <_strtod_l+0x540>
 800d4be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4c0:	9805      	ldr	r0, [sp, #20]
 800d4c2:	f8cd 9000 	str.w	r9, [sp]
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	f7ff f8e0 	bl	800c68c <__s2b>
 800d4cc:	9007      	str	r0, [sp, #28]
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f43f af0a 	beq.w	800d2e8 <_strtod_l+0x418>
 800d4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d6:	1b3f      	subs	r7, r7, r4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bfb4      	ite	lt
 800d4dc:	463b      	movlt	r3, r7
 800d4de:	2300      	movge	r3, #0
 800d4e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800d710 <_strtod_l+0x840>
 800d4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d4ec:	2400      	movs	r4, #0
 800d4ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800d4f0:	4625      	mov	r5, r4
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	9805      	ldr	r0, [sp, #20]
 800d4f6:	6859      	ldr	r1, [r3, #4]
 800d4f8:	f7ff f820 	bl	800c53c <_Balloc>
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	2800      	cmp	r0, #0
 800d500:	f43f aef6 	beq.w	800d2f0 <_strtod_l+0x420>
 800d504:	9b07      	ldr	r3, [sp, #28]
 800d506:	691a      	ldr	r2, [r3, #16]
 800d508:	ec4b ab19 	vmov	d9, sl, fp
 800d50c:	3202      	adds	r2, #2
 800d50e:	f103 010c 	add.w	r1, r3, #12
 800d512:	0092      	lsls	r2, r2, #2
 800d514:	300c      	adds	r0, #12
 800d516:	f7fe f91e 	bl	800b756 <memcpy>
 800d51a:	eeb0 0b49 	vmov.f64	d0, d9
 800d51e:	9805      	ldr	r0, [sp, #20]
 800d520:	aa14      	add	r2, sp, #80	@ 0x50
 800d522:	a913      	add	r1, sp, #76	@ 0x4c
 800d524:	f7ff fbee 	bl	800cd04 <__d2b>
 800d528:	9012      	str	r0, [sp, #72]	@ 0x48
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f43f aee0 	beq.w	800d2f0 <_strtod_l+0x420>
 800d530:	9805      	ldr	r0, [sp, #20]
 800d532:	2101      	movs	r1, #1
 800d534:	f7ff f940 	bl	800c7b8 <__i2b>
 800d538:	4605      	mov	r5, r0
 800d53a:	b940      	cbnz	r0, 800d54e <_strtod_l+0x67e>
 800d53c:	2500      	movs	r5, #0
 800d53e:	e6d7      	b.n	800d2f0 <_strtod_l+0x420>
 800d540:	f04f 31ff 	mov.w	r1, #4294967295
 800d544:	fa01 f202 	lsl.w	r2, r1, r2
 800d548:	ea02 0a0a 	and.w	sl, r2, sl
 800d54c:	e7b0      	b.n	800d4b0 <_strtod_l+0x5e0>
 800d54e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d550:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d552:	2f00      	cmp	r7, #0
 800d554:	bfab      	itete	ge
 800d556:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d558:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d55a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d55e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d562:	bfac      	ite	ge
 800d564:	eb07 0903 	addge.w	r9, r7, r3
 800d568:	eba3 0807 	sublt.w	r8, r3, r7
 800d56c:	9b06      	ldr	r3, [sp, #24]
 800d56e:	1aff      	subs	r7, r7, r3
 800d570:	4417      	add	r7, r2
 800d572:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d576:	4a6b      	ldr	r2, [pc, #428]	@ (800d724 <_strtod_l+0x854>)
 800d578:	3f01      	subs	r7, #1
 800d57a:	4297      	cmp	r7, r2
 800d57c:	da51      	bge.n	800d622 <_strtod_l+0x752>
 800d57e:	1bd1      	subs	r1, r2, r7
 800d580:	291f      	cmp	r1, #31
 800d582:	eba3 0301 	sub.w	r3, r3, r1
 800d586:	f04f 0201 	mov.w	r2, #1
 800d58a:	dc3e      	bgt.n	800d60a <_strtod_l+0x73a>
 800d58c:	408a      	lsls	r2, r1
 800d58e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d590:	2200      	movs	r2, #0
 800d592:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d594:	eb09 0703 	add.w	r7, r9, r3
 800d598:	4498      	add	r8, r3
 800d59a:	9b06      	ldr	r3, [sp, #24]
 800d59c:	45b9      	cmp	r9, r7
 800d59e:	4498      	add	r8, r3
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	bfa8      	it	ge
 800d5a4:	463b      	movge	r3, r7
 800d5a6:	4543      	cmp	r3, r8
 800d5a8:	bfa8      	it	ge
 800d5aa:	4643      	movge	r3, r8
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	bfc2      	ittt	gt
 800d5b0:	1aff      	subgt	r7, r7, r3
 800d5b2:	eba8 0803 	subgt.w	r8, r8, r3
 800d5b6:	eba9 0903 	subgt.w	r9, r9, r3
 800d5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	dd16      	ble.n	800d5ee <_strtod_l+0x71e>
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	9805      	ldr	r0, [sp, #20]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	f7ff f9b7 	bl	800c938 <__pow5mult>
 800d5ca:	4605      	mov	r5, r0
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d0b5      	beq.n	800d53c <_strtod_l+0x66c>
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d5d4:	9805      	ldr	r0, [sp, #20]
 800d5d6:	f7ff f905 	bl	800c7e4 <__multiply>
 800d5da:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	f43f ae87 	beq.w	800d2f0 <_strtod_l+0x420>
 800d5e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d5e4:	9805      	ldr	r0, [sp, #20]
 800d5e6:	f7fe ffe9 	bl	800c5bc <_Bfree>
 800d5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ec:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5ee:	2f00      	cmp	r7, #0
 800d5f0:	dc1b      	bgt.n	800d62a <_strtod_l+0x75a>
 800d5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dd21      	ble.n	800d63c <_strtod_l+0x76c>
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5fc:	9805      	ldr	r0, [sp, #20]
 800d5fe:	f7ff f99b 	bl	800c938 <__pow5mult>
 800d602:	4606      	mov	r6, r0
 800d604:	b9d0      	cbnz	r0, 800d63c <_strtod_l+0x76c>
 800d606:	2600      	movs	r6, #0
 800d608:	e672      	b.n	800d2f0 <_strtod_l+0x420>
 800d60a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d60e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d612:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d616:	37e2      	adds	r7, #226	@ 0xe2
 800d618:	fa02 f107 	lsl.w	r1, r2, r7
 800d61c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d61e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d620:	e7b8      	b.n	800d594 <_strtod_l+0x6c4>
 800d622:	2200      	movs	r2, #0
 800d624:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d626:	2201      	movs	r2, #1
 800d628:	e7f9      	b.n	800d61e <_strtod_l+0x74e>
 800d62a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d62c:	9805      	ldr	r0, [sp, #20]
 800d62e:	463a      	mov	r2, r7
 800d630:	f7ff f9dc 	bl	800c9ec <__lshift>
 800d634:	9012      	str	r0, [sp, #72]	@ 0x48
 800d636:	2800      	cmp	r0, #0
 800d638:	d1db      	bne.n	800d5f2 <_strtod_l+0x722>
 800d63a:	e659      	b.n	800d2f0 <_strtod_l+0x420>
 800d63c:	f1b8 0f00 	cmp.w	r8, #0
 800d640:	dd07      	ble.n	800d652 <_strtod_l+0x782>
 800d642:	4631      	mov	r1, r6
 800d644:	9805      	ldr	r0, [sp, #20]
 800d646:	4642      	mov	r2, r8
 800d648:	f7ff f9d0 	bl	800c9ec <__lshift>
 800d64c:	4606      	mov	r6, r0
 800d64e:	2800      	cmp	r0, #0
 800d650:	d0d9      	beq.n	800d606 <_strtod_l+0x736>
 800d652:	f1b9 0f00 	cmp.w	r9, #0
 800d656:	dd08      	ble.n	800d66a <_strtod_l+0x79a>
 800d658:	4629      	mov	r1, r5
 800d65a:	9805      	ldr	r0, [sp, #20]
 800d65c:	464a      	mov	r2, r9
 800d65e:	f7ff f9c5 	bl	800c9ec <__lshift>
 800d662:	4605      	mov	r5, r0
 800d664:	2800      	cmp	r0, #0
 800d666:	f43f ae43 	beq.w	800d2f0 <_strtod_l+0x420>
 800d66a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d66c:	9805      	ldr	r0, [sp, #20]
 800d66e:	4632      	mov	r2, r6
 800d670:	f7ff fa44 	bl	800cafc <__mdiff>
 800d674:	4604      	mov	r4, r0
 800d676:	2800      	cmp	r0, #0
 800d678:	f43f ae3a 	beq.w	800d2f0 <_strtod_l+0x420>
 800d67c:	2300      	movs	r3, #0
 800d67e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800d682:	60c3      	str	r3, [r0, #12]
 800d684:	4629      	mov	r1, r5
 800d686:	f7ff fa1d 	bl	800cac4 <__mcmp>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	da4e      	bge.n	800d72c <_strtod_l+0x85c>
 800d68e:	ea58 080a 	orrs.w	r8, r8, sl
 800d692:	d174      	bne.n	800d77e <_strtod_l+0x8ae>
 800d694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d170      	bne.n	800d77e <_strtod_l+0x8ae>
 800d69c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6a0:	0d1b      	lsrs	r3, r3, #20
 800d6a2:	051b      	lsls	r3, r3, #20
 800d6a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6a8:	d969      	bls.n	800d77e <_strtod_l+0x8ae>
 800d6aa:	6963      	ldr	r3, [r4, #20]
 800d6ac:	b913      	cbnz	r3, 800d6b4 <_strtod_l+0x7e4>
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	dd64      	ble.n	800d77e <_strtod_l+0x8ae>
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	9805      	ldr	r0, [sp, #20]
 800d6ba:	f7ff f997 	bl	800c9ec <__lshift>
 800d6be:	4629      	mov	r1, r5
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	f7ff f9ff 	bl	800cac4 <__mcmp>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	dd59      	ble.n	800d77e <_strtod_l+0x8ae>
 800d6ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6ce:	9a06      	ldr	r2, [sp, #24]
 800d6d0:	0d1b      	lsrs	r3, r3, #20
 800d6d2:	051b      	lsls	r3, r3, #20
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	d070      	beq.n	800d7ba <_strtod_l+0x8ea>
 800d6d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6dc:	d86d      	bhi.n	800d7ba <_strtod_l+0x8ea>
 800d6de:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d6e2:	f67f ae99 	bls.w	800d418 <_strtod_l+0x548>
 800d6e6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800d718 <_strtod_l+0x848>
 800d6ea:	ec4b ab16 	vmov	d6, sl, fp
 800d6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d728 <_strtod_l+0x858>)
 800d6f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d6f4:	ee17 2a90 	vmov	r2, s15
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	ec5b ab17 	vmov	sl, fp, d7
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f47f ae01 	bne.w	800d306 <_strtod_l+0x436>
 800d704:	9a05      	ldr	r2, [sp, #20]
 800d706:	2322      	movs	r3, #34	@ 0x22
 800d708:	6013      	str	r3, [r2, #0]
 800d70a:	e5fc      	b.n	800d306 <_strtod_l+0x436>
 800d70c:	f3af 8000 	nop.w
 800d710:	ffc00000 	.word	0xffc00000
 800d714:	41dfffff 	.word	0x41dfffff
 800d718:	00000000 	.word	0x00000000
 800d71c:	39500000 	.word	0x39500000
 800d720:	0800ef28 	.word	0x0800ef28
 800d724:	fffffc02 	.word	0xfffffc02
 800d728:	7ff00000 	.word	0x7ff00000
 800d72c:	46d9      	mov	r9, fp
 800d72e:	d15d      	bne.n	800d7ec <_strtod_l+0x91c>
 800d730:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d734:	f1b8 0f00 	cmp.w	r8, #0
 800d738:	d02a      	beq.n	800d790 <_strtod_l+0x8c0>
 800d73a:	4aab      	ldr	r2, [pc, #684]	@ (800d9e8 <_strtod_l+0xb18>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d12a      	bne.n	800d796 <_strtod_l+0x8c6>
 800d740:	9b06      	ldr	r3, [sp, #24]
 800d742:	4652      	mov	r2, sl
 800d744:	b1fb      	cbz	r3, 800d786 <_strtod_l+0x8b6>
 800d746:	4ba9      	ldr	r3, [pc, #676]	@ (800d9ec <_strtod_l+0xb1c>)
 800d748:	ea0b 0303 	and.w	r3, fp, r3
 800d74c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d750:	f04f 31ff 	mov.w	r1, #4294967295
 800d754:	d81a      	bhi.n	800d78c <_strtod_l+0x8bc>
 800d756:	0d1b      	lsrs	r3, r3, #20
 800d758:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d75c:	fa01 f303 	lsl.w	r3, r1, r3
 800d760:	429a      	cmp	r2, r3
 800d762:	d118      	bne.n	800d796 <_strtod_l+0x8c6>
 800d764:	4ba2      	ldr	r3, [pc, #648]	@ (800d9f0 <_strtod_l+0xb20>)
 800d766:	4599      	cmp	r9, r3
 800d768:	d102      	bne.n	800d770 <_strtod_l+0x8a0>
 800d76a:	3201      	adds	r2, #1
 800d76c:	f43f adc0 	beq.w	800d2f0 <_strtod_l+0x420>
 800d770:	4b9e      	ldr	r3, [pc, #632]	@ (800d9ec <_strtod_l+0xb1c>)
 800d772:	ea09 0303 	and.w	r3, r9, r3
 800d776:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800d77a:	f04f 0a00 	mov.w	sl, #0
 800d77e:	9b06      	ldr	r3, [sp, #24]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1b0      	bne.n	800d6e6 <_strtod_l+0x816>
 800d784:	e5bf      	b.n	800d306 <_strtod_l+0x436>
 800d786:	f04f 33ff 	mov.w	r3, #4294967295
 800d78a:	e7e9      	b.n	800d760 <_strtod_l+0x890>
 800d78c:	460b      	mov	r3, r1
 800d78e:	e7e7      	b.n	800d760 <_strtod_l+0x890>
 800d790:	ea53 030a 	orrs.w	r3, r3, sl
 800d794:	d099      	beq.n	800d6ca <_strtod_l+0x7fa>
 800d796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d798:	b1c3      	cbz	r3, 800d7cc <_strtod_l+0x8fc>
 800d79a:	ea13 0f09 	tst.w	r3, r9
 800d79e:	d0ee      	beq.n	800d77e <_strtod_l+0x8ae>
 800d7a0:	9a06      	ldr	r2, [sp, #24]
 800d7a2:	4650      	mov	r0, sl
 800d7a4:	4659      	mov	r1, fp
 800d7a6:	f1b8 0f00 	cmp.w	r8, #0
 800d7aa:	d013      	beq.n	800d7d4 <_strtod_l+0x904>
 800d7ac:	f7ff fb75 	bl	800ce9a <sulp>
 800d7b0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800d7b4:	ec5b ab17 	vmov	sl, fp, d7
 800d7b8:	e7e1      	b.n	800d77e <_strtod_l+0x8ae>
 800d7ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d7be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7c6:	f04f 3aff 	mov.w	sl, #4294967295
 800d7ca:	e7d8      	b.n	800d77e <_strtod_l+0x8ae>
 800d7cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7ce:	ea13 0f0a 	tst.w	r3, sl
 800d7d2:	e7e4      	b.n	800d79e <_strtod_l+0x8ce>
 800d7d4:	f7ff fb61 	bl	800ce9a <sulp>
 800d7d8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800d7dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e4:	ec5b ab10 	vmov	sl, fp, d0
 800d7e8:	d1c9      	bne.n	800d77e <_strtod_l+0x8ae>
 800d7ea:	e615      	b.n	800d418 <_strtod_l+0x548>
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7ff fae0 	bl	800cdb4 <__ratio>
 800d7f4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800d7f8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d800:	d85d      	bhi.n	800d8be <_strtod_l+0x9ee>
 800d802:	f1b8 0f00 	cmp.w	r8, #0
 800d806:	d164      	bne.n	800d8d2 <_strtod_l+0xa02>
 800d808:	f1ba 0f00 	cmp.w	sl, #0
 800d80c:	d14b      	bne.n	800d8a6 <_strtod_l+0x9d6>
 800d80e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d812:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d160      	bne.n	800d8dc <_strtod_l+0xa0c>
 800d81a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800d81e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d826:	d401      	bmi.n	800d82c <_strtod_l+0x95c>
 800d828:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d82c:	eeb1 ab48 	vneg.f64	d10, d8
 800d830:	486e      	ldr	r0, [pc, #440]	@ (800d9ec <_strtod_l+0xb1c>)
 800d832:	4970      	ldr	r1, [pc, #448]	@ (800d9f4 <_strtod_l+0xb24>)
 800d834:	ea09 0700 	and.w	r7, r9, r0
 800d838:	428f      	cmp	r7, r1
 800d83a:	ec53 2b1a 	vmov	r2, r3, d10
 800d83e:	d17d      	bne.n	800d93c <_strtod_l+0xa6c>
 800d840:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800d844:	ec4b ab1c 	vmov	d12, sl, fp
 800d848:	eeb0 0b4c 	vmov.f64	d0, d12
 800d84c:	f7ff f9ea 	bl	800cc24 <__ulp>
 800d850:	4866      	ldr	r0, [pc, #408]	@ (800d9ec <_strtod_l+0xb1c>)
 800d852:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800d856:	ee1c 3a90 	vmov	r3, s25
 800d85a:	4a67      	ldr	r2, [pc, #412]	@ (800d9f8 <_strtod_l+0xb28>)
 800d85c:	ea03 0100 	and.w	r1, r3, r0
 800d860:	4291      	cmp	r1, r2
 800d862:	ec5b ab1c 	vmov	sl, fp, d12
 800d866:	d93c      	bls.n	800d8e2 <_strtod_l+0xa12>
 800d868:	ee19 2a90 	vmov	r2, s19
 800d86c:	4b60      	ldr	r3, [pc, #384]	@ (800d9f0 <_strtod_l+0xb20>)
 800d86e:	429a      	cmp	r2, r3
 800d870:	d104      	bne.n	800d87c <_strtod_l+0x9ac>
 800d872:	ee19 3a10 	vmov	r3, s18
 800d876:	3301      	adds	r3, #1
 800d878:	f43f ad3a 	beq.w	800d2f0 <_strtod_l+0x420>
 800d87c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800d9f0 <_strtod_l+0xb20>
 800d880:	f04f 3aff 	mov.w	sl, #4294967295
 800d884:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d886:	9805      	ldr	r0, [sp, #20]
 800d888:	f7fe fe98 	bl	800c5bc <_Bfree>
 800d88c:	9805      	ldr	r0, [sp, #20]
 800d88e:	4631      	mov	r1, r6
 800d890:	f7fe fe94 	bl	800c5bc <_Bfree>
 800d894:	9805      	ldr	r0, [sp, #20]
 800d896:	4629      	mov	r1, r5
 800d898:	f7fe fe90 	bl	800c5bc <_Bfree>
 800d89c:	9805      	ldr	r0, [sp, #20]
 800d89e:	4621      	mov	r1, r4
 800d8a0:	f7fe fe8c 	bl	800c5bc <_Bfree>
 800d8a4:	e625      	b.n	800d4f2 <_strtod_l+0x622>
 800d8a6:	f1ba 0f01 	cmp.w	sl, #1
 800d8aa:	d103      	bne.n	800d8b4 <_strtod_l+0x9e4>
 800d8ac:	f1bb 0f00 	cmp.w	fp, #0
 800d8b0:	f43f adb2 	beq.w	800d418 <_strtod_l+0x548>
 800d8b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d8b8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800d8bc:	e7b8      	b.n	800d830 <_strtod_l+0x960>
 800d8be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800d8c2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d8c6:	f1b8 0f00 	cmp.w	r8, #0
 800d8ca:	d0af      	beq.n	800d82c <_strtod_l+0x95c>
 800d8cc:	eeb0 ab48 	vmov.f64	d10, d8
 800d8d0:	e7ae      	b.n	800d830 <_strtod_l+0x960>
 800d8d2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800d8d6:	eeb0 8b4a 	vmov.f64	d8, d10
 800d8da:	e7a9      	b.n	800d830 <_strtod_l+0x960>
 800d8dc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800d8e0:	e7a6      	b.n	800d830 <_strtod_l+0x960>
 800d8e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d8e6:	9b06      	ldr	r3, [sp, #24]
 800d8e8:	46d9      	mov	r9, fp
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1ca      	bne.n	800d884 <_strtod_l+0x9b4>
 800d8ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8f2:	0d1b      	lsrs	r3, r3, #20
 800d8f4:	051b      	lsls	r3, r3, #20
 800d8f6:	429f      	cmp	r7, r3
 800d8f8:	d1c4      	bne.n	800d884 <_strtod_l+0x9b4>
 800d8fa:	ec51 0b18 	vmov	r0, r1, d8
 800d8fe:	f7f2 ff1b 	bl	8000738 <__aeabi_d2lz>
 800d902:	f7f2 fed3 	bl	80006ac <__aeabi_l2d>
 800d906:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800d90a:	ec41 0b17 	vmov	d7, r0, r1
 800d90e:	ea49 090a 	orr.w	r9, r9, sl
 800d912:	ea59 0908 	orrs.w	r9, r9, r8
 800d916:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d91a:	d03c      	beq.n	800d996 <_strtod_l+0xac6>
 800d91c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800d9d0 <_strtod_l+0xb00>
 800d920:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d928:	f53f aced 	bmi.w	800d306 <_strtod_l+0x436>
 800d92c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800d9d8 <_strtod_l+0xb08>
 800d930:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d938:	dda4      	ble.n	800d884 <_strtod_l+0x9b4>
 800d93a:	e4e4      	b.n	800d306 <_strtod_l+0x436>
 800d93c:	9906      	ldr	r1, [sp, #24]
 800d93e:	b1e1      	cbz	r1, 800d97a <_strtod_l+0xaaa>
 800d940:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800d944:	d819      	bhi.n	800d97a <_strtod_l+0xaaa>
 800d946:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94e:	d811      	bhi.n	800d974 <_strtod_l+0xaa4>
 800d950:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800d954:	ee18 3a10 	vmov	r3, s16
 800d958:	2b01      	cmp	r3, #1
 800d95a:	bf38      	it	cc
 800d95c:	2301      	movcc	r3, #1
 800d95e:	ee08 3a10 	vmov	s16, r3
 800d962:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800d966:	f1b8 0f00 	cmp.w	r8, #0
 800d96a:	d111      	bne.n	800d990 <_strtod_l+0xac0>
 800d96c:	eeb1 7b48 	vneg.f64	d7, d8
 800d970:	ec53 2b17 	vmov	r2, r3, d7
 800d974:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800d978:	1bcb      	subs	r3, r1, r7
 800d97a:	eeb0 0b49 	vmov.f64	d0, d9
 800d97e:	ec43 2b1a 	vmov	d10, r2, r3
 800d982:	f7ff f94f 	bl	800cc24 <__ulp>
 800d986:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800d98a:	ec5b ab19 	vmov	sl, fp, d9
 800d98e:	e7aa      	b.n	800d8e6 <_strtod_l+0xa16>
 800d990:	eeb0 7b48 	vmov.f64	d7, d8
 800d994:	e7ec      	b.n	800d970 <_strtod_l+0xaa0>
 800d996:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800d9e0 <_strtod_l+0xb10>
 800d99a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a2:	f57f af6f 	bpl.w	800d884 <_strtod_l+0x9b4>
 800d9a6:	e4ae      	b.n	800d306 <_strtod_l+0x436>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	9308      	str	r3, [sp, #32]
 800d9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	f7ff bacc 	b.w	800cf4e <_strtod_l+0x7e>
 800d9b6:	2a65      	cmp	r2, #101	@ 0x65
 800d9b8:	f43f abbc 	beq.w	800d134 <_strtod_l+0x264>
 800d9bc:	2a45      	cmp	r2, #69	@ 0x45
 800d9be:	f43f abb9 	beq.w	800d134 <_strtod_l+0x264>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	9306      	str	r3, [sp, #24]
 800d9c6:	f7ff bbf0 	b.w	800d1aa <_strtod_l+0x2da>
 800d9ca:	bf00      	nop
 800d9cc:	f3af 8000 	nop.w
 800d9d0:	94a03595 	.word	0x94a03595
 800d9d4:	3fdfffff 	.word	0x3fdfffff
 800d9d8:	35afe535 	.word	0x35afe535
 800d9dc:	3fe00000 	.word	0x3fe00000
 800d9e0:	94a03595 	.word	0x94a03595
 800d9e4:	3fcfffff 	.word	0x3fcfffff
 800d9e8:	000fffff 	.word	0x000fffff
 800d9ec:	7ff00000 	.word	0x7ff00000
 800d9f0:	7fefffff 	.word	0x7fefffff
 800d9f4:	7fe00000 	.word	0x7fe00000
 800d9f8:	7c9fffff 	.word	0x7c9fffff

0800d9fc <_strtod_r>:
 800d9fc:	4b01      	ldr	r3, [pc, #4]	@ (800da04 <_strtod_r+0x8>)
 800d9fe:	f7ff ba67 	b.w	800ced0 <_strtod_l>
 800da02:	bf00      	nop
 800da04:	2400006c 	.word	0x2400006c

0800da08 <__ssputs_r>:
 800da08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da0c:	688e      	ldr	r6, [r1, #8]
 800da0e:	461f      	mov	r7, r3
 800da10:	42be      	cmp	r6, r7
 800da12:	680b      	ldr	r3, [r1, #0]
 800da14:	4682      	mov	sl, r0
 800da16:	460c      	mov	r4, r1
 800da18:	4690      	mov	r8, r2
 800da1a:	d82d      	bhi.n	800da78 <__ssputs_r+0x70>
 800da1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da24:	d026      	beq.n	800da74 <__ssputs_r+0x6c>
 800da26:	6965      	ldr	r5, [r4, #20]
 800da28:	6909      	ldr	r1, [r1, #16]
 800da2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da2e:	eba3 0901 	sub.w	r9, r3, r1
 800da32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da36:	1c7b      	adds	r3, r7, #1
 800da38:	444b      	add	r3, r9
 800da3a:	106d      	asrs	r5, r5, #1
 800da3c:	429d      	cmp	r5, r3
 800da3e:	bf38      	it	cc
 800da40:	461d      	movcc	r5, r3
 800da42:	0553      	lsls	r3, r2, #21
 800da44:	d527      	bpl.n	800da96 <__ssputs_r+0x8e>
 800da46:	4629      	mov	r1, r5
 800da48:	f7fe fcec 	bl	800c424 <_malloc_r>
 800da4c:	4606      	mov	r6, r0
 800da4e:	b360      	cbz	r0, 800daaa <__ssputs_r+0xa2>
 800da50:	6921      	ldr	r1, [r4, #16]
 800da52:	464a      	mov	r2, r9
 800da54:	f7fd fe7f 	bl	800b756 <memcpy>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	6126      	str	r6, [r4, #16]
 800da66:	6165      	str	r5, [r4, #20]
 800da68:	444e      	add	r6, r9
 800da6a:	eba5 0509 	sub.w	r5, r5, r9
 800da6e:	6026      	str	r6, [r4, #0]
 800da70:	60a5      	str	r5, [r4, #8]
 800da72:	463e      	mov	r6, r7
 800da74:	42be      	cmp	r6, r7
 800da76:	d900      	bls.n	800da7a <__ssputs_r+0x72>
 800da78:	463e      	mov	r6, r7
 800da7a:	6820      	ldr	r0, [r4, #0]
 800da7c:	4632      	mov	r2, r6
 800da7e:	4641      	mov	r1, r8
 800da80:	f000 f9c6 	bl	800de10 <memmove>
 800da84:	68a3      	ldr	r3, [r4, #8]
 800da86:	1b9b      	subs	r3, r3, r6
 800da88:	60a3      	str	r3, [r4, #8]
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	4433      	add	r3, r6
 800da8e:	6023      	str	r3, [r4, #0]
 800da90:	2000      	movs	r0, #0
 800da92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da96:	462a      	mov	r2, r5
 800da98:	f000 fd6b 	bl	800e572 <_realloc_r>
 800da9c:	4606      	mov	r6, r0
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d1e0      	bne.n	800da64 <__ssputs_r+0x5c>
 800daa2:	6921      	ldr	r1, [r4, #16]
 800daa4:	4650      	mov	r0, sl
 800daa6:	f7fe fc49 	bl	800c33c <_free_r>
 800daaa:	230c      	movs	r3, #12
 800daac:	f8ca 3000 	str.w	r3, [sl]
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dab6:	81a3      	strh	r3, [r4, #12]
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295
 800dabc:	e7e9      	b.n	800da92 <__ssputs_r+0x8a>
	...

0800dac0 <_svfiprintf_r>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	4698      	mov	r8, r3
 800dac6:	898b      	ldrh	r3, [r1, #12]
 800dac8:	061b      	lsls	r3, r3, #24
 800daca:	b09d      	sub	sp, #116	@ 0x74
 800dacc:	4607      	mov	r7, r0
 800dace:	460d      	mov	r5, r1
 800dad0:	4614      	mov	r4, r2
 800dad2:	d510      	bpl.n	800daf6 <_svfiprintf_r+0x36>
 800dad4:	690b      	ldr	r3, [r1, #16]
 800dad6:	b973      	cbnz	r3, 800daf6 <_svfiprintf_r+0x36>
 800dad8:	2140      	movs	r1, #64	@ 0x40
 800dada:	f7fe fca3 	bl	800c424 <_malloc_r>
 800dade:	6028      	str	r0, [r5, #0]
 800dae0:	6128      	str	r0, [r5, #16]
 800dae2:	b930      	cbnz	r0, 800daf2 <_svfiprintf_r+0x32>
 800dae4:	230c      	movs	r3, #12
 800dae6:	603b      	str	r3, [r7, #0]
 800dae8:	f04f 30ff 	mov.w	r0, #4294967295
 800daec:	b01d      	add	sp, #116	@ 0x74
 800daee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf2:	2340      	movs	r3, #64	@ 0x40
 800daf4:	616b      	str	r3, [r5, #20]
 800daf6:	2300      	movs	r3, #0
 800daf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dafa:	2320      	movs	r3, #32
 800dafc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db00:	f8cd 800c 	str.w	r8, [sp, #12]
 800db04:	2330      	movs	r3, #48	@ 0x30
 800db06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dca4 <_svfiprintf_r+0x1e4>
 800db0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db0e:	f04f 0901 	mov.w	r9, #1
 800db12:	4623      	mov	r3, r4
 800db14:	469a      	mov	sl, r3
 800db16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db1a:	b10a      	cbz	r2, 800db20 <_svfiprintf_r+0x60>
 800db1c:	2a25      	cmp	r2, #37	@ 0x25
 800db1e:	d1f9      	bne.n	800db14 <_svfiprintf_r+0x54>
 800db20:	ebba 0b04 	subs.w	fp, sl, r4
 800db24:	d00b      	beq.n	800db3e <_svfiprintf_r+0x7e>
 800db26:	465b      	mov	r3, fp
 800db28:	4622      	mov	r2, r4
 800db2a:	4629      	mov	r1, r5
 800db2c:	4638      	mov	r0, r7
 800db2e:	f7ff ff6b 	bl	800da08 <__ssputs_r>
 800db32:	3001      	adds	r0, #1
 800db34:	f000 80a7 	beq.w	800dc86 <_svfiprintf_r+0x1c6>
 800db38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db3a:	445a      	add	r2, fp
 800db3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800db3e:	f89a 3000 	ldrb.w	r3, [sl]
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 809f 	beq.w	800dc86 <_svfiprintf_r+0x1c6>
 800db48:	2300      	movs	r3, #0
 800db4a:	f04f 32ff 	mov.w	r2, #4294967295
 800db4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db52:	f10a 0a01 	add.w	sl, sl, #1
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	9307      	str	r3, [sp, #28]
 800db5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800db60:	4654      	mov	r4, sl
 800db62:	2205      	movs	r2, #5
 800db64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db68:	484e      	ldr	r0, [pc, #312]	@ (800dca4 <_svfiprintf_r+0x1e4>)
 800db6a:	f7f2 fbb9 	bl	80002e0 <memchr>
 800db6e:	9a04      	ldr	r2, [sp, #16]
 800db70:	b9d8      	cbnz	r0, 800dbaa <_svfiprintf_r+0xea>
 800db72:	06d0      	lsls	r0, r2, #27
 800db74:	bf44      	itt	mi
 800db76:	2320      	movmi	r3, #32
 800db78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db7c:	0711      	lsls	r1, r2, #28
 800db7e:	bf44      	itt	mi
 800db80:	232b      	movmi	r3, #43	@ 0x2b
 800db82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db86:	f89a 3000 	ldrb.w	r3, [sl]
 800db8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800db8c:	d015      	beq.n	800dbba <_svfiprintf_r+0xfa>
 800db8e:	9a07      	ldr	r2, [sp, #28]
 800db90:	4654      	mov	r4, sl
 800db92:	2000      	movs	r0, #0
 800db94:	f04f 0c0a 	mov.w	ip, #10
 800db98:	4621      	mov	r1, r4
 800db9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db9e:	3b30      	subs	r3, #48	@ 0x30
 800dba0:	2b09      	cmp	r3, #9
 800dba2:	d94b      	bls.n	800dc3c <_svfiprintf_r+0x17c>
 800dba4:	b1b0      	cbz	r0, 800dbd4 <_svfiprintf_r+0x114>
 800dba6:	9207      	str	r2, [sp, #28]
 800dba8:	e014      	b.n	800dbd4 <_svfiprintf_r+0x114>
 800dbaa:	eba0 0308 	sub.w	r3, r0, r8
 800dbae:	fa09 f303 	lsl.w	r3, r9, r3
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	9304      	str	r3, [sp, #16]
 800dbb6:	46a2      	mov	sl, r4
 800dbb8:	e7d2      	b.n	800db60 <_svfiprintf_r+0xa0>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	1d19      	adds	r1, r3, #4
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	9103      	str	r1, [sp, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	bfbb      	ittet	lt
 800dbc6:	425b      	neglt	r3, r3
 800dbc8:	f042 0202 	orrlt.w	r2, r2, #2
 800dbcc:	9307      	strge	r3, [sp, #28]
 800dbce:	9307      	strlt	r3, [sp, #28]
 800dbd0:	bfb8      	it	lt
 800dbd2:	9204      	strlt	r2, [sp, #16]
 800dbd4:	7823      	ldrb	r3, [r4, #0]
 800dbd6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbd8:	d10a      	bne.n	800dbf0 <_svfiprintf_r+0x130>
 800dbda:	7863      	ldrb	r3, [r4, #1]
 800dbdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbde:	d132      	bne.n	800dc46 <_svfiprintf_r+0x186>
 800dbe0:	9b03      	ldr	r3, [sp, #12]
 800dbe2:	1d1a      	adds	r2, r3, #4
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	9203      	str	r2, [sp, #12]
 800dbe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbec:	3402      	adds	r4, #2
 800dbee:	9305      	str	r3, [sp, #20]
 800dbf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dcb4 <_svfiprintf_r+0x1f4>
 800dbf4:	7821      	ldrb	r1, [r4, #0]
 800dbf6:	2203      	movs	r2, #3
 800dbf8:	4650      	mov	r0, sl
 800dbfa:	f7f2 fb71 	bl	80002e0 <memchr>
 800dbfe:	b138      	cbz	r0, 800dc10 <_svfiprintf_r+0x150>
 800dc00:	9b04      	ldr	r3, [sp, #16]
 800dc02:	eba0 000a 	sub.w	r0, r0, sl
 800dc06:	2240      	movs	r2, #64	@ 0x40
 800dc08:	4082      	lsls	r2, r0
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	3401      	adds	r4, #1
 800dc0e:	9304      	str	r3, [sp, #16]
 800dc10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc14:	4824      	ldr	r0, [pc, #144]	@ (800dca8 <_svfiprintf_r+0x1e8>)
 800dc16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc1a:	2206      	movs	r2, #6
 800dc1c:	f7f2 fb60 	bl	80002e0 <memchr>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d036      	beq.n	800dc92 <_svfiprintf_r+0x1d2>
 800dc24:	4b21      	ldr	r3, [pc, #132]	@ (800dcac <_svfiprintf_r+0x1ec>)
 800dc26:	bb1b      	cbnz	r3, 800dc70 <_svfiprintf_r+0x1b0>
 800dc28:	9b03      	ldr	r3, [sp, #12]
 800dc2a:	3307      	adds	r3, #7
 800dc2c:	f023 0307 	bic.w	r3, r3, #7
 800dc30:	3308      	adds	r3, #8
 800dc32:	9303      	str	r3, [sp, #12]
 800dc34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc36:	4433      	add	r3, r6
 800dc38:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc3a:	e76a      	b.n	800db12 <_svfiprintf_r+0x52>
 800dc3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc40:	460c      	mov	r4, r1
 800dc42:	2001      	movs	r0, #1
 800dc44:	e7a8      	b.n	800db98 <_svfiprintf_r+0xd8>
 800dc46:	2300      	movs	r3, #0
 800dc48:	3401      	adds	r4, #1
 800dc4a:	9305      	str	r3, [sp, #20]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	f04f 0c0a 	mov.w	ip, #10
 800dc52:	4620      	mov	r0, r4
 800dc54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc58:	3a30      	subs	r2, #48	@ 0x30
 800dc5a:	2a09      	cmp	r2, #9
 800dc5c:	d903      	bls.n	800dc66 <_svfiprintf_r+0x1a6>
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0c6      	beq.n	800dbf0 <_svfiprintf_r+0x130>
 800dc62:	9105      	str	r1, [sp, #20]
 800dc64:	e7c4      	b.n	800dbf0 <_svfiprintf_r+0x130>
 800dc66:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e7f0      	b.n	800dc52 <_svfiprintf_r+0x192>
 800dc70:	ab03      	add	r3, sp, #12
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	462a      	mov	r2, r5
 800dc76:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb0 <_svfiprintf_r+0x1f0>)
 800dc78:	a904      	add	r1, sp, #16
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	f7fc fdcc 	bl	800a818 <_printf_float>
 800dc80:	1c42      	adds	r2, r0, #1
 800dc82:	4606      	mov	r6, r0
 800dc84:	d1d6      	bne.n	800dc34 <_svfiprintf_r+0x174>
 800dc86:	89ab      	ldrh	r3, [r5, #12]
 800dc88:	065b      	lsls	r3, r3, #25
 800dc8a:	f53f af2d 	bmi.w	800dae8 <_svfiprintf_r+0x28>
 800dc8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc90:	e72c      	b.n	800daec <_svfiprintf_r+0x2c>
 800dc92:	ab03      	add	r3, sp, #12
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	462a      	mov	r2, r5
 800dc98:	4b05      	ldr	r3, [pc, #20]	@ (800dcb0 <_svfiprintf_r+0x1f0>)
 800dc9a:	a904      	add	r1, sp, #16
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	f7fd f843 	bl	800ad28 <_printf_i>
 800dca2:	e7ed      	b.n	800dc80 <_svfiprintf_r+0x1c0>
 800dca4:	0800ef50 	.word	0x0800ef50
 800dca8:	0800ef5a 	.word	0x0800ef5a
 800dcac:	0800a819 	.word	0x0800a819
 800dcb0:	0800da09 	.word	0x0800da09
 800dcb4:	0800ef56 	.word	0x0800ef56

0800dcb8 <__sflush_r>:
 800dcb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc0:	0716      	lsls	r6, r2, #28
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	d454      	bmi.n	800dd72 <__sflush_r+0xba>
 800dcc8:	684b      	ldr	r3, [r1, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	dc02      	bgt.n	800dcd4 <__sflush_r+0x1c>
 800dcce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dd48      	ble.n	800dd66 <__sflush_r+0xae>
 800dcd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcd6:	2e00      	cmp	r6, #0
 800dcd8:	d045      	beq.n	800dd66 <__sflush_r+0xae>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dce0:	682f      	ldr	r7, [r5, #0]
 800dce2:	6a21      	ldr	r1, [r4, #32]
 800dce4:	602b      	str	r3, [r5, #0]
 800dce6:	d030      	beq.n	800dd4a <__sflush_r+0x92>
 800dce8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	0759      	lsls	r1, r3, #29
 800dcee:	d505      	bpl.n	800dcfc <__sflush_r+0x44>
 800dcf0:	6863      	ldr	r3, [r4, #4]
 800dcf2:	1ad2      	subs	r2, r2, r3
 800dcf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcf6:	b10b      	cbz	r3, 800dcfc <__sflush_r+0x44>
 800dcf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcfa:	1ad2      	subs	r2, r2, r3
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd00:	6a21      	ldr	r1, [r4, #32]
 800dd02:	4628      	mov	r0, r5
 800dd04:	47b0      	blx	r6
 800dd06:	1c43      	adds	r3, r0, #1
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	d106      	bne.n	800dd1a <__sflush_r+0x62>
 800dd0c:	6829      	ldr	r1, [r5, #0]
 800dd0e:	291d      	cmp	r1, #29
 800dd10:	d82b      	bhi.n	800dd6a <__sflush_r+0xb2>
 800dd12:	4a2a      	ldr	r2, [pc, #168]	@ (800ddbc <__sflush_r+0x104>)
 800dd14:	410a      	asrs	r2, r1
 800dd16:	07d6      	lsls	r6, r2, #31
 800dd18:	d427      	bmi.n	800dd6a <__sflush_r+0xb2>
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	6062      	str	r2, [r4, #4]
 800dd1e:	04d9      	lsls	r1, r3, #19
 800dd20:	6922      	ldr	r2, [r4, #16]
 800dd22:	6022      	str	r2, [r4, #0]
 800dd24:	d504      	bpl.n	800dd30 <__sflush_r+0x78>
 800dd26:	1c42      	adds	r2, r0, #1
 800dd28:	d101      	bne.n	800dd2e <__sflush_r+0x76>
 800dd2a:	682b      	ldr	r3, [r5, #0]
 800dd2c:	b903      	cbnz	r3, 800dd30 <__sflush_r+0x78>
 800dd2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd32:	602f      	str	r7, [r5, #0]
 800dd34:	b1b9      	cbz	r1, 800dd66 <__sflush_r+0xae>
 800dd36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd3a:	4299      	cmp	r1, r3
 800dd3c:	d002      	beq.n	800dd44 <__sflush_r+0x8c>
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f7fe fafc 	bl	800c33c <_free_r>
 800dd44:	2300      	movs	r3, #0
 800dd46:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd48:	e00d      	b.n	800dd66 <__sflush_r+0xae>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	47b0      	blx	r6
 800dd50:	4602      	mov	r2, r0
 800dd52:	1c50      	adds	r0, r2, #1
 800dd54:	d1c9      	bne.n	800dcea <__sflush_r+0x32>
 800dd56:	682b      	ldr	r3, [r5, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d0c6      	beq.n	800dcea <__sflush_r+0x32>
 800dd5c:	2b1d      	cmp	r3, #29
 800dd5e:	d001      	beq.n	800dd64 <__sflush_r+0xac>
 800dd60:	2b16      	cmp	r3, #22
 800dd62:	d11e      	bne.n	800dda2 <__sflush_r+0xea>
 800dd64:	602f      	str	r7, [r5, #0]
 800dd66:	2000      	movs	r0, #0
 800dd68:	e022      	b.n	800ddb0 <__sflush_r+0xf8>
 800dd6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd6e:	b21b      	sxth	r3, r3
 800dd70:	e01b      	b.n	800ddaa <__sflush_r+0xf2>
 800dd72:	690f      	ldr	r7, [r1, #16]
 800dd74:	2f00      	cmp	r7, #0
 800dd76:	d0f6      	beq.n	800dd66 <__sflush_r+0xae>
 800dd78:	0793      	lsls	r3, r2, #30
 800dd7a:	680e      	ldr	r6, [r1, #0]
 800dd7c:	bf08      	it	eq
 800dd7e:	694b      	ldreq	r3, [r1, #20]
 800dd80:	600f      	str	r7, [r1, #0]
 800dd82:	bf18      	it	ne
 800dd84:	2300      	movne	r3, #0
 800dd86:	eba6 0807 	sub.w	r8, r6, r7
 800dd8a:	608b      	str	r3, [r1, #8]
 800dd8c:	f1b8 0f00 	cmp.w	r8, #0
 800dd90:	dde9      	ble.n	800dd66 <__sflush_r+0xae>
 800dd92:	6a21      	ldr	r1, [r4, #32]
 800dd94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd96:	4643      	mov	r3, r8
 800dd98:	463a      	mov	r2, r7
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	47b0      	blx	r6
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	dc08      	bgt.n	800ddb4 <__sflush_r+0xfc>
 800dda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddaa:	81a3      	strh	r3, [r4, #12]
 800ddac:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	4407      	add	r7, r0
 800ddb6:	eba8 0800 	sub.w	r8, r8, r0
 800ddba:	e7e7      	b.n	800dd8c <__sflush_r+0xd4>
 800ddbc:	dfbffffe 	.word	0xdfbffffe

0800ddc0 <_fflush_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	690b      	ldr	r3, [r1, #16]
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	b913      	cbnz	r3, 800ddd0 <_fflush_r+0x10>
 800ddca:	2500      	movs	r5, #0
 800ddcc:	4628      	mov	r0, r5
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	b118      	cbz	r0, 800ddda <_fflush_r+0x1a>
 800ddd2:	6a03      	ldr	r3, [r0, #32]
 800ddd4:	b90b      	cbnz	r3, 800ddda <_fflush_r+0x1a>
 800ddd6:	f7fd fb5f 	bl	800b498 <__sinit>
 800ddda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d0f3      	beq.n	800ddca <_fflush_r+0xa>
 800dde2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dde4:	07d0      	lsls	r0, r2, #31
 800dde6:	d404      	bmi.n	800ddf2 <_fflush_r+0x32>
 800dde8:	0599      	lsls	r1, r3, #22
 800ddea:	d402      	bmi.n	800ddf2 <_fflush_r+0x32>
 800ddec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddee:	f7fd fcb0 	bl	800b752 <__retarget_lock_acquire_recursive>
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	f7ff ff5f 	bl	800dcb8 <__sflush_r>
 800ddfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddfc:	07da      	lsls	r2, r3, #31
 800ddfe:	4605      	mov	r5, r0
 800de00:	d4e4      	bmi.n	800ddcc <_fflush_r+0xc>
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	059b      	lsls	r3, r3, #22
 800de06:	d4e1      	bmi.n	800ddcc <_fflush_r+0xc>
 800de08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de0a:	f7fd fca3 	bl	800b754 <__retarget_lock_release_recursive>
 800de0e:	e7dd      	b.n	800ddcc <_fflush_r+0xc>

0800de10 <memmove>:
 800de10:	4288      	cmp	r0, r1
 800de12:	b510      	push	{r4, lr}
 800de14:	eb01 0402 	add.w	r4, r1, r2
 800de18:	d902      	bls.n	800de20 <memmove+0x10>
 800de1a:	4284      	cmp	r4, r0
 800de1c:	4623      	mov	r3, r4
 800de1e:	d807      	bhi.n	800de30 <memmove+0x20>
 800de20:	1e43      	subs	r3, r0, #1
 800de22:	42a1      	cmp	r1, r4
 800de24:	d008      	beq.n	800de38 <memmove+0x28>
 800de26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de2e:	e7f8      	b.n	800de22 <memmove+0x12>
 800de30:	4402      	add	r2, r0
 800de32:	4601      	mov	r1, r0
 800de34:	428a      	cmp	r2, r1
 800de36:	d100      	bne.n	800de3a <memmove+0x2a>
 800de38:	bd10      	pop	{r4, pc}
 800de3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de42:	e7f7      	b.n	800de34 <memmove+0x24>

0800de44 <_sbrk_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d06      	ldr	r5, [pc, #24]	@ (800de60 <_sbrk_r+0x1c>)
 800de48:	2300      	movs	r3, #0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	f7f3 fba4 	bl	800159c <_sbrk>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d102      	bne.n	800de5e <_sbrk_r+0x1a>
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	b103      	cbz	r3, 800de5e <_sbrk_r+0x1a>
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	240004d0 	.word	0x240004d0
 800de64:	00000000 	.word	0x00000000

0800de68 <nan>:
 800de68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de70 <nan+0x8>
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	00000000 	.word	0x00000000
 800de74:	7ff80000 	.word	0x7ff80000

0800de78 <__assert_func>:
 800de78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de7a:	4614      	mov	r4, r2
 800de7c:	461a      	mov	r2, r3
 800de7e:	4b09      	ldr	r3, [pc, #36]	@ (800dea4 <__assert_func+0x2c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4605      	mov	r5, r0
 800de84:	68d8      	ldr	r0, [r3, #12]
 800de86:	b954      	cbnz	r4, 800de9e <__assert_func+0x26>
 800de88:	4b07      	ldr	r3, [pc, #28]	@ (800dea8 <__assert_func+0x30>)
 800de8a:	461c      	mov	r4, r3
 800de8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de90:	9100      	str	r1, [sp, #0]
 800de92:	462b      	mov	r3, r5
 800de94:	4905      	ldr	r1, [pc, #20]	@ (800deac <__assert_func+0x34>)
 800de96:	f000 fba7 	bl	800e5e8 <fiprintf>
 800de9a:	f000 fbb7 	bl	800e60c <abort>
 800de9e:	4b04      	ldr	r3, [pc, #16]	@ (800deb0 <__assert_func+0x38>)
 800dea0:	e7f4      	b.n	800de8c <__assert_func+0x14>
 800dea2:	bf00      	nop
 800dea4:	2400001c 	.word	0x2400001c
 800dea8:	0800efa4 	.word	0x0800efa4
 800deac:	0800ef76 	.word	0x0800ef76
 800deb0:	0800ef69 	.word	0x0800ef69

0800deb4 <_calloc_r>:
 800deb4:	b570      	push	{r4, r5, r6, lr}
 800deb6:	fba1 5402 	umull	r5, r4, r1, r2
 800deba:	b93c      	cbnz	r4, 800decc <_calloc_r+0x18>
 800debc:	4629      	mov	r1, r5
 800debe:	f7fe fab1 	bl	800c424 <_malloc_r>
 800dec2:	4606      	mov	r6, r0
 800dec4:	b928      	cbnz	r0, 800ded2 <_calloc_r+0x1e>
 800dec6:	2600      	movs	r6, #0
 800dec8:	4630      	mov	r0, r6
 800deca:	bd70      	pop	{r4, r5, r6, pc}
 800decc:	220c      	movs	r2, #12
 800dece:	6002      	str	r2, [r0, #0]
 800ded0:	e7f9      	b.n	800dec6 <_calloc_r+0x12>
 800ded2:	462a      	mov	r2, r5
 800ded4:	4621      	mov	r1, r4
 800ded6:	f7fd fbac 	bl	800b632 <memset>
 800deda:	e7f5      	b.n	800dec8 <_calloc_r+0x14>

0800dedc <rshift>:
 800dedc:	6903      	ldr	r3, [r0, #16]
 800dede:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800deea:	f100 0414 	add.w	r4, r0, #20
 800deee:	dd45      	ble.n	800df7c <rshift+0xa0>
 800def0:	f011 011f 	ands.w	r1, r1, #31
 800def4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800def8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800defc:	d10c      	bne.n	800df18 <rshift+0x3c>
 800defe:	f100 0710 	add.w	r7, r0, #16
 800df02:	4629      	mov	r1, r5
 800df04:	42b1      	cmp	r1, r6
 800df06:	d334      	bcc.n	800df72 <rshift+0x96>
 800df08:	1a9b      	subs	r3, r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	1eea      	subs	r2, r5, #3
 800df0e:	4296      	cmp	r6, r2
 800df10:	bf38      	it	cc
 800df12:	2300      	movcc	r3, #0
 800df14:	4423      	add	r3, r4
 800df16:	e015      	b.n	800df44 <rshift+0x68>
 800df18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800df1c:	f1c1 0820 	rsb	r8, r1, #32
 800df20:	40cf      	lsrs	r7, r1
 800df22:	f105 0e04 	add.w	lr, r5, #4
 800df26:	46a1      	mov	r9, r4
 800df28:	4576      	cmp	r6, lr
 800df2a:	46f4      	mov	ip, lr
 800df2c:	d815      	bhi.n	800df5a <rshift+0x7e>
 800df2e:	1a9a      	subs	r2, r3, r2
 800df30:	0092      	lsls	r2, r2, #2
 800df32:	3a04      	subs	r2, #4
 800df34:	3501      	adds	r5, #1
 800df36:	42ae      	cmp	r6, r5
 800df38:	bf38      	it	cc
 800df3a:	2200      	movcc	r2, #0
 800df3c:	18a3      	adds	r3, r4, r2
 800df3e:	50a7      	str	r7, [r4, r2]
 800df40:	b107      	cbz	r7, 800df44 <rshift+0x68>
 800df42:	3304      	adds	r3, #4
 800df44:	1b1a      	subs	r2, r3, r4
 800df46:	42a3      	cmp	r3, r4
 800df48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800df4c:	bf08      	it	eq
 800df4e:	2300      	moveq	r3, #0
 800df50:	6102      	str	r2, [r0, #16]
 800df52:	bf08      	it	eq
 800df54:	6143      	streq	r3, [r0, #20]
 800df56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df5a:	f8dc c000 	ldr.w	ip, [ip]
 800df5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800df62:	ea4c 0707 	orr.w	r7, ip, r7
 800df66:	f849 7b04 	str.w	r7, [r9], #4
 800df6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800df6e:	40cf      	lsrs	r7, r1
 800df70:	e7da      	b.n	800df28 <rshift+0x4c>
 800df72:	f851 cb04 	ldr.w	ip, [r1], #4
 800df76:	f847 cf04 	str.w	ip, [r7, #4]!
 800df7a:	e7c3      	b.n	800df04 <rshift+0x28>
 800df7c:	4623      	mov	r3, r4
 800df7e:	e7e1      	b.n	800df44 <rshift+0x68>

0800df80 <__hexdig_fun>:
 800df80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800df84:	2b09      	cmp	r3, #9
 800df86:	d802      	bhi.n	800df8e <__hexdig_fun+0xe>
 800df88:	3820      	subs	r0, #32
 800df8a:	b2c0      	uxtb	r0, r0
 800df8c:	4770      	bx	lr
 800df8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800df92:	2b05      	cmp	r3, #5
 800df94:	d801      	bhi.n	800df9a <__hexdig_fun+0x1a>
 800df96:	3847      	subs	r0, #71	@ 0x47
 800df98:	e7f7      	b.n	800df8a <__hexdig_fun+0xa>
 800df9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800df9e:	2b05      	cmp	r3, #5
 800dfa0:	d801      	bhi.n	800dfa6 <__hexdig_fun+0x26>
 800dfa2:	3827      	subs	r0, #39	@ 0x27
 800dfa4:	e7f1      	b.n	800df8a <__hexdig_fun+0xa>
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	4770      	bx	lr
	...

0800dfac <__gethex>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	b085      	sub	sp, #20
 800dfb2:	468a      	mov	sl, r1
 800dfb4:	9302      	str	r3, [sp, #8]
 800dfb6:	680b      	ldr	r3, [r1, #0]
 800dfb8:	9001      	str	r0, [sp, #4]
 800dfba:	4690      	mov	r8, r2
 800dfbc:	1c9c      	adds	r4, r3, #2
 800dfbe:	46a1      	mov	r9, r4
 800dfc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dfc4:	2830      	cmp	r0, #48	@ 0x30
 800dfc6:	d0fa      	beq.n	800dfbe <__gethex+0x12>
 800dfc8:	eba9 0303 	sub.w	r3, r9, r3
 800dfcc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dfd0:	f7ff ffd6 	bl	800df80 <__hexdig_fun>
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d168      	bne.n	800e0ac <__gethex+0x100>
 800dfda:	49a0      	ldr	r1, [pc, #640]	@ (800e25c <__gethex+0x2b0>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	4648      	mov	r0, r9
 800dfe0:	f7fd fb2f 	bl	800b642 <strncmp>
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d167      	bne.n	800e0ba <__gethex+0x10e>
 800dfea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dfee:	4626      	mov	r6, r4
 800dff0:	f7ff ffc6 	bl	800df80 <__hexdig_fun>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d062      	beq.n	800e0be <__gethex+0x112>
 800dff8:	4623      	mov	r3, r4
 800dffa:	7818      	ldrb	r0, [r3, #0]
 800dffc:	2830      	cmp	r0, #48	@ 0x30
 800dffe:	4699      	mov	r9, r3
 800e000:	f103 0301 	add.w	r3, r3, #1
 800e004:	d0f9      	beq.n	800dffa <__gethex+0x4e>
 800e006:	f7ff ffbb 	bl	800df80 <__hexdig_fun>
 800e00a:	fab0 f580 	clz	r5, r0
 800e00e:	096d      	lsrs	r5, r5, #5
 800e010:	f04f 0b01 	mov.w	fp, #1
 800e014:	464a      	mov	r2, r9
 800e016:	4616      	mov	r6, r2
 800e018:	3201      	adds	r2, #1
 800e01a:	7830      	ldrb	r0, [r6, #0]
 800e01c:	f7ff ffb0 	bl	800df80 <__hexdig_fun>
 800e020:	2800      	cmp	r0, #0
 800e022:	d1f8      	bne.n	800e016 <__gethex+0x6a>
 800e024:	498d      	ldr	r1, [pc, #564]	@ (800e25c <__gethex+0x2b0>)
 800e026:	2201      	movs	r2, #1
 800e028:	4630      	mov	r0, r6
 800e02a:	f7fd fb0a 	bl	800b642 <strncmp>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d13f      	bne.n	800e0b2 <__gethex+0x106>
 800e032:	b944      	cbnz	r4, 800e046 <__gethex+0x9a>
 800e034:	1c74      	adds	r4, r6, #1
 800e036:	4622      	mov	r2, r4
 800e038:	4616      	mov	r6, r2
 800e03a:	3201      	adds	r2, #1
 800e03c:	7830      	ldrb	r0, [r6, #0]
 800e03e:	f7ff ff9f 	bl	800df80 <__hexdig_fun>
 800e042:	2800      	cmp	r0, #0
 800e044:	d1f8      	bne.n	800e038 <__gethex+0x8c>
 800e046:	1ba4      	subs	r4, r4, r6
 800e048:	00a7      	lsls	r7, r4, #2
 800e04a:	7833      	ldrb	r3, [r6, #0]
 800e04c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e050:	2b50      	cmp	r3, #80	@ 0x50
 800e052:	d13e      	bne.n	800e0d2 <__gethex+0x126>
 800e054:	7873      	ldrb	r3, [r6, #1]
 800e056:	2b2b      	cmp	r3, #43	@ 0x2b
 800e058:	d033      	beq.n	800e0c2 <__gethex+0x116>
 800e05a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e05c:	d034      	beq.n	800e0c8 <__gethex+0x11c>
 800e05e:	1c71      	adds	r1, r6, #1
 800e060:	2400      	movs	r4, #0
 800e062:	7808      	ldrb	r0, [r1, #0]
 800e064:	f7ff ff8c 	bl	800df80 <__hexdig_fun>
 800e068:	1e43      	subs	r3, r0, #1
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b18      	cmp	r3, #24
 800e06e:	d830      	bhi.n	800e0d2 <__gethex+0x126>
 800e070:	f1a0 0210 	sub.w	r2, r0, #16
 800e074:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e078:	f7ff ff82 	bl	800df80 <__hexdig_fun>
 800e07c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e080:	fa5f fc8c 	uxtb.w	ip, ip
 800e084:	f1bc 0f18 	cmp.w	ip, #24
 800e088:	f04f 030a 	mov.w	r3, #10
 800e08c:	d91e      	bls.n	800e0cc <__gethex+0x120>
 800e08e:	b104      	cbz	r4, 800e092 <__gethex+0xe6>
 800e090:	4252      	negs	r2, r2
 800e092:	4417      	add	r7, r2
 800e094:	f8ca 1000 	str.w	r1, [sl]
 800e098:	b1ed      	cbz	r5, 800e0d6 <__gethex+0x12a>
 800e09a:	f1bb 0f00 	cmp.w	fp, #0
 800e09e:	bf0c      	ite	eq
 800e0a0:	2506      	moveq	r5, #6
 800e0a2:	2500      	movne	r5, #0
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	b005      	add	sp, #20
 800e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ac:	2500      	movs	r5, #0
 800e0ae:	462c      	mov	r4, r5
 800e0b0:	e7b0      	b.n	800e014 <__gethex+0x68>
 800e0b2:	2c00      	cmp	r4, #0
 800e0b4:	d1c7      	bne.n	800e046 <__gethex+0x9a>
 800e0b6:	4627      	mov	r7, r4
 800e0b8:	e7c7      	b.n	800e04a <__gethex+0x9e>
 800e0ba:	464e      	mov	r6, r9
 800e0bc:	462f      	mov	r7, r5
 800e0be:	2501      	movs	r5, #1
 800e0c0:	e7c3      	b.n	800e04a <__gethex+0x9e>
 800e0c2:	2400      	movs	r4, #0
 800e0c4:	1cb1      	adds	r1, r6, #2
 800e0c6:	e7cc      	b.n	800e062 <__gethex+0xb6>
 800e0c8:	2401      	movs	r4, #1
 800e0ca:	e7fb      	b.n	800e0c4 <__gethex+0x118>
 800e0cc:	fb03 0002 	mla	r0, r3, r2, r0
 800e0d0:	e7ce      	b.n	800e070 <__gethex+0xc4>
 800e0d2:	4631      	mov	r1, r6
 800e0d4:	e7de      	b.n	800e094 <__gethex+0xe8>
 800e0d6:	eba6 0309 	sub.w	r3, r6, r9
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	4629      	mov	r1, r5
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	dc0a      	bgt.n	800e0f8 <__gethex+0x14c>
 800e0e2:	9801      	ldr	r0, [sp, #4]
 800e0e4:	f7fe fa2a 	bl	800c53c <_Balloc>
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	b940      	cbnz	r0, 800e0fe <__gethex+0x152>
 800e0ec:	4b5c      	ldr	r3, [pc, #368]	@ (800e260 <__gethex+0x2b4>)
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	21e4      	movs	r1, #228	@ 0xe4
 800e0f2:	485c      	ldr	r0, [pc, #368]	@ (800e264 <__gethex+0x2b8>)
 800e0f4:	f7ff fec0 	bl	800de78 <__assert_func>
 800e0f8:	3101      	adds	r1, #1
 800e0fa:	105b      	asrs	r3, r3, #1
 800e0fc:	e7ef      	b.n	800e0de <__gethex+0x132>
 800e0fe:	f100 0a14 	add.w	sl, r0, #20
 800e102:	2300      	movs	r3, #0
 800e104:	4655      	mov	r5, sl
 800e106:	469b      	mov	fp, r3
 800e108:	45b1      	cmp	r9, r6
 800e10a:	d337      	bcc.n	800e17c <__gethex+0x1d0>
 800e10c:	f845 bb04 	str.w	fp, [r5], #4
 800e110:	eba5 050a 	sub.w	r5, r5, sl
 800e114:	10ad      	asrs	r5, r5, #2
 800e116:	6125      	str	r5, [r4, #16]
 800e118:	4658      	mov	r0, fp
 800e11a:	f7fe fb01 	bl	800c720 <__hi0bits>
 800e11e:	016d      	lsls	r5, r5, #5
 800e120:	f8d8 6000 	ldr.w	r6, [r8]
 800e124:	1a2d      	subs	r5, r5, r0
 800e126:	42b5      	cmp	r5, r6
 800e128:	dd54      	ble.n	800e1d4 <__gethex+0x228>
 800e12a:	1bad      	subs	r5, r5, r6
 800e12c:	4629      	mov	r1, r5
 800e12e:	4620      	mov	r0, r4
 800e130:	f7fe fe92 	bl	800ce58 <__any_on>
 800e134:	4681      	mov	r9, r0
 800e136:	b178      	cbz	r0, 800e158 <__gethex+0x1ac>
 800e138:	1e6b      	subs	r3, r5, #1
 800e13a:	1159      	asrs	r1, r3, #5
 800e13c:	f003 021f 	and.w	r2, r3, #31
 800e140:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e144:	f04f 0901 	mov.w	r9, #1
 800e148:	fa09 f202 	lsl.w	r2, r9, r2
 800e14c:	420a      	tst	r2, r1
 800e14e:	d003      	beq.n	800e158 <__gethex+0x1ac>
 800e150:	454b      	cmp	r3, r9
 800e152:	dc36      	bgt.n	800e1c2 <__gethex+0x216>
 800e154:	f04f 0902 	mov.w	r9, #2
 800e158:	4629      	mov	r1, r5
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7ff febe 	bl	800dedc <rshift>
 800e160:	442f      	add	r7, r5
 800e162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e166:	42bb      	cmp	r3, r7
 800e168:	da42      	bge.n	800e1f0 <__gethex+0x244>
 800e16a:	9801      	ldr	r0, [sp, #4]
 800e16c:	4621      	mov	r1, r4
 800e16e:	f7fe fa25 	bl	800c5bc <_Bfree>
 800e172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e174:	2300      	movs	r3, #0
 800e176:	6013      	str	r3, [r2, #0]
 800e178:	25a3      	movs	r5, #163	@ 0xa3
 800e17a:	e793      	b.n	800e0a4 <__gethex+0xf8>
 800e17c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e180:	2a2e      	cmp	r2, #46	@ 0x2e
 800e182:	d012      	beq.n	800e1aa <__gethex+0x1fe>
 800e184:	2b20      	cmp	r3, #32
 800e186:	d104      	bne.n	800e192 <__gethex+0x1e6>
 800e188:	f845 bb04 	str.w	fp, [r5], #4
 800e18c:	f04f 0b00 	mov.w	fp, #0
 800e190:	465b      	mov	r3, fp
 800e192:	7830      	ldrb	r0, [r6, #0]
 800e194:	9303      	str	r3, [sp, #12]
 800e196:	f7ff fef3 	bl	800df80 <__hexdig_fun>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	f000 000f 	and.w	r0, r0, #15
 800e1a0:	4098      	lsls	r0, r3
 800e1a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	e7ae      	b.n	800e108 <__gethex+0x15c>
 800e1aa:	45b1      	cmp	r9, r6
 800e1ac:	d8ea      	bhi.n	800e184 <__gethex+0x1d8>
 800e1ae:	492b      	ldr	r1, [pc, #172]	@ (800e25c <__gethex+0x2b0>)
 800e1b0:	9303      	str	r3, [sp, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f7fd fa44 	bl	800b642 <strncmp>
 800e1ba:	9b03      	ldr	r3, [sp, #12]
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d1e1      	bne.n	800e184 <__gethex+0x1d8>
 800e1c0:	e7a2      	b.n	800e108 <__gethex+0x15c>
 800e1c2:	1ea9      	subs	r1, r5, #2
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f7fe fe47 	bl	800ce58 <__any_on>
 800e1ca:	2800      	cmp	r0, #0
 800e1cc:	d0c2      	beq.n	800e154 <__gethex+0x1a8>
 800e1ce:	f04f 0903 	mov.w	r9, #3
 800e1d2:	e7c1      	b.n	800e158 <__gethex+0x1ac>
 800e1d4:	da09      	bge.n	800e1ea <__gethex+0x23e>
 800e1d6:	1b75      	subs	r5, r6, r5
 800e1d8:	4621      	mov	r1, r4
 800e1da:	9801      	ldr	r0, [sp, #4]
 800e1dc:	462a      	mov	r2, r5
 800e1de:	f7fe fc05 	bl	800c9ec <__lshift>
 800e1e2:	1b7f      	subs	r7, r7, r5
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	f100 0a14 	add.w	sl, r0, #20
 800e1ea:	f04f 0900 	mov.w	r9, #0
 800e1ee:	e7b8      	b.n	800e162 <__gethex+0x1b6>
 800e1f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e1f4:	42bd      	cmp	r5, r7
 800e1f6:	dd6f      	ble.n	800e2d8 <__gethex+0x32c>
 800e1f8:	1bed      	subs	r5, r5, r7
 800e1fa:	42ae      	cmp	r6, r5
 800e1fc:	dc34      	bgt.n	800e268 <__gethex+0x2bc>
 800e1fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e202:	2b02      	cmp	r3, #2
 800e204:	d022      	beq.n	800e24c <__gethex+0x2a0>
 800e206:	2b03      	cmp	r3, #3
 800e208:	d024      	beq.n	800e254 <__gethex+0x2a8>
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d115      	bne.n	800e23a <__gethex+0x28e>
 800e20e:	42ae      	cmp	r6, r5
 800e210:	d113      	bne.n	800e23a <__gethex+0x28e>
 800e212:	2e01      	cmp	r6, #1
 800e214:	d10b      	bne.n	800e22e <__gethex+0x282>
 800e216:	9a02      	ldr	r2, [sp, #8]
 800e218:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	2301      	movs	r3, #1
 800e220:	6123      	str	r3, [r4, #16]
 800e222:	f8ca 3000 	str.w	r3, [sl]
 800e226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e228:	2562      	movs	r5, #98	@ 0x62
 800e22a:	601c      	str	r4, [r3, #0]
 800e22c:	e73a      	b.n	800e0a4 <__gethex+0xf8>
 800e22e:	1e71      	subs	r1, r6, #1
 800e230:	4620      	mov	r0, r4
 800e232:	f7fe fe11 	bl	800ce58 <__any_on>
 800e236:	2800      	cmp	r0, #0
 800e238:	d1ed      	bne.n	800e216 <__gethex+0x26a>
 800e23a:	9801      	ldr	r0, [sp, #4]
 800e23c:	4621      	mov	r1, r4
 800e23e:	f7fe f9bd 	bl	800c5bc <_Bfree>
 800e242:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e244:	2300      	movs	r3, #0
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	2550      	movs	r5, #80	@ 0x50
 800e24a:	e72b      	b.n	800e0a4 <__gethex+0xf8>
 800e24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1f3      	bne.n	800e23a <__gethex+0x28e>
 800e252:	e7e0      	b.n	800e216 <__gethex+0x26a>
 800e254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1dd      	bne.n	800e216 <__gethex+0x26a>
 800e25a:	e7ee      	b.n	800e23a <__gethex+0x28e>
 800e25c:	0800eef8 	.word	0x0800eef8
 800e260:	0800ed8e 	.word	0x0800ed8e
 800e264:	0800efa5 	.word	0x0800efa5
 800e268:	1e6f      	subs	r7, r5, #1
 800e26a:	f1b9 0f00 	cmp.w	r9, #0
 800e26e:	d130      	bne.n	800e2d2 <__gethex+0x326>
 800e270:	b127      	cbz	r7, 800e27c <__gethex+0x2d0>
 800e272:	4639      	mov	r1, r7
 800e274:	4620      	mov	r0, r4
 800e276:	f7fe fdef 	bl	800ce58 <__any_on>
 800e27a:	4681      	mov	r9, r0
 800e27c:	117a      	asrs	r2, r7, #5
 800e27e:	2301      	movs	r3, #1
 800e280:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e284:	f007 071f 	and.w	r7, r7, #31
 800e288:	40bb      	lsls	r3, r7
 800e28a:	4213      	tst	r3, r2
 800e28c:	4629      	mov	r1, r5
 800e28e:	4620      	mov	r0, r4
 800e290:	bf18      	it	ne
 800e292:	f049 0902 	orrne.w	r9, r9, #2
 800e296:	f7ff fe21 	bl	800dedc <rshift>
 800e29a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e29e:	1b76      	subs	r6, r6, r5
 800e2a0:	2502      	movs	r5, #2
 800e2a2:	f1b9 0f00 	cmp.w	r9, #0
 800e2a6:	d047      	beq.n	800e338 <__gethex+0x38c>
 800e2a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d015      	beq.n	800e2dc <__gethex+0x330>
 800e2b0:	2b03      	cmp	r3, #3
 800e2b2:	d017      	beq.n	800e2e4 <__gethex+0x338>
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d109      	bne.n	800e2cc <__gethex+0x320>
 800e2b8:	f019 0f02 	tst.w	r9, #2
 800e2bc:	d006      	beq.n	800e2cc <__gethex+0x320>
 800e2be:	f8da 3000 	ldr.w	r3, [sl]
 800e2c2:	ea49 0903 	orr.w	r9, r9, r3
 800e2c6:	f019 0f01 	tst.w	r9, #1
 800e2ca:	d10e      	bne.n	800e2ea <__gethex+0x33e>
 800e2cc:	f045 0510 	orr.w	r5, r5, #16
 800e2d0:	e032      	b.n	800e338 <__gethex+0x38c>
 800e2d2:	f04f 0901 	mov.w	r9, #1
 800e2d6:	e7d1      	b.n	800e27c <__gethex+0x2d0>
 800e2d8:	2501      	movs	r5, #1
 800e2da:	e7e2      	b.n	800e2a2 <__gethex+0x2f6>
 800e2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2de:	f1c3 0301 	rsb	r3, r3, #1
 800e2e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0f0      	beq.n	800e2cc <__gethex+0x320>
 800e2ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e2ee:	f104 0314 	add.w	r3, r4, #20
 800e2f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e2f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e2fa:	f04f 0c00 	mov.w	ip, #0
 800e2fe:	4618      	mov	r0, r3
 800e300:	f853 2b04 	ldr.w	r2, [r3], #4
 800e304:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e308:	d01b      	beq.n	800e342 <__gethex+0x396>
 800e30a:	3201      	adds	r2, #1
 800e30c:	6002      	str	r2, [r0, #0]
 800e30e:	2d02      	cmp	r5, #2
 800e310:	f104 0314 	add.w	r3, r4, #20
 800e314:	d13c      	bne.n	800e390 <__gethex+0x3e4>
 800e316:	f8d8 2000 	ldr.w	r2, [r8]
 800e31a:	3a01      	subs	r2, #1
 800e31c:	42b2      	cmp	r2, r6
 800e31e:	d109      	bne.n	800e334 <__gethex+0x388>
 800e320:	1171      	asrs	r1, r6, #5
 800e322:	2201      	movs	r2, #1
 800e324:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e328:	f006 061f 	and.w	r6, r6, #31
 800e32c:	fa02 f606 	lsl.w	r6, r2, r6
 800e330:	421e      	tst	r6, r3
 800e332:	d13a      	bne.n	800e3aa <__gethex+0x3fe>
 800e334:	f045 0520 	orr.w	r5, r5, #32
 800e338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e33a:	601c      	str	r4, [r3, #0]
 800e33c:	9b02      	ldr	r3, [sp, #8]
 800e33e:	601f      	str	r7, [r3, #0]
 800e340:	e6b0      	b.n	800e0a4 <__gethex+0xf8>
 800e342:	4299      	cmp	r1, r3
 800e344:	f843 cc04 	str.w	ip, [r3, #-4]
 800e348:	d8d9      	bhi.n	800e2fe <__gethex+0x352>
 800e34a:	68a3      	ldr	r3, [r4, #8]
 800e34c:	459b      	cmp	fp, r3
 800e34e:	db17      	blt.n	800e380 <__gethex+0x3d4>
 800e350:	6861      	ldr	r1, [r4, #4]
 800e352:	9801      	ldr	r0, [sp, #4]
 800e354:	3101      	adds	r1, #1
 800e356:	f7fe f8f1 	bl	800c53c <_Balloc>
 800e35a:	4681      	mov	r9, r0
 800e35c:	b918      	cbnz	r0, 800e366 <__gethex+0x3ba>
 800e35e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3c8 <__gethex+0x41c>)
 800e360:	4602      	mov	r2, r0
 800e362:	2184      	movs	r1, #132	@ 0x84
 800e364:	e6c5      	b.n	800e0f2 <__gethex+0x146>
 800e366:	6922      	ldr	r2, [r4, #16]
 800e368:	3202      	adds	r2, #2
 800e36a:	f104 010c 	add.w	r1, r4, #12
 800e36e:	0092      	lsls	r2, r2, #2
 800e370:	300c      	adds	r0, #12
 800e372:	f7fd f9f0 	bl	800b756 <memcpy>
 800e376:	4621      	mov	r1, r4
 800e378:	9801      	ldr	r0, [sp, #4]
 800e37a:	f7fe f91f 	bl	800c5bc <_Bfree>
 800e37e:	464c      	mov	r4, r9
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e388:	6122      	str	r2, [r4, #16]
 800e38a:	2201      	movs	r2, #1
 800e38c:	615a      	str	r2, [r3, #20]
 800e38e:	e7be      	b.n	800e30e <__gethex+0x362>
 800e390:	6922      	ldr	r2, [r4, #16]
 800e392:	455a      	cmp	r2, fp
 800e394:	dd0b      	ble.n	800e3ae <__gethex+0x402>
 800e396:	2101      	movs	r1, #1
 800e398:	4620      	mov	r0, r4
 800e39a:	f7ff fd9f 	bl	800dedc <rshift>
 800e39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3a2:	3701      	adds	r7, #1
 800e3a4:	42bb      	cmp	r3, r7
 800e3a6:	f6ff aee0 	blt.w	800e16a <__gethex+0x1be>
 800e3aa:	2501      	movs	r5, #1
 800e3ac:	e7c2      	b.n	800e334 <__gethex+0x388>
 800e3ae:	f016 061f 	ands.w	r6, r6, #31
 800e3b2:	d0fa      	beq.n	800e3aa <__gethex+0x3fe>
 800e3b4:	4453      	add	r3, sl
 800e3b6:	f1c6 0620 	rsb	r6, r6, #32
 800e3ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e3be:	f7fe f9af 	bl	800c720 <__hi0bits>
 800e3c2:	42b0      	cmp	r0, r6
 800e3c4:	dbe7      	blt.n	800e396 <__gethex+0x3ea>
 800e3c6:	e7f0      	b.n	800e3aa <__gethex+0x3fe>
 800e3c8:	0800ed8e 	.word	0x0800ed8e

0800e3cc <L_shift>:
 800e3cc:	f1c2 0208 	rsb	r2, r2, #8
 800e3d0:	0092      	lsls	r2, r2, #2
 800e3d2:	b570      	push	{r4, r5, r6, lr}
 800e3d4:	f1c2 0620 	rsb	r6, r2, #32
 800e3d8:	6843      	ldr	r3, [r0, #4]
 800e3da:	6804      	ldr	r4, [r0, #0]
 800e3dc:	fa03 f506 	lsl.w	r5, r3, r6
 800e3e0:	432c      	orrs	r4, r5
 800e3e2:	40d3      	lsrs	r3, r2
 800e3e4:	6004      	str	r4, [r0, #0]
 800e3e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e3ea:	4288      	cmp	r0, r1
 800e3ec:	d3f4      	bcc.n	800e3d8 <L_shift+0xc>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}

0800e3f0 <__match>:
 800e3f0:	b530      	push	{r4, r5, lr}
 800e3f2:	6803      	ldr	r3, [r0, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3fa:	b914      	cbnz	r4, 800e402 <__match+0x12>
 800e3fc:	6003      	str	r3, [r0, #0]
 800e3fe:	2001      	movs	r0, #1
 800e400:	bd30      	pop	{r4, r5, pc}
 800e402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e406:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e40a:	2d19      	cmp	r5, #25
 800e40c:	bf98      	it	ls
 800e40e:	3220      	addls	r2, #32
 800e410:	42a2      	cmp	r2, r4
 800e412:	d0f0      	beq.n	800e3f6 <__match+0x6>
 800e414:	2000      	movs	r0, #0
 800e416:	e7f3      	b.n	800e400 <__match+0x10>

0800e418 <__hexnan>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	680b      	ldr	r3, [r1, #0]
 800e41e:	6801      	ldr	r1, [r0, #0]
 800e420:	115e      	asrs	r6, r3, #5
 800e422:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e426:	f013 031f 	ands.w	r3, r3, #31
 800e42a:	b087      	sub	sp, #28
 800e42c:	bf18      	it	ne
 800e42e:	3604      	addne	r6, #4
 800e430:	2500      	movs	r5, #0
 800e432:	1f37      	subs	r7, r6, #4
 800e434:	4682      	mov	sl, r0
 800e436:	4690      	mov	r8, r2
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e43e:	46b9      	mov	r9, r7
 800e440:	463c      	mov	r4, r7
 800e442:	9502      	str	r5, [sp, #8]
 800e444:	46ab      	mov	fp, r5
 800e446:	784a      	ldrb	r2, [r1, #1]
 800e448:	1c4b      	adds	r3, r1, #1
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	b342      	cbz	r2, 800e4a0 <__hexnan+0x88>
 800e44e:	4610      	mov	r0, r2
 800e450:	9105      	str	r1, [sp, #20]
 800e452:	9204      	str	r2, [sp, #16]
 800e454:	f7ff fd94 	bl	800df80 <__hexdig_fun>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d151      	bne.n	800e500 <__hexnan+0xe8>
 800e45c:	9a04      	ldr	r2, [sp, #16]
 800e45e:	9905      	ldr	r1, [sp, #20]
 800e460:	2a20      	cmp	r2, #32
 800e462:	d818      	bhi.n	800e496 <__hexnan+0x7e>
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	459b      	cmp	fp, r3
 800e468:	dd13      	ble.n	800e492 <__hexnan+0x7a>
 800e46a:	454c      	cmp	r4, r9
 800e46c:	d206      	bcs.n	800e47c <__hexnan+0x64>
 800e46e:	2d07      	cmp	r5, #7
 800e470:	dc04      	bgt.n	800e47c <__hexnan+0x64>
 800e472:	462a      	mov	r2, r5
 800e474:	4649      	mov	r1, r9
 800e476:	4620      	mov	r0, r4
 800e478:	f7ff ffa8 	bl	800e3cc <L_shift>
 800e47c:	4544      	cmp	r4, r8
 800e47e:	d952      	bls.n	800e526 <__hexnan+0x10e>
 800e480:	2300      	movs	r3, #0
 800e482:	f1a4 0904 	sub.w	r9, r4, #4
 800e486:	f844 3c04 	str.w	r3, [r4, #-4]
 800e48a:	f8cd b008 	str.w	fp, [sp, #8]
 800e48e:	464c      	mov	r4, r9
 800e490:	461d      	mov	r5, r3
 800e492:	9903      	ldr	r1, [sp, #12]
 800e494:	e7d7      	b.n	800e446 <__hexnan+0x2e>
 800e496:	2a29      	cmp	r2, #41	@ 0x29
 800e498:	d157      	bne.n	800e54a <__hexnan+0x132>
 800e49a:	3102      	adds	r1, #2
 800e49c:	f8ca 1000 	str.w	r1, [sl]
 800e4a0:	f1bb 0f00 	cmp.w	fp, #0
 800e4a4:	d051      	beq.n	800e54a <__hexnan+0x132>
 800e4a6:	454c      	cmp	r4, r9
 800e4a8:	d206      	bcs.n	800e4b8 <__hexnan+0xa0>
 800e4aa:	2d07      	cmp	r5, #7
 800e4ac:	dc04      	bgt.n	800e4b8 <__hexnan+0xa0>
 800e4ae:	462a      	mov	r2, r5
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	f7ff ff8a 	bl	800e3cc <L_shift>
 800e4b8:	4544      	cmp	r4, r8
 800e4ba:	d936      	bls.n	800e52a <__hexnan+0x112>
 800e4bc:	f1a8 0204 	sub.w	r2, r8, #4
 800e4c0:	4623      	mov	r3, r4
 800e4c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e4c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e4ca:	429f      	cmp	r7, r3
 800e4cc:	d2f9      	bcs.n	800e4c2 <__hexnan+0xaa>
 800e4ce:	1b3b      	subs	r3, r7, r4
 800e4d0:	f023 0303 	bic.w	r3, r3, #3
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	3401      	adds	r4, #1
 800e4d8:	3e03      	subs	r6, #3
 800e4da:	42b4      	cmp	r4, r6
 800e4dc:	bf88      	it	hi
 800e4de:	2304      	movhi	r3, #4
 800e4e0:	4443      	add	r3, r8
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f843 2b04 	str.w	r2, [r3], #4
 800e4e8:	429f      	cmp	r7, r3
 800e4ea:	d2fb      	bcs.n	800e4e4 <__hexnan+0xcc>
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	b91b      	cbnz	r3, 800e4f8 <__hexnan+0xe0>
 800e4f0:	4547      	cmp	r7, r8
 800e4f2:	d128      	bne.n	800e546 <__hexnan+0x12e>
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	603b      	str	r3, [r7, #0]
 800e4f8:	2005      	movs	r0, #5
 800e4fa:	b007      	add	sp, #28
 800e4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	3501      	adds	r5, #1
 800e502:	2d08      	cmp	r5, #8
 800e504:	f10b 0b01 	add.w	fp, fp, #1
 800e508:	dd06      	ble.n	800e518 <__hexnan+0x100>
 800e50a:	4544      	cmp	r4, r8
 800e50c:	d9c1      	bls.n	800e492 <__hexnan+0x7a>
 800e50e:	2300      	movs	r3, #0
 800e510:	f844 3c04 	str.w	r3, [r4, #-4]
 800e514:	2501      	movs	r5, #1
 800e516:	3c04      	subs	r4, #4
 800e518:	6822      	ldr	r2, [r4, #0]
 800e51a:	f000 000f 	and.w	r0, r0, #15
 800e51e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e522:	6020      	str	r0, [r4, #0]
 800e524:	e7b5      	b.n	800e492 <__hexnan+0x7a>
 800e526:	2508      	movs	r5, #8
 800e528:	e7b3      	b.n	800e492 <__hexnan+0x7a>
 800e52a:	9b01      	ldr	r3, [sp, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d0dd      	beq.n	800e4ec <__hexnan+0xd4>
 800e530:	f1c3 0320 	rsb	r3, r3, #32
 800e534:	f04f 32ff 	mov.w	r2, #4294967295
 800e538:	40da      	lsrs	r2, r3
 800e53a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e53e:	4013      	ands	r3, r2
 800e540:	f846 3c04 	str.w	r3, [r6, #-4]
 800e544:	e7d2      	b.n	800e4ec <__hexnan+0xd4>
 800e546:	3f04      	subs	r7, #4
 800e548:	e7d0      	b.n	800e4ec <__hexnan+0xd4>
 800e54a:	2004      	movs	r0, #4
 800e54c:	e7d5      	b.n	800e4fa <__hexnan+0xe2>

0800e54e <__ascii_mbtowc>:
 800e54e:	b082      	sub	sp, #8
 800e550:	b901      	cbnz	r1, 800e554 <__ascii_mbtowc+0x6>
 800e552:	a901      	add	r1, sp, #4
 800e554:	b142      	cbz	r2, 800e568 <__ascii_mbtowc+0x1a>
 800e556:	b14b      	cbz	r3, 800e56c <__ascii_mbtowc+0x1e>
 800e558:	7813      	ldrb	r3, [r2, #0]
 800e55a:	600b      	str	r3, [r1, #0]
 800e55c:	7812      	ldrb	r2, [r2, #0]
 800e55e:	1e10      	subs	r0, r2, #0
 800e560:	bf18      	it	ne
 800e562:	2001      	movne	r0, #1
 800e564:	b002      	add	sp, #8
 800e566:	4770      	bx	lr
 800e568:	4610      	mov	r0, r2
 800e56a:	e7fb      	b.n	800e564 <__ascii_mbtowc+0x16>
 800e56c:	f06f 0001 	mvn.w	r0, #1
 800e570:	e7f8      	b.n	800e564 <__ascii_mbtowc+0x16>

0800e572 <_realloc_r>:
 800e572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e576:	4680      	mov	r8, r0
 800e578:	4615      	mov	r5, r2
 800e57a:	460c      	mov	r4, r1
 800e57c:	b921      	cbnz	r1, 800e588 <_realloc_r+0x16>
 800e57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e582:	4611      	mov	r1, r2
 800e584:	f7fd bf4e 	b.w	800c424 <_malloc_r>
 800e588:	b92a      	cbnz	r2, 800e596 <_realloc_r+0x24>
 800e58a:	f7fd fed7 	bl	800c33c <_free_r>
 800e58e:	2400      	movs	r4, #0
 800e590:	4620      	mov	r0, r4
 800e592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e596:	f000 f840 	bl	800e61a <_malloc_usable_size_r>
 800e59a:	4285      	cmp	r5, r0
 800e59c:	4606      	mov	r6, r0
 800e59e:	d802      	bhi.n	800e5a6 <_realloc_r+0x34>
 800e5a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e5a4:	d8f4      	bhi.n	800e590 <_realloc_r+0x1e>
 800e5a6:	4629      	mov	r1, r5
 800e5a8:	4640      	mov	r0, r8
 800e5aa:	f7fd ff3b 	bl	800c424 <_malloc_r>
 800e5ae:	4607      	mov	r7, r0
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d0ec      	beq.n	800e58e <_realloc_r+0x1c>
 800e5b4:	42b5      	cmp	r5, r6
 800e5b6:	462a      	mov	r2, r5
 800e5b8:	4621      	mov	r1, r4
 800e5ba:	bf28      	it	cs
 800e5bc:	4632      	movcs	r2, r6
 800e5be:	f7fd f8ca 	bl	800b756 <memcpy>
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	f7fd feb9 	bl	800c33c <_free_r>
 800e5ca:	463c      	mov	r4, r7
 800e5cc:	e7e0      	b.n	800e590 <_realloc_r+0x1e>

0800e5ce <__ascii_wctomb>:
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	4608      	mov	r0, r1
 800e5d2:	b141      	cbz	r1, 800e5e6 <__ascii_wctomb+0x18>
 800e5d4:	2aff      	cmp	r2, #255	@ 0xff
 800e5d6:	d904      	bls.n	800e5e2 <__ascii_wctomb+0x14>
 800e5d8:	228a      	movs	r2, #138	@ 0x8a
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	4770      	bx	lr
 800e5e2:	700a      	strb	r2, [r1, #0]
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	4770      	bx	lr

0800e5e8 <fiprintf>:
 800e5e8:	b40e      	push	{r1, r2, r3}
 800e5ea:	b503      	push	{r0, r1, lr}
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	ab03      	add	r3, sp, #12
 800e5f0:	4805      	ldr	r0, [pc, #20]	@ (800e608 <fiprintf+0x20>)
 800e5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5f6:	6800      	ldr	r0, [r0, #0]
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	f000 f83f 	bl	800e67c <_vfiprintf_r>
 800e5fe:	b002      	add	sp, #8
 800e600:	f85d eb04 	ldr.w	lr, [sp], #4
 800e604:	b003      	add	sp, #12
 800e606:	4770      	bx	lr
 800e608:	2400001c 	.word	0x2400001c

0800e60c <abort>:
 800e60c:	b508      	push	{r3, lr}
 800e60e:	2006      	movs	r0, #6
 800e610:	f000 fa08 	bl	800ea24 <raise>
 800e614:	2001      	movs	r0, #1
 800e616:	f7f2 ff49 	bl	80014ac <_exit>

0800e61a <_malloc_usable_size_r>:
 800e61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e61e:	1f18      	subs	r0, r3, #4
 800e620:	2b00      	cmp	r3, #0
 800e622:	bfbc      	itt	lt
 800e624:	580b      	ldrlt	r3, [r1, r0]
 800e626:	18c0      	addlt	r0, r0, r3
 800e628:	4770      	bx	lr

0800e62a <__sfputc_r>:
 800e62a:	6893      	ldr	r3, [r2, #8]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	b410      	push	{r4}
 800e632:	6093      	str	r3, [r2, #8]
 800e634:	da08      	bge.n	800e648 <__sfputc_r+0x1e>
 800e636:	6994      	ldr	r4, [r2, #24]
 800e638:	42a3      	cmp	r3, r4
 800e63a:	db01      	blt.n	800e640 <__sfputc_r+0x16>
 800e63c:	290a      	cmp	r1, #10
 800e63e:	d103      	bne.n	800e648 <__sfputc_r+0x1e>
 800e640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e644:	f000 b932 	b.w	800e8ac <__swbuf_r>
 800e648:	6813      	ldr	r3, [r2, #0]
 800e64a:	1c58      	adds	r0, r3, #1
 800e64c:	6010      	str	r0, [r2, #0]
 800e64e:	7019      	strb	r1, [r3, #0]
 800e650:	4608      	mov	r0, r1
 800e652:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <__sfputs_r>:
 800e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65a:	4606      	mov	r6, r0
 800e65c:	460f      	mov	r7, r1
 800e65e:	4614      	mov	r4, r2
 800e660:	18d5      	adds	r5, r2, r3
 800e662:	42ac      	cmp	r4, r5
 800e664:	d101      	bne.n	800e66a <__sfputs_r+0x12>
 800e666:	2000      	movs	r0, #0
 800e668:	e007      	b.n	800e67a <__sfputs_r+0x22>
 800e66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e66e:	463a      	mov	r2, r7
 800e670:	4630      	mov	r0, r6
 800e672:	f7ff ffda 	bl	800e62a <__sfputc_r>
 800e676:	1c43      	adds	r3, r0, #1
 800e678:	d1f3      	bne.n	800e662 <__sfputs_r+0xa>
 800e67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e67c <_vfiprintf_r>:
 800e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e680:	460d      	mov	r5, r1
 800e682:	b09d      	sub	sp, #116	@ 0x74
 800e684:	4614      	mov	r4, r2
 800e686:	4698      	mov	r8, r3
 800e688:	4606      	mov	r6, r0
 800e68a:	b118      	cbz	r0, 800e694 <_vfiprintf_r+0x18>
 800e68c:	6a03      	ldr	r3, [r0, #32]
 800e68e:	b90b      	cbnz	r3, 800e694 <_vfiprintf_r+0x18>
 800e690:	f7fc ff02 	bl	800b498 <__sinit>
 800e694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e696:	07d9      	lsls	r1, r3, #31
 800e698:	d405      	bmi.n	800e6a6 <_vfiprintf_r+0x2a>
 800e69a:	89ab      	ldrh	r3, [r5, #12]
 800e69c:	059a      	lsls	r2, r3, #22
 800e69e:	d402      	bmi.n	800e6a6 <_vfiprintf_r+0x2a>
 800e6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6a2:	f7fd f856 	bl	800b752 <__retarget_lock_acquire_recursive>
 800e6a6:	89ab      	ldrh	r3, [r5, #12]
 800e6a8:	071b      	lsls	r3, r3, #28
 800e6aa:	d501      	bpl.n	800e6b0 <_vfiprintf_r+0x34>
 800e6ac:	692b      	ldr	r3, [r5, #16]
 800e6ae:	b99b      	cbnz	r3, 800e6d8 <_vfiprintf_r+0x5c>
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f000 f938 	bl	800e928 <__swsetup_r>
 800e6b8:	b170      	cbz	r0, 800e6d8 <_vfiprintf_r+0x5c>
 800e6ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6bc:	07dc      	lsls	r4, r3, #31
 800e6be:	d504      	bpl.n	800e6ca <_vfiprintf_r+0x4e>
 800e6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c4:	b01d      	add	sp, #116	@ 0x74
 800e6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ca:	89ab      	ldrh	r3, [r5, #12]
 800e6cc:	0598      	lsls	r0, r3, #22
 800e6ce:	d4f7      	bmi.n	800e6c0 <_vfiprintf_r+0x44>
 800e6d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6d2:	f7fd f83f 	bl	800b754 <__retarget_lock_release_recursive>
 800e6d6:	e7f3      	b.n	800e6c0 <_vfiprintf_r+0x44>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6dc:	2320      	movs	r3, #32
 800e6de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6e6:	2330      	movs	r3, #48	@ 0x30
 800e6e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e898 <_vfiprintf_r+0x21c>
 800e6ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6f0:	f04f 0901 	mov.w	r9, #1
 800e6f4:	4623      	mov	r3, r4
 800e6f6:	469a      	mov	sl, r3
 800e6f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6fc:	b10a      	cbz	r2, 800e702 <_vfiprintf_r+0x86>
 800e6fe:	2a25      	cmp	r2, #37	@ 0x25
 800e700:	d1f9      	bne.n	800e6f6 <_vfiprintf_r+0x7a>
 800e702:	ebba 0b04 	subs.w	fp, sl, r4
 800e706:	d00b      	beq.n	800e720 <_vfiprintf_r+0xa4>
 800e708:	465b      	mov	r3, fp
 800e70a:	4622      	mov	r2, r4
 800e70c:	4629      	mov	r1, r5
 800e70e:	4630      	mov	r0, r6
 800e710:	f7ff ffa2 	bl	800e658 <__sfputs_r>
 800e714:	3001      	adds	r0, #1
 800e716:	f000 80a7 	beq.w	800e868 <_vfiprintf_r+0x1ec>
 800e71a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e71c:	445a      	add	r2, fp
 800e71e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e720:	f89a 3000 	ldrb.w	r3, [sl]
 800e724:	2b00      	cmp	r3, #0
 800e726:	f000 809f 	beq.w	800e868 <_vfiprintf_r+0x1ec>
 800e72a:	2300      	movs	r3, #0
 800e72c:	f04f 32ff 	mov.w	r2, #4294967295
 800e730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e734:	f10a 0a01 	add.w	sl, sl, #1
 800e738:	9304      	str	r3, [sp, #16]
 800e73a:	9307      	str	r3, [sp, #28]
 800e73c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e740:	931a      	str	r3, [sp, #104]	@ 0x68
 800e742:	4654      	mov	r4, sl
 800e744:	2205      	movs	r2, #5
 800e746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e74a:	4853      	ldr	r0, [pc, #332]	@ (800e898 <_vfiprintf_r+0x21c>)
 800e74c:	f7f1 fdc8 	bl	80002e0 <memchr>
 800e750:	9a04      	ldr	r2, [sp, #16]
 800e752:	b9d8      	cbnz	r0, 800e78c <_vfiprintf_r+0x110>
 800e754:	06d1      	lsls	r1, r2, #27
 800e756:	bf44      	itt	mi
 800e758:	2320      	movmi	r3, #32
 800e75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e75e:	0713      	lsls	r3, r2, #28
 800e760:	bf44      	itt	mi
 800e762:	232b      	movmi	r3, #43	@ 0x2b
 800e764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e768:	f89a 3000 	ldrb.w	r3, [sl]
 800e76c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e76e:	d015      	beq.n	800e79c <_vfiprintf_r+0x120>
 800e770:	9a07      	ldr	r2, [sp, #28]
 800e772:	4654      	mov	r4, sl
 800e774:	2000      	movs	r0, #0
 800e776:	f04f 0c0a 	mov.w	ip, #10
 800e77a:	4621      	mov	r1, r4
 800e77c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e780:	3b30      	subs	r3, #48	@ 0x30
 800e782:	2b09      	cmp	r3, #9
 800e784:	d94b      	bls.n	800e81e <_vfiprintf_r+0x1a2>
 800e786:	b1b0      	cbz	r0, 800e7b6 <_vfiprintf_r+0x13a>
 800e788:	9207      	str	r2, [sp, #28]
 800e78a:	e014      	b.n	800e7b6 <_vfiprintf_r+0x13a>
 800e78c:	eba0 0308 	sub.w	r3, r0, r8
 800e790:	fa09 f303 	lsl.w	r3, r9, r3
 800e794:	4313      	orrs	r3, r2
 800e796:	9304      	str	r3, [sp, #16]
 800e798:	46a2      	mov	sl, r4
 800e79a:	e7d2      	b.n	800e742 <_vfiprintf_r+0xc6>
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	1d19      	adds	r1, r3, #4
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	9103      	str	r1, [sp, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	bfbb      	ittet	lt
 800e7a8:	425b      	neglt	r3, r3
 800e7aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e7ae:	9307      	strge	r3, [sp, #28]
 800e7b0:	9307      	strlt	r3, [sp, #28]
 800e7b2:	bfb8      	it	lt
 800e7b4:	9204      	strlt	r2, [sp, #16]
 800e7b6:	7823      	ldrb	r3, [r4, #0]
 800e7b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7ba:	d10a      	bne.n	800e7d2 <_vfiprintf_r+0x156>
 800e7bc:	7863      	ldrb	r3, [r4, #1]
 800e7be:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7c0:	d132      	bne.n	800e828 <_vfiprintf_r+0x1ac>
 800e7c2:	9b03      	ldr	r3, [sp, #12]
 800e7c4:	1d1a      	adds	r2, r3, #4
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	9203      	str	r2, [sp, #12]
 800e7ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7ce:	3402      	adds	r4, #2
 800e7d0:	9305      	str	r3, [sp, #20]
 800e7d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e8a8 <_vfiprintf_r+0x22c>
 800e7d6:	7821      	ldrb	r1, [r4, #0]
 800e7d8:	2203      	movs	r2, #3
 800e7da:	4650      	mov	r0, sl
 800e7dc:	f7f1 fd80 	bl	80002e0 <memchr>
 800e7e0:	b138      	cbz	r0, 800e7f2 <_vfiprintf_r+0x176>
 800e7e2:	9b04      	ldr	r3, [sp, #16]
 800e7e4:	eba0 000a 	sub.w	r0, r0, sl
 800e7e8:	2240      	movs	r2, #64	@ 0x40
 800e7ea:	4082      	lsls	r2, r0
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	3401      	adds	r4, #1
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f6:	4829      	ldr	r0, [pc, #164]	@ (800e89c <_vfiprintf_r+0x220>)
 800e7f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7fc:	2206      	movs	r2, #6
 800e7fe:	f7f1 fd6f 	bl	80002e0 <memchr>
 800e802:	2800      	cmp	r0, #0
 800e804:	d03f      	beq.n	800e886 <_vfiprintf_r+0x20a>
 800e806:	4b26      	ldr	r3, [pc, #152]	@ (800e8a0 <_vfiprintf_r+0x224>)
 800e808:	bb1b      	cbnz	r3, 800e852 <_vfiprintf_r+0x1d6>
 800e80a:	9b03      	ldr	r3, [sp, #12]
 800e80c:	3307      	adds	r3, #7
 800e80e:	f023 0307 	bic.w	r3, r3, #7
 800e812:	3308      	adds	r3, #8
 800e814:	9303      	str	r3, [sp, #12]
 800e816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e818:	443b      	add	r3, r7
 800e81a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e81c:	e76a      	b.n	800e6f4 <_vfiprintf_r+0x78>
 800e81e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e822:	460c      	mov	r4, r1
 800e824:	2001      	movs	r0, #1
 800e826:	e7a8      	b.n	800e77a <_vfiprintf_r+0xfe>
 800e828:	2300      	movs	r3, #0
 800e82a:	3401      	adds	r4, #1
 800e82c:	9305      	str	r3, [sp, #20]
 800e82e:	4619      	mov	r1, r3
 800e830:	f04f 0c0a 	mov.w	ip, #10
 800e834:	4620      	mov	r0, r4
 800e836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e83a:	3a30      	subs	r2, #48	@ 0x30
 800e83c:	2a09      	cmp	r2, #9
 800e83e:	d903      	bls.n	800e848 <_vfiprintf_r+0x1cc>
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0c6      	beq.n	800e7d2 <_vfiprintf_r+0x156>
 800e844:	9105      	str	r1, [sp, #20]
 800e846:	e7c4      	b.n	800e7d2 <_vfiprintf_r+0x156>
 800e848:	fb0c 2101 	mla	r1, ip, r1, r2
 800e84c:	4604      	mov	r4, r0
 800e84e:	2301      	movs	r3, #1
 800e850:	e7f0      	b.n	800e834 <_vfiprintf_r+0x1b8>
 800e852:	ab03      	add	r3, sp, #12
 800e854:	9300      	str	r3, [sp, #0]
 800e856:	462a      	mov	r2, r5
 800e858:	4b12      	ldr	r3, [pc, #72]	@ (800e8a4 <_vfiprintf_r+0x228>)
 800e85a:	a904      	add	r1, sp, #16
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7fb ffdb 	bl	800a818 <_printf_float>
 800e862:	4607      	mov	r7, r0
 800e864:	1c78      	adds	r0, r7, #1
 800e866:	d1d6      	bne.n	800e816 <_vfiprintf_r+0x19a>
 800e868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e86a:	07d9      	lsls	r1, r3, #31
 800e86c:	d405      	bmi.n	800e87a <_vfiprintf_r+0x1fe>
 800e86e:	89ab      	ldrh	r3, [r5, #12]
 800e870:	059a      	lsls	r2, r3, #22
 800e872:	d402      	bmi.n	800e87a <_vfiprintf_r+0x1fe>
 800e874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e876:	f7fc ff6d 	bl	800b754 <__retarget_lock_release_recursive>
 800e87a:	89ab      	ldrh	r3, [r5, #12]
 800e87c:	065b      	lsls	r3, r3, #25
 800e87e:	f53f af1f 	bmi.w	800e6c0 <_vfiprintf_r+0x44>
 800e882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e884:	e71e      	b.n	800e6c4 <_vfiprintf_r+0x48>
 800e886:	ab03      	add	r3, sp, #12
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	462a      	mov	r2, r5
 800e88c:	4b05      	ldr	r3, [pc, #20]	@ (800e8a4 <_vfiprintf_r+0x228>)
 800e88e:	a904      	add	r1, sp, #16
 800e890:	4630      	mov	r0, r6
 800e892:	f7fc fa49 	bl	800ad28 <_printf_i>
 800e896:	e7e4      	b.n	800e862 <_vfiprintf_r+0x1e6>
 800e898:	0800ef50 	.word	0x0800ef50
 800e89c:	0800ef5a 	.word	0x0800ef5a
 800e8a0:	0800a819 	.word	0x0800a819
 800e8a4:	0800e659 	.word	0x0800e659
 800e8a8:	0800ef56 	.word	0x0800ef56

0800e8ac <__swbuf_r>:
 800e8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ae:	460e      	mov	r6, r1
 800e8b0:	4614      	mov	r4, r2
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	b118      	cbz	r0, 800e8be <__swbuf_r+0x12>
 800e8b6:	6a03      	ldr	r3, [r0, #32]
 800e8b8:	b90b      	cbnz	r3, 800e8be <__swbuf_r+0x12>
 800e8ba:	f7fc fded 	bl	800b498 <__sinit>
 800e8be:	69a3      	ldr	r3, [r4, #24]
 800e8c0:	60a3      	str	r3, [r4, #8]
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	071a      	lsls	r2, r3, #28
 800e8c6:	d501      	bpl.n	800e8cc <__swbuf_r+0x20>
 800e8c8:	6923      	ldr	r3, [r4, #16]
 800e8ca:	b943      	cbnz	r3, 800e8de <__swbuf_r+0x32>
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f000 f82a 	bl	800e928 <__swsetup_r>
 800e8d4:	b118      	cbz	r0, 800e8de <__swbuf_r+0x32>
 800e8d6:	f04f 37ff 	mov.w	r7, #4294967295
 800e8da:	4638      	mov	r0, r7
 800e8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	6922      	ldr	r2, [r4, #16]
 800e8e2:	1a98      	subs	r0, r3, r2
 800e8e4:	6963      	ldr	r3, [r4, #20]
 800e8e6:	b2f6      	uxtb	r6, r6
 800e8e8:	4283      	cmp	r3, r0
 800e8ea:	4637      	mov	r7, r6
 800e8ec:	dc05      	bgt.n	800e8fa <__swbuf_r+0x4e>
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	f7ff fa65 	bl	800ddc0 <_fflush_r>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d1ed      	bne.n	800e8d6 <__swbuf_r+0x2a>
 800e8fa:	68a3      	ldr	r3, [r4, #8]
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	60a3      	str	r3, [r4, #8]
 800e900:	6823      	ldr	r3, [r4, #0]
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	6022      	str	r2, [r4, #0]
 800e906:	701e      	strb	r6, [r3, #0]
 800e908:	6962      	ldr	r2, [r4, #20]
 800e90a:	1c43      	adds	r3, r0, #1
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d004      	beq.n	800e91a <__swbuf_r+0x6e>
 800e910:	89a3      	ldrh	r3, [r4, #12]
 800e912:	07db      	lsls	r3, r3, #31
 800e914:	d5e1      	bpl.n	800e8da <__swbuf_r+0x2e>
 800e916:	2e0a      	cmp	r6, #10
 800e918:	d1df      	bne.n	800e8da <__swbuf_r+0x2e>
 800e91a:	4621      	mov	r1, r4
 800e91c:	4628      	mov	r0, r5
 800e91e:	f7ff fa4f 	bl	800ddc0 <_fflush_r>
 800e922:	2800      	cmp	r0, #0
 800e924:	d0d9      	beq.n	800e8da <__swbuf_r+0x2e>
 800e926:	e7d6      	b.n	800e8d6 <__swbuf_r+0x2a>

0800e928 <__swsetup_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4b29      	ldr	r3, [pc, #164]	@ (800e9d0 <__swsetup_r+0xa8>)
 800e92c:	4605      	mov	r5, r0
 800e92e:	6818      	ldr	r0, [r3, #0]
 800e930:	460c      	mov	r4, r1
 800e932:	b118      	cbz	r0, 800e93c <__swsetup_r+0x14>
 800e934:	6a03      	ldr	r3, [r0, #32]
 800e936:	b90b      	cbnz	r3, 800e93c <__swsetup_r+0x14>
 800e938:	f7fc fdae 	bl	800b498 <__sinit>
 800e93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e940:	0719      	lsls	r1, r3, #28
 800e942:	d422      	bmi.n	800e98a <__swsetup_r+0x62>
 800e944:	06da      	lsls	r2, r3, #27
 800e946:	d407      	bmi.n	800e958 <__swsetup_r+0x30>
 800e948:	2209      	movs	r2, #9
 800e94a:	602a      	str	r2, [r5, #0]
 800e94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e950:	81a3      	strh	r3, [r4, #12]
 800e952:	f04f 30ff 	mov.w	r0, #4294967295
 800e956:	e033      	b.n	800e9c0 <__swsetup_r+0x98>
 800e958:	0758      	lsls	r0, r3, #29
 800e95a:	d512      	bpl.n	800e982 <__swsetup_r+0x5a>
 800e95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e95e:	b141      	cbz	r1, 800e972 <__swsetup_r+0x4a>
 800e960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e964:	4299      	cmp	r1, r3
 800e966:	d002      	beq.n	800e96e <__swsetup_r+0x46>
 800e968:	4628      	mov	r0, r5
 800e96a:	f7fd fce7 	bl	800c33c <_free_r>
 800e96e:	2300      	movs	r3, #0
 800e970:	6363      	str	r3, [r4, #52]	@ 0x34
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e978:	81a3      	strh	r3, [r4, #12]
 800e97a:	2300      	movs	r3, #0
 800e97c:	6063      	str	r3, [r4, #4]
 800e97e:	6923      	ldr	r3, [r4, #16]
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	89a3      	ldrh	r3, [r4, #12]
 800e984:	f043 0308 	orr.w	r3, r3, #8
 800e988:	81a3      	strh	r3, [r4, #12]
 800e98a:	6923      	ldr	r3, [r4, #16]
 800e98c:	b94b      	cbnz	r3, 800e9a2 <__swsetup_r+0x7a>
 800e98e:	89a3      	ldrh	r3, [r4, #12]
 800e990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e998:	d003      	beq.n	800e9a2 <__swsetup_r+0x7a>
 800e99a:	4621      	mov	r1, r4
 800e99c:	4628      	mov	r0, r5
 800e99e:	f000 f883 	bl	800eaa8 <__smakebuf_r>
 800e9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9a6:	f013 0201 	ands.w	r2, r3, #1
 800e9aa:	d00a      	beq.n	800e9c2 <__swsetup_r+0x9a>
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	60a2      	str	r2, [r4, #8]
 800e9b0:	6962      	ldr	r2, [r4, #20]
 800e9b2:	4252      	negs	r2, r2
 800e9b4:	61a2      	str	r2, [r4, #24]
 800e9b6:	6922      	ldr	r2, [r4, #16]
 800e9b8:	b942      	cbnz	r2, 800e9cc <__swsetup_r+0xa4>
 800e9ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e9be:	d1c5      	bne.n	800e94c <__swsetup_r+0x24>
 800e9c0:	bd38      	pop	{r3, r4, r5, pc}
 800e9c2:	0799      	lsls	r1, r3, #30
 800e9c4:	bf58      	it	pl
 800e9c6:	6962      	ldrpl	r2, [r4, #20]
 800e9c8:	60a2      	str	r2, [r4, #8]
 800e9ca:	e7f4      	b.n	800e9b6 <__swsetup_r+0x8e>
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	e7f7      	b.n	800e9c0 <__swsetup_r+0x98>
 800e9d0:	2400001c 	.word	0x2400001c

0800e9d4 <_raise_r>:
 800e9d4:	291f      	cmp	r1, #31
 800e9d6:	b538      	push	{r3, r4, r5, lr}
 800e9d8:	4605      	mov	r5, r0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	d904      	bls.n	800e9e8 <_raise_r+0x14>
 800e9de:	2316      	movs	r3, #22
 800e9e0:	6003      	str	r3, [r0, #0]
 800e9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9ea:	b112      	cbz	r2, 800e9f2 <_raise_r+0x1e>
 800e9ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9f0:	b94b      	cbnz	r3, 800ea06 <_raise_r+0x32>
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f000 f830 	bl	800ea58 <_getpid_r>
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea02:	f000 b817 	b.w	800ea34 <_kill_r>
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d00a      	beq.n	800ea20 <_raise_r+0x4c>
 800ea0a:	1c59      	adds	r1, r3, #1
 800ea0c:	d103      	bne.n	800ea16 <_raise_r+0x42>
 800ea0e:	2316      	movs	r3, #22
 800ea10:	6003      	str	r3, [r0, #0]
 800ea12:	2001      	movs	r0, #1
 800ea14:	e7e7      	b.n	800e9e6 <_raise_r+0x12>
 800ea16:	2100      	movs	r1, #0
 800ea18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	4798      	blx	r3
 800ea20:	2000      	movs	r0, #0
 800ea22:	e7e0      	b.n	800e9e6 <_raise_r+0x12>

0800ea24 <raise>:
 800ea24:	4b02      	ldr	r3, [pc, #8]	@ (800ea30 <raise+0xc>)
 800ea26:	4601      	mov	r1, r0
 800ea28:	6818      	ldr	r0, [r3, #0]
 800ea2a:	f7ff bfd3 	b.w	800e9d4 <_raise_r>
 800ea2e:	bf00      	nop
 800ea30:	2400001c 	.word	0x2400001c

0800ea34 <_kill_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	4d07      	ldr	r5, [pc, #28]	@ (800ea54 <_kill_r+0x20>)
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	4608      	mov	r0, r1
 800ea3e:	4611      	mov	r1, r2
 800ea40:	602b      	str	r3, [r5, #0]
 800ea42:	f7f2 fd23 	bl	800148c <_kill>
 800ea46:	1c43      	adds	r3, r0, #1
 800ea48:	d102      	bne.n	800ea50 <_kill_r+0x1c>
 800ea4a:	682b      	ldr	r3, [r5, #0]
 800ea4c:	b103      	cbz	r3, 800ea50 <_kill_r+0x1c>
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	bd38      	pop	{r3, r4, r5, pc}
 800ea52:	bf00      	nop
 800ea54:	240004d0 	.word	0x240004d0

0800ea58 <_getpid_r>:
 800ea58:	f7f2 bd10 	b.w	800147c <_getpid>

0800ea5c <__swhatbuf_r>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	460c      	mov	r4, r1
 800ea60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea64:	2900      	cmp	r1, #0
 800ea66:	b096      	sub	sp, #88	@ 0x58
 800ea68:	4615      	mov	r5, r2
 800ea6a:	461e      	mov	r6, r3
 800ea6c:	da0d      	bge.n	800ea8a <__swhatbuf_r+0x2e>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea74:	f04f 0100 	mov.w	r1, #0
 800ea78:	bf14      	ite	ne
 800ea7a:	2340      	movne	r3, #64	@ 0x40
 800ea7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea80:	2000      	movs	r0, #0
 800ea82:	6031      	str	r1, [r6, #0]
 800ea84:	602b      	str	r3, [r5, #0]
 800ea86:	b016      	add	sp, #88	@ 0x58
 800ea88:	bd70      	pop	{r4, r5, r6, pc}
 800ea8a:	466a      	mov	r2, sp
 800ea8c:	f000 f848 	bl	800eb20 <_fstat_r>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	dbec      	blt.n	800ea6e <__swhatbuf_r+0x12>
 800ea94:	9901      	ldr	r1, [sp, #4]
 800ea96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea9e:	4259      	negs	r1, r3
 800eaa0:	4159      	adcs	r1, r3
 800eaa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eaa6:	e7eb      	b.n	800ea80 <__swhatbuf_r+0x24>

0800eaa8 <__smakebuf_r>:
 800eaa8:	898b      	ldrh	r3, [r1, #12]
 800eaaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaac:	079d      	lsls	r5, r3, #30
 800eaae:	4606      	mov	r6, r0
 800eab0:	460c      	mov	r4, r1
 800eab2:	d507      	bpl.n	800eac4 <__smakebuf_r+0x1c>
 800eab4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	6123      	str	r3, [r4, #16]
 800eabc:	2301      	movs	r3, #1
 800eabe:	6163      	str	r3, [r4, #20]
 800eac0:	b003      	add	sp, #12
 800eac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac4:	ab01      	add	r3, sp, #4
 800eac6:	466a      	mov	r2, sp
 800eac8:	f7ff ffc8 	bl	800ea5c <__swhatbuf_r>
 800eacc:	9f00      	ldr	r7, [sp, #0]
 800eace:	4605      	mov	r5, r0
 800ead0:	4639      	mov	r1, r7
 800ead2:	4630      	mov	r0, r6
 800ead4:	f7fd fca6 	bl	800c424 <_malloc_r>
 800ead8:	b948      	cbnz	r0, 800eaee <__smakebuf_r+0x46>
 800eada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eade:	059a      	lsls	r2, r3, #22
 800eae0:	d4ee      	bmi.n	800eac0 <__smakebuf_r+0x18>
 800eae2:	f023 0303 	bic.w	r3, r3, #3
 800eae6:	f043 0302 	orr.w	r3, r3, #2
 800eaea:	81a3      	strh	r3, [r4, #12]
 800eaec:	e7e2      	b.n	800eab4 <__smakebuf_r+0xc>
 800eaee:	89a3      	ldrh	r3, [r4, #12]
 800eaf0:	6020      	str	r0, [r4, #0]
 800eaf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaf6:	81a3      	strh	r3, [r4, #12]
 800eaf8:	9b01      	ldr	r3, [sp, #4]
 800eafa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eafe:	b15b      	cbz	r3, 800eb18 <__smakebuf_r+0x70>
 800eb00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb04:	4630      	mov	r0, r6
 800eb06:	f000 f81d 	bl	800eb44 <_isatty_r>
 800eb0a:	b128      	cbz	r0, 800eb18 <__smakebuf_r+0x70>
 800eb0c:	89a3      	ldrh	r3, [r4, #12]
 800eb0e:	f023 0303 	bic.w	r3, r3, #3
 800eb12:	f043 0301 	orr.w	r3, r3, #1
 800eb16:	81a3      	strh	r3, [r4, #12]
 800eb18:	89a3      	ldrh	r3, [r4, #12]
 800eb1a:	431d      	orrs	r5, r3
 800eb1c:	81a5      	strh	r5, [r4, #12]
 800eb1e:	e7cf      	b.n	800eac0 <__smakebuf_r+0x18>

0800eb20 <_fstat_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d07      	ldr	r5, [pc, #28]	@ (800eb40 <_fstat_r+0x20>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	f7f2 fd0d 	bl	800154c <_fstat>
 800eb32:	1c43      	adds	r3, r0, #1
 800eb34:	d102      	bne.n	800eb3c <_fstat_r+0x1c>
 800eb36:	682b      	ldr	r3, [r5, #0]
 800eb38:	b103      	cbz	r3, 800eb3c <_fstat_r+0x1c>
 800eb3a:	6023      	str	r3, [r4, #0]
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	bf00      	nop
 800eb40:	240004d0 	.word	0x240004d0

0800eb44 <_isatty_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4d06      	ldr	r5, [pc, #24]	@ (800eb60 <_isatty_r+0x1c>)
 800eb48:	2300      	movs	r3, #0
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	4608      	mov	r0, r1
 800eb4e:	602b      	str	r3, [r5, #0]
 800eb50:	f7f2 fd0c 	bl	800156c <_isatty>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <_isatty_r+0x1a>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	b103      	cbz	r3, 800eb5e <_isatty_r+0x1a>
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	bd38      	pop	{r3, r4, r5, pc}
 800eb60:	240004d0 	.word	0x240004d0

0800eb64 <_init>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	bf00      	nop
 800eb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb6a:	bc08      	pop	{r3}
 800eb6c:	469e      	mov	lr, r3
 800eb6e:	4770      	bx	lr

0800eb70 <_fini>:
 800eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb72:	bf00      	nop
 800eb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb76:	bc08      	pop	{r3}
 800eb78:	469e      	mov	lr, r3
 800eb7a:	4770      	bx	lr
