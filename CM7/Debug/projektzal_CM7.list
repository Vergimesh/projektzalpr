
projektzal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f744  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800f9e8  0800f9e8  000109e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fec0  0800fec0  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fec0  0800fec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fec8  0800fec8  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fec8  0800fec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fecc  0800fecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  24000000  0800fed0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  240001e8  080100b8  000111e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000514  080100b8  00011514  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db0d  00000000  00000000  00011216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f1  00000000  00000000  0002ed23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00032518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001126  00000000  00000000  00033b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cdec  00000000  00000000  00034c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220f4  00000000  00000000  00071a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a21c  00000000  00000000  00093b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021dd3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007060  00000000  00000000  0021dd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00224de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f9cc 	.word	0x0800f9cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800f9cc 	.word	0x0800f9cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <BMP280_Init>:
// File: bmp2.c
#include "bmp2.h"

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Configuration for control measurement register
    config[0] = 0xF4; // Address of control register
 8000b9c:	23f4      	movs	r3, #244	@ 0xf4
 8000b9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x27; // Normal mode, oversampling x1 for temperature
 8000ba0:	2327      	movs	r3, #39	@ 0x27
 8000ba2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	21ec      	movs	r1, #236	@ 0xec
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f002 fa4c 	bl	8003050 <HAL_I2C_Master_Transmit>

    // Configuration for configuration register
    config[0] = 0xF5; // Address of configuration register
 8000bb8:	23f5      	movs	r3, #245	@ 0xf5
 8000bba:	733b      	strb	r3, [r7, #12]
    config[1] = 0xA0; // Filter x4, standby time 1000 ms
 8000bbc:	23a0      	movs	r3, #160	@ 0xa0
 8000bbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	21ec      	movs	r1, #236	@ 0xec
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f002 fa3e 	bl	8003050 <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    uint8_t calib_raw[24];

    // Read 24 bytes of calibration data starting at register 0x88
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0x88, 1, calib_raw, 24, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2318      	movs	r3, #24
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	21ec      	movs	r1, #236	@ 0xec
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 fb3f 	bl	8003280 <HAL_I2C_Mem_Read>

    // Parse calibration data
    calib_data->dig_T1 = (uint16_t)(calib_raw[1] << 8 | calib_raw[0]);
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)(calib_raw[3] << 8 | calib_raw[2]);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)(calib_raw[5] << 8 | calib_raw[4]);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	809a      	strh	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    uint8_t temp_raw[3];
    int32_t temp_adc;
    float var1, var2, temperature;

    // Read 3 bytes of temperature data starting from register 0xFA
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0xFA, 1, temp_raw, 3, HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	22fa      	movs	r2, #250	@ 0xfa
 8000c66:	21ec      	movs	r1, #236	@ 0xec
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 fb09 	bl	8003280 <HAL_I2C_Mem_Read>

    // Combine bytes into 20-bit raw temperature value
    temp_adc = ((int32_t)(temp_raw[0] << 12)) | ((int32_t)(temp_raw[1] << 4)) | ((temp_raw[2] >> 4));
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	031a      	lsls	r2, r3, #12
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]

    // Compensate temperature using calibration data
    var1 = (((float)temp_adc) / 16384.0 - ((float)calib_data->dig_T1) / 1024.0) * ((float)calib_data->dig_T2);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c90:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d80 <BMP280_ReadTemperature+0x138>
 8000c94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ca8:	ed9f 4b37 	vldr	d4, [pc, #220]	@ 8000d88 <BMP280_ReadTemperature+0x140>
 8000cac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
    var2 = ((((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0) * (((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0)) * ((float)calib_data->dig_T3);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000ce4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf8:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000cfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 4b1f 	vldr	d4, [pc, #124]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000d16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d2a:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000d2e:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
    temperature = (var1 + var2) / 5120.0;
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <BMP280_ReadTemperature+0x158>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40d00000 	.word	0x40d00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40900000 	.word	0x40900000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	41000000 	.word	0x41000000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40c00000 	.word	0x40c00000
 8000da0:	45a00000 	.word	0x45a00000

08000da4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e50:	2332      	movs	r3, #50	@ 0x32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0x160>)
 8000e6c:	f001 fe76 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e70:	2386      	movs	r3, #134	@ 0x86
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000e8c:	f001 fe66 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x168>)
 8000eae:	f001 fe55 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000ed0:	f001 fe44 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x16c>)
 8000ef2:	f001 fe33 	bl	8002b5c <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f001 ffe2 	bl	8002f18 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fb03 	bl	8001564 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f003 fbdd 	bl	8004720 <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 fafa 	bl	8001564 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 fc1f 	bl	80047b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 faf1 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000204 	.word	0x24000204
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	00707cbb 	.word	0x00707cbb

08000f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	@ 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22c0      	movs	r2, #192	@ 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b fa70 	bl	800c49a <memset>
  if(i2cHandle->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <HAL_I2C_MspInit+0xe4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d155      	bne.n	8001070 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	f04f 0208 	mov.w	r2, #8
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fc78 	bl	80058d0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f000 fabd 	bl	8001564 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <HAL_I2C_MspInit+0xec>)
 800102e:	f001 fd95 	bl	8002b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	201f      	movs	r0, #31
 8001056:	f000 ffda 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800105a:	201f      	movs	r0, #31
 800105c:	f000 fff1 	bl	8002042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2020      	movs	r0, #32
 8001066:	f000 ffd2 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800106a:	2020      	movs	r0, #32
 800106c:	f000 ffe9 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	37e8      	adds	r7, #232	@ 0xe8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001090:	bf00      	nop
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <main+0x114>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x24>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dcf4      	bgt.n	8001092 <main+0xe>
  if ( timeout < 0 )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <main+0x2e>
  {
  Error_Handler();
 80010ae:	f000 fa59 	bl	8001564 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fe33 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f887 	bl	80011c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010ba:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <main+0x114>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a35      	ldr	r2, [pc, #212]	@ (8001198 <main+0x114>)
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <main+0x114>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 feef 	bl	8002ebc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 ff05 	bl	8002ef0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80010e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ea:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010ec:	bf00      	nop
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <main+0x114>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <main+0x80>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dcf4      	bgt.n	80010ee <main+0x6a>
if ( timeout < 0 )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <main+0x8a>
{
Error_Handler();
 800110a:	f000 fa2b 	bl	8001564 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff fe49 	bl	8000da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001112:	f7ff feff 	bl	8000f14 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001116:	f000 fd19 	bl	8001b4c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800111a:	f000 fbe3 	bl	80018e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800111e:	f000 fc2f 	bl	8001980 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1);
 8001122:	481e      	ldr	r0, [pc, #120]	@ (800119c <main+0x118>)
 8001124:	f7ff fd36 	bl	8000b94 <BMP280_Init>


  BMP280_ReadCalibrationData(&hi2c1, &calib_data);
 8001128:	491d      	ldr	r1, [pc, #116]	@ (80011a0 <main+0x11c>)
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <main+0x118>)
 800112c:	f7ff fd56 	bl	8000bdc <BMP280_ReadCalibrationData>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001130:	2108      	movs	r1, #8
 8001132:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <main+0x120>)
 8001134:	f006 fc9e 	bl	8007a74 <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <main+0x120>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c
  	  htim3.Init.Period = 999;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <main+0x120>)
 8001142:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim3);
 8001148:	4816      	ldr	r0, [pc, #88]	@ (80011a4 <main+0x120>)
 800114a:	f006 f9ed 	bl	8007528 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 800114e:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <main+0x120>)
 8001150:	f006 fa42 	bl	80075d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001154:	2108      	movs	r1, #8
 8001156:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <main+0x120>)
 8001158:	f006 fb7e 	bl	8007858 <HAL_TIM_PWM_Start>

  pid_init(&pid_controller,  kp,  ki,  kd,5000);
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <main+0x124>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <main+0x128>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <main+0x12c>)
 800116a:	edd3 6a00 	vldr	s13, [r3]
 800116e:	eddf 1a11 	vldr	s3, [pc, #68]	@ 80011b4 <main+0x130>
 8001172:	eeb0 1a66 	vmov.f32	s2, s13
 8001176:	eef0 0a47 	vmov.f32	s1, s14
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <main+0x134>)
 8001180:	f000 f9f6 	bl	8001570 <pid_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <main+0x138>)
 8001186:	f006 fa97 	bl	80076b8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, wejscie, 3);
 800118a:	2203      	movs	r2, #3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <main+0x13c>)
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <main+0x140>)
 8001190:	f007 fe0c 	bl	8008dac <HAL_UART_Receive_IT>

  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <main+0x110>
 8001198:	58024400 	.word	0x58024400
 800119c:	24000204 	.word	0x24000204
 80011a0:	24000258 	.word	0x24000258
 80011a4:	240002e4 	.word	0x240002e4
 80011a8:	2400000c 	.word	0x2400000c
 80011ac:	24000010 	.word	0x24000010
 80011b0:	24000014 	.word	0x24000014
 80011b4:	459c4000 	.word	0x459c4000
 80011b8:	2400026c 	.word	0x2400026c
 80011bc:	24000298 	.word	0x24000298
 80011c0:	24000264 	.word	0x24000264
 80011c4:	24000330 	.word	0x24000330

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09c      	sub	sp, #112	@ 0x70
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	224c      	movs	r2, #76	@ 0x4c
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00b f95f 	bl	800c49a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2220      	movs	r2, #32
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00b f959 	bl	800c49a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011e8:	2004      	movs	r0, #4
 80011ea:	f003 fb31 	bl	8004850 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <SystemClock_Config+0xcc>)
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <SystemClock_Config+0xcc>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <SystemClock_Config+0xcc>)
 8001200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <SystemClock_Config+0xd0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <SystemClock_Config+0xd0>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <SystemClock_Config+0xd0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001224:	bf00      	nop
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <SystemClock_Config+0xd0>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800122e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001232:	d1f8      	bne.n	8001226 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001238:	2301      	movs	r3, #1
 800123a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2340      	movs	r3, #64	@ 0x40
 800123e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fb5b 	bl	8004904 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001254:	f000 f986 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	233f      	movs	r3, #63	@ 0x3f
 800125a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800126c:	2340      	movs	r3, #64	@ 0x40
 800126e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f003 ff9b 	bl	80051b8 <HAL_RCC_ClockConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001288:	f000 f96c 	bl	8001564 <Error_Handler>
  }
}
 800128c:	bf00      	nop
 800128e:	3770      	adds	r7, #112	@ 0x70
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58000400 	.word	0x58000400
 8001298:	58024800 	.word	0x58024800

0800129c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ba      	sub	sp, #232	@ 0xe8
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ac:	f040 80d2 	bne.w	8001454 <HAL_TIM_PeriodElapsedCallback+0x1b8>
  {
    // Timer interrupt triggered, perform UART transmission here
    temperature = BMP280_ReadTemperature(&hi2c1, &calib_data);
 80012b0:	496a      	ldr	r1, [pc, #424]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80012b2:	486b      	ldr	r0, [pc, #428]	@ (8001460 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80012b4:	f7ff fcc8 	bl	8000c48 <BMP280_ReadTemperature>
 80012b8:	eef0 7a40 	vmov.f32	s15, s0
 80012bc:	4b69      	ldr	r3, [pc, #420]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80012be:	edc3 7a00 	vstr	s15, [r3]
    pid_output = pid_calculate(&pid_controller, wartosc, temperature);
 80012c2:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	4b66      	ldr	r3, [pc, #408]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	eef0 0a47 	vmov.f32	s1, s14
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	4865      	ldr	r0, [pc, #404]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80012d8:	f000 f974 	bl	80015c4 <pid_calculate>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]

    char pid[50];
    snprintf(pid, sizeof(pid), "sygnal z pid: %.2f \r\n", pid_output);
 80012e6:	4b62      	ldr	r3, [pc, #392]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	ed8d 7b00 	vstr	d7, [sp]
 80012f8:	4a5e      	ldr	r2, [pc, #376]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80012fa:	2132      	movs	r1, #50	@ 0x32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00b f835 	bl	800c36c <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)pid, strlen(pid), HAL_MAX_DELAY);
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f83a 	bl	8000380 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 0108 	add.w	r1, r7, #8
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	4857      	ldr	r0, [pc, #348]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800131a:	f007 fcb9 	bl	8008c90 <HAL_UART_Transmit>


    // Definicja zakresu PID
    int min_pid = 0; // Minimalna wartość wyjścia PID
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int max_pid = 1000;  // Maksymalna wartość wyjścia PID
 8001324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

           // Skalowanie wyniku PID na zakres 0-100
    scaled_output = ((pid_output - min_pid) / (float)(max_pid - min_pid))*1000.0;
 800132c:	4b50      	ldr	r3, [pc, #320]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800132e:	ed93 7a00 	vldr	s14, [r3]
 8001332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001342:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800147c <HAL_TIM_PeriodElapsedCallback+0x1e0>
 800135c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001360:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001362:	edc3 7a00 	vstr	s15, [r3]

     //scaled_output =  sigmoid(pid_output)*100;
     char sygnal[50];


     snprintf(sygnal, sizeof(sygnal), "sygnal sterujacy: %.2f \r\n", scaled_output);
 8001366:	4b46      	ldr	r3, [pc, #280]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001370:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001374:	ed8d 7b00 	vstr	d7, [sp]
 8001378:	4a42      	ldr	r2, [pc, #264]	@ (8001484 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800137a:	2132      	movs	r1, #50	@ 0x32
 800137c:	4618      	mov	r0, r3
 800137e:	f00a fff5 	bl	800c36c <sniprintf>

     HAL_UART_Transmit(&huart3, (uint8_t *)sygnal, strlen(sygnal), HAL_MAX_DELAY);
 8001382:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe fffa 	bl	8000380 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	4837      	ldr	r0, [pc, #220]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800139a:	f007 fc79 	bl	8008c90 <HAL_UART_Transmit>

     if (scaled_output < 0.0) {
 800139e:	4b38      	ldr	r3, [pc, #224]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d503      	bpl.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
         final_output = 0;
 80013ae:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e017      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x14a>
     } else if (scaled_output > 1000.0) {
 80013b6:	4b32      	ldr	r3, [pc, #200]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800147c <HAL_TIM_PeriodElapsedCallback+0x1e0>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd04      	ble.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x138>
         final_output = 1000;
 80013ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e008      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x14a>
     } else {
         final_output = (int)scaled_output;  // rzutowanie na int
 80013d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013de:	ee17 2a90 	vmov	r2, s15
 80013e2:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013e4:	601a      	str	r2, [r3, #0]
     }

     char ost[50];
     snprintf(ost, sizeof(ost), "sygnal finalny: %d \r\n", final_output);
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80013ee:	4a27      	ldr	r2, [pc, #156]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80013f0:	2132      	movs	r1, #50	@ 0x32
 80013f2:	f00a ffbb 	bl	800c36c <sniprintf>

     HAL_UART_Transmit(&huart3, (uint8_t *)ost, strlen(ost), HAL_MAX_DELAY);
 80013f6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe ffc0 	bl	8000380 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	481a      	ldr	r0, [pc, #104]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800140e:	f007 fc3f 	bl	8008c90 <HAL_UART_Transmit>


           // Ustawienie wypełnienia PWM
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, final_output);
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	63da      	str	r2, [r3, #60]	@ 0x3c
    char uart_msg[50];
    snprintf(uart_msg, sizeof(uart_msg), "Temperature: %.2f C\r\n", temperature);
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001426:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800142a:	ed8d 7b00 	vstr	d7, [sp]
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001430:	2132      	movs	r1, #50	@ 0x32
 8001432:	4618      	mov	r0, r3
 8001434:	f00a ff9a 	bl	800c36c <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8001438:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff9f 	bl	8000380 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	480a      	ldr	r0, [pc, #40]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001450:	f007 fc1e 	bl	8008c90 <HAL_UART_Transmit>

  }
}
 8001454:	bf00      	nop
 8001456:	37e0      	adds	r7, #224	@ 0xe0
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	24000258 	.word	0x24000258
 8001460:	24000204 	.word	0x24000204
 8001464:	24000260 	.word	0x24000260
 8001468:	24000008 	.word	0x24000008
 800146c:	2400026c 	.word	0x2400026c
 8001470:	24000288 	.word	0x24000288
 8001474:	0800f9e8 	.word	0x0800f9e8
 8001478:	24000330 	.word	0x24000330
 800147c:	447a0000 	.word	0x447a0000
 8001480:	2400028c 	.word	0x2400028c
 8001484:	0800fa00 	.word	0x0800fa00
 8001488:	24000290 	.word	0x24000290
 800148c:	0800fa1c 	.word	0x0800fa1c
 8001490:	240002e4 	.word	0x240002e4
 8001494:	0800fa34 	.word	0x0800fa34

08001498 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a27      	ldr	r2, [pc, #156]	@ (8001544 <HAL_UART_RxCpltCallback+0xac>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d148      	bne.n	800153c <HAL_UART_RxCpltCallback+0xa4>
        // Sprawdzamy, czy odebrano poprawne dane
        if (strncmp("B", (char*)wejscie, 1) == 0) {
 80014aa:	2201      	movs	r2, #1
 80014ac:	4926      	ldr	r1, [pc, #152]	@ (8001548 <HAL_UART_RxCpltCallback+0xb0>)
 80014ae:	4827      	ldr	r0, [pc, #156]	@ (800154c <HAL_UART_RxCpltCallback+0xb4>)
 80014b0:	f00a fffb 	bl	800c4aa <strncmp>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d13b      	bne.n	8001532 <HAL_UART_RxCpltCallback+0x9a>
        	 	pomoc[0] = wejscie[1];
 80014ba:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <HAL_UART_RxCpltCallback+0xb0>)
 80014bc:	785a      	ldrb	r2, [r3, #1]
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_UART_RxCpltCallback+0xb8>)
 80014c0:	701a      	strb	r2, [r3, #0]
        	    pomoc[1] = wejscie[2];
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <HAL_UART_RxCpltCallback+0xb0>)
 80014c4:	789a      	ldrb	r2, [r3, #2]
 80014c6:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <HAL_UART_RxCpltCallback+0xb8>)
 80014c8:	705a      	strb	r2, [r3, #1]
        	HAL_UART_Transmit(&huart3, pomoc, 3, 10);
 80014ca:	230a      	movs	r3, #10
 80014cc:	2203      	movs	r2, #3
 80014ce:	4920      	ldr	r1, [pc, #128]	@ (8001550 <HAL_UART_RxCpltCallback+0xb8>)
 80014d0:	4820      	ldr	r0, [pc, #128]	@ (8001554 <HAL_UART_RxCpltCallback+0xbc>)
 80014d2:	f007 fbdd 	bl	8008c90 <HAL_UART_Transmit>
            // Konwertujemy na float
        	wartosc =(float) atoi(pomoc)+0.1f;
 80014d6:	481e      	ldr	r0, [pc, #120]	@ (8001550 <HAL_UART_RxCpltCallback+0xb8>)
 80014d8:	f009 ffb8 	bl	800b44c <atoi>
 80014dc:	ee07 0a90 	vmov	s15, r0
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001558 <HAL_UART_RxCpltCallback+0xc0>
 80014e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_UART_RxCpltCallback+0xc4>)
 80014ee:	edc3 7a00 	vstr	s15, [r3]

            // Wysyłamy wynik przez UART
            char transmit_msg[10];
            snprintf(transmit_msg, sizeof(transmit_msg), "R%.1f", wartosc);
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_UART_RxCpltCallback+0xc4>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	ed8d 7b00 	vstr	d7, [sp]
 8001504:	4a16      	ldr	r2, [pc, #88]	@ (8001560 <HAL_UART_RxCpltCallback+0xc8>)
 8001506:	210a      	movs	r1, #10
 8001508:	4618      	mov	r0, r3
 800150a:	f00a ff2f 	bl	800c36c <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)transmit_msg, strlen(transmit_msg), 10);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff34 	bl	8000380 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	f107 010c 	add.w	r1, r7, #12
 8001520:	230a      	movs	r3, #10
 8001522:	480c      	ldr	r0, [pc, #48]	@ (8001554 <HAL_UART_RxCpltCallback+0xbc>)
 8001524:	f007 fbb4 	bl	8008c90 <HAL_UART_Transmit>

            // Czyszczenie bufora wejściowego, aby gotowy był do kolejnego odbioru
            memset(wejscie, ' ', 3);
 8001528:	2203      	movs	r2, #3
 800152a:	2120      	movs	r1, #32
 800152c:	4806      	ldr	r0, [pc, #24]	@ (8001548 <HAL_UART_RxCpltCallback+0xb0>)
 800152e:	f00a ffb4 	bl	800c49a <memset>

            // Zainicjuj ponownie odbiór danych w trybie przerwania

        }
        HAL_UART_Receive_IT(&huart3, (uint8_t*)wejscie, 3);
 8001532:	2203      	movs	r2, #3
 8001534:	4904      	ldr	r1, [pc, #16]	@ (8001548 <HAL_UART_RxCpltCallback+0xb0>)
 8001536:	4807      	ldr	r0, [pc, #28]	@ (8001554 <HAL_UART_RxCpltCallback+0xbc>)
 8001538:	f007 fc38 	bl	8008dac <HAL_UART_Receive_IT>
    }
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40004800 	.word	0x40004800
 8001548:	24000264 	.word	0x24000264
 800154c:	0800fa4c 	.word	0x0800fa4c
 8001550:	24000268 	.word	0x24000268
 8001554:	24000330 	.word	0x24000330
 8001558:	3dcccccd 	.word	0x3dcccccd
 800155c:	24000008 	.word	0x24000008
 8001560:	0800fa50 	.word	0x0800fa50

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <Error_Handler+0x8>

08001570 <pid_init>:
#include "pid.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float anti_windup_limit_init)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6178      	str	r0, [r7, #20]
 8001578:	ed87 0a04 	vstr	s0, [r7, #16]
 800157c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001580:	ed87 1a02 	vstr	s2, [r7, #8]
 8001584:	edc7 1a01 	vstr	s3, [r7, #4]
	pid_data->previous_error = 0;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	605a      	str	r2, [r3, #4]

	pid_data->previous_i_term = 0;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

	pid_data->Kp = kp_init;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]
}
 80015b8:	bf00      	nop
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <pid_calculate>:
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}

float pid_calculate(pid_str *pid_data, float setpoint, float process_variable)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b08b      	sub	sp, #44	@ 0x2c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80015d0:	edc7 0a01 	vstr	s1, [r7, #4]
	 float error = setpoint - process_variable;
 80015d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24




	    float p_term = pid_data->Kp * error;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	edc7 7a08 	vstr	s15, [r7, #32]

	    float i_term = pid_data->Ki * pid_data->total_error;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	edc7 7a07 	vstr	s15, [r7, #28]
//	    if (abs(error)<setpoint/10.0)
//	    	{pid_data->total_error += error;
//	    	i_term = pid_data->Ki * pid_data->total_error;}


	    float d_term = pid_data->Kd * (error - pid_data->previous_error);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800161a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800161e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001622:	edc7 7a06 	vstr	s15, [r7, #24]
//
//	    if (i_term > pid_data->anti_windup_limit){ i_term = pid_data->anti_windup_limit;}
//	    if (i_term < -pid_data->anti_windup_limit) {i_term = -pid_data->anti_windup_limit;}

	    pid_data->previous_error = error;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800162a:	601a      	str	r2, [r3, #0]

	    pid_data->previous_i_term = i_term;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	619a      	str	r2, [r3, #24]

	    float output = (float)(p_term + i_term + d_term);
 8001632:	ed97 7a08 	vldr	s14, [r7, #32]
 8001636:	edd7 7a07 	vldr	s15, [r7, #28]
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001646:	edc7 7a05 	vstr	s15, [r7, #20]
	    return output;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	ee07 3a90 	vmov	s15, r3
}
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	372c      	adds	r7, #44	@ 0x2c
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_MspInit+0x30>)
 8001668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800166c:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_MspInit+0x30>)
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_MspInit+0x30>)
 8001678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	58024400 	.word	0x58024400

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <NMI_Handler+0x4>

0800169c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <MemManage_Handler+0x4>

080016ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <UsageFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 fb89 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <TIM2_IRQHandler+0x10>)
 80016fa:	f006 fa51 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24000298 	.word	0x24000298

08001708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <TIM3_IRQHandler+0x10>)
 800170e:	f006 fa47 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	240002e4 	.word	0x240002e4

0800171c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <I2C1_EV_IRQHandler+0x10>)
 8001722:	f001 fec7 	bl	80034b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24000204 	.word	0x24000204

08001730 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <I2C1_ER_IRQHandler+0x10>)
 8001736:	f001 fed7 	bl	80034e8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	24000204 	.word	0x24000204

08001744 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <USART3_IRQHandler+0x10>)
 800174a:	f007 fb7b 	bl	8008e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000330 	.word	0x24000330

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001772:	f00a fef7 	bl	800c564 <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
  return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <_exit+0x12>

0800179e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00a      	b.n	80017c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b0:	f3af 8000 	nop.w
 80017b4:	4601      	mov	r1, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf0      	blt.n	80017b0 <_read+0x12>
  }

  return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e009      	b.n	80017fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	60ba      	str	r2, [r7, #8]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	dbf1      	blt.n	80017ea <_write+0x12>
  }
  return len;
 8001806:	687b      	ldr	r3, [r7, #4]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_close>:

int _close(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001838:	605a      	str	r2, [r3, #4]
  return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_isatty>:

int _isatty(int file)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f00a fe5c 	bl	800c564 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	24080000 	.word	0x24080000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	24000294 	.word	0x24000294
 80018e0:	24000518 	.word	0x24000518

080018e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001902:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <MX_TIM2_Init+0x98>)
 8001904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001908:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800190a:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <MX_TIM2_Init+0x98>)
 800190c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001910:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_TIM2_Init+0x98>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_TIM2_Init+0x98>)
 800191a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800191e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_TIM2_Init+0x98>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <MX_TIM2_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <MX_TIM2_Init+0x98>)
 800192e:	f005 fdfb 	bl	8007528 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001938:	f7ff fe14 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001940:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <MX_TIM2_Init+0x98>)
 800194a:	f006 fb45 	bl	8007fd8 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001954:	f7ff fe06 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_TIM2_Init+0x98>)
 8001966:	f007 f897 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001970:	f7ff fdf8 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	24000298 	.word	0x24000298

08001980 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	463b      	mov	r3, r7
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	615a      	str	r2, [r3, #20]
 80019a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019a6:	4a23      	ldr	r2, [pc, #140]	@ (8001a34 <MX_TIM3_Init+0xb4>)
 80019a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80019aa:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019ac:	223f      	movs	r2, #63	@ 0x3f
 80019ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ca:	4819      	ldr	r0, [pc, #100]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019cc:	f005 feec 	bl	80077a8 <HAL_TIM_PWM_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80019d6:	f7ff fdc5 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4811      	ldr	r0, [pc, #68]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 80019ea:	f007 f855 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019f4:	f7ff fdb6 	bl	8001564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	2360      	movs	r3, #96	@ 0x60
 80019fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80019fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 8001a12:	f006 f9cd 	bl	8007db0 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001a1c:	f7ff fda2 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a20:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <MX_TIM3_Init+0xb0>)
 8001a22:	f000 f857 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	240002e4 	.word	0x240002e4
 8001a34:	40000400 	.word	0x40000400

08001a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a48:	d116      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f000 face 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a72:	201c      	movs	r0, #28
 8001a74:	f000 fae5 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	58024400 	.word	0x58024400

08001a84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_TIM_PWM_MspInit+0x48>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d116      	bne.n	8001ac4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	201d      	movs	r0, #29
 8001aba:	f000 faa8 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001abe:	201d      	movs	r0, #29
 8001ac0:	f000 fabf 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	58024400 	.word	0x58024400

08001ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11f      	bne.n	8001b36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <HAL_TIM_MspPostInit+0x70>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001afc:	4a11      	ldr	r2, [pc, #68]	@ (8001b44 <HAL_TIM_MspPostInit+0x70>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_TIM_MspPostInit+0x70>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <HAL_TIM_MspPostInit+0x74>)
 8001b32:	f001 f813 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40000400 	.word	0x40000400
 8001b44:	58024400 	.word	0x58024400
 8001b48:	58020800 	.word	0x58020800

08001b4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b52:	4a23      	ldr	r2, [pc, #140]	@ (8001be0 <MX_USART3_UART_Init+0x94>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b94:	4811      	ldr	r0, [pc, #68]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001b96:	f007 f82b 	bl	8008bf0 <HAL_UART_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ba0:	f7ff fce0 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001ba8:	f009 fb85 	bl	800b2b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bb2:	f7ff fcd7 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001bba:	f009 fbba 	bl	800b332 <HAL_UARTEx_SetRxFifoThreshold>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f7ff fcce 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_USART3_UART_Init+0x90>)
 8001bca:	f009 fb3b 	bl	800b244 <HAL_UARTEx_DisableFifoMode>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd4:	f7ff fcc6 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000330 	.word	0x24000330
 8001be0:	40004800 	.word	0x40004800

08001be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0ba      	sub	sp, #232	@ 0xe8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	22c0      	movs	r2, #192	@ 0xc0
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00a fc48 	bl	800c49a <memset>
  if(uartHandle->Instance==USART3)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cbc <HAL_UART_MspInit+0xd8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d14e      	bne.n	8001cb2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c14:	f04f 0202 	mov.w	r2, #2
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fe50 	bl	80058d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c36:	f7ff fc95 	bl	8001564 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_UART_MspInit+0xdc>)
 8001c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c40:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_UART_MspInit+0xdc>)
 8001c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_UART_MspInit+0xdc>)
 8001c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_UART_MspInit+0xdc>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <HAL_UART_MspInit+0xdc>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_UART_MspInit+0xdc>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c90:	2307      	movs	r3, #7
 8001c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4809      	ldr	r0, [pc, #36]	@ (8001cc4 <HAL_UART_MspInit+0xe0>)
 8001c9e:	f000 ff5d 	bl	8002b5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2027      	movs	r0, #39	@ 0x27
 8001ca8:	f000 f9b1 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cac:	2027      	movs	r0, #39	@ 0x27
 8001cae:	f000 f9c8 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	37e8      	adds	r7, #232	@ 0xe8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40004800 	.word	0x40004800
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	58020c00 	.word	0x58020c00

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ccc:	f7fe fecc 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f00a fc3b 	bl	800c570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff f9c3 	bl	8001084 <main>
  bx  lr
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d08:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001d0c:	0800fed0 	.word	0x0800fed0
  ldr r2, =_sbss
 8001d10:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001d14:	24000514 	.word	0x24000514

08001d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC3_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f000 f968 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d28:	f003 fbfc 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_Init+0x68>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	4913      	ldr	r1, [pc, #76]	@ (8001d88 <HAL_Init+0x6c>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_Init+0x68>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <HAL_Init+0x6c>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d8c <HAL_Init+0x70>)
 8001d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d60:	4a0b      	ldr	r2, [pc, #44]	@ (8001d90 <HAL_Init+0x74>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f814 	bl	8001d94 <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e002      	b.n	8001d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d76:	f7ff fc73 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58024400 	.word	0x58024400
 8001d88:	0800fa58 	.word	0x0800fa58
 8001d8c:	24000004 	.word	0x24000004
 8001d90:	24000000 	.word	0x24000000

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d9c:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_InitTick+0x60>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e021      	b.n	8001dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <HAL_InitTick+0x64>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_InitTick+0x60>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f94d 	bl	800205e <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 f917 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	@ (8001dfc <HAL_InitTick+0x68>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2400001c 	.word	0x2400001c
 8001df8:	24000000 	.word	0x24000000
 8001dfc:	24000018 	.word	0x24000018

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	2400001c 	.word	0x2400001c
 8001e24:	240003c4 	.word	0x240003c4

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	240003c4 	.word	0x240003c4

08001e40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetREVID+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0c1b      	lsrs	r3, r3, #16
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	5c001000 	.word	0x5c001000

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x40>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x40>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	05fa0000 	.word	0x05fa0000

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	@ (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	@ (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	@ (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff8e 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff29 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff40 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff90 	bl	8001f4c <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5f 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff33 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa4 	bl	8001fb4 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fed2 	bl	8001e28 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e2dc      	b.n	800264a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d008      	beq.n	80020ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2280      	movs	r2, #128	@ 0x80
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e2cd      	b.n	800264a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a76      	ldr	r2, [pc, #472]	@ (800228c <HAL_DMA_Abort+0x214>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04a      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a74      	ldr	r2, [pc, #464]	@ (8002290 <HAL_DMA_Abort+0x218>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d045      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a73      	ldr	r2, [pc, #460]	@ (8002294 <HAL_DMA_Abort+0x21c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d040      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a71      	ldr	r2, [pc, #452]	@ (8002298 <HAL_DMA_Abort+0x220>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d03b      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a70      	ldr	r2, [pc, #448]	@ (800229c <HAL_DMA_Abort+0x224>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d036      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	@ (80022a0 <HAL_DMA_Abort+0x228>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d031      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6d      	ldr	r2, [pc, #436]	@ (80022a4 <HAL_DMA_Abort+0x22c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d02c      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6b      	ldr	r2, [pc, #428]	@ (80022a8 <HAL_DMA_Abort+0x230>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d027      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6a      	ldr	r2, [pc, #424]	@ (80022ac <HAL_DMA_Abort+0x234>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a68      	ldr	r2, [pc, #416]	@ (80022b0 <HAL_DMA_Abort+0x238>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01d      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a67      	ldr	r2, [pc, #412]	@ (80022b4 <HAL_DMA_Abort+0x23c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d018      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a65      	ldr	r2, [pc, #404]	@ (80022b8 <HAL_DMA_Abort+0x240>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a64      	ldr	r2, [pc, #400]	@ (80022bc <HAL_DMA_Abort+0x244>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a62      	ldr	r2, [pc, #392]	@ (80022c0 <HAL_DMA_Abort+0x248>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a61      	ldr	r2, [pc, #388]	@ (80022c4 <HAL_DMA_Abort+0x24c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_DMA_Abort+0xd6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a5f      	ldr	r2, [pc, #380]	@ (80022c8 <HAL_DMA_Abort+0x250>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Abort+0xda>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_DMA_Abort+0xdc>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 021e 	bic.w	r2, r2, #30
 8002166:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002176:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e00a      	b.n	8002196 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 020e 	bic.w	r2, r2, #14
 800218e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3c      	ldr	r2, [pc, #240]	@ (800228c <HAL_DMA_Abort+0x214>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d072      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002290 <HAL_DMA_Abort+0x218>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d06d      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a39      	ldr	r2, [pc, #228]	@ (8002294 <HAL_DMA_Abort+0x21c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d068      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a37      	ldr	r2, [pc, #220]	@ (8002298 <HAL_DMA_Abort+0x220>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d063      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a36      	ldr	r2, [pc, #216]	@ (800229c <HAL_DMA_Abort+0x224>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d05e      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a34      	ldr	r2, [pc, #208]	@ (80022a0 <HAL_DMA_Abort+0x228>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d059      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a33      	ldr	r2, [pc, #204]	@ (80022a4 <HAL_DMA_Abort+0x22c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d054      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	@ (80022a8 <HAL_DMA_Abort+0x230>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d04f      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a30      	ldr	r2, [pc, #192]	@ (80022ac <HAL_DMA_Abort+0x234>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04a      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2e      	ldr	r2, [pc, #184]	@ (80022b0 <HAL_DMA_Abort+0x238>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d045      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2d      	ldr	r2, [pc, #180]	@ (80022b4 <HAL_DMA_Abort+0x23c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d040      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2b      	ldr	r2, [pc, #172]	@ (80022b8 <HAL_DMA_Abort+0x240>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d03b      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2a      	ldr	r2, [pc, #168]	@ (80022bc <HAL_DMA_Abort+0x244>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d036      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a28      	ldr	r2, [pc, #160]	@ (80022c0 <HAL_DMA_Abort+0x248>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d031      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a27      	ldr	r2, [pc, #156]	@ (80022c4 <HAL_DMA_Abort+0x24c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d02c      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <HAL_DMA_Abort+0x250>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d027      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a24      	ldr	r2, [pc, #144]	@ (80022cc <HAL_DMA_Abort+0x254>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a22      	ldr	r2, [pc, #136]	@ (80022d0 <HAL_DMA_Abort+0x258>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01d      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	@ (80022d4 <HAL_DMA_Abort+0x25c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d018      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <HAL_DMA_Abort+0x260>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1e      	ldr	r2, [pc, #120]	@ (80022dc <HAL_DMA_Abort+0x264>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <HAL_DMA_Abort+0x268>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <HAL_DMA_Abort+0x26c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Abort+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	@ (80022e8 <HAL_DMA_Abort+0x270>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d132      	bne.n	80022ec <HAL_DMA_Abort+0x274>
 8002286:	2301      	movs	r3, #1
 8002288:	e031      	b.n	80022ee <HAL_DMA_Abort+0x276>
 800228a:	bf00      	nop
 800228c:	40020010 	.word	0x40020010
 8002290:	40020028 	.word	0x40020028
 8002294:	40020040 	.word	0x40020040
 8002298:	40020058 	.word	0x40020058
 800229c:	40020070 	.word	0x40020070
 80022a0:	40020088 	.word	0x40020088
 80022a4:	400200a0 	.word	0x400200a0
 80022a8:	400200b8 	.word	0x400200b8
 80022ac:	40020410 	.word	0x40020410
 80022b0:	40020428 	.word	0x40020428
 80022b4:	40020440 	.word	0x40020440
 80022b8:	40020458 	.word	0x40020458
 80022bc:	40020470 	.word	0x40020470
 80022c0:	40020488 	.word	0x40020488
 80022c4:	400204a0 	.word	0x400204a0
 80022c8:	400204b8 	.word	0x400204b8
 80022cc:	58025408 	.word	0x58025408
 80022d0:	5802541c 	.word	0x5802541c
 80022d4:	58025430 	.word	0x58025430
 80022d8:	58025444 	.word	0x58025444
 80022dc:	58025458 	.word	0x58025458
 80022e0:	5802546c 	.word	0x5802546c
 80022e4:	58025480 	.word	0x58025480
 80022e8:	58025494 	.word	0x58025494
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002300:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6d      	ldr	r2, [pc, #436]	@ (80024bc <HAL_DMA_Abort+0x444>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d04a      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6b      	ldr	r2, [pc, #428]	@ (80024c0 <HAL_DMA_Abort+0x448>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d045      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6a      	ldr	r2, [pc, #424]	@ (80024c4 <HAL_DMA_Abort+0x44c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d040      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a68      	ldr	r2, [pc, #416]	@ (80024c8 <HAL_DMA_Abort+0x450>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d03b      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a67      	ldr	r2, [pc, #412]	@ (80024cc <HAL_DMA_Abort+0x454>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d036      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a65      	ldr	r2, [pc, #404]	@ (80024d0 <HAL_DMA_Abort+0x458>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a64      	ldr	r2, [pc, #400]	@ (80024d4 <HAL_DMA_Abort+0x45c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d02c      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a62      	ldr	r2, [pc, #392]	@ (80024d8 <HAL_DMA_Abort+0x460>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d027      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a61      	ldr	r2, [pc, #388]	@ (80024dc <HAL_DMA_Abort+0x464>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5f      	ldr	r2, [pc, #380]	@ (80024e0 <HAL_DMA_Abort+0x468>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01d      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5e      	ldr	r2, [pc, #376]	@ (80024e4 <HAL_DMA_Abort+0x46c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d018      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5c      	ldr	r2, [pc, #368]	@ (80024e8 <HAL_DMA_Abort+0x470>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ec <HAL_DMA_Abort+0x474>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00e      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a59      	ldr	r2, [pc, #356]	@ (80024f0 <HAL_DMA_Abort+0x478>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a58      	ldr	r2, [pc, #352]	@ (80024f4 <HAL_DMA_Abort+0x47c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_DMA_Abort+0x32a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a56      	ldr	r2, [pc, #344]	@ (80024f8 <HAL_DMA_Abort+0x480>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <HAL_DMA_Abort+0x33c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e007      	b.n	80023c4 <HAL_DMA_Abort+0x34c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023c4:	e013      	b.n	80023ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c6:	f7ff fd2f 	bl	8001e28 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d90c      	bls.n	80023ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2203      	movs	r2, #3
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e12d      	b.n	800264a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e5      	bne.n	80023c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2f      	ldr	r2, [pc, #188]	@ (80024bc <HAL_DMA_Abort+0x444>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04a      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <HAL_DMA_Abort+0x448>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d045      	beq.n	800249a <HAL_DMA_Abort+0x422>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2c      	ldr	r2, [pc, #176]	@ (80024c4 <HAL_DMA_Abort+0x44c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d040      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <HAL_DMA_Abort+0x450>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d03b      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <HAL_DMA_Abort+0x454>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d036      	beq.n	800249a <HAL_DMA_Abort+0x422>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a27      	ldr	r2, [pc, #156]	@ (80024d0 <HAL_DMA_Abort+0x458>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a26      	ldr	r2, [pc, #152]	@ (80024d4 <HAL_DMA_Abort+0x45c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d02c      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <HAL_DMA_Abort+0x460>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d027      	beq.n	800249a <HAL_DMA_Abort+0x422>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a23      	ldr	r2, [pc, #140]	@ (80024dc <HAL_DMA_Abort+0x464>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a21      	ldr	r2, [pc, #132]	@ (80024e0 <HAL_DMA_Abort+0x468>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01d      	beq.n	800249a <HAL_DMA_Abort+0x422>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <HAL_DMA_Abort+0x46c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d018      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1e      	ldr	r2, [pc, #120]	@ (80024e8 <HAL_DMA_Abort+0x470>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1d      	ldr	r2, [pc, #116]	@ (80024ec <HAL_DMA_Abort+0x474>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_DMA_Abort+0x422>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1b      	ldr	r2, [pc, #108]	@ (80024f0 <HAL_DMA_Abort+0x478>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <HAL_DMA_Abort+0x47c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_DMA_Abort+0x422>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <HAL_DMA_Abort+0x480>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_DMA_Abort+0x426>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_DMA_Abort+0x428>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d02b      	beq.n	80024fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	223f      	movs	r2, #63	@ 0x3f
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	e02a      	b.n	8002512 <HAL_DMA_Abort+0x49a>
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2201      	movs	r2, #1
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4f      	ldr	r2, [pc, #316]	@ (8002654 <HAL_DMA_Abort+0x5dc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d072      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4d      	ldr	r2, [pc, #308]	@ (8002658 <HAL_DMA_Abort+0x5e0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d06d      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4c      	ldr	r2, [pc, #304]	@ (800265c <HAL_DMA_Abort+0x5e4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d068      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4a      	ldr	r2, [pc, #296]	@ (8002660 <HAL_DMA_Abort+0x5e8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d063      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a49      	ldr	r2, [pc, #292]	@ (8002664 <HAL_DMA_Abort+0x5ec>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d05e      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a47      	ldr	r2, [pc, #284]	@ (8002668 <HAL_DMA_Abort+0x5f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d059      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a46      	ldr	r2, [pc, #280]	@ (800266c <HAL_DMA_Abort+0x5f4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d054      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a44      	ldr	r2, [pc, #272]	@ (8002670 <HAL_DMA_Abort+0x5f8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04f      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a43      	ldr	r2, [pc, #268]	@ (8002674 <HAL_DMA_Abort+0x5fc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04a      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <HAL_DMA_Abort+0x600>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d045      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a40      	ldr	r2, [pc, #256]	@ (800267c <HAL_DMA_Abort+0x604>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d040      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3e      	ldr	r2, [pc, #248]	@ (8002680 <HAL_DMA_Abort+0x608>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d03b      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3d      	ldr	r2, [pc, #244]	@ (8002684 <HAL_DMA_Abort+0x60c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d036      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3b      	ldr	r2, [pc, #236]	@ (8002688 <HAL_DMA_Abort+0x610>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d031      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a3a      	ldr	r2, [pc, #232]	@ (800268c <HAL_DMA_Abort+0x614>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d02c      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a38      	ldr	r2, [pc, #224]	@ (8002690 <HAL_DMA_Abort+0x618>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d027      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a37      	ldr	r2, [pc, #220]	@ (8002694 <HAL_DMA_Abort+0x61c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a35      	ldr	r2, [pc, #212]	@ (8002698 <HAL_DMA_Abort+0x620>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01d      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a34      	ldr	r2, [pc, #208]	@ (800269c <HAL_DMA_Abort+0x624>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d018      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <HAL_DMA_Abort+0x628>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a31      	ldr	r2, [pc, #196]	@ (80026a4 <HAL_DMA_Abort+0x62c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2f      	ldr	r2, [pc, #188]	@ (80026a8 <HAL_DMA_Abort+0x630>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2e      	ldr	r2, [pc, #184]	@ (80026ac <HAL_DMA_Abort+0x634>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_DMA_Abort+0x58a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2c      	ldr	r2, [pc, #176]	@ (80026b0 <HAL_DMA_Abort+0x638>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Abort+0x58e>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_DMA_Abort+0x590>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002614:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002636:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40020010 	.word	0x40020010
 8002658:	40020028 	.word	0x40020028
 800265c:	40020040 	.word	0x40020040
 8002660:	40020058 	.word	0x40020058
 8002664:	40020070 	.word	0x40020070
 8002668:	40020088 	.word	0x40020088
 800266c:	400200a0 	.word	0x400200a0
 8002670:	400200b8 	.word	0x400200b8
 8002674:	40020410 	.word	0x40020410
 8002678:	40020428 	.word	0x40020428
 800267c:	40020440 	.word	0x40020440
 8002680:	40020458 	.word	0x40020458
 8002684:	40020470 	.word	0x40020470
 8002688:	40020488 	.word	0x40020488
 800268c:	400204a0 	.word	0x400204a0
 8002690:	400204b8 	.word	0x400204b8
 8002694:	58025408 	.word	0x58025408
 8002698:	5802541c 	.word	0x5802541c
 800269c:	58025430 	.word	0x58025430
 80026a0:	58025444 	.word	0x58025444
 80026a4:	58025458 	.word	0x58025458
 80026a8:	5802546c 	.word	0x5802546c
 80026ac:	58025480 	.word	0x58025480
 80026b0:	58025494 	.word	0x58025494

080026b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e237      	b.n	8002b36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e22c      	b.n	8002b36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002854 <HAL_DMA_Abort_IT+0x1a0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d04a      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002858 <HAL_DMA_Abort_IT+0x1a4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d045      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a59      	ldr	r2, [pc, #356]	@ (800285c <HAL_DMA_Abort_IT+0x1a8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d040      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a58      	ldr	r2, [pc, #352]	@ (8002860 <HAL_DMA_Abort_IT+0x1ac>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d03b      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a56      	ldr	r2, [pc, #344]	@ (8002864 <HAL_DMA_Abort_IT+0x1b0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d036      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a55      	ldr	r2, [pc, #340]	@ (8002868 <HAL_DMA_Abort_IT+0x1b4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d031      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a53      	ldr	r2, [pc, #332]	@ (800286c <HAL_DMA_Abort_IT+0x1b8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02c      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a52      	ldr	r2, [pc, #328]	@ (8002870 <HAL_DMA_Abort_IT+0x1bc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d027      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a50      	ldr	r2, [pc, #320]	@ (8002874 <HAL_DMA_Abort_IT+0x1c0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d022      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4f      	ldr	r2, [pc, #316]	@ (8002878 <HAL_DMA_Abort_IT+0x1c4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d01d      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4d      	ldr	r2, [pc, #308]	@ (800287c <HAL_DMA_Abort_IT+0x1c8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d018      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4c      	ldr	r2, [pc, #304]	@ (8002880 <HAL_DMA_Abort_IT+0x1cc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4a      	ldr	r2, [pc, #296]	@ (8002884 <HAL_DMA_Abort_IT+0x1d0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00e      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a49      	ldr	r2, [pc, #292]	@ (8002888 <HAL_DMA_Abort_IT+0x1d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a47      	ldr	r2, [pc, #284]	@ (800288c <HAL_DMA_Abort_IT+0x1d8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_DMA_Abort_IT+0xc8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a46      	ldr	r2, [pc, #280]	@ (8002890 <HAL_DMA_Abort_IT+0x1dc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_DMA_Abort_IT+0xcc>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_DMA_Abort_IT+0xce>
 8002780:	2300      	movs	r3, #0
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8086 	beq.w	8002894 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2204      	movs	r2, #4
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2f      	ldr	r2, [pc, #188]	@ (8002854 <HAL_DMA_Abort_IT+0x1a0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d04a      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2e      	ldr	r2, [pc, #184]	@ (8002858 <HAL_DMA_Abort_IT+0x1a4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d045      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <HAL_DMA_Abort_IT+0x1a8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d040      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002860 <HAL_DMA_Abort_IT+0x1ac>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d03b      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a29      	ldr	r2, [pc, #164]	@ (8002864 <HAL_DMA_Abort_IT+0x1b0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a28      	ldr	r2, [pc, #160]	@ (8002868 <HAL_DMA_Abort_IT+0x1b4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d031      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a26      	ldr	r2, [pc, #152]	@ (800286c <HAL_DMA_Abort_IT+0x1b8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02c      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a25      	ldr	r2, [pc, #148]	@ (8002870 <HAL_DMA_Abort_IT+0x1bc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d027      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a23      	ldr	r2, [pc, #140]	@ (8002874 <HAL_DMA_Abort_IT+0x1c0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d022      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_DMA_Abort_IT+0x1c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01d      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a20      	ldr	r2, [pc, #128]	@ (800287c <HAL_DMA_Abort_IT+0x1c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d018      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <HAL_DMA_Abort_IT+0x1cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_DMA_Abort_IT+0x1d0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_DMA_Abort_IT+0x1d4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <HAL_DMA_Abort_IT+0x1d8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_DMA_Abort_IT+0x17c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_DMA_Abort_IT+0x1dc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <HAL_DMA_Abort_IT+0x18e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e178      	b.n	8002b34 <HAL_DMA_Abort_IT+0x480>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e16f      	b.n	8002b34 <HAL_DMA_Abort_IT+0x480>
 8002854:	40020010 	.word	0x40020010
 8002858:	40020028 	.word	0x40020028
 800285c:	40020040 	.word	0x40020040
 8002860:	40020058 	.word	0x40020058
 8002864:	40020070 	.word	0x40020070
 8002868:	40020088 	.word	0x40020088
 800286c:	400200a0 	.word	0x400200a0
 8002870:	400200b8 	.word	0x400200b8
 8002874:	40020410 	.word	0x40020410
 8002878:	40020428 	.word	0x40020428
 800287c:	40020440 	.word	0x40020440
 8002880:	40020458 	.word	0x40020458
 8002884:	40020470 	.word	0x40020470
 8002888:	40020488 	.word	0x40020488
 800288c:	400204a0 	.word	0x400204a0
 8002890:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020e 	bic.w	r2, r2, #14
 80028a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6c      	ldr	r2, [pc, #432]	@ (8002a5c <HAL_DMA_Abort_IT+0x3a8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d04a      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a60 <HAL_DMA_Abort_IT+0x3ac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d045      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a69      	ldr	r2, [pc, #420]	@ (8002a64 <HAL_DMA_Abort_IT+0x3b0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d040      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a68      	ldr	r2, [pc, #416]	@ (8002a68 <HAL_DMA_Abort_IT+0x3b4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d03b      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <HAL_DMA_Abort_IT+0x3b8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d036      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a65      	ldr	r2, [pc, #404]	@ (8002a70 <HAL_DMA_Abort_IT+0x3bc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d031      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a63      	ldr	r2, [pc, #396]	@ (8002a74 <HAL_DMA_Abort_IT+0x3c0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02c      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a62      	ldr	r2, [pc, #392]	@ (8002a78 <HAL_DMA_Abort_IT+0x3c4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d027      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a60      	ldr	r2, [pc, #384]	@ (8002a7c <HAL_DMA_Abort_IT+0x3c8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d022      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5f      	ldr	r2, [pc, #380]	@ (8002a80 <HAL_DMA_Abort_IT+0x3cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d01d      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a84 <HAL_DMA_Abort_IT+0x3d0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d018      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5c      	ldr	r2, [pc, #368]	@ (8002a88 <HAL_DMA_Abort_IT+0x3d4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5a      	ldr	r2, [pc, #360]	@ (8002a8c <HAL_DMA_Abort_IT+0x3d8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00e      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a59      	ldr	r2, [pc, #356]	@ (8002a90 <HAL_DMA_Abort_IT+0x3dc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a57      	ldr	r2, [pc, #348]	@ (8002a94 <HAL_DMA_Abort_IT+0x3e0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_DMA_Abort_IT+0x290>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a56      	ldr	r2, [pc, #344]	@ (8002a98 <HAL_DMA_Abort_IT+0x3e4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <HAL_DMA_Abort_IT+0x2a2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e007      	b.n	8002966 <HAL_DMA_Abort_IT+0x2b2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a5c <HAL_DMA_Abort_IT+0x3a8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d072      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a3a      	ldr	r2, [pc, #232]	@ (8002a60 <HAL_DMA_Abort_IT+0x3ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d06d      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a39      	ldr	r2, [pc, #228]	@ (8002a64 <HAL_DMA_Abort_IT+0x3b0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d068      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a37      	ldr	r2, [pc, #220]	@ (8002a68 <HAL_DMA_Abort_IT+0x3b4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d063      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a36      	ldr	r2, [pc, #216]	@ (8002a6c <HAL_DMA_Abort_IT+0x3b8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d05e      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a34      	ldr	r2, [pc, #208]	@ (8002a70 <HAL_DMA_Abort_IT+0x3bc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d059      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a33      	ldr	r2, [pc, #204]	@ (8002a74 <HAL_DMA_Abort_IT+0x3c0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d054      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a31      	ldr	r2, [pc, #196]	@ (8002a78 <HAL_DMA_Abort_IT+0x3c4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04f      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a30      	ldr	r2, [pc, #192]	@ (8002a7c <HAL_DMA_Abort_IT+0x3c8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a80 <HAL_DMA_Abort_IT+0x3cc>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <HAL_DMA_Abort_IT+0x3d0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a88 <HAL_DMA_Abort_IT+0x3d4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <HAL_DMA_Abort_IT+0x3d8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <HAL_DMA_Abort_IT+0x3dc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a27      	ldr	r2, [pc, #156]	@ (8002a94 <HAL_DMA_Abort_IT+0x3e0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a25      	ldr	r2, [pc, #148]	@ (8002a98 <HAL_DMA_Abort_IT+0x3e4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <HAL_DMA_Abort_IT+0x3e8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_DMA_Abort_IT+0x3ec>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a21      	ldr	r2, [pc, #132]	@ (8002aa4 <HAL_DMA_Abort_IT+0x3f0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <HAL_DMA_Abort_IT+0x3f4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1e      	ldr	r2, [pc, #120]	@ (8002aac <HAL_DMA_Abort_IT+0x3f8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab0 <HAL_DMA_Abort_IT+0x3fc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab4 <HAL_DMA_Abort_IT+0x400>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x3a2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a19      	ldr	r2, [pc, #100]	@ (8002ab8 <HAL_DMA_Abort_IT+0x404>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d132      	bne.n	8002abc <HAL_DMA_Abort_IT+0x408>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e031      	b.n	8002abe <HAL_DMA_Abort_IT+0x40a>
 8002a5a:	bf00      	nop
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
 8002a9c:	58025408 	.word	0x58025408
 8002aa0:	5802541c 	.word	0x5802541c
 8002aa4:	58025430 	.word	0x58025430
 8002aa8:	58025444 	.word	0x58025444
 8002aac:	58025458 	.word	0x58025458
 8002ab0:	5802546c 	.word	0x5802546c
 8002ab4:	58025480 	.word	0x58025480
 8002ab8:	58025494 	.word	0x58025494
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002af0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop

08002b40 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	@ 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b6a:	4b89      	ldr	r3, [pc, #548]	@ (8002d90 <HAL_GPIO_Init+0x234>)
 8002b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b6e:	e194      	b.n	8002e9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8186 	beq.w	8002e94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d005      	beq.n	8002ba0 <HAL_GPIO_Init+0x44>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d130      	bne.n	8002c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 0201 	and.w	r2, r3, #1
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d017      	beq.n	8002c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d123      	bne.n	8002c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	08da      	lsrs	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3208      	adds	r2, #8
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0203 	and.w	r2, r3, #3
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80e0 	beq.w	8002e94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <HAL_GPIO_Init+0x238>)
 8002cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cda:	4a2e      	ldr	r2, [pc, #184]	@ (8002d94 <HAL_GPIO_Init+0x238>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <HAL_GPIO_Init+0x238>)
 8002ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a29      	ldr	r2, [pc, #164]	@ (8002d98 <HAL_GPIO_Init+0x23c>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a20      	ldr	r2, [pc, #128]	@ (8002d9c <HAL_GPIO_Init+0x240>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d052      	beq.n	8002dc4 <HAL_GPIO_Init+0x268>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <HAL_GPIO_Init+0x244>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d031      	beq.n	8002d8a <HAL_GPIO_Init+0x22e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1e      	ldr	r2, [pc, #120]	@ (8002da4 <HAL_GPIO_Init+0x248>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x22a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <HAL_GPIO_Init+0x24c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x226>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1c      	ldr	r2, [pc, #112]	@ (8002dac <HAL_GPIO_Init+0x250>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x222>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a1b      	ldr	r2, [pc, #108]	@ (8002db0 <HAL_GPIO_Init+0x254>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x21e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1a      	ldr	r2, [pc, #104]	@ (8002db4 <HAL_GPIO_Init+0x258>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a19      	ldr	r2, [pc, #100]	@ (8002db8 <HAL_GPIO_Init+0x25c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x216>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a18      	ldr	r2, [pc, #96]	@ (8002dbc <HAL_GPIO_Init+0x260>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x212>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_GPIO_Init+0x264>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x20e>
 8002d66:	2309      	movs	r3, #9
 8002d68:	e02d      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	e02b      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e029      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d72:	2307      	movs	r3, #7
 8002d74:	e027      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e025      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e023      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e021      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e01f      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e01d      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e01b      	b.n	8002dc6 <HAL_GPIO_Init+0x26a>
 8002d8e:	bf00      	nop
 8002d90:	58000080 	.word	0x58000080
 8002d94:	58024400 	.word	0x58024400
 8002d98:	58000400 	.word	0x58000400
 8002d9c:	58020000 	.word	0x58020000
 8002da0:	58020400 	.word	0x58020400
 8002da4:	58020800 	.word	0x58020800
 8002da8:	58020c00 	.word	0x58020c00
 8002dac:	58021000 	.word	0x58021000
 8002db0:	58021400 	.word	0x58021400
 8002db4:	58021800 	.word	0x58021800
 8002db8:	58021c00 	.word	0x58021c00
 8002dbc:	58022000 	.word	0x58022000
 8002dc0:	58022400 	.word	0x58022400
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	f002 0203 	and.w	r2, r2, #3
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	4093      	lsls	r3, r2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd6:	4938      	ldr	r1, [pc, #224]	@ (8002eb8 <HAL_GPIO_Init+0x35c>)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3301      	adds	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f ae63 	bne.w	8002b70 <HAL_GPIO_Init+0x14>
  }
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	3724      	adds	r7, #36	@ 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	58000400 	.word	0x58000400

08002ebc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002ec4:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <HAL_HSEM_FastTake+0x2c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3320      	adds	r3, #32
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	4a07      	ldr	r2, [pc, #28]	@ (8002eec <HAL_HSEM_FastTake+0x30>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	58026400 	.word	0x58026400
 8002eec:	80000300 	.word	0x80000300

08002ef0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002efa:	4906      	ldr	r1, [pc, #24]	@ (8002f14 <HAL_HSEM_Release+0x24>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	58026400 	.word	0x58026400

08002f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e08b      	b.n	8003042 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe f828 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e006      	b.n	8002fa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d108      	bne.n	8002fba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	e007      	b.n	8002fca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_I2C_Init+0x134>)
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1a      	ldr	r2, [r3, #32]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	02008000 	.word	0x02008000

08003050 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	817b      	strh	r3, [r7, #10]
 8003060:	4613      	mov	r3, r2
 8003062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	f040 80fd 	bne.w	800326c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_Master_Transmit+0x30>
 800307c:	2302      	movs	r3, #2
 800307e:	e0f6      	b.n	800326e <HAL_I2C_Master_Transmit+0x21e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003088:	f7fe fece 	bl	8001e28 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2319      	movs	r3, #25
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f001 f8ed 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0e1      	b.n	800326e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	@ 0x21
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2210      	movs	r2, #16
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2bff      	cmp	r3, #255	@ 0xff
 80030da:	d906      	bls.n	80030ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	22ff      	movs	r2, #255	@ 0xff
 80030e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80030e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e007      	b.n	80030fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d024      	beq.n	800314c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	4b4e      	ldr	r3, [pc, #312]	@ (8003278 <HAL_I2C_Master_Transmit+0x228>)
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f001 fa5b 	bl	8004600 <I2C_TransferConfig>
 800314a:	e066      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	b2da      	uxtb	r2, r3
 8003152:	8979      	ldrh	r1, [r7, #10]
 8003154:	4b48      	ldr	r3, [pc, #288]	@ (8003278 <HAL_I2C_Master_Transmit+0x228>)
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f001 fa50 	bl	8004600 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003160:	e05b      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	6a39      	ldr	r1, [r7, #32]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f001 f8e0 	bl	800432c <I2C_WaitOnTXISFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07b      	b.n	800326e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d034      	beq.n	800321a <HAL_I2C_Master_Transmit+0x1ca>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d130      	bne.n	800321a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2200      	movs	r2, #0
 80031c0:	2180      	movs	r1, #128	@ 0x80
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f001 f859 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e04d      	b.n	800326e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2bff      	cmp	r3, #255	@ 0xff
 80031da:	d90e      	bls.n	80031fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	22ff      	movs	r2, #255	@ 0xff
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	8979      	ldrh	r1, [r7, #10]
 80031ea:	2300      	movs	r3, #0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f001 fa04 	bl	8004600 <I2C_TransferConfig>
 80031f8:	e00f      	b.n	800321a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003208:	b2da      	uxtb	r2, r3
 800320a:	8979      	ldrh	r1, [r7, #10]
 800320c:	2300      	movs	r3, #0
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f001 f9f3 	bl	8004600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d19e      	bne.n	8003162 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	6a39      	ldr	r1, [r7, #32]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f001 f8c6 	bl	80043ba <I2C_WaitOnSTOPFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01a      	b.n	800326e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2220      	movs	r2, #32
 800323e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <HAL_I2C_Master_Transmit+0x22c>)
 800324c:	400b      	ands	r3, r1
 800324e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	80002000 	.word	0x80002000
 800327c:	fe00e800 	.word	0xfe00e800

08003280 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
 8003292:	460b      	mov	r3, r1
 8003294:	813b      	strh	r3, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f040 80fd 	bne.w	80034a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x34>
 80032ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0f1      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Mem_Read+0x4e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0ea      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032d6:	f7fe fda7 	bl	8001e28 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2319      	movs	r3, #25
 80032e2:	2201      	movs	r2, #1
 80032e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 ffc6 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0d5      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2222      	movs	r2, #34	@ 0x22
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003320:	88f8      	ldrh	r0, [r7, #6]
 8003322:	893a      	ldrh	r2, [r7, #8]
 8003324:	8979      	ldrh	r1, [r7, #10]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	4603      	mov	r3, r0
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa6d 	bl	8003810 <I2C_RequestMemoryRead>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0ad      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2bff      	cmp	r3, #255	@ 0xff
 8003350:	d90e      	bls.n	8003370 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	22ff      	movs	r2, #255	@ 0xff
 8003356:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	b2da      	uxtb	r2, r3
 800335e:	8979      	ldrh	r1, [r7, #10]
 8003360:	4b52      	ldr	r3, [pc, #328]	@ (80034ac <HAL_I2C_Mem_Read+0x22c>)
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f001 f949 	bl	8004600 <I2C_TransferConfig>
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	b2da      	uxtb	r2, r3
 8003380:	8979      	ldrh	r1, [r7, #10]
 8003382:	4b4a      	ldr	r3, [pc, #296]	@ (80034ac <HAL_I2C_Mem_Read+0x22c>)
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f001 f938 	bl	8004600 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003396:	2200      	movs	r2, #0
 8003398:	2104      	movs	r1, #4
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 ff6d 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07c      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d034      	beq.n	8003450 <HAL_I2C_Mem_Read+0x1d0>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d130      	bne.n	8003450 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 ff3e 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04d      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2bff      	cmp	r3, #255	@ 0xff
 8003410:	d90e      	bls.n	8003430 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	@ 0xff
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	b2da      	uxtb	r2, r3
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f001 f8e9 	bl	8004600 <I2C_TransferConfig>
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	b2da      	uxtb	r2, r3
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f001 f8d8 	bl	8004600 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d19a      	bne.n	8003390 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 ffab 	bl	80043ba <I2C_WaitOnSTOPFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01a      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2220      	movs	r2, #32
 8003474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_I2C_Mem_Read+0x230>)
 8003482:	400b      	ands	r3, r1
 8003484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	80002400 	.word	0x80002400
 80034b0:	fe00e800 	.word	0xfe00e800

080034b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
  }
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003528:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00f      	beq.n	8003554 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f043 0208 	orr.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003552:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00f      	beq.n	800357e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	f043 0202 	orr.w	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800357c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 030b 	and.w	r3, r3, #11
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fd19 	bl	8003fc8 <I2C_ITError>
  }
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
 80035d2:	4613      	mov	r3, r2
 80035d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <I2C_Slave_ISR_IT+0x24>
 800363e:	2302      	movs	r3, #2
 8003640:	e0e2      	b.n	8003808 <I2C_Slave_ISR_IT+0x1ea>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800365e:	6939      	ldr	r1, [r7, #16]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fa09 	bl	8003a78 <I2C_ITSlaveCplt>
 8003666:	e0ca      	b.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d04b      	beq.n	800370a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003678:	2b00      	cmp	r3, #0
 800367a:	d046      	beq.n	800370a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d128      	bne.n	80036d8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b28      	cmp	r3, #40	@ 0x28
 8003690:	d108      	bne.n	80036a4 <I2C_Slave_ISR_IT+0x86>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003698:	d104      	bne.n	80036a4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800369a:	6939      	ldr	r1, [r7, #16]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fc3f 	bl	8003f20 <I2C_ITListenCplt>
 80036a2:	e031      	b.n	8003708 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b29      	cmp	r3, #41	@ 0x29
 80036ae:	d10e      	bne.n	80036ce <I2C_Slave_ISR_IT+0xb0>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036b6:	d00a      	beq.n	80036ce <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2210      	movs	r2, #16
 80036be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fd98 	bl	80041f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f97a 	bl	80039c0 <I2C_ITSlaveSeqCplt>
 80036cc:	e01c      	b.n	8003708 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2210      	movs	r2, #16
 80036d4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80036d6:	e08f      	b.n	80037f8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <I2C_Slave_ISR_IT+0xdc>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036f8:	d17e      	bne.n	80037f8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	4619      	mov	r1, r3
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fc61 	bl	8003fc8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003706:	e077      	b.n	80037f8 <I2C_Slave_ISR_IT+0x1da>
 8003708:	e076      	b.n	80037f8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02f      	beq.n	8003774 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02a      	beq.n	8003774 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d14b      	bne.n	80037fc <I2C_Slave_ISR_IT+0x1de>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800376a:	d047      	beq.n	80037fc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f927 	bl	80039c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003772:	e043      	b.n	80037fc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003788:	6939      	ldr	r1, [r7, #16]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f894 	bl	80038b8 <I2C_ITAddrCplt>
 8003790:	e035      	b.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d030      	beq.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02b      	beq.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d018      	beq.n	80037e2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
 80037e0:	e00d      	b.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d002      	beq.n	80037f0 <I2C_Slave_ISR_IT+0x1d2>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8e5 	bl	80039c0 <I2C_ITSlaveSeqCplt>
 80037f6:	e002      	b.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80037fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	4b20      	ldr	r3, [pc, #128]	@ (80038b4 <I2C_RequestMemoryRead+0xa4>)
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fee2 	bl	8004600 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fd73 	bl	800432c <I2C_WaitOnTXISFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e02c      	b.n	80038aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003856:	893b      	ldrh	r3, [r7, #8]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003860:	e015      	b.n	800388e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003862:	893b      	ldrh	r3, [r7, #8]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	b29b      	uxth	r3, r3
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fd59 	bl	800432c <I2C_WaitOnTXISFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e012      	b.n	80038aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003884:	893b      	ldrh	r3, [r7, #8]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2200      	movs	r2, #0
 8003896:	2140      	movs	r1, #64	@ 0x40
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fcee 	bl	800427a <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	80002000 	.word	0x80002000

080038b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038ce:	2b28      	cmp	r3, #40	@ 0x28
 80038d0:	d16a      	bne.n	80039a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80038f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	b29b      	uxth	r3, r3
 8003908:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800390c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d138      	bne.n	8003988 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	09db      	lsrs	r3, r3, #7
 800391a:	b29a      	uxth	r2, r3
 800391c:	89bb      	ldrh	r3, [r7, #12]
 800391e:	4053      	eors	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	f003 0306 	and.w	r3, r3, #6
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11c      	bne.n	8003964 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800392a:	897b      	ldrh	r3, [r7, #10]
 800392c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393c:	2b02      	cmp	r3, #2
 800393e:	d13b      	bne.n	80039b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2208      	movs	r2, #8
 800394c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003956:	89ba      	ldrh	r2, [r7, #12]
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fe32 	bl	80035c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003962:	e029      	b.n	80039b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003964:	893b      	ldrh	r3, [r7, #8]
 8003966:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003968:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fe79 	bl	8004664 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800397a:	89ba      	ldrh	r2, [r7, #12]
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fe20 	bl	80035c6 <HAL_I2C_AddrCallback>
}
 8003986:	e017      	b.n	80039b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003988:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fe69 	bl	8004664 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800399a:	89ba      	ldrh	r2, [r7, #12]
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fe10 	bl	80035c6 <HAL_I2C_AddrCallback>
}
 80039a6:	e007      	b.n	80039b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2208      	movs	r2, #8
 80039ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e00c      	b.n	8003a0e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b29      	cmp	r3, #41	@ 0x29
 8003a18:	d112      	bne.n	8003a40 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2228      	movs	r2, #40	@ 0x28
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2221      	movs	r2, #33	@ 0x21
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a28:	2101      	movs	r1, #1
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fe1a 	bl	8004664 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fdb0 	bl	800359e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a3e:	e017      	b.n	8003a70 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a4a:	d111      	bne.n	8003a70 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2228      	movs	r2, #40	@ 0x28
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2222      	movs	r2, #34	@ 0x22
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fe01 	bl	8004664 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fda1 	bl	80035b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	2b21      	cmp	r3, #33	@ 0x21
 8003aa8:	d002      	beq.n	8003ab0 <I2C_ITSlaveCplt+0x38>
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	2b29      	cmp	r3, #41	@ 0x29
 8003aae:	d108      	bne.n	8003ac2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ab0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fdd5 	bl	8004664 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2221      	movs	r2, #33	@ 0x21
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ac0:	e019      	b.n	8003af6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	2b22      	cmp	r3, #34	@ 0x22
 8003ac6:	d002      	beq.n	8003ace <I2C_ITSlaveCplt+0x56>
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
 8003aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003acc:	d108      	bne.n	8003ae0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ace:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fdc6 	bl	8004664 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2222      	movs	r2, #34	@ 0x22
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ade:	e00a      	b.n	8003af6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	2b28      	cmp	r3, #40	@ 0x28
 8003ae4:	d107      	bne.n	8003af6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ae6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fdba 	bl	8004664 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b04:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <I2C_ITSlaveCplt+0x298>)
 8003b12:	400b      	ands	r3, r1
 8003b14:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fb6d 	bl	80041f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d07a      	beq.n	8003c1c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8111 	beq.w	8003d62 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a73      	ldr	r2, [pc, #460]	@ (8003d14 <I2C_ITSlaveCplt+0x29c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d059      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a71      	ldr	r2, [pc, #452]	@ (8003d18 <I2C_ITSlaveCplt+0x2a0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d053      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d1c <I2C_ITSlaveCplt+0x2a4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04d      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003d20 <I2C_ITSlaveCplt+0x2a8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d047      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6b      	ldr	r2, [pc, #428]	@ (8003d24 <I2C_ITSlaveCplt+0x2ac>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d041      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a69      	ldr	r2, [pc, #420]	@ (8003d28 <I2C_ITSlaveCplt+0x2b0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a67      	ldr	r2, [pc, #412]	@ (8003d2c <I2C_ITSlaveCplt+0x2b4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d035      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a65      	ldr	r2, [pc, #404]	@ (8003d30 <I2C_ITSlaveCplt+0x2b8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d02f      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a63      	ldr	r2, [pc, #396]	@ (8003d34 <I2C_ITSlaveCplt+0x2bc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d029      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a61      	ldr	r2, [pc, #388]	@ (8003d38 <I2C_ITSlaveCplt+0x2c0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d023      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8003d3c <I2C_ITSlaveCplt+0x2c4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5d      	ldr	r2, [pc, #372]	@ (8003d40 <I2C_ITSlaveCplt+0x2c8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d017      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d44 <I2C_ITSlaveCplt+0x2cc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d011      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a59      	ldr	r2, [pc, #356]	@ (8003d48 <I2C_ITSlaveCplt+0x2d0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a57      	ldr	r2, [pc, #348]	@ (8003d4c <I2C_ITSlaveCplt+0x2d4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d005      	beq.n	8003c00 <I2C_ITSlaveCplt+0x188>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a55      	ldr	r2, [pc, #340]	@ (8003d50 <I2C_ITSlaveCplt+0x2d8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d105      	bne.n	8003c0c <I2C_ITSlaveCplt+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	e004      	b.n	8003c16 <I2C_ITSlaveCplt+0x19e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003c1a:	e0a2      	b.n	8003d62 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 809d 	beq.w	8003d62 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8090 	beq.w	8003d62 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <I2C_ITSlaveCplt+0x29c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d059      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a30      	ldr	r2, [pc, #192]	@ (8003d18 <I2C_ITSlaveCplt+0x2a0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d053      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2e      	ldr	r2, [pc, #184]	@ (8003d1c <I2C_ITSlaveCplt+0x2a4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04d      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d20 <I2C_ITSlaveCplt+0x2a8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d047      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <I2C_ITSlaveCplt+0x2ac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d041      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a28      	ldr	r2, [pc, #160]	@ (8003d28 <I2C_ITSlaveCplt+0x2b0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d03b      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a26      	ldr	r2, [pc, #152]	@ (8003d2c <I2C_ITSlaveCplt+0x2b4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d035      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	@ (8003d30 <I2C_ITSlaveCplt+0x2b8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02f      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	@ (8003d34 <I2C_ITSlaveCplt+0x2bc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d029      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	@ (8003d38 <I2C_ITSlaveCplt+0x2c0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d023      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <I2C_ITSlaveCplt+0x2c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01d      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <I2C_ITSlaveCplt+0x2c8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d017      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <I2C_ITSlaveCplt+0x2cc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d011      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a18      	ldr	r2, [pc, #96]	@ (8003d48 <I2C_ITSlaveCplt+0x2d0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a16      	ldr	r2, [pc, #88]	@ (8003d4c <I2C_ITSlaveCplt+0x2d4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d005      	beq.n	8003d02 <I2C_ITSlaveCplt+0x28a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a14      	ldr	r2, [pc, #80]	@ (8003d50 <I2C_ITSlaveCplt+0x2d8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d128      	bne.n	8003d54 <I2C_ITSlaveCplt+0x2dc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	e027      	b.n	8003d5e <I2C_ITSlaveCplt+0x2e6>
 8003d0e:	bf00      	nop
 8003d10:	fe00e800 	.word	0xfe00e800
 8003d14:	40020010 	.word	0x40020010
 8003d18:	40020028 	.word	0x40020028
 8003d1c:	40020040 	.word	0x40020040
 8003d20:	40020058 	.word	0x40020058
 8003d24:	40020070 	.word	0x40020070
 8003d28:	40020088 	.word	0x40020088
 8003d2c:	400200a0 	.word	0x400200a0
 8003d30:	400200b8 	.word	0x400200b8
 8003d34:	40020410 	.word	0x40020410
 8003d38:	40020428 	.word	0x40020428
 8003d3c:	40020440 	.word	0x40020440
 8003d40:	40020458 	.word	0x40020458
 8003d44:	40020470 	.word	0x40020470
 8003d48:	40020488 	.word	0x40020488
 8003d4c:	400204a0 	.word	0x400204a0
 8003d50:	400204b8 	.word	0x400204b8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d049      	beq.n	8003e62 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d044      	beq.n	8003e62 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d128      	bne.n	8003e34 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b28      	cmp	r3, #40	@ 0x28
 8003dec:	d108      	bne.n	8003e00 <I2C_ITSlaveCplt+0x388>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df4:	d104      	bne.n	8003e00 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003df6:	6979      	ldr	r1, [r7, #20]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f891 	bl	8003f20 <I2C_ITListenCplt>
 8003dfe:	e030      	b.n	8003e62 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b29      	cmp	r3, #41	@ 0x29
 8003e0a:	d10e      	bne.n	8003e2a <I2C_ITSlaveCplt+0x3b2>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e12:	d00a      	beq.n	8003e2a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f9ea 	bl	80041f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fdcc 	bl	80039c0 <I2C_ITSlaveSeqCplt>
 8003e28:	e01b      	b.n	8003e62 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2210      	movs	r2, #16
 8003e30:	61da      	str	r2, [r3, #28]
 8003e32:	e016      	b.n	8003e62 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <I2C_ITSlaveCplt+0x3de>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e54:	d105      	bne.n	8003e62 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f8b3 	bl	8003fc8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8a2 	bl	8003fc8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b28      	cmp	r3, #40	@ 0x28
 8003e8e:	d141      	bne.n	8003f14 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f844 	bl	8003f20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e98:	e03c      	b.n	8003f14 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ea2:	d014      	beq.n	8003ece <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fd8b 	bl	80039c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <I2C_ITSlaveCplt+0x4a4>)
 8003eae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fb8b 	bl	80035e2 <HAL_I2C_ListenCpltCallback>
}
 8003ecc:	e022      	b.n	8003f14 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b22      	cmp	r3, #34	@ 0x22
 8003ed8:	d10e      	bne.n	8003ef8 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fb5e 	bl	80035b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ef6:	e00d      	b.n	8003f14 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fb45 	bl	800359e <HAL_I2C_SlaveTxCpltCallback>
}
 8003f14:	bf00      	nop
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	ffff0000 	.word	0xffff0000

08003f20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	@ (8003fc4 <I2C_ITListenCplt+0xa4>)
 8003f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d022      	beq.n	8003f9c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f9c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fb5f 	bl	8004664 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fb13 	bl	80035e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	ffff0000 	.word	0xffff0000

08003fc8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a6d      	ldr	r2, [pc, #436]	@ (800419c <I2C_ITError+0x1d4>)
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b28      	cmp	r3, #40	@ 0x28
 8003ffe:	d005      	beq.n	800400c <I2C_ITError+0x44>
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b29      	cmp	r3, #41	@ 0x29
 8004004:	d002      	beq.n	800400c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b2a      	cmp	r3, #42	@ 0x2a
 800400a:	d10b      	bne.n	8004024 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800400c:	2103      	movs	r1, #3
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fb28 	bl	8004664 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2228      	movs	r2, #40	@ 0x28
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a60      	ldr	r2, [pc, #384]	@ (80041a0 <I2C_ITError+0x1d8>)
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34
 8004022:	e030      	b.n	8004086 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004024:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb1b 	bl	8004664 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8e1 	bl	80041f6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b60      	cmp	r3, #96	@ 0x60
 800403e:	d01f      	beq.n	8004080 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d114      	bne.n	8004080 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d109      	bne.n	8004078 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	f043 0204 	orr.w	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d039      	beq.n	8004108 <I2C_ITError+0x140>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b11      	cmp	r3, #17
 8004098:	d002      	beq.n	80040a0 <I2C_ITError+0xd8>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b21      	cmp	r3, #33	@ 0x21
 800409e:	d133      	bne.n	8004108 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ae:	d107      	bne.n	80040c0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fd3b 	bl	8002b40 <HAL_DMA_GetState>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d017      	beq.n	8004100 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	4a33      	ldr	r2, [pc, #204]	@ (80041a4 <I2C_ITError+0x1dc>)
 80040d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fae5 	bl	80026b4 <HAL_DMA_Abort_IT>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d04d      	beq.n	800418c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040fa:	4610      	mov	r0, r2
 80040fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040fe:	e045      	b.n	800418c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f851 	bl	80041a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004106:	e041      	b.n	800418c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d039      	beq.n	8004184 <I2C_ITError+0x1bc>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b12      	cmp	r3, #18
 8004114:	d002      	beq.n	800411c <I2C_ITError+0x154>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b22      	cmp	r3, #34	@ 0x22
 800411a:	d133      	bne.n	8004184 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412a:	d107      	bne.n	800413c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fcfd 	bl	8002b40 <HAL_DMA_GetState>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d017      	beq.n	800417c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <I2C_ITError+0x1dc>)
 8004152:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe faa7 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d011      	beq.n	8004190 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004176:	4610      	mov	r0, r2
 8004178:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800417a:	e009      	b.n	8004190 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f813 	bl	80041a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004182:	e005      	b.n	8004190 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f80f 	bl	80041a8 <I2C_TreatErrorCallback>
  }
}
 800418a:	e002      	b.n	8004192 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004190:	bf00      	nop
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	ffff0000 	.word	0xffff0000
 80041a0:	0800361f 	.word	0x0800361f
 80041a4:	0800423f 	.word	0x0800423f

080041a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b60      	cmp	r3, #96	@ 0x60
 80041ba:	d10e      	bne.n	80041da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fa19 	bl	800360a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041d8:	e009      	b.n	80041ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fa04 	bl	80035f6 <HAL_I2C_ErrorCallback>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d103      	bne.n	8004214 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d007      	beq.n	8004232 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	619a      	str	r2, [r3, #24]
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	2200      	movs	r2, #0
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	2200      	movs	r2, #0
 800426a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff ff9b 	bl	80041a8 <I2C_TreatErrorCallback>
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428a:	e03b      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	6839      	ldr	r1, [r7, #0]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8d5 	bl	8004440 <I2C_IsErrorOccurred>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e041      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d02d      	beq.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a8:	f7fd fdbe 	bl	8001e28 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <I2C_WaitOnFlagUntilTimeout+0x44>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d122      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d113      	bne.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e00f      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	429a      	cmp	r2, r3
 8004320:	d0b4      	beq.n	800428c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004338:	e033      	b.n	80043a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f87e 	bl	8004440 <I2C_IsErrorOccurred>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e031      	b.n	80043b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d025      	beq.n	80043a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fd fd67 	bl	8001e28 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11a      	bne.n	80043a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d013      	beq.n	80043a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e007      	b.n	80043b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d1c4      	bne.n	800433a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c6:	e02f      	b.n	8004428 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f837 	bl	8004440 <I2C_IsErrorOccurred>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e02d      	b.n	8004438 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fd fd24 	bl	8001e28 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11a      	bne.n	8004428 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d013      	beq.n	8004428 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e007      	b.n	8004438 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	d1c8      	bne.n	80043c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	@ 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d068      	beq.n	800453e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2210      	movs	r2, #16
 8004472:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004474:	e049      	b.n	800450a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d045      	beq.n	800450a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fd fcd3 	bl	8001e28 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_IsErrorOccurred+0x54>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d13a      	bne.n	800450a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800449e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b6:	d121      	bne.n	80044fc <I2C_IsErrorOccurred+0xbc>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044be:	d01d      	beq.n	80044fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d01a      	beq.n	80044fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044d6:	f7fd fca7 	bl	8001e28 <HAL_GetTick>
 80044da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044dc:	e00e      	b.n	80044fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044de:	f7fd fca3 	bl	8001e28 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b19      	cmp	r3, #25
 80044ea:	d907      	bls.n	80044fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f043 0320 	orr.w	r3, r3, #32
 80044f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044fa:	e006      	b.n	800450a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b20      	cmp	r3, #32
 8004508:	d1e9      	bne.n	80044de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d003      	beq.n	8004520 <I2C_IsErrorOccurred+0xe0>
 8004518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0aa      	beq.n	8004476 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2220      	movs	r2, #32
 800452e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f043 0304 	orr.w	r3, r3, #4
 8004536:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00b      	beq.n	8004568 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f043 0308 	orr.w	r3, r3, #8
 8004578:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004582:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00b      	beq.n	80045ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f043 0302 	orr.w	r3, r3, #2
 800459a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80045ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff fe1e 	bl	80041f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6859      	ldr	r1, [r3, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <I2C_IsErrorOccurred+0x1bc>)
 80045c6:	400b      	ands	r3, r1
 80045c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3728      	adds	r7, #40	@ 0x28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	fe00e800 	.word	0xfe00e800

08004600 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	817b      	strh	r3, [r7, #10]
 800460e:	4613      	mov	r3, r2
 8004610:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004612:	897b      	ldrh	r3, [r7, #10]
 8004614:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004618:	7a7b      	ldrb	r3, [r7, #9]
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004620:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	4313      	orrs	r3, r2
 800462a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800462e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	0d5b      	lsrs	r3, r3, #21
 800463a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800463e:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <I2C_TransferConfig+0x60>)
 8004640:	430b      	orrs	r3, r1
 8004642:	43db      	mvns	r3, r3
 8004644:	ea02 0103 	and.w	r1, r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	03ff63ff 	.word	0x03ff63ff

08004664 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00f      	beq.n	800469e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004684:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004692:	2b28      	cmp	r3, #40	@ 0x28
 8004694:	d003      	beq.n	800469e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800469c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800469e:	887b      	ldrh	r3, [r7, #2]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00f      	beq.n	80046c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80046ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046bc:	2b28      	cmp	r3, #40	@ 0x28
 80046be:	d003      	beq.n	80046c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80046c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da03      	bge.n	80046d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80046d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d103      	bne.n	80046e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d103      	bne.n	80046f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 0320 	orr.w	r3, r3, #32
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80046f4:	887b      	ldrh	r3, [r7, #2]
 80046f6:	2b40      	cmp	r3, #64	@ 0x40
 80046f8:	d103      	bne.n	8004702 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004700:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6819      	ldr	r1, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	43da      	mvns	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	400a      	ands	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	d138      	bne.n	80047a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004740:	2302      	movs	r3, #2
 8004742:	e032      	b.n	80047aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	@ 0x24
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d139      	bne.n	8004840 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e033      	b.n	8004842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2224      	movs	r2, #36	@ 0x24
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004808:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004858:	4b29      	ldr	r3, [pc, #164]	@ (8004900 <HAL_PWREx_ConfigSupply+0xb0>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	2b06      	cmp	r3, #6
 8004862:	d00a      	beq.n	800487a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004864:	4b26      	ldr	r3, [pc, #152]	@ (8004900 <HAL_PWREx_ConfigSupply+0xb0>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e040      	b.n	80048f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e03e      	b.n	80048f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800487a:	4b21      	ldr	r3, [pc, #132]	@ (8004900 <HAL_PWREx_ConfigSupply+0xb0>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004882:	491f      	ldr	r1, [pc, #124]	@ (8004900 <HAL_PWREx_ConfigSupply+0xb0>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4313      	orrs	r3, r2
 8004888:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800488a:	f7fd facd 	bl	8001e28 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004890:	e009      	b.n	80048a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004892:	f7fd fac9 	bl	8001e28 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048a0:	d901      	bls.n	80048a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e028      	b.n	80048f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048a6:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <HAL_PWREx_ConfigSupply+0xb0>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b2:	d1ee      	bne.n	8004892 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b1e      	cmp	r3, #30
 80048b8:	d008      	beq.n	80048cc <HAL_PWREx_ConfigSupply+0x7c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80048be:	d005      	beq.n	80048cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b1d      	cmp	r3, #29
 80048c4:	d002      	beq.n	80048cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b2d      	cmp	r3, #45	@ 0x2d
 80048ca:	d114      	bne.n	80048f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80048cc:	f7fd faac 	bl	8001e28 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048d2:	e009      	b.n	80048e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048d4:	f7fd faa8 	bl	8001e28 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048e2:	d901      	bls.n	80048e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e007      	b.n	80048f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_PWREx_ConfigSupply+0xb0>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f4:	d1ee      	bne.n	80048d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	58024800 	.word	0x58024800

08004904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	@ 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f000 bc48 	b.w	80051a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8088 	beq.w	8004a36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004926:	4b99      	ldr	r3, [pc, #612]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004930:	4b96      	ldr	r3, [pc, #600]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	2b10      	cmp	r3, #16
 800493a:	d007      	beq.n	800494c <HAL_RCC_OscConfig+0x48>
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	2b18      	cmp	r3, #24
 8004940:	d111      	bne.n	8004966 <HAL_RCC_OscConfig+0x62>
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	4b8f      	ldr	r3, [pc, #572]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d06d      	beq.n	8004a34 <HAL_RCC_OscConfig+0x130>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d169      	bne.n	8004a34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f000 bc21 	b.w	80051a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x7a>
 8004970:	4b86      	ldr	r3, [pc, #536]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a85      	ldr	r2, [pc, #532]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e02e      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x9c>
 8004986:	4b81      	ldr	r3, [pc, #516]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a80      	ldr	r2, [pc, #512]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 800498c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b7e      	ldr	r3, [pc, #504]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7d      	ldr	r2, [pc, #500]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004998:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0xc0>
 80049aa:	4b78      	ldr	r3, [pc, #480]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a77      	ldr	r2, [pc, #476]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b75      	ldr	r3, [pc, #468]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a74      	ldr	r2, [pc, #464]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 80049c4:	4b71      	ldr	r3, [pc, #452]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a70      	ldr	r2, [pc, #448]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b6e      	ldr	r3, [pc, #440]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6d      	ldr	r2, [pc, #436]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd fa20 	bl	8001e28 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fd fa1c 	bl	8001e28 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	@ 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e3d4      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049fe:	4b63      	ldr	r3, [pc, #396]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xe8>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fa0c 	bl	8001e28 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fa08 	bl	8001e28 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	@ 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e3c0      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a26:	4b59      	ldr	r3, [pc, #356]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x110>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80ca 	beq.w	8004bd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a44:	4b51      	ldr	r3, [pc, #324]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_RCC_OscConfig+0x166>
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b18      	cmp	r3, #24
 8004a5e:	d156      	bne.n	8004b0e <HAL_RCC_OscConfig+0x20a>
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d151      	bne.n	8004b0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6a:	4b48      	ldr	r3, [pc, #288]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x17e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e392      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a82:	4b42      	ldr	r3, [pc, #264]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 0219 	bic.w	r2, r3, #25
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	493f      	ldr	r1, [pc, #252]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd f9c8 	bl	8001e28 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9c:	f7fd f9c4 	bl	8001e28 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e37c      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aae:	4b37      	ldr	r3, [pc, #220]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	f7fd f9c1 	bl	8001e40 <HAL_GetREVID>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d817      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x1f4>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d108      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x1de>
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ade:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	e07a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	031b      	lsls	r3, r3, #12
 8004af0:	4926      	ldr	r1, [pc, #152]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af6:	e06f      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b24      	ldr	r3, [pc, #144]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	4921      	ldr	r1, [pc, #132]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	e064      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d047      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b16:	4b1d      	ldr	r3, [pc, #116]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0219 	bic.w	r2, r3, #25
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	491a      	ldr	r1, [pc, #104]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd f97e 	bl	8001e28 <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fd f97a 	bl	8001e28 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e332      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b42:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	f7fd f977 	bl	8001e40 <HAL_GetREVID>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d819      	bhi.n	8004b90 <HAL_RCC_OscConfig+0x28c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d108      	bne.n	8004b76 <HAL_RCC_OscConfig+0x272>
 8004b64:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b6c:	4a07      	ldr	r2, [pc, #28]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b72:	6053      	str	r3, [r2, #4]
 8004b74:	e030      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	031b      	lsls	r3, r3, #12
 8004b84:	4901      	ldr	r1, [pc, #4]	@ (8004b8c <HAL_RCC_OscConfig+0x288>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]
 8004b8a:	e025      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	4b9a      	ldr	r3, [pc, #616]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	4997      	ldr	r1, [pc, #604]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
 8004ba4:	e018      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba6:	4b95      	ldr	r3, [pc, #596]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a94      	ldr	r2, [pc, #592]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb2:	f7fd f939 	bl	8001e28 <HAL_GetTick>
 8004bb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bba:	f7fd f935 	bl	8001e28 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e2ed      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bcc:	4b8b      	ldr	r3, [pc, #556]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80a9 	beq.w	8004d38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be6:	4b85      	ldr	r3, [pc, #532]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf0:	4b82      	ldr	r3, [pc, #520]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d007      	beq.n	8004c0c <HAL_RCC_OscConfig+0x308>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b18      	cmp	r3, #24
 8004c00:	d13a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x374>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d135      	bne.n	8004c78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_OscConfig+0x320>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b80      	cmp	r3, #128	@ 0x80
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e2c1      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c24:	f7fd f90c 	bl	8001e40 <HAL_GetREVID>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d817      	bhi.n	8004c62 <HAL_RCC_OscConfig+0x35e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_OscConfig+0x348>
 8004c3a:	4b70      	ldr	r3, [pc, #448]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c42:	4a6e      	ldr	r2, [pc, #440]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c4a:	e075      	b.n	8004d38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	069b      	lsls	r3, r3, #26
 8004c5a:	4968      	ldr	r1, [pc, #416]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c60:	e06a      	b.n	8004d38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c62:	4b66      	ldr	r3, [pc, #408]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	061b      	lsls	r3, r3, #24
 8004c70:	4962      	ldr	r1, [pc, #392]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c76:	e05f      	b.n	8004d38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d042      	beq.n	8004d06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c80:	4b5e      	ldr	r3, [pc, #376]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a5d      	ldr	r2, [pc, #372]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd f8cc 	bl	8001e28 <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c94:	f7fd f8c8 	bl	8001e28 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e280      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca6:	4b55      	ldr	r3, [pc, #340]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb2:	f7fd f8c5 	bl	8001e40 <HAL_GetREVID>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d817      	bhi.n	8004cf0 <HAL_RCC_OscConfig+0x3ec>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d108      	bne.n	8004cda <HAL_RCC_OscConfig+0x3d6>
 8004cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004cd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cd6:	6053      	str	r3, [r2, #4]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0x434>
 8004cda:	4b48      	ldr	r3, [pc, #288]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	069b      	lsls	r3, r3, #26
 8004ce8:	4944      	ldr	r1, [pc, #272]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
 8004cee:	e023      	b.n	8004d38 <HAL_RCC_OscConfig+0x434>
 8004cf0:	4b42      	ldr	r3, [pc, #264]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	493f      	ldr	r1, [pc, #252]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60cb      	str	r3, [r1, #12]
 8004d04:	e018      	b.n	8004d38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d06:	4b3d      	ldr	r3, [pc, #244]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fd f889 	bl	8001e28 <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d1a:	f7fd f885 	bl	8001e28 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e23d      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d2c:	4b33      	ldr	r3, [pc, #204]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d036      	beq.n	8004db2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d019      	beq.n	8004d80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d50:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fd f866 	bl	8001e28 <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fd f862 	bl	8001e28 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e21a      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d72:	4b22      	ldr	r3, [pc, #136]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x45c>
 8004d7e:	e018      	b.n	8004db2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d80:	4b1e      	ldr	r3, [pc, #120]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd f84c 	bl	8001e28 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fd f848 	bl	8001e28 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e200      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d039      	beq.n	8004e32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01c      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a0c      	ldr	r2, [pc, #48]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004dcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd f829 	bl	8001e28 <HAL_GetTick>
 8004dd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dda:	f7fd f825 	bl	8001e28 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1dd      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dec:	4b03      	ldr	r3, [pc, #12]	@ (8004dfc <HAL_RCC_OscConfig+0x4f8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x4d6>
 8004df8:	e01b      	b.n	8004e32 <HAL_RCC_OscConfig+0x52e>
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e00:	4b9b      	ldr	r3, [pc, #620]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a9a      	ldr	r2, [pc, #616]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e0c:	f7fd f80c 	bl	8001e28 <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e14:	f7fd f808 	bl	8001e28 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1c0      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e26:	4b92      	ldr	r3, [pc, #584]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8081 	beq.w	8004f42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e40:	4b8c      	ldr	r3, [pc, #560]	@ (8005074 <HAL_RCC_OscConfig+0x770>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a8b      	ldr	r2, [pc, #556]	@ (8005074 <HAL_RCC_OscConfig+0x770>)
 8004e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4c:	f7fc ffec 	bl	8001e28 <HAL_GetTick>
 8004e50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e54:	f7fc ffe8 	bl	8001e28 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	@ 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e1a0      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e66:	4b83      	ldr	r3, [pc, #524]	@ (8005074 <HAL_RCC_OscConfig+0x770>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x584>
 8004e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e86:	e02d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x5e0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10c      	bne.n	8004eaa <HAL_RCC_OscConfig+0x5a6>
 8004e90:	4b77      	ldr	r3, [pc, #476]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e94:	4a76      	ldr	r2, [pc, #472]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9c:	4b74      	ldr	r3, [pc, #464]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea0:	4a73      	ldr	r2, [pc, #460]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	f023 0304 	bic.w	r3, r3, #4
 8004ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea8:	e01c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x5e0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x5c8>
 8004eb2:	4b6f      	ldr	r3, [pc, #444]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	4a6e      	ldr	r2, [pc, #440]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	4a6b      	ldr	r2, [pc, #428]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eca:	e00b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x5e0>
 8004ecc:	4b68      	ldr	r3, [pc, #416]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed0:	4a67      	ldr	r2, [pc, #412]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed8:	4b65      	ldr	r3, [pc, #404]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	4a64      	ldr	r2, [pc, #400]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	f023 0304 	bic.w	r3, r3, #4
 8004ee2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fc ff9c 	bl	8001e28 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fc ff98 	bl	8001e28 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e14e      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0a:	4b59      	ldr	r3, [pc, #356]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ee      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x5f0>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fc ff86 	bl	8001e28 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fc ff82 	bl	8001e28 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e138      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f36:	4b4e      	ldr	r3, [pc, #312]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ee      	bne.n	8004f20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 812d 	beq.w	80051a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f4c:	4b48      	ldr	r3, [pc, #288]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f54:	2b18      	cmp	r3, #24
 8004f56:	f000 80bd 	beq.w	80050d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	f040 809e 	bne.w	80050a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f64:	4b42      	ldr	r3, [pc, #264]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a41      	ldr	r2, [pc, #260]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fc ff5a 	bl	8001e28 <HAL_GetTick>
 8004f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fc ff56 	bl	8001e28 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e10e      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f8a:	4b39      	ldr	r3, [pc, #228]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f96:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f9a:	4b37      	ldr	r3, [pc, #220]	@ (8005078 <HAL_RCC_OscConfig+0x774>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fa6:	0112      	lsls	r2, r2, #4
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	4931      	ldr	r1, [pc, #196]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	025b      	lsls	r3, r3, #9
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fe0:	4923      	ldr	r1, [pc, #140]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fe6:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	4a21      	ldr	r2, [pc, #132]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff6:	4b21      	ldr	r3, [pc, #132]	@ (800507c <HAL_RCC_OscConfig+0x778>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ffe:	00d2      	lsls	r2, r2, #3
 8005000:	491b      	ldr	r1, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005006:	4b1a      	ldr	r3, [pc, #104]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f023 020c 	bic.w	r2, r3, #12
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	4917      	ldr	r1, [pc, #92]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005018:	4b15      	ldr	r3, [pc, #84]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f023 0202 	bic.w	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005024:	4912      	ldr	r1, [pc, #72]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800502a:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	4a10      	ldr	r2, [pc, #64]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005036:	4b0e      	ldr	r3, [pc, #56]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	4a0d      	ldr	r2, [pc, #52]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 800503c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005040:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005042:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800504c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800504e:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	4a07      	ldr	r2, [pc, #28]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505a:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a04      	ldr	r2, [pc, #16]	@ (8005070 <HAL_RCC_OscConfig+0x76c>)
 8005060:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005066:	f7fc fedf 	bl	8001e28 <HAL_GetTick>
 800506a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800506c:	e011      	b.n	8005092 <HAL_RCC_OscConfig+0x78e>
 800506e:	bf00      	nop
 8005070:	58024400 	.word	0x58024400
 8005074:	58024800 	.word	0x58024800
 8005078:	fffffc0c 	.word	0xfffffc0c
 800507c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005080:	f7fc fed2 	bl	8001e28 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e08a      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005092:	4b47      	ldr	r3, [pc, #284]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x77c>
 800509e:	e082      	b.n	80051a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b43      	ldr	r3, [pc, #268]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a42      	ldr	r2, [pc, #264]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 80050a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc febc 	bl	8001e28 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fc feb8 	bl	8001e28 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e070      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050c6:	4b3a      	ldr	r3, [pc, #232]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x7b0>
 80050d2:	e068      	b.n	80051a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050d4:	4b36      	ldr	r3, [pc, #216]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050da:	4b35      	ldr	r3, [pc, #212]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d031      	beq.n	800514c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f003 0203 	and.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d12a      	bne.n	800514c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d122      	bne.n	800514c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d11a      	bne.n	800514c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	0a5b      	lsrs	r3, r3, #9
 800511a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005122:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d111      	bne.n	800514c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d108      	bne.n	800514c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	0e1b      	lsrs	r3, r3, #24
 800513e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005146:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e02b      	b.n	80051a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005150:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	08db      	lsrs	r3, r3, #3
 8005156:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800515a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	429a      	cmp	r2, r3
 8005164:	d01f      	beq.n	80051a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	4a11      	ldr	r2, [pc, #68]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005172:	f7fc fe59 	bl	8001e28 <HAL_GetTick>
 8005176:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005178:	bf00      	nop
 800517a:	f7fc fe55 	bl	8001e28 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	4293      	cmp	r3, r2
 8005184:	d0f9      	beq.n	800517a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005186:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 8005188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518a:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <HAL_RCC_OscConfig+0x8b0>)
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005192:	00d2      	lsls	r2, r2, #3
 8005194:	4906      	ldr	r1, [pc, #24]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 8005196:	4313      	orrs	r3, r2
 8005198:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	4a04      	ldr	r2, [pc, #16]	@ (80051b0 <HAL_RCC_OscConfig+0x8ac>)
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3730      	adds	r7, #48	@ 0x30
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	58024400 	.word	0x58024400
 80051b4:	ffff0007 	.word	0xffff0007

080051b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e19c      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051cc:	4b8a      	ldr	r3, [pc, #552]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d910      	bls.n	80051fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b87      	ldr	r3, [pc, #540]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 020f 	bic.w	r2, r3, #15
 80051e2:	4985      	ldr	r1, [pc, #532]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b83      	ldr	r3, [pc, #524]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e184      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d010      	beq.n	800522a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	4b7b      	ldr	r3, [pc, #492]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005214:	429a      	cmp	r2, r3
 8005216:	d908      	bls.n	800522a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005218:	4b78      	ldr	r3, [pc, #480]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	4975      	ldr	r1, [pc, #468]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005226:	4313      	orrs	r3, r2
 8005228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	4b70      	ldr	r3, [pc, #448]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005242:	429a      	cmp	r2, r3
 8005244:	d908      	bls.n	8005258 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005246:	4b6d      	ldr	r3, [pc, #436]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	496a      	ldr	r1, [pc, #424]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005254:	4313      	orrs	r3, r2
 8005256:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d010      	beq.n	8005286 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	4b64      	ldr	r3, [pc, #400]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005270:	429a      	cmp	r2, r3
 8005272:	d908      	bls.n	8005286 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005274:	4b61      	ldr	r3, [pc, #388]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	495e      	ldr	r1, [pc, #376]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005282:	4313      	orrs	r3, r2
 8005284:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d010      	beq.n	80052b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	4b59      	ldr	r3, [pc, #356]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529e:	429a      	cmp	r2, r3
 80052a0:	d908      	bls.n	80052b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052a2:	4b56      	ldr	r3, [pc, #344]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	4953      	ldr	r1, [pc, #332]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d010      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	4b4d      	ldr	r3, [pc, #308]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d908      	bls.n	80052e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b4a      	ldr	r3, [pc, #296]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f023 020f 	bic.w	r2, r3, #15
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4947      	ldr	r1, [pc, #284]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d055      	beq.n	800539a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052ee:	4b43      	ldr	r3, [pc, #268]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4940      	ldr	r1, [pc, #256]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d107      	bne.n	8005318 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005308:	4b3c      	ldr	r3, [pc, #240]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d121      	bne.n	8005358 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0f6      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d107      	bne.n	8005330 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005320:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d115      	bne.n	8005358 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0ea      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005338:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0de      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005348:	4b2c      	ldr	r3, [pc, #176]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0d6      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005358:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f023 0207 	bic.w	r2, r3, #7
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4925      	ldr	r1, [pc, #148]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 8005366:	4313      	orrs	r3, r2
 8005368:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536a:	f7fc fd5d 	bl	8001e28 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005370:	e00a      	b.n	8005388 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005372:	f7fc fd59 	bl	8001e28 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e0be      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005388:	4b1c      	ldr	r3, [pc, #112]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	429a      	cmp	r2, r3
 8005398:	d1eb      	bne.n	8005372 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	4b14      	ldr	r3, [pc, #80]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d208      	bcs.n	80053c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b6:	4b11      	ldr	r3, [pc, #68]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f023 020f 	bic.w	r2, r3, #15
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	490e      	ldr	r1, [pc, #56]	@ (80053fc <HAL_RCC_ClockConfig+0x244>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d214      	bcs.n	8005400 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b08      	ldr	r3, [pc, #32]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 020f 	bic.w	r2, r3, #15
 80053de:	4906      	ldr	r1, [pc, #24]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <HAL_RCC_ClockConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e086      	b.n	8005506 <HAL_RCC_ClockConfig+0x34e>
 80053f8:	52002000 	.word	0x52002000
 80053fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	4b3f      	ldr	r3, [pc, #252]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005418:	429a      	cmp	r2, r3
 800541a:	d208      	bcs.n	800542e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800541c:	4b3c      	ldr	r3, [pc, #240]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4939      	ldr	r1, [pc, #228]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 800542a:	4313      	orrs	r3, r2
 800542c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	4b34      	ldr	r3, [pc, #208]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005446:	429a      	cmp	r2, r3
 8005448:	d208      	bcs.n	800545c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800544a:	4b31      	ldr	r3, [pc, #196]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	492e      	ldr	r1, [pc, #184]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 8005458:	4313      	orrs	r3, r2
 800545a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005474:	429a      	cmp	r2, r3
 8005476:	d208      	bcs.n	800548a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005478:	4b25      	ldr	r3, [pc, #148]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	4922      	ldr	r1, [pc, #136]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 8005486:	4313      	orrs	r3, r2
 8005488:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d010      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d208      	bcs.n	80054b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4917      	ldr	r1, [pc, #92]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054b8:	f000 f834 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b14      	ldr	r3, [pc, #80]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	4912      	ldr	r1, [pc, #72]	@ (8005514 <HAL_RCC_ClockConfig+0x35c>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
 80054d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005510 <HAL_RCC_ClockConfig+0x358>)
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	4a0d      	ldr	r2, [pc, #52]	@ (8005514 <HAL_RCC_ClockConfig+0x35c>)
 80054e0:	5cd3      	ldrb	r3, [r2, r3]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005518 <HAL_RCC_ClockConfig+0x360>)
 80054ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054f0:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <HAL_RCC_ClockConfig+0x364>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <HAL_RCC_ClockConfig+0x368>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fc fc4a 	bl	8001d94 <HAL_InitTick>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	58024400 	.word	0x58024400
 8005514:	0800fa58 	.word	0x0800fa58
 8005518:	24000004 	.word	0x24000004
 800551c:	24000000 	.word	0x24000000
 8005520:	24000018 	.word	0x24000018

08005524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	@ 0x24
 8005528:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800552a:	4bb3      	ldr	r3, [pc, #716]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005532:	2b18      	cmp	r3, #24
 8005534:	f200 8155 	bhi.w	80057e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <HAL_RCC_GetSysClockFreq+0x1c>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	080055a5 	.word	0x080055a5
 8005544:	080057e3 	.word	0x080057e3
 8005548:	080057e3 	.word	0x080057e3
 800554c:	080057e3 	.word	0x080057e3
 8005550:	080057e3 	.word	0x080057e3
 8005554:	080057e3 	.word	0x080057e3
 8005558:	080057e3 	.word	0x080057e3
 800555c:	080057e3 	.word	0x080057e3
 8005560:	080055cb 	.word	0x080055cb
 8005564:	080057e3 	.word	0x080057e3
 8005568:	080057e3 	.word	0x080057e3
 800556c:	080057e3 	.word	0x080057e3
 8005570:	080057e3 	.word	0x080057e3
 8005574:	080057e3 	.word	0x080057e3
 8005578:	080057e3 	.word	0x080057e3
 800557c:	080057e3 	.word	0x080057e3
 8005580:	080055d1 	.word	0x080055d1
 8005584:	080057e3 	.word	0x080057e3
 8005588:	080057e3 	.word	0x080057e3
 800558c:	080057e3 	.word	0x080057e3
 8005590:	080057e3 	.word	0x080057e3
 8005594:	080057e3 	.word	0x080057e3
 8005598:	080057e3 	.word	0x080057e3
 800559c:	080057e3 	.word	0x080057e3
 80055a0:	080055d7 	.word	0x080055d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a4:	4b94      	ldr	r3, [pc, #592]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b0:	4b91      	ldr	r3, [pc, #580]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	4a90      	ldr	r2, [pc, #576]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
 80055c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80055c2:	e111      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055c4:	4b8d      	ldr	r3, [pc, #564]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055c6:	61bb      	str	r3, [r7, #24]
      break;
 80055c8:	e10e      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80055ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055cc:	61bb      	str	r3, [r7, #24]
      break;
 80055ce:	e10b      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80055d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80055d2:	61bb      	str	r3, [r7, #24]
      break;
 80055d4:	e108      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055d6:	4b88      	ldr	r3, [pc, #544]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80055e0:	4b85      	ldr	r3, [pc, #532]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055ec:	4b82      	ldr	r3, [pc, #520]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055f6:	4b80      	ldr	r3, [pc, #512]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fa:	08db      	lsrs	r3, r3, #3
 80055fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80e1 	beq.w	80057dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b02      	cmp	r3, #2
 800561e:	f000 8083 	beq.w	8005728 <HAL_RCC_GetSysClockFreq+0x204>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b02      	cmp	r3, #2
 8005626:	f200 80a1 	bhi.w	800576c <HAL_RCC_GetSysClockFreq+0x248>
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x114>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d056      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005636:	e099      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005638:	4b6f      	ldr	r3, [pc, #444]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d02d      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005644:	4b6c      	ldr	r3, [pc, #432]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	4a6b      	ldr	r2, [pc, #428]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b62      	ldr	r3, [pc, #392]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005682:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800569e:	e087      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2e8>
 80056ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b2:	4b51      	ldr	r3, [pc, #324]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005808 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056e2:	e065      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005810 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f6:	4b40      	ldr	r3, [pc, #256]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005706:	ed97 6a02 	vldr	s12, [r7, #8]
 800570a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005808 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005726:	e043      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005814 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b2f      	ldr	r3, [pc, #188]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a02 	vldr	s12, [r7, #8]
 800574e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800576a:	e021      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005810 <HAL_RCC_GetSysClockFreq+0x2ec>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b1e      	ldr	r3, [pc, #120]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005792:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005808 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057b0:	4b11      	ldr	r3, [pc, #68]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	0a5b      	lsrs	r3, r3, #9
 80057b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ba:	3301      	adds	r3, #1
 80057bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d4:	ee17 3a90 	vmov	r3, s15
 80057d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80057da:	e005      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
      break;
 80057e0:	e002      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80057e2:	4b07      	ldr	r3, [pc, #28]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057e4:	61bb      	str	r3, [r7, #24]
      break;
 80057e6:	bf00      	nop
  }

  return sysclockfreq;
 80057e8:	69bb      	ldr	r3, [r7, #24]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3724      	adds	r7, #36	@ 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	003d0900 	.word	0x003d0900
 8005804:	017d7840 	.word	0x017d7840
 8005808:	46000000 	.word	0x46000000
 800580c:	4c742400 	.word	0x4c742400
 8005810:	4a742400 	.word	0x4a742400
 8005814:	4bbebc20 	.word	0x4bbebc20

08005818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800581e:	f7ff fe81 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x50>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490f      	ldr	r1, [pc, #60]	@ (800586c <HAL_RCC_GetHCLKFreq+0x54>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x50>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	4a09      	ldr	r2, [pc, #36]	@ (800586c <HAL_RCC_GetHCLKFreq+0x54>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	4a07      	ldr	r2, [pc, #28]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x58>)
 8005854:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005856:	4a07      	ldr	r2, [pc, #28]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800585c:	4b04      	ldr	r3, [pc, #16]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x58>)
 800585e:	681b      	ldr	r3, [r3, #0]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	58024400 	.word	0x58024400
 800586c:	0800fa58 	.word	0x0800fa58
 8005870:	24000004 	.word	0x24000004
 8005874:	24000000 	.word	0x24000000

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800587c:	f7ff ffcc 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b06      	ldr	r3, [pc, #24]	@ (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	091b      	lsrs	r3, r3, #4
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4904      	ldr	r1, [pc, #16]	@ (80058a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005898:	4618      	mov	r0, r3
 800589a:	bd80      	pop	{r7, pc}
 800589c:	58024400 	.word	0x58024400
 80058a0:	0800fa58 	.word	0x0800fa58

080058a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058a8:	f7ff ffb6 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4904      	ldr	r1, [pc, #16]	@ (80058cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	58024400 	.word	0x58024400
 80058cc:	0800fa58 	.word	0x0800fa58

080058d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d4:	b0ca      	sub	sp, #296	@ 0x128
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058f4:	2500      	movs	r5, #0
 80058f6:	ea54 0305 	orrs.w	r3, r4, r5
 80058fa:	d049      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005902:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005906:	d02f      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005908:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800590c:	d828      	bhi.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800590e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005912:	d01a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005918:	d822      	bhi.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005922:	d007      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005924:	e01c      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005926:	4bb8      	ldr	r3, [pc, #736]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592a:	4ab7      	ldr	r2, [pc, #732]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005932:	e01a      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005938:	3308      	adds	r3, #8
 800593a:	2102      	movs	r1, #2
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fc8f 	bl	8007260 <RCCEx_PLL2_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005948:	e00f      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	3328      	adds	r3, #40	@ 0x28
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f001 fd36 	bl	80073c4 <RCCEx_PLL3_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800595e:	e004      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005966:	e000      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005972:	4ba5      	ldr	r3, [pc, #660]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005976:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005980:	4aa1      	ldr	r2, [pc, #644]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005982:	430b      	orrs	r3, r1
 8005984:	6513      	str	r3, [r2, #80]	@ 0x50
 8005986:	e003      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800599c:	f04f 0900 	mov.w	r9, #0
 80059a0:	ea58 0309 	orrs.w	r3, r8, r9
 80059a4:	d047      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d82a      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059cd 	.word	0x080059cd
 80059bc:	080059db 	.word	0x080059db
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	08005a0f 	.word	0x08005a0f
 80059c8:	08005a0f 	.word	0x08005a0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	4a8d      	ldr	r2, [pc, #564]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d8:	e01a      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059de:	3308      	adds	r3, #8
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fc3c 	bl	8007260 <RCCEx_PLL2_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ee:	e00f      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	3328      	adds	r3, #40	@ 0x28
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fce3 	bl	80073c4 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a04:	e004      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a18:	4b7b      	ldr	r3, [pc, #492]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a1c:	f023 0107 	bic.w	r1, r3, #7
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a26:	4a78      	ldr	r2, [pc, #480]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a42:	f04f 0b00 	mov.w	fp, #0
 8005a46:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a4a:	d04c      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a56:	d030      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5c:	d829      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a60:	d02d      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a64:	d825      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d018      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d821      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a72:	2b40      	cmp	r3, #64	@ 0x40
 8005a74:	d007      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a76:	e01c      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a78:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	4a62      	ldr	r2, [pc, #392]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a84:	e01c      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 fbe6 	bl	8007260 <RCCEx_PLL2_Config>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a9a:	e011      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa0:	3328      	adds	r3, #40	@ 0x28
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 fc8d 	bl	80073c4 <RCCEx_PLL3_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ab0:	e006      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ab8:	e002      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005aba:	bf00      	nop
 8005abc:	e000      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005acc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005af2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005afc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005b00:	460b      	mov	r3, r1
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d053      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b12:	d035      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b18:	d82e      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b1e:	d031      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b24:	d828      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b2a:	d01a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b30:	d822      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b3a:	d007      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b3c:	e01c      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b3e:	4b32      	ldr	r3, [pc, #200]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	4a31      	ldr	r2, [pc, #196]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e01c      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	3308      	adds	r3, #8
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fb83 	bl	8007260 <RCCEx_PLL2_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b60:	e011      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	3328      	adds	r3, #40	@ 0x28
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 fc2a 	bl	80073c4 <RCCEx_PLL3_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b76:	e006      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b7e:	e002      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b80:	bf00      	nop
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b92:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005bba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005bc4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	d056      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bda:	d038      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005bdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005be0:	d831      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005be2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005be6:	d034      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005be8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bec:	d82b      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf2:	d01d      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf8:	d825      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d006      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c04:	e01f      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4ba2      	ldr	r3, [pc, #648]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	4aa1      	ldr	r2, [pc, #644]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c18:	e01c      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	3308      	adds	r3, #8
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fb1c 	bl	8007260 <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c2e:	e011      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	3328      	adds	r3, #40	@ 0x28
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fbc3 	bl	80073c4 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c44:	e006      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c4c:	e002      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c5c:	4b8e      	ldr	r3, [pc, #568]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c6c:	4a8a      	ldr	r2, [pc, #552]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c72:	e003      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c96:	460b      	mov	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	d03a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca2:	2b30      	cmp	r3, #48	@ 0x30
 8005ca4:	d01f      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ca6:	2b30      	cmp	r3, #48	@ 0x30
 8005ca8:	d819      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d00c      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d815      	bhi.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d019      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d111      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cba:	4b77      	ldr	r3, [pc, #476]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	4a76      	ldr	r2, [pc, #472]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cc6:	e011      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ccc:	3308      	adds	r3, #8
 8005cce:	2102      	movs	r1, #2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 fac5 	bl	8007260 <RCCEx_PLL2_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ce4:	e002      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cf4:	4b68      	ldr	r3, [pc, #416]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d02:	4a65      	ldr	r2, [pc, #404]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d08:	e003      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	d051      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d3c:	d035      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d42:	d82e      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d48:	d031      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d4e:	d828      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d54:	d01a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d5a:	d822      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d64:	d007      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d66:	e01c      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4b4b      	ldr	r3, [pc, #300]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d74:	e01c      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 fa6e 	bl	8007260 <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d8a:	e011      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	3328      	adds	r3, #40	@ 0x28
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fb15 	bl	80073c4 <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005da0:	e006      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da8:	e002      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005db8:	4b37      	ldr	r3, [pc, #220]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc6:	4a34      	ldr	r2, [pc, #208]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dcc:	e003      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005de6:	2300      	movs	r3, #0
 8005de8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005dec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d056      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e00:	d033      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e06:	d82c      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e0c:	d02f      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e12:	d826      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e18:	d02b      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e1e:	d820      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e24:	d012      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e2a:	d81a      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d022      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e34:	d115      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fa0e 	bl	8007260 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e4a:	e015      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	3328      	adds	r3, #40	@ 0x28
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fab5 	bl	80073c4 <RCCEx_PLL3_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e60:	e00a      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e004      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e8e:	4a02      	ldr	r2, [pc, #8]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d055      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed0:	d033      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed6:	d82c      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005edc:	d02f      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee2:	d826      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ee4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ee8:	d02b      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005eea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eee:	d820      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef4:	d012      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efa:	d81a      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f04:	d115      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 f9a6 	bl	8007260 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	3328      	adds	r3, #40	@ 0x28
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fa4d 	bl	80073c4 <RCCEx_PLL3_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f50:	4ba3      	ldr	r3, [pc, #652]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f60:	4a9f      	ldr	r2, [pc, #636]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d037      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f9a:	d00e      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa0:	d816      	bhi.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d018      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005faa:	d111      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fac:	4b8c      	ldr	r3, [pc, #560]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	4a8b      	ldr	r2, [pc, #556]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fb8:	e00f      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f94c 	bl	8007260 <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fce:	e004      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fd6:	e000      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff0:	4a7b      	ldr	r2, [pc, #492]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ff6:	e003      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006010:	2300      	movs	r3, #0
 8006012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006016:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d039      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006026:	2b03      	cmp	r3, #3
 8006028:	d81c      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800602a:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	0800606d 	.word	0x0800606d
 8006034:	08006041 	.word	0x08006041
 8006038:	0800604f 	.word	0x0800604f
 800603c:	0800606d 	.word	0x0800606d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006040:	4b67      	ldr	r3, [pc, #412]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	4a66      	ldr	r2, [pc, #408]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800604a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800604c:	e00f      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006052:	3308      	adds	r3, #8
 8006054:	2102      	movs	r1, #2
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f902 	bl	8007260 <RCCEx_PLL2_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006062:	e004      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800606a:	e000      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800606c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006076:	4b5a      	ldr	r3, [pc, #360]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607a:	f023 0103 	bic.w	r1, r3, #3
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006084:	4a56      	ldr	r2, [pc, #344]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006086:	430b      	orrs	r3, r1
 8006088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800608a:	e003      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80060a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80060ae:	460b      	mov	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f000 809f 	beq.w	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060b6:	4b4b      	ldr	r3, [pc, #300]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a4a      	ldr	r2, [pc, #296]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060c2:	f7fb feb1 	bl	8001e28 <HAL_GetTick>
 80060c6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060ca:	e00b      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060cc:	f7fb feac 	bl	8001e28 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b64      	cmp	r3, #100	@ 0x64
 80060da:	d903      	bls.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e2:	e005      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060e4:	4b3f      	ldr	r3, [pc, #252]	@ (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0ed      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80060f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d179      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060f8:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006104:	4053      	eors	r3, r2
 8006106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800610e:	4b34      	ldr	r3, [pc, #208]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006116:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800611a:	4b31      	ldr	r3, [pc, #196]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611e:	4a30      	ldr	r2, [pc, #192]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006124:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006126:	4b2e      	ldr	r3, [pc, #184]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612a:	4a2d      	ldr	r2, [pc, #180]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006130:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006132:	4a2b      	ldr	r2, [pc, #172]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006138:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006146:	d118      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fb fe6e 	bl	8001e28 <HAL_GetTick>
 800614c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006150:	e00d      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006152:	f7fb fe69 	bl	8001e28 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006162:	429a      	cmp	r2, r3
 8006164:	d903      	bls.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800616c:	e005      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800616e:	4b1c      	ldr	r3, [pc, #112]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0eb      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800617a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617e:	2b00      	cmp	r3, #0
 8006180:	d129      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800618a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006192:	d10e      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006194:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061a4:	091a      	lsrs	r2, r3, #4
 80061a6:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	4a0d      	ldr	r2, [pc, #52]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6113      	str	r3, [r2, #16]
 80061b0:	e005      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4a0a      	ldr	r2, [pc, #40]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ce:	4a04      	ldr	r2, [pc, #16]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80061d4:	e00e      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80061de:	e009      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80061e0:	58024400 	.word	0x58024400
 80061e4:	58024800 	.word	0x58024800
 80061e8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f002 0301 	and.w	r3, r2, #1
 8006200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800620a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	f000 8089 	beq.w	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800621c:	2b28      	cmp	r3, #40	@ 0x28
 800621e:	d86b      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006220:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	08006301 	.word	0x08006301
 800622c:	080062f9 	.word	0x080062f9
 8006230:	080062f9 	.word	0x080062f9
 8006234:	080062f9 	.word	0x080062f9
 8006238:	080062f9 	.word	0x080062f9
 800623c:	080062f9 	.word	0x080062f9
 8006240:	080062f9 	.word	0x080062f9
 8006244:	080062f9 	.word	0x080062f9
 8006248:	080062cd 	.word	0x080062cd
 800624c:	080062f9 	.word	0x080062f9
 8006250:	080062f9 	.word	0x080062f9
 8006254:	080062f9 	.word	0x080062f9
 8006258:	080062f9 	.word	0x080062f9
 800625c:	080062f9 	.word	0x080062f9
 8006260:	080062f9 	.word	0x080062f9
 8006264:	080062f9 	.word	0x080062f9
 8006268:	080062e3 	.word	0x080062e3
 800626c:	080062f9 	.word	0x080062f9
 8006270:	080062f9 	.word	0x080062f9
 8006274:	080062f9 	.word	0x080062f9
 8006278:	080062f9 	.word	0x080062f9
 800627c:	080062f9 	.word	0x080062f9
 8006280:	080062f9 	.word	0x080062f9
 8006284:	080062f9 	.word	0x080062f9
 8006288:	08006301 	.word	0x08006301
 800628c:	080062f9 	.word	0x080062f9
 8006290:	080062f9 	.word	0x080062f9
 8006294:	080062f9 	.word	0x080062f9
 8006298:	080062f9 	.word	0x080062f9
 800629c:	080062f9 	.word	0x080062f9
 80062a0:	080062f9 	.word	0x080062f9
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006301 	.word	0x08006301
 80062ac:	080062f9 	.word	0x080062f9
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	080062f9 	.word	0x080062f9
 80062b8:	080062f9 	.word	0x080062f9
 80062bc:	080062f9 	.word	0x080062f9
 80062c0:	080062f9 	.word	0x080062f9
 80062c4:	080062f9 	.word	0x080062f9
 80062c8:	08006301 	.word	0x08006301
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	3308      	adds	r3, #8
 80062d2:	2101      	movs	r1, #1
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 ffc3 	bl	8007260 <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062e0:	e00f      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	3328      	adds	r3, #40	@ 0x28
 80062e8:	2101      	movs	r1, #1
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f86a 	bl	80073c4 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800630a:	4bbf      	ldr	r3, [pc, #764]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006318:	4abb      	ldr	r2, [pc, #748]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800631a:	430b      	orrs	r3, r1
 800631c:	6553      	str	r3, [r2, #84]	@ 0x54
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f002 0302 	and.w	r3, r2, #2
 8006334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800633e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	d041      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800634e:	2b05      	cmp	r3, #5
 8006350:	d824      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006352:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	080063a5 	.word	0x080063a5
 800635c:	08006371 	.word	0x08006371
 8006360:	08006387 	.word	0x08006387
 8006364:	080063a5 	.word	0x080063a5
 8006368:	080063a5 	.word	0x080063a5
 800636c:	080063a5 	.word	0x080063a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	3308      	adds	r3, #8
 8006376:	2101      	movs	r1, #1
 8006378:	4618      	mov	r0, r3
 800637a:	f000 ff71 	bl	8007260 <RCCEx_PLL2_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006384:	e00f      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	3328      	adds	r3, #40	@ 0x28
 800638c:	2101      	movs	r1, #1
 800638e:	4618      	mov	r0, r3
 8006390:	f001 f818 	bl	80073c4 <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800639a:	e004      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80063a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063ae:	4b96      	ldr	r3, [pc, #600]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b2:	f023 0107 	bic.w	r1, r3, #7
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063bc:	4a92      	ldr	r2, [pc, #584]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063be:	430b      	orrs	r3, r1
 80063c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80063c2:	e003      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f002 0304 	and.w	r3, r2, #4
 80063d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063dc:	2300      	movs	r3, #0
 80063de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d044      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f4:	2b05      	cmp	r3, #5
 80063f6:	d825      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80063f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	0800644d 	.word	0x0800644d
 8006404:	08006419 	.word	0x08006419
 8006408:	0800642f 	.word	0x0800642f
 800640c:	0800644d 	.word	0x0800644d
 8006410:	0800644d 	.word	0x0800644d
 8006414:	0800644d 	.word	0x0800644d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641c:	3308      	adds	r3, #8
 800641e:	2101      	movs	r1, #1
 8006420:	4618      	mov	r0, r3
 8006422:	f000 ff1d 	bl	8007260 <RCCEx_PLL2_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800642c:	e00f      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	3328      	adds	r3, #40	@ 0x28
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f000 ffc4 	bl	80073c4 <RCCEx_PLL3_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006442:	e004      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006456:	4b6c      	ldr	r3, [pc, #432]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645a:	f023 0107 	bic.w	r1, r3, #7
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006466:	4a68      	ldr	r2, [pc, #416]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006468:	430b      	orrs	r3, r1
 800646a:	6593      	str	r3, [r2, #88]	@ 0x58
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	f002 0320 	and.w	r3, r2, #32
 8006482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006486:	2300      	movs	r3, #0
 8006488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800648c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006490:	460b      	mov	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	d055      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064a2:	d033      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80064a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064a8:	d82c      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ae:	d02f      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d826      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064ba:	d02b      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80064bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064c0:	d820      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c6:	d012      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80064c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064cc:	d81a      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d022      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80064d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064d6:	d115      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	3308      	adds	r3, #8
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 febd 	bl	8007260 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064ec:	e015      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f2:	3328      	adds	r3, #40	@ 0x28
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ff64 	bl	80073c4 <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006502:	e00a      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800650a:	e006      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800650c:	bf00      	nop
 800650e:	e004      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006510:	bf00      	nop
 8006512:	e002      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006514:	bf00      	nop
 8006516:	e000      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006522:	4b39      	ldr	r3, [pc, #228]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006526:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006532:	4a35      	ldr	r2, [pc, #212]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006534:	430b      	orrs	r3, r1
 8006536:	6553      	str	r3, [r2, #84]	@ 0x54
 8006538:	e003      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800654e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006552:	2300      	movs	r3, #0
 8006554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006558:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800655c:	460b      	mov	r3, r1
 800655e:	4313      	orrs	r3, r2
 8006560:	d058      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800656a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800656e:	d033      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006570:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006574:	d82c      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657a:	d02f      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800657c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006580:	d826      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006582:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006586:	d02b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800658c:	d820      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800658e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006592:	d012      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006598:	d81a      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d022      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800659e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a2:	d115      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	3308      	adds	r3, #8
 80065aa:	2100      	movs	r1, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fe57 	bl	8007260 <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065b8:	e015      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065be:	3328      	adds	r3, #40	@ 0x28
 80065c0:	2102      	movs	r1, #2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fefe 	bl	80073c4 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065ce:	e00a      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065d6:	e006      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065d8:	bf00      	nop
 80065da:	e004      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065dc:	bf00      	nop
 80065de:	e002      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10e      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ee:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065fe:	4a02      	ldr	r2, [pc, #8]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6593      	str	r3, [r2, #88]	@ 0x58
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006624:	2300      	movs	r3, #0
 8006626:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800662a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d055      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800663c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006640:	d033      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006642:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006646:	d82c      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664c:	d02f      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800664e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006652:	d826      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006654:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006658:	d02b      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800665a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800665e:	d820      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006664:	d012      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800666a:	d81a      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d022      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006674:	d115      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	3308      	adds	r3, #8
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fdee 	bl	8007260 <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800668a:	e015      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	3328      	adds	r3, #40	@ 0x28
 8006692:	2102      	movs	r1, #2
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fe95 	bl	80073c4 <RCCEx_PLL3_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80066a0:	e00a      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a8:	e006      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066aa:	bf00      	nop
 80066ac:	e004      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066ae:	bf00      	nop
 80066b0:	e002      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066c0:	4ba1      	ldr	r3, [pc, #644]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066d0:	4a9d      	ldr	r2, [pc, #628]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80066d6:	e003      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f002 0308 	and.w	r3, r2, #8
 80066ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066f0:	2300      	movs	r3, #0
 80066f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066fa:	460b      	mov	r3, r1
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d01e      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670c:	d10c      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006712:	3328      	adds	r3, #40	@ 0x28
 8006714:	2102      	movs	r1, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fe54 	bl	80073c4 <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006728:	4b87      	ldr	r3, [pc, #540]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006738:	4a83      	ldr	r2, [pc, #524]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800673a:	430b      	orrs	r3, r1
 800673c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f002 0310 	and.w	r3, r2, #16
 800674a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800674e:	2300      	movs	r3, #0
 8006750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006754:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006758:	460b      	mov	r3, r1
 800675a:	4313      	orrs	r3, r2
 800675c:	d01e      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800676a:	d10c      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	3328      	adds	r3, #40	@ 0x28
 8006772:	2102      	movs	r1, #2
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fe25 	bl	80073c4 <RCCEx_PLL3_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006786:	4b70      	ldr	r3, [pc, #448]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006796:	4a6c      	ldr	r2, [pc, #432]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d03e      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c8:	d022      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80067ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ce:	d81b      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d8:	d00b      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80067da:	e015      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e0:	3308      	adds	r3, #8
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fd3b 	bl	8007260 <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067f0:	e00f      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	3328      	adds	r3, #40	@ 0x28
 80067f8:	2102      	movs	r1, #2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fde2 	bl	80073c4 <RCCEx_PLL3_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006806:	e004      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800680e:	e000      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800681a:	4b4b      	ldr	r3, [pc, #300]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800682a:	4a47      	ldr	r2, [pc, #284]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800682c:	430b      	orrs	r3, r1
 800682e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006830:	e003      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006846:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006848:	2300      	movs	r3, #0
 800684a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800684c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006850:	460b      	mov	r3, r1
 8006852:	4313      	orrs	r3, r2
 8006854:	d03b      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006862:	d01f      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006868:	d818      	bhi.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800686a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800686e:	d003      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006874:	d007      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006876:	e011      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006878:	4b33      	ldr	r3, [pc, #204]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4a32      	ldr	r2, [pc, #200]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800687e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006884:	e00f      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	3328      	adds	r3, #40	@ 0x28
 800688c:	2101      	movs	r1, #1
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fd98 	bl	80073c4 <RCCEx_PLL3_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800689a:	e004      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80068a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10b      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ae:	4b26      	ldr	r3, [pc, #152]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	4a22      	ldr	r2, [pc, #136]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80068c4:	e003      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80068da:	673b      	str	r3, [r7, #112]	@ 0x70
 80068dc:	2300      	movs	r3, #0
 80068de:	677b      	str	r3, [r7, #116]	@ 0x74
 80068e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d034      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80068f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f8:	d007      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80068fa:	e011      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fc:	4b12      	ldr	r3, [pc, #72]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	4a11      	ldr	r2, [pc, #68]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006908:	e00e      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	3308      	adds	r3, #8
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fca4 	bl	8007260 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800691e:	e003      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10d      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006934:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693e:	4a02      	ldr	r2, [pc, #8]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006940:	430b      	orrs	r3, r1
 8006942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006944:	e006      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006946:	bf00      	nop
 8006948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006962:	2300      	movs	r3, #0
 8006964:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006966:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800696a:	460b      	mov	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	d00c      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006974:	3328      	adds	r3, #40	@ 0x28
 8006976:	2102      	movs	r1, #2
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fd23 	bl	80073c4 <RCCEx_PLL3_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006996:	663b      	str	r3, [r7, #96]	@ 0x60
 8006998:	2300      	movs	r3, #0
 800699a:	667b      	str	r3, [r7, #100]	@ 0x64
 800699c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d038      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b2:	d018      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80069b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b8:	d811      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80069ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069be:	d014      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c4:	d80b      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d011      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ce:	d106      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d0:	4bc3      	ldr	r3, [pc, #780]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	4ac2      	ldr	r2, [pc, #776]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80069dc:	e008      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069e4:	e004      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069e6:	bf00      	nop
 80069e8:	e002      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069ea:	bf00      	nop
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f8:	4bb9      	ldr	r3, [pc, #740]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a08:	4ab5      	ldr	r2, [pc, #724]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a0e:	e003      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a26:	2300      	movs	r3, #0
 8006a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d009      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a34:	4baa      	ldr	r3, [pc, #680]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a42:	4aa7      	ldr	r2, [pc, #668]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a56:	2300      	movs	r3, #0
 8006a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4313      	orrs	r3, r2
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a64:	4b9e      	ldr	r3, [pc, #632]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a74:	4a9a      	ldr	r2, [pc, #616]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a88:	2300      	movs	r3, #0
 8006a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a8c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a90:	460b      	mov	r3, r1
 8006a92:	4313      	orrs	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a96:	4b92      	ldr	r3, [pc, #584]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aa4:	4a8e      	ldr	r2, [pc, #568]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ab6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab8:	2300      	movs	r3, #0
 8006aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006abc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ac6:	4b86      	ldr	r3, [pc, #536]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	4a85      	ldr	r2, [pc, #532]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006acc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ad0:	6113      	str	r3, [r2, #16]
 8006ad2:	4b83      	ldr	r3, [pc, #524]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad4:	6919      	ldr	r1, [r3, #16]
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ada:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ade:	4a80      	ldr	r2, [pc, #512]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006af0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006afa:	460b      	mov	r3, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b00:	4b77      	ldr	r3, [pc, #476]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b04:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0e:	4a74      	ldr	r2, [pc, #464]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b10:	430b      	orrs	r3, r1
 8006b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b22:	2300      	movs	r3, #0
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b26:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b30:	4b6b      	ldr	r3, [pc, #428]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b34:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b40:	4a67      	ldr	r2, [pc, #412]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b42:	430b      	orrs	r3, r1
 8006b44:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d011      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	3308      	adds	r3, #8
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fb78 	bl	8007260 <RCCEx_PLL2_Config>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6239      	str	r1, [r7, #32]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	d011      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fb58 	bl	8007260 <RCCEx_PLL2_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	2100      	movs	r1, #0
 8006bd0:	61b9      	str	r1, [r7, #24]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4313      	orrs	r3, r2
 8006be0:	d011      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be6:	3308      	adds	r3, #8
 8006be8:	2102      	movs	r1, #2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb38 	bl	8007260 <RCCEx_PLL2_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6139      	str	r1, [r7, #16]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d011      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c26:	3328      	adds	r3, #40	@ 0x28
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fbca 	bl	80073c4 <RCCEx_PLL3_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	2100      	movs	r1, #0
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	d011      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c66:	3328      	adds	r3, #40	@ 0x28
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fbaa 	bl	80073c4 <RCCEx_PLL3_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6039      	str	r1, [r7, #0]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	607b      	str	r3, [r7, #4]
 8006c98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d011      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	3328      	adds	r3, #40	@ 0x28
 8006ca8:	2102      	movs	r1, #2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fb8a 	bl	80073c4 <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006cc6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ce0:	58024400 	.word	0x58024400

08006ce4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ce8:	f7fe fd96 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 8006cec:	4602      	mov	r2, r0
 8006cee:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	091b      	lsrs	r3, r3, #4
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	4904      	ldr	r1, [pc, #16]	@ (8006d0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cfa:	5ccb      	ldrb	r3, [r1, r3]
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	0800fa58 	.word	0x0800fa58

08006d10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b089      	sub	sp, #36	@ 0x24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d18:	4ba1      	ldr	r3, [pc, #644]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d22:	4b9f      	ldr	r3, [pc, #636]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d26:	0b1b      	lsrs	r3, r3, #12
 8006d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006d3a:	4b99      	ldr	r3, [pc, #612]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8111 	beq.w	8006f80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	f000 8083 	beq.w	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	f200 80a1 	bhi.w	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d056      	beq.n	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d7a:	e099      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d7c:	4b88      	ldr	r3, [pc, #544]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d02d      	beq.n	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d88:	4b85      	ldr	r3, [pc, #532]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	08db      	lsrs	r3, r3, #3
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	4a84      	ldr	r2, [pc, #528]	@ (8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006de2:	e087      	b.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b6a      	ldr	r3, [pc, #424]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e26:	e065      	b.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b59      	ldr	r3, [pc, #356]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6a:	e043      	b.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b48      	ldr	r3, [pc, #288]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eae:	e021      	b.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec2:	4b37      	ldr	r3, [pc, #220]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ef2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	0a5b      	lsrs	r3, r3, #9
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f22:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f48:	ee17 2a90 	vmov	r2, s15
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f50:	4b13      	ldr	r3, [pc, #76]	@ (8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f54:	0e1b      	lsrs	r3, r3, #24
 8006f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f76:	ee17 2a90 	vmov	r2, s15
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f7e:	e008      	b.n	8006f92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	609a      	str	r2, [r3, #8]
}
 8006f92:	bf00      	nop
 8006f94:	3724      	adds	r7, #36	@ 0x24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	03d09000 	.word	0x03d09000
 8006fa8:	46000000 	.word	0x46000000
 8006fac:	4c742400 	.word	0x4c742400
 8006fb0:	4a742400 	.word	0x4a742400
 8006fb4:	4bbebc20 	.word	0x4bbebc20

08006fb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	@ 0x24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fc0:	4ba1      	ldr	r3, [pc, #644]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006fca:	4b9f      	ldr	r3, [pc, #636]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	0d1b      	lsrs	r3, r3, #20
 8006fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006fe2:	4b99      	ldr	r3, [pc, #612]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8111 	beq.w	8007228 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b02      	cmp	r3, #2
 800700a:	f000 8083 	beq.w	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b02      	cmp	r3, #2
 8007012:	f200 80a1 	bhi.w	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d056      	beq.n	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007022:	e099      	b.n	8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007024:	4b88      	ldr	r3, [pc, #544]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02d      	beq.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007030:	4b85      	ldr	r3, [pc, #532]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	4a84      	ldr	r2, [pc, #528]	@ (800724c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b7b      	ldr	r3, [pc, #492]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800708a:	e087      	b.n	800719c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b6a      	ldr	r3, [pc, #424]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e065      	b.n	800719c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b59      	ldr	r3, [pc, #356]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007112:	e043      	b.n	800719c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800725c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b48      	ldr	r3, [pc, #288]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a03 	vldr	s12, [r7, #12]
 800713a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007156:	e021      	b.n	800719c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716a:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717a:	ed97 6a03 	vldr	s12, [r7, #12]
 800717e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800719a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800719c:	4b2a      	ldr	r3, [pc, #168]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	0a5b      	lsrs	r3, r3, #9
 80071a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c2:	ee17 2a90 	vmov	r2, s15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80071ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f0:	ee17 2a90 	vmov	r2, s15
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071f8:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fc:	0e1b      	lsrs	r3, r3, #24
 80071fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800720e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007212:	edd7 6a07 	vldr	s13, [r7, #28]
 8007216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721e:	ee17 2a90 	vmov	r2, s15
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007226:	e008      	b.n	800723a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	609a      	str	r2, [r3, #8]
}
 800723a:	bf00      	nop
 800723c:	3724      	adds	r7, #36	@ 0x24
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
 800724c:	03d09000 	.word	0x03d09000
 8007250:	46000000 	.word	0x46000000
 8007254:	4c742400 	.word	0x4c742400
 8007258:	4a742400 	.word	0x4a742400
 800725c:	4bbebc20 	.word	0x4bbebc20

08007260 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800726e:	4b53      	ldr	r3, [pc, #332]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b03      	cmp	r3, #3
 8007278:	d101      	bne.n	800727e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e099      	b.n	80073b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800727e:	4b4f      	ldr	r3, [pc, #316]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a4e      	ldr	r2, [pc, #312]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007284:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800728a:	f7fa fdcd 	bl	8001e28 <HAL_GetTick>
 800728e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007290:	e008      	b.n	80072a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007292:	f7fa fdc9 	bl	8001e28 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e086      	b.n	80073b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072a4:	4b45      	ldr	r3, [pc, #276]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f0      	bne.n	8007292 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072b0:	4b42      	ldr	r3, [pc, #264]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	031b      	lsls	r3, r3, #12
 80072be:	493f      	ldr	r1, [pc, #252]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	025b      	lsls	r3, r3, #9
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	3b01      	subs	r3, #1
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	061b      	lsls	r3, r3, #24
 80072f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072f4:	4931      	ldr	r1, [pc, #196]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072fa:	4b30      	ldr	r3, [pc, #192]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	492d      	ldr	r1, [pc, #180]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007308:	4313      	orrs	r3, r2
 800730a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800730c:	4b2b      	ldr	r3, [pc, #172]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 800730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007310:	f023 0220 	bic.w	r2, r3, #32
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	4928      	ldr	r1, [pc, #160]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 800731a:	4313      	orrs	r3, r2
 800731c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800731e:	4b27      	ldr	r3, [pc, #156]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	4a26      	ldr	r2, [pc, #152]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007324:	f023 0310 	bic.w	r3, r3, #16
 8007328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800732a:	4b24      	ldr	r3, [pc, #144]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 800732c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800732e:	4b24      	ldr	r3, [pc, #144]	@ (80073c0 <RCCEx_PLL2_Config+0x160>)
 8007330:	4013      	ands	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	69d2      	ldr	r2, [r2, #28]
 8007336:	00d2      	lsls	r2, r2, #3
 8007338:	4920      	ldr	r1, [pc, #128]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800733e:	4b1f      	ldr	r3, [pc, #124]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4a1e      	ldr	r2, [pc, #120]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007344:	f043 0310 	orr.w	r3, r3, #16
 8007348:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d106      	bne.n	800735e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007350:	4b1a      	ldr	r3, [pc, #104]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	4a19      	ldr	r2, [pc, #100]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007356:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800735a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800735c:	e00f      	b.n	800737e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d106      	bne.n	8007372 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007364:	4b15      	ldr	r3, [pc, #84]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	4a14      	ldr	r2, [pc, #80]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 800736a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800736e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007370:	e005      	b.n	800737e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007372:	4b12      	ldr	r3, [pc, #72]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007376:	4a11      	ldr	r2, [pc, #68]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007378:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800737c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800737e:	4b0f      	ldr	r3, [pc, #60]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a0e      	ldr	r2, [pc, #56]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 8007384:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738a:	f7fa fd4d 	bl	8001e28 <HAL_GetTick>
 800738e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007390:	e008      	b.n	80073a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007392:	f7fa fd49 	bl	8001e28 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e006      	b.n	80073b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <RCCEx_PLL2_Config+0x15c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	58024400 	.word	0x58024400
 80073c0:	ffff0007 	.word	0xffff0007

080073c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073d2:	4b53      	ldr	r3, [pc, #332]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d101      	bne.n	80073e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e099      	b.n	8007516 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80073e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ee:	f7fa fd1b 	bl	8001e28 <HAL_GetTick>
 80073f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073f4:	e008      	b.n	8007408 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073f6:	f7fa fd17 	bl	8001e28 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e086      	b.n	8007516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007408:	4b45      	ldr	r3, [pc, #276]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1f0      	bne.n	80073f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007414:	4b42      	ldr	r3, [pc, #264]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007418:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	051b      	lsls	r3, r3, #20
 8007422:	493f      	ldr	r1, [pc, #252]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007424:	4313      	orrs	r3, r2
 8007426:	628b      	str	r3, [r1, #40]	@ 0x28
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	3b01      	subs	r3, #1
 800742e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	3b01      	subs	r3, #1
 8007438:	025b      	lsls	r3, r3, #9
 800743a:	b29b      	uxth	r3, r3
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	3b01      	subs	r3, #1
 8007444:	041b      	lsls	r3, r3, #16
 8007446:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	3b01      	subs	r3, #1
 8007452:	061b      	lsls	r3, r3, #24
 8007454:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007458:	4931      	ldr	r1, [pc, #196]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800745e:	4b30      	ldr	r3, [pc, #192]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	492d      	ldr	r1, [pc, #180]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 800746c:	4313      	orrs	r3, r2
 800746e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007470:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	4928      	ldr	r1, [pc, #160]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 800747e:	4313      	orrs	r3, r2
 8007480:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007482:	4b27      	ldr	r3, [pc, #156]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	4a26      	ldr	r2, [pc, #152]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800748c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 8007490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007492:	4b24      	ldr	r3, [pc, #144]	@ (8007524 <RCCEx_PLL3_Config+0x160>)
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	69d2      	ldr	r2, [r2, #28]
 800749a:	00d2      	lsls	r2, r2, #3
 800749c:	4920      	ldr	r1, [pc, #128]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	4a19      	ldr	r2, [pc, #100]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80074be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074c0:	e00f      	b.n	80074e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d106      	bne.n	80074d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074c8:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	4a14      	ldr	r2, [pc, #80]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074d4:	e005      	b.n	80074e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074d6:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	4a11      	ldr	r2, [pc, #68]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 80074e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ee:	f7fa fc9b 	bl	8001e28 <HAL_GetTick>
 80074f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074f4:	e008      	b.n	8007508 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074f6:	f7fa fc97 	bl	8001e28 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e006      	b.n	8007516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007508:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <RCCEx_PLL3_Config+0x15c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	58024400 	.word	0x58024400
 8007524:	ffff0007 	.word	0xffff0007

08007528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e049      	b.n	80075ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fa fa72 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4619      	mov	r1, r3
 8007566:	4610      	mov	r0, r2
 8007568:	f000 fe56 	bl	8008218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d001      	beq.n	80075f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e04c      	b.n	800768a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a26      	ldr	r2, [pc, #152]	@ (8007698 <HAL_TIM_Base_Start+0xc0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760a:	d01d      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a22      	ldr	r2, [pc, #136]	@ (800769c <HAL_TIM_Base_Start+0xc4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a21      	ldr	r2, [pc, #132]	@ (80076a0 <HAL_TIM_Base_Start+0xc8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <HAL_TIM_Base_Start+0xcc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1e      	ldr	r2, [pc, #120]	@ (80076a8 <HAL_TIM_Base_Start+0xd0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1c      	ldr	r2, [pc, #112]	@ (80076ac <HAL_TIM_Base_Start+0xd4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_TIM_Base_Start+0x70>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1b      	ldr	r2, [pc, #108]	@ (80076b0 <HAL_TIM_Base_Start+0xd8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d115      	bne.n	8007674 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	4b19      	ldr	r3, [pc, #100]	@ (80076b4 <HAL_TIM_Base_Start+0xdc>)
 8007650:	4013      	ands	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b06      	cmp	r3, #6
 8007658:	d015      	beq.n	8007686 <HAL_TIM_Base_Start+0xae>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007660:	d011      	beq.n	8007686 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0201 	orr.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007672:	e008      	b.n	8007686 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e000      	b.n	8007688 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40010400 	.word	0x40010400
 80076ac:	40001800 	.word	0x40001800
 80076b0:	40014000 	.word	0x40014000
 80076b4:	00010007 	.word	0x00010007

080076b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d001      	beq.n	80076d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e054      	b.n	800777a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a26      	ldr	r2, [pc, #152]	@ (8007788 <HAL_TIM_Base_Start_IT+0xd0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d022      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fa:	d01d      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a22      	ldr	r2, [pc, #136]	@ (800778c <HAL_TIM_Base_Start_IT+0xd4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a21      	ldr	r2, [pc, #132]	@ (8007790 <HAL_TIM_Base_Start_IT+0xd8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1f      	ldr	r2, [pc, #124]	@ (8007794 <HAL_TIM_Base_Start_IT+0xdc>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1e      	ldr	r2, [pc, #120]	@ (8007798 <HAL_TIM_Base_Start_IT+0xe0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <HAL_TIM_Base_Start_IT+0xe4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_TIM_Base_Start_IT+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d115      	bne.n	8007764 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	4b19      	ldr	r3, [pc, #100]	@ (80077a4 <HAL_TIM_Base_Start_IT+0xec>)
 8007740:	4013      	ands	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b06      	cmp	r3, #6
 8007748:	d015      	beq.n	8007776 <HAL_TIM_Base_Start_IT+0xbe>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007750:	d011      	beq.n	8007776 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0201 	orr.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	e008      	b.n	8007776 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e000      	b.n	8007778 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800
 8007794:	40000c00 	.word	0x40000c00
 8007798:	40010400 	.word	0x40010400
 800779c:	40001800 	.word	0x40001800
 80077a0:	40014000 	.word	0x40014000
 80077a4:	00010007 	.word	0x00010007

080077a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e049      	b.n	800784e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fa f958 	bl	8001a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f000 fd16 	bl	8008218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_TIM_PWM_Start+0x24>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e03c      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b04      	cmp	r3, #4
 8007880:	d109      	bne.n	8007896 <HAL_TIM_PWM_Start+0x3e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e02f      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x58>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e022      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d109      	bne.n	80078ca <HAL_TIM_PWM_Start+0x72>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b01      	cmp	r3, #1
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e015      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d109      	bne.n	80078e4 <HAL_TIM_PWM_Start+0x8c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e008      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e0a1      	b.n	8007a42 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0xb6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800790c:	e023      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b04      	cmp	r3, #4
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0xc6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800791c:	e01b      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b08      	cmp	r3, #8
 8007922:	d104      	bne.n	800792e <HAL_TIM_PWM_Start+0xd6>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800792c:	e013      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b0c      	cmp	r3, #12
 8007932:	d104      	bne.n	800793e <HAL_TIM_PWM_Start+0xe6>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800793c:	e00b      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b10      	cmp	r3, #16
 8007942:	d104      	bne.n	800794e <HAL_TIM_PWM_Start+0xf6>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800794c:	e003      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2201      	movs	r2, #1
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f001 f874 	bl	8008a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a38      	ldr	r2, [pc, #224]	@ (8007a4c <HAL_TIM_PWM_Start+0x1f4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a37      	ldr	r2, [pc, #220]	@ (8007a50 <HAL_TIM_PWM_Start+0x1f8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a35      	ldr	r2, [pc, #212]	@ (8007a54 <HAL_TIM_PWM_Start+0x1fc>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a34      	ldr	r2, [pc, #208]	@ (8007a58 <HAL_TIM_PWM_Start+0x200>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a32      	ldr	r2, [pc, #200]	@ (8007a5c <HAL_TIM_PWM_Start+0x204>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <HAL_TIM_PWM_Start+0x142>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <HAL_TIM_PWM_Start+0x144>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a25      	ldr	r2, [pc, #148]	@ (8007a4c <HAL_TIM_PWM_Start+0x1f4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d022      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c2:	d01d      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a25      	ldr	r2, [pc, #148]	@ (8007a60 <HAL_TIM_PWM_Start+0x208>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a24      	ldr	r2, [pc, #144]	@ (8007a64 <HAL_TIM_PWM_Start+0x20c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a22      	ldr	r2, [pc, #136]	@ (8007a68 <HAL_TIM_PWM_Start+0x210>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a50 <HAL_TIM_PWM_Start+0x1f8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a6c <HAL_TIM_PWM_Start+0x214>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x1a8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a16      	ldr	r2, [pc, #88]	@ (8007a54 <HAL_TIM_PWM_Start+0x1fc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d115      	bne.n	8007a2c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <HAL_TIM_PWM_Start+0x218>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d015      	beq.n	8007a3e <HAL_TIM_PWM_Start+0x1e6>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a18:	d011      	beq.n	8007a3e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	e008      	b.n	8007a3e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e000      	b.n	8007a40 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40010000 	.word	0x40010000
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40014400 	.word	0x40014400
 8007a5c:	40014800 	.word	0x40014800
 8007a60:	40000400 	.word	0x40000400
 8007a64:	40000800 	.word	0x40000800
 8007a68:	40000c00 	.word	0x40000c00
 8007a6c:	40001800 	.word	0x40001800
 8007a70:	00010007 	.word	0x00010007

08007a74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2200      	movs	r2, #0
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 ffe0 	bl	8008a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a3e      	ldr	r2, [pc, #248]	@ (8007b8c <HAL_TIM_PWM_Stop+0x118>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <HAL_TIM_PWM_Stop+0x4a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8007b90 <HAL_TIM_PWM_Stop+0x11c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00e      	beq.n	8007abe <HAL_TIM_PWM_Stop+0x4a>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8007b94 <HAL_TIM_PWM_Stop+0x120>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_TIM_PWM_Stop+0x4a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a3a      	ldr	r2, [pc, #232]	@ (8007b98 <HAL_TIM_PWM_Stop+0x124>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_TIM_PWM_Stop+0x4a>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a38      	ldr	r2, [pc, #224]	@ (8007b9c <HAL_TIM_PWM_Stop+0x128>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d101      	bne.n	8007ac2 <HAL_TIM_PWM_Stop+0x4e>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <HAL_TIM_PWM_Stop+0x50>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a1a      	ldr	r2, [r3, #32]
 8007ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10f      	bne.n	8007af8 <HAL_TIM_PWM_Stop+0x84>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6a1a      	ldr	r2, [r3, #32]
 8007ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d107      	bne.n	8007af8 <HAL_TIM_PWM_Stop+0x84>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007af6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <HAL_TIM_PWM_Stop+0xb4>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b12:	4013      	ands	r3, r2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_PWM_Stop+0xb4>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0201 	bic.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <HAL_TIM_PWM_Stop+0xc4>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b36:	e023      	b.n	8007b80 <HAL_TIM_PWM_Stop+0x10c>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d104      	bne.n	8007b48 <HAL_TIM_PWM_Stop+0xd4>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b46:	e01b      	b.n	8007b80 <HAL_TIM_PWM_Stop+0x10c>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d104      	bne.n	8007b58 <HAL_TIM_PWM_Stop+0xe4>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b56:	e013      	b.n	8007b80 <HAL_TIM_PWM_Stop+0x10c>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b0c      	cmp	r3, #12
 8007b5c:	d104      	bne.n	8007b68 <HAL_TIM_PWM_Stop+0xf4>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b66:	e00b      	b.n	8007b80 <HAL_TIM_PWM_Stop+0x10c>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b10      	cmp	r3, #16
 8007b6c:	d104      	bne.n	8007b78 <HAL_TIM_PWM_Stop+0x104>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b76:	e003      	b.n	8007b80 <HAL_TIM_PWM_Stop+0x10c>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800

08007ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d020      	beq.n	8007c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01b      	beq.n	8007c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0202 	mvn.w	r2, #2
 8007bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 faf6 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e005      	b.n	8007bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fae8 	bl	80081c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 faf9 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d020      	beq.n	8007c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01b      	beq.n	8007c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0204 	mvn.w	r2, #4
 8007c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fad0 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
 8007c3c:	e005      	b.n	8007c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fac2 	bl	80081c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fad3 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01b      	beq.n	8007c9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0208 	mvn.w	r2, #8
 8007c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 faaa 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa9c 	bl	80081c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 faad 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01b      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0210 	mvn.w	r2, #16
 8007cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa84 	bl	80081dc <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa76 	bl	80081c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fa87 	bl	80081f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00c      	beq.n	8007d0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0201 	mvn.w	r2, #1
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7f9 fac8 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 ff47 	bl	8008bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00c      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 ff3f 	bl	8008bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00c      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa41 	bl	8008204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f003 0320 	and.w	r3, r3, #32
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00c      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0220 	mvn.w	r2, #32
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 ff07 	bl	8008bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e0ff      	b.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b14      	cmp	r3, #20
 8007dda:	f200 80f0 	bhi.w	8007fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007dde:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007e39 	.word	0x08007e39
 8007de8:	08007fbf 	.word	0x08007fbf
 8007dec:	08007fbf 	.word	0x08007fbf
 8007df0:	08007fbf 	.word	0x08007fbf
 8007df4:	08007e79 	.word	0x08007e79
 8007df8:	08007fbf 	.word	0x08007fbf
 8007dfc:	08007fbf 	.word	0x08007fbf
 8007e00:	08007fbf 	.word	0x08007fbf
 8007e04:	08007ebb 	.word	0x08007ebb
 8007e08:	08007fbf 	.word	0x08007fbf
 8007e0c:	08007fbf 	.word	0x08007fbf
 8007e10:	08007fbf 	.word	0x08007fbf
 8007e14:	08007efb 	.word	0x08007efb
 8007e18:	08007fbf 	.word	0x08007fbf
 8007e1c:	08007fbf 	.word	0x08007fbf
 8007e20:	08007fbf 	.word	0x08007fbf
 8007e24:	08007f3d 	.word	0x08007f3d
 8007e28:	08007fbf 	.word	0x08007fbf
 8007e2c:	08007fbf 	.word	0x08007fbf
 8007e30:	08007fbf 	.word	0x08007fbf
 8007e34:	08007f7d 	.word	0x08007f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fa90 	bl	8008364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0208 	orr.w	r2, r2, #8
 8007e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0204 	bic.w	r2, r2, #4
 8007e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6999      	ldr	r1, [r3, #24]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	619a      	str	r2, [r3, #24]
      break;
 8007e76:	e0a5      	b.n	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fb00 	bl	8008484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6999      	ldr	r1, [r3, #24]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	021a      	lsls	r2, r3, #8
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	619a      	str	r2, [r3, #24]
      break;
 8007eb8:	e084      	b.n	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68b9      	ldr	r1, [r7, #8]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fb69 	bl	8008598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0208 	orr.w	r2, r2, #8
 8007ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69da      	ldr	r2, [r3, #28]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0204 	bic.w	r2, r2, #4
 8007ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69d9      	ldr	r1, [r3, #28]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	61da      	str	r2, [r3, #28]
      break;
 8007ef8:	e064      	b.n	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fbd1 	bl	80086a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69da      	ldr	r2, [r3, #28]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69d9      	ldr	r1, [r3, #28]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	021a      	lsls	r2, r3, #8
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	61da      	str	r2, [r3, #28]
      break;
 8007f3a:	e043      	b.n	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fc1a 	bl	800877c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0208 	orr.w	r2, r2, #8
 8007f56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0204 	bic.w	r2, r2, #4
 8007f66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f7a:	e023      	b.n	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fc5e 	bl	8008844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	021a      	lsls	r2, r3, #8
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007fbc:	e002      	b.n	8007fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop

08007fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e0dc      	b.n	80081ae <HAL_TIM_ConfigClockSource+0x1d6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	4b6a      	ldr	r3, [pc, #424]	@ (80081b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008010:	4013      	ands	r3, r2
 8008012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800801a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a64      	ldr	r2, [pc, #400]	@ (80081bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	f000 80a9 	beq.w	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 8008030:	4a62      	ldr	r2, [pc, #392]	@ (80081bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	f200 80ae 	bhi.w	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008038:	4a61      	ldr	r2, [pc, #388]	@ (80081c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	f000 80a1 	beq.w	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 8008040:	4a5f      	ldr	r2, [pc, #380]	@ (80081c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	f200 80a6 	bhi.w	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008048:	4a5e      	ldr	r2, [pc, #376]	@ (80081c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	f000 8099 	beq.w	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 8008050:	4a5c      	ldr	r2, [pc, #368]	@ (80081c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008052:	4293      	cmp	r3, r2
 8008054:	f200 809e 	bhi.w	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008058:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800805c:	f000 8091 	beq.w	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 8008060:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008064:	f200 8096 	bhi.w	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008068:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806c:	f000 8089 	beq.w	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 8008070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008074:	f200 808e 	bhi.w	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800807c:	d03e      	beq.n	80080fc <HAL_TIM_ConfigClockSource+0x124>
 800807e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008082:	f200 8087 	bhi.w	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800808a:	f000 8086 	beq.w	800819a <HAL_TIM_ConfigClockSource+0x1c2>
 800808e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008092:	d87f      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 8008094:	2b70      	cmp	r3, #112	@ 0x70
 8008096:	d01a      	beq.n	80080ce <HAL_TIM_ConfigClockSource+0xf6>
 8008098:	2b70      	cmp	r3, #112	@ 0x70
 800809a:	d87b      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 800809c:	2b60      	cmp	r3, #96	@ 0x60
 800809e:	d050      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0x16a>
 80080a0:	2b60      	cmp	r3, #96	@ 0x60
 80080a2:	d877      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a4:	2b50      	cmp	r3, #80	@ 0x50
 80080a6:	d03c      	beq.n	8008122 <HAL_TIM_ConfigClockSource+0x14a>
 80080a8:	2b50      	cmp	r3, #80	@ 0x50
 80080aa:	d873      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 80080ac:	2b40      	cmp	r3, #64	@ 0x40
 80080ae:	d058      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x18a>
 80080b0:	2b40      	cmp	r3, #64	@ 0x40
 80080b2:	d86f      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b4:	2b30      	cmp	r3, #48	@ 0x30
 80080b6:	d064      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 80080b8:	2b30      	cmp	r3, #48	@ 0x30
 80080ba:	d86b      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d060      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d867      	bhi.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d05c      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d05a      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x1aa>
 80080cc:	e062      	b.n	8008194 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	f000 fc95 	bl	8008a0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	609a      	str	r2, [r3, #8]
      break;
 80080fa:	e04f      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800810c:	f000 fc7e 	bl	8008a0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800811e:	609a      	str	r2, [r3, #8]
      break;
 8008120:	e03c      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800812e:	461a      	mov	r2, r3
 8008130:	f000 fbee 	bl	8008910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2150      	movs	r1, #80	@ 0x50
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fc48 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8008140:	e02c      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800814e:	461a      	mov	r2, r3
 8008150:	f000 fc0d 	bl	800896e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2160      	movs	r1, #96	@ 0x60
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fc38 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8008160:	e01c      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800816e:	461a      	mov	r2, r3
 8008170:	f000 fbce 	bl	8008910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2140      	movs	r1, #64	@ 0x40
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fc28 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8008180:	e00c      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f000 fc1f 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8008192:	e003      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	73fb      	strb	r3, [r7, #15]
      break;
 8008198:	e000      	b.n	800819c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800819a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	ffceff88 	.word	0xffceff88
 80081bc:	00100040 	.word	0x00100040
 80081c0:	00100030 	.word	0x00100030
 80081c4:	00100020 	.word	0x00100020

080081c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a46      	ldr	r2, [pc, #280]	@ (8008344 <TIM_Base_SetConfig+0x12c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008236:	d00f      	beq.n	8008258 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a43      	ldr	r2, [pc, #268]	@ (8008348 <TIM_Base_SetConfig+0x130>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00b      	beq.n	8008258 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a42      	ldr	r2, [pc, #264]	@ (800834c <TIM_Base_SetConfig+0x134>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d007      	beq.n	8008258 <TIM_Base_SetConfig+0x40>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a41      	ldr	r2, [pc, #260]	@ (8008350 <TIM_Base_SetConfig+0x138>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_Base_SetConfig+0x40>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a40      	ldr	r2, [pc, #256]	@ (8008354 <TIM_Base_SetConfig+0x13c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d108      	bne.n	800826a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a35      	ldr	r2, [pc, #212]	@ (8008344 <TIM_Base_SetConfig+0x12c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01f      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008278:	d01b      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a32      	ldr	r2, [pc, #200]	@ (8008348 <TIM_Base_SetConfig+0x130>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d017      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a31      	ldr	r2, [pc, #196]	@ (800834c <TIM_Base_SetConfig+0x134>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a30      	ldr	r2, [pc, #192]	@ (8008350 <TIM_Base_SetConfig+0x138>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00f      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2f      	ldr	r2, [pc, #188]	@ (8008354 <TIM_Base_SetConfig+0x13c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a2e      	ldr	r2, [pc, #184]	@ (8008358 <TIM_Base_SetConfig+0x140>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a2d      	ldr	r2, [pc, #180]	@ (800835c <TIM_Base_SetConfig+0x144>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_Base_SetConfig+0x9a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008360 <TIM_Base_SetConfig+0x148>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d108      	bne.n	80082c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a16      	ldr	r2, [pc, #88]	@ (8008344 <TIM_Base_SetConfig+0x12c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00f      	beq.n	8008310 <TIM_Base_SetConfig+0xf8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a18      	ldr	r2, [pc, #96]	@ (8008354 <TIM_Base_SetConfig+0x13c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_Base_SetConfig+0xf8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a17      	ldr	r2, [pc, #92]	@ (8008358 <TIM_Base_SetConfig+0x140>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_Base_SetConfig+0xf8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a16      	ldr	r2, [pc, #88]	@ (800835c <TIM_Base_SetConfig+0x144>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_Base_SetConfig+0xf8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a15      	ldr	r2, [pc, #84]	@ (8008360 <TIM_Base_SetConfig+0x148>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d103      	bne.n	8008318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b01      	cmp	r3, #1
 8008328:	d105      	bne.n	8008336 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	f023 0201 	bic.w	r2, r3, #1
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	611a      	str	r2, [r3, #16]
  }
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40010000 	.word	0x40010000
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40010400 	.word	0x40010400
 8008358:	40014000 	.word	0x40014000
 800835c:	40014400 	.word	0x40014400
 8008360:	40014800 	.word	0x40014800

08008364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	f023 0201 	bic.w	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4b37      	ldr	r3, [pc, #220]	@ (800846c <TIM_OC1_SetConfig+0x108>)
 8008390:	4013      	ands	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f023 0302 	bic.w	r3, r3, #2
 80083ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008470 <TIM_OC1_SetConfig+0x10c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00f      	beq.n	80083e0 <TIM_OC1_SetConfig+0x7c>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008474 <TIM_OC1_SetConfig+0x110>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_OC1_SetConfig+0x7c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008478 <TIM_OC1_SetConfig+0x114>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_OC1_SetConfig+0x7c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a2a      	ldr	r2, [pc, #168]	@ (800847c <TIM_OC1_SetConfig+0x118>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC1_SetConfig+0x7c>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a29      	ldr	r2, [pc, #164]	@ (8008480 <TIM_OC1_SetConfig+0x11c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d10c      	bne.n	80083fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f023 0308 	bic.w	r3, r3, #8
 80083e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f023 0304 	bic.w	r3, r3, #4
 80083f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008470 <TIM_OC1_SetConfig+0x10c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00f      	beq.n	8008422 <TIM_OC1_SetConfig+0xbe>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <TIM_OC1_SetConfig+0x110>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00b      	beq.n	8008422 <TIM_OC1_SetConfig+0xbe>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a1a      	ldr	r2, [pc, #104]	@ (8008478 <TIM_OC1_SetConfig+0x114>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d007      	beq.n	8008422 <TIM_OC1_SetConfig+0xbe>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a19      	ldr	r2, [pc, #100]	@ (800847c <TIM_OC1_SetConfig+0x118>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_OC1_SetConfig+0xbe>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a18      	ldr	r2, [pc, #96]	@ (8008480 <TIM_OC1_SetConfig+0x11c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d111      	bne.n	8008446 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	621a      	str	r2, [r3, #32]
}
 8008460:	bf00      	nop
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	fffeff8f 	.word	0xfffeff8f
 8008470:	40010000 	.word	0x40010000
 8008474:	40010400 	.word	0x40010400
 8008478:	40014000 	.word	0x40014000
 800847c:	40014400 	.word	0x40014400
 8008480:	40014800 	.word	0x40014800

08008484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	f023 0210 	bic.w	r2, r3, #16
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4b34      	ldr	r3, [pc, #208]	@ (8008580 <TIM_OC2_SetConfig+0xfc>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	021b      	lsls	r3, r3, #8
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f023 0320 	bic.w	r3, r3, #32
 80084ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a29      	ldr	r2, [pc, #164]	@ (8008584 <TIM_OC2_SetConfig+0x100>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d003      	beq.n	80084ec <TIM_OC2_SetConfig+0x68>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a28      	ldr	r2, [pc, #160]	@ (8008588 <TIM_OC2_SetConfig+0x104>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d10d      	bne.n	8008508 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008506:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a1e      	ldr	r2, [pc, #120]	@ (8008584 <TIM_OC2_SetConfig+0x100>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00f      	beq.n	8008530 <TIM_OC2_SetConfig+0xac>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a1d      	ldr	r2, [pc, #116]	@ (8008588 <TIM_OC2_SetConfig+0x104>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00b      	beq.n	8008530 <TIM_OC2_SetConfig+0xac>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a1c      	ldr	r2, [pc, #112]	@ (800858c <TIM_OC2_SetConfig+0x108>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d007      	beq.n	8008530 <TIM_OC2_SetConfig+0xac>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a1b      	ldr	r2, [pc, #108]	@ (8008590 <TIM_OC2_SetConfig+0x10c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d003      	beq.n	8008530 <TIM_OC2_SetConfig+0xac>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a1a      	ldr	r2, [pc, #104]	@ (8008594 <TIM_OC2_SetConfig+0x110>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d113      	bne.n	8008558 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800853e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	4313      	orrs	r3, r2
 8008556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	621a      	str	r2, [r3, #32]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	feff8fff 	.word	0xfeff8fff
 8008584:	40010000 	.word	0x40010000
 8008588:	40010400 	.word	0x40010400
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800

08008598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4b33      	ldr	r3, [pc, #204]	@ (8008690 <TIM_OC3_SetConfig+0xf8>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a28      	ldr	r2, [pc, #160]	@ (8008694 <TIM_OC3_SetConfig+0xfc>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC3_SetConfig+0x66>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a27      	ldr	r2, [pc, #156]	@ (8008698 <TIM_OC3_SetConfig+0x100>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d10d      	bne.n	800861a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a1d      	ldr	r2, [pc, #116]	@ (8008694 <TIM_OC3_SetConfig+0xfc>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00f      	beq.n	8008642 <TIM_OC3_SetConfig+0xaa>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a1c      	ldr	r2, [pc, #112]	@ (8008698 <TIM_OC3_SetConfig+0x100>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00b      	beq.n	8008642 <TIM_OC3_SetConfig+0xaa>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a1b      	ldr	r2, [pc, #108]	@ (800869c <TIM_OC3_SetConfig+0x104>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d007      	beq.n	8008642 <TIM_OC3_SetConfig+0xaa>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a1a      	ldr	r2, [pc, #104]	@ (80086a0 <TIM_OC3_SetConfig+0x108>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d003      	beq.n	8008642 <TIM_OC3_SetConfig+0xaa>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a19      	ldr	r2, [pc, #100]	@ (80086a4 <TIM_OC3_SetConfig+0x10c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d113      	bne.n	800866a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	fffeff8f 	.word	0xfffeff8f
 8008694:	40010000 	.word	0x40010000
 8008698:	40010400 	.word	0x40010400
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400
 80086a4:	40014800 	.word	0x40014800

080086a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4b24      	ldr	r3, [pc, #144]	@ (8008764 <TIM_OC4_SetConfig+0xbc>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	031b      	lsls	r3, r3, #12
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a19      	ldr	r2, [pc, #100]	@ (8008768 <TIM_OC4_SetConfig+0xc0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00f      	beq.n	8008728 <TIM_OC4_SetConfig+0x80>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a18      	ldr	r2, [pc, #96]	@ (800876c <TIM_OC4_SetConfig+0xc4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00b      	beq.n	8008728 <TIM_OC4_SetConfig+0x80>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a17      	ldr	r2, [pc, #92]	@ (8008770 <TIM_OC4_SetConfig+0xc8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d007      	beq.n	8008728 <TIM_OC4_SetConfig+0x80>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a16      	ldr	r2, [pc, #88]	@ (8008774 <TIM_OC4_SetConfig+0xcc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d003      	beq.n	8008728 <TIM_OC4_SetConfig+0x80>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a15      	ldr	r2, [pc, #84]	@ (8008778 <TIM_OC4_SetConfig+0xd0>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d109      	bne.n	800873c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800872e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	019b      	lsls	r3, r3, #6
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4313      	orrs	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	feff8fff 	.word	0xfeff8fff
 8008768:	40010000 	.word	0x40010000
 800876c:	40010400 	.word	0x40010400
 8008770:	40014000 	.word	0x40014000
 8008774:	40014400 	.word	0x40014400
 8008778:	40014800 	.word	0x40014800

0800877c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	4b21      	ldr	r3, [pc, #132]	@ (800882c <TIM_OC5_SetConfig+0xb0>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80087bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	041b      	lsls	r3, r3, #16
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a18      	ldr	r2, [pc, #96]	@ (8008830 <TIM_OC5_SetConfig+0xb4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00f      	beq.n	80087f2 <TIM_OC5_SetConfig+0x76>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a17      	ldr	r2, [pc, #92]	@ (8008834 <TIM_OC5_SetConfig+0xb8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00b      	beq.n	80087f2 <TIM_OC5_SetConfig+0x76>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a16      	ldr	r2, [pc, #88]	@ (8008838 <TIM_OC5_SetConfig+0xbc>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d007      	beq.n	80087f2 <TIM_OC5_SetConfig+0x76>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a15      	ldr	r2, [pc, #84]	@ (800883c <TIM_OC5_SetConfig+0xc0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d003      	beq.n	80087f2 <TIM_OC5_SetConfig+0x76>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a14      	ldr	r2, [pc, #80]	@ (8008840 <TIM_OC5_SetConfig+0xc4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d109      	bne.n	8008806 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	621a      	str	r2, [r3, #32]
}
 8008820:	bf00      	nop
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	fffeff8f 	.word	0xfffeff8f
 8008830:	40010000 	.word	0x40010000
 8008834:	40010400 	.word	0x40010400
 8008838:	40014000 	.word	0x40014000
 800883c:	40014400 	.word	0x40014400
 8008840:	40014800 	.word	0x40014800

08008844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4b22      	ldr	r3, [pc, #136]	@ (80088f8 <TIM_OC6_SetConfig+0xb4>)
 8008870:	4013      	ands	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	051b      	lsls	r3, r3, #20
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a19      	ldr	r2, [pc, #100]	@ (80088fc <TIM_OC6_SetConfig+0xb8>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00f      	beq.n	80088bc <TIM_OC6_SetConfig+0x78>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a18      	ldr	r2, [pc, #96]	@ (8008900 <TIM_OC6_SetConfig+0xbc>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00b      	beq.n	80088bc <TIM_OC6_SetConfig+0x78>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a17      	ldr	r2, [pc, #92]	@ (8008904 <TIM_OC6_SetConfig+0xc0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d007      	beq.n	80088bc <TIM_OC6_SetConfig+0x78>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a16      	ldr	r2, [pc, #88]	@ (8008908 <TIM_OC6_SetConfig+0xc4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC6_SetConfig+0x78>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a15      	ldr	r2, [pc, #84]	@ (800890c <TIM_OC6_SetConfig+0xc8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d109      	bne.n	80088d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	029b      	lsls	r3, r3, #10
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	621a      	str	r2, [r3, #32]
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	feff8fff 	.word	0xfeff8fff
 80088fc:	40010000 	.word	0x40010000
 8008900:	40010400 	.word	0x40010400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0201 	bic.w	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800893a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f023 030a 	bic.w	r3, r3, #10
 800894c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	621a      	str	r2, [r3, #32]
}
 8008962:	bf00      	nop
 8008964:	371c      	adds	r7, #28
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800896e:	b480      	push	{r7}
 8008970:	b087      	sub	sp, #28
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f023 0210 	bic.w	r2, r3, #16
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	031b      	lsls	r3, r3, #12
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4b09      	ldr	r3, [pc, #36]	@ (8008a08 <TIM_ITRx_SetConfig+0x38>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	f043 0307 	orr.w	r3, r3, #7
 80089f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	609a      	str	r2, [r3, #8]
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	ffcfff8f 	.word	0xffcfff8f

08008a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	021a      	lsls	r2, r3, #8
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	609a      	str	r2, [r3, #8]
}
 8008a40:	bf00      	nop
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 031f 	and.w	r3, r3, #31
 8008a5e:	2201      	movs	r2, #1
 8008a60:	fa02 f303 	lsl.w	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1a      	ldr	r2, [r3, #32]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	401a      	ands	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1a      	ldr	r2, [r3, #32]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f003 031f 	and.w	r3, r3, #31
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	fa01 f303 	lsl.w	r3, r1, r3
 8008a84:	431a      	orrs	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	621a      	str	r2, [r3, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d101      	bne.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e06d      	b.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a30      	ldr	r2, [pc, #192]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2f      	ldr	r2, [pc, #188]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d108      	bne.n	8008af6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008aea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a20      	ldr	r2, [pc, #128]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d022      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b22:	d01d      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d018      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d013      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00e      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a15      	ldr	r2, [pc, #84]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d009      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a16      	ldr	r2, [pc, #88]	@ (8008bac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d004      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a15      	ldr	r2, [pc, #84]	@ (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10c      	bne.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40010400 	.word	0x40010400
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	40000c00 	.word	0x40000c00
 8008bac:	40001800 	.word	0x40001800
 8008bb0:	40014000 	.word	0x40014000

08008bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e042      	b.n	8008c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7f8 ffe5 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2224      	movs	r2, #36	@ 0x24
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0201 	bic.w	r2, r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fa44 	bl	800a0c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fcd9 	bl	80095f8 <UART_SetConfig>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e01b      	b.n	8008c88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fac3 	bl	800a20c <UART_CheckIdleState>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	@ 0x28
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d17b      	bne.n	8008da2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <HAL_UART_Transmit+0x26>
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e074      	b.n	8008da4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2221      	movs	r2, #33	@ 0x21
 8008cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cca:	f7f9 f8ad 	bl	8001e28 <HAL_GetTick>
 8008cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce8:	d108      	bne.n	8008cfc <HAL_UART_Transmit+0x6c>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e003      	b.n	8008d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d04:	e030      	b.n	8008d68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2180      	movs	r1, #128	@ 0x80
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f001 fb25 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e03d      	b.n	8008da4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3302      	adds	r3, #2
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e007      	b.n	8008d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	3301      	adds	r3, #1
 8008d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1c8      	bne.n	8008d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2140      	movs	r1, #64	@ 0x40
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f001 faee 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e006      	b.n	8008da4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e000      	b.n	8008da4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008da2:	2302      	movs	r3, #2
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	@ 0x28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d137      	bne.n	8008e34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <HAL_UART_Receive_IT+0x24>
 8008dca:	88fb      	ldrh	r3, [r7, #6]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e030      	b.n	8008e36 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a18      	ldr	r2, [pc, #96]	@ (8008e40 <HAL_UART_Receive_IT+0x94>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d01f      	beq.n	8008e24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d018      	beq.n	8008e24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e10:	623b      	str	r3, [r7, #32]
 8008e12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	69f9      	ldr	r1, [r7, #28]
 8008e16:	6a3a      	ldr	r2, [r7, #32]
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e24:	88fb      	ldrh	r3, [r7, #6]
 8008e26:	461a      	mov	r2, r3
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f001 fb06 	bl	800a43c <UART_Start_Receive_IT>
 8008e30:	4603      	mov	r3, r0
 8008e32:	e000      	b.n	8008e36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e34:	2302      	movs	r3, #2
  }
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3728      	adds	r7, #40	@ 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	58000c00 	.word	0x58000c00

08008e44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b0ba      	sub	sp, #232	@ 0xe8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008e6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008e72:	4013      	ands	r3, r2
 8008e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d11b      	bne.n	8008eb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d015      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d105      	bne.n	8008ea4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d009      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 8377 	beq.w	800959c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
      }
      return;
 8008eb6:	e371      	b.n	800959c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 8123 	beq.w	8009108 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ec2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ec6:	4b8d      	ldr	r3, [pc, #564]	@ (80090fc <HAL_UART_IRQHandler+0x2b8>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8009100 <HAL_UART_IRQHandler+0x2bc>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8116 	beq.w	8009108 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d011      	beq.n	8008f0c <HAL_UART_IRQHandler+0xc8>
 8008ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00b      	beq.n	8008f0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f02:	f043 0201 	orr.w	r2, r3, #1
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d011      	beq.n	8008f3c <HAL_UART_IRQHandler+0xf8>
 8008f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f32:	f043 0204 	orr.w	r2, r3, #4
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d011      	beq.n	8008f6c <HAL_UART_IRQHandler+0x128>
 8008f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2204      	movs	r2, #4
 8008f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f62:	f043 0202 	orr.w	r2, r3, #2
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f70:	f003 0308 	and.w	r3, r3, #8
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d017      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f7c:	f003 0320 	and.w	r3, r3, #32
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f88:	4b5c      	ldr	r3, [pc, #368]	@ (80090fc <HAL_UART_IRQHandler+0x2b8>)
 8008f8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2208      	movs	r2, #8
 8008f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9e:	f043 0208 	orr.w	r2, r3, #8
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d012      	beq.n	8008fda <HAL_UART_IRQHandler+0x196>
 8008fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00c      	beq.n	8008fda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 82dd 	beq.w	80095a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d013      	beq.n	800901a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009020:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	d005      	beq.n	800903e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009036:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800903a:	2b00      	cmp	r3, #0
 800903c:	d054      	beq.n	80090e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 fb1e 	bl	800a680 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904e:	2b40      	cmp	r3, #64	@ 0x40
 8009050:	d146      	bne.n	80090e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800906c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3308      	adds	r3, #8
 800907a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800907e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800908a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1d9      	bne.n	8009052 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d017      	beq.n	80090d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ae:	4a15      	ldr	r2, [pc, #84]	@ (8009104 <HAL_UART_IRQHandler+0x2c0>)
 80090b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f9 fafb 	bl	80026b4 <HAL_DMA_Abort_IT>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d019      	beq.n	80090f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80090d2:	4610      	mov	r0, r2
 80090d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d6:	e00f      	b.n	80090f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fa77 	bl	80095cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090de:	e00b      	b.n	80090f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fa73 	bl	80095cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e6:	e007      	b.n	80090f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa6f 	bl	80095cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80090f6:	e253      	b.n	80095a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	bf00      	nop
    return;
 80090fa:	e251      	b.n	80095a0 <HAL_UART_IRQHandler+0x75c>
 80090fc:	10000001 	.word	0x10000001
 8009100:	04000120 	.word	0x04000120
 8009104:	0800a74d 	.word	0x0800a74d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 81e7 	bne.w	80094e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009116:	f003 0310 	and.w	r3, r3, #16
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 81e0 	beq.w	80094e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009124:	f003 0310 	and.w	r3, r3, #16
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 81d9 	beq.w	80094e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2210      	movs	r2, #16
 8009134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009140:	2b40      	cmp	r3, #64	@ 0x40
 8009142:	f040 8151 	bne.w	80093e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a96      	ldr	r2, [pc, #600]	@ (80093a8 <HAL_UART_IRQHandler+0x564>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d068      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a93      	ldr	r2, [pc, #588]	@ (80093ac <HAL_UART_IRQHandler+0x568>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d061      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a91      	ldr	r2, [pc, #580]	@ (80093b0 <HAL_UART_IRQHandler+0x56c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d05a      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a8e      	ldr	r2, [pc, #568]	@ (80093b4 <HAL_UART_IRQHandler+0x570>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d053      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a8c      	ldr	r2, [pc, #560]	@ (80093b8 <HAL_UART_IRQHandler+0x574>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d04c      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a89      	ldr	r2, [pc, #548]	@ (80093bc <HAL_UART_IRQHandler+0x578>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d045      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a87      	ldr	r2, [pc, #540]	@ (80093c0 <HAL_UART_IRQHandler+0x57c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d03e      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a84      	ldr	r2, [pc, #528]	@ (80093c4 <HAL_UART_IRQHandler+0x580>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d037      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a82      	ldr	r2, [pc, #520]	@ (80093c8 <HAL_UART_IRQHandler+0x584>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d030      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a7f      	ldr	r2, [pc, #508]	@ (80093cc <HAL_UART_IRQHandler+0x588>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d029      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a7d      	ldr	r2, [pc, #500]	@ (80093d0 <HAL_UART_IRQHandler+0x58c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d022      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a7a      	ldr	r2, [pc, #488]	@ (80093d4 <HAL_UART_IRQHandler+0x590>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d01b      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a78      	ldr	r2, [pc, #480]	@ (80093d8 <HAL_UART_IRQHandler+0x594>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d014      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a75      	ldr	r2, [pc, #468]	@ (80093dc <HAL_UART_IRQHandler+0x598>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00d      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a73      	ldr	r2, [pc, #460]	@ (80093e0 <HAL_UART_IRQHandler+0x59c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d006      	beq.n	8009226 <HAL_UART_IRQHandler+0x3e2>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a70      	ldr	r2, [pc, #448]	@ (80093e4 <HAL_UART_IRQHandler+0x5a0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d106      	bne.n	8009234 <HAL_UART_IRQHandler+0x3f0>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	b29b      	uxth	r3, r3
 8009232:	e005      	b.n	8009240 <HAL_UART_IRQHandler+0x3fc>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	b29b      	uxth	r3, r3
 8009240:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 81ab 	beq.w	80095a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009258:	429a      	cmp	r2, r3
 800925a:	f080 81a3 	bcs.w	80095a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009264:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009274:	f000 8087 	beq.w	8009386 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800928c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1da      	bne.n	8009278 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3308      	adds	r3, #8
 80092e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e1      	bne.n	80092c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800930e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009324:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009328:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e3      	bne.n	80092fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009354:	f023 0310 	bic.w	r3, r3, #16
 8009358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009366:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009368:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800936c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e4      	bne.n	8009344 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009380:	4618      	mov	r0, r3
 8009382:	f7f8 fe79 	bl	8002078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009398:	b29b      	uxth	r3, r3
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	b29b      	uxth	r3, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f91d 	bl	80095e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093a6:	e0fd      	b.n	80095a4 <HAL_UART_IRQHandler+0x760>
 80093a8:	40020010 	.word	0x40020010
 80093ac:	40020028 	.word	0x40020028
 80093b0:	40020040 	.word	0x40020040
 80093b4:	40020058 	.word	0x40020058
 80093b8:	40020070 	.word	0x40020070
 80093bc:	40020088 	.word	0x40020088
 80093c0:	400200a0 	.word	0x400200a0
 80093c4:	400200b8 	.word	0x400200b8
 80093c8:	40020410 	.word	0x40020410
 80093cc:	40020428 	.word	0x40020428
 80093d0:	40020440 	.word	0x40020440
 80093d4:	40020458 	.word	0x40020458
 80093d8:	40020470 	.word	0x40020470
 80093dc:	40020488 	.word	0x40020488
 80093e0:	400204a0 	.word	0x400204a0
 80093e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009402:	b29b      	uxth	r3, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 80cf 	beq.w	80095a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800940a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80ca 	beq.w	80095a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009436:	647b      	str	r3, [r7, #68]	@ 0x44
 8009438:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800943c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800943e:	e841 2300 	strex	r3, r2, [r1]
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e4      	bne.n	8009414 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3308      	adds	r3, #8
 8009450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	623b      	str	r3, [r7, #32]
   return(result);
 800945a:	6a3a      	ldr	r2, [r7, #32]
 800945c:	4b55      	ldr	r3, [pc, #340]	@ (80095b4 <HAL_UART_IRQHandler+0x770>)
 800945e:	4013      	ands	r3, r2
 8009460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800946e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e3      	bne.n	800944a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0310 	bic.w	r3, r3, #16
 80094aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	69b9      	ldr	r1, [r7, #24]
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	617b      	str	r3, [r7, #20]
   return(result);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e4      	bne.n	8009496 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f881 	bl	80095e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094de:	e063      	b.n	80095a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00e      	beq.n	800950a <HAL_UART_IRQHandler+0x6c6>
 80094ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d008      	beq.n	800950a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f001 fe80 	bl	800b208 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009508:	e051      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800950e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009512:	2b00      	cmp	r3, #0
 8009514:	d014      	beq.n	8009540 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009532:	2b00      	cmp	r3, #0
 8009534:	d03a      	beq.n	80095ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
    }
    return;
 800953e:	e035      	b.n	80095ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009548:	2b00      	cmp	r3, #0
 800954a:	d009      	beq.n	8009560 <HAL_UART_IRQHandler+0x71c>
 800954c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 f90d 	bl	800a778 <UART_EndTransmit_IT>
    return;
 800955e:	e026      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <HAL_UART_IRQHandler+0x73c>
 800956c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009570:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 fe59 	bl	800b230 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800957e:	e016      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d010      	beq.n	80095ae <HAL_UART_IRQHandler+0x76a>
 800958c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009590:	2b00      	cmp	r3, #0
 8009592:	da0c      	bge.n	80095ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fe41 	bl	800b21c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800959a:	e008      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
      return;
 800959c:	bf00      	nop
 800959e:	e006      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
    return;
 80095a0:	bf00      	nop
 80095a2:	e004      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
      return;
 80095a4:	bf00      	nop
 80095a6:	e002      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
      return;
 80095a8:	bf00      	nop
 80095aa:	e000      	b.n	80095ae <HAL_UART_IRQHandler+0x76a>
    return;
 80095ac:	bf00      	nop
  }
}
 80095ae:	37e8      	adds	r7, #232	@ 0xe8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	effffffe 	.word	0xeffffffe

080095b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095fc:	b092      	sub	sp, #72	@ 0x48
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	431a      	orrs	r2, r3
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	431a      	orrs	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	4313      	orrs	r3, r2
 800961e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4bbe      	ldr	r3, [pc, #760]	@ (8009920 <UART_SetConfig+0x328>)
 8009628:	4013      	ands	r3, r2
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009630:	430b      	orrs	r3, r1
 8009632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4ab3      	ldr	r2, [pc, #716]	@ (8009924 <UART_SetConfig+0x32c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d004      	beq.n	8009664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009660:	4313      	orrs	r3, r2
 8009662:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	4baf      	ldr	r3, [pc, #700]	@ (8009928 <UART_SetConfig+0x330>)
 800966c:	4013      	ands	r3, r2
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009674:	430b      	orrs	r3, r1
 8009676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967e:	f023 010f 	bic.w	r1, r3, #15
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4aa6      	ldr	r2, [pc, #664]	@ (800992c <UART_SetConfig+0x334>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d177      	bne.n	8009788 <UART_SetConfig+0x190>
 8009698:	4ba5      	ldr	r3, [pc, #660]	@ (8009930 <UART_SetConfig+0x338>)
 800969a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800969c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096a0:	2b28      	cmp	r3, #40	@ 0x28
 80096a2:	d86d      	bhi.n	8009780 <UART_SetConfig+0x188>
 80096a4:	a201      	add	r2, pc, #4	@ (adr r2, 80096ac <UART_SetConfig+0xb4>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	08009751 	.word	0x08009751
 80096b0:	08009781 	.word	0x08009781
 80096b4:	08009781 	.word	0x08009781
 80096b8:	08009781 	.word	0x08009781
 80096bc:	08009781 	.word	0x08009781
 80096c0:	08009781 	.word	0x08009781
 80096c4:	08009781 	.word	0x08009781
 80096c8:	08009781 	.word	0x08009781
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009781 	.word	0x08009781
 80096d4:	08009781 	.word	0x08009781
 80096d8:	08009781 	.word	0x08009781
 80096dc:	08009781 	.word	0x08009781
 80096e0:	08009781 	.word	0x08009781
 80096e4:	08009781 	.word	0x08009781
 80096e8:	08009781 	.word	0x08009781
 80096ec:	08009761 	.word	0x08009761
 80096f0:	08009781 	.word	0x08009781
 80096f4:	08009781 	.word	0x08009781
 80096f8:	08009781 	.word	0x08009781
 80096fc:	08009781 	.word	0x08009781
 8009700:	08009781 	.word	0x08009781
 8009704:	08009781 	.word	0x08009781
 8009708:	08009781 	.word	0x08009781
 800970c:	08009769 	.word	0x08009769
 8009710:	08009781 	.word	0x08009781
 8009714:	08009781 	.word	0x08009781
 8009718:	08009781 	.word	0x08009781
 800971c:	08009781 	.word	0x08009781
 8009720:	08009781 	.word	0x08009781
 8009724:	08009781 	.word	0x08009781
 8009728:	08009781 	.word	0x08009781
 800972c:	08009771 	.word	0x08009771
 8009730:	08009781 	.word	0x08009781
 8009734:	08009781 	.word	0x08009781
 8009738:	08009781 	.word	0x08009781
 800973c:	08009781 	.word	0x08009781
 8009740:	08009781 	.word	0x08009781
 8009744:	08009781 	.word	0x08009781
 8009748:	08009781 	.word	0x08009781
 800974c:	08009779 	.word	0x08009779
 8009750:	2301      	movs	r3, #1
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e222      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e21e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e21a      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e216      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009770:	2320      	movs	r3, #32
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e212      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009778:	2340      	movs	r3, #64	@ 0x40
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e20e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009780:	2380      	movs	r3, #128	@ 0x80
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e20a      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a69      	ldr	r2, [pc, #420]	@ (8009934 <UART_SetConfig+0x33c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d130      	bne.n	80097f4 <UART_SetConfig+0x1fc>
 8009792:	4b67      	ldr	r3, [pc, #412]	@ (8009930 <UART_SetConfig+0x338>)
 8009794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b05      	cmp	r3, #5
 800979c:	d826      	bhi.n	80097ec <UART_SetConfig+0x1f4>
 800979e:	a201      	add	r2, pc, #4	@ (adr r2, 80097a4 <UART_SetConfig+0x1ac>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097bd 	.word	0x080097bd
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097cd 	.word	0x080097cd
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	2300      	movs	r3, #0
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e1ec      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097c4:	2304      	movs	r3, #4
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e1e8      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e1e4      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097d4:	2310      	movs	r3, #16
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e1e0      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097dc:	2320      	movs	r3, #32
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e1dc      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097e4:	2340      	movs	r3, #64	@ 0x40
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e1d8      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097ec:	2380      	movs	r3, #128	@ 0x80
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e1d4      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a4f      	ldr	r2, [pc, #316]	@ (8009938 <UART_SetConfig+0x340>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d130      	bne.n	8009860 <UART_SetConfig+0x268>
 80097fe:	4b4c      	ldr	r3, [pc, #304]	@ (8009930 <UART_SetConfig+0x338>)
 8009800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b05      	cmp	r3, #5
 8009808:	d826      	bhi.n	8009858 <UART_SetConfig+0x260>
 800980a:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <UART_SetConfig+0x218>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009829 	.word	0x08009829
 8009814:	08009831 	.word	0x08009831
 8009818:	08009839 	.word	0x08009839
 800981c:	08009841 	.word	0x08009841
 8009820:	08009849 	.word	0x08009849
 8009824:	08009851 	.word	0x08009851
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e1b6      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e1b2      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e1ae      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e1aa      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009848:	2320      	movs	r3, #32
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e1a6      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009850:	2340      	movs	r3, #64	@ 0x40
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e1a2      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009858:	2380      	movs	r3, #128	@ 0x80
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e19e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a35      	ldr	r2, [pc, #212]	@ (800993c <UART_SetConfig+0x344>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d130      	bne.n	80098cc <UART_SetConfig+0x2d4>
 800986a:	4b31      	ldr	r3, [pc, #196]	@ (8009930 <UART_SetConfig+0x338>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b05      	cmp	r3, #5
 8009874:	d826      	bhi.n	80098c4 <UART_SetConfig+0x2cc>
 8009876:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <UART_SetConfig+0x284>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009895 	.word	0x08009895
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098a5 	.word	0x080098a5
 8009888:	080098ad 	.word	0x080098ad
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098bd 	.word	0x080098bd
 8009894:	2300      	movs	r3, #0
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e180      	b.n	8009b9e <UART_SetConfig+0x5a6>
 800989c:	2304      	movs	r3, #4
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e17c      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80098a4:	2308      	movs	r3, #8
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e178      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80098ac:	2310      	movs	r3, #16
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e174      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80098b4:	2320      	movs	r3, #32
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e170      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80098bc:	2340      	movs	r3, #64	@ 0x40
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e16c      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80098c4:	2380      	movs	r3, #128	@ 0x80
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e168      	b.n	8009b9e <UART_SetConfig+0x5a6>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009940 <UART_SetConfig+0x348>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d142      	bne.n	800995c <UART_SetConfig+0x364>
 80098d6:	4b16      	ldr	r3, [pc, #88]	@ (8009930 <UART_SetConfig+0x338>)
 80098d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d838      	bhi.n	8009954 <UART_SetConfig+0x35c>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <UART_SetConfig+0x2f0>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	08009901 	.word	0x08009901
 80098ec:	08009909 	.word	0x08009909
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009945 	.word	0x08009945
 80098fc:	0800994d 	.word	0x0800994d
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e14a      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009908:	2304      	movs	r3, #4
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e146      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009910:	2308      	movs	r3, #8
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e142      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009918:	2310      	movs	r3, #16
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e13e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009920:	cfff69f3 	.word	0xcfff69f3
 8009924:	58000c00 	.word	0x58000c00
 8009928:	11fff4ff 	.word	0x11fff4ff
 800992c:	40011000 	.word	0x40011000
 8009930:	58024400 	.word	0x58024400
 8009934:	40004400 	.word	0x40004400
 8009938:	40004800 	.word	0x40004800
 800993c:	40004c00 	.word	0x40004c00
 8009940:	40005000 	.word	0x40005000
 8009944:	2320      	movs	r3, #32
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e128      	b.n	8009b9e <UART_SetConfig+0x5a6>
 800994c:	2340      	movs	r3, #64	@ 0x40
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e124      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009954:	2380      	movs	r3, #128	@ 0x80
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e120      	b.n	8009b9e <UART_SetConfig+0x5a6>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4acb      	ldr	r2, [pc, #812]	@ (8009c90 <UART_SetConfig+0x698>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d176      	bne.n	8009a54 <UART_SetConfig+0x45c>
 8009966:	4bcb      	ldr	r3, [pc, #812]	@ (8009c94 <UART_SetConfig+0x69c>)
 8009968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800996e:	2b28      	cmp	r3, #40	@ 0x28
 8009970:	d86c      	bhi.n	8009a4c <UART_SetConfig+0x454>
 8009972:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <UART_SetConfig+0x380>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009a1d 	.word	0x08009a1d
 800997c:	08009a4d 	.word	0x08009a4d
 8009980:	08009a4d 	.word	0x08009a4d
 8009984:	08009a4d 	.word	0x08009a4d
 8009988:	08009a4d 	.word	0x08009a4d
 800998c:	08009a4d 	.word	0x08009a4d
 8009990:	08009a4d 	.word	0x08009a4d
 8009994:	08009a4d 	.word	0x08009a4d
 8009998:	08009a25 	.word	0x08009a25
 800999c:	08009a4d 	.word	0x08009a4d
 80099a0:	08009a4d 	.word	0x08009a4d
 80099a4:	08009a4d 	.word	0x08009a4d
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a4d 	.word	0x08009a4d
 80099b0:	08009a4d 	.word	0x08009a4d
 80099b4:	08009a4d 	.word	0x08009a4d
 80099b8:	08009a2d 	.word	0x08009a2d
 80099bc:	08009a4d 	.word	0x08009a4d
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a4d 	.word	0x08009a4d
 80099c8:	08009a4d 	.word	0x08009a4d
 80099cc:	08009a4d 	.word	0x08009a4d
 80099d0:	08009a4d 	.word	0x08009a4d
 80099d4:	08009a4d 	.word	0x08009a4d
 80099d8:	08009a35 	.word	0x08009a35
 80099dc:	08009a4d 	.word	0x08009a4d
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009a4d 	.word	0x08009a4d
 80099e8:	08009a4d 	.word	0x08009a4d
 80099ec:	08009a4d 	.word	0x08009a4d
 80099f0:	08009a4d 	.word	0x08009a4d
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a3d 	.word	0x08009a3d
 80099fc:	08009a4d 	.word	0x08009a4d
 8009a00:	08009a4d 	.word	0x08009a4d
 8009a04:	08009a4d 	.word	0x08009a4d
 8009a08:	08009a4d 	.word	0x08009a4d
 8009a0c:	08009a4d 	.word	0x08009a4d
 8009a10:	08009a4d 	.word	0x08009a4d
 8009a14:	08009a4d 	.word	0x08009a4d
 8009a18:	08009a45 	.word	0x08009a45
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a22:	e0bc      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2a:	e0b8      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a32:	e0b4      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a34:	2310      	movs	r3, #16
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e0b0      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e0ac      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a44:	2340      	movs	r3, #64	@ 0x40
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e0a8      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a4c:	2380      	movs	r3, #128	@ 0x80
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e0a4      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a8f      	ldr	r2, [pc, #572]	@ (8009c98 <UART_SetConfig+0x6a0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d130      	bne.n	8009ac0 <UART_SetConfig+0x4c8>
 8009a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8009c94 <UART_SetConfig+0x69c>)
 8009a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d826      	bhi.n	8009ab8 <UART_SetConfig+0x4c0>
 8009a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a70 <UART_SetConfig+0x478>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009a89 	.word	0x08009a89
 8009a74:	08009a91 	.word	0x08009a91
 8009a78:	08009a99 	.word	0x08009a99
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e086      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a90:	2304      	movs	r3, #4
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e082      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009a98:	2308      	movs	r3, #8
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e07e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e07a      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e076      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009ab0:	2340      	movs	r3, #64	@ 0x40
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e072      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009ab8:	2380      	movs	r3, #128	@ 0x80
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e06e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a75      	ldr	r2, [pc, #468]	@ (8009c9c <UART_SetConfig+0x6a4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d130      	bne.n	8009b2c <UART_SetConfig+0x534>
 8009aca:	4b72      	ldr	r3, [pc, #456]	@ (8009c94 <UART_SetConfig+0x69c>)
 8009acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d826      	bhi.n	8009b24 <UART_SetConfig+0x52c>
 8009ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8009adc <UART_SetConfig+0x4e4>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009af5 	.word	0x08009af5
 8009ae0:	08009afd 	.word	0x08009afd
 8009ae4:	08009b05 	.word	0x08009b05
 8009ae8:	08009b0d 	.word	0x08009b0d
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e050      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009afc:	2304      	movs	r3, #4
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e04c      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b04:	2308      	movs	r3, #8
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e048      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e044      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b14:	2320      	movs	r3, #32
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e040      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b1c:	2340      	movs	r3, #64	@ 0x40
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e03c      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b24:	2380      	movs	r3, #128	@ 0x80
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e038      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a5b      	ldr	r2, [pc, #364]	@ (8009ca0 <UART_SetConfig+0x6a8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d130      	bne.n	8009b98 <UART_SetConfig+0x5a0>
 8009b36:	4b57      	ldr	r3, [pc, #348]	@ (8009c94 <UART_SetConfig+0x69c>)
 8009b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	d826      	bhi.n	8009b90 <UART_SetConfig+0x598>
 8009b42:	a201      	add	r2, pc, #4	@ (adr r2, 8009b48 <UART_SetConfig+0x550>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b61 	.word	0x08009b61
 8009b4c:	08009b69 	.word	0x08009b69
 8009b50:	08009b71 	.word	0x08009b71
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b81 	.word	0x08009b81
 8009b5c:	08009b89 	.word	0x08009b89
 8009b60:	2302      	movs	r3, #2
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e01a      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e016      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b70:	2308      	movs	r3, #8
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e012      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e00e      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b80:	2320      	movs	r3, #32
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e00a      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b88:	2340      	movs	r3, #64	@ 0x40
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e006      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b90:	2380      	movs	r3, #128	@ 0x80
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e002      	b.n	8009b9e <UART_SetConfig+0x5a6>
 8009b98:	2380      	movs	r3, #128	@ 0x80
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ca0 <UART_SetConfig+0x6a8>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	f040 80f8 	bne.w	8009d9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009baa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	dc46      	bgt.n	8009c40 <UART_SetConfig+0x648>
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	f2c0 8082 	blt.w	8009cbc <UART_SetConfig+0x6c4>
 8009bb8:	3b02      	subs	r3, #2
 8009bba:	2b1e      	cmp	r3, #30
 8009bbc:	d87e      	bhi.n	8009cbc <UART_SetConfig+0x6c4>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <UART_SetConfig+0x5cc>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c47 	.word	0x08009c47
 8009bc8:	08009cbd 	.word	0x08009cbd
 8009bcc:	08009c4f 	.word	0x08009c4f
 8009bd0:	08009cbd 	.word	0x08009cbd
 8009bd4:	08009cbd 	.word	0x08009cbd
 8009bd8:	08009cbd 	.word	0x08009cbd
 8009bdc:	08009c5f 	.word	0x08009c5f
 8009be0:	08009cbd 	.word	0x08009cbd
 8009be4:	08009cbd 	.word	0x08009cbd
 8009be8:	08009cbd 	.word	0x08009cbd
 8009bec:	08009cbd 	.word	0x08009cbd
 8009bf0:	08009cbd 	.word	0x08009cbd
 8009bf4:	08009cbd 	.word	0x08009cbd
 8009bf8:	08009cbd 	.word	0x08009cbd
 8009bfc:	08009c6f 	.word	0x08009c6f
 8009c00:	08009cbd 	.word	0x08009cbd
 8009c04:	08009cbd 	.word	0x08009cbd
 8009c08:	08009cbd 	.word	0x08009cbd
 8009c0c:	08009cbd 	.word	0x08009cbd
 8009c10:	08009cbd 	.word	0x08009cbd
 8009c14:	08009cbd 	.word	0x08009cbd
 8009c18:	08009cbd 	.word	0x08009cbd
 8009c1c:	08009cbd 	.word	0x08009cbd
 8009c20:	08009cbd 	.word	0x08009cbd
 8009c24:	08009cbd 	.word	0x08009cbd
 8009c28:	08009cbd 	.word	0x08009cbd
 8009c2c:	08009cbd 	.word	0x08009cbd
 8009c30:	08009cbd 	.word	0x08009cbd
 8009c34:	08009cbd 	.word	0x08009cbd
 8009c38:	08009cbd 	.word	0x08009cbd
 8009c3c:	08009caf 	.word	0x08009caf
 8009c40:	2b40      	cmp	r3, #64	@ 0x40
 8009c42:	d037      	beq.n	8009cb4 <UART_SetConfig+0x6bc>
 8009c44:	e03a      	b.n	8009cbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c46:	f7fd f84d 	bl	8006ce4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c4c:	e03c      	b.n	8009cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fd f85c 	bl	8006d10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c5c:	e034      	b.n	8009cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c5e:	f107 0318 	add.w	r3, r7, #24
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd f9a8 	bl	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c6c:	e02c      	b.n	8009cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c6e:	4b09      	ldr	r3, [pc, #36]	@ (8009c94 <UART_SetConfig+0x69c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d016      	beq.n	8009ca8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c7a:	4b06      	ldr	r3, [pc, #24]	@ (8009c94 <UART_SetConfig+0x69c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	08db      	lsrs	r3, r3, #3
 8009c80:	f003 0303 	and.w	r3, r3, #3
 8009c84:	4a07      	ldr	r2, [pc, #28]	@ (8009ca4 <UART_SetConfig+0x6ac>)
 8009c86:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c8c:	e01c      	b.n	8009cc8 <UART_SetConfig+0x6d0>
 8009c8e:	bf00      	nop
 8009c90:	40011400 	.word	0x40011400
 8009c94:	58024400 	.word	0x58024400
 8009c98:	40007800 	.word	0x40007800
 8009c9c:	40007c00 	.word	0x40007c00
 8009ca0:	58000c00 	.word	0x58000c00
 8009ca4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009ca8:	4b9d      	ldr	r3, [pc, #628]	@ (8009f20 <UART_SetConfig+0x928>)
 8009caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cac:	e00c      	b.n	8009cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cae:	4b9d      	ldr	r3, [pc, #628]	@ (8009f24 <UART_SetConfig+0x92c>)
 8009cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb2:	e009      	b.n	8009cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cba:	e005      	b.n	8009cc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 81de 	beq.w	800a08c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd4:	4a94      	ldr	r2, [pc, #592]	@ (8009f28 <UART_SetConfig+0x930>)
 8009cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d305      	bcc.n	8009d00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d903      	bls.n	8009d08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d06:	e1c1      	b.n	800a08c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	60bb      	str	r3, [r7, #8]
 8009d0e:	60fa      	str	r2, [r7, #12]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	4a84      	ldr	r2, [pc, #528]	@ (8009f28 <UART_SetConfig+0x930>)
 8009d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	607a      	str	r2, [r7, #4]
 8009d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d2a:	f7f6 fced 	bl	8000708 <__aeabi_uldivmod>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4610      	mov	r0, r2
 8009d34:	4619      	mov	r1, r3
 8009d36:	f04f 0200 	mov.w	r2, #0
 8009d3a:	f04f 0300 	mov.w	r3, #0
 8009d3e:	020b      	lsls	r3, r1, #8
 8009d40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d44:	0202      	lsls	r2, r0, #8
 8009d46:	6979      	ldr	r1, [r7, #20]
 8009d48:	6849      	ldr	r1, [r1, #4]
 8009d4a:	0849      	lsrs	r1, r1, #1
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	4605      	mov	r5, r0
 8009d52:	eb12 0804 	adds.w	r8, r2, r4
 8009d56:	eb43 0905 	adc.w	r9, r3, r5
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	469a      	mov	sl, r3
 8009d62:	4693      	mov	fp, r2
 8009d64:	4652      	mov	r2, sl
 8009d66:	465b      	mov	r3, fp
 8009d68:	4640      	mov	r0, r8
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	f7f6 fccc 	bl	8000708 <__aeabi_uldivmod>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4613      	mov	r3, r2
 8009d76:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d7e:	d308      	bcc.n	8009d92 <UART_SetConfig+0x79a>
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d86:	d204      	bcs.n	8009d92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d8e:	60da      	str	r2, [r3, #12]
 8009d90:	e17c      	b.n	800a08c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d98:	e178      	b.n	800a08c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da2:	f040 80c5 	bne.w	8009f30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009da6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009daa:	2b20      	cmp	r3, #32
 8009dac:	dc48      	bgt.n	8009e40 <UART_SetConfig+0x848>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	db7b      	blt.n	8009eaa <UART_SetConfig+0x8b2>
 8009db2:	2b20      	cmp	r3, #32
 8009db4:	d879      	bhi.n	8009eaa <UART_SetConfig+0x8b2>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x7c4>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009e47 	.word	0x08009e47
 8009dc0:	08009e4f 	.word	0x08009e4f
 8009dc4:	08009eab 	.word	0x08009eab
 8009dc8:	08009eab 	.word	0x08009eab
 8009dcc:	08009e57 	.word	0x08009e57
 8009dd0:	08009eab 	.word	0x08009eab
 8009dd4:	08009eab 	.word	0x08009eab
 8009dd8:	08009eab 	.word	0x08009eab
 8009ddc:	08009e67 	.word	0x08009e67
 8009de0:	08009eab 	.word	0x08009eab
 8009de4:	08009eab 	.word	0x08009eab
 8009de8:	08009eab 	.word	0x08009eab
 8009dec:	08009eab 	.word	0x08009eab
 8009df0:	08009eab 	.word	0x08009eab
 8009df4:	08009eab 	.word	0x08009eab
 8009df8:	08009eab 	.word	0x08009eab
 8009dfc:	08009e77 	.word	0x08009e77
 8009e00:	08009eab 	.word	0x08009eab
 8009e04:	08009eab 	.word	0x08009eab
 8009e08:	08009eab 	.word	0x08009eab
 8009e0c:	08009eab 	.word	0x08009eab
 8009e10:	08009eab 	.word	0x08009eab
 8009e14:	08009eab 	.word	0x08009eab
 8009e18:	08009eab 	.word	0x08009eab
 8009e1c:	08009eab 	.word	0x08009eab
 8009e20:	08009eab 	.word	0x08009eab
 8009e24:	08009eab 	.word	0x08009eab
 8009e28:	08009eab 	.word	0x08009eab
 8009e2c:	08009eab 	.word	0x08009eab
 8009e30:	08009eab 	.word	0x08009eab
 8009e34:	08009eab 	.word	0x08009eab
 8009e38:	08009eab 	.word	0x08009eab
 8009e3c:	08009e9d 	.word	0x08009e9d
 8009e40:	2b40      	cmp	r3, #64	@ 0x40
 8009e42:	d02e      	beq.n	8009ea2 <UART_SetConfig+0x8aa>
 8009e44:	e031      	b.n	8009eaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e46:	f7fb fd17 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8009e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e033      	b.n	8009eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e4e:	f7fb fd29 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 8009e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e54:	e02f      	b.n	8009eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fc ff58 	bl	8006d10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e64:	e027      	b.n	8009eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e66:	f107 0318 	add.w	r3, r7, #24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fd f8a4 	bl	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e74:	e01f      	b.n	8009eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e76:	4b2d      	ldr	r3, [pc, #180]	@ (8009f2c <UART_SetConfig+0x934>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d009      	beq.n	8009e96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e82:	4b2a      	ldr	r3, [pc, #168]	@ (8009f2c <UART_SetConfig+0x934>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	08db      	lsrs	r3, r3, #3
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	4a24      	ldr	r2, [pc, #144]	@ (8009f20 <UART_SetConfig+0x928>)
 8009e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e94:	e00f      	b.n	8009eb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009e96:	4b22      	ldr	r3, [pc, #136]	@ (8009f20 <UART_SetConfig+0x928>)
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e9a:	e00c      	b.n	8009eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e9c:	4b21      	ldr	r3, [pc, #132]	@ (8009f24 <UART_SetConfig+0x92c>)
 8009e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e009      	b.n	8009eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea8:	e005      	b.n	8009eb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 80e7 	beq.w	800a08c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec2:	4a19      	ldr	r2, [pc, #100]	@ (8009f28 <UART_SetConfig+0x930>)
 8009ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ed0:	005a      	lsls	r2, r3, #1
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	085b      	lsrs	r3, r3, #1
 8009ed8:	441a      	add	r2, r3
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee6:	2b0f      	cmp	r3, #15
 8009ee8:	d916      	bls.n	8009f18 <UART_SetConfig+0x920>
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ef0:	d212      	bcs.n	8009f18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	f023 030f 	bic.w	r3, r3, #15
 8009efa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	085b      	lsrs	r3, r3, #1
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	e0b9      	b.n	800a08c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f1e:	e0b5      	b.n	800a08c <UART_SetConfig+0xa94>
 8009f20:	03d09000 	.word	0x03d09000
 8009f24:	003d0900 	.word	0x003d0900
 8009f28:	0800fa68 	.word	0x0800fa68
 8009f2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	dc49      	bgt.n	8009fcc <UART_SetConfig+0x9d4>
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	db7c      	blt.n	800a036 <UART_SetConfig+0xa3e>
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d87a      	bhi.n	800a036 <UART_SetConfig+0xa3e>
 8009f40:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <UART_SetConfig+0x950>)
 8009f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f46:	bf00      	nop
 8009f48:	08009fd3 	.word	0x08009fd3
 8009f4c:	08009fdb 	.word	0x08009fdb
 8009f50:	0800a037 	.word	0x0800a037
 8009f54:	0800a037 	.word	0x0800a037
 8009f58:	08009fe3 	.word	0x08009fe3
 8009f5c:	0800a037 	.word	0x0800a037
 8009f60:	0800a037 	.word	0x0800a037
 8009f64:	0800a037 	.word	0x0800a037
 8009f68:	08009ff3 	.word	0x08009ff3
 8009f6c:	0800a037 	.word	0x0800a037
 8009f70:	0800a037 	.word	0x0800a037
 8009f74:	0800a037 	.word	0x0800a037
 8009f78:	0800a037 	.word	0x0800a037
 8009f7c:	0800a037 	.word	0x0800a037
 8009f80:	0800a037 	.word	0x0800a037
 8009f84:	0800a037 	.word	0x0800a037
 8009f88:	0800a003 	.word	0x0800a003
 8009f8c:	0800a037 	.word	0x0800a037
 8009f90:	0800a037 	.word	0x0800a037
 8009f94:	0800a037 	.word	0x0800a037
 8009f98:	0800a037 	.word	0x0800a037
 8009f9c:	0800a037 	.word	0x0800a037
 8009fa0:	0800a037 	.word	0x0800a037
 8009fa4:	0800a037 	.word	0x0800a037
 8009fa8:	0800a037 	.word	0x0800a037
 8009fac:	0800a037 	.word	0x0800a037
 8009fb0:	0800a037 	.word	0x0800a037
 8009fb4:	0800a037 	.word	0x0800a037
 8009fb8:	0800a037 	.word	0x0800a037
 8009fbc:	0800a037 	.word	0x0800a037
 8009fc0:	0800a037 	.word	0x0800a037
 8009fc4:	0800a037 	.word	0x0800a037
 8009fc8:	0800a029 	.word	0x0800a029
 8009fcc:	2b40      	cmp	r3, #64	@ 0x40
 8009fce:	d02e      	beq.n	800a02e <UART_SetConfig+0xa36>
 8009fd0:	e031      	b.n	800a036 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd2:	f7fb fc51 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8009fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fd8:	e033      	b.n	800a042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fda:	f7fb fc63 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 8009fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fe0:	e02f      	b.n	800a042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fc fe92 	bl	8006d10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff0:	e027      	b.n	800a042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff2:	f107 0318 	add.w	r3, r7, #24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fc ffde 	bl	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a000:	e01f      	b.n	800a042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a002:	4b2d      	ldr	r3, [pc, #180]	@ (800a0b8 <UART_SetConfig+0xac0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a00e:	4b2a      	ldr	r3, [pc, #168]	@ (800a0b8 <UART_SetConfig+0xac0>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	08db      	lsrs	r3, r3, #3
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	4a28      	ldr	r2, [pc, #160]	@ (800a0bc <UART_SetConfig+0xac4>)
 800a01a:	fa22 f303 	lsr.w	r3, r2, r3
 800a01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a020:	e00f      	b.n	800a042 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a022:	4b26      	ldr	r3, [pc, #152]	@ (800a0bc <UART_SetConfig+0xac4>)
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a026:	e00c      	b.n	800a042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a028:	4b25      	ldr	r3, [pc, #148]	@ (800a0c0 <UART_SetConfig+0xac8>)
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a02c:	e009      	b.n	800a042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a02e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a034:	e005      	b.n	800a042 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a040:	bf00      	nop
    }

    if (pclk != 0U)
 800a042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d021      	beq.n	800a08c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c4 <UART_SetConfig+0xacc>)
 800a04e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a052:	461a      	mov	r2, r3
 800a054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a056:	fbb3 f2f2 	udiv	r2, r3, r2
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	441a      	add	r2, r3
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06e:	2b0f      	cmp	r3, #15
 800a070:	d909      	bls.n	800a086 <UART_SetConfig+0xa8e>
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a078:	d205      	bcs.n	800a086 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	60da      	str	r2, [r3, #12]
 800a084:	e002      	b.n	800a08c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2201      	movs	r2, #1
 800a090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2201      	movs	r2, #1
 800a098:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a0a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3748      	adds	r7, #72	@ 0x48
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0b6:	bf00      	nop
 800a0b8:	58024400 	.word	0x58024400
 800a0bc:	03d09000 	.word	0x03d09000
 800a0c0:	003d0900 	.word	0x003d0900
 800a0c4:	0800fa68 	.word	0x0800fa68

0800a0c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00a      	beq.n	800a0f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a118:	f003 0302 	and.w	r3, r3, #2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15c:	f003 0310 	and.w	r3, r3, #16
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00a      	beq.n	800a17a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	430a      	orrs	r2, r1
 800a178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17e:	f003 0320 	and.w	r3, r3, #32
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	430a      	orrs	r2, r1
 800a19a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01a      	beq.n	800a1de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1c6:	d10a      	bne.n	800a1de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b098      	sub	sp, #96	@ 0x60
 800a210:	af02      	add	r7, sp, #8
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a21c:	f7f7 fe04 	bl	8001e28 <HAL_GetTick>
 800a220:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d12f      	bne.n	800a290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a230:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a238:	2200      	movs	r2, #0
 800a23a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f88e 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d022      	beq.n	800a290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a25e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	461a      	mov	r2, r3
 800a266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a268:	647b      	str	r3, [r7, #68]	@ 0x44
 800a26a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a26e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e6      	bne.n	800a24a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e063      	b.n	800a358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d149      	bne.n	800a332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a29e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f857 	bl	800a360 <UART_WaitOnFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d03c      	beq.n	800a332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e6      	bne.n	800a2b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3308      	adds	r3, #8
 800a308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30a:	61fa      	str	r2, [r7, #28]
 800a30c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	69b9      	ldr	r1, [r7, #24]
 800a310:	69fa      	ldr	r2, [r7, #28]
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	617b      	str	r3, [r7, #20]
   return(result);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e5      	bne.n	800a2ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e012      	b.n	800a358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2220      	movs	r2, #32
 800a336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3758      	adds	r7, #88	@ 0x58
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a370:	e04f      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d04b      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a37a:	f7f7 fd55 	bl	8001e28 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	429a      	cmp	r2, r3
 800a388:	d302      	bcc.n	800a390 <UART_WaitOnFlagUntilTimeout+0x30>
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e04e      	b.n	800a432 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d037      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b80      	cmp	r3, #128	@ 0x80
 800a3a6:	d034      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b40      	cmp	r3, #64	@ 0x40
 800a3ac:	d031      	beq.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	f003 0308 	and.w	r3, r3, #8
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d110      	bne.n	800a3de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 f95b 	bl	800a680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e029      	b.n	800a432 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ec:	d111      	bne.n	800a412 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f941 	bl	800a680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e00f      	b.n	800a432 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4013      	ands	r3, r2
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	429a      	cmp	r2, r3
 800a420:	bf0c      	ite	eq
 800a422:	2301      	moveq	r3, #1
 800a424:	2300      	movne	r3, #0
 800a426:	b2db      	uxtb	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d0a0      	beq.n	800a372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b0a3      	sub	sp, #140	@ 0x8c
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a46e:	d10e      	bne.n	800a48e <UART_Start_Receive_IT+0x52>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d105      	bne.n	800a484 <UART_Start_Receive_IT+0x48>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a47e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a482:	e02d      	b.n	800a4e0 <UART_Start_Receive_IT+0xa4>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	22ff      	movs	r2, #255	@ 0xff
 800a488:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a48c:	e028      	b.n	800a4e0 <UART_Start_Receive_IT+0xa4>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10d      	bne.n	800a4b2 <UART_Start_Receive_IT+0x76>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <UART_Start_Receive_IT+0x6c>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	22ff      	movs	r2, #255	@ 0xff
 800a4a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4a6:	e01b      	b.n	800a4e0 <UART_Start_Receive_IT+0xa4>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	227f      	movs	r2, #127	@ 0x7f
 800a4ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4b0:	e016      	b.n	800a4e0 <UART_Start_Receive_IT+0xa4>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ba:	d10d      	bne.n	800a4d8 <UART_Start_Receive_IT+0x9c>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d104      	bne.n	800a4ce <UART_Start_Receive_IT+0x92>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	227f      	movs	r2, #127	@ 0x7f
 800a4c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4cc:	e008      	b.n	800a4e0 <UART_Start_Receive_IT+0xa4>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	223f      	movs	r2, #63	@ 0x3f
 800a4d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4d6:	e003      	b.n	800a4e0 <UART_Start_Receive_IT+0xa4>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2222      	movs	r2, #34	@ 0x22
 800a4ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a502:	f043 0301 	orr.w	r3, r3, #1
 800a506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3308      	adds	r3, #8
 800a510:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a514:	673a      	str	r2, [r7, #112]	@ 0x70
 800a516:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a51a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e3      	bne.n	800a4f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a52c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a530:	d14f      	bne.n	800a5d2 <UART_Start_Receive_IT+0x196>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a538:	88fa      	ldrh	r2, [r7, #6]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d349      	bcc.n	800a5d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a546:	d107      	bne.n	800a558 <UART_Start_Receive_IT+0x11c>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	4a47      	ldr	r2, [pc, #284]	@ (800a670 <UART_Start_Receive_IT+0x234>)
 800a554:	675a      	str	r2, [r3, #116]	@ 0x74
 800a556:	e002      	b.n	800a55e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4a46      	ldr	r2, [pc, #280]	@ (800a674 <UART_Start_Receive_IT+0x238>)
 800a55c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01a      	beq.n	800a59c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a57a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a58a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a58e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a590:	e841 2300 	strex	r3, r2, [r1]
 800a594:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e4      	bne.n	800a566 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a5bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a5be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e5      	bne.n	800a59c <UART_Start_Receive_IT+0x160>
 800a5d0:	e046      	b.n	800a660 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5da:	d107      	bne.n	800a5ec <UART_Start_Receive_IT+0x1b0>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4a24      	ldr	r2, [pc, #144]	@ (800a678 <UART_Start_Receive_IT+0x23c>)
 800a5e8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5ea:	e002      	b.n	800a5f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4a23      	ldr	r2, [pc, #140]	@ (800a67c <UART_Start_Receive_IT+0x240>)
 800a5f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d019      	beq.n	800a62e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a60e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
 800a61a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a61e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a620:	e841 2300 	strex	r3, r2, [r1]
 800a624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e6      	bne.n	800a5fa <UART_Start_Receive_IT+0x1be>
 800a62c:	e018      	b.n	800a660 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	e853 3f00 	ldrex	r3, [r3]
 800a63a:	613b      	str	r3, [r7, #16]
   return(result);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	f043 0320 	orr.w	r3, r3, #32
 800a642:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	461a      	mov	r2, r3
 800a64a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a64c:	623b      	str	r3, [r7, #32]
 800a64e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a650:	69f9      	ldr	r1, [r7, #28]
 800a652:	6a3a      	ldr	r2, [r7, #32]
 800a654:	e841 2300 	strex	r3, r2, [r1]
 800a658:	61bb      	str	r3, [r7, #24]
   return(result);
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e6      	bne.n	800a62e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	378c      	adds	r7, #140	@ 0x8c
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	0800aea1 	.word	0x0800aea1
 800a674:	0800ab41 	.word	0x0800ab41
 800a678:	0800a989 	.word	0x0800a989
 800a67c:	0800a7d1 	.word	0x0800a7d1

0800a680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a680:	b480      	push	{r7}
 800a682:	b095      	sub	sp, #84	@ 0x54
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e6      	bne.n	800a688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <UART_EndRxTransfer+0xc8>)
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d118      	bne.n	800a728 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	60bb      	str	r3, [r7, #8]
   return(result);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0310 	bic.w	r3, r3, #16
 800a70a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a714:	61bb      	str	r3, [r7, #24]
 800a716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6979      	ldr	r1, [r7, #20]
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	613b      	str	r3, [r7, #16]
   return(result);
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2220      	movs	r2, #32
 800a72c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a73c:	bf00      	nop
 800a73e:	3754      	adds	r7, #84	@ 0x54
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	effffffe 	.word	0xeffffffe

0800a74c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7fe ff2e 	bl	80095cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a770:	bf00      	nop
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a794:	61fb      	str	r3, [r7, #28]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6979      	ldr	r1, [r7, #20]
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e6      	bne.n	800a780 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7fe fef9 	bl	80095b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7c6:	bf00      	nop
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b09c      	sub	sp, #112	@ 0x70
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7e8:	2b22      	cmp	r3, #34	@ 0x22
 800a7ea:	f040 80be 	bne.w	800a96a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7fc:	b2d9      	uxtb	r1, r3
 800a7fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a802:	b2da      	uxtb	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a808:	400a      	ands	r2, r1
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a830:	b29b      	uxth	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	f040 80a1 	bne.w	800a97a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a84c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a856:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a858:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a85c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e6      	bne.n	800a838 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3308      	adds	r3, #8
 800a870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a87c:	f023 0301 	bic.w	r3, r3, #1
 800a880:	667b      	str	r3, [r7, #100]	@ 0x64
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a88a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a88c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e5      	bne.n	800a86a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a33      	ldr	r2, [pc, #204]	@ (800a984 <UART_RxISR_8BIT+0x1b4>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d01f      	beq.n	800a8fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d018      	beq.n	800a8fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8de:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e6      	bne.n	800a8ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a900:	2b01      	cmp	r3, #1
 800a902:	d12e      	bne.n	800a962 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	e853 3f00 	ldrex	r3, [r3]
 800a916:	60fb      	str	r3, [r7, #12]
   return(result);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 0310 	bic.w	r3, r3, #16
 800a91e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92c:	69b9      	ldr	r1, [r7, #24]
 800a92e:	69fa      	ldr	r2, [r7, #28]
 800a930:	e841 2300 	strex	r3, r2, [r1]
 800a934:	617b      	str	r3, [r7, #20]
   return(result);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1e6      	bne.n	800a90a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	f003 0310 	and.w	r3, r3, #16
 800a946:	2b10      	cmp	r3, #16
 800a948:	d103      	bne.n	800a952 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2210      	movs	r2, #16
 800a950:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7fe fe40 	bl	80095e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a960:	e00b      	b.n	800a97a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7f6 fd98 	bl	8001498 <HAL_UART_RxCpltCallback>
}
 800a968:	e007      	b.n	800a97a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	699a      	ldr	r2, [r3, #24]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 0208 	orr.w	r2, r2, #8
 800a978:	619a      	str	r2, [r3, #24]
}
 800a97a:	bf00      	nop
 800a97c:	3770      	adds	r7, #112	@ 0x70
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	58000c00 	.word	0x58000c00

0800a988 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b09c      	sub	sp, #112	@ 0x70
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a996:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9a0:	2b22      	cmp	r3, #34	@ 0x22
 800a9a2:	f040 80be 	bne.w	800ab22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a9ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a9be:	4013      	ands	r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ca:	1c9a      	adds	r2, r3, #2
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f040 80a1 	bne.w	800ab32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa04:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1e6      	bne.n	800a9f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3308      	adds	r3, #8
 800aa40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa42:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e5      	bne.n	800aa22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2220      	movs	r2, #32
 800aa5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a33      	ldr	r2, [pc, #204]	@ (800ab3c <UART_RxISR_16BIT+0x1b4>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d01f      	beq.n	800aab4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d018      	beq.n	800aab4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaa2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e6      	bne.n	800aa82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d12e      	bne.n	800ab1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	60bb      	str	r3, [r7, #8]
   return(result);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f023 0310 	bic.w	r3, r3, #16
 800aad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aae0:	61bb      	str	r3, [r7, #24]
 800aae2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6979      	ldr	r1, [r7, #20]
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	613b      	str	r3, [r7, #16]
   return(result);
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e6      	bne.n	800aac2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	f003 0310 	and.w	r3, r3, #16
 800aafe:	2b10      	cmp	r3, #16
 800ab00:	d103      	bne.n	800ab0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2210      	movs	r2, #16
 800ab08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7fe fd64 	bl	80095e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab18:	e00b      	b.n	800ab32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7f6 fcbc 	bl	8001498 <HAL_UART_RxCpltCallback>
}
 800ab20:	e007      	b.n	800ab32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	699a      	ldr	r2, [r3, #24]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0208 	orr.w	r2, r2, #8
 800ab30:	619a      	str	r2, [r3, #24]
}
 800ab32:	bf00      	nop
 800ab34:	3770      	adds	r7, #112	@ 0x70
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	58000c00 	.word	0x58000c00

0800ab40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b0ac      	sub	sp, #176	@ 0xb0
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab76:	2b22      	cmp	r3, #34	@ 0x22
 800ab78:	f040 8180 	bne.w	800ae7c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab82:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab86:	e123      	b.n	800add0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ab96:	b2d9      	uxtb	r1, r3
 800ab98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aba2:	400a      	ands	r2, r1
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3b01      	subs	r3, #1
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800abce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d053      	beq.n	800ac82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800abda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d011      	beq.n	800ac0a <UART_RxISR_8BIT_FIFOEN+0xca>
 800abe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00b      	beq.n	800ac0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2201      	movs	r2, #1
 800abf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac00:	f043 0201 	orr.w	r2, r3, #1
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d011      	beq.n	800ac3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ac16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2202      	movs	r2, #2
 800ac28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac30:	f043 0204 	orr.w	r2, r3, #4
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3e:	f003 0304 	and.w	r3, r3, #4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d011      	beq.n	800ac6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ac46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00b      	beq.n	800ac6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2204      	movs	r2, #4
 800ac58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac60:	f043 0202 	orr.w	r2, r3, #2
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d006      	beq.n	800ac82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7fe fca9 	bl	80095cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f040 80a0 	bne.w	800add0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ac9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aca4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	461a      	mov	r2, r3
 800acae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800acb4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800acb8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800acc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e4      	bne.n	800ac90 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3308      	adds	r3, #8
 800accc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acd0:	e853 3f00 	ldrex	r3, [r3]
 800acd4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800acd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acd8:	4b6e      	ldr	r3, [pc, #440]	@ (800ae94 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800acda:	4013      	ands	r3, r2
 800acdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3308      	adds	r3, #8
 800ace6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acea:	66ba      	str	r2, [r7, #104]	@ 0x68
 800acec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800acf0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800acf2:	e841 2300 	strex	r3, r2, [r1]
 800acf6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800acf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e3      	bne.n	800acc6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a60      	ldr	r2, [pc, #384]	@ (800ae98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d021      	beq.n	800ad60 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d01a      	beq.n	800ad60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad32:	e853 3f00 	ldrex	r3, [r3]
 800ad36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad4c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad4e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad54:	e841 2300 	strex	r3, r2, [r1]
 800ad58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1e4      	bne.n	800ad2a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d130      	bne.n	800adca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7e:	f023 0310 	bic.w	r3, r3, #16
 800ad82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad90:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad98:	e841 2300 	strex	r3, r2, [r1]
 800ad9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e4      	bne.n	800ad6e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b10      	cmp	r3, #16
 800adb0:	d103      	bne.n	800adba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2210      	movs	r2, #16
 800adb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fe fc0c 	bl	80095e0 <HAL_UARTEx_RxEventCallback>
 800adc8:	e002      	b.n	800add0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7f6 fb64 	bl	8001498 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800add0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800add8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f47f aed1 	bne.w	800ab88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800adec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800adf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d049      	beq.n	800ae8c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800adfe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d242      	bcs.n	800ae8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3308      	adds	r3, #8
 800ae26:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ae2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e3      	bne.n	800ae06 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a16      	ldr	r2, [pc, #88]	@ (800ae9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ae42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	f043 0320 	orr.w	r3, r3, #32
 800ae58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae66:	61bb      	str	r3, [r7, #24]
 800ae68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6a:	6979      	ldr	r1, [r7, #20]
 800ae6c:	69ba      	ldr	r2, [r7, #24]
 800ae6e:	e841 2300 	strex	r3, r2, [r1]
 800ae72:	613b      	str	r3, [r7, #16]
   return(result);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1e4      	bne.n	800ae44 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae7a:	e007      	b.n	800ae8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0208 	orr.w	r2, r2, #8
 800ae8a:	619a      	str	r2, [r3, #24]
}
 800ae8c:	bf00      	nop
 800ae8e:	37b0      	adds	r7, #176	@ 0xb0
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	effffffe 	.word	0xeffffffe
 800ae98:	58000c00 	.word	0x58000c00
 800ae9c:	0800a7d1 	.word	0x0800a7d1

0800aea0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b0ae      	sub	sp, #184	@ 0xb8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aeae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aed6:	2b22      	cmp	r3, #34	@ 0x22
 800aed8:	f040 8184 	bne.w	800b1e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aee2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aee6:	e127      	b.n	800b138 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aefa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800aefe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800af02:	4013      	ands	r3, r2
 800af04:	b29a      	uxth	r2, r3
 800af06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af10:	1c9a      	adds	r2, r3, #2
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	3b01      	subs	r3, #1
 800af20:	b29a      	uxth	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d053      	beq.n	800afe6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d011      	beq.n	800af6e <UART_RxISR_16BIT_FIFOEN+0xce>
 800af4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00b      	beq.n	800af6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2201      	movs	r2, #1
 800af5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af64:	f043 0201 	orr.w	r2, r3, #1
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d011      	beq.n	800af9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00b      	beq.n	800af9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2202      	movs	r2, #2
 800af8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af94:	f043 0204 	orr.w	r2, r3, #4
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afa2:	f003 0304 	and.w	r3, r3, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d011      	beq.n	800afce <UART_RxISR_16BIT_FIFOEN+0x12e>
 800afaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00b      	beq.n	800afce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2204      	movs	r2, #4
 800afbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc4:	f043 0202 	orr.w	r2, r3, #2
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d006      	beq.n	800afe6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7fe faf7 	bl	80095cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afec:	b29b      	uxth	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f040 80a2 	bne.w	800b138 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b016:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b01a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b01e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1e2      	bne.n	800aff4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3308      	adds	r3, #8
 800b034:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b03e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b040:	4b6e      	ldr	r3, [pc, #440]	@ (800b1fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b042:	4013      	ands	r3, r2
 800b044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3308      	adds	r3, #8
 800b04e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b054:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b056:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b058:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1e3      	bne.n	800b02e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2220      	movs	r2, #32
 800b06a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a60      	ldr	r2, [pc, #384]	@ (800b200 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d021      	beq.n	800b0c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d01a      	beq.n	800b0c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e4      	bne.n	800b092 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d130      	bne.n	800b132 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0e6:	f023 0310 	bic.w	r3, r3, #16
 800b0ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b100:	e841 2300 	strex	r3, r2, [r1]
 800b104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e4      	bne.n	800b0d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	f003 0310 	and.w	r3, r3, #16
 800b116:	2b10      	cmp	r3, #16
 800b118:	d103      	bne.n	800b122 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2210      	movs	r2, #16
 800b120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7fe fa58 	bl	80095e0 <HAL_UARTEx_RxEventCallback>
 800b130:	e002      	b.n	800b138 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7f6 f9b0 	bl	8001498 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b138:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b144:	f003 0320 	and.w	r3, r3, #32
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f47f aecd 	bne.w	800aee8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b154:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b158:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d049      	beq.n	800b1f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b166:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d242      	bcs.n	800b1f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3308      	adds	r3, #8
 800b174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b178:	e853 3f00 	ldrex	r3, [r3]
 800b17c:	623b      	str	r3, [r7, #32]
   return(result);
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3308      	adds	r3, #8
 800b18e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b192:	633a      	str	r2, [r7, #48]	@ 0x30
 800b194:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e3      	bne.n	800b16e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a16      	ldr	r2, [pc, #88]	@ (800b204 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b1aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f043 0320 	orr.w	r3, r3, #32
 800b1c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1ce:	61fb      	str	r3, [r7, #28]
 800b1d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	69b9      	ldr	r1, [r7, #24]
 800b1d4:	69fa      	ldr	r2, [r7, #28]
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	617b      	str	r3, [r7, #20]
   return(result);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e4      	bne.n	800b1ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1e2:	e007      	b.n	800b1f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699a      	ldr	r2, [r3, #24]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0208 	orr.w	r2, r2, #8
 800b1f2:	619a      	str	r2, [r3, #24]
}
 800b1f4:	bf00      	nop
 800b1f6:	37b8      	adds	r7, #184	@ 0xb8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	effffffe 	.word	0xeffffffe
 800b200:	58000c00 	.word	0x58000c00
 800b204:	0800a989 	.word	0x0800a989

0800b208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b252:	2b01      	cmp	r3, #1
 800b254:	d101      	bne.n	800b25a <HAL_UARTEx_DisableFifoMode+0x16>
 800b256:	2302      	movs	r3, #2
 800b258:	e027      	b.n	800b2aa <HAL_UARTEx_DisableFifoMode+0x66>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2224      	movs	r2, #36	@ 0x24
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0201 	bic.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2220      	movs	r2, #32
 800b29c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e02d      	b.n	800b32a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2224      	movs	r2, #36	@ 0x24
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f022 0201 	bic.w	r2, r2, #1
 800b2f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f850 	bl	800b3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2220      	movs	r2, #32
 800b31c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b342:	2b01      	cmp	r3, #1
 800b344:	d101      	bne.n	800b34a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b346:	2302      	movs	r3, #2
 800b348:	e02d      	b.n	800b3a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2224      	movs	r2, #36	@ 0x24
 800b356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 0201 	bic.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f812 	bl	800b3b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
	...

0800b3b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d108      	bne.n	800b3d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3d0:	e031      	b.n	800b436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3d2:	2310      	movs	r3, #16
 800b3d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3d6:	2310      	movs	r3, #16
 800b3d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	0e5b      	lsrs	r3, r3, #25
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	f003 0307 	and.w	r3, r3, #7
 800b3e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	0f5b      	lsrs	r3, r3, #29
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	f003 0307 	and.w	r3, r3, #7
 800b3f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	7b3a      	ldrb	r2, [r7, #12]
 800b3fe:	4911      	ldr	r1, [pc, #68]	@ (800b444 <UARTEx_SetNbDataToProcess+0x94>)
 800b400:	5c8a      	ldrb	r2, [r1, r2]
 800b402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b406:	7b3a      	ldrb	r2, [r7, #12]
 800b408:	490f      	ldr	r1, [pc, #60]	@ (800b448 <UARTEx_SetNbDataToProcess+0x98>)
 800b40a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b40c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	7b7a      	ldrb	r2, [r7, #13]
 800b41c:	4909      	ldr	r1, [pc, #36]	@ (800b444 <UARTEx_SetNbDataToProcess+0x94>)
 800b41e:	5c8a      	ldrb	r2, [r1, r2]
 800b420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b424:	7b7a      	ldrb	r2, [r7, #13]
 800b426:	4908      	ldr	r1, [pc, #32]	@ (800b448 <UARTEx_SetNbDataToProcess+0x98>)
 800b428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b42a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	0800fa80 	.word	0x0800fa80
 800b448:	0800fa88 	.word	0x0800fa88

0800b44c <atoi>:
 800b44c:	220a      	movs	r2, #10
 800b44e:	2100      	movs	r1, #0
 800b450:	f000 b87c 	b.w	800b54c <strtol>

0800b454 <_strtol_l.constprop.0>:
 800b454:	2b24      	cmp	r3, #36	@ 0x24
 800b456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b45a:	4686      	mov	lr, r0
 800b45c:	4690      	mov	r8, r2
 800b45e:	d801      	bhi.n	800b464 <_strtol_l.constprop.0+0x10>
 800b460:	2b01      	cmp	r3, #1
 800b462:	d106      	bne.n	800b472 <_strtol_l.constprop.0+0x1e>
 800b464:	f001 f87e 	bl	800c564 <__errno>
 800b468:	2316      	movs	r3, #22
 800b46a:	6003      	str	r3, [r0, #0]
 800b46c:	2000      	movs	r0, #0
 800b46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b472:	4834      	ldr	r0, [pc, #208]	@ (800b544 <_strtol_l.constprop.0+0xf0>)
 800b474:	460d      	mov	r5, r1
 800b476:	462a      	mov	r2, r5
 800b478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b47c:	5d06      	ldrb	r6, [r0, r4]
 800b47e:	f016 0608 	ands.w	r6, r6, #8
 800b482:	d1f8      	bne.n	800b476 <_strtol_l.constprop.0+0x22>
 800b484:	2c2d      	cmp	r4, #45	@ 0x2d
 800b486:	d12d      	bne.n	800b4e4 <_strtol_l.constprop.0+0x90>
 800b488:	782c      	ldrb	r4, [r5, #0]
 800b48a:	2601      	movs	r6, #1
 800b48c:	1c95      	adds	r5, r2, #2
 800b48e:	f033 0210 	bics.w	r2, r3, #16
 800b492:	d109      	bne.n	800b4a8 <_strtol_l.constprop.0+0x54>
 800b494:	2c30      	cmp	r4, #48	@ 0x30
 800b496:	d12a      	bne.n	800b4ee <_strtol_l.constprop.0+0x9a>
 800b498:	782a      	ldrb	r2, [r5, #0]
 800b49a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b49e:	2a58      	cmp	r2, #88	@ 0x58
 800b4a0:	d125      	bne.n	800b4ee <_strtol_l.constprop.0+0x9a>
 800b4a2:	786c      	ldrb	r4, [r5, #1]
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	3502      	adds	r5, #2
 800b4a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b4ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	fbbc f9f3 	udiv	r9, ip, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b4bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b4c0:	2f09      	cmp	r7, #9
 800b4c2:	d81b      	bhi.n	800b4fc <_strtol_l.constprop.0+0xa8>
 800b4c4:	463c      	mov	r4, r7
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	dd27      	ble.n	800b51a <_strtol_l.constprop.0+0xc6>
 800b4ca:	1c57      	adds	r7, r2, #1
 800b4cc:	d007      	beq.n	800b4de <_strtol_l.constprop.0+0x8a>
 800b4ce:	4581      	cmp	r9, r0
 800b4d0:	d320      	bcc.n	800b514 <_strtol_l.constprop.0+0xc0>
 800b4d2:	d101      	bne.n	800b4d8 <_strtol_l.constprop.0+0x84>
 800b4d4:	45a2      	cmp	sl, r4
 800b4d6:	db1d      	blt.n	800b514 <_strtol_l.constprop.0+0xc0>
 800b4d8:	fb00 4003 	mla	r0, r0, r3, r4
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4e2:	e7eb      	b.n	800b4bc <_strtol_l.constprop.0+0x68>
 800b4e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b4e6:	bf04      	itt	eq
 800b4e8:	782c      	ldrbeq	r4, [r5, #0]
 800b4ea:	1c95      	addeq	r5, r2, #2
 800b4ec:	e7cf      	b.n	800b48e <_strtol_l.constprop.0+0x3a>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1da      	bne.n	800b4a8 <_strtol_l.constprop.0+0x54>
 800b4f2:	2c30      	cmp	r4, #48	@ 0x30
 800b4f4:	bf0c      	ite	eq
 800b4f6:	2308      	moveq	r3, #8
 800b4f8:	230a      	movne	r3, #10
 800b4fa:	e7d5      	b.n	800b4a8 <_strtol_l.constprop.0+0x54>
 800b4fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b500:	2f19      	cmp	r7, #25
 800b502:	d801      	bhi.n	800b508 <_strtol_l.constprop.0+0xb4>
 800b504:	3c37      	subs	r4, #55	@ 0x37
 800b506:	e7de      	b.n	800b4c6 <_strtol_l.constprop.0+0x72>
 800b508:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b50c:	2f19      	cmp	r7, #25
 800b50e:	d804      	bhi.n	800b51a <_strtol_l.constprop.0+0xc6>
 800b510:	3c57      	subs	r4, #87	@ 0x57
 800b512:	e7d8      	b.n	800b4c6 <_strtol_l.constprop.0+0x72>
 800b514:	f04f 32ff 	mov.w	r2, #4294967295
 800b518:	e7e1      	b.n	800b4de <_strtol_l.constprop.0+0x8a>
 800b51a:	1c53      	adds	r3, r2, #1
 800b51c:	d108      	bne.n	800b530 <_strtol_l.constprop.0+0xdc>
 800b51e:	2322      	movs	r3, #34	@ 0x22
 800b520:	f8ce 3000 	str.w	r3, [lr]
 800b524:	4660      	mov	r0, ip
 800b526:	f1b8 0f00 	cmp.w	r8, #0
 800b52a:	d0a0      	beq.n	800b46e <_strtol_l.constprop.0+0x1a>
 800b52c:	1e69      	subs	r1, r5, #1
 800b52e:	e006      	b.n	800b53e <_strtol_l.constprop.0+0xea>
 800b530:	b106      	cbz	r6, 800b534 <_strtol_l.constprop.0+0xe0>
 800b532:	4240      	negs	r0, r0
 800b534:	f1b8 0f00 	cmp.w	r8, #0
 800b538:	d099      	beq.n	800b46e <_strtol_l.constprop.0+0x1a>
 800b53a:	2a00      	cmp	r2, #0
 800b53c:	d1f6      	bne.n	800b52c <_strtol_l.constprop.0+0xd8>
 800b53e:	f8c8 1000 	str.w	r1, [r8]
 800b542:	e794      	b.n	800b46e <_strtol_l.constprop.0+0x1a>
 800b544:	0800fa91 	.word	0x0800fa91

0800b548 <_strtol_r>:
 800b548:	f7ff bf84 	b.w	800b454 <_strtol_l.constprop.0>

0800b54c <strtol>:
 800b54c:	4613      	mov	r3, r2
 800b54e:	460a      	mov	r2, r1
 800b550:	4601      	mov	r1, r0
 800b552:	4802      	ldr	r0, [pc, #8]	@ (800b55c <strtol+0x10>)
 800b554:	6800      	ldr	r0, [r0, #0]
 800b556:	f7ff bf7d 	b.w	800b454 <_strtol_l.constprop.0>
 800b55a:	bf00      	nop
 800b55c:	2400002c 	.word	0x2400002c

0800b560 <__cvt>:
 800b560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b562:	ed2d 8b02 	vpush	{d8}
 800b566:	eeb0 8b40 	vmov.f64	d8, d0
 800b56a:	b085      	sub	sp, #20
 800b56c:	4617      	mov	r7, r2
 800b56e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b570:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b572:	ee18 2a90 	vmov	r2, s17
 800b576:	f025 0520 	bic.w	r5, r5, #32
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	bfb6      	itet	lt
 800b57e:	222d      	movlt	r2, #45	@ 0x2d
 800b580:	2200      	movge	r2, #0
 800b582:	eeb1 8b40 	vneglt.f64	d8, d0
 800b586:	2d46      	cmp	r5, #70	@ 0x46
 800b588:	460c      	mov	r4, r1
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	d004      	beq.n	800b598 <__cvt+0x38>
 800b58e:	2d45      	cmp	r5, #69	@ 0x45
 800b590:	d100      	bne.n	800b594 <__cvt+0x34>
 800b592:	3401      	adds	r4, #1
 800b594:	2102      	movs	r1, #2
 800b596:	e000      	b.n	800b59a <__cvt+0x3a>
 800b598:	2103      	movs	r1, #3
 800b59a:	ab03      	add	r3, sp, #12
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	ab02      	add	r3, sp, #8
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4622      	mov	r2, r4
 800b5a4:	4633      	mov	r3, r6
 800b5a6:	eeb0 0b48 	vmov.f64	d0, d8
 800b5aa:	f001 f899 	bl	800c6e0 <_dtoa_r>
 800b5ae:	2d47      	cmp	r5, #71	@ 0x47
 800b5b0:	d114      	bne.n	800b5dc <__cvt+0x7c>
 800b5b2:	07fb      	lsls	r3, r7, #31
 800b5b4:	d50a      	bpl.n	800b5cc <__cvt+0x6c>
 800b5b6:	1902      	adds	r2, r0, r4
 800b5b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c0:	bf08      	it	eq
 800b5c2:	9203      	streq	r2, [sp, #12]
 800b5c4:	2130      	movs	r1, #48	@ 0x30
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d319      	bcc.n	800b600 <__cvt+0xa0>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d0:	1a1b      	subs	r3, r3, r0
 800b5d2:	6013      	str	r3, [r2, #0]
 800b5d4:	b005      	add	sp, #20
 800b5d6:	ecbd 8b02 	vpop	{d8}
 800b5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5dc:	2d46      	cmp	r5, #70	@ 0x46
 800b5de:	eb00 0204 	add.w	r2, r0, r4
 800b5e2:	d1e9      	bne.n	800b5b8 <__cvt+0x58>
 800b5e4:	7803      	ldrb	r3, [r0, #0]
 800b5e6:	2b30      	cmp	r3, #48	@ 0x30
 800b5e8:	d107      	bne.n	800b5fa <__cvt+0x9a>
 800b5ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	bf1c      	itt	ne
 800b5f4:	f1c4 0401 	rsbne	r4, r4, #1
 800b5f8:	6034      	strne	r4, [r6, #0]
 800b5fa:	6833      	ldr	r3, [r6, #0]
 800b5fc:	441a      	add	r2, r3
 800b5fe:	e7db      	b.n	800b5b8 <__cvt+0x58>
 800b600:	1c5c      	adds	r4, r3, #1
 800b602:	9403      	str	r4, [sp, #12]
 800b604:	7019      	strb	r1, [r3, #0]
 800b606:	e7de      	b.n	800b5c6 <__cvt+0x66>

0800b608 <__exponent>:
 800b608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b60a:	2900      	cmp	r1, #0
 800b60c:	bfba      	itte	lt
 800b60e:	4249      	neglt	r1, r1
 800b610:	232d      	movlt	r3, #45	@ 0x2d
 800b612:	232b      	movge	r3, #43	@ 0x2b
 800b614:	2909      	cmp	r1, #9
 800b616:	7002      	strb	r2, [r0, #0]
 800b618:	7043      	strb	r3, [r0, #1]
 800b61a:	dd29      	ble.n	800b670 <__exponent+0x68>
 800b61c:	f10d 0307 	add.w	r3, sp, #7
 800b620:	461d      	mov	r5, r3
 800b622:	270a      	movs	r7, #10
 800b624:	461a      	mov	r2, r3
 800b626:	fbb1 f6f7 	udiv	r6, r1, r7
 800b62a:	fb07 1416 	mls	r4, r7, r6, r1
 800b62e:	3430      	adds	r4, #48	@ 0x30
 800b630:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b634:	460c      	mov	r4, r1
 800b636:	2c63      	cmp	r4, #99	@ 0x63
 800b638:	f103 33ff 	add.w	r3, r3, #4294967295
 800b63c:	4631      	mov	r1, r6
 800b63e:	dcf1      	bgt.n	800b624 <__exponent+0x1c>
 800b640:	3130      	adds	r1, #48	@ 0x30
 800b642:	1e94      	subs	r4, r2, #2
 800b644:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b648:	1c41      	adds	r1, r0, #1
 800b64a:	4623      	mov	r3, r4
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	d30a      	bcc.n	800b666 <__exponent+0x5e>
 800b650:	f10d 0309 	add.w	r3, sp, #9
 800b654:	1a9b      	subs	r3, r3, r2
 800b656:	42ac      	cmp	r4, r5
 800b658:	bf88      	it	hi
 800b65a:	2300      	movhi	r3, #0
 800b65c:	3302      	adds	r3, #2
 800b65e:	4403      	add	r3, r0
 800b660:	1a18      	subs	r0, r3, r0
 800b662:	b003      	add	sp, #12
 800b664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b666:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b66a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b66e:	e7ed      	b.n	800b64c <__exponent+0x44>
 800b670:	2330      	movs	r3, #48	@ 0x30
 800b672:	3130      	adds	r1, #48	@ 0x30
 800b674:	7083      	strb	r3, [r0, #2]
 800b676:	70c1      	strb	r1, [r0, #3]
 800b678:	1d03      	adds	r3, r0, #4
 800b67a:	e7f1      	b.n	800b660 <__exponent+0x58>
 800b67c:	0000      	movs	r0, r0
	...

0800b680 <_printf_float>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	b08d      	sub	sp, #52	@ 0x34
 800b686:	460c      	mov	r4, r1
 800b688:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b68c:	4616      	mov	r6, r2
 800b68e:	461f      	mov	r7, r3
 800b690:	4605      	mov	r5, r0
 800b692:	f000 ff1d 	bl	800c4d0 <_localeconv_r>
 800b696:	f8d0 b000 	ldr.w	fp, [r0]
 800b69a:	4658      	mov	r0, fp
 800b69c:	f7f4 fe70 	bl	8000380 <strlen>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b6ac:	6822      	ldr	r2, [r4, #0]
 800b6ae:	9005      	str	r0, [sp, #20]
 800b6b0:	3307      	adds	r3, #7
 800b6b2:	f023 0307 	bic.w	r3, r3, #7
 800b6b6:	f103 0108 	add.w	r1, r3, #8
 800b6ba:	f8c8 1000 	str.w	r1, [r8]
 800b6be:	ed93 0b00 	vldr	d0, [r3]
 800b6c2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b920 <_printf_float+0x2a0>
 800b6c6:	eeb0 7bc0 	vabs.f64	d7, d0
 800b6ca:	eeb4 7b46 	vcmp.f64	d7, d6
 800b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b6d6:	dd24      	ble.n	800b722 <_printf_float+0xa2>
 800b6d8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	d502      	bpl.n	800b6e8 <_printf_float+0x68>
 800b6e2:	232d      	movs	r3, #45	@ 0x2d
 800b6e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6e8:	498f      	ldr	r1, [pc, #572]	@ (800b928 <_printf_float+0x2a8>)
 800b6ea:	4b90      	ldr	r3, [pc, #576]	@ (800b92c <_printf_float+0x2ac>)
 800b6ec:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b6f0:	bf94      	ite	ls
 800b6f2:	4688      	movls	r8, r1
 800b6f4:	4698      	movhi	r8, r3
 800b6f6:	f022 0204 	bic.w	r2, r2, #4
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	6123      	str	r3, [r4, #16]
 800b6fe:	6022      	str	r2, [r4, #0]
 800b700:	f04f 0a00 	mov.w	sl, #0
 800b704:	9700      	str	r7, [sp, #0]
 800b706:	4633      	mov	r3, r6
 800b708:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b70a:	4621      	mov	r1, r4
 800b70c:	4628      	mov	r0, r5
 800b70e:	f000 f9d1 	bl	800bab4 <_printf_common>
 800b712:	3001      	adds	r0, #1
 800b714:	f040 8089 	bne.w	800b82a <_printf_float+0x1aa>
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	b00d      	add	sp, #52	@ 0x34
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	eeb4 0b40 	vcmp.f64	d0, d0
 800b726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72a:	d709      	bvc.n	800b740 <_printf_float+0xc0>
 800b72c:	ee10 3a90 	vmov	r3, s1
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfbc      	itt	lt
 800b734:	232d      	movlt	r3, #45	@ 0x2d
 800b736:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b73a:	497d      	ldr	r1, [pc, #500]	@ (800b930 <_printf_float+0x2b0>)
 800b73c:	4b7d      	ldr	r3, [pc, #500]	@ (800b934 <_printf_float+0x2b4>)
 800b73e:	e7d5      	b.n	800b6ec <_printf_float+0x6c>
 800b740:	6863      	ldr	r3, [r4, #4]
 800b742:	1c59      	adds	r1, r3, #1
 800b744:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b748:	d139      	bne.n	800b7be <_printf_float+0x13e>
 800b74a:	2306      	movs	r3, #6
 800b74c:	6063      	str	r3, [r4, #4]
 800b74e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b752:	2300      	movs	r3, #0
 800b754:	6022      	str	r2, [r4, #0]
 800b756:	9303      	str	r3, [sp, #12]
 800b758:	ab0a      	add	r3, sp, #40	@ 0x28
 800b75a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b75e:	ab09      	add	r3, sp, #36	@ 0x24
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	6861      	ldr	r1, [r4, #4]
 800b764:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b768:	4628      	mov	r0, r5
 800b76a:	f7ff fef9 	bl	800b560 <__cvt>
 800b76e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b772:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b774:	4680      	mov	r8, r0
 800b776:	d129      	bne.n	800b7cc <_printf_float+0x14c>
 800b778:	1cc8      	adds	r0, r1, #3
 800b77a:	db02      	blt.n	800b782 <_printf_float+0x102>
 800b77c:	6863      	ldr	r3, [r4, #4]
 800b77e:	4299      	cmp	r1, r3
 800b780:	dd41      	ble.n	800b806 <_printf_float+0x186>
 800b782:	f1a9 0902 	sub.w	r9, r9, #2
 800b786:	fa5f f989 	uxtb.w	r9, r9
 800b78a:	3901      	subs	r1, #1
 800b78c:	464a      	mov	r2, r9
 800b78e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b792:	9109      	str	r1, [sp, #36]	@ 0x24
 800b794:	f7ff ff38 	bl	800b608 <__exponent>
 800b798:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b79a:	1813      	adds	r3, r2, r0
 800b79c:	2a01      	cmp	r2, #1
 800b79e:	4682      	mov	sl, r0
 800b7a0:	6123      	str	r3, [r4, #16]
 800b7a2:	dc02      	bgt.n	800b7aa <_printf_float+0x12a>
 800b7a4:	6822      	ldr	r2, [r4, #0]
 800b7a6:	07d2      	lsls	r2, r2, #31
 800b7a8:	d501      	bpl.n	800b7ae <_printf_float+0x12e>
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0a6      	beq.n	800b704 <_printf_float+0x84>
 800b7b6:	232d      	movs	r3, #45	@ 0x2d
 800b7b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7bc:	e7a2      	b.n	800b704 <_printf_float+0x84>
 800b7be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b7c2:	d1c4      	bne.n	800b74e <_printf_float+0xce>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1c2      	bne.n	800b74e <_printf_float+0xce>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e7bf      	b.n	800b74c <_printf_float+0xcc>
 800b7cc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b7d0:	d9db      	bls.n	800b78a <_printf_float+0x10a>
 800b7d2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b7d6:	d118      	bne.n	800b80a <_printf_float+0x18a>
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	6863      	ldr	r3, [r4, #4]
 800b7dc:	dd0b      	ble.n	800b7f6 <_printf_float+0x176>
 800b7de:	6121      	str	r1, [r4, #16]
 800b7e0:	b913      	cbnz	r3, 800b7e8 <_printf_float+0x168>
 800b7e2:	6822      	ldr	r2, [r4, #0]
 800b7e4:	07d0      	lsls	r0, r2, #31
 800b7e6:	d502      	bpl.n	800b7ee <_printf_float+0x16e>
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	440b      	add	r3, r1
 800b7ec:	6123      	str	r3, [r4, #16]
 800b7ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b7f0:	f04f 0a00 	mov.w	sl, #0
 800b7f4:	e7db      	b.n	800b7ae <_printf_float+0x12e>
 800b7f6:	b913      	cbnz	r3, 800b7fe <_printf_float+0x17e>
 800b7f8:	6822      	ldr	r2, [r4, #0]
 800b7fa:	07d2      	lsls	r2, r2, #31
 800b7fc:	d501      	bpl.n	800b802 <_printf_float+0x182>
 800b7fe:	3302      	adds	r3, #2
 800b800:	e7f4      	b.n	800b7ec <_printf_float+0x16c>
 800b802:	2301      	movs	r3, #1
 800b804:	e7f2      	b.n	800b7ec <_printf_float+0x16c>
 800b806:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b80a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b80c:	4299      	cmp	r1, r3
 800b80e:	db05      	blt.n	800b81c <_printf_float+0x19c>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	6121      	str	r1, [r4, #16]
 800b814:	07d8      	lsls	r0, r3, #31
 800b816:	d5ea      	bpl.n	800b7ee <_printf_float+0x16e>
 800b818:	1c4b      	adds	r3, r1, #1
 800b81a:	e7e7      	b.n	800b7ec <_printf_float+0x16c>
 800b81c:	2900      	cmp	r1, #0
 800b81e:	bfd4      	ite	le
 800b820:	f1c1 0202 	rsble	r2, r1, #2
 800b824:	2201      	movgt	r2, #1
 800b826:	4413      	add	r3, r2
 800b828:	e7e0      	b.n	800b7ec <_printf_float+0x16c>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	055a      	lsls	r2, r3, #21
 800b82e:	d407      	bmi.n	800b840 <_printf_float+0x1c0>
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	4642      	mov	r2, r8
 800b834:	4631      	mov	r1, r6
 800b836:	4628      	mov	r0, r5
 800b838:	47b8      	blx	r7
 800b83a:	3001      	adds	r0, #1
 800b83c:	d12a      	bne.n	800b894 <_printf_float+0x214>
 800b83e:	e76b      	b.n	800b718 <_printf_float+0x98>
 800b840:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b844:	f240 80e0 	bls.w	800ba08 <_printf_float+0x388>
 800b848:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b84c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b854:	d133      	bne.n	800b8be <_printf_float+0x23e>
 800b856:	4a38      	ldr	r2, [pc, #224]	@ (800b938 <_printf_float+0x2b8>)
 800b858:	2301      	movs	r3, #1
 800b85a:	4631      	mov	r1, r6
 800b85c:	4628      	mov	r0, r5
 800b85e:	47b8      	blx	r7
 800b860:	3001      	adds	r0, #1
 800b862:	f43f af59 	beq.w	800b718 <_printf_float+0x98>
 800b866:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b86a:	4543      	cmp	r3, r8
 800b86c:	db02      	blt.n	800b874 <_printf_float+0x1f4>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	07d8      	lsls	r0, r3, #31
 800b872:	d50f      	bpl.n	800b894 <_printf_float+0x214>
 800b874:	9b05      	ldr	r3, [sp, #20]
 800b876:	465a      	mov	r2, fp
 800b878:	4631      	mov	r1, r6
 800b87a:	4628      	mov	r0, r5
 800b87c:	47b8      	blx	r7
 800b87e:	3001      	adds	r0, #1
 800b880:	f43f af4a 	beq.w	800b718 <_printf_float+0x98>
 800b884:	f04f 0900 	mov.w	r9, #0
 800b888:	f108 38ff 	add.w	r8, r8, #4294967295
 800b88c:	f104 0a1a 	add.w	sl, r4, #26
 800b890:	45c8      	cmp	r8, r9
 800b892:	dc09      	bgt.n	800b8a8 <_printf_float+0x228>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	079b      	lsls	r3, r3, #30
 800b898:	f100 8107 	bmi.w	800baaa <_printf_float+0x42a>
 800b89c:	68e0      	ldr	r0, [r4, #12]
 800b89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a0:	4298      	cmp	r0, r3
 800b8a2:	bfb8      	it	lt
 800b8a4:	4618      	movlt	r0, r3
 800b8a6:	e739      	b.n	800b71c <_printf_float+0x9c>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	47b8      	blx	r7
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f43f af30 	beq.w	800b718 <_printf_float+0x98>
 800b8b8:	f109 0901 	add.w	r9, r9, #1
 800b8bc:	e7e8      	b.n	800b890 <_printf_float+0x210>
 800b8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	dc3b      	bgt.n	800b93c <_printf_float+0x2bc>
 800b8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b938 <_printf_float+0x2b8>)
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	47b8      	blx	r7
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	f43f af22 	beq.w	800b718 <_printf_float+0x98>
 800b8d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b8d8:	ea59 0303 	orrs.w	r3, r9, r3
 800b8dc:	d102      	bne.n	800b8e4 <_printf_float+0x264>
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	07d9      	lsls	r1, r3, #31
 800b8e2:	d5d7      	bpl.n	800b894 <_printf_float+0x214>
 800b8e4:	9b05      	ldr	r3, [sp, #20]
 800b8e6:	465a      	mov	r2, fp
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b8      	blx	r7
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	f43f af12 	beq.w	800b718 <_printf_float+0x98>
 800b8f4:	f04f 0a00 	mov.w	sl, #0
 800b8f8:	f104 0b1a 	add.w	fp, r4, #26
 800b8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fe:	425b      	negs	r3, r3
 800b900:	4553      	cmp	r3, sl
 800b902:	dc01      	bgt.n	800b908 <_printf_float+0x288>
 800b904:	464b      	mov	r3, r9
 800b906:	e794      	b.n	800b832 <_printf_float+0x1b2>
 800b908:	2301      	movs	r3, #1
 800b90a:	465a      	mov	r2, fp
 800b90c:	4631      	mov	r1, r6
 800b90e:	4628      	mov	r0, r5
 800b910:	47b8      	blx	r7
 800b912:	3001      	adds	r0, #1
 800b914:	f43f af00 	beq.w	800b718 <_printf_float+0x98>
 800b918:	f10a 0a01 	add.w	sl, sl, #1
 800b91c:	e7ee      	b.n	800b8fc <_printf_float+0x27c>
 800b91e:	bf00      	nop
 800b920:	ffffffff 	.word	0xffffffff
 800b924:	7fefffff 	.word	0x7fefffff
 800b928:	0800fb91 	.word	0x0800fb91
 800b92c:	0800fb95 	.word	0x0800fb95
 800b930:	0800fb99 	.word	0x0800fb99
 800b934:	0800fb9d 	.word	0x0800fb9d
 800b938:	0800fba1 	.word	0x0800fba1
 800b93c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b93e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b942:	4553      	cmp	r3, sl
 800b944:	bfa8      	it	ge
 800b946:	4653      	movge	r3, sl
 800b948:	2b00      	cmp	r3, #0
 800b94a:	4699      	mov	r9, r3
 800b94c:	dc37      	bgt.n	800b9be <_printf_float+0x33e>
 800b94e:	2300      	movs	r3, #0
 800b950:	9307      	str	r3, [sp, #28]
 800b952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b956:	f104 021a 	add.w	r2, r4, #26
 800b95a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b95c:	9907      	ldr	r1, [sp, #28]
 800b95e:	9306      	str	r3, [sp, #24]
 800b960:	eba3 0309 	sub.w	r3, r3, r9
 800b964:	428b      	cmp	r3, r1
 800b966:	dc31      	bgt.n	800b9cc <_printf_float+0x34c>
 800b968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b96a:	459a      	cmp	sl, r3
 800b96c:	dc3b      	bgt.n	800b9e6 <_printf_float+0x366>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	07da      	lsls	r2, r3, #31
 800b972:	d438      	bmi.n	800b9e6 <_printf_float+0x366>
 800b974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b976:	ebaa 0903 	sub.w	r9, sl, r3
 800b97a:	9b06      	ldr	r3, [sp, #24]
 800b97c:	ebaa 0303 	sub.w	r3, sl, r3
 800b980:	4599      	cmp	r9, r3
 800b982:	bfa8      	it	ge
 800b984:	4699      	movge	r9, r3
 800b986:	f1b9 0f00 	cmp.w	r9, #0
 800b98a:	dc34      	bgt.n	800b9f6 <_printf_float+0x376>
 800b98c:	f04f 0800 	mov.w	r8, #0
 800b990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b994:	f104 0b1a 	add.w	fp, r4, #26
 800b998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b99a:	ebaa 0303 	sub.w	r3, sl, r3
 800b99e:	eba3 0309 	sub.w	r3, r3, r9
 800b9a2:	4543      	cmp	r3, r8
 800b9a4:	f77f af76 	ble.w	800b894 <_printf_float+0x214>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	465a      	mov	r2, fp
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	47b8      	blx	r7
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	f43f aeb0 	beq.w	800b718 <_printf_float+0x98>
 800b9b8:	f108 0801 	add.w	r8, r8, #1
 800b9bc:	e7ec      	b.n	800b998 <_printf_float+0x318>
 800b9be:	4642      	mov	r2, r8
 800b9c0:	4631      	mov	r1, r6
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	47b8      	blx	r7
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	d1c1      	bne.n	800b94e <_printf_float+0x2ce>
 800b9ca:	e6a5      	b.n	800b718 <_printf_float+0x98>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	9206      	str	r2, [sp, #24]
 800b9d4:	47b8      	blx	r7
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	f43f ae9e 	beq.w	800b718 <_printf_float+0x98>
 800b9dc:	9b07      	ldr	r3, [sp, #28]
 800b9de:	9a06      	ldr	r2, [sp, #24]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	9307      	str	r3, [sp, #28]
 800b9e4:	e7b9      	b.n	800b95a <_printf_float+0x2da>
 800b9e6:	9b05      	ldr	r3, [sp, #20]
 800b9e8:	465a      	mov	r2, fp
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	47b8      	blx	r7
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	d1bf      	bne.n	800b974 <_printf_float+0x2f4>
 800b9f4:	e690      	b.n	800b718 <_printf_float+0x98>
 800b9f6:	9a06      	ldr	r2, [sp, #24]
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	4442      	add	r2, r8
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4628      	mov	r0, r5
 800ba00:	47b8      	blx	r7
 800ba02:	3001      	adds	r0, #1
 800ba04:	d1c2      	bne.n	800b98c <_printf_float+0x30c>
 800ba06:	e687      	b.n	800b718 <_printf_float+0x98>
 800ba08:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ba0c:	f1b9 0f01 	cmp.w	r9, #1
 800ba10:	dc01      	bgt.n	800ba16 <_printf_float+0x396>
 800ba12:	07db      	lsls	r3, r3, #31
 800ba14:	d536      	bpl.n	800ba84 <_printf_float+0x404>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4642      	mov	r2, r8
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f ae79 	beq.w	800b718 <_printf_float+0x98>
 800ba26:	9b05      	ldr	r3, [sp, #20]
 800ba28:	465a      	mov	r2, fp
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b8      	blx	r7
 800ba30:	3001      	adds	r0, #1
 800ba32:	f43f ae71 	beq.w	800b718 <_printf_float+0x98>
 800ba36:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ba3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba42:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba46:	d018      	beq.n	800ba7a <_printf_float+0x3fa>
 800ba48:	464b      	mov	r3, r9
 800ba4a:	f108 0201 	add.w	r2, r8, #1
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	47b8      	blx	r7
 800ba54:	3001      	adds	r0, #1
 800ba56:	d10c      	bne.n	800ba72 <_printf_float+0x3f2>
 800ba58:	e65e      	b.n	800b718 <_printf_float+0x98>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	465a      	mov	r2, fp
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4628      	mov	r0, r5
 800ba62:	47b8      	blx	r7
 800ba64:	3001      	adds	r0, #1
 800ba66:	f43f ae57 	beq.w	800b718 <_printf_float+0x98>
 800ba6a:	f108 0801 	add.w	r8, r8, #1
 800ba6e:	45c8      	cmp	r8, r9
 800ba70:	dbf3      	blt.n	800ba5a <_printf_float+0x3da>
 800ba72:	4653      	mov	r3, sl
 800ba74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ba78:	e6dc      	b.n	800b834 <_printf_float+0x1b4>
 800ba7a:	f04f 0800 	mov.w	r8, #0
 800ba7e:	f104 0b1a 	add.w	fp, r4, #26
 800ba82:	e7f4      	b.n	800ba6e <_printf_float+0x3ee>
 800ba84:	2301      	movs	r3, #1
 800ba86:	4642      	mov	r2, r8
 800ba88:	e7e1      	b.n	800ba4e <_printf_float+0x3ce>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	464a      	mov	r2, r9
 800ba8e:	4631      	mov	r1, r6
 800ba90:	4628      	mov	r0, r5
 800ba92:	47b8      	blx	r7
 800ba94:	3001      	adds	r0, #1
 800ba96:	f43f ae3f 	beq.w	800b718 <_printf_float+0x98>
 800ba9a:	f108 0801 	add.w	r8, r8, #1
 800ba9e:	68e3      	ldr	r3, [r4, #12]
 800baa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800baa2:	1a5b      	subs	r3, r3, r1
 800baa4:	4543      	cmp	r3, r8
 800baa6:	dcf0      	bgt.n	800ba8a <_printf_float+0x40a>
 800baa8:	e6f8      	b.n	800b89c <_printf_float+0x21c>
 800baaa:	f04f 0800 	mov.w	r8, #0
 800baae:	f104 0919 	add.w	r9, r4, #25
 800bab2:	e7f4      	b.n	800ba9e <_printf_float+0x41e>

0800bab4 <_printf_common>:
 800bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	4616      	mov	r6, r2
 800baba:	4698      	mov	r8, r3
 800babc:	688a      	ldr	r2, [r1, #8]
 800babe:	690b      	ldr	r3, [r1, #16]
 800bac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bac4:	4293      	cmp	r3, r2
 800bac6:	bfb8      	it	lt
 800bac8:	4613      	movlt	r3, r2
 800baca:	6033      	str	r3, [r6, #0]
 800bacc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bad0:	4607      	mov	r7, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	b10a      	cbz	r2, 800bada <_printf_common+0x26>
 800bad6:	3301      	adds	r3, #1
 800bad8:	6033      	str	r3, [r6, #0]
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	0699      	lsls	r1, r3, #26
 800bade:	bf42      	ittt	mi
 800bae0:	6833      	ldrmi	r3, [r6, #0]
 800bae2:	3302      	addmi	r3, #2
 800bae4:	6033      	strmi	r3, [r6, #0]
 800bae6:	6825      	ldr	r5, [r4, #0]
 800bae8:	f015 0506 	ands.w	r5, r5, #6
 800baec:	d106      	bne.n	800bafc <_printf_common+0x48>
 800baee:	f104 0a19 	add.w	sl, r4, #25
 800baf2:	68e3      	ldr	r3, [r4, #12]
 800baf4:	6832      	ldr	r2, [r6, #0]
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	42ab      	cmp	r3, r5
 800bafa:	dc26      	bgt.n	800bb4a <_printf_common+0x96>
 800bafc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb00:	6822      	ldr	r2, [r4, #0]
 800bb02:	3b00      	subs	r3, #0
 800bb04:	bf18      	it	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	0692      	lsls	r2, r2, #26
 800bb0a:	d42b      	bmi.n	800bb64 <_printf_common+0xb0>
 800bb0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb10:	4641      	mov	r1, r8
 800bb12:	4638      	mov	r0, r7
 800bb14:	47c8      	blx	r9
 800bb16:	3001      	adds	r0, #1
 800bb18:	d01e      	beq.n	800bb58 <_printf_common+0xa4>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	6922      	ldr	r2, [r4, #16]
 800bb1e:	f003 0306 	and.w	r3, r3, #6
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	bf02      	ittt	eq
 800bb26:	68e5      	ldreq	r5, [r4, #12]
 800bb28:	6833      	ldreq	r3, [r6, #0]
 800bb2a:	1aed      	subeq	r5, r5, r3
 800bb2c:	68a3      	ldr	r3, [r4, #8]
 800bb2e:	bf0c      	ite	eq
 800bb30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb34:	2500      	movne	r5, #0
 800bb36:	4293      	cmp	r3, r2
 800bb38:	bfc4      	itt	gt
 800bb3a:	1a9b      	subgt	r3, r3, r2
 800bb3c:	18ed      	addgt	r5, r5, r3
 800bb3e:	2600      	movs	r6, #0
 800bb40:	341a      	adds	r4, #26
 800bb42:	42b5      	cmp	r5, r6
 800bb44:	d11a      	bne.n	800bb7c <_printf_common+0xc8>
 800bb46:	2000      	movs	r0, #0
 800bb48:	e008      	b.n	800bb5c <_printf_common+0xa8>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	4641      	mov	r1, r8
 800bb50:	4638      	mov	r0, r7
 800bb52:	47c8      	blx	r9
 800bb54:	3001      	adds	r0, #1
 800bb56:	d103      	bne.n	800bb60 <_printf_common+0xac>
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb60:	3501      	adds	r5, #1
 800bb62:	e7c6      	b.n	800baf2 <_printf_common+0x3e>
 800bb64:	18e1      	adds	r1, r4, r3
 800bb66:	1c5a      	adds	r2, r3, #1
 800bb68:	2030      	movs	r0, #48	@ 0x30
 800bb6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb6e:	4422      	add	r2, r4
 800bb70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb78:	3302      	adds	r3, #2
 800bb7a:	e7c7      	b.n	800bb0c <_printf_common+0x58>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4641      	mov	r1, r8
 800bb82:	4638      	mov	r0, r7
 800bb84:	47c8      	blx	r9
 800bb86:	3001      	adds	r0, #1
 800bb88:	d0e6      	beq.n	800bb58 <_printf_common+0xa4>
 800bb8a:	3601      	adds	r6, #1
 800bb8c:	e7d9      	b.n	800bb42 <_printf_common+0x8e>
	...

0800bb90 <_printf_i>:
 800bb90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb94:	7e0f      	ldrb	r7, [r1, #24]
 800bb96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb98:	2f78      	cmp	r7, #120	@ 0x78
 800bb9a:	4691      	mov	r9, r2
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	469a      	mov	sl, r3
 800bba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bba6:	d807      	bhi.n	800bbb8 <_printf_i+0x28>
 800bba8:	2f62      	cmp	r7, #98	@ 0x62
 800bbaa:	d80a      	bhi.n	800bbc2 <_printf_i+0x32>
 800bbac:	2f00      	cmp	r7, #0
 800bbae:	f000 80d2 	beq.w	800bd56 <_printf_i+0x1c6>
 800bbb2:	2f58      	cmp	r7, #88	@ 0x58
 800bbb4:	f000 80b9 	beq.w	800bd2a <_printf_i+0x19a>
 800bbb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbc0:	e03a      	b.n	800bc38 <_printf_i+0xa8>
 800bbc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbc6:	2b15      	cmp	r3, #21
 800bbc8:	d8f6      	bhi.n	800bbb8 <_printf_i+0x28>
 800bbca:	a101      	add	r1, pc, #4	@ (adr r1, 800bbd0 <_printf_i+0x40>)
 800bbcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbd0:	0800bc29 	.word	0x0800bc29
 800bbd4:	0800bc3d 	.word	0x0800bc3d
 800bbd8:	0800bbb9 	.word	0x0800bbb9
 800bbdc:	0800bbb9 	.word	0x0800bbb9
 800bbe0:	0800bbb9 	.word	0x0800bbb9
 800bbe4:	0800bbb9 	.word	0x0800bbb9
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bbb9 	.word	0x0800bbb9
 800bbf0:	0800bbb9 	.word	0x0800bbb9
 800bbf4:	0800bbb9 	.word	0x0800bbb9
 800bbf8:	0800bbb9 	.word	0x0800bbb9
 800bbfc:	0800bd3d 	.word	0x0800bd3d
 800bc00:	0800bc67 	.word	0x0800bc67
 800bc04:	0800bcf7 	.word	0x0800bcf7
 800bc08:	0800bbb9 	.word	0x0800bbb9
 800bc0c:	0800bbb9 	.word	0x0800bbb9
 800bc10:	0800bd5f 	.word	0x0800bd5f
 800bc14:	0800bbb9 	.word	0x0800bbb9
 800bc18:	0800bc67 	.word	0x0800bc67
 800bc1c:	0800bbb9 	.word	0x0800bbb9
 800bc20:	0800bbb9 	.word	0x0800bbb9
 800bc24:	0800bcff 	.word	0x0800bcff
 800bc28:	6833      	ldr	r3, [r6, #0]
 800bc2a:	1d1a      	adds	r2, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6032      	str	r2, [r6, #0]
 800bc30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e09d      	b.n	800bd78 <_printf_i+0x1e8>
 800bc3c:	6833      	ldr	r3, [r6, #0]
 800bc3e:	6820      	ldr	r0, [r4, #0]
 800bc40:	1d19      	adds	r1, r3, #4
 800bc42:	6031      	str	r1, [r6, #0]
 800bc44:	0606      	lsls	r6, r0, #24
 800bc46:	d501      	bpl.n	800bc4c <_printf_i+0xbc>
 800bc48:	681d      	ldr	r5, [r3, #0]
 800bc4a:	e003      	b.n	800bc54 <_printf_i+0xc4>
 800bc4c:	0645      	lsls	r5, r0, #25
 800bc4e:	d5fb      	bpl.n	800bc48 <_printf_i+0xb8>
 800bc50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	da03      	bge.n	800bc60 <_printf_i+0xd0>
 800bc58:	232d      	movs	r3, #45	@ 0x2d
 800bc5a:	426d      	negs	r5, r5
 800bc5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc60:	4859      	ldr	r0, [pc, #356]	@ (800bdc8 <_printf_i+0x238>)
 800bc62:	230a      	movs	r3, #10
 800bc64:	e011      	b.n	800bc8a <_printf_i+0xfa>
 800bc66:	6821      	ldr	r1, [r4, #0]
 800bc68:	6833      	ldr	r3, [r6, #0]
 800bc6a:	0608      	lsls	r0, r1, #24
 800bc6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc70:	d402      	bmi.n	800bc78 <_printf_i+0xe8>
 800bc72:	0649      	lsls	r1, r1, #25
 800bc74:	bf48      	it	mi
 800bc76:	b2ad      	uxthmi	r5, r5
 800bc78:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc7a:	4853      	ldr	r0, [pc, #332]	@ (800bdc8 <_printf_i+0x238>)
 800bc7c:	6033      	str	r3, [r6, #0]
 800bc7e:	bf14      	ite	ne
 800bc80:	230a      	movne	r3, #10
 800bc82:	2308      	moveq	r3, #8
 800bc84:	2100      	movs	r1, #0
 800bc86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc8a:	6866      	ldr	r6, [r4, #4]
 800bc8c:	60a6      	str	r6, [r4, #8]
 800bc8e:	2e00      	cmp	r6, #0
 800bc90:	bfa2      	ittt	ge
 800bc92:	6821      	ldrge	r1, [r4, #0]
 800bc94:	f021 0104 	bicge.w	r1, r1, #4
 800bc98:	6021      	strge	r1, [r4, #0]
 800bc9a:	b90d      	cbnz	r5, 800bca0 <_printf_i+0x110>
 800bc9c:	2e00      	cmp	r6, #0
 800bc9e:	d04b      	beq.n	800bd38 <_printf_i+0x1a8>
 800bca0:	4616      	mov	r6, r2
 800bca2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bca6:	fb03 5711 	mls	r7, r3, r1, r5
 800bcaa:	5dc7      	ldrb	r7, [r0, r7]
 800bcac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcb0:	462f      	mov	r7, r5
 800bcb2:	42bb      	cmp	r3, r7
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	d9f4      	bls.n	800bca2 <_printf_i+0x112>
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d10b      	bne.n	800bcd4 <_printf_i+0x144>
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	07df      	lsls	r7, r3, #31
 800bcc0:	d508      	bpl.n	800bcd4 <_printf_i+0x144>
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	4299      	cmp	r1, r3
 800bcc8:	bfde      	ittt	le
 800bcca:	2330      	movle	r3, #48	@ 0x30
 800bccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bcd4:	1b92      	subs	r2, r2, r6
 800bcd6:	6122      	str	r2, [r4, #16]
 800bcd8:	f8cd a000 	str.w	sl, [sp]
 800bcdc:	464b      	mov	r3, r9
 800bcde:	aa03      	add	r2, sp, #12
 800bce0:	4621      	mov	r1, r4
 800bce2:	4640      	mov	r0, r8
 800bce4:	f7ff fee6 	bl	800bab4 <_printf_common>
 800bce8:	3001      	adds	r0, #1
 800bcea:	d14a      	bne.n	800bd82 <_printf_i+0x1f2>
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	b004      	add	sp, #16
 800bcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	f043 0320 	orr.w	r3, r3, #32
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	4833      	ldr	r0, [pc, #204]	@ (800bdcc <_printf_i+0x23c>)
 800bd00:	2778      	movs	r7, #120	@ 0x78
 800bd02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	6831      	ldr	r1, [r6, #0]
 800bd0a:	061f      	lsls	r7, r3, #24
 800bd0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd10:	d402      	bmi.n	800bd18 <_printf_i+0x188>
 800bd12:	065f      	lsls	r7, r3, #25
 800bd14:	bf48      	it	mi
 800bd16:	b2ad      	uxthmi	r5, r5
 800bd18:	6031      	str	r1, [r6, #0]
 800bd1a:	07d9      	lsls	r1, r3, #31
 800bd1c:	bf44      	itt	mi
 800bd1e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd22:	6023      	strmi	r3, [r4, #0]
 800bd24:	b11d      	cbz	r5, 800bd2e <_printf_i+0x19e>
 800bd26:	2310      	movs	r3, #16
 800bd28:	e7ac      	b.n	800bc84 <_printf_i+0xf4>
 800bd2a:	4827      	ldr	r0, [pc, #156]	@ (800bdc8 <_printf_i+0x238>)
 800bd2c:	e7e9      	b.n	800bd02 <_printf_i+0x172>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	f023 0320 	bic.w	r3, r3, #32
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	e7f6      	b.n	800bd26 <_printf_i+0x196>
 800bd38:	4616      	mov	r6, r2
 800bd3a:	e7bd      	b.n	800bcb8 <_printf_i+0x128>
 800bd3c:	6833      	ldr	r3, [r6, #0]
 800bd3e:	6825      	ldr	r5, [r4, #0]
 800bd40:	6961      	ldr	r1, [r4, #20]
 800bd42:	1d18      	adds	r0, r3, #4
 800bd44:	6030      	str	r0, [r6, #0]
 800bd46:	062e      	lsls	r6, r5, #24
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	d501      	bpl.n	800bd50 <_printf_i+0x1c0>
 800bd4c:	6019      	str	r1, [r3, #0]
 800bd4e:	e002      	b.n	800bd56 <_printf_i+0x1c6>
 800bd50:	0668      	lsls	r0, r5, #25
 800bd52:	d5fb      	bpl.n	800bd4c <_printf_i+0x1bc>
 800bd54:	8019      	strh	r1, [r3, #0]
 800bd56:	2300      	movs	r3, #0
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	4616      	mov	r6, r2
 800bd5c:	e7bc      	b.n	800bcd8 <_printf_i+0x148>
 800bd5e:	6833      	ldr	r3, [r6, #0]
 800bd60:	1d1a      	adds	r2, r3, #4
 800bd62:	6032      	str	r2, [r6, #0]
 800bd64:	681e      	ldr	r6, [r3, #0]
 800bd66:	6862      	ldr	r2, [r4, #4]
 800bd68:	2100      	movs	r1, #0
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7f4 fab8 	bl	80002e0 <memchr>
 800bd70:	b108      	cbz	r0, 800bd76 <_printf_i+0x1e6>
 800bd72:	1b80      	subs	r0, r0, r6
 800bd74:	6060      	str	r0, [r4, #4]
 800bd76:	6863      	ldr	r3, [r4, #4]
 800bd78:	6123      	str	r3, [r4, #16]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd80:	e7aa      	b.n	800bcd8 <_printf_i+0x148>
 800bd82:	6923      	ldr	r3, [r4, #16]
 800bd84:	4632      	mov	r2, r6
 800bd86:	4649      	mov	r1, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	47d0      	blx	sl
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d0ad      	beq.n	800bcec <_printf_i+0x15c>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	079b      	lsls	r3, r3, #30
 800bd94:	d413      	bmi.n	800bdbe <_printf_i+0x22e>
 800bd96:	68e0      	ldr	r0, [r4, #12]
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	4298      	cmp	r0, r3
 800bd9c:	bfb8      	it	lt
 800bd9e:	4618      	movlt	r0, r3
 800bda0:	e7a6      	b.n	800bcf0 <_printf_i+0x160>
 800bda2:	2301      	movs	r3, #1
 800bda4:	4632      	mov	r2, r6
 800bda6:	4649      	mov	r1, r9
 800bda8:	4640      	mov	r0, r8
 800bdaa:	47d0      	blx	sl
 800bdac:	3001      	adds	r0, #1
 800bdae:	d09d      	beq.n	800bcec <_printf_i+0x15c>
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	68e3      	ldr	r3, [r4, #12]
 800bdb4:	9903      	ldr	r1, [sp, #12]
 800bdb6:	1a5b      	subs	r3, r3, r1
 800bdb8:	42ab      	cmp	r3, r5
 800bdba:	dcf2      	bgt.n	800bda2 <_printf_i+0x212>
 800bdbc:	e7eb      	b.n	800bd96 <_printf_i+0x206>
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	f104 0619 	add.w	r6, r4, #25
 800bdc4:	e7f5      	b.n	800bdb2 <_printf_i+0x222>
 800bdc6:	bf00      	nop
 800bdc8:	0800fba3 	.word	0x0800fba3
 800bdcc:	0800fbb4 	.word	0x0800fbb4

0800bdd0 <_scanf_float>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	b087      	sub	sp, #28
 800bdd6:	4617      	mov	r7, r2
 800bdd8:	9303      	str	r3, [sp, #12]
 800bdda:	688b      	ldr	r3, [r1, #8]
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bde2:	bf81      	itttt	hi
 800bde4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bde8:	eb03 0b05 	addhi.w	fp, r3, r5
 800bdec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bdf0:	608b      	strhi	r3, [r1, #8]
 800bdf2:	680b      	ldr	r3, [r1, #0]
 800bdf4:	460a      	mov	r2, r1
 800bdf6:	f04f 0500 	mov.w	r5, #0
 800bdfa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bdfe:	f842 3b1c 	str.w	r3, [r2], #28
 800be02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800be06:	4680      	mov	r8, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	bf98      	it	ls
 800be0c:	f04f 0b00 	movls.w	fp, #0
 800be10:	9201      	str	r2, [sp, #4]
 800be12:	4616      	mov	r6, r2
 800be14:	46aa      	mov	sl, r5
 800be16:	46a9      	mov	r9, r5
 800be18:	9502      	str	r5, [sp, #8]
 800be1a:	68a2      	ldr	r2, [r4, #8]
 800be1c:	b152      	cbz	r2, 800be34 <_scanf_float+0x64>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b4e      	cmp	r3, #78	@ 0x4e
 800be24:	d864      	bhi.n	800bef0 <_scanf_float+0x120>
 800be26:	2b40      	cmp	r3, #64	@ 0x40
 800be28:	d83c      	bhi.n	800bea4 <_scanf_float+0xd4>
 800be2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800be2e:	b2c8      	uxtb	r0, r1
 800be30:	280e      	cmp	r0, #14
 800be32:	d93a      	bls.n	800beaa <_scanf_float+0xda>
 800be34:	f1b9 0f00 	cmp.w	r9, #0
 800be38:	d003      	beq.n	800be42 <_scanf_float+0x72>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be46:	f1ba 0f01 	cmp.w	sl, #1
 800be4a:	f200 8117 	bhi.w	800c07c <_scanf_float+0x2ac>
 800be4e:	9b01      	ldr	r3, [sp, #4]
 800be50:	429e      	cmp	r6, r3
 800be52:	f200 8108 	bhi.w	800c066 <_scanf_float+0x296>
 800be56:	2001      	movs	r0, #1
 800be58:	b007      	add	sp, #28
 800be5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800be62:	2a0d      	cmp	r2, #13
 800be64:	d8e6      	bhi.n	800be34 <_scanf_float+0x64>
 800be66:	a101      	add	r1, pc, #4	@ (adr r1, 800be6c <_scanf_float+0x9c>)
 800be68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be6c:	0800bfb3 	.word	0x0800bfb3
 800be70:	0800be35 	.word	0x0800be35
 800be74:	0800be35 	.word	0x0800be35
 800be78:	0800be35 	.word	0x0800be35
 800be7c:	0800c013 	.word	0x0800c013
 800be80:	0800bfeb 	.word	0x0800bfeb
 800be84:	0800be35 	.word	0x0800be35
 800be88:	0800be35 	.word	0x0800be35
 800be8c:	0800bfc1 	.word	0x0800bfc1
 800be90:	0800be35 	.word	0x0800be35
 800be94:	0800be35 	.word	0x0800be35
 800be98:	0800be35 	.word	0x0800be35
 800be9c:	0800be35 	.word	0x0800be35
 800bea0:	0800bf79 	.word	0x0800bf79
 800bea4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bea8:	e7db      	b.n	800be62 <_scanf_float+0x92>
 800beaa:	290e      	cmp	r1, #14
 800beac:	d8c2      	bhi.n	800be34 <_scanf_float+0x64>
 800beae:	a001      	add	r0, pc, #4	@ (adr r0, 800beb4 <_scanf_float+0xe4>)
 800beb0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800beb4:	0800bf69 	.word	0x0800bf69
 800beb8:	0800be35 	.word	0x0800be35
 800bebc:	0800bf69 	.word	0x0800bf69
 800bec0:	0800bfff 	.word	0x0800bfff
 800bec4:	0800be35 	.word	0x0800be35
 800bec8:	0800bf11 	.word	0x0800bf11
 800becc:	0800bf4f 	.word	0x0800bf4f
 800bed0:	0800bf4f 	.word	0x0800bf4f
 800bed4:	0800bf4f 	.word	0x0800bf4f
 800bed8:	0800bf4f 	.word	0x0800bf4f
 800bedc:	0800bf4f 	.word	0x0800bf4f
 800bee0:	0800bf4f 	.word	0x0800bf4f
 800bee4:	0800bf4f 	.word	0x0800bf4f
 800bee8:	0800bf4f 	.word	0x0800bf4f
 800beec:	0800bf4f 	.word	0x0800bf4f
 800bef0:	2b6e      	cmp	r3, #110	@ 0x6e
 800bef2:	d809      	bhi.n	800bf08 <_scanf_float+0x138>
 800bef4:	2b60      	cmp	r3, #96	@ 0x60
 800bef6:	d8b2      	bhi.n	800be5e <_scanf_float+0x8e>
 800bef8:	2b54      	cmp	r3, #84	@ 0x54
 800befa:	d07b      	beq.n	800bff4 <_scanf_float+0x224>
 800befc:	2b59      	cmp	r3, #89	@ 0x59
 800befe:	d199      	bne.n	800be34 <_scanf_float+0x64>
 800bf00:	2d07      	cmp	r5, #7
 800bf02:	d197      	bne.n	800be34 <_scanf_float+0x64>
 800bf04:	2508      	movs	r5, #8
 800bf06:	e02c      	b.n	800bf62 <_scanf_float+0x192>
 800bf08:	2b74      	cmp	r3, #116	@ 0x74
 800bf0a:	d073      	beq.n	800bff4 <_scanf_float+0x224>
 800bf0c:	2b79      	cmp	r3, #121	@ 0x79
 800bf0e:	e7f6      	b.n	800befe <_scanf_float+0x12e>
 800bf10:	6821      	ldr	r1, [r4, #0]
 800bf12:	05c8      	lsls	r0, r1, #23
 800bf14:	d51b      	bpl.n	800bf4e <_scanf_float+0x17e>
 800bf16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bf1a:	6021      	str	r1, [r4, #0]
 800bf1c:	f109 0901 	add.w	r9, r9, #1
 800bf20:	f1bb 0f00 	cmp.w	fp, #0
 800bf24:	d003      	beq.n	800bf2e <_scanf_float+0x15e>
 800bf26:	3201      	adds	r2, #1
 800bf28:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf2c:	60a2      	str	r2, [r4, #8]
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	60a3      	str	r3, [r4, #8]
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	3301      	adds	r3, #1
 800bf38:	6123      	str	r3, [r4, #16]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	607b      	str	r3, [r7, #4]
 800bf42:	f340 8087 	ble.w	800c054 <_scanf_float+0x284>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	e765      	b.n	800be1a <_scanf_float+0x4a>
 800bf4e:	eb1a 0105 	adds.w	r1, sl, r5
 800bf52:	f47f af6f 	bne.w	800be34 <_scanf_float+0x64>
 800bf56:	6822      	ldr	r2, [r4, #0]
 800bf58:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bf5c:	6022      	str	r2, [r4, #0]
 800bf5e:	460d      	mov	r5, r1
 800bf60:	468a      	mov	sl, r1
 800bf62:	f806 3b01 	strb.w	r3, [r6], #1
 800bf66:	e7e2      	b.n	800bf2e <_scanf_float+0x15e>
 800bf68:	6822      	ldr	r2, [r4, #0]
 800bf6a:	0610      	lsls	r0, r2, #24
 800bf6c:	f57f af62 	bpl.w	800be34 <_scanf_float+0x64>
 800bf70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf74:	6022      	str	r2, [r4, #0]
 800bf76:	e7f4      	b.n	800bf62 <_scanf_float+0x192>
 800bf78:	f1ba 0f00 	cmp.w	sl, #0
 800bf7c:	d10e      	bne.n	800bf9c <_scanf_float+0x1cc>
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	d10e      	bne.n	800bfa2 <_scanf_float+0x1d2>
 800bf84:	6822      	ldr	r2, [r4, #0]
 800bf86:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bf8a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bf8e:	d108      	bne.n	800bfa2 <_scanf_float+0x1d2>
 800bf90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bf94:	6022      	str	r2, [r4, #0]
 800bf96:	f04f 0a01 	mov.w	sl, #1
 800bf9a:	e7e2      	b.n	800bf62 <_scanf_float+0x192>
 800bf9c:	f1ba 0f02 	cmp.w	sl, #2
 800bfa0:	d055      	beq.n	800c04e <_scanf_float+0x27e>
 800bfa2:	2d01      	cmp	r5, #1
 800bfa4:	d002      	beq.n	800bfac <_scanf_float+0x1dc>
 800bfa6:	2d04      	cmp	r5, #4
 800bfa8:	f47f af44 	bne.w	800be34 <_scanf_float+0x64>
 800bfac:	3501      	adds	r5, #1
 800bfae:	b2ed      	uxtb	r5, r5
 800bfb0:	e7d7      	b.n	800bf62 <_scanf_float+0x192>
 800bfb2:	f1ba 0f01 	cmp.w	sl, #1
 800bfb6:	f47f af3d 	bne.w	800be34 <_scanf_float+0x64>
 800bfba:	f04f 0a02 	mov.w	sl, #2
 800bfbe:	e7d0      	b.n	800bf62 <_scanf_float+0x192>
 800bfc0:	b97d      	cbnz	r5, 800bfe2 <_scanf_float+0x212>
 800bfc2:	f1b9 0f00 	cmp.w	r9, #0
 800bfc6:	f47f af38 	bne.w	800be3a <_scanf_float+0x6a>
 800bfca:	6822      	ldr	r2, [r4, #0]
 800bfcc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bfd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bfd4:	f040 8101 	bne.w	800c1da <_scanf_float+0x40a>
 800bfd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bfdc:	6022      	str	r2, [r4, #0]
 800bfde:	2501      	movs	r5, #1
 800bfe0:	e7bf      	b.n	800bf62 <_scanf_float+0x192>
 800bfe2:	2d03      	cmp	r5, #3
 800bfe4:	d0e2      	beq.n	800bfac <_scanf_float+0x1dc>
 800bfe6:	2d05      	cmp	r5, #5
 800bfe8:	e7de      	b.n	800bfa8 <_scanf_float+0x1d8>
 800bfea:	2d02      	cmp	r5, #2
 800bfec:	f47f af22 	bne.w	800be34 <_scanf_float+0x64>
 800bff0:	2503      	movs	r5, #3
 800bff2:	e7b6      	b.n	800bf62 <_scanf_float+0x192>
 800bff4:	2d06      	cmp	r5, #6
 800bff6:	f47f af1d 	bne.w	800be34 <_scanf_float+0x64>
 800bffa:	2507      	movs	r5, #7
 800bffc:	e7b1      	b.n	800bf62 <_scanf_float+0x192>
 800bffe:	6822      	ldr	r2, [r4, #0]
 800c000:	0591      	lsls	r1, r2, #22
 800c002:	f57f af17 	bpl.w	800be34 <_scanf_float+0x64>
 800c006:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c00a:	6022      	str	r2, [r4, #0]
 800c00c:	f8cd 9008 	str.w	r9, [sp, #8]
 800c010:	e7a7      	b.n	800bf62 <_scanf_float+0x192>
 800c012:	6822      	ldr	r2, [r4, #0]
 800c014:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c018:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c01c:	d006      	beq.n	800c02c <_scanf_float+0x25c>
 800c01e:	0550      	lsls	r0, r2, #21
 800c020:	f57f af08 	bpl.w	800be34 <_scanf_float+0x64>
 800c024:	f1b9 0f00 	cmp.w	r9, #0
 800c028:	f000 80d7 	beq.w	800c1da <_scanf_float+0x40a>
 800c02c:	0591      	lsls	r1, r2, #22
 800c02e:	bf58      	it	pl
 800c030:	9902      	ldrpl	r1, [sp, #8]
 800c032:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c036:	bf58      	it	pl
 800c038:	eba9 0101 	subpl.w	r1, r9, r1
 800c03c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c040:	bf58      	it	pl
 800c042:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c046:	6022      	str	r2, [r4, #0]
 800c048:	f04f 0900 	mov.w	r9, #0
 800c04c:	e789      	b.n	800bf62 <_scanf_float+0x192>
 800c04e:	f04f 0a03 	mov.w	sl, #3
 800c052:	e786      	b.n	800bf62 <_scanf_float+0x192>
 800c054:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c058:	4639      	mov	r1, r7
 800c05a:	4640      	mov	r0, r8
 800c05c:	4798      	blx	r3
 800c05e:	2800      	cmp	r0, #0
 800c060:	f43f aedb 	beq.w	800be1a <_scanf_float+0x4a>
 800c064:	e6e6      	b.n	800be34 <_scanf_float+0x64>
 800c066:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c06a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c06e:	463a      	mov	r2, r7
 800c070:	4640      	mov	r0, r8
 800c072:	4798      	blx	r3
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	3b01      	subs	r3, #1
 800c078:	6123      	str	r3, [r4, #16]
 800c07a:	e6e8      	b.n	800be4e <_scanf_float+0x7e>
 800c07c:	1e6b      	subs	r3, r5, #1
 800c07e:	2b06      	cmp	r3, #6
 800c080:	d824      	bhi.n	800c0cc <_scanf_float+0x2fc>
 800c082:	2d02      	cmp	r5, #2
 800c084:	d836      	bhi.n	800c0f4 <_scanf_float+0x324>
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	429e      	cmp	r6, r3
 800c08a:	f67f aee4 	bls.w	800be56 <_scanf_float+0x86>
 800c08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c096:	463a      	mov	r2, r7
 800c098:	4640      	mov	r0, r8
 800c09a:	4798      	blx	r3
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	6123      	str	r3, [r4, #16]
 800c0a2:	e7f0      	b.n	800c086 <_scanf_float+0x2b6>
 800c0a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c0ac:	463a      	mov	r2, r7
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	4798      	blx	r3
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0bc:	fa5f fa8a 	uxtb.w	sl, sl
 800c0c0:	f1ba 0f02 	cmp.w	sl, #2
 800c0c4:	d1ee      	bne.n	800c0a4 <_scanf_float+0x2d4>
 800c0c6:	3d03      	subs	r5, #3
 800c0c8:	b2ed      	uxtb	r5, r5
 800c0ca:	1b76      	subs	r6, r6, r5
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	05da      	lsls	r2, r3, #23
 800c0d0:	d530      	bpl.n	800c134 <_scanf_float+0x364>
 800c0d2:	055b      	lsls	r3, r3, #21
 800c0d4:	d511      	bpl.n	800c0fa <_scanf_float+0x32a>
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	429e      	cmp	r6, r3
 800c0da:	f67f aebc 	bls.w	800be56 <_scanf_float+0x86>
 800c0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0e6:	463a      	mov	r2, r7
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	4798      	blx	r3
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	e7f0      	b.n	800c0d6 <_scanf_float+0x306>
 800c0f4:	46aa      	mov	sl, r5
 800c0f6:	46b3      	mov	fp, r6
 800c0f8:	e7de      	b.n	800c0b8 <_scanf_float+0x2e8>
 800c0fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	2965      	cmp	r1, #101	@ 0x65
 800c102:	f103 33ff 	add.w	r3, r3, #4294967295
 800c106:	f106 35ff 	add.w	r5, r6, #4294967295
 800c10a:	6123      	str	r3, [r4, #16]
 800c10c:	d00c      	beq.n	800c128 <_scanf_float+0x358>
 800c10e:	2945      	cmp	r1, #69	@ 0x45
 800c110:	d00a      	beq.n	800c128 <_scanf_float+0x358>
 800c112:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c116:	463a      	mov	r2, r7
 800c118:	4640      	mov	r0, r8
 800c11a:	4798      	blx	r3
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c122:	3b01      	subs	r3, #1
 800c124:	1eb5      	subs	r5, r6, #2
 800c126:	6123      	str	r3, [r4, #16]
 800c128:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c12c:	463a      	mov	r2, r7
 800c12e:	4640      	mov	r0, r8
 800c130:	4798      	blx	r3
 800c132:	462e      	mov	r6, r5
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	f012 0210 	ands.w	r2, r2, #16
 800c13a:	d001      	beq.n	800c140 <_scanf_float+0x370>
 800c13c:	2000      	movs	r0, #0
 800c13e:	e68b      	b.n	800be58 <_scanf_float+0x88>
 800c140:	7032      	strb	r2, [r6, #0]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c14c:	d11a      	bne.n	800c184 <_scanf_float+0x3b4>
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	454b      	cmp	r3, r9
 800c152:	eba3 0209 	sub.w	r2, r3, r9
 800c156:	d121      	bne.n	800c19c <_scanf_float+0x3cc>
 800c158:	9901      	ldr	r1, [sp, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	4640      	mov	r0, r8
 800c15e:	f002 fb75 	bl	800e84c <_strtod_r>
 800c162:	9b03      	ldr	r3, [sp, #12]
 800c164:	6821      	ldr	r1, [r4, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f011 0f02 	tst.w	r1, #2
 800c16c:	f103 0204 	add.w	r2, r3, #4
 800c170:	d01f      	beq.n	800c1b2 <_scanf_float+0x3e2>
 800c172:	9903      	ldr	r1, [sp, #12]
 800c174:	600a      	str	r2, [r1, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	ed83 0b00 	vstr	d0, [r3]
 800c17c:	68e3      	ldr	r3, [r4, #12]
 800c17e:	3301      	adds	r3, #1
 800c180:	60e3      	str	r3, [r4, #12]
 800c182:	e7db      	b.n	800c13c <_scanf_float+0x36c>
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0e6      	beq.n	800c158 <_scanf_float+0x388>
 800c18a:	9905      	ldr	r1, [sp, #20]
 800c18c:	230a      	movs	r3, #10
 800c18e:	3101      	adds	r1, #1
 800c190:	4640      	mov	r0, r8
 800c192:	f7ff f9d9 	bl	800b548 <_strtol_r>
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	9e05      	ldr	r6, [sp, #20]
 800c19a:	1ac2      	subs	r2, r0, r3
 800c19c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c1a0:	429e      	cmp	r6, r3
 800c1a2:	bf28      	it	cs
 800c1a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c1a8:	490d      	ldr	r1, [pc, #52]	@ (800c1e0 <_scanf_float+0x410>)
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f000 f912 	bl	800c3d4 <siprintf>
 800c1b0:	e7d2      	b.n	800c158 <_scanf_float+0x388>
 800c1b2:	f011 0f04 	tst.w	r1, #4
 800c1b6:	9903      	ldr	r1, [sp, #12]
 800c1b8:	600a      	str	r2, [r1, #0]
 800c1ba:	d1dc      	bne.n	800c176 <_scanf_float+0x3a6>
 800c1bc:	eeb4 0b40 	vcmp.f64	d0, d0
 800c1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c4:	681d      	ldr	r5, [r3, #0]
 800c1c6:	d705      	bvc.n	800c1d4 <_scanf_float+0x404>
 800c1c8:	4806      	ldr	r0, [pc, #24]	@ (800c1e4 <_scanf_float+0x414>)
 800c1ca:	f000 f9f9 	bl	800c5c0 <nanf>
 800c1ce:	ed85 0a00 	vstr	s0, [r5]
 800c1d2:	e7d3      	b.n	800c17c <_scanf_float+0x3ac>
 800c1d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c1d8:	e7f9      	b.n	800c1ce <_scanf_float+0x3fe>
 800c1da:	f04f 0900 	mov.w	r9, #0
 800c1de:	e630      	b.n	800be42 <_scanf_float+0x72>
 800c1e0:	0800fbc5 	.word	0x0800fbc5
 800c1e4:	0800fe5c 	.word	0x0800fe5c

0800c1e8 <std>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1f6:	6083      	str	r3, [r0, #8]
 800c1f8:	8181      	strh	r1, [r0, #12]
 800c1fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c1fc:	81c2      	strh	r2, [r0, #14]
 800c1fe:	6183      	str	r3, [r0, #24]
 800c200:	4619      	mov	r1, r3
 800c202:	2208      	movs	r2, #8
 800c204:	305c      	adds	r0, #92	@ 0x5c
 800c206:	f000 f948 	bl	800c49a <memset>
 800c20a:	4b0d      	ldr	r3, [pc, #52]	@ (800c240 <std+0x58>)
 800c20c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c20e:	4b0d      	ldr	r3, [pc, #52]	@ (800c244 <std+0x5c>)
 800c210:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c212:	4b0d      	ldr	r3, [pc, #52]	@ (800c248 <std+0x60>)
 800c214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c216:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <std+0x64>)
 800c218:	6323      	str	r3, [r4, #48]	@ 0x30
 800c21a:	4b0d      	ldr	r3, [pc, #52]	@ (800c250 <std+0x68>)
 800c21c:	6224      	str	r4, [r4, #32]
 800c21e:	429c      	cmp	r4, r3
 800c220:	d006      	beq.n	800c230 <std+0x48>
 800c222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c226:	4294      	cmp	r4, r2
 800c228:	d002      	beq.n	800c230 <std+0x48>
 800c22a:	33d0      	adds	r3, #208	@ 0xd0
 800c22c:	429c      	cmp	r4, r3
 800c22e:	d105      	bne.n	800c23c <std+0x54>
 800c230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c238:	f000 b9be 	b.w	800c5b8 <__retarget_lock_init_recursive>
 800c23c:	bd10      	pop	{r4, pc}
 800c23e:	bf00      	nop
 800c240:	0800c415 	.word	0x0800c415
 800c244:	0800c437 	.word	0x0800c437
 800c248:	0800c46f 	.word	0x0800c46f
 800c24c:	0800c493 	.word	0x0800c493
 800c250:	240003c8 	.word	0x240003c8

0800c254 <stdio_exit_handler>:
 800c254:	4a02      	ldr	r2, [pc, #8]	@ (800c260 <stdio_exit_handler+0xc>)
 800c256:	4903      	ldr	r1, [pc, #12]	@ (800c264 <stdio_exit_handler+0x10>)
 800c258:	4803      	ldr	r0, [pc, #12]	@ (800c268 <stdio_exit_handler+0x14>)
 800c25a:	f000 b869 	b.w	800c330 <_fwalk_sglue>
 800c25e:	bf00      	nop
 800c260:	24000020 	.word	0x24000020
 800c264:	0800ec11 	.word	0x0800ec11
 800c268:	24000030 	.word	0x24000030

0800c26c <cleanup_stdio>:
 800c26c:	6841      	ldr	r1, [r0, #4]
 800c26e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a0 <cleanup_stdio+0x34>)
 800c270:	4299      	cmp	r1, r3
 800c272:	b510      	push	{r4, lr}
 800c274:	4604      	mov	r4, r0
 800c276:	d001      	beq.n	800c27c <cleanup_stdio+0x10>
 800c278:	f002 fcca 	bl	800ec10 <_fflush_r>
 800c27c:	68a1      	ldr	r1, [r4, #8]
 800c27e:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <cleanup_stdio+0x38>)
 800c280:	4299      	cmp	r1, r3
 800c282:	d002      	beq.n	800c28a <cleanup_stdio+0x1e>
 800c284:	4620      	mov	r0, r4
 800c286:	f002 fcc3 	bl	800ec10 <_fflush_r>
 800c28a:	68e1      	ldr	r1, [r4, #12]
 800c28c:	4b06      	ldr	r3, [pc, #24]	@ (800c2a8 <cleanup_stdio+0x3c>)
 800c28e:	4299      	cmp	r1, r3
 800c290:	d004      	beq.n	800c29c <cleanup_stdio+0x30>
 800c292:	4620      	mov	r0, r4
 800c294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c298:	f002 bcba 	b.w	800ec10 <_fflush_r>
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	bf00      	nop
 800c2a0:	240003c8 	.word	0x240003c8
 800c2a4:	24000430 	.word	0x24000430
 800c2a8:	24000498 	.word	0x24000498

0800c2ac <global_stdio_init.part.0>:
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c2dc <global_stdio_init.part.0+0x30>)
 800c2b0:	4c0b      	ldr	r4, [pc, #44]	@ (800c2e0 <global_stdio_init.part.0+0x34>)
 800c2b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c2e4 <global_stdio_init.part.0+0x38>)
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2104      	movs	r1, #4
 800c2bc:	f7ff ff94 	bl	800c1e8 <std>
 800c2c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	2109      	movs	r1, #9
 800c2c8:	f7ff ff8e 	bl	800c1e8 <std>
 800c2cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d6:	2112      	movs	r1, #18
 800c2d8:	f7ff bf86 	b.w	800c1e8 <std>
 800c2dc:	24000500 	.word	0x24000500
 800c2e0:	240003c8 	.word	0x240003c8
 800c2e4:	0800c255 	.word	0x0800c255

0800c2e8 <__sfp_lock_acquire>:
 800c2e8:	4801      	ldr	r0, [pc, #4]	@ (800c2f0 <__sfp_lock_acquire+0x8>)
 800c2ea:	f000 b966 	b.w	800c5ba <__retarget_lock_acquire_recursive>
 800c2ee:	bf00      	nop
 800c2f0:	24000509 	.word	0x24000509

0800c2f4 <__sfp_lock_release>:
 800c2f4:	4801      	ldr	r0, [pc, #4]	@ (800c2fc <__sfp_lock_release+0x8>)
 800c2f6:	f000 b961 	b.w	800c5bc <__retarget_lock_release_recursive>
 800c2fa:	bf00      	nop
 800c2fc:	24000509 	.word	0x24000509

0800c300 <__sinit>:
 800c300:	b510      	push	{r4, lr}
 800c302:	4604      	mov	r4, r0
 800c304:	f7ff fff0 	bl	800c2e8 <__sfp_lock_acquire>
 800c308:	6a23      	ldr	r3, [r4, #32]
 800c30a:	b11b      	cbz	r3, 800c314 <__sinit+0x14>
 800c30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c310:	f7ff bff0 	b.w	800c2f4 <__sfp_lock_release>
 800c314:	4b04      	ldr	r3, [pc, #16]	@ (800c328 <__sinit+0x28>)
 800c316:	6223      	str	r3, [r4, #32]
 800c318:	4b04      	ldr	r3, [pc, #16]	@ (800c32c <__sinit+0x2c>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f5      	bne.n	800c30c <__sinit+0xc>
 800c320:	f7ff ffc4 	bl	800c2ac <global_stdio_init.part.0>
 800c324:	e7f2      	b.n	800c30c <__sinit+0xc>
 800c326:	bf00      	nop
 800c328:	0800c26d 	.word	0x0800c26d
 800c32c:	24000500 	.word	0x24000500

0800c330 <_fwalk_sglue>:
 800c330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c334:	4607      	mov	r7, r0
 800c336:	4688      	mov	r8, r1
 800c338:	4614      	mov	r4, r2
 800c33a:	2600      	movs	r6, #0
 800c33c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c340:	f1b9 0901 	subs.w	r9, r9, #1
 800c344:	d505      	bpl.n	800c352 <_fwalk_sglue+0x22>
 800c346:	6824      	ldr	r4, [r4, #0]
 800c348:	2c00      	cmp	r4, #0
 800c34a:	d1f7      	bne.n	800c33c <_fwalk_sglue+0xc>
 800c34c:	4630      	mov	r0, r6
 800c34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d907      	bls.n	800c368 <_fwalk_sglue+0x38>
 800c358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c35c:	3301      	adds	r3, #1
 800c35e:	d003      	beq.n	800c368 <_fwalk_sglue+0x38>
 800c360:	4629      	mov	r1, r5
 800c362:	4638      	mov	r0, r7
 800c364:	47c0      	blx	r8
 800c366:	4306      	orrs	r6, r0
 800c368:	3568      	adds	r5, #104	@ 0x68
 800c36a:	e7e9      	b.n	800c340 <_fwalk_sglue+0x10>

0800c36c <sniprintf>:
 800c36c:	b40c      	push	{r2, r3}
 800c36e:	b530      	push	{r4, r5, lr}
 800c370:	4b17      	ldr	r3, [pc, #92]	@ (800c3d0 <sniprintf+0x64>)
 800c372:	1e0c      	subs	r4, r1, #0
 800c374:	681d      	ldr	r5, [r3, #0]
 800c376:	b09d      	sub	sp, #116	@ 0x74
 800c378:	da08      	bge.n	800c38c <sniprintf+0x20>
 800c37a:	238b      	movs	r3, #139	@ 0x8b
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	f04f 30ff 	mov.w	r0, #4294967295
 800c382:	b01d      	add	sp, #116	@ 0x74
 800c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c388:	b002      	add	sp, #8
 800c38a:	4770      	bx	lr
 800c38c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c390:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c394:	bf14      	ite	ne
 800c396:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c39a:	4623      	moveq	r3, r4
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	9307      	str	r3, [sp, #28]
 800c3a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3a4:	9002      	str	r0, [sp, #8]
 800c3a6:	9006      	str	r0, [sp, #24]
 800c3a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c3ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c3ae:	ab21      	add	r3, sp, #132	@ 0x84
 800c3b0:	a902      	add	r1, sp, #8
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	f002 faab 	bl	800e910 <_svfiprintf_r>
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	bfbc      	itt	lt
 800c3be:	238b      	movlt	r3, #139	@ 0x8b
 800c3c0:	602b      	strlt	r3, [r5, #0]
 800c3c2:	2c00      	cmp	r4, #0
 800c3c4:	d0dd      	beq.n	800c382 <sniprintf+0x16>
 800c3c6:	9b02      	ldr	r3, [sp, #8]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	e7d9      	b.n	800c382 <sniprintf+0x16>
 800c3ce:	bf00      	nop
 800c3d0:	2400002c 	.word	0x2400002c

0800c3d4 <siprintf>:
 800c3d4:	b40e      	push	{r1, r2, r3}
 800c3d6:	b500      	push	{lr}
 800c3d8:	b09c      	sub	sp, #112	@ 0x70
 800c3da:	ab1d      	add	r3, sp, #116	@ 0x74
 800c3dc:	9002      	str	r0, [sp, #8]
 800c3de:	9006      	str	r0, [sp, #24]
 800c3e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c3e4:	4809      	ldr	r0, [pc, #36]	@ (800c40c <siprintf+0x38>)
 800c3e6:	9107      	str	r1, [sp, #28]
 800c3e8:	9104      	str	r1, [sp, #16]
 800c3ea:	4909      	ldr	r1, [pc, #36]	@ (800c410 <siprintf+0x3c>)
 800c3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f0:	9105      	str	r1, [sp, #20]
 800c3f2:	6800      	ldr	r0, [r0, #0]
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	a902      	add	r1, sp, #8
 800c3f8:	f002 fa8a 	bl	800e910 <_svfiprintf_r>
 800c3fc:	9b02      	ldr	r3, [sp, #8]
 800c3fe:	2200      	movs	r2, #0
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	b01c      	add	sp, #112	@ 0x70
 800c404:	f85d eb04 	ldr.w	lr, [sp], #4
 800c408:	b003      	add	sp, #12
 800c40a:	4770      	bx	lr
 800c40c:	2400002c 	.word	0x2400002c
 800c410:	ffff0208 	.word	0xffff0208

0800c414 <__sread>:
 800c414:	b510      	push	{r4, lr}
 800c416:	460c      	mov	r4, r1
 800c418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41c:	f000 f87e 	bl	800c51c <_read_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	bfab      	itete	ge
 800c424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c426:	89a3      	ldrhlt	r3, [r4, #12]
 800c428:	181b      	addge	r3, r3, r0
 800c42a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c42e:	bfac      	ite	ge
 800c430:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c432:	81a3      	strhlt	r3, [r4, #12]
 800c434:	bd10      	pop	{r4, pc}

0800c436 <__swrite>:
 800c436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c43a:	461f      	mov	r7, r3
 800c43c:	898b      	ldrh	r3, [r1, #12]
 800c43e:	05db      	lsls	r3, r3, #23
 800c440:	4605      	mov	r5, r0
 800c442:	460c      	mov	r4, r1
 800c444:	4616      	mov	r6, r2
 800c446:	d505      	bpl.n	800c454 <__swrite+0x1e>
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	2302      	movs	r3, #2
 800c44e:	2200      	movs	r2, #0
 800c450:	f000 f852 	bl	800c4f8 <_lseek_r>
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c45a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c45e:	81a3      	strh	r3, [r4, #12]
 800c460:	4632      	mov	r2, r6
 800c462:	463b      	mov	r3, r7
 800c464:	4628      	mov	r0, r5
 800c466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	f000 b869 	b.w	800c540 <_write_r>

0800c46e <__sseek>:
 800c46e:	b510      	push	{r4, lr}
 800c470:	460c      	mov	r4, r1
 800c472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c476:	f000 f83f 	bl	800c4f8 <_lseek_r>
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	bf15      	itete	ne
 800c480:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c48a:	81a3      	strheq	r3, [r4, #12]
 800c48c:	bf18      	it	ne
 800c48e:	81a3      	strhne	r3, [r4, #12]
 800c490:	bd10      	pop	{r4, pc}

0800c492 <__sclose>:
 800c492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c496:	f000 b81f 	b.w	800c4d8 <_close_r>

0800c49a <memset>:
 800c49a:	4402      	add	r2, r0
 800c49c:	4603      	mov	r3, r0
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d100      	bne.n	800c4a4 <memset+0xa>
 800c4a2:	4770      	bx	lr
 800c4a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c4a8:	e7f9      	b.n	800c49e <memset+0x4>

0800c4aa <strncmp>:
 800c4aa:	b510      	push	{r4, lr}
 800c4ac:	b16a      	cbz	r2, 800c4ca <strncmp+0x20>
 800c4ae:	3901      	subs	r1, #1
 800c4b0:	1884      	adds	r4, r0, r2
 800c4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d103      	bne.n	800c4c6 <strncmp+0x1c>
 800c4be:	42a0      	cmp	r0, r4
 800c4c0:	d001      	beq.n	800c4c6 <strncmp+0x1c>
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	d1f5      	bne.n	800c4b2 <strncmp+0x8>
 800c4c6:	1ad0      	subs	r0, r2, r3
 800c4c8:	bd10      	pop	{r4, pc}
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	e7fc      	b.n	800c4c8 <strncmp+0x1e>
	...

0800c4d0 <_localeconv_r>:
 800c4d0:	4800      	ldr	r0, [pc, #0]	@ (800c4d4 <_localeconv_r+0x4>)
 800c4d2:	4770      	bx	lr
 800c4d4:	2400016c 	.word	0x2400016c

0800c4d8 <_close_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4d06      	ldr	r5, [pc, #24]	@ (800c4f4 <_close_r+0x1c>)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	602b      	str	r3, [r5, #0]
 800c4e4:	f7f5 f994 	bl	8001810 <_close>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_close_r+0x1a>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_close_r+0x1a>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	24000504 	.word	0x24000504

0800c4f8 <_lseek_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	@ (800c518 <_lseek_r+0x20>)
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	4611      	mov	r1, r2
 800c502:	2200      	movs	r2, #0
 800c504:	602a      	str	r2, [r5, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7f5 f9a9 	bl	800185e <_lseek>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_lseek_r+0x1e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_lseek_r+0x1e>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	24000504 	.word	0x24000504

0800c51c <_read_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d07      	ldr	r5, [pc, #28]	@ (800c53c <_read_r+0x20>)
 800c520:	4604      	mov	r4, r0
 800c522:	4608      	mov	r0, r1
 800c524:	4611      	mov	r1, r2
 800c526:	2200      	movs	r2, #0
 800c528:	602a      	str	r2, [r5, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	f7f5 f937 	bl	800179e <_read>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_read_r+0x1e>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	b103      	cbz	r3, 800c53a <_read_r+0x1e>
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	24000504 	.word	0x24000504

0800c540 <_write_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4d07      	ldr	r5, [pc, #28]	@ (800c560 <_write_r+0x20>)
 800c544:	4604      	mov	r4, r0
 800c546:	4608      	mov	r0, r1
 800c548:	4611      	mov	r1, r2
 800c54a:	2200      	movs	r2, #0
 800c54c:	602a      	str	r2, [r5, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	f7f5 f942 	bl	80017d8 <_write>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_write_r+0x1e>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_write_r+0x1e>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	24000504 	.word	0x24000504

0800c564 <__errno>:
 800c564:	4b01      	ldr	r3, [pc, #4]	@ (800c56c <__errno+0x8>)
 800c566:	6818      	ldr	r0, [r3, #0]
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	2400002c 	.word	0x2400002c

0800c570 <__libc_init_array>:
 800c570:	b570      	push	{r4, r5, r6, lr}
 800c572:	4d0d      	ldr	r5, [pc, #52]	@ (800c5a8 <__libc_init_array+0x38>)
 800c574:	4c0d      	ldr	r4, [pc, #52]	@ (800c5ac <__libc_init_array+0x3c>)
 800c576:	1b64      	subs	r4, r4, r5
 800c578:	10a4      	asrs	r4, r4, #2
 800c57a:	2600      	movs	r6, #0
 800c57c:	42a6      	cmp	r6, r4
 800c57e:	d109      	bne.n	800c594 <__libc_init_array+0x24>
 800c580:	4d0b      	ldr	r5, [pc, #44]	@ (800c5b0 <__libc_init_array+0x40>)
 800c582:	4c0c      	ldr	r4, [pc, #48]	@ (800c5b4 <__libc_init_array+0x44>)
 800c584:	f003 fa22 	bl	800f9cc <_init>
 800c588:	1b64      	subs	r4, r4, r5
 800c58a:	10a4      	asrs	r4, r4, #2
 800c58c:	2600      	movs	r6, #0
 800c58e:	42a6      	cmp	r6, r4
 800c590:	d105      	bne.n	800c59e <__libc_init_array+0x2e>
 800c592:	bd70      	pop	{r4, r5, r6, pc}
 800c594:	f855 3b04 	ldr.w	r3, [r5], #4
 800c598:	4798      	blx	r3
 800c59a:	3601      	adds	r6, #1
 800c59c:	e7ee      	b.n	800c57c <__libc_init_array+0xc>
 800c59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a2:	4798      	blx	r3
 800c5a4:	3601      	adds	r6, #1
 800c5a6:	e7f2      	b.n	800c58e <__libc_init_array+0x1e>
 800c5a8:	0800fec8 	.word	0x0800fec8
 800c5ac:	0800fec8 	.word	0x0800fec8
 800c5b0:	0800fec8 	.word	0x0800fec8
 800c5b4:	0800fecc 	.word	0x0800fecc

0800c5b8 <__retarget_lock_init_recursive>:
 800c5b8:	4770      	bx	lr

0800c5ba <__retarget_lock_acquire_recursive>:
 800c5ba:	4770      	bx	lr

0800c5bc <__retarget_lock_release_recursive>:
 800c5bc:	4770      	bx	lr
	...

0800c5c0 <nanf>:
 800c5c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c5c8 <nanf+0x8>
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	7fc00000 	.word	0x7fc00000

0800c5cc <quorem>:
 800c5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	6903      	ldr	r3, [r0, #16]
 800c5d2:	690c      	ldr	r4, [r1, #16]
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	db7e      	blt.n	800c6d8 <quorem+0x10c>
 800c5da:	3c01      	subs	r4, #1
 800c5dc:	f101 0814 	add.w	r8, r1, #20
 800c5e0:	00a3      	lsls	r3, r4, #2
 800c5e2:	f100 0514 	add.w	r5, r0, #20
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800c602:	d32e      	bcc.n	800c662 <quorem+0x96>
 800c604:	f04f 0a00 	mov.w	sl, #0
 800c608:	46c4      	mov	ip, r8
 800c60a:	46ae      	mov	lr, r5
 800c60c:	46d3      	mov	fp, sl
 800c60e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c612:	b298      	uxth	r0, r3
 800c614:	fb06 a000 	mla	r0, r6, r0, sl
 800c618:	0c02      	lsrs	r2, r0, #16
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	fb06 2303 	mla	r3, r6, r3, r2
 800c620:	f8de 2000 	ldr.w	r2, [lr]
 800c624:	b280      	uxth	r0, r0
 800c626:	b292      	uxth	r2, r2
 800c628:	1a12      	subs	r2, r2, r0
 800c62a:	445a      	add	r2, fp
 800c62c:	f8de 0000 	ldr.w	r0, [lr]
 800c630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c634:	b29b      	uxth	r3, r3
 800c636:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c63a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c63e:	b292      	uxth	r2, r2
 800c640:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c644:	45e1      	cmp	r9, ip
 800c646:	f84e 2b04 	str.w	r2, [lr], #4
 800c64a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c64e:	d2de      	bcs.n	800c60e <quorem+0x42>
 800c650:	9b00      	ldr	r3, [sp, #0]
 800c652:	58eb      	ldr	r3, [r5, r3]
 800c654:	b92b      	cbnz	r3, 800c662 <quorem+0x96>
 800c656:	9b01      	ldr	r3, [sp, #4]
 800c658:	3b04      	subs	r3, #4
 800c65a:	429d      	cmp	r5, r3
 800c65c:	461a      	mov	r2, r3
 800c65e:	d32f      	bcc.n	800c6c0 <quorem+0xf4>
 800c660:	613c      	str	r4, [r7, #16]
 800c662:	4638      	mov	r0, r7
 800c664:	f001 f956 	bl	800d914 <__mcmp>
 800c668:	2800      	cmp	r0, #0
 800c66a:	db25      	blt.n	800c6b8 <quorem+0xec>
 800c66c:	4629      	mov	r1, r5
 800c66e:	2000      	movs	r0, #0
 800c670:	f858 2b04 	ldr.w	r2, [r8], #4
 800c674:	f8d1 c000 	ldr.w	ip, [r1]
 800c678:	fa1f fe82 	uxth.w	lr, r2
 800c67c:	fa1f f38c 	uxth.w	r3, ip
 800c680:	eba3 030e 	sub.w	r3, r3, lr
 800c684:	4403      	add	r3, r0
 800c686:	0c12      	lsrs	r2, r2, #16
 800c688:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c68c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c690:	b29b      	uxth	r3, r3
 800c692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c696:	45c1      	cmp	r9, r8
 800c698:	f841 3b04 	str.w	r3, [r1], #4
 800c69c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c6a0:	d2e6      	bcs.n	800c670 <quorem+0xa4>
 800c6a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6aa:	b922      	cbnz	r2, 800c6b6 <quorem+0xea>
 800c6ac:	3b04      	subs	r3, #4
 800c6ae:	429d      	cmp	r5, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	d30b      	bcc.n	800c6cc <quorem+0x100>
 800c6b4:	613c      	str	r4, [r7, #16]
 800c6b6:	3601      	adds	r6, #1
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	b003      	add	sp, #12
 800c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c0:	6812      	ldr	r2, [r2, #0]
 800c6c2:	3b04      	subs	r3, #4
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	d1cb      	bne.n	800c660 <quorem+0x94>
 800c6c8:	3c01      	subs	r4, #1
 800c6ca:	e7c6      	b.n	800c65a <quorem+0x8e>
 800c6cc:	6812      	ldr	r2, [r2, #0]
 800c6ce:	3b04      	subs	r3, #4
 800c6d0:	2a00      	cmp	r2, #0
 800c6d2:	d1ef      	bne.n	800c6b4 <quorem+0xe8>
 800c6d4:	3c01      	subs	r4, #1
 800c6d6:	e7ea      	b.n	800c6ae <quorem+0xe2>
 800c6d8:	2000      	movs	r0, #0
 800c6da:	e7ee      	b.n	800c6ba <quorem+0xee>
 800c6dc:	0000      	movs	r0, r0
	...

0800c6e0 <_dtoa_r>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	ed2d 8b02 	vpush	{d8}
 800c6e8:	69c7      	ldr	r7, [r0, #28]
 800c6ea:	b091      	sub	sp, #68	@ 0x44
 800c6ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c6f0:	ec55 4b10 	vmov	r4, r5, d0
 800c6f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c6f6:	9107      	str	r1, [sp, #28]
 800c6f8:	4681      	mov	r9, r0
 800c6fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800c6fe:	b97f      	cbnz	r7, 800c720 <_dtoa_r+0x40>
 800c700:	2010      	movs	r0, #16
 800c702:	f000 fd8d 	bl	800d220 <malloc>
 800c706:	4602      	mov	r2, r0
 800c708:	f8c9 001c 	str.w	r0, [r9, #28]
 800c70c:	b920      	cbnz	r0, 800c718 <_dtoa_r+0x38>
 800c70e:	4ba0      	ldr	r3, [pc, #640]	@ (800c990 <_dtoa_r+0x2b0>)
 800c710:	21ef      	movs	r1, #239	@ 0xef
 800c712:	48a0      	ldr	r0, [pc, #640]	@ (800c994 <_dtoa_r+0x2b4>)
 800c714:	f002 fae4 	bl	800ece0 <__assert_func>
 800c718:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c71c:	6007      	str	r7, [r0, #0]
 800c71e:	60c7      	str	r7, [r0, #12]
 800c720:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c724:	6819      	ldr	r1, [r3, #0]
 800c726:	b159      	cbz	r1, 800c740 <_dtoa_r+0x60>
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	604a      	str	r2, [r1, #4]
 800c72c:	2301      	movs	r3, #1
 800c72e:	4093      	lsls	r3, r2
 800c730:	608b      	str	r3, [r1, #8]
 800c732:	4648      	mov	r0, r9
 800c734:	f000 fe6a 	bl	800d40c <_Bfree>
 800c738:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	1e2b      	subs	r3, r5, #0
 800c742:	bfbb      	ittet	lt
 800c744:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c748:	9303      	strlt	r3, [sp, #12]
 800c74a:	2300      	movge	r3, #0
 800c74c:	2201      	movlt	r2, #1
 800c74e:	bfac      	ite	ge
 800c750:	6033      	strge	r3, [r6, #0]
 800c752:	6032      	strlt	r2, [r6, #0]
 800c754:	4b90      	ldr	r3, [pc, #576]	@ (800c998 <_dtoa_r+0x2b8>)
 800c756:	9e03      	ldr	r6, [sp, #12]
 800c758:	43b3      	bics	r3, r6
 800c75a:	d110      	bne.n	800c77e <_dtoa_r+0x9e>
 800c75c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c75e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c762:	6013      	str	r3, [r2, #0]
 800c764:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c768:	4323      	orrs	r3, r4
 800c76a:	f000 84de 	beq.w	800d12a <_dtoa_r+0xa4a>
 800c76e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c770:	4f8a      	ldr	r7, [pc, #552]	@ (800c99c <_dtoa_r+0x2bc>)
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 84e0 	beq.w	800d138 <_dtoa_r+0xa58>
 800c778:	1cfb      	adds	r3, r7, #3
 800c77a:	f000 bcdb 	b.w	800d134 <_dtoa_r+0xa54>
 800c77e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c782:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78a:	d10a      	bne.n	800c7a2 <_dtoa_r+0xc2>
 800c78c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c78e:	2301      	movs	r3, #1
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c794:	b113      	cbz	r3, 800c79c <_dtoa_r+0xbc>
 800c796:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c798:	4b81      	ldr	r3, [pc, #516]	@ (800c9a0 <_dtoa_r+0x2c0>)
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	4f81      	ldr	r7, [pc, #516]	@ (800c9a4 <_dtoa_r+0x2c4>)
 800c79e:	f000 bccb 	b.w	800d138 <_dtoa_r+0xa58>
 800c7a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800c7a4:	a90f      	add	r1, sp, #60	@ 0x3c
 800c7a6:	4648      	mov	r0, r9
 800c7a8:	eeb0 0b48 	vmov.f64	d0, d8
 800c7ac:	f001 f9d2 	bl	800db54 <__d2b>
 800c7b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c7b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7b6:	9001      	str	r0, [sp, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d045      	beq.n	800c848 <_dtoa_r+0x168>
 800c7bc:	eeb0 7b48 	vmov.f64	d7, d8
 800c7c0:	ee18 1a90 	vmov	r1, s17
 800c7c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c7c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c7cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c7d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c7d4:	2500      	movs	r5, #0
 800c7d6:	ee07 1a90 	vmov	s15, r1
 800c7da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c7de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c978 <_dtoa_r+0x298>
 800c7e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c980 <_dtoa_r+0x2a0>
 800c7ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c7ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c988 <_dtoa_r+0x2a8>
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c7fa:	eeb0 7b46 	vmov.f64	d7, d6
 800c7fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c802:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c806:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c80e:	ee16 8a90 	vmov	r8, s13
 800c812:	d508      	bpl.n	800c826 <_dtoa_r+0x146>
 800c814:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c818:	eeb4 6b47 	vcmp.f64	d6, d7
 800c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c820:	bf18      	it	ne
 800c822:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c826:	f1b8 0f16 	cmp.w	r8, #22
 800c82a:	d82b      	bhi.n	800c884 <_dtoa_r+0x1a4>
 800c82c:	495e      	ldr	r1, [pc, #376]	@ (800c9a8 <_dtoa_r+0x2c8>)
 800c82e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c832:	ed91 7b00 	vldr	d7, [r1]
 800c836:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83e:	d501      	bpl.n	800c844 <_dtoa_r+0x164>
 800c840:	f108 38ff 	add.w	r8, r8, #4294967295
 800c844:	2100      	movs	r1, #0
 800c846:	e01e      	b.n	800c886 <_dtoa_r+0x1a6>
 800c848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c84a:	4413      	add	r3, r2
 800c84c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c850:	2920      	cmp	r1, #32
 800c852:	bfc1      	itttt	gt
 800c854:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c858:	408e      	lslgt	r6, r1
 800c85a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c85e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c862:	bfd6      	itet	le
 800c864:	f1c1 0120 	rsble	r1, r1, #32
 800c868:	4331      	orrgt	r1, r6
 800c86a:	fa04 f101 	lslle.w	r1, r4, r1
 800c86e:	ee07 1a90 	vmov	s15, r1
 800c872:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c876:	3b01      	subs	r3, #1
 800c878:	ee17 1a90 	vmov	r1, s15
 800c87c:	2501      	movs	r5, #1
 800c87e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c882:	e7a8      	b.n	800c7d6 <_dtoa_r+0xf6>
 800c884:	2101      	movs	r1, #1
 800c886:	1ad2      	subs	r2, r2, r3
 800c888:	1e53      	subs	r3, r2, #1
 800c88a:	9306      	str	r3, [sp, #24]
 800c88c:	bf45      	ittet	mi
 800c88e:	f1c2 0301 	rsbmi	r3, r2, #1
 800c892:	9305      	strmi	r3, [sp, #20]
 800c894:	2300      	movpl	r3, #0
 800c896:	2300      	movmi	r3, #0
 800c898:	bf4c      	ite	mi
 800c89a:	9306      	strmi	r3, [sp, #24]
 800c89c:	9305      	strpl	r3, [sp, #20]
 800c89e:	f1b8 0f00 	cmp.w	r8, #0
 800c8a2:	910c      	str	r1, [sp, #48]	@ 0x30
 800c8a4:	db18      	blt.n	800c8d8 <_dtoa_r+0x1f8>
 800c8a6:	9b06      	ldr	r3, [sp, #24]
 800c8a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c8ac:	4443      	add	r3, r8
 800c8ae:	9306      	str	r3, [sp, #24]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9a07      	ldr	r2, [sp, #28]
 800c8b4:	2a09      	cmp	r2, #9
 800c8b6:	d849      	bhi.n	800c94c <_dtoa_r+0x26c>
 800c8b8:	2a05      	cmp	r2, #5
 800c8ba:	bfc4      	itt	gt
 800c8bc:	3a04      	subgt	r2, #4
 800c8be:	9207      	strgt	r2, [sp, #28]
 800c8c0:	9a07      	ldr	r2, [sp, #28]
 800c8c2:	f1a2 0202 	sub.w	r2, r2, #2
 800c8c6:	bfcc      	ite	gt
 800c8c8:	2400      	movgt	r4, #0
 800c8ca:	2401      	movle	r4, #1
 800c8cc:	2a03      	cmp	r2, #3
 800c8ce:	d848      	bhi.n	800c962 <_dtoa_r+0x282>
 800c8d0:	e8df f002 	tbb	[pc, r2]
 800c8d4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c8d8:	9b05      	ldr	r3, [sp, #20]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	eba3 0308 	sub.w	r3, r3, r8
 800c8e0:	9305      	str	r3, [sp, #20]
 800c8e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8e4:	f1c8 0300 	rsb	r3, r8, #0
 800c8e8:	e7e3      	b.n	800c8b2 <_dtoa_r+0x1d2>
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	9208      	str	r2, [sp, #32]
 800c8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	dc39      	bgt.n	800c968 <_dtoa_r+0x288>
 800c8f4:	f04f 0b01 	mov.w	fp, #1
 800c8f8:	46da      	mov	sl, fp
 800c8fa:	465a      	mov	r2, fp
 800c8fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c900:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c904:	2100      	movs	r1, #0
 800c906:	2004      	movs	r0, #4
 800c908:	f100 0614 	add.w	r6, r0, #20
 800c90c:	4296      	cmp	r6, r2
 800c90e:	d930      	bls.n	800c972 <_dtoa_r+0x292>
 800c910:	6079      	str	r1, [r7, #4]
 800c912:	4648      	mov	r0, r9
 800c914:	9304      	str	r3, [sp, #16]
 800c916:	f000 fd39 	bl	800d38c <_Balloc>
 800c91a:	9b04      	ldr	r3, [sp, #16]
 800c91c:	4607      	mov	r7, r0
 800c91e:	2800      	cmp	r0, #0
 800c920:	d146      	bne.n	800c9b0 <_dtoa_r+0x2d0>
 800c922:	4b22      	ldr	r3, [pc, #136]	@ (800c9ac <_dtoa_r+0x2cc>)
 800c924:	4602      	mov	r2, r0
 800c926:	f240 11af 	movw	r1, #431	@ 0x1af
 800c92a:	e6f2      	b.n	800c712 <_dtoa_r+0x32>
 800c92c:	2201      	movs	r2, #1
 800c92e:	e7dd      	b.n	800c8ec <_dtoa_r+0x20c>
 800c930:	2200      	movs	r2, #0
 800c932:	9208      	str	r2, [sp, #32]
 800c934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c936:	eb08 0b02 	add.w	fp, r8, r2
 800c93a:	f10b 0a01 	add.w	sl, fp, #1
 800c93e:	4652      	mov	r2, sl
 800c940:	2a01      	cmp	r2, #1
 800c942:	bfb8      	it	lt
 800c944:	2201      	movlt	r2, #1
 800c946:	e7db      	b.n	800c900 <_dtoa_r+0x220>
 800c948:	2201      	movs	r2, #1
 800c94a:	e7f2      	b.n	800c932 <_dtoa_r+0x252>
 800c94c:	2401      	movs	r4, #1
 800c94e:	2200      	movs	r2, #0
 800c950:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c954:	f04f 3bff 	mov.w	fp, #4294967295
 800c958:	2100      	movs	r1, #0
 800c95a:	46da      	mov	sl, fp
 800c95c:	2212      	movs	r2, #18
 800c95e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c960:	e7ce      	b.n	800c900 <_dtoa_r+0x220>
 800c962:	2201      	movs	r2, #1
 800c964:	9208      	str	r2, [sp, #32]
 800c966:	e7f5      	b.n	800c954 <_dtoa_r+0x274>
 800c968:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c96c:	46da      	mov	sl, fp
 800c96e:	465a      	mov	r2, fp
 800c970:	e7c6      	b.n	800c900 <_dtoa_r+0x220>
 800c972:	3101      	adds	r1, #1
 800c974:	0040      	lsls	r0, r0, #1
 800c976:	e7c7      	b.n	800c908 <_dtoa_r+0x228>
 800c978:	636f4361 	.word	0x636f4361
 800c97c:	3fd287a7 	.word	0x3fd287a7
 800c980:	8b60c8b3 	.word	0x8b60c8b3
 800c984:	3fc68a28 	.word	0x3fc68a28
 800c988:	509f79fb 	.word	0x509f79fb
 800c98c:	3fd34413 	.word	0x3fd34413
 800c990:	0800fbd7 	.word	0x0800fbd7
 800c994:	0800fbee 	.word	0x0800fbee
 800c998:	7ff00000 	.word	0x7ff00000
 800c99c:	0800fbd3 	.word	0x0800fbd3
 800c9a0:	0800fba2 	.word	0x0800fba2
 800c9a4:	0800fba1 	.word	0x0800fba1
 800c9a8:	0800fce8 	.word	0x0800fce8
 800c9ac:	0800fc46 	.word	0x0800fc46
 800c9b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c9b4:	f1ba 0f0e 	cmp.w	sl, #14
 800c9b8:	6010      	str	r0, [r2, #0]
 800c9ba:	d86f      	bhi.n	800ca9c <_dtoa_r+0x3bc>
 800c9bc:	2c00      	cmp	r4, #0
 800c9be:	d06d      	beq.n	800ca9c <_dtoa_r+0x3bc>
 800c9c0:	f1b8 0f00 	cmp.w	r8, #0
 800c9c4:	f340 80c2 	ble.w	800cb4c <_dtoa_r+0x46c>
 800c9c8:	4aca      	ldr	r2, [pc, #808]	@ (800ccf4 <_dtoa_r+0x614>)
 800c9ca:	f008 010f 	and.w	r1, r8, #15
 800c9ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c9d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c9d6:	ed92 7b00 	vldr	d7, [r2]
 800c9da:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c9de:	f000 80a9 	beq.w	800cb34 <_dtoa_r+0x454>
 800c9e2:	4ac5      	ldr	r2, [pc, #788]	@ (800ccf8 <_dtoa_r+0x618>)
 800c9e4:	ed92 6b08 	vldr	d6, [r2, #32]
 800c9e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c9ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c9f0:	f001 010f 	and.w	r1, r1, #15
 800c9f4:	2203      	movs	r2, #3
 800c9f6:	48c0      	ldr	r0, [pc, #768]	@ (800ccf8 <_dtoa_r+0x618>)
 800c9f8:	2900      	cmp	r1, #0
 800c9fa:	f040 809d 	bne.w	800cb38 <_dtoa_r+0x458>
 800c9fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ca02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ca06:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ca0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca10:	2900      	cmp	r1, #0
 800ca12:	f000 80c1 	beq.w	800cb98 <_dtoa_r+0x4b8>
 800ca16:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ca1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	f140 80b9 	bpl.w	800cb98 <_dtoa_r+0x4b8>
 800ca26:	f1ba 0f00 	cmp.w	sl, #0
 800ca2a:	f000 80b5 	beq.w	800cb98 <_dtoa_r+0x4b8>
 800ca2e:	f1bb 0f00 	cmp.w	fp, #0
 800ca32:	dd31      	ble.n	800ca98 <_dtoa_r+0x3b8>
 800ca34:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ca38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca40:	f108 31ff 	add.w	r1, r8, #4294967295
 800ca44:	9104      	str	r1, [sp, #16]
 800ca46:	3201      	adds	r2, #1
 800ca48:	465c      	mov	r4, fp
 800ca4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ca4e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ca52:	ee07 2a90 	vmov	s15, r2
 800ca56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ca5e:	ee15 2a90 	vmov	r2, s11
 800ca62:	ec51 0b15 	vmov	r0, r1, d5
 800ca66:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ca6a:	2c00      	cmp	r4, #0
 800ca6c:	f040 8098 	bne.w	800cba0 <_dtoa_r+0x4c0>
 800ca70:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ca74:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ca78:	ec41 0b17 	vmov	d7, r0, r1
 800ca7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca84:	f300 8261 	bgt.w	800cf4a <_dtoa_r+0x86a>
 800ca88:	eeb1 7b47 	vneg.f64	d7, d7
 800ca8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca94:	f100 80f5 	bmi.w	800cc82 <_dtoa_r+0x5a2>
 800ca98:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca9e:	2a00      	cmp	r2, #0
 800caa0:	f2c0 812c 	blt.w	800ccfc <_dtoa_r+0x61c>
 800caa4:	f1b8 0f0e 	cmp.w	r8, #14
 800caa8:	f300 8128 	bgt.w	800ccfc <_dtoa_r+0x61c>
 800caac:	4b91      	ldr	r3, [pc, #580]	@ (800ccf4 <_dtoa_r+0x614>)
 800caae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cab2:	ed93 6b00 	vldr	d6, [r3]
 800cab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab8:	2b00      	cmp	r3, #0
 800caba:	da03      	bge.n	800cac4 <_dtoa_r+0x3e4>
 800cabc:	f1ba 0f00 	cmp.w	sl, #0
 800cac0:	f340 80d2 	ble.w	800cc68 <_dtoa_r+0x588>
 800cac4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cacc:	463e      	mov	r6, r7
 800cace:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cad2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cad6:	ee15 3a10 	vmov	r3, s10
 800cada:	3330      	adds	r3, #48	@ 0x30
 800cadc:	f806 3b01 	strb.w	r3, [r6], #1
 800cae0:	1bf3      	subs	r3, r6, r7
 800cae2:	459a      	cmp	sl, r3
 800cae4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cae8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800caec:	f040 80f8 	bne.w	800cce0 <_dtoa_r+0x600>
 800caf0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800caf4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800caf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafc:	f300 80dd 	bgt.w	800ccba <_dtoa_r+0x5da>
 800cb00:	eeb4 7b46 	vcmp.f64	d7, d6
 800cb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb08:	d104      	bne.n	800cb14 <_dtoa_r+0x434>
 800cb0a:	ee15 3a10 	vmov	r3, s10
 800cb0e:	07db      	lsls	r3, r3, #31
 800cb10:	f100 80d3 	bmi.w	800ccba <_dtoa_r+0x5da>
 800cb14:	9901      	ldr	r1, [sp, #4]
 800cb16:	4648      	mov	r0, r9
 800cb18:	f000 fc78 	bl	800d40c <_Bfree>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb20:	7033      	strb	r3, [r6, #0]
 800cb22:	f108 0301 	add.w	r3, r8, #1
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 8304 	beq.w	800d138 <_dtoa_r+0xa58>
 800cb30:	601e      	str	r6, [r3, #0]
 800cb32:	e301      	b.n	800d138 <_dtoa_r+0xa58>
 800cb34:	2202      	movs	r2, #2
 800cb36:	e75e      	b.n	800c9f6 <_dtoa_r+0x316>
 800cb38:	07cc      	lsls	r4, r1, #31
 800cb3a:	d504      	bpl.n	800cb46 <_dtoa_r+0x466>
 800cb3c:	ed90 6b00 	vldr	d6, [r0]
 800cb40:	3201      	adds	r2, #1
 800cb42:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb46:	1049      	asrs	r1, r1, #1
 800cb48:	3008      	adds	r0, #8
 800cb4a:	e755      	b.n	800c9f8 <_dtoa_r+0x318>
 800cb4c:	d022      	beq.n	800cb94 <_dtoa_r+0x4b4>
 800cb4e:	f1c8 0100 	rsb	r1, r8, #0
 800cb52:	4a68      	ldr	r2, [pc, #416]	@ (800ccf4 <_dtoa_r+0x614>)
 800cb54:	f001 000f 	and.w	r0, r1, #15
 800cb58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cb5c:	ed92 7b00 	vldr	d7, [r2]
 800cb60:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cb64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb68:	4863      	ldr	r0, [pc, #396]	@ (800ccf8 <_dtoa_r+0x618>)
 800cb6a:	1109      	asrs	r1, r1, #4
 800cb6c:	2400      	movs	r4, #0
 800cb6e:	2202      	movs	r2, #2
 800cb70:	b929      	cbnz	r1, 800cb7e <_dtoa_r+0x49e>
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	f43f af49 	beq.w	800ca0a <_dtoa_r+0x32a>
 800cb78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb7c:	e745      	b.n	800ca0a <_dtoa_r+0x32a>
 800cb7e:	07ce      	lsls	r6, r1, #31
 800cb80:	d505      	bpl.n	800cb8e <_dtoa_r+0x4ae>
 800cb82:	ed90 6b00 	vldr	d6, [r0]
 800cb86:	3201      	adds	r2, #1
 800cb88:	2401      	movs	r4, #1
 800cb8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb8e:	1049      	asrs	r1, r1, #1
 800cb90:	3008      	adds	r0, #8
 800cb92:	e7ed      	b.n	800cb70 <_dtoa_r+0x490>
 800cb94:	2202      	movs	r2, #2
 800cb96:	e738      	b.n	800ca0a <_dtoa_r+0x32a>
 800cb98:	f8cd 8010 	str.w	r8, [sp, #16]
 800cb9c:	4654      	mov	r4, sl
 800cb9e:	e754      	b.n	800ca4a <_dtoa_r+0x36a>
 800cba0:	4a54      	ldr	r2, [pc, #336]	@ (800ccf4 <_dtoa_r+0x614>)
 800cba2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cba6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cbaa:	9a08      	ldr	r2, [sp, #32]
 800cbac:	ec41 0b17 	vmov	d7, r0, r1
 800cbb0:	443c      	add	r4, r7
 800cbb2:	b34a      	cbz	r2, 800cc08 <_dtoa_r+0x528>
 800cbb4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cbb8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cbbc:	463e      	mov	r6, r7
 800cbbe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cbc2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cbc6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cbca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cbce:	ee14 2a90 	vmov	r2, s9
 800cbd2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cbd6:	3230      	adds	r2, #48	@ 0x30
 800cbd8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cbdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe4:	f806 2b01 	strb.w	r2, [r6], #1
 800cbe8:	d438      	bmi.n	800cc5c <_dtoa_r+0x57c>
 800cbea:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cbee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf6:	d462      	bmi.n	800ccbe <_dtoa_r+0x5de>
 800cbf8:	42a6      	cmp	r6, r4
 800cbfa:	f43f af4d 	beq.w	800ca98 <_dtoa_r+0x3b8>
 800cbfe:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cc02:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc06:	e7e0      	b.n	800cbca <_dtoa_r+0x4ea>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	463e      	mov	r6, r7
 800cc0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc10:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cc14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc18:	ee14 2a90 	vmov	r2, s9
 800cc1c:	3230      	adds	r2, #48	@ 0x30
 800cc1e:	f806 2b01 	strb.w	r2, [r6], #1
 800cc22:	42a6      	cmp	r6, r4
 800cc24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc28:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc2c:	d119      	bne.n	800cc62 <_dtoa_r+0x582>
 800cc2e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cc32:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cc36:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3e:	dc3e      	bgt.n	800ccbe <_dtoa_r+0x5de>
 800cc40:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cc44:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4c:	f57f af24 	bpl.w	800ca98 <_dtoa_r+0x3b8>
 800cc50:	460e      	mov	r6, r1
 800cc52:	3901      	subs	r1, #1
 800cc54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc58:	2b30      	cmp	r3, #48	@ 0x30
 800cc5a:	d0f9      	beq.n	800cc50 <_dtoa_r+0x570>
 800cc5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cc60:	e758      	b.n	800cb14 <_dtoa_r+0x434>
 800cc62:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc66:	e7d5      	b.n	800cc14 <_dtoa_r+0x534>
 800cc68:	d10b      	bne.n	800cc82 <_dtoa_r+0x5a2>
 800cc6a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cc6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cc72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7e:	f2c0 8161 	blt.w	800cf44 <_dtoa_r+0x864>
 800cc82:	2400      	movs	r4, #0
 800cc84:	4625      	mov	r5, r4
 800cc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc88:	43db      	mvns	r3, r3
 800cc8a:	9304      	str	r3, [sp, #16]
 800cc8c:	463e      	mov	r6, r7
 800cc8e:	f04f 0800 	mov.w	r8, #0
 800cc92:	4621      	mov	r1, r4
 800cc94:	4648      	mov	r0, r9
 800cc96:	f000 fbb9 	bl	800d40c <_Bfree>
 800cc9a:	2d00      	cmp	r5, #0
 800cc9c:	d0de      	beq.n	800cc5c <_dtoa_r+0x57c>
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	d005      	beq.n	800ccb0 <_dtoa_r+0x5d0>
 800cca4:	45a8      	cmp	r8, r5
 800cca6:	d003      	beq.n	800ccb0 <_dtoa_r+0x5d0>
 800cca8:	4641      	mov	r1, r8
 800ccaa:	4648      	mov	r0, r9
 800ccac:	f000 fbae 	bl	800d40c <_Bfree>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4648      	mov	r0, r9
 800ccb4:	f000 fbaa 	bl	800d40c <_Bfree>
 800ccb8:	e7d0      	b.n	800cc5c <_dtoa_r+0x57c>
 800ccba:	f8cd 8010 	str.w	r8, [sp, #16]
 800ccbe:	4633      	mov	r3, r6
 800ccc0:	461e      	mov	r6, r3
 800ccc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccc6:	2a39      	cmp	r2, #57	@ 0x39
 800ccc8:	d106      	bne.n	800ccd8 <_dtoa_r+0x5f8>
 800ccca:	429f      	cmp	r7, r3
 800cccc:	d1f8      	bne.n	800ccc0 <_dtoa_r+0x5e0>
 800ccce:	9a04      	ldr	r2, [sp, #16]
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	9204      	str	r2, [sp, #16]
 800ccd4:	2230      	movs	r2, #48	@ 0x30
 800ccd6:	703a      	strb	r2, [r7, #0]
 800ccd8:	781a      	ldrb	r2, [r3, #0]
 800ccda:	3201      	adds	r2, #1
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	e7bd      	b.n	800cc5c <_dtoa_r+0x57c>
 800cce0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cce4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccec:	f47f aeef 	bne.w	800cace <_dtoa_r+0x3ee>
 800ccf0:	e710      	b.n	800cb14 <_dtoa_r+0x434>
 800ccf2:	bf00      	nop
 800ccf4:	0800fce8 	.word	0x0800fce8
 800ccf8:	0800fcc0 	.word	0x0800fcc0
 800ccfc:	9908      	ldr	r1, [sp, #32]
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	f000 80e3 	beq.w	800ceca <_dtoa_r+0x7ea>
 800cd04:	9907      	ldr	r1, [sp, #28]
 800cd06:	2901      	cmp	r1, #1
 800cd08:	f300 80c8 	bgt.w	800ce9c <_dtoa_r+0x7bc>
 800cd0c:	2d00      	cmp	r5, #0
 800cd0e:	f000 80c1 	beq.w	800ce94 <_dtoa_r+0x7b4>
 800cd12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd16:	9e05      	ldr	r6, [sp, #20]
 800cd18:	461c      	mov	r4, r3
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	9b05      	ldr	r3, [sp, #20]
 800cd1e:	4413      	add	r3, r2
 800cd20:	9305      	str	r3, [sp, #20]
 800cd22:	9b06      	ldr	r3, [sp, #24]
 800cd24:	2101      	movs	r1, #1
 800cd26:	4413      	add	r3, r2
 800cd28:	4648      	mov	r0, r9
 800cd2a:	9306      	str	r3, [sp, #24]
 800cd2c:	f000 fc6c 	bl	800d608 <__i2b>
 800cd30:	9b04      	ldr	r3, [sp, #16]
 800cd32:	4605      	mov	r5, r0
 800cd34:	b166      	cbz	r6, 800cd50 <_dtoa_r+0x670>
 800cd36:	9a06      	ldr	r2, [sp, #24]
 800cd38:	2a00      	cmp	r2, #0
 800cd3a:	dd09      	ble.n	800cd50 <_dtoa_r+0x670>
 800cd3c:	42b2      	cmp	r2, r6
 800cd3e:	9905      	ldr	r1, [sp, #20]
 800cd40:	bfa8      	it	ge
 800cd42:	4632      	movge	r2, r6
 800cd44:	1a89      	subs	r1, r1, r2
 800cd46:	9105      	str	r1, [sp, #20]
 800cd48:	9906      	ldr	r1, [sp, #24]
 800cd4a:	1ab6      	subs	r6, r6, r2
 800cd4c:	1a8a      	subs	r2, r1, r2
 800cd4e:	9206      	str	r2, [sp, #24]
 800cd50:	b1fb      	cbz	r3, 800cd92 <_dtoa_r+0x6b2>
 800cd52:	9a08      	ldr	r2, [sp, #32]
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	f000 80bc 	beq.w	800ced2 <_dtoa_r+0x7f2>
 800cd5a:	b19c      	cbz	r4, 800cd84 <_dtoa_r+0x6a4>
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	4622      	mov	r2, r4
 800cd60:	4648      	mov	r0, r9
 800cd62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd64:	f000 fd10 	bl	800d788 <__pow5mult>
 800cd68:	9a01      	ldr	r2, [sp, #4]
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	4648      	mov	r0, r9
 800cd70:	f000 fc60 	bl	800d634 <__multiply>
 800cd74:	9901      	ldr	r1, [sp, #4]
 800cd76:	9004      	str	r0, [sp, #16]
 800cd78:	4648      	mov	r0, r9
 800cd7a:	f000 fb47 	bl	800d40c <_Bfree>
 800cd7e:	9a04      	ldr	r2, [sp, #16]
 800cd80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd82:	9201      	str	r2, [sp, #4]
 800cd84:	1b1a      	subs	r2, r3, r4
 800cd86:	d004      	beq.n	800cd92 <_dtoa_r+0x6b2>
 800cd88:	9901      	ldr	r1, [sp, #4]
 800cd8a:	4648      	mov	r0, r9
 800cd8c:	f000 fcfc 	bl	800d788 <__pow5mult>
 800cd90:	9001      	str	r0, [sp, #4]
 800cd92:	2101      	movs	r1, #1
 800cd94:	4648      	mov	r0, r9
 800cd96:	f000 fc37 	bl	800d608 <__i2b>
 800cd9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 81d0 	beq.w	800d144 <_dtoa_r+0xa64>
 800cda4:	461a      	mov	r2, r3
 800cda6:	4601      	mov	r1, r0
 800cda8:	4648      	mov	r0, r9
 800cdaa:	f000 fced 	bl	800d788 <__pow5mult>
 800cdae:	9b07      	ldr	r3, [sp, #28]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	f300 8095 	bgt.w	800cee2 <_dtoa_r+0x802>
 800cdb8:	9b02      	ldr	r3, [sp, #8]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f040 808b 	bne.w	800ced6 <_dtoa_r+0x7f6>
 800cdc0:	9b03      	ldr	r3, [sp, #12]
 800cdc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	f040 8087 	bne.w	800ceda <_dtoa_r+0x7fa>
 800cdcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cdd0:	0d12      	lsrs	r2, r2, #20
 800cdd2:	0512      	lsls	r2, r2, #20
 800cdd4:	2a00      	cmp	r2, #0
 800cdd6:	f000 8082 	beq.w	800cede <_dtoa_r+0x7fe>
 800cdda:	9b05      	ldr	r3, [sp, #20]
 800cddc:	3301      	adds	r3, #1
 800cdde:	9305      	str	r3, [sp, #20]
 800cde0:	9b06      	ldr	r3, [sp, #24]
 800cde2:	3301      	adds	r3, #1
 800cde4:	9306      	str	r3, [sp, #24]
 800cde6:	2301      	movs	r3, #1
 800cde8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 81af 	beq.w	800d150 <_dtoa_r+0xa70>
 800cdf2:	6922      	ldr	r2, [r4, #16]
 800cdf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cdf8:	6910      	ldr	r0, [r2, #16]
 800cdfa:	f000 fbb9 	bl	800d570 <__hi0bits>
 800cdfe:	f1c0 0020 	rsb	r0, r0, #32
 800ce02:	9b06      	ldr	r3, [sp, #24]
 800ce04:	4418      	add	r0, r3
 800ce06:	f010 001f 	ands.w	r0, r0, #31
 800ce0a:	d076      	beq.n	800cefa <_dtoa_r+0x81a>
 800ce0c:	f1c0 0220 	rsb	r2, r0, #32
 800ce10:	2a04      	cmp	r2, #4
 800ce12:	dd69      	ble.n	800cee8 <_dtoa_r+0x808>
 800ce14:	9b05      	ldr	r3, [sp, #20]
 800ce16:	f1c0 001c 	rsb	r0, r0, #28
 800ce1a:	4403      	add	r3, r0
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	9b06      	ldr	r3, [sp, #24]
 800ce20:	4406      	add	r6, r0
 800ce22:	4403      	add	r3, r0
 800ce24:	9306      	str	r3, [sp, #24]
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	dd05      	ble.n	800ce38 <_dtoa_r+0x758>
 800ce2c:	9901      	ldr	r1, [sp, #4]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4648      	mov	r0, r9
 800ce32:	f000 fd03 	bl	800d83c <__lshift>
 800ce36:	9001      	str	r0, [sp, #4]
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	dd05      	ble.n	800ce4a <_dtoa_r+0x76a>
 800ce3e:	4621      	mov	r1, r4
 800ce40:	461a      	mov	r2, r3
 800ce42:	4648      	mov	r0, r9
 800ce44:	f000 fcfa 	bl	800d83c <__lshift>
 800ce48:	4604      	mov	r4, r0
 800ce4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d056      	beq.n	800cefe <_dtoa_r+0x81e>
 800ce50:	9801      	ldr	r0, [sp, #4]
 800ce52:	4621      	mov	r1, r4
 800ce54:	f000 fd5e 	bl	800d914 <__mcmp>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	da50      	bge.n	800cefe <_dtoa_r+0x81e>
 800ce5c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	9901      	ldr	r1, [sp, #4]
 800ce64:	2300      	movs	r3, #0
 800ce66:	220a      	movs	r2, #10
 800ce68:	4648      	mov	r0, r9
 800ce6a:	f000 faf1 	bl	800d450 <__multadd>
 800ce6e:	9b08      	ldr	r3, [sp, #32]
 800ce70:	9001      	str	r0, [sp, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f000 816e 	beq.w	800d154 <_dtoa_r+0xa74>
 800ce78:	4629      	mov	r1, r5
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	220a      	movs	r2, #10
 800ce7e:	4648      	mov	r0, r9
 800ce80:	f000 fae6 	bl	800d450 <__multadd>
 800ce84:	f1bb 0f00 	cmp.w	fp, #0
 800ce88:	4605      	mov	r5, r0
 800ce8a:	dc64      	bgt.n	800cf56 <_dtoa_r+0x876>
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	dc3e      	bgt.n	800cf10 <_dtoa_r+0x830>
 800ce92:	e060      	b.n	800cf56 <_dtoa_r+0x876>
 800ce94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce9a:	e73c      	b.n	800cd16 <_dtoa_r+0x636>
 800ce9c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	bfbf      	itttt	lt
 800cea4:	1ae2      	sublt	r2, r4, r3
 800cea6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cea8:	189b      	addlt	r3, r3, r2
 800ceaa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ceac:	bfae      	itee	ge
 800ceae:	1b1c      	subge	r4, r3, r4
 800ceb0:	4623      	movlt	r3, r4
 800ceb2:	2400      	movlt	r4, #0
 800ceb4:	f1ba 0f00 	cmp.w	sl, #0
 800ceb8:	bfb5      	itete	lt
 800ceba:	9a05      	ldrlt	r2, [sp, #20]
 800cebc:	9e05      	ldrge	r6, [sp, #20]
 800cebe:	eba2 060a 	sublt.w	r6, r2, sl
 800cec2:	4652      	movge	r2, sl
 800cec4:	bfb8      	it	lt
 800cec6:	2200      	movlt	r2, #0
 800cec8:	e727      	b.n	800cd1a <_dtoa_r+0x63a>
 800ceca:	9e05      	ldr	r6, [sp, #20]
 800cecc:	9d08      	ldr	r5, [sp, #32]
 800cece:	461c      	mov	r4, r3
 800ced0:	e730      	b.n	800cd34 <_dtoa_r+0x654>
 800ced2:	461a      	mov	r2, r3
 800ced4:	e758      	b.n	800cd88 <_dtoa_r+0x6a8>
 800ced6:	2300      	movs	r3, #0
 800ced8:	e786      	b.n	800cde8 <_dtoa_r+0x708>
 800ceda:	9b02      	ldr	r3, [sp, #8]
 800cedc:	e784      	b.n	800cde8 <_dtoa_r+0x708>
 800cede:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cee0:	e783      	b.n	800cdea <_dtoa_r+0x70a>
 800cee2:	2300      	movs	r3, #0
 800cee4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cee6:	e784      	b.n	800cdf2 <_dtoa_r+0x712>
 800cee8:	d09d      	beq.n	800ce26 <_dtoa_r+0x746>
 800ceea:	9b05      	ldr	r3, [sp, #20]
 800ceec:	321c      	adds	r2, #28
 800ceee:	4413      	add	r3, r2
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	9b06      	ldr	r3, [sp, #24]
 800cef4:	4416      	add	r6, r2
 800cef6:	4413      	add	r3, r2
 800cef8:	e794      	b.n	800ce24 <_dtoa_r+0x744>
 800cefa:	4602      	mov	r2, r0
 800cefc:	e7f5      	b.n	800ceea <_dtoa_r+0x80a>
 800cefe:	f1ba 0f00 	cmp.w	sl, #0
 800cf02:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf06:	46d3      	mov	fp, sl
 800cf08:	dc21      	bgt.n	800cf4e <_dtoa_r+0x86e>
 800cf0a:	9b07      	ldr	r3, [sp, #28]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	dd1e      	ble.n	800cf4e <_dtoa_r+0x86e>
 800cf10:	f1bb 0f00 	cmp.w	fp, #0
 800cf14:	f47f aeb7 	bne.w	800cc86 <_dtoa_r+0x5a6>
 800cf18:	4621      	mov	r1, r4
 800cf1a:	465b      	mov	r3, fp
 800cf1c:	2205      	movs	r2, #5
 800cf1e:	4648      	mov	r0, r9
 800cf20:	f000 fa96 	bl	800d450 <__multadd>
 800cf24:	4601      	mov	r1, r0
 800cf26:	4604      	mov	r4, r0
 800cf28:	9801      	ldr	r0, [sp, #4]
 800cf2a:	f000 fcf3 	bl	800d914 <__mcmp>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f77f aea9 	ble.w	800cc86 <_dtoa_r+0x5a6>
 800cf34:	463e      	mov	r6, r7
 800cf36:	2331      	movs	r3, #49	@ 0x31
 800cf38:	f806 3b01 	strb.w	r3, [r6], #1
 800cf3c:	9b04      	ldr	r3, [sp, #16]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	e6a4      	b.n	800cc8e <_dtoa_r+0x5ae>
 800cf44:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf48:	4654      	mov	r4, sl
 800cf4a:	4625      	mov	r5, r4
 800cf4c:	e7f2      	b.n	800cf34 <_dtoa_r+0x854>
 800cf4e:	9b08      	ldr	r3, [sp, #32]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 8103 	beq.w	800d15c <_dtoa_r+0xa7c>
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	dd05      	ble.n	800cf66 <_dtoa_r+0x886>
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	4632      	mov	r2, r6
 800cf5e:	4648      	mov	r0, r9
 800cf60:	f000 fc6c 	bl	800d83c <__lshift>
 800cf64:	4605      	mov	r5, r0
 800cf66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d058      	beq.n	800d01e <_dtoa_r+0x93e>
 800cf6c:	6869      	ldr	r1, [r5, #4]
 800cf6e:	4648      	mov	r0, r9
 800cf70:	f000 fa0c 	bl	800d38c <_Balloc>
 800cf74:	4606      	mov	r6, r0
 800cf76:	b928      	cbnz	r0, 800cf84 <_dtoa_r+0x8a4>
 800cf78:	4b82      	ldr	r3, [pc, #520]	@ (800d184 <_dtoa_r+0xaa4>)
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf80:	f7ff bbc7 	b.w	800c712 <_dtoa_r+0x32>
 800cf84:	692a      	ldr	r2, [r5, #16]
 800cf86:	3202      	adds	r2, #2
 800cf88:	0092      	lsls	r2, r2, #2
 800cf8a:	f105 010c 	add.w	r1, r5, #12
 800cf8e:	300c      	adds	r0, #12
 800cf90:	f001 fe90 	bl	800ecb4 <memcpy>
 800cf94:	2201      	movs	r2, #1
 800cf96:	4631      	mov	r1, r6
 800cf98:	4648      	mov	r0, r9
 800cf9a:	f000 fc4f 	bl	800d83c <__lshift>
 800cf9e:	1c7b      	adds	r3, r7, #1
 800cfa0:	9305      	str	r3, [sp, #20]
 800cfa2:	eb07 030b 	add.w	r3, r7, fp
 800cfa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfa8:	9b02      	ldr	r3, [sp, #8]
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	46a8      	mov	r8, r5
 800cfb0:	9308      	str	r3, [sp, #32]
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	9b05      	ldr	r3, [sp, #20]
 800cfb6:	9801      	ldr	r0, [sp, #4]
 800cfb8:	4621      	mov	r1, r4
 800cfba:	f103 3bff 	add.w	fp, r3, #4294967295
 800cfbe:	f7ff fb05 	bl	800c5cc <quorem>
 800cfc2:	4641      	mov	r1, r8
 800cfc4:	9002      	str	r0, [sp, #8]
 800cfc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cfca:	9801      	ldr	r0, [sp, #4]
 800cfcc:	f000 fca2 	bl	800d914 <__mcmp>
 800cfd0:	462a      	mov	r2, r5
 800cfd2:	9006      	str	r0, [sp, #24]
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	f000 fcb8 	bl	800d94c <__mdiff>
 800cfdc:	68c2      	ldr	r2, [r0, #12]
 800cfde:	4606      	mov	r6, r0
 800cfe0:	b9fa      	cbnz	r2, 800d022 <_dtoa_r+0x942>
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	9801      	ldr	r0, [sp, #4]
 800cfe6:	f000 fc95 	bl	800d914 <__mcmp>
 800cfea:	4602      	mov	r2, r0
 800cfec:	4631      	mov	r1, r6
 800cfee:	4648      	mov	r0, r9
 800cff0:	920a      	str	r2, [sp, #40]	@ 0x28
 800cff2:	f000 fa0b 	bl	800d40c <_Bfree>
 800cff6:	9b07      	ldr	r3, [sp, #28]
 800cff8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cffa:	9e05      	ldr	r6, [sp, #20]
 800cffc:	ea43 0102 	orr.w	r1, r3, r2
 800d000:	9b08      	ldr	r3, [sp, #32]
 800d002:	4319      	orrs	r1, r3
 800d004:	d10f      	bne.n	800d026 <_dtoa_r+0x946>
 800d006:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d00a:	d028      	beq.n	800d05e <_dtoa_r+0x97e>
 800d00c:	9b06      	ldr	r3, [sp, #24]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	dd02      	ble.n	800d018 <_dtoa_r+0x938>
 800d012:	9b02      	ldr	r3, [sp, #8]
 800d014:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d018:	f88b a000 	strb.w	sl, [fp]
 800d01c:	e639      	b.n	800cc92 <_dtoa_r+0x5b2>
 800d01e:	4628      	mov	r0, r5
 800d020:	e7bd      	b.n	800cf9e <_dtoa_r+0x8be>
 800d022:	2201      	movs	r2, #1
 800d024:	e7e2      	b.n	800cfec <_dtoa_r+0x90c>
 800d026:	9b06      	ldr	r3, [sp, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	db04      	blt.n	800d036 <_dtoa_r+0x956>
 800d02c:	9907      	ldr	r1, [sp, #28]
 800d02e:	430b      	orrs	r3, r1
 800d030:	9908      	ldr	r1, [sp, #32]
 800d032:	430b      	orrs	r3, r1
 800d034:	d120      	bne.n	800d078 <_dtoa_r+0x998>
 800d036:	2a00      	cmp	r2, #0
 800d038:	ddee      	ble.n	800d018 <_dtoa_r+0x938>
 800d03a:	9901      	ldr	r1, [sp, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	4648      	mov	r0, r9
 800d040:	f000 fbfc 	bl	800d83c <__lshift>
 800d044:	4621      	mov	r1, r4
 800d046:	9001      	str	r0, [sp, #4]
 800d048:	f000 fc64 	bl	800d914 <__mcmp>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	dc03      	bgt.n	800d058 <_dtoa_r+0x978>
 800d050:	d1e2      	bne.n	800d018 <_dtoa_r+0x938>
 800d052:	f01a 0f01 	tst.w	sl, #1
 800d056:	d0df      	beq.n	800d018 <_dtoa_r+0x938>
 800d058:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d05c:	d1d9      	bne.n	800d012 <_dtoa_r+0x932>
 800d05e:	2339      	movs	r3, #57	@ 0x39
 800d060:	f88b 3000 	strb.w	r3, [fp]
 800d064:	4633      	mov	r3, r6
 800d066:	461e      	mov	r6, r3
 800d068:	3b01      	subs	r3, #1
 800d06a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d06e:	2a39      	cmp	r2, #57	@ 0x39
 800d070:	d053      	beq.n	800d11a <_dtoa_r+0xa3a>
 800d072:	3201      	adds	r2, #1
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	e60c      	b.n	800cc92 <_dtoa_r+0x5b2>
 800d078:	2a00      	cmp	r2, #0
 800d07a:	dd07      	ble.n	800d08c <_dtoa_r+0x9ac>
 800d07c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d080:	d0ed      	beq.n	800d05e <_dtoa_r+0x97e>
 800d082:	f10a 0301 	add.w	r3, sl, #1
 800d086:	f88b 3000 	strb.w	r3, [fp]
 800d08a:	e602      	b.n	800cc92 <_dtoa_r+0x5b2>
 800d08c:	9b05      	ldr	r3, [sp, #20]
 800d08e:	9a05      	ldr	r2, [sp, #20]
 800d090:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d096:	4293      	cmp	r3, r2
 800d098:	d029      	beq.n	800d0ee <_dtoa_r+0xa0e>
 800d09a:	9901      	ldr	r1, [sp, #4]
 800d09c:	2300      	movs	r3, #0
 800d09e:	220a      	movs	r2, #10
 800d0a0:	4648      	mov	r0, r9
 800d0a2:	f000 f9d5 	bl	800d450 <__multadd>
 800d0a6:	45a8      	cmp	r8, r5
 800d0a8:	9001      	str	r0, [sp, #4]
 800d0aa:	f04f 0300 	mov.w	r3, #0
 800d0ae:	f04f 020a 	mov.w	r2, #10
 800d0b2:	4641      	mov	r1, r8
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	d107      	bne.n	800d0c8 <_dtoa_r+0x9e8>
 800d0b8:	f000 f9ca 	bl	800d450 <__multadd>
 800d0bc:	4680      	mov	r8, r0
 800d0be:	4605      	mov	r5, r0
 800d0c0:	9b05      	ldr	r3, [sp, #20]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	9305      	str	r3, [sp, #20]
 800d0c6:	e775      	b.n	800cfb4 <_dtoa_r+0x8d4>
 800d0c8:	f000 f9c2 	bl	800d450 <__multadd>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	220a      	movs	r2, #10
 800d0d4:	4648      	mov	r0, r9
 800d0d6:	f000 f9bb 	bl	800d450 <__multadd>
 800d0da:	4605      	mov	r5, r0
 800d0dc:	e7f0      	b.n	800d0c0 <_dtoa_r+0x9e0>
 800d0de:	f1bb 0f00 	cmp.w	fp, #0
 800d0e2:	bfcc      	ite	gt
 800d0e4:	465e      	movgt	r6, fp
 800d0e6:	2601      	movle	r6, #1
 800d0e8:	443e      	add	r6, r7
 800d0ea:	f04f 0800 	mov.w	r8, #0
 800d0ee:	9901      	ldr	r1, [sp, #4]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	4648      	mov	r0, r9
 800d0f4:	f000 fba2 	bl	800d83c <__lshift>
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	9001      	str	r0, [sp, #4]
 800d0fc:	f000 fc0a 	bl	800d914 <__mcmp>
 800d100:	2800      	cmp	r0, #0
 800d102:	dcaf      	bgt.n	800d064 <_dtoa_r+0x984>
 800d104:	d102      	bne.n	800d10c <_dtoa_r+0xa2c>
 800d106:	f01a 0f01 	tst.w	sl, #1
 800d10a:	d1ab      	bne.n	800d064 <_dtoa_r+0x984>
 800d10c:	4633      	mov	r3, r6
 800d10e:	461e      	mov	r6, r3
 800d110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d114:	2a30      	cmp	r2, #48	@ 0x30
 800d116:	d0fa      	beq.n	800d10e <_dtoa_r+0xa2e>
 800d118:	e5bb      	b.n	800cc92 <_dtoa_r+0x5b2>
 800d11a:	429f      	cmp	r7, r3
 800d11c:	d1a3      	bne.n	800d066 <_dtoa_r+0x986>
 800d11e:	9b04      	ldr	r3, [sp, #16]
 800d120:	3301      	adds	r3, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	2331      	movs	r3, #49	@ 0x31
 800d126:	703b      	strb	r3, [r7, #0]
 800d128:	e5b3      	b.n	800cc92 <_dtoa_r+0x5b2>
 800d12a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d12c:	4f16      	ldr	r7, [pc, #88]	@ (800d188 <_dtoa_r+0xaa8>)
 800d12e:	b11b      	cbz	r3, 800d138 <_dtoa_r+0xa58>
 800d130:	f107 0308 	add.w	r3, r7, #8
 800d134:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	4638      	mov	r0, r7
 800d13a:	b011      	add	sp, #68	@ 0x44
 800d13c:	ecbd 8b02 	vpop	{d8}
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	9b07      	ldr	r3, [sp, #28]
 800d146:	2b01      	cmp	r3, #1
 800d148:	f77f ae36 	ble.w	800cdb8 <_dtoa_r+0x6d8>
 800d14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d14e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d150:	2001      	movs	r0, #1
 800d152:	e656      	b.n	800ce02 <_dtoa_r+0x722>
 800d154:	f1bb 0f00 	cmp.w	fp, #0
 800d158:	f77f aed7 	ble.w	800cf0a <_dtoa_r+0x82a>
 800d15c:	463e      	mov	r6, r7
 800d15e:	9801      	ldr	r0, [sp, #4]
 800d160:	4621      	mov	r1, r4
 800d162:	f7ff fa33 	bl	800c5cc <quorem>
 800d166:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d16a:	f806 ab01 	strb.w	sl, [r6], #1
 800d16e:	1bf2      	subs	r2, r6, r7
 800d170:	4593      	cmp	fp, r2
 800d172:	ddb4      	ble.n	800d0de <_dtoa_r+0x9fe>
 800d174:	9901      	ldr	r1, [sp, #4]
 800d176:	2300      	movs	r3, #0
 800d178:	220a      	movs	r2, #10
 800d17a:	4648      	mov	r0, r9
 800d17c:	f000 f968 	bl	800d450 <__multadd>
 800d180:	9001      	str	r0, [sp, #4]
 800d182:	e7ec      	b.n	800d15e <_dtoa_r+0xa7e>
 800d184:	0800fc46 	.word	0x0800fc46
 800d188:	0800fbca 	.word	0x0800fbca

0800d18c <_free_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4605      	mov	r5, r0
 800d190:	2900      	cmp	r1, #0
 800d192:	d041      	beq.n	800d218 <_free_r+0x8c>
 800d194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d198:	1f0c      	subs	r4, r1, #4
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bfb8      	it	lt
 800d19e:	18e4      	addlt	r4, r4, r3
 800d1a0:	f000 f8e8 	bl	800d374 <__malloc_lock>
 800d1a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d21c <_free_r+0x90>)
 800d1a6:	6813      	ldr	r3, [r2, #0]
 800d1a8:	b933      	cbnz	r3, 800d1b8 <_free_r+0x2c>
 800d1aa:	6063      	str	r3, [r4, #4]
 800d1ac:	6014      	str	r4, [r2, #0]
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b4:	f000 b8e4 	b.w	800d380 <__malloc_unlock>
 800d1b8:	42a3      	cmp	r3, r4
 800d1ba:	d908      	bls.n	800d1ce <_free_r+0x42>
 800d1bc:	6820      	ldr	r0, [r4, #0]
 800d1be:	1821      	adds	r1, r4, r0
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	bf01      	itttt	eq
 800d1c4:	6819      	ldreq	r1, [r3, #0]
 800d1c6:	685b      	ldreq	r3, [r3, #4]
 800d1c8:	1809      	addeq	r1, r1, r0
 800d1ca:	6021      	streq	r1, [r4, #0]
 800d1cc:	e7ed      	b.n	800d1aa <_free_r+0x1e>
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	b10b      	cbz	r3, 800d1d8 <_free_r+0x4c>
 800d1d4:	42a3      	cmp	r3, r4
 800d1d6:	d9fa      	bls.n	800d1ce <_free_r+0x42>
 800d1d8:	6811      	ldr	r1, [r2, #0]
 800d1da:	1850      	adds	r0, r2, r1
 800d1dc:	42a0      	cmp	r0, r4
 800d1de:	d10b      	bne.n	800d1f8 <_free_r+0x6c>
 800d1e0:	6820      	ldr	r0, [r4, #0]
 800d1e2:	4401      	add	r1, r0
 800d1e4:	1850      	adds	r0, r2, r1
 800d1e6:	4283      	cmp	r3, r0
 800d1e8:	6011      	str	r1, [r2, #0]
 800d1ea:	d1e0      	bne.n	800d1ae <_free_r+0x22>
 800d1ec:	6818      	ldr	r0, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	6053      	str	r3, [r2, #4]
 800d1f2:	4408      	add	r0, r1
 800d1f4:	6010      	str	r0, [r2, #0]
 800d1f6:	e7da      	b.n	800d1ae <_free_r+0x22>
 800d1f8:	d902      	bls.n	800d200 <_free_r+0x74>
 800d1fa:	230c      	movs	r3, #12
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	e7d6      	b.n	800d1ae <_free_r+0x22>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	1821      	adds	r1, r4, r0
 800d204:	428b      	cmp	r3, r1
 800d206:	bf04      	itt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	6063      	str	r3, [r4, #4]
 800d20e:	bf04      	itt	eq
 800d210:	1809      	addeq	r1, r1, r0
 800d212:	6021      	streq	r1, [r4, #0]
 800d214:	6054      	str	r4, [r2, #4]
 800d216:	e7ca      	b.n	800d1ae <_free_r+0x22>
 800d218:	bd38      	pop	{r3, r4, r5, pc}
 800d21a:	bf00      	nop
 800d21c:	24000510 	.word	0x24000510

0800d220 <malloc>:
 800d220:	4b02      	ldr	r3, [pc, #8]	@ (800d22c <malloc+0xc>)
 800d222:	4601      	mov	r1, r0
 800d224:	6818      	ldr	r0, [r3, #0]
 800d226:	f000 b825 	b.w	800d274 <_malloc_r>
 800d22a:	bf00      	nop
 800d22c:	2400002c 	.word	0x2400002c

0800d230 <sbrk_aligned>:
 800d230:	b570      	push	{r4, r5, r6, lr}
 800d232:	4e0f      	ldr	r6, [pc, #60]	@ (800d270 <sbrk_aligned+0x40>)
 800d234:	460c      	mov	r4, r1
 800d236:	6831      	ldr	r1, [r6, #0]
 800d238:	4605      	mov	r5, r0
 800d23a:	b911      	cbnz	r1, 800d242 <sbrk_aligned+0x12>
 800d23c:	f001 fd2a 	bl	800ec94 <_sbrk_r>
 800d240:	6030      	str	r0, [r6, #0]
 800d242:	4621      	mov	r1, r4
 800d244:	4628      	mov	r0, r5
 800d246:	f001 fd25 	bl	800ec94 <_sbrk_r>
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	d103      	bne.n	800d256 <sbrk_aligned+0x26>
 800d24e:	f04f 34ff 	mov.w	r4, #4294967295
 800d252:	4620      	mov	r0, r4
 800d254:	bd70      	pop	{r4, r5, r6, pc}
 800d256:	1cc4      	adds	r4, r0, #3
 800d258:	f024 0403 	bic.w	r4, r4, #3
 800d25c:	42a0      	cmp	r0, r4
 800d25e:	d0f8      	beq.n	800d252 <sbrk_aligned+0x22>
 800d260:	1a21      	subs	r1, r4, r0
 800d262:	4628      	mov	r0, r5
 800d264:	f001 fd16 	bl	800ec94 <_sbrk_r>
 800d268:	3001      	adds	r0, #1
 800d26a:	d1f2      	bne.n	800d252 <sbrk_aligned+0x22>
 800d26c:	e7ef      	b.n	800d24e <sbrk_aligned+0x1e>
 800d26e:	bf00      	nop
 800d270:	2400050c 	.word	0x2400050c

0800d274 <_malloc_r>:
 800d274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d278:	1ccd      	adds	r5, r1, #3
 800d27a:	f025 0503 	bic.w	r5, r5, #3
 800d27e:	3508      	adds	r5, #8
 800d280:	2d0c      	cmp	r5, #12
 800d282:	bf38      	it	cc
 800d284:	250c      	movcc	r5, #12
 800d286:	2d00      	cmp	r5, #0
 800d288:	4606      	mov	r6, r0
 800d28a:	db01      	blt.n	800d290 <_malloc_r+0x1c>
 800d28c:	42a9      	cmp	r1, r5
 800d28e:	d904      	bls.n	800d29a <_malloc_r+0x26>
 800d290:	230c      	movs	r3, #12
 800d292:	6033      	str	r3, [r6, #0]
 800d294:	2000      	movs	r0, #0
 800d296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d29a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d370 <_malloc_r+0xfc>
 800d29e:	f000 f869 	bl	800d374 <__malloc_lock>
 800d2a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a6:	461c      	mov	r4, r3
 800d2a8:	bb44      	cbnz	r4, 800d2fc <_malloc_r+0x88>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7ff ffbf 	bl	800d230 <sbrk_aligned>
 800d2b2:	1c43      	adds	r3, r0, #1
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	d158      	bne.n	800d36a <_malloc_r+0xf6>
 800d2b8:	f8d8 4000 	ldr.w	r4, [r8]
 800d2bc:	4627      	mov	r7, r4
 800d2be:	2f00      	cmp	r7, #0
 800d2c0:	d143      	bne.n	800d34a <_malloc_r+0xd6>
 800d2c2:	2c00      	cmp	r4, #0
 800d2c4:	d04b      	beq.n	800d35e <_malloc_r+0xea>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	eb04 0903 	add.w	r9, r4, r3
 800d2d0:	f001 fce0 	bl	800ec94 <_sbrk_r>
 800d2d4:	4581      	cmp	r9, r0
 800d2d6:	d142      	bne.n	800d35e <_malloc_r+0xea>
 800d2d8:	6821      	ldr	r1, [r4, #0]
 800d2da:	1a6d      	subs	r5, r5, r1
 800d2dc:	4629      	mov	r1, r5
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7ff ffa6 	bl	800d230 <sbrk_aligned>
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d03a      	beq.n	800d35e <_malloc_r+0xea>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	442b      	add	r3, r5
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f2:	685a      	ldr	r2, [r3, #4]
 800d2f4:	bb62      	cbnz	r2, 800d350 <_malloc_r+0xdc>
 800d2f6:	f8c8 7000 	str.w	r7, [r8]
 800d2fa:	e00f      	b.n	800d31c <_malloc_r+0xa8>
 800d2fc:	6822      	ldr	r2, [r4, #0]
 800d2fe:	1b52      	subs	r2, r2, r5
 800d300:	d420      	bmi.n	800d344 <_malloc_r+0xd0>
 800d302:	2a0b      	cmp	r2, #11
 800d304:	d917      	bls.n	800d336 <_malloc_r+0xc2>
 800d306:	1961      	adds	r1, r4, r5
 800d308:	42a3      	cmp	r3, r4
 800d30a:	6025      	str	r5, [r4, #0]
 800d30c:	bf18      	it	ne
 800d30e:	6059      	strne	r1, [r3, #4]
 800d310:	6863      	ldr	r3, [r4, #4]
 800d312:	bf08      	it	eq
 800d314:	f8c8 1000 	streq.w	r1, [r8]
 800d318:	5162      	str	r2, [r4, r5]
 800d31a:	604b      	str	r3, [r1, #4]
 800d31c:	4630      	mov	r0, r6
 800d31e:	f000 f82f 	bl	800d380 <__malloc_unlock>
 800d322:	f104 000b 	add.w	r0, r4, #11
 800d326:	1d23      	adds	r3, r4, #4
 800d328:	f020 0007 	bic.w	r0, r0, #7
 800d32c:	1ac2      	subs	r2, r0, r3
 800d32e:	bf1c      	itt	ne
 800d330:	1a1b      	subne	r3, r3, r0
 800d332:	50a3      	strne	r3, [r4, r2]
 800d334:	e7af      	b.n	800d296 <_malloc_r+0x22>
 800d336:	6862      	ldr	r2, [r4, #4]
 800d338:	42a3      	cmp	r3, r4
 800d33a:	bf0c      	ite	eq
 800d33c:	f8c8 2000 	streq.w	r2, [r8]
 800d340:	605a      	strne	r2, [r3, #4]
 800d342:	e7eb      	b.n	800d31c <_malloc_r+0xa8>
 800d344:	4623      	mov	r3, r4
 800d346:	6864      	ldr	r4, [r4, #4]
 800d348:	e7ae      	b.n	800d2a8 <_malloc_r+0x34>
 800d34a:	463c      	mov	r4, r7
 800d34c:	687f      	ldr	r7, [r7, #4]
 800d34e:	e7b6      	b.n	800d2be <_malloc_r+0x4a>
 800d350:	461a      	mov	r2, r3
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	42a3      	cmp	r3, r4
 800d356:	d1fb      	bne.n	800d350 <_malloc_r+0xdc>
 800d358:	2300      	movs	r3, #0
 800d35a:	6053      	str	r3, [r2, #4]
 800d35c:	e7de      	b.n	800d31c <_malloc_r+0xa8>
 800d35e:	230c      	movs	r3, #12
 800d360:	6033      	str	r3, [r6, #0]
 800d362:	4630      	mov	r0, r6
 800d364:	f000 f80c 	bl	800d380 <__malloc_unlock>
 800d368:	e794      	b.n	800d294 <_malloc_r+0x20>
 800d36a:	6005      	str	r5, [r0, #0]
 800d36c:	e7d6      	b.n	800d31c <_malloc_r+0xa8>
 800d36e:	bf00      	nop
 800d370:	24000510 	.word	0x24000510

0800d374 <__malloc_lock>:
 800d374:	4801      	ldr	r0, [pc, #4]	@ (800d37c <__malloc_lock+0x8>)
 800d376:	f7ff b920 	b.w	800c5ba <__retarget_lock_acquire_recursive>
 800d37a:	bf00      	nop
 800d37c:	24000508 	.word	0x24000508

0800d380 <__malloc_unlock>:
 800d380:	4801      	ldr	r0, [pc, #4]	@ (800d388 <__malloc_unlock+0x8>)
 800d382:	f7ff b91b 	b.w	800c5bc <__retarget_lock_release_recursive>
 800d386:	bf00      	nop
 800d388:	24000508 	.word	0x24000508

0800d38c <_Balloc>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	69c6      	ldr	r6, [r0, #28]
 800d390:	4604      	mov	r4, r0
 800d392:	460d      	mov	r5, r1
 800d394:	b976      	cbnz	r6, 800d3b4 <_Balloc+0x28>
 800d396:	2010      	movs	r0, #16
 800d398:	f7ff ff42 	bl	800d220 <malloc>
 800d39c:	4602      	mov	r2, r0
 800d39e:	61e0      	str	r0, [r4, #28]
 800d3a0:	b920      	cbnz	r0, 800d3ac <_Balloc+0x20>
 800d3a2:	4b18      	ldr	r3, [pc, #96]	@ (800d404 <_Balloc+0x78>)
 800d3a4:	4818      	ldr	r0, [pc, #96]	@ (800d408 <_Balloc+0x7c>)
 800d3a6:	216b      	movs	r1, #107	@ 0x6b
 800d3a8:	f001 fc9a 	bl	800ece0 <__assert_func>
 800d3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b0:	6006      	str	r6, [r0, #0]
 800d3b2:	60c6      	str	r6, [r0, #12]
 800d3b4:	69e6      	ldr	r6, [r4, #28]
 800d3b6:	68f3      	ldr	r3, [r6, #12]
 800d3b8:	b183      	cbz	r3, 800d3dc <_Balloc+0x50>
 800d3ba:	69e3      	ldr	r3, [r4, #28]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c2:	b9b8      	cbnz	r0, 800d3f4 <_Balloc+0x68>
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ca:	1d72      	adds	r2, r6, #5
 800d3cc:	0092      	lsls	r2, r2, #2
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f001 fca4 	bl	800ed1c <_calloc_r>
 800d3d4:	b160      	cbz	r0, 800d3f0 <_Balloc+0x64>
 800d3d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3da:	e00e      	b.n	800d3fa <_Balloc+0x6e>
 800d3dc:	2221      	movs	r2, #33	@ 0x21
 800d3de:	2104      	movs	r1, #4
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f001 fc9b 	bl	800ed1c <_calloc_r>
 800d3e6:	69e3      	ldr	r3, [r4, #28]
 800d3e8:	60f0      	str	r0, [r6, #12]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e4      	bne.n	800d3ba <_Balloc+0x2e>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	6802      	ldr	r2, [r0, #0]
 800d3f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d400:	e7f7      	b.n	800d3f2 <_Balloc+0x66>
 800d402:	bf00      	nop
 800d404:	0800fbd7 	.word	0x0800fbd7
 800d408:	0800fc57 	.word	0x0800fc57

0800d40c <_Bfree>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	69c6      	ldr	r6, [r0, #28]
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	b976      	cbnz	r6, 800d434 <_Bfree+0x28>
 800d416:	2010      	movs	r0, #16
 800d418:	f7ff ff02 	bl	800d220 <malloc>
 800d41c:	4602      	mov	r2, r0
 800d41e:	61e8      	str	r0, [r5, #28]
 800d420:	b920      	cbnz	r0, 800d42c <_Bfree+0x20>
 800d422:	4b09      	ldr	r3, [pc, #36]	@ (800d448 <_Bfree+0x3c>)
 800d424:	4809      	ldr	r0, [pc, #36]	@ (800d44c <_Bfree+0x40>)
 800d426:	218f      	movs	r1, #143	@ 0x8f
 800d428:	f001 fc5a 	bl	800ece0 <__assert_func>
 800d42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d430:	6006      	str	r6, [r0, #0]
 800d432:	60c6      	str	r6, [r0, #12]
 800d434:	b13c      	cbz	r4, 800d446 <_Bfree+0x3a>
 800d436:	69eb      	ldr	r3, [r5, #28]
 800d438:	6862      	ldr	r2, [r4, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d440:	6021      	str	r1, [r4, #0]
 800d442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	0800fbd7 	.word	0x0800fbd7
 800d44c:	0800fc57 	.word	0x0800fc57

0800d450 <__multadd>:
 800d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d454:	690d      	ldr	r5, [r1, #16]
 800d456:	4607      	mov	r7, r0
 800d458:	460c      	mov	r4, r1
 800d45a:	461e      	mov	r6, r3
 800d45c:	f101 0c14 	add.w	ip, r1, #20
 800d460:	2000      	movs	r0, #0
 800d462:	f8dc 3000 	ldr.w	r3, [ip]
 800d466:	b299      	uxth	r1, r3
 800d468:	fb02 6101 	mla	r1, r2, r1, r6
 800d46c:	0c1e      	lsrs	r6, r3, #16
 800d46e:	0c0b      	lsrs	r3, r1, #16
 800d470:	fb02 3306 	mla	r3, r2, r6, r3
 800d474:	b289      	uxth	r1, r1
 800d476:	3001      	adds	r0, #1
 800d478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d47c:	4285      	cmp	r5, r0
 800d47e:	f84c 1b04 	str.w	r1, [ip], #4
 800d482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d486:	dcec      	bgt.n	800d462 <__multadd+0x12>
 800d488:	b30e      	cbz	r6, 800d4ce <__multadd+0x7e>
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dc19      	bgt.n	800d4c4 <__multadd+0x74>
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	4638      	mov	r0, r7
 800d494:	3101      	adds	r1, #1
 800d496:	f7ff ff79 	bl	800d38c <_Balloc>
 800d49a:	4680      	mov	r8, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <__multadd+0x5a>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d4 <__multadd+0x84>)
 800d4a2:	480d      	ldr	r0, [pc, #52]	@ (800d4d8 <__multadd+0x88>)
 800d4a4:	21ba      	movs	r1, #186	@ 0xba
 800d4a6:	f001 fc1b 	bl	800ece0 <__assert_func>
 800d4aa:	6922      	ldr	r2, [r4, #16]
 800d4ac:	3202      	adds	r2, #2
 800d4ae:	f104 010c 	add.w	r1, r4, #12
 800d4b2:	0092      	lsls	r2, r2, #2
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f001 fbfd 	bl	800ecb4 <memcpy>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ffa5 	bl	800d40c <_Bfree>
 800d4c2:	4644      	mov	r4, r8
 800d4c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	615e      	str	r6, [r3, #20]
 800d4cc:	6125      	str	r5, [r4, #16]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	0800fc46 	.word	0x0800fc46
 800d4d8:	0800fc57 	.word	0x0800fc57

0800d4dc <__s2b>:
 800d4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e0:	460c      	mov	r4, r1
 800d4e2:	4615      	mov	r5, r2
 800d4e4:	461f      	mov	r7, r3
 800d4e6:	2209      	movs	r2, #9
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	db09      	blt.n	800d50c <__s2b+0x30>
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f7ff ff47 	bl	800d38c <_Balloc>
 800d4fe:	b940      	cbnz	r0, 800d512 <__s2b+0x36>
 800d500:	4602      	mov	r2, r0
 800d502:	4b19      	ldr	r3, [pc, #100]	@ (800d568 <__s2b+0x8c>)
 800d504:	4819      	ldr	r0, [pc, #100]	@ (800d56c <__s2b+0x90>)
 800d506:	21d3      	movs	r1, #211	@ 0xd3
 800d508:	f001 fbea 	bl	800ece0 <__assert_func>
 800d50c:	0052      	lsls	r2, r2, #1
 800d50e:	3101      	adds	r1, #1
 800d510:	e7f0      	b.n	800d4f4 <__s2b+0x18>
 800d512:	9b08      	ldr	r3, [sp, #32]
 800d514:	6143      	str	r3, [r0, #20]
 800d516:	2d09      	cmp	r5, #9
 800d518:	f04f 0301 	mov.w	r3, #1
 800d51c:	6103      	str	r3, [r0, #16]
 800d51e:	dd16      	ble.n	800d54e <__s2b+0x72>
 800d520:	f104 0909 	add.w	r9, r4, #9
 800d524:	46c8      	mov	r8, r9
 800d526:	442c      	add	r4, r5
 800d528:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d52c:	4601      	mov	r1, r0
 800d52e:	3b30      	subs	r3, #48	@ 0x30
 800d530:	220a      	movs	r2, #10
 800d532:	4630      	mov	r0, r6
 800d534:	f7ff ff8c 	bl	800d450 <__multadd>
 800d538:	45a0      	cmp	r8, r4
 800d53a:	d1f5      	bne.n	800d528 <__s2b+0x4c>
 800d53c:	f1a5 0408 	sub.w	r4, r5, #8
 800d540:	444c      	add	r4, r9
 800d542:	1b2d      	subs	r5, r5, r4
 800d544:	1963      	adds	r3, r4, r5
 800d546:	42bb      	cmp	r3, r7
 800d548:	db04      	blt.n	800d554 <__s2b+0x78>
 800d54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d54e:	340a      	adds	r4, #10
 800d550:	2509      	movs	r5, #9
 800d552:	e7f6      	b.n	800d542 <__s2b+0x66>
 800d554:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d558:	4601      	mov	r1, r0
 800d55a:	3b30      	subs	r3, #48	@ 0x30
 800d55c:	220a      	movs	r2, #10
 800d55e:	4630      	mov	r0, r6
 800d560:	f7ff ff76 	bl	800d450 <__multadd>
 800d564:	e7ee      	b.n	800d544 <__s2b+0x68>
 800d566:	bf00      	nop
 800d568:	0800fc46 	.word	0x0800fc46
 800d56c:	0800fc57 	.word	0x0800fc57

0800d570 <__hi0bits>:
 800d570:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d574:	4603      	mov	r3, r0
 800d576:	bf36      	itet	cc
 800d578:	0403      	lslcc	r3, r0, #16
 800d57a:	2000      	movcs	r0, #0
 800d57c:	2010      	movcc	r0, #16
 800d57e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d582:	bf3c      	itt	cc
 800d584:	021b      	lslcc	r3, r3, #8
 800d586:	3008      	addcc	r0, #8
 800d588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d58c:	bf3c      	itt	cc
 800d58e:	011b      	lslcc	r3, r3, #4
 800d590:	3004      	addcc	r0, #4
 800d592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d596:	bf3c      	itt	cc
 800d598:	009b      	lslcc	r3, r3, #2
 800d59a:	3002      	addcc	r0, #2
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	db05      	blt.n	800d5ac <__hi0bits+0x3c>
 800d5a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d5a4:	f100 0001 	add.w	r0, r0, #1
 800d5a8:	bf08      	it	eq
 800d5aa:	2020      	moveq	r0, #32
 800d5ac:	4770      	bx	lr

0800d5ae <__lo0bits>:
 800d5ae:	6803      	ldr	r3, [r0, #0]
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	f013 0007 	ands.w	r0, r3, #7
 800d5b6:	d00b      	beq.n	800d5d0 <__lo0bits+0x22>
 800d5b8:	07d9      	lsls	r1, r3, #31
 800d5ba:	d421      	bmi.n	800d600 <__lo0bits+0x52>
 800d5bc:	0798      	lsls	r0, r3, #30
 800d5be:	bf49      	itett	mi
 800d5c0:	085b      	lsrmi	r3, r3, #1
 800d5c2:	089b      	lsrpl	r3, r3, #2
 800d5c4:	2001      	movmi	r0, #1
 800d5c6:	6013      	strmi	r3, [r2, #0]
 800d5c8:	bf5c      	itt	pl
 800d5ca:	6013      	strpl	r3, [r2, #0]
 800d5cc:	2002      	movpl	r0, #2
 800d5ce:	4770      	bx	lr
 800d5d0:	b299      	uxth	r1, r3
 800d5d2:	b909      	cbnz	r1, 800d5d8 <__lo0bits+0x2a>
 800d5d4:	0c1b      	lsrs	r3, r3, #16
 800d5d6:	2010      	movs	r0, #16
 800d5d8:	b2d9      	uxtb	r1, r3
 800d5da:	b909      	cbnz	r1, 800d5e0 <__lo0bits+0x32>
 800d5dc:	3008      	adds	r0, #8
 800d5de:	0a1b      	lsrs	r3, r3, #8
 800d5e0:	0719      	lsls	r1, r3, #28
 800d5e2:	bf04      	itt	eq
 800d5e4:	091b      	lsreq	r3, r3, #4
 800d5e6:	3004      	addeq	r0, #4
 800d5e8:	0799      	lsls	r1, r3, #30
 800d5ea:	bf04      	itt	eq
 800d5ec:	089b      	lsreq	r3, r3, #2
 800d5ee:	3002      	addeq	r0, #2
 800d5f0:	07d9      	lsls	r1, r3, #31
 800d5f2:	d403      	bmi.n	800d5fc <__lo0bits+0x4e>
 800d5f4:	085b      	lsrs	r3, r3, #1
 800d5f6:	f100 0001 	add.w	r0, r0, #1
 800d5fa:	d003      	beq.n	800d604 <__lo0bits+0x56>
 800d5fc:	6013      	str	r3, [r2, #0]
 800d5fe:	4770      	bx	lr
 800d600:	2000      	movs	r0, #0
 800d602:	4770      	bx	lr
 800d604:	2020      	movs	r0, #32
 800d606:	4770      	bx	lr

0800d608 <__i2b>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	460c      	mov	r4, r1
 800d60c:	2101      	movs	r1, #1
 800d60e:	f7ff febd 	bl	800d38c <_Balloc>
 800d612:	4602      	mov	r2, r0
 800d614:	b928      	cbnz	r0, 800d622 <__i2b+0x1a>
 800d616:	4b05      	ldr	r3, [pc, #20]	@ (800d62c <__i2b+0x24>)
 800d618:	4805      	ldr	r0, [pc, #20]	@ (800d630 <__i2b+0x28>)
 800d61a:	f240 1145 	movw	r1, #325	@ 0x145
 800d61e:	f001 fb5f 	bl	800ece0 <__assert_func>
 800d622:	2301      	movs	r3, #1
 800d624:	6144      	str	r4, [r0, #20]
 800d626:	6103      	str	r3, [r0, #16]
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	bf00      	nop
 800d62c:	0800fc46 	.word	0x0800fc46
 800d630:	0800fc57 	.word	0x0800fc57

0800d634 <__multiply>:
 800d634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d638:	4614      	mov	r4, r2
 800d63a:	690a      	ldr	r2, [r1, #16]
 800d63c:	6923      	ldr	r3, [r4, #16]
 800d63e:	429a      	cmp	r2, r3
 800d640:	bfa8      	it	ge
 800d642:	4623      	movge	r3, r4
 800d644:	460f      	mov	r7, r1
 800d646:	bfa4      	itt	ge
 800d648:	460c      	movge	r4, r1
 800d64a:	461f      	movge	r7, r3
 800d64c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d650:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d654:	68a3      	ldr	r3, [r4, #8]
 800d656:	6861      	ldr	r1, [r4, #4]
 800d658:	eb0a 0609 	add.w	r6, sl, r9
 800d65c:	42b3      	cmp	r3, r6
 800d65e:	b085      	sub	sp, #20
 800d660:	bfb8      	it	lt
 800d662:	3101      	addlt	r1, #1
 800d664:	f7ff fe92 	bl	800d38c <_Balloc>
 800d668:	b930      	cbnz	r0, 800d678 <__multiply+0x44>
 800d66a:	4602      	mov	r2, r0
 800d66c:	4b44      	ldr	r3, [pc, #272]	@ (800d780 <__multiply+0x14c>)
 800d66e:	4845      	ldr	r0, [pc, #276]	@ (800d784 <__multiply+0x150>)
 800d670:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d674:	f001 fb34 	bl	800ece0 <__assert_func>
 800d678:	f100 0514 	add.w	r5, r0, #20
 800d67c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d680:	462b      	mov	r3, r5
 800d682:	2200      	movs	r2, #0
 800d684:	4543      	cmp	r3, r8
 800d686:	d321      	bcc.n	800d6cc <__multiply+0x98>
 800d688:	f107 0114 	add.w	r1, r7, #20
 800d68c:	f104 0214 	add.w	r2, r4, #20
 800d690:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d694:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d698:	9302      	str	r3, [sp, #8]
 800d69a:	1b13      	subs	r3, r2, r4
 800d69c:	3b15      	subs	r3, #21
 800d69e:	f023 0303 	bic.w	r3, r3, #3
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	f104 0715 	add.w	r7, r4, #21
 800d6a8:	42ba      	cmp	r2, r7
 800d6aa:	bf38      	it	cc
 800d6ac:	2304      	movcc	r3, #4
 800d6ae:	9301      	str	r3, [sp, #4]
 800d6b0:	9b02      	ldr	r3, [sp, #8]
 800d6b2:	9103      	str	r1, [sp, #12]
 800d6b4:	428b      	cmp	r3, r1
 800d6b6:	d80c      	bhi.n	800d6d2 <__multiply+0x9e>
 800d6b8:	2e00      	cmp	r6, #0
 800d6ba:	dd03      	ble.n	800d6c4 <__multiply+0x90>
 800d6bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d05b      	beq.n	800d77c <__multiply+0x148>
 800d6c4:	6106      	str	r6, [r0, #16]
 800d6c6:	b005      	add	sp, #20
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	f843 2b04 	str.w	r2, [r3], #4
 800d6d0:	e7d8      	b.n	800d684 <__multiply+0x50>
 800d6d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d6d6:	f1ba 0f00 	cmp.w	sl, #0
 800d6da:	d024      	beq.n	800d726 <__multiply+0xf2>
 800d6dc:	f104 0e14 	add.w	lr, r4, #20
 800d6e0:	46a9      	mov	r9, r5
 800d6e2:	f04f 0c00 	mov.w	ip, #0
 800d6e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6ea:	f8d9 3000 	ldr.w	r3, [r9]
 800d6ee:	fa1f fb87 	uxth.w	fp, r7
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6fc:	f8d9 7000 	ldr.w	r7, [r9]
 800d700:	4463      	add	r3, ip
 800d702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d706:	fb0a c70b 	mla	r7, sl, fp, ip
 800d70a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d70e:	b29b      	uxth	r3, r3
 800d710:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d714:	4572      	cmp	r2, lr
 800d716:	f849 3b04 	str.w	r3, [r9], #4
 800d71a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d71e:	d8e2      	bhi.n	800d6e6 <__multiply+0xb2>
 800d720:	9b01      	ldr	r3, [sp, #4]
 800d722:	f845 c003 	str.w	ip, [r5, r3]
 800d726:	9b03      	ldr	r3, [sp, #12]
 800d728:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d72c:	3104      	adds	r1, #4
 800d72e:	f1b9 0f00 	cmp.w	r9, #0
 800d732:	d021      	beq.n	800d778 <__multiply+0x144>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	f104 0c14 	add.w	ip, r4, #20
 800d73a:	46ae      	mov	lr, r5
 800d73c:	f04f 0a00 	mov.w	sl, #0
 800d740:	f8bc b000 	ldrh.w	fp, [ip]
 800d744:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d748:	fb09 770b 	mla	r7, r9, fp, r7
 800d74c:	4457      	add	r7, sl
 800d74e:	b29b      	uxth	r3, r3
 800d750:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d754:	f84e 3b04 	str.w	r3, [lr], #4
 800d758:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d760:	f8be 3000 	ldrh.w	r3, [lr]
 800d764:	fb09 330a 	mla	r3, r9, sl, r3
 800d768:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d76c:	4562      	cmp	r2, ip
 800d76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d772:	d8e5      	bhi.n	800d740 <__multiply+0x10c>
 800d774:	9f01      	ldr	r7, [sp, #4]
 800d776:	51eb      	str	r3, [r5, r7]
 800d778:	3504      	adds	r5, #4
 800d77a:	e799      	b.n	800d6b0 <__multiply+0x7c>
 800d77c:	3e01      	subs	r6, #1
 800d77e:	e79b      	b.n	800d6b8 <__multiply+0x84>
 800d780:	0800fc46 	.word	0x0800fc46
 800d784:	0800fc57 	.word	0x0800fc57

0800d788 <__pow5mult>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	4615      	mov	r5, r2
 800d78e:	f012 0203 	ands.w	r2, r2, #3
 800d792:	4607      	mov	r7, r0
 800d794:	460e      	mov	r6, r1
 800d796:	d007      	beq.n	800d7a8 <__pow5mult+0x20>
 800d798:	4c25      	ldr	r4, [pc, #148]	@ (800d830 <__pow5mult+0xa8>)
 800d79a:	3a01      	subs	r2, #1
 800d79c:	2300      	movs	r3, #0
 800d79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7a2:	f7ff fe55 	bl	800d450 <__multadd>
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	10ad      	asrs	r5, r5, #2
 800d7aa:	d03d      	beq.n	800d828 <__pow5mult+0xa0>
 800d7ac:	69fc      	ldr	r4, [r7, #28]
 800d7ae:	b97c      	cbnz	r4, 800d7d0 <__pow5mult+0x48>
 800d7b0:	2010      	movs	r0, #16
 800d7b2:	f7ff fd35 	bl	800d220 <malloc>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	61f8      	str	r0, [r7, #28]
 800d7ba:	b928      	cbnz	r0, 800d7c8 <__pow5mult+0x40>
 800d7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d834 <__pow5mult+0xac>)
 800d7be:	481e      	ldr	r0, [pc, #120]	@ (800d838 <__pow5mult+0xb0>)
 800d7c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7c4:	f001 fa8c 	bl	800ece0 <__assert_func>
 800d7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7cc:	6004      	str	r4, [r0, #0]
 800d7ce:	60c4      	str	r4, [r0, #12]
 800d7d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7d8:	b94c      	cbnz	r4, 800d7ee <__pow5mult+0x66>
 800d7da:	f240 2171 	movw	r1, #625	@ 0x271
 800d7de:	4638      	mov	r0, r7
 800d7e0:	f7ff ff12 	bl	800d608 <__i2b>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7ea:	4604      	mov	r4, r0
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	f04f 0900 	mov.w	r9, #0
 800d7f2:	07eb      	lsls	r3, r5, #31
 800d7f4:	d50a      	bpl.n	800d80c <__pow5mult+0x84>
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	f7ff ff1a 	bl	800d634 <__multiply>
 800d800:	4631      	mov	r1, r6
 800d802:	4680      	mov	r8, r0
 800d804:	4638      	mov	r0, r7
 800d806:	f7ff fe01 	bl	800d40c <_Bfree>
 800d80a:	4646      	mov	r6, r8
 800d80c:	106d      	asrs	r5, r5, #1
 800d80e:	d00b      	beq.n	800d828 <__pow5mult+0xa0>
 800d810:	6820      	ldr	r0, [r4, #0]
 800d812:	b938      	cbnz	r0, 800d824 <__pow5mult+0x9c>
 800d814:	4622      	mov	r2, r4
 800d816:	4621      	mov	r1, r4
 800d818:	4638      	mov	r0, r7
 800d81a:	f7ff ff0b 	bl	800d634 <__multiply>
 800d81e:	6020      	str	r0, [r4, #0]
 800d820:	f8c0 9000 	str.w	r9, [r0]
 800d824:	4604      	mov	r4, r0
 800d826:	e7e4      	b.n	800d7f2 <__pow5mult+0x6a>
 800d828:	4630      	mov	r0, r6
 800d82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82e:	bf00      	nop
 800d830:	0800fcb0 	.word	0x0800fcb0
 800d834:	0800fbd7 	.word	0x0800fbd7
 800d838:	0800fc57 	.word	0x0800fc57

0800d83c <__lshift>:
 800d83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d840:	460c      	mov	r4, r1
 800d842:	6849      	ldr	r1, [r1, #4]
 800d844:	6923      	ldr	r3, [r4, #16]
 800d846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d84a:	68a3      	ldr	r3, [r4, #8]
 800d84c:	4607      	mov	r7, r0
 800d84e:	4691      	mov	r9, r2
 800d850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d854:	f108 0601 	add.w	r6, r8, #1
 800d858:	42b3      	cmp	r3, r6
 800d85a:	db0b      	blt.n	800d874 <__lshift+0x38>
 800d85c:	4638      	mov	r0, r7
 800d85e:	f7ff fd95 	bl	800d38c <_Balloc>
 800d862:	4605      	mov	r5, r0
 800d864:	b948      	cbnz	r0, 800d87a <__lshift+0x3e>
 800d866:	4602      	mov	r2, r0
 800d868:	4b28      	ldr	r3, [pc, #160]	@ (800d90c <__lshift+0xd0>)
 800d86a:	4829      	ldr	r0, [pc, #164]	@ (800d910 <__lshift+0xd4>)
 800d86c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d870:	f001 fa36 	bl	800ece0 <__assert_func>
 800d874:	3101      	adds	r1, #1
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	e7ee      	b.n	800d858 <__lshift+0x1c>
 800d87a:	2300      	movs	r3, #0
 800d87c:	f100 0114 	add.w	r1, r0, #20
 800d880:	f100 0210 	add.w	r2, r0, #16
 800d884:	4618      	mov	r0, r3
 800d886:	4553      	cmp	r3, sl
 800d888:	db33      	blt.n	800d8f2 <__lshift+0xb6>
 800d88a:	6920      	ldr	r0, [r4, #16]
 800d88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d890:	f104 0314 	add.w	r3, r4, #20
 800d894:	f019 091f 	ands.w	r9, r9, #31
 800d898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8a0:	d02b      	beq.n	800d8fa <__lshift+0xbe>
 800d8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8a6:	468a      	mov	sl, r1
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d8b0:	4310      	orrs	r0, r2
 800d8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ba:	459c      	cmp	ip, r3
 800d8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8c0:	d8f3      	bhi.n	800d8aa <__lshift+0x6e>
 800d8c2:	ebac 0304 	sub.w	r3, ip, r4
 800d8c6:	3b15      	subs	r3, #21
 800d8c8:	f023 0303 	bic.w	r3, r3, #3
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	f104 0015 	add.w	r0, r4, #21
 800d8d2:	4584      	cmp	ip, r0
 800d8d4:	bf38      	it	cc
 800d8d6:	2304      	movcc	r3, #4
 800d8d8:	50ca      	str	r2, [r1, r3]
 800d8da:	b10a      	cbz	r2, 800d8e0 <__lshift+0xa4>
 800d8dc:	f108 0602 	add.w	r6, r8, #2
 800d8e0:	3e01      	subs	r6, #1
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	612e      	str	r6, [r5, #16]
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	f7ff fd90 	bl	800d40c <_Bfree>
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	e7c5      	b.n	800d886 <__lshift+0x4a>
 800d8fa:	3904      	subs	r1, #4
 800d8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d900:	f841 2f04 	str.w	r2, [r1, #4]!
 800d904:	459c      	cmp	ip, r3
 800d906:	d8f9      	bhi.n	800d8fc <__lshift+0xc0>
 800d908:	e7ea      	b.n	800d8e0 <__lshift+0xa4>
 800d90a:	bf00      	nop
 800d90c:	0800fc46 	.word	0x0800fc46
 800d910:	0800fc57 	.word	0x0800fc57

0800d914 <__mcmp>:
 800d914:	690a      	ldr	r2, [r1, #16]
 800d916:	4603      	mov	r3, r0
 800d918:	6900      	ldr	r0, [r0, #16]
 800d91a:	1a80      	subs	r0, r0, r2
 800d91c:	b530      	push	{r4, r5, lr}
 800d91e:	d10e      	bne.n	800d93e <__mcmp+0x2a>
 800d920:	3314      	adds	r3, #20
 800d922:	3114      	adds	r1, #20
 800d924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d934:	4295      	cmp	r5, r2
 800d936:	d003      	beq.n	800d940 <__mcmp+0x2c>
 800d938:	d205      	bcs.n	800d946 <__mcmp+0x32>
 800d93a:	f04f 30ff 	mov.w	r0, #4294967295
 800d93e:	bd30      	pop	{r4, r5, pc}
 800d940:	42a3      	cmp	r3, r4
 800d942:	d3f3      	bcc.n	800d92c <__mcmp+0x18>
 800d944:	e7fb      	b.n	800d93e <__mcmp+0x2a>
 800d946:	2001      	movs	r0, #1
 800d948:	e7f9      	b.n	800d93e <__mcmp+0x2a>
	...

0800d94c <__mdiff>:
 800d94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	4689      	mov	r9, r1
 800d952:	4606      	mov	r6, r0
 800d954:	4611      	mov	r1, r2
 800d956:	4648      	mov	r0, r9
 800d958:	4614      	mov	r4, r2
 800d95a:	f7ff ffdb 	bl	800d914 <__mcmp>
 800d95e:	1e05      	subs	r5, r0, #0
 800d960:	d112      	bne.n	800d988 <__mdiff+0x3c>
 800d962:	4629      	mov	r1, r5
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff fd11 	bl	800d38c <_Balloc>
 800d96a:	4602      	mov	r2, r0
 800d96c:	b928      	cbnz	r0, 800d97a <__mdiff+0x2e>
 800d96e:	4b3f      	ldr	r3, [pc, #252]	@ (800da6c <__mdiff+0x120>)
 800d970:	f240 2137 	movw	r1, #567	@ 0x237
 800d974:	483e      	ldr	r0, [pc, #248]	@ (800da70 <__mdiff+0x124>)
 800d976:	f001 f9b3 	bl	800ece0 <__assert_func>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d980:	4610      	mov	r0, r2
 800d982:	b003      	add	sp, #12
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	bfbc      	itt	lt
 800d98a:	464b      	movlt	r3, r9
 800d98c:	46a1      	movlt	r9, r4
 800d98e:	4630      	mov	r0, r6
 800d990:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d994:	bfba      	itte	lt
 800d996:	461c      	movlt	r4, r3
 800d998:	2501      	movlt	r5, #1
 800d99a:	2500      	movge	r5, #0
 800d99c:	f7ff fcf6 	bl	800d38c <_Balloc>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	b918      	cbnz	r0, 800d9ac <__mdiff+0x60>
 800d9a4:	4b31      	ldr	r3, [pc, #196]	@ (800da6c <__mdiff+0x120>)
 800d9a6:	f240 2145 	movw	r1, #581	@ 0x245
 800d9aa:	e7e3      	b.n	800d974 <__mdiff+0x28>
 800d9ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9b0:	6926      	ldr	r6, [r4, #16]
 800d9b2:	60c5      	str	r5, [r0, #12]
 800d9b4:	f109 0310 	add.w	r3, r9, #16
 800d9b8:	f109 0514 	add.w	r5, r9, #20
 800d9bc:	f104 0e14 	add.w	lr, r4, #20
 800d9c0:	f100 0b14 	add.w	fp, r0, #20
 800d9c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	46d9      	mov	r9, fp
 800d9d0:	f04f 0c00 	mov.w	ip, #0
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d9da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9de:	9301      	str	r3, [sp, #4]
 800d9e0:	fa1f f38a 	uxth.w	r3, sl
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	b283      	uxth	r3, r0
 800d9e8:	1acb      	subs	r3, r1, r3
 800d9ea:	0c00      	lsrs	r0, r0, #16
 800d9ec:	4463      	add	r3, ip
 800d9ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9fc:	4576      	cmp	r6, lr
 800d9fe:	f849 3b04 	str.w	r3, [r9], #4
 800da02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da06:	d8e5      	bhi.n	800d9d4 <__mdiff+0x88>
 800da08:	1b33      	subs	r3, r6, r4
 800da0a:	3b15      	subs	r3, #21
 800da0c:	f023 0303 	bic.w	r3, r3, #3
 800da10:	3415      	adds	r4, #21
 800da12:	3304      	adds	r3, #4
 800da14:	42a6      	cmp	r6, r4
 800da16:	bf38      	it	cc
 800da18:	2304      	movcc	r3, #4
 800da1a:	441d      	add	r5, r3
 800da1c:	445b      	add	r3, fp
 800da1e:	461e      	mov	r6, r3
 800da20:	462c      	mov	r4, r5
 800da22:	4544      	cmp	r4, r8
 800da24:	d30e      	bcc.n	800da44 <__mdiff+0xf8>
 800da26:	f108 0103 	add.w	r1, r8, #3
 800da2a:	1b49      	subs	r1, r1, r5
 800da2c:	f021 0103 	bic.w	r1, r1, #3
 800da30:	3d03      	subs	r5, #3
 800da32:	45a8      	cmp	r8, r5
 800da34:	bf38      	it	cc
 800da36:	2100      	movcc	r1, #0
 800da38:	440b      	add	r3, r1
 800da3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da3e:	b191      	cbz	r1, 800da66 <__mdiff+0x11a>
 800da40:	6117      	str	r7, [r2, #16]
 800da42:	e79d      	b.n	800d980 <__mdiff+0x34>
 800da44:	f854 1b04 	ldr.w	r1, [r4], #4
 800da48:	46e6      	mov	lr, ip
 800da4a:	0c08      	lsrs	r0, r1, #16
 800da4c:	fa1c fc81 	uxtah	ip, ip, r1
 800da50:	4471      	add	r1, lr
 800da52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da56:	b289      	uxth	r1, r1
 800da58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da5c:	f846 1b04 	str.w	r1, [r6], #4
 800da60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da64:	e7dd      	b.n	800da22 <__mdiff+0xd6>
 800da66:	3f01      	subs	r7, #1
 800da68:	e7e7      	b.n	800da3a <__mdiff+0xee>
 800da6a:	bf00      	nop
 800da6c:	0800fc46 	.word	0x0800fc46
 800da70:	0800fc57 	.word	0x0800fc57

0800da74 <__ulp>:
 800da74:	b082      	sub	sp, #8
 800da76:	ed8d 0b00 	vstr	d0, [sp]
 800da7a:	9a01      	ldr	r2, [sp, #4]
 800da7c:	4b0f      	ldr	r3, [pc, #60]	@ (800dabc <__ulp+0x48>)
 800da7e:	4013      	ands	r3, r2
 800da80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800da84:	2b00      	cmp	r3, #0
 800da86:	dc08      	bgt.n	800da9a <__ulp+0x26>
 800da88:	425b      	negs	r3, r3
 800da8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800da8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da92:	da04      	bge.n	800da9e <__ulp+0x2a>
 800da94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da98:	4113      	asrs	r3, r2
 800da9a:	2200      	movs	r2, #0
 800da9c:	e008      	b.n	800dab0 <__ulp+0x3c>
 800da9e:	f1a2 0314 	sub.w	r3, r2, #20
 800daa2:	2b1e      	cmp	r3, #30
 800daa4:	bfda      	itte	le
 800daa6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800daaa:	40da      	lsrle	r2, r3
 800daac:	2201      	movgt	r2, #1
 800daae:	2300      	movs	r3, #0
 800dab0:	4619      	mov	r1, r3
 800dab2:	4610      	mov	r0, r2
 800dab4:	ec41 0b10 	vmov	d0, r0, r1
 800dab8:	b002      	add	sp, #8
 800daba:	4770      	bx	lr
 800dabc:	7ff00000 	.word	0x7ff00000

0800dac0 <__b2d>:
 800dac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac4:	6906      	ldr	r6, [r0, #16]
 800dac6:	f100 0814 	add.w	r8, r0, #20
 800daca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dace:	1f37      	subs	r7, r6, #4
 800dad0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dad4:	4610      	mov	r0, r2
 800dad6:	f7ff fd4b 	bl	800d570 <__hi0bits>
 800dada:	f1c0 0320 	rsb	r3, r0, #32
 800dade:	280a      	cmp	r0, #10
 800dae0:	600b      	str	r3, [r1, #0]
 800dae2:	491b      	ldr	r1, [pc, #108]	@ (800db50 <__b2d+0x90>)
 800dae4:	dc15      	bgt.n	800db12 <__b2d+0x52>
 800dae6:	f1c0 0c0b 	rsb	ip, r0, #11
 800daea:	fa22 f30c 	lsr.w	r3, r2, ip
 800daee:	45b8      	cmp	r8, r7
 800daf0:	ea43 0501 	orr.w	r5, r3, r1
 800daf4:	bf34      	ite	cc
 800daf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dafa:	2300      	movcs	r3, #0
 800dafc:	3015      	adds	r0, #21
 800dafe:	fa02 f000 	lsl.w	r0, r2, r0
 800db02:	fa23 f30c 	lsr.w	r3, r3, ip
 800db06:	4303      	orrs	r3, r0
 800db08:	461c      	mov	r4, r3
 800db0a:	ec45 4b10 	vmov	d0, r4, r5
 800db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db12:	45b8      	cmp	r8, r7
 800db14:	bf3a      	itte	cc
 800db16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800db1a:	f1a6 0708 	subcc.w	r7, r6, #8
 800db1e:	2300      	movcs	r3, #0
 800db20:	380b      	subs	r0, #11
 800db22:	d012      	beq.n	800db4a <__b2d+0x8a>
 800db24:	f1c0 0120 	rsb	r1, r0, #32
 800db28:	fa23 f401 	lsr.w	r4, r3, r1
 800db2c:	4082      	lsls	r2, r0
 800db2e:	4322      	orrs	r2, r4
 800db30:	4547      	cmp	r7, r8
 800db32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800db36:	bf8c      	ite	hi
 800db38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800db3c:	2200      	movls	r2, #0
 800db3e:	4083      	lsls	r3, r0
 800db40:	40ca      	lsrs	r2, r1
 800db42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800db46:	4313      	orrs	r3, r2
 800db48:	e7de      	b.n	800db08 <__b2d+0x48>
 800db4a:	ea42 0501 	orr.w	r5, r2, r1
 800db4e:	e7db      	b.n	800db08 <__b2d+0x48>
 800db50:	3ff00000 	.word	0x3ff00000

0800db54 <__d2b>:
 800db54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db58:	460f      	mov	r7, r1
 800db5a:	2101      	movs	r1, #1
 800db5c:	ec59 8b10 	vmov	r8, r9, d0
 800db60:	4616      	mov	r6, r2
 800db62:	f7ff fc13 	bl	800d38c <_Balloc>
 800db66:	4604      	mov	r4, r0
 800db68:	b930      	cbnz	r0, 800db78 <__d2b+0x24>
 800db6a:	4602      	mov	r2, r0
 800db6c:	4b23      	ldr	r3, [pc, #140]	@ (800dbfc <__d2b+0xa8>)
 800db6e:	4824      	ldr	r0, [pc, #144]	@ (800dc00 <__d2b+0xac>)
 800db70:	f240 310f 	movw	r1, #783	@ 0x30f
 800db74:	f001 f8b4 	bl	800ece0 <__assert_func>
 800db78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db80:	b10d      	cbz	r5, 800db86 <__d2b+0x32>
 800db82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	f1b8 0300 	subs.w	r3, r8, #0
 800db8c:	d023      	beq.n	800dbd6 <__d2b+0x82>
 800db8e:	4668      	mov	r0, sp
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	f7ff fd0c 	bl	800d5ae <__lo0bits>
 800db96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db9a:	b1d0      	cbz	r0, 800dbd2 <__d2b+0x7e>
 800db9c:	f1c0 0320 	rsb	r3, r0, #32
 800dba0:	fa02 f303 	lsl.w	r3, r2, r3
 800dba4:	430b      	orrs	r3, r1
 800dba6:	40c2      	lsrs	r2, r0
 800dba8:	6163      	str	r3, [r4, #20]
 800dbaa:	9201      	str	r2, [sp, #4]
 800dbac:	9b01      	ldr	r3, [sp, #4]
 800dbae:	61a3      	str	r3, [r4, #24]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	bf0c      	ite	eq
 800dbb4:	2201      	moveq	r2, #1
 800dbb6:	2202      	movne	r2, #2
 800dbb8:	6122      	str	r2, [r4, #16]
 800dbba:	b1a5      	cbz	r5, 800dbe6 <__d2b+0x92>
 800dbbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dbc0:	4405      	add	r5, r0
 800dbc2:	603d      	str	r5, [r7, #0]
 800dbc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dbc8:	6030      	str	r0, [r6, #0]
 800dbca:	4620      	mov	r0, r4
 800dbcc:	b003      	add	sp, #12
 800dbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbd2:	6161      	str	r1, [r4, #20]
 800dbd4:	e7ea      	b.n	800dbac <__d2b+0x58>
 800dbd6:	a801      	add	r0, sp, #4
 800dbd8:	f7ff fce9 	bl	800d5ae <__lo0bits>
 800dbdc:	9b01      	ldr	r3, [sp, #4]
 800dbde:	6163      	str	r3, [r4, #20]
 800dbe0:	3020      	adds	r0, #32
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	e7e8      	b.n	800dbb8 <__d2b+0x64>
 800dbe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dbee:	6038      	str	r0, [r7, #0]
 800dbf0:	6918      	ldr	r0, [r3, #16]
 800dbf2:	f7ff fcbd 	bl	800d570 <__hi0bits>
 800dbf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbfa:	e7e5      	b.n	800dbc8 <__d2b+0x74>
 800dbfc:	0800fc46 	.word	0x0800fc46
 800dc00:	0800fc57 	.word	0x0800fc57

0800dc04 <__ratio>:
 800dc04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc08:	4688      	mov	r8, r1
 800dc0a:	4669      	mov	r1, sp
 800dc0c:	4681      	mov	r9, r0
 800dc0e:	f7ff ff57 	bl	800dac0 <__b2d>
 800dc12:	a901      	add	r1, sp, #4
 800dc14:	4640      	mov	r0, r8
 800dc16:	ec55 4b10 	vmov	r4, r5, d0
 800dc1a:	f7ff ff51 	bl	800dac0 <__b2d>
 800dc1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc22:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dc26:	1ad2      	subs	r2, r2, r3
 800dc28:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dc2c:	1a5b      	subs	r3, r3, r1
 800dc2e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800dc32:	ec57 6b10 	vmov	r6, r7, d0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bfd6      	itet	le
 800dc3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc3e:	462a      	movgt	r2, r5
 800dc40:	463a      	movle	r2, r7
 800dc42:	46ab      	mov	fp, r5
 800dc44:	46a2      	mov	sl, r4
 800dc46:	bfce      	itee	gt
 800dc48:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dc4c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800dc50:	ee00 3a90 	vmovle	s1, r3
 800dc54:	ec4b ab17 	vmov	d7, sl, fp
 800dc58:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800dc5c:	b003      	add	sp, #12
 800dc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc62 <__copybits>:
 800dc62:	3901      	subs	r1, #1
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	1149      	asrs	r1, r1, #5
 800dc68:	6914      	ldr	r4, [r2, #16]
 800dc6a:	3101      	adds	r1, #1
 800dc6c:	f102 0314 	add.w	r3, r2, #20
 800dc70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc78:	1f05      	subs	r5, r0, #4
 800dc7a:	42a3      	cmp	r3, r4
 800dc7c:	d30c      	bcc.n	800dc98 <__copybits+0x36>
 800dc7e:	1aa3      	subs	r3, r4, r2
 800dc80:	3b11      	subs	r3, #17
 800dc82:	f023 0303 	bic.w	r3, r3, #3
 800dc86:	3211      	adds	r2, #17
 800dc88:	42a2      	cmp	r2, r4
 800dc8a:	bf88      	it	hi
 800dc8c:	2300      	movhi	r3, #0
 800dc8e:	4418      	add	r0, r3
 800dc90:	2300      	movs	r3, #0
 800dc92:	4288      	cmp	r0, r1
 800dc94:	d305      	bcc.n	800dca2 <__copybits+0x40>
 800dc96:	bd70      	pop	{r4, r5, r6, pc}
 800dc98:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800dca0:	e7eb      	b.n	800dc7a <__copybits+0x18>
 800dca2:	f840 3b04 	str.w	r3, [r0], #4
 800dca6:	e7f4      	b.n	800dc92 <__copybits+0x30>

0800dca8 <__any_on>:
 800dca8:	f100 0214 	add.w	r2, r0, #20
 800dcac:	6900      	ldr	r0, [r0, #16]
 800dcae:	114b      	asrs	r3, r1, #5
 800dcb0:	4298      	cmp	r0, r3
 800dcb2:	b510      	push	{r4, lr}
 800dcb4:	db11      	blt.n	800dcda <__any_on+0x32>
 800dcb6:	dd0a      	ble.n	800dcce <__any_on+0x26>
 800dcb8:	f011 011f 	ands.w	r1, r1, #31
 800dcbc:	d007      	beq.n	800dcce <__any_on+0x26>
 800dcbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dcc2:	fa24 f001 	lsr.w	r0, r4, r1
 800dcc6:	fa00 f101 	lsl.w	r1, r0, r1
 800dcca:	428c      	cmp	r4, r1
 800dccc:	d10b      	bne.n	800dce6 <__any_on+0x3e>
 800dcce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d803      	bhi.n	800dcde <__any_on+0x36>
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	bd10      	pop	{r4, pc}
 800dcda:	4603      	mov	r3, r0
 800dcdc:	e7f7      	b.n	800dcce <__any_on+0x26>
 800dcde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dce2:	2900      	cmp	r1, #0
 800dce4:	d0f5      	beq.n	800dcd2 <__any_on+0x2a>
 800dce6:	2001      	movs	r0, #1
 800dce8:	e7f6      	b.n	800dcd8 <__any_on+0x30>

0800dcea <sulp>:
 800dcea:	b570      	push	{r4, r5, r6, lr}
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	ec45 4b10 	vmov	d0, r4, r5
 800dcf6:	f7ff febd 	bl	800da74 <__ulp>
 800dcfa:	b17e      	cbz	r6, 800dd1c <sulp+0x32>
 800dcfc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dd00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	dd09      	ble.n	800dd1c <sulp+0x32>
 800dd08:	051b      	lsls	r3, r3, #20
 800dd0a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800dd0e:	2000      	movs	r0, #0
 800dd10:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800dd14:	ec41 0b17 	vmov	d7, r0, r1
 800dd18:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd20 <_strtod_l>:
 800dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	ed2d 8b0a 	vpush	{d8-d12}
 800dd28:	b097      	sub	sp, #92	@ 0x5c
 800dd2a:	4688      	mov	r8, r1
 800dd2c:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd2e:	2200      	movs	r2, #0
 800dd30:	9212      	str	r2, [sp, #72]	@ 0x48
 800dd32:	9005      	str	r0, [sp, #20]
 800dd34:	f04f 0a00 	mov.w	sl, #0
 800dd38:	f04f 0b00 	mov.w	fp, #0
 800dd3c:	460a      	mov	r2, r1
 800dd3e:	9211      	str	r2, [sp, #68]	@ 0x44
 800dd40:	7811      	ldrb	r1, [r2, #0]
 800dd42:	292b      	cmp	r1, #43	@ 0x2b
 800dd44:	d04c      	beq.n	800dde0 <_strtod_l+0xc0>
 800dd46:	d839      	bhi.n	800ddbc <_strtod_l+0x9c>
 800dd48:	290d      	cmp	r1, #13
 800dd4a:	d833      	bhi.n	800ddb4 <_strtod_l+0x94>
 800dd4c:	2908      	cmp	r1, #8
 800dd4e:	d833      	bhi.n	800ddb8 <_strtod_l+0x98>
 800dd50:	2900      	cmp	r1, #0
 800dd52:	d03c      	beq.n	800ddce <_strtod_l+0xae>
 800dd54:	2200      	movs	r2, #0
 800dd56:	9208      	str	r2, [sp, #32]
 800dd58:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800dd5a:	782a      	ldrb	r2, [r5, #0]
 800dd5c:	2a30      	cmp	r2, #48	@ 0x30
 800dd5e:	f040 80b5 	bne.w	800decc <_strtod_l+0x1ac>
 800dd62:	786a      	ldrb	r2, [r5, #1]
 800dd64:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd68:	2a58      	cmp	r2, #88	@ 0x58
 800dd6a:	d170      	bne.n	800de4e <_strtod_l+0x12e>
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	9b08      	ldr	r3, [sp, #32]
 800dd70:	9301      	str	r3, [sp, #4]
 800dd72:	ab12      	add	r3, sp, #72	@ 0x48
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	4a8b      	ldr	r2, [pc, #556]	@ (800dfa4 <_strtod_l+0x284>)
 800dd78:	9805      	ldr	r0, [sp, #20]
 800dd7a:	ab13      	add	r3, sp, #76	@ 0x4c
 800dd7c:	a911      	add	r1, sp, #68	@ 0x44
 800dd7e:	f001 f849 	bl	800ee14 <__gethex>
 800dd82:	f010 060f 	ands.w	r6, r0, #15
 800dd86:	4604      	mov	r4, r0
 800dd88:	d005      	beq.n	800dd96 <_strtod_l+0x76>
 800dd8a:	2e06      	cmp	r6, #6
 800dd8c:	d12a      	bne.n	800dde4 <_strtod_l+0xc4>
 800dd8e:	3501      	adds	r5, #1
 800dd90:	2300      	movs	r3, #0
 800dd92:	9511      	str	r5, [sp, #68]	@ 0x44
 800dd94:	9308      	str	r3, [sp, #32]
 800dd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f040 852f 	bne.w	800e7fc <_strtod_l+0xadc>
 800dd9e:	9b08      	ldr	r3, [sp, #32]
 800dda0:	ec4b ab10 	vmov	d0, sl, fp
 800dda4:	b1cb      	cbz	r3, 800ddda <_strtod_l+0xba>
 800dda6:	eeb1 0b40 	vneg.f64	d0, d0
 800ddaa:	b017      	add	sp, #92	@ 0x5c
 800ddac:	ecbd 8b0a 	vpop	{d8-d12}
 800ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb4:	2920      	cmp	r1, #32
 800ddb6:	d1cd      	bne.n	800dd54 <_strtod_l+0x34>
 800ddb8:	3201      	adds	r2, #1
 800ddba:	e7c0      	b.n	800dd3e <_strtod_l+0x1e>
 800ddbc:	292d      	cmp	r1, #45	@ 0x2d
 800ddbe:	d1c9      	bne.n	800dd54 <_strtod_l+0x34>
 800ddc0:	2101      	movs	r1, #1
 800ddc2:	9108      	str	r1, [sp, #32]
 800ddc4:	1c51      	adds	r1, r2, #1
 800ddc6:	9111      	str	r1, [sp, #68]	@ 0x44
 800ddc8:	7852      	ldrb	r2, [r2, #1]
 800ddca:	2a00      	cmp	r2, #0
 800ddcc:	d1c4      	bne.n	800dd58 <_strtod_l+0x38>
 800ddce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddd0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f040 850f 	bne.w	800e7f8 <_strtod_l+0xad8>
 800ddda:	ec4b ab10 	vmov	d0, sl, fp
 800ddde:	e7e4      	b.n	800ddaa <_strtod_l+0x8a>
 800dde0:	2100      	movs	r1, #0
 800dde2:	e7ee      	b.n	800ddc2 <_strtod_l+0xa2>
 800dde4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dde6:	b13a      	cbz	r2, 800ddf8 <_strtod_l+0xd8>
 800dde8:	2135      	movs	r1, #53	@ 0x35
 800ddea:	a814      	add	r0, sp, #80	@ 0x50
 800ddec:	f7ff ff39 	bl	800dc62 <__copybits>
 800ddf0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ddf2:	9805      	ldr	r0, [sp, #20]
 800ddf4:	f7ff fb0a 	bl	800d40c <_Bfree>
 800ddf8:	1e73      	subs	r3, r6, #1
 800ddfa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddfc:	2b04      	cmp	r3, #4
 800ddfe:	d806      	bhi.n	800de0e <_strtod_l+0xee>
 800de00:	e8df f003 	tbb	[pc, r3]
 800de04:	201d0314 	.word	0x201d0314
 800de08:	14          	.byte	0x14
 800de09:	00          	.byte	0x00
 800de0a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800de0e:	05e3      	lsls	r3, r4, #23
 800de10:	bf48      	it	mi
 800de12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800de16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de1a:	0d1b      	lsrs	r3, r3, #20
 800de1c:	051b      	lsls	r3, r3, #20
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1b9      	bne.n	800dd96 <_strtod_l+0x76>
 800de22:	f7fe fb9f 	bl	800c564 <__errno>
 800de26:	2322      	movs	r3, #34	@ 0x22
 800de28:	6003      	str	r3, [r0, #0]
 800de2a:	e7b4      	b.n	800dd96 <_strtod_l+0x76>
 800de2c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800de30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800de34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800de38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800de3c:	e7e7      	b.n	800de0e <_strtod_l+0xee>
 800de3e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800dfac <_strtod_l+0x28c>
 800de42:	e7e4      	b.n	800de0e <_strtod_l+0xee>
 800de44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de48:	f04f 3aff 	mov.w	sl, #4294967295
 800de4c:	e7df      	b.n	800de0e <_strtod_l+0xee>
 800de4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de50:	1c5a      	adds	r2, r3, #1
 800de52:	9211      	str	r2, [sp, #68]	@ 0x44
 800de54:	785b      	ldrb	r3, [r3, #1]
 800de56:	2b30      	cmp	r3, #48	@ 0x30
 800de58:	d0f9      	beq.n	800de4e <_strtod_l+0x12e>
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d09b      	beq.n	800dd96 <_strtod_l+0x76>
 800de5e:	2301      	movs	r3, #1
 800de60:	2600      	movs	r6, #0
 800de62:	9307      	str	r3, [sp, #28]
 800de64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de66:	930a      	str	r3, [sp, #40]	@ 0x28
 800de68:	46b1      	mov	r9, r6
 800de6a:	4635      	mov	r5, r6
 800de6c:	220a      	movs	r2, #10
 800de6e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800de70:	7804      	ldrb	r4, [r0, #0]
 800de72:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800de76:	b2d9      	uxtb	r1, r3
 800de78:	2909      	cmp	r1, #9
 800de7a:	d929      	bls.n	800ded0 <_strtod_l+0x1b0>
 800de7c:	494a      	ldr	r1, [pc, #296]	@ (800dfa8 <_strtod_l+0x288>)
 800de7e:	2201      	movs	r2, #1
 800de80:	f7fe fb13 	bl	800c4aa <strncmp>
 800de84:	b378      	cbz	r0, 800dee6 <_strtod_l+0x1c6>
 800de86:	2000      	movs	r0, #0
 800de88:	4622      	mov	r2, r4
 800de8a:	462b      	mov	r3, r5
 800de8c:	4607      	mov	r7, r0
 800de8e:	9006      	str	r0, [sp, #24]
 800de90:	2a65      	cmp	r2, #101	@ 0x65
 800de92:	d001      	beq.n	800de98 <_strtod_l+0x178>
 800de94:	2a45      	cmp	r2, #69	@ 0x45
 800de96:	d117      	bne.n	800dec8 <_strtod_l+0x1a8>
 800de98:	b91b      	cbnz	r3, 800dea2 <_strtod_l+0x182>
 800de9a:	9b07      	ldr	r3, [sp, #28]
 800de9c:	4303      	orrs	r3, r0
 800de9e:	d096      	beq.n	800ddce <_strtod_l+0xae>
 800dea0:	2300      	movs	r3, #0
 800dea2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800dea6:	f108 0201 	add.w	r2, r8, #1
 800deaa:	9211      	str	r2, [sp, #68]	@ 0x44
 800deac:	f898 2001 	ldrb.w	r2, [r8, #1]
 800deb0:	2a2b      	cmp	r2, #43	@ 0x2b
 800deb2:	d06b      	beq.n	800df8c <_strtod_l+0x26c>
 800deb4:	2a2d      	cmp	r2, #45	@ 0x2d
 800deb6:	d071      	beq.n	800df9c <_strtod_l+0x27c>
 800deb8:	f04f 0e00 	mov.w	lr, #0
 800debc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dec0:	2c09      	cmp	r4, #9
 800dec2:	d979      	bls.n	800dfb8 <_strtod_l+0x298>
 800dec4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800dec8:	2400      	movs	r4, #0
 800deca:	e094      	b.n	800dff6 <_strtod_l+0x2d6>
 800decc:	2300      	movs	r3, #0
 800dece:	e7c7      	b.n	800de60 <_strtod_l+0x140>
 800ded0:	2d08      	cmp	r5, #8
 800ded2:	f100 0001 	add.w	r0, r0, #1
 800ded6:	bfd4      	ite	le
 800ded8:	fb02 3909 	mlale	r9, r2, r9, r3
 800dedc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800dee0:	3501      	adds	r5, #1
 800dee2:	9011      	str	r0, [sp, #68]	@ 0x44
 800dee4:	e7c3      	b.n	800de6e <_strtod_l+0x14e>
 800dee6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	9211      	str	r2, [sp, #68]	@ 0x44
 800deec:	785a      	ldrb	r2, [r3, #1]
 800deee:	b375      	cbz	r5, 800df4e <_strtod_l+0x22e>
 800def0:	4607      	mov	r7, r0
 800def2:	462b      	mov	r3, r5
 800def4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800def8:	2909      	cmp	r1, #9
 800defa:	d913      	bls.n	800df24 <_strtod_l+0x204>
 800defc:	2101      	movs	r1, #1
 800defe:	9106      	str	r1, [sp, #24]
 800df00:	e7c6      	b.n	800de90 <_strtod_l+0x170>
 800df02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df04:	1c5a      	adds	r2, r3, #1
 800df06:	9211      	str	r2, [sp, #68]	@ 0x44
 800df08:	785a      	ldrb	r2, [r3, #1]
 800df0a:	3001      	adds	r0, #1
 800df0c:	2a30      	cmp	r2, #48	@ 0x30
 800df0e:	d0f8      	beq.n	800df02 <_strtod_l+0x1e2>
 800df10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df14:	2b08      	cmp	r3, #8
 800df16:	f200 8476 	bhi.w	800e806 <_strtod_l+0xae6>
 800df1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df1e:	4607      	mov	r7, r0
 800df20:	2000      	movs	r0, #0
 800df22:	4603      	mov	r3, r0
 800df24:	3a30      	subs	r2, #48	@ 0x30
 800df26:	f100 0101 	add.w	r1, r0, #1
 800df2a:	d023      	beq.n	800df74 <_strtod_l+0x254>
 800df2c:	440f      	add	r7, r1
 800df2e:	eb00 0c03 	add.w	ip, r0, r3
 800df32:	4619      	mov	r1, r3
 800df34:	240a      	movs	r4, #10
 800df36:	4561      	cmp	r1, ip
 800df38:	d10b      	bne.n	800df52 <_strtod_l+0x232>
 800df3a:	1c5c      	adds	r4, r3, #1
 800df3c:	4403      	add	r3, r0
 800df3e:	2b08      	cmp	r3, #8
 800df40:	4404      	add	r4, r0
 800df42:	dc11      	bgt.n	800df68 <_strtod_l+0x248>
 800df44:	230a      	movs	r3, #10
 800df46:	fb03 2909 	mla	r9, r3, r9, r2
 800df4a:	2100      	movs	r1, #0
 800df4c:	e013      	b.n	800df76 <_strtod_l+0x256>
 800df4e:	4628      	mov	r0, r5
 800df50:	e7dc      	b.n	800df0c <_strtod_l+0x1ec>
 800df52:	2908      	cmp	r1, #8
 800df54:	f101 0101 	add.w	r1, r1, #1
 800df58:	dc02      	bgt.n	800df60 <_strtod_l+0x240>
 800df5a:	fb04 f909 	mul.w	r9, r4, r9
 800df5e:	e7ea      	b.n	800df36 <_strtod_l+0x216>
 800df60:	2910      	cmp	r1, #16
 800df62:	bfd8      	it	le
 800df64:	4366      	mulle	r6, r4
 800df66:	e7e6      	b.n	800df36 <_strtod_l+0x216>
 800df68:	2b0f      	cmp	r3, #15
 800df6a:	dcee      	bgt.n	800df4a <_strtod_l+0x22a>
 800df6c:	230a      	movs	r3, #10
 800df6e:	fb03 2606 	mla	r6, r3, r6, r2
 800df72:	e7ea      	b.n	800df4a <_strtod_l+0x22a>
 800df74:	461c      	mov	r4, r3
 800df76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	9211      	str	r2, [sp, #68]	@ 0x44
 800df7c:	785a      	ldrb	r2, [r3, #1]
 800df7e:	4608      	mov	r0, r1
 800df80:	4623      	mov	r3, r4
 800df82:	e7b7      	b.n	800def4 <_strtod_l+0x1d4>
 800df84:	2301      	movs	r3, #1
 800df86:	2700      	movs	r7, #0
 800df88:	9306      	str	r3, [sp, #24]
 800df8a:	e786      	b.n	800de9a <_strtod_l+0x17a>
 800df8c:	f04f 0e00 	mov.w	lr, #0
 800df90:	f108 0202 	add.w	r2, r8, #2
 800df94:	9211      	str	r2, [sp, #68]	@ 0x44
 800df96:	f898 2002 	ldrb.w	r2, [r8, #2]
 800df9a:	e78f      	b.n	800debc <_strtod_l+0x19c>
 800df9c:	f04f 0e01 	mov.w	lr, #1
 800dfa0:	e7f6      	b.n	800df90 <_strtod_l+0x270>
 800dfa2:	bf00      	nop
 800dfa4:	0800fdc8 	.word	0x0800fdc8
 800dfa8:	0800fdb0 	.word	0x0800fdb0
 800dfac:	7ff00000 	.word	0x7ff00000
 800dfb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfb2:	1c54      	adds	r4, r2, #1
 800dfb4:	9411      	str	r4, [sp, #68]	@ 0x44
 800dfb6:	7852      	ldrb	r2, [r2, #1]
 800dfb8:	2a30      	cmp	r2, #48	@ 0x30
 800dfba:	d0f9      	beq.n	800dfb0 <_strtod_l+0x290>
 800dfbc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800dfc0:	2c08      	cmp	r4, #8
 800dfc2:	d881      	bhi.n	800dec8 <_strtod_l+0x1a8>
 800dfc4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800dfc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfca:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfcc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfce:	1c51      	adds	r1, r2, #1
 800dfd0:	9111      	str	r1, [sp, #68]	@ 0x44
 800dfd2:	7852      	ldrb	r2, [r2, #1]
 800dfd4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dfd8:	2c09      	cmp	r4, #9
 800dfda:	d938      	bls.n	800e04e <_strtod_l+0x32e>
 800dfdc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800dfde:	1b0c      	subs	r4, r1, r4
 800dfe0:	2c08      	cmp	r4, #8
 800dfe2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800dfe6:	dc02      	bgt.n	800dfee <_strtod_l+0x2ce>
 800dfe8:	4564      	cmp	r4, ip
 800dfea:	bfa8      	it	ge
 800dfec:	4664      	movge	r4, ip
 800dfee:	f1be 0f00 	cmp.w	lr, #0
 800dff2:	d000      	beq.n	800dff6 <_strtod_l+0x2d6>
 800dff4:	4264      	negs	r4, r4
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d14e      	bne.n	800e098 <_strtod_l+0x378>
 800dffa:	9b07      	ldr	r3, [sp, #28]
 800dffc:	4318      	orrs	r0, r3
 800dffe:	f47f aeca 	bne.w	800dd96 <_strtod_l+0x76>
 800e002:	9b06      	ldr	r3, [sp, #24]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f47f aee2 	bne.w	800ddce <_strtod_l+0xae>
 800e00a:	2a69      	cmp	r2, #105	@ 0x69
 800e00c:	d027      	beq.n	800e05e <_strtod_l+0x33e>
 800e00e:	dc24      	bgt.n	800e05a <_strtod_l+0x33a>
 800e010:	2a49      	cmp	r2, #73	@ 0x49
 800e012:	d024      	beq.n	800e05e <_strtod_l+0x33e>
 800e014:	2a4e      	cmp	r2, #78	@ 0x4e
 800e016:	f47f aeda 	bne.w	800ddce <_strtod_l+0xae>
 800e01a:	4997      	ldr	r1, [pc, #604]	@ (800e278 <_strtod_l+0x558>)
 800e01c:	a811      	add	r0, sp, #68	@ 0x44
 800e01e:	f001 f91b 	bl	800f258 <__match>
 800e022:	2800      	cmp	r0, #0
 800e024:	f43f aed3 	beq.w	800ddce <_strtod_l+0xae>
 800e028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b28      	cmp	r3, #40	@ 0x28
 800e02e:	d12d      	bne.n	800e08c <_strtod_l+0x36c>
 800e030:	4992      	ldr	r1, [pc, #584]	@ (800e27c <_strtod_l+0x55c>)
 800e032:	aa14      	add	r2, sp, #80	@ 0x50
 800e034:	a811      	add	r0, sp, #68	@ 0x44
 800e036:	f001 f923 	bl	800f280 <__hexnan>
 800e03a:	2805      	cmp	r0, #5
 800e03c:	d126      	bne.n	800e08c <_strtod_l+0x36c>
 800e03e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e040:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e044:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e048:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e04c:	e6a3      	b.n	800dd96 <_strtod_l+0x76>
 800e04e:	240a      	movs	r4, #10
 800e050:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e054:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e058:	e7b8      	b.n	800dfcc <_strtod_l+0x2ac>
 800e05a:	2a6e      	cmp	r2, #110	@ 0x6e
 800e05c:	e7db      	b.n	800e016 <_strtod_l+0x2f6>
 800e05e:	4988      	ldr	r1, [pc, #544]	@ (800e280 <_strtod_l+0x560>)
 800e060:	a811      	add	r0, sp, #68	@ 0x44
 800e062:	f001 f8f9 	bl	800f258 <__match>
 800e066:	2800      	cmp	r0, #0
 800e068:	f43f aeb1 	beq.w	800ddce <_strtod_l+0xae>
 800e06c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e06e:	4985      	ldr	r1, [pc, #532]	@ (800e284 <_strtod_l+0x564>)
 800e070:	3b01      	subs	r3, #1
 800e072:	a811      	add	r0, sp, #68	@ 0x44
 800e074:	9311      	str	r3, [sp, #68]	@ 0x44
 800e076:	f001 f8ef 	bl	800f258 <__match>
 800e07a:	b910      	cbnz	r0, 800e082 <_strtod_l+0x362>
 800e07c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e07e:	3301      	adds	r3, #1
 800e080:	9311      	str	r3, [sp, #68]	@ 0x44
 800e082:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e298 <_strtod_l+0x578>
 800e086:	f04f 0a00 	mov.w	sl, #0
 800e08a:	e684      	b.n	800dd96 <_strtod_l+0x76>
 800e08c:	487e      	ldr	r0, [pc, #504]	@ (800e288 <_strtod_l+0x568>)
 800e08e:	f000 fe1f 	bl	800ecd0 <nan>
 800e092:	ec5b ab10 	vmov	sl, fp, d0
 800e096:	e67e      	b.n	800dd96 <_strtod_l+0x76>
 800e098:	ee07 9a90 	vmov	s15, r9
 800e09c:	1be2      	subs	r2, r4, r7
 800e09e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	bf08      	it	eq
 800e0a6:	461d      	moveq	r5, r3
 800e0a8:	2b10      	cmp	r3, #16
 800e0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	bfa8      	it	ge
 800e0b0:	2210      	movge	r2, #16
 800e0b2:	2b09      	cmp	r3, #9
 800e0b4:	ec5b ab17 	vmov	sl, fp, d7
 800e0b8:	dc15      	bgt.n	800e0e6 <_strtod_l+0x3c6>
 800e0ba:	1be1      	subs	r1, r4, r7
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	f43f ae6a 	beq.w	800dd96 <_strtod_l+0x76>
 800e0c2:	eba4 0107 	sub.w	r1, r4, r7
 800e0c6:	dd72      	ble.n	800e1ae <_strtod_l+0x48e>
 800e0c8:	2916      	cmp	r1, #22
 800e0ca:	dc59      	bgt.n	800e180 <_strtod_l+0x460>
 800e0cc:	4b6f      	ldr	r3, [pc, #444]	@ (800e28c <_strtod_l+0x56c>)
 800e0ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0d4:	ed93 7b00 	vldr	d7, [r3]
 800e0d8:	ec4b ab16 	vmov	d6, sl, fp
 800e0dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0e0:	ec5b ab17 	vmov	sl, fp, d7
 800e0e4:	e657      	b.n	800dd96 <_strtod_l+0x76>
 800e0e6:	4969      	ldr	r1, [pc, #420]	@ (800e28c <_strtod_l+0x56c>)
 800e0e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e0ec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e0f0:	ee06 6a90 	vmov	s13, r6
 800e0f4:	2b0f      	cmp	r3, #15
 800e0f6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e0fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e0fe:	ec5b ab16 	vmov	sl, fp, d6
 800e102:	ddda      	ble.n	800e0ba <_strtod_l+0x39a>
 800e104:	1a9a      	subs	r2, r3, r2
 800e106:	1be1      	subs	r1, r4, r7
 800e108:	440a      	add	r2, r1
 800e10a:	2a00      	cmp	r2, #0
 800e10c:	f340 8094 	ble.w	800e238 <_strtod_l+0x518>
 800e110:	f012 000f 	ands.w	r0, r2, #15
 800e114:	d00a      	beq.n	800e12c <_strtod_l+0x40c>
 800e116:	495d      	ldr	r1, [pc, #372]	@ (800e28c <_strtod_l+0x56c>)
 800e118:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e11c:	ed91 7b00 	vldr	d7, [r1]
 800e120:	ec4b ab16 	vmov	d6, sl, fp
 800e124:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e128:	ec5b ab17 	vmov	sl, fp, d7
 800e12c:	f032 020f 	bics.w	r2, r2, #15
 800e130:	d073      	beq.n	800e21a <_strtod_l+0x4fa>
 800e132:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e136:	dd47      	ble.n	800e1c8 <_strtod_l+0x4a8>
 800e138:	2400      	movs	r4, #0
 800e13a:	4625      	mov	r5, r4
 800e13c:	9407      	str	r4, [sp, #28]
 800e13e:	4626      	mov	r6, r4
 800e140:	9a05      	ldr	r2, [sp, #20]
 800e142:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e298 <_strtod_l+0x578>
 800e146:	2322      	movs	r3, #34	@ 0x22
 800e148:	6013      	str	r3, [r2, #0]
 800e14a:	f04f 0a00 	mov.w	sl, #0
 800e14e:	9b07      	ldr	r3, [sp, #28]
 800e150:	2b00      	cmp	r3, #0
 800e152:	f43f ae20 	beq.w	800dd96 <_strtod_l+0x76>
 800e156:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e158:	9805      	ldr	r0, [sp, #20]
 800e15a:	f7ff f957 	bl	800d40c <_Bfree>
 800e15e:	9805      	ldr	r0, [sp, #20]
 800e160:	4631      	mov	r1, r6
 800e162:	f7ff f953 	bl	800d40c <_Bfree>
 800e166:	9805      	ldr	r0, [sp, #20]
 800e168:	4629      	mov	r1, r5
 800e16a:	f7ff f94f 	bl	800d40c <_Bfree>
 800e16e:	9907      	ldr	r1, [sp, #28]
 800e170:	9805      	ldr	r0, [sp, #20]
 800e172:	f7ff f94b 	bl	800d40c <_Bfree>
 800e176:	9805      	ldr	r0, [sp, #20]
 800e178:	4621      	mov	r1, r4
 800e17a:	f7ff f947 	bl	800d40c <_Bfree>
 800e17e:	e60a      	b.n	800dd96 <_strtod_l+0x76>
 800e180:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e184:	1be0      	subs	r0, r4, r7
 800e186:	4281      	cmp	r1, r0
 800e188:	dbbc      	blt.n	800e104 <_strtod_l+0x3e4>
 800e18a:	4a40      	ldr	r2, [pc, #256]	@ (800e28c <_strtod_l+0x56c>)
 800e18c:	f1c3 030f 	rsb	r3, r3, #15
 800e190:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e194:	ed91 7b00 	vldr	d7, [r1]
 800e198:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e19a:	ec4b ab16 	vmov	d6, sl, fp
 800e19e:	1acb      	subs	r3, r1, r3
 800e1a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e1a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1a8:	ed92 6b00 	vldr	d6, [r2]
 800e1ac:	e796      	b.n	800e0dc <_strtod_l+0x3bc>
 800e1ae:	3116      	adds	r1, #22
 800e1b0:	dba8      	blt.n	800e104 <_strtod_l+0x3e4>
 800e1b2:	4b36      	ldr	r3, [pc, #216]	@ (800e28c <_strtod_l+0x56c>)
 800e1b4:	1b3c      	subs	r4, r7, r4
 800e1b6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e1ba:	ed94 7b00 	vldr	d7, [r4]
 800e1be:	ec4b ab16 	vmov	d6, sl, fp
 800e1c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e1c6:	e78b      	b.n	800e0e0 <_strtod_l+0x3c0>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	ec4b ab17 	vmov	d7, sl, fp
 800e1ce:	4e30      	ldr	r6, [pc, #192]	@ (800e290 <_strtod_l+0x570>)
 800e1d0:	1112      	asrs	r2, r2, #4
 800e1d2:	4601      	mov	r1, r0
 800e1d4:	2a01      	cmp	r2, #1
 800e1d6:	dc23      	bgt.n	800e220 <_strtod_l+0x500>
 800e1d8:	b108      	cbz	r0, 800e1de <_strtod_l+0x4be>
 800e1da:	ec5b ab17 	vmov	sl, fp, d7
 800e1de:	4a2c      	ldr	r2, [pc, #176]	@ (800e290 <_strtod_l+0x570>)
 800e1e0:	482c      	ldr	r0, [pc, #176]	@ (800e294 <_strtod_l+0x574>)
 800e1e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e1e6:	ed92 7b00 	vldr	d7, [r2]
 800e1ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1ee:	ec4b ab16 	vmov	d6, sl, fp
 800e1f2:	4a29      	ldr	r2, [pc, #164]	@ (800e298 <_strtod_l+0x578>)
 800e1f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1f8:	ee17 1a90 	vmov	r1, s15
 800e1fc:	400a      	ands	r2, r1
 800e1fe:	4282      	cmp	r2, r0
 800e200:	ec5b ab17 	vmov	sl, fp, d7
 800e204:	d898      	bhi.n	800e138 <_strtod_l+0x418>
 800e206:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e20a:	4282      	cmp	r2, r0
 800e20c:	bf86      	itte	hi
 800e20e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e29c <_strtod_l+0x57c>
 800e212:	f04f 3aff 	movhi.w	sl, #4294967295
 800e216:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e21a:	2200      	movs	r2, #0
 800e21c:	9206      	str	r2, [sp, #24]
 800e21e:	e076      	b.n	800e30e <_strtod_l+0x5ee>
 800e220:	f012 0f01 	tst.w	r2, #1
 800e224:	d004      	beq.n	800e230 <_strtod_l+0x510>
 800e226:	ed96 6b00 	vldr	d6, [r6]
 800e22a:	2001      	movs	r0, #1
 800e22c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e230:	3101      	adds	r1, #1
 800e232:	1052      	asrs	r2, r2, #1
 800e234:	3608      	adds	r6, #8
 800e236:	e7cd      	b.n	800e1d4 <_strtod_l+0x4b4>
 800e238:	d0ef      	beq.n	800e21a <_strtod_l+0x4fa>
 800e23a:	4252      	negs	r2, r2
 800e23c:	f012 000f 	ands.w	r0, r2, #15
 800e240:	d00a      	beq.n	800e258 <_strtod_l+0x538>
 800e242:	4912      	ldr	r1, [pc, #72]	@ (800e28c <_strtod_l+0x56c>)
 800e244:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e248:	ed91 7b00 	vldr	d7, [r1]
 800e24c:	ec4b ab16 	vmov	d6, sl, fp
 800e250:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e254:	ec5b ab17 	vmov	sl, fp, d7
 800e258:	1112      	asrs	r2, r2, #4
 800e25a:	d0de      	beq.n	800e21a <_strtod_l+0x4fa>
 800e25c:	2a1f      	cmp	r2, #31
 800e25e:	dd1f      	ble.n	800e2a0 <_strtod_l+0x580>
 800e260:	2400      	movs	r4, #0
 800e262:	4625      	mov	r5, r4
 800e264:	9407      	str	r4, [sp, #28]
 800e266:	4626      	mov	r6, r4
 800e268:	9a05      	ldr	r2, [sp, #20]
 800e26a:	2322      	movs	r3, #34	@ 0x22
 800e26c:	f04f 0a00 	mov.w	sl, #0
 800e270:	f04f 0b00 	mov.w	fp, #0
 800e274:	6013      	str	r3, [r2, #0]
 800e276:	e76a      	b.n	800e14e <_strtod_l+0x42e>
 800e278:	0800fb9e 	.word	0x0800fb9e
 800e27c:	0800fdb4 	.word	0x0800fdb4
 800e280:	0800fb96 	.word	0x0800fb96
 800e284:	0800fbcd 	.word	0x0800fbcd
 800e288:	0800fe5c 	.word	0x0800fe5c
 800e28c:	0800fce8 	.word	0x0800fce8
 800e290:	0800fcc0 	.word	0x0800fcc0
 800e294:	7ca00000 	.word	0x7ca00000
 800e298:	7ff00000 	.word	0x7ff00000
 800e29c:	7fefffff 	.word	0x7fefffff
 800e2a0:	f012 0110 	ands.w	r1, r2, #16
 800e2a4:	bf18      	it	ne
 800e2a6:	216a      	movne	r1, #106	@ 0x6a
 800e2a8:	9106      	str	r1, [sp, #24]
 800e2aa:	ec4b ab17 	vmov	d7, sl, fp
 800e2ae:	49b0      	ldr	r1, [pc, #704]	@ (800e570 <_strtod_l+0x850>)
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	07d6      	lsls	r6, r2, #31
 800e2b4:	d504      	bpl.n	800e2c0 <_strtod_l+0x5a0>
 800e2b6:	ed91 6b00 	vldr	d6, [r1]
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2c0:	1052      	asrs	r2, r2, #1
 800e2c2:	f101 0108 	add.w	r1, r1, #8
 800e2c6:	d1f4      	bne.n	800e2b2 <_strtod_l+0x592>
 800e2c8:	b108      	cbz	r0, 800e2ce <_strtod_l+0x5ae>
 800e2ca:	ec5b ab17 	vmov	sl, fp, d7
 800e2ce:	9a06      	ldr	r2, [sp, #24]
 800e2d0:	b1b2      	cbz	r2, 800e300 <_strtod_l+0x5e0>
 800e2d2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e2d6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e2da:	2a00      	cmp	r2, #0
 800e2dc:	4658      	mov	r0, fp
 800e2de:	dd0f      	ble.n	800e300 <_strtod_l+0x5e0>
 800e2e0:	2a1f      	cmp	r2, #31
 800e2e2:	dd55      	ble.n	800e390 <_strtod_l+0x670>
 800e2e4:	2a34      	cmp	r2, #52	@ 0x34
 800e2e6:	bfde      	ittt	le
 800e2e8:	f04f 32ff 	movle.w	r2, #4294967295
 800e2ec:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e2f0:	408a      	lslle	r2, r1
 800e2f2:	f04f 0a00 	mov.w	sl, #0
 800e2f6:	bfcc      	ite	gt
 800e2f8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e2fc:	ea02 0b00 	andle.w	fp, r2, r0
 800e300:	ec4b ab17 	vmov	d7, sl, fp
 800e304:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30c:	d0a8      	beq.n	800e260 <_strtod_l+0x540>
 800e30e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e310:	9805      	ldr	r0, [sp, #20]
 800e312:	f8cd 9000 	str.w	r9, [sp]
 800e316:	462a      	mov	r2, r5
 800e318:	f7ff f8e0 	bl	800d4dc <__s2b>
 800e31c:	9007      	str	r0, [sp, #28]
 800e31e:	2800      	cmp	r0, #0
 800e320:	f43f af0a 	beq.w	800e138 <_strtod_l+0x418>
 800e324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e326:	1b3f      	subs	r7, r7, r4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	bfb4      	ite	lt
 800e32c:	463b      	movlt	r3, r7
 800e32e:	2300      	movge	r3, #0
 800e330:	930a      	str	r3, [sp, #40]	@ 0x28
 800e332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e334:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e560 <_strtod_l+0x840>
 800e338:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e33c:	2400      	movs	r4, #0
 800e33e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e340:	4625      	mov	r5, r4
 800e342:	9b07      	ldr	r3, [sp, #28]
 800e344:	9805      	ldr	r0, [sp, #20]
 800e346:	6859      	ldr	r1, [r3, #4]
 800e348:	f7ff f820 	bl	800d38c <_Balloc>
 800e34c:	4606      	mov	r6, r0
 800e34e:	2800      	cmp	r0, #0
 800e350:	f43f aef6 	beq.w	800e140 <_strtod_l+0x420>
 800e354:	9b07      	ldr	r3, [sp, #28]
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	ec4b ab19 	vmov	d9, sl, fp
 800e35c:	3202      	adds	r2, #2
 800e35e:	f103 010c 	add.w	r1, r3, #12
 800e362:	0092      	lsls	r2, r2, #2
 800e364:	300c      	adds	r0, #12
 800e366:	f000 fca5 	bl	800ecb4 <memcpy>
 800e36a:	eeb0 0b49 	vmov.f64	d0, d9
 800e36e:	9805      	ldr	r0, [sp, #20]
 800e370:	aa14      	add	r2, sp, #80	@ 0x50
 800e372:	a913      	add	r1, sp, #76	@ 0x4c
 800e374:	f7ff fbee 	bl	800db54 <__d2b>
 800e378:	9012      	str	r0, [sp, #72]	@ 0x48
 800e37a:	2800      	cmp	r0, #0
 800e37c:	f43f aee0 	beq.w	800e140 <_strtod_l+0x420>
 800e380:	9805      	ldr	r0, [sp, #20]
 800e382:	2101      	movs	r1, #1
 800e384:	f7ff f940 	bl	800d608 <__i2b>
 800e388:	4605      	mov	r5, r0
 800e38a:	b940      	cbnz	r0, 800e39e <_strtod_l+0x67e>
 800e38c:	2500      	movs	r5, #0
 800e38e:	e6d7      	b.n	800e140 <_strtod_l+0x420>
 800e390:	f04f 31ff 	mov.w	r1, #4294967295
 800e394:	fa01 f202 	lsl.w	r2, r1, r2
 800e398:	ea02 0a0a 	and.w	sl, r2, sl
 800e39c:	e7b0      	b.n	800e300 <_strtod_l+0x5e0>
 800e39e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e3a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e3a2:	2f00      	cmp	r7, #0
 800e3a4:	bfab      	itete	ge
 800e3a6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e3a8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e3aa:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e3ae:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e3b2:	bfac      	ite	ge
 800e3b4:	eb07 0903 	addge.w	r9, r7, r3
 800e3b8:	eba3 0807 	sublt.w	r8, r3, r7
 800e3bc:	9b06      	ldr	r3, [sp, #24]
 800e3be:	1aff      	subs	r7, r7, r3
 800e3c0:	4417      	add	r7, r2
 800e3c2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e3c6:	4a6b      	ldr	r2, [pc, #428]	@ (800e574 <_strtod_l+0x854>)
 800e3c8:	3f01      	subs	r7, #1
 800e3ca:	4297      	cmp	r7, r2
 800e3cc:	da51      	bge.n	800e472 <_strtod_l+0x752>
 800e3ce:	1bd1      	subs	r1, r2, r7
 800e3d0:	291f      	cmp	r1, #31
 800e3d2:	eba3 0301 	sub.w	r3, r3, r1
 800e3d6:	f04f 0201 	mov.w	r2, #1
 800e3da:	dc3e      	bgt.n	800e45a <_strtod_l+0x73a>
 800e3dc:	408a      	lsls	r2, r1
 800e3de:	920c      	str	r2, [sp, #48]	@ 0x30
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e3e4:	eb09 0703 	add.w	r7, r9, r3
 800e3e8:	4498      	add	r8, r3
 800e3ea:	9b06      	ldr	r3, [sp, #24]
 800e3ec:	45b9      	cmp	r9, r7
 800e3ee:	4498      	add	r8, r3
 800e3f0:	464b      	mov	r3, r9
 800e3f2:	bfa8      	it	ge
 800e3f4:	463b      	movge	r3, r7
 800e3f6:	4543      	cmp	r3, r8
 800e3f8:	bfa8      	it	ge
 800e3fa:	4643      	movge	r3, r8
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	bfc2      	ittt	gt
 800e400:	1aff      	subgt	r7, r7, r3
 800e402:	eba8 0803 	subgt.w	r8, r8, r3
 800e406:	eba9 0903 	subgt.w	r9, r9, r3
 800e40a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd16      	ble.n	800e43e <_strtod_l+0x71e>
 800e410:	4629      	mov	r1, r5
 800e412:	9805      	ldr	r0, [sp, #20]
 800e414:	461a      	mov	r2, r3
 800e416:	f7ff f9b7 	bl	800d788 <__pow5mult>
 800e41a:	4605      	mov	r5, r0
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d0b5      	beq.n	800e38c <_strtod_l+0x66c>
 800e420:	4601      	mov	r1, r0
 800e422:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e424:	9805      	ldr	r0, [sp, #20]
 800e426:	f7ff f905 	bl	800d634 <__multiply>
 800e42a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e42c:	2800      	cmp	r0, #0
 800e42e:	f43f ae87 	beq.w	800e140 <_strtod_l+0x420>
 800e432:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e434:	9805      	ldr	r0, [sp, #20]
 800e436:	f7fe ffe9 	bl	800d40c <_Bfree>
 800e43a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e43c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e43e:	2f00      	cmp	r7, #0
 800e440:	dc1b      	bgt.n	800e47a <_strtod_l+0x75a>
 800e442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e444:	2b00      	cmp	r3, #0
 800e446:	dd21      	ble.n	800e48c <_strtod_l+0x76c>
 800e448:	4631      	mov	r1, r6
 800e44a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e44c:	9805      	ldr	r0, [sp, #20]
 800e44e:	f7ff f99b 	bl	800d788 <__pow5mult>
 800e452:	4606      	mov	r6, r0
 800e454:	b9d0      	cbnz	r0, 800e48c <_strtod_l+0x76c>
 800e456:	2600      	movs	r6, #0
 800e458:	e672      	b.n	800e140 <_strtod_l+0x420>
 800e45a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e45e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e462:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e466:	37e2      	adds	r7, #226	@ 0xe2
 800e468:	fa02 f107 	lsl.w	r1, r2, r7
 800e46c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e46e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e470:	e7b8      	b.n	800e3e4 <_strtod_l+0x6c4>
 800e472:	2200      	movs	r2, #0
 800e474:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e476:	2201      	movs	r2, #1
 800e478:	e7f9      	b.n	800e46e <_strtod_l+0x74e>
 800e47a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e47c:	9805      	ldr	r0, [sp, #20]
 800e47e:	463a      	mov	r2, r7
 800e480:	f7ff f9dc 	bl	800d83c <__lshift>
 800e484:	9012      	str	r0, [sp, #72]	@ 0x48
 800e486:	2800      	cmp	r0, #0
 800e488:	d1db      	bne.n	800e442 <_strtod_l+0x722>
 800e48a:	e659      	b.n	800e140 <_strtod_l+0x420>
 800e48c:	f1b8 0f00 	cmp.w	r8, #0
 800e490:	dd07      	ble.n	800e4a2 <_strtod_l+0x782>
 800e492:	4631      	mov	r1, r6
 800e494:	9805      	ldr	r0, [sp, #20]
 800e496:	4642      	mov	r2, r8
 800e498:	f7ff f9d0 	bl	800d83c <__lshift>
 800e49c:	4606      	mov	r6, r0
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d0d9      	beq.n	800e456 <_strtod_l+0x736>
 800e4a2:	f1b9 0f00 	cmp.w	r9, #0
 800e4a6:	dd08      	ble.n	800e4ba <_strtod_l+0x79a>
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	9805      	ldr	r0, [sp, #20]
 800e4ac:	464a      	mov	r2, r9
 800e4ae:	f7ff f9c5 	bl	800d83c <__lshift>
 800e4b2:	4605      	mov	r5, r0
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f43f ae43 	beq.w	800e140 <_strtod_l+0x420>
 800e4ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e4bc:	9805      	ldr	r0, [sp, #20]
 800e4be:	4632      	mov	r2, r6
 800e4c0:	f7ff fa44 	bl	800d94c <__mdiff>
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	f43f ae3a 	beq.w	800e140 <_strtod_l+0x420>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e4d2:	60c3      	str	r3, [r0, #12]
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	f7ff fa1d 	bl	800d914 <__mcmp>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	da4e      	bge.n	800e57c <_strtod_l+0x85c>
 800e4de:	ea58 080a 	orrs.w	r8, r8, sl
 800e4e2:	d174      	bne.n	800e5ce <_strtod_l+0x8ae>
 800e4e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d170      	bne.n	800e5ce <_strtod_l+0x8ae>
 800e4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4f0:	0d1b      	lsrs	r3, r3, #20
 800e4f2:	051b      	lsls	r3, r3, #20
 800e4f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4f8:	d969      	bls.n	800e5ce <_strtod_l+0x8ae>
 800e4fa:	6963      	ldr	r3, [r4, #20]
 800e4fc:	b913      	cbnz	r3, 800e504 <_strtod_l+0x7e4>
 800e4fe:	6923      	ldr	r3, [r4, #16]
 800e500:	2b01      	cmp	r3, #1
 800e502:	dd64      	ble.n	800e5ce <_strtod_l+0x8ae>
 800e504:	4621      	mov	r1, r4
 800e506:	2201      	movs	r2, #1
 800e508:	9805      	ldr	r0, [sp, #20]
 800e50a:	f7ff f997 	bl	800d83c <__lshift>
 800e50e:	4629      	mov	r1, r5
 800e510:	4604      	mov	r4, r0
 800e512:	f7ff f9ff 	bl	800d914 <__mcmp>
 800e516:	2800      	cmp	r0, #0
 800e518:	dd59      	ble.n	800e5ce <_strtod_l+0x8ae>
 800e51a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e51e:	9a06      	ldr	r2, [sp, #24]
 800e520:	0d1b      	lsrs	r3, r3, #20
 800e522:	051b      	lsls	r3, r3, #20
 800e524:	2a00      	cmp	r2, #0
 800e526:	d070      	beq.n	800e60a <_strtod_l+0x8ea>
 800e528:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e52c:	d86d      	bhi.n	800e60a <_strtod_l+0x8ea>
 800e52e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e532:	f67f ae99 	bls.w	800e268 <_strtod_l+0x548>
 800e536:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e568 <_strtod_l+0x848>
 800e53a:	ec4b ab16 	vmov	d6, sl, fp
 800e53e:	4b0e      	ldr	r3, [pc, #56]	@ (800e578 <_strtod_l+0x858>)
 800e540:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e544:	ee17 2a90 	vmov	r2, s15
 800e548:	4013      	ands	r3, r2
 800e54a:	ec5b ab17 	vmov	sl, fp, d7
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f47f ae01 	bne.w	800e156 <_strtod_l+0x436>
 800e554:	9a05      	ldr	r2, [sp, #20]
 800e556:	2322      	movs	r3, #34	@ 0x22
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	e5fc      	b.n	800e156 <_strtod_l+0x436>
 800e55c:	f3af 8000 	nop.w
 800e560:	ffc00000 	.word	0xffc00000
 800e564:	41dfffff 	.word	0x41dfffff
 800e568:	00000000 	.word	0x00000000
 800e56c:	39500000 	.word	0x39500000
 800e570:	0800fde0 	.word	0x0800fde0
 800e574:	fffffc02 	.word	0xfffffc02
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	46d9      	mov	r9, fp
 800e57e:	d15d      	bne.n	800e63c <_strtod_l+0x91c>
 800e580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e584:	f1b8 0f00 	cmp.w	r8, #0
 800e588:	d02a      	beq.n	800e5e0 <_strtod_l+0x8c0>
 800e58a:	4aab      	ldr	r2, [pc, #684]	@ (800e838 <_strtod_l+0xb18>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d12a      	bne.n	800e5e6 <_strtod_l+0x8c6>
 800e590:	9b06      	ldr	r3, [sp, #24]
 800e592:	4652      	mov	r2, sl
 800e594:	b1fb      	cbz	r3, 800e5d6 <_strtod_l+0x8b6>
 800e596:	4ba9      	ldr	r3, [pc, #676]	@ (800e83c <_strtod_l+0xb1c>)
 800e598:	ea0b 0303 	and.w	r3, fp, r3
 800e59c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e5a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5a4:	d81a      	bhi.n	800e5dc <_strtod_l+0x8bc>
 800e5a6:	0d1b      	lsrs	r3, r3, #20
 800e5a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e5ac:	fa01 f303 	lsl.w	r3, r1, r3
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d118      	bne.n	800e5e6 <_strtod_l+0x8c6>
 800e5b4:	4ba2      	ldr	r3, [pc, #648]	@ (800e840 <_strtod_l+0xb20>)
 800e5b6:	4599      	cmp	r9, r3
 800e5b8:	d102      	bne.n	800e5c0 <_strtod_l+0x8a0>
 800e5ba:	3201      	adds	r2, #1
 800e5bc:	f43f adc0 	beq.w	800e140 <_strtod_l+0x420>
 800e5c0:	4b9e      	ldr	r3, [pc, #632]	@ (800e83c <_strtod_l+0xb1c>)
 800e5c2:	ea09 0303 	and.w	r3, r9, r3
 800e5c6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e5ca:	f04f 0a00 	mov.w	sl, #0
 800e5ce:	9b06      	ldr	r3, [sp, #24]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1b0      	bne.n	800e536 <_strtod_l+0x816>
 800e5d4:	e5bf      	b.n	800e156 <_strtod_l+0x436>
 800e5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5da:	e7e9      	b.n	800e5b0 <_strtod_l+0x890>
 800e5dc:	460b      	mov	r3, r1
 800e5de:	e7e7      	b.n	800e5b0 <_strtod_l+0x890>
 800e5e0:	ea53 030a 	orrs.w	r3, r3, sl
 800e5e4:	d099      	beq.n	800e51a <_strtod_l+0x7fa>
 800e5e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5e8:	b1c3      	cbz	r3, 800e61c <_strtod_l+0x8fc>
 800e5ea:	ea13 0f09 	tst.w	r3, r9
 800e5ee:	d0ee      	beq.n	800e5ce <_strtod_l+0x8ae>
 800e5f0:	9a06      	ldr	r2, [sp, #24]
 800e5f2:	4650      	mov	r0, sl
 800e5f4:	4659      	mov	r1, fp
 800e5f6:	f1b8 0f00 	cmp.w	r8, #0
 800e5fa:	d013      	beq.n	800e624 <_strtod_l+0x904>
 800e5fc:	f7ff fb75 	bl	800dcea <sulp>
 800e600:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e604:	ec5b ab17 	vmov	sl, fp, d7
 800e608:	e7e1      	b.n	800e5ce <_strtod_l+0x8ae>
 800e60a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e60e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e616:	f04f 3aff 	mov.w	sl, #4294967295
 800e61a:	e7d8      	b.n	800e5ce <_strtod_l+0x8ae>
 800e61c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e61e:	ea13 0f0a 	tst.w	r3, sl
 800e622:	e7e4      	b.n	800e5ee <_strtod_l+0x8ce>
 800e624:	f7ff fb61 	bl	800dcea <sulp>
 800e628:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e62c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e634:	ec5b ab10 	vmov	sl, fp, d0
 800e638:	d1c9      	bne.n	800e5ce <_strtod_l+0x8ae>
 800e63a:	e615      	b.n	800e268 <_strtod_l+0x548>
 800e63c:	4629      	mov	r1, r5
 800e63e:	4620      	mov	r0, r4
 800e640:	f7ff fae0 	bl	800dc04 <__ratio>
 800e644:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e648:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e650:	d85d      	bhi.n	800e70e <_strtod_l+0x9ee>
 800e652:	f1b8 0f00 	cmp.w	r8, #0
 800e656:	d164      	bne.n	800e722 <_strtod_l+0xa02>
 800e658:	f1ba 0f00 	cmp.w	sl, #0
 800e65c:	d14b      	bne.n	800e6f6 <_strtod_l+0x9d6>
 800e65e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e662:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d160      	bne.n	800e72c <_strtod_l+0xa0c>
 800e66a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e66e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e676:	d401      	bmi.n	800e67c <_strtod_l+0x95c>
 800e678:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e67c:	eeb1 ab48 	vneg.f64	d10, d8
 800e680:	486e      	ldr	r0, [pc, #440]	@ (800e83c <_strtod_l+0xb1c>)
 800e682:	4970      	ldr	r1, [pc, #448]	@ (800e844 <_strtod_l+0xb24>)
 800e684:	ea09 0700 	and.w	r7, r9, r0
 800e688:	428f      	cmp	r7, r1
 800e68a:	ec53 2b1a 	vmov	r2, r3, d10
 800e68e:	d17d      	bne.n	800e78c <_strtod_l+0xa6c>
 800e690:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e694:	ec4b ab1c 	vmov	d12, sl, fp
 800e698:	eeb0 0b4c 	vmov.f64	d0, d12
 800e69c:	f7ff f9ea 	bl	800da74 <__ulp>
 800e6a0:	4866      	ldr	r0, [pc, #408]	@ (800e83c <_strtod_l+0xb1c>)
 800e6a2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e6a6:	ee1c 3a90 	vmov	r3, s25
 800e6aa:	4a67      	ldr	r2, [pc, #412]	@ (800e848 <_strtod_l+0xb28>)
 800e6ac:	ea03 0100 	and.w	r1, r3, r0
 800e6b0:	4291      	cmp	r1, r2
 800e6b2:	ec5b ab1c 	vmov	sl, fp, d12
 800e6b6:	d93c      	bls.n	800e732 <_strtod_l+0xa12>
 800e6b8:	ee19 2a90 	vmov	r2, s19
 800e6bc:	4b60      	ldr	r3, [pc, #384]	@ (800e840 <_strtod_l+0xb20>)
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d104      	bne.n	800e6cc <_strtod_l+0x9ac>
 800e6c2:	ee19 3a10 	vmov	r3, s18
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	f43f ad3a 	beq.w	800e140 <_strtod_l+0x420>
 800e6cc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e840 <_strtod_l+0xb20>
 800e6d0:	f04f 3aff 	mov.w	sl, #4294967295
 800e6d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e6d6:	9805      	ldr	r0, [sp, #20]
 800e6d8:	f7fe fe98 	bl	800d40c <_Bfree>
 800e6dc:	9805      	ldr	r0, [sp, #20]
 800e6de:	4631      	mov	r1, r6
 800e6e0:	f7fe fe94 	bl	800d40c <_Bfree>
 800e6e4:	9805      	ldr	r0, [sp, #20]
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7fe fe90 	bl	800d40c <_Bfree>
 800e6ec:	9805      	ldr	r0, [sp, #20]
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	f7fe fe8c 	bl	800d40c <_Bfree>
 800e6f4:	e625      	b.n	800e342 <_strtod_l+0x622>
 800e6f6:	f1ba 0f01 	cmp.w	sl, #1
 800e6fa:	d103      	bne.n	800e704 <_strtod_l+0x9e4>
 800e6fc:	f1bb 0f00 	cmp.w	fp, #0
 800e700:	f43f adb2 	beq.w	800e268 <_strtod_l+0x548>
 800e704:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e708:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e70c:	e7b8      	b.n	800e680 <_strtod_l+0x960>
 800e70e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e712:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e716:	f1b8 0f00 	cmp.w	r8, #0
 800e71a:	d0af      	beq.n	800e67c <_strtod_l+0x95c>
 800e71c:	eeb0 ab48 	vmov.f64	d10, d8
 800e720:	e7ae      	b.n	800e680 <_strtod_l+0x960>
 800e722:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e726:	eeb0 8b4a 	vmov.f64	d8, d10
 800e72a:	e7a9      	b.n	800e680 <_strtod_l+0x960>
 800e72c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e730:	e7a6      	b.n	800e680 <_strtod_l+0x960>
 800e732:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e736:	9b06      	ldr	r3, [sp, #24]
 800e738:	46d9      	mov	r9, fp
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1ca      	bne.n	800e6d4 <_strtod_l+0x9b4>
 800e73e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e742:	0d1b      	lsrs	r3, r3, #20
 800e744:	051b      	lsls	r3, r3, #20
 800e746:	429f      	cmp	r7, r3
 800e748:	d1c4      	bne.n	800e6d4 <_strtod_l+0x9b4>
 800e74a:	ec51 0b18 	vmov	r0, r1, d8
 800e74e:	f7f1 fff3 	bl	8000738 <__aeabi_d2lz>
 800e752:	f7f1 ffab 	bl	80006ac <__aeabi_l2d>
 800e756:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e75a:	ec41 0b17 	vmov	d7, r0, r1
 800e75e:	ea49 090a 	orr.w	r9, r9, sl
 800e762:	ea59 0908 	orrs.w	r9, r9, r8
 800e766:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e76a:	d03c      	beq.n	800e7e6 <_strtod_l+0xac6>
 800e76c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e820 <_strtod_l+0xb00>
 800e770:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e778:	f53f aced 	bmi.w	800e156 <_strtod_l+0x436>
 800e77c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e828 <_strtod_l+0xb08>
 800e780:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e788:	dda4      	ble.n	800e6d4 <_strtod_l+0x9b4>
 800e78a:	e4e4      	b.n	800e156 <_strtod_l+0x436>
 800e78c:	9906      	ldr	r1, [sp, #24]
 800e78e:	b1e1      	cbz	r1, 800e7ca <_strtod_l+0xaaa>
 800e790:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e794:	d819      	bhi.n	800e7ca <_strtod_l+0xaaa>
 800e796:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	d811      	bhi.n	800e7c4 <_strtod_l+0xaa4>
 800e7a0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e7a4:	ee18 3a10 	vmov	r3, s16
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	bf38      	it	cc
 800e7ac:	2301      	movcc	r3, #1
 800e7ae:	ee08 3a10 	vmov	s16, r3
 800e7b2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e7b6:	f1b8 0f00 	cmp.w	r8, #0
 800e7ba:	d111      	bne.n	800e7e0 <_strtod_l+0xac0>
 800e7bc:	eeb1 7b48 	vneg.f64	d7, d8
 800e7c0:	ec53 2b17 	vmov	r2, r3, d7
 800e7c4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e7c8:	1bcb      	subs	r3, r1, r7
 800e7ca:	eeb0 0b49 	vmov.f64	d0, d9
 800e7ce:	ec43 2b1a 	vmov	d10, r2, r3
 800e7d2:	f7ff f94f 	bl	800da74 <__ulp>
 800e7d6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e7da:	ec5b ab19 	vmov	sl, fp, d9
 800e7de:	e7aa      	b.n	800e736 <_strtod_l+0xa16>
 800e7e0:	eeb0 7b48 	vmov.f64	d7, d8
 800e7e4:	e7ec      	b.n	800e7c0 <_strtod_l+0xaa0>
 800e7e6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e830 <_strtod_l+0xb10>
 800e7ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f2:	f57f af6f 	bpl.w	800e6d4 <_strtod_l+0x9b4>
 800e7f6:	e4ae      	b.n	800e156 <_strtod_l+0x436>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	9308      	str	r3, [sp, #32]
 800e7fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	f7ff bacc 	b.w	800dd9e <_strtod_l+0x7e>
 800e806:	2a65      	cmp	r2, #101	@ 0x65
 800e808:	f43f abbc 	beq.w	800df84 <_strtod_l+0x264>
 800e80c:	2a45      	cmp	r2, #69	@ 0x45
 800e80e:	f43f abb9 	beq.w	800df84 <_strtod_l+0x264>
 800e812:	2301      	movs	r3, #1
 800e814:	9306      	str	r3, [sp, #24]
 800e816:	f7ff bbf0 	b.w	800dffa <_strtod_l+0x2da>
 800e81a:	bf00      	nop
 800e81c:	f3af 8000 	nop.w
 800e820:	94a03595 	.word	0x94a03595
 800e824:	3fdfffff 	.word	0x3fdfffff
 800e828:	35afe535 	.word	0x35afe535
 800e82c:	3fe00000 	.word	0x3fe00000
 800e830:	94a03595 	.word	0x94a03595
 800e834:	3fcfffff 	.word	0x3fcfffff
 800e838:	000fffff 	.word	0x000fffff
 800e83c:	7ff00000 	.word	0x7ff00000
 800e840:	7fefffff 	.word	0x7fefffff
 800e844:	7fe00000 	.word	0x7fe00000
 800e848:	7c9fffff 	.word	0x7c9fffff

0800e84c <_strtod_r>:
 800e84c:	4b01      	ldr	r3, [pc, #4]	@ (800e854 <_strtod_r+0x8>)
 800e84e:	f7ff ba67 	b.w	800dd20 <_strtod_l>
 800e852:	bf00      	nop
 800e854:	2400007c 	.word	0x2400007c

0800e858 <__ssputs_r>:
 800e858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e85c:	688e      	ldr	r6, [r1, #8]
 800e85e:	461f      	mov	r7, r3
 800e860:	42be      	cmp	r6, r7
 800e862:	680b      	ldr	r3, [r1, #0]
 800e864:	4682      	mov	sl, r0
 800e866:	460c      	mov	r4, r1
 800e868:	4690      	mov	r8, r2
 800e86a:	d82d      	bhi.n	800e8c8 <__ssputs_r+0x70>
 800e86c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e870:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e874:	d026      	beq.n	800e8c4 <__ssputs_r+0x6c>
 800e876:	6965      	ldr	r5, [r4, #20]
 800e878:	6909      	ldr	r1, [r1, #16]
 800e87a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e87e:	eba3 0901 	sub.w	r9, r3, r1
 800e882:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e886:	1c7b      	adds	r3, r7, #1
 800e888:	444b      	add	r3, r9
 800e88a:	106d      	asrs	r5, r5, #1
 800e88c:	429d      	cmp	r5, r3
 800e88e:	bf38      	it	cc
 800e890:	461d      	movcc	r5, r3
 800e892:	0553      	lsls	r3, r2, #21
 800e894:	d527      	bpl.n	800e8e6 <__ssputs_r+0x8e>
 800e896:	4629      	mov	r1, r5
 800e898:	f7fe fcec 	bl	800d274 <_malloc_r>
 800e89c:	4606      	mov	r6, r0
 800e89e:	b360      	cbz	r0, 800e8fa <__ssputs_r+0xa2>
 800e8a0:	6921      	ldr	r1, [r4, #16]
 800e8a2:	464a      	mov	r2, r9
 800e8a4:	f000 fa06 	bl	800ecb4 <memcpy>
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8b2:	81a3      	strh	r3, [r4, #12]
 800e8b4:	6126      	str	r6, [r4, #16]
 800e8b6:	6165      	str	r5, [r4, #20]
 800e8b8:	444e      	add	r6, r9
 800e8ba:	eba5 0509 	sub.w	r5, r5, r9
 800e8be:	6026      	str	r6, [r4, #0]
 800e8c0:	60a5      	str	r5, [r4, #8]
 800e8c2:	463e      	mov	r6, r7
 800e8c4:	42be      	cmp	r6, r7
 800e8c6:	d900      	bls.n	800e8ca <__ssputs_r+0x72>
 800e8c8:	463e      	mov	r6, r7
 800e8ca:	6820      	ldr	r0, [r4, #0]
 800e8cc:	4632      	mov	r2, r6
 800e8ce:	4641      	mov	r1, r8
 800e8d0:	f000 f9c6 	bl	800ec60 <memmove>
 800e8d4:	68a3      	ldr	r3, [r4, #8]
 800e8d6:	1b9b      	subs	r3, r3, r6
 800e8d8:	60a3      	str	r3, [r4, #8]
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	4433      	add	r3, r6
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8e6:	462a      	mov	r2, r5
 800e8e8:	f000 fd77 	bl	800f3da <_realloc_r>
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d1e0      	bne.n	800e8b4 <__ssputs_r+0x5c>
 800e8f2:	6921      	ldr	r1, [r4, #16]
 800e8f4:	4650      	mov	r0, sl
 800e8f6:	f7fe fc49 	bl	800d18c <_free_r>
 800e8fa:	230c      	movs	r3, #12
 800e8fc:	f8ca 3000 	str.w	r3, [sl]
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e906:	81a3      	strh	r3, [r4, #12]
 800e908:	f04f 30ff 	mov.w	r0, #4294967295
 800e90c:	e7e9      	b.n	800e8e2 <__ssputs_r+0x8a>
	...

0800e910 <_svfiprintf_r>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	4698      	mov	r8, r3
 800e916:	898b      	ldrh	r3, [r1, #12]
 800e918:	061b      	lsls	r3, r3, #24
 800e91a:	b09d      	sub	sp, #116	@ 0x74
 800e91c:	4607      	mov	r7, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	4614      	mov	r4, r2
 800e922:	d510      	bpl.n	800e946 <_svfiprintf_r+0x36>
 800e924:	690b      	ldr	r3, [r1, #16]
 800e926:	b973      	cbnz	r3, 800e946 <_svfiprintf_r+0x36>
 800e928:	2140      	movs	r1, #64	@ 0x40
 800e92a:	f7fe fca3 	bl	800d274 <_malloc_r>
 800e92e:	6028      	str	r0, [r5, #0]
 800e930:	6128      	str	r0, [r5, #16]
 800e932:	b930      	cbnz	r0, 800e942 <_svfiprintf_r+0x32>
 800e934:	230c      	movs	r3, #12
 800e936:	603b      	str	r3, [r7, #0]
 800e938:	f04f 30ff 	mov.w	r0, #4294967295
 800e93c:	b01d      	add	sp, #116	@ 0x74
 800e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e942:	2340      	movs	r3, #64	@ 0x40
 800e944:	616b      	str	r3, [r5, #20]
 800e946:	2300      	movs	r3, #0
 800e948:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94a:	2320      	movs	r3, #32
 800e94c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e950:	f8cd 800c 	str.w	r8, [sp, #12]
 800e954:	2330      	movs	r3, #48	@ 0x30
 800e956:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eaf4 <_svfiprintf_r+0x1e4>
 800e95a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e95e:	f04f 0901 	mov.w	r9, #1
 800e962:	4623      	mov	r3, r4
 800e964:	469a      	mov	sl, r3
 800e966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e96a:	b10a      	cbz	r2, 800e970 <_svfiprintf_r+0x60>
 800e96c:	2a25      	cmp	r2, #37	@ 0x25
 800e96e:	d1f9      	bne.n	800e964 <_svfiprintf_r+0x54>
 800e970:	ebba 0b04 	subs.w	fp, sl, r4
 800e974:	d00b      	beq.n	800e98e <_svfiprintf_r+0x7e>
 800e976:	465b      	mov	r3, fp
 800e978:	4622      	mov	r2, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	4638      	mov	r0, r7
 800e97e:	f7ff ff6b 	bl	800e858 <__ssputs_r>
 800e982:	3001      	adds	r0, #1
 800e984:	f000 80a7 	beq.w	800ead6 <_svfiprintf_r+0x1c6>
 800e988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e98a:	445a      	add	r2, fp
 800e98c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e98e:	f89a 3000 	ldrb.w	r3, [sl]
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 809f 	beq.w	800ead6 <_svfiprintf_r+0x1c6>
 800e998:	2300      	movs	r3, #0
 800e99a:	f04f 32ff 	mov.w	r2, #4294967295
 800e99e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9a2:	f10a 0a01 	add.w	sl, sl, #1
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	9307      	str	r3, [sp, #28]
 800e9aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9b0:	4654      	mov	r4, sl
 800e9b2:	2205      	movs	r2, #5
 800e9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b8:	484e      	ldr	r0, [pc, #312]	@ (800eaf4 <_svfiprintf_r+0x1e4>)
 800e9ba:	f7f1 fc91 	bl	80002e0 <memchr>
 800e9be:	9a04      	ldr	r2, [sp, #16]
 800e9c0:	b9d8      	cbnz	r0, 800e9fa <_svfiprintf_r+0xea>
 800e9c2:	06d0      	lsls	r0, r2, #27
 800e9c4:	bf44      	itt	mi
 800e9c6:	2320      	movmi	r3, #32
 800e9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9cc:	0711      	lsls	r1, r2, #28
 800e9ce:	bf44      	itt	mi
 800e9d0:	232b      	movmi	r3, #43	@ 0x2b
 800e9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9da:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9dc:	d015      	beq.n	800ea0a <_svfiprintf_r+0xfa>
 800e9de:	9a07      	ldr	r2, [sp, #28]
 800e9e0:	4654      	mov	r4, sl
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	f04f 0c0a 	mov.w	ip, #10
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ee:	3b30      	subs	r3, #48	@ 0x30
 800e9f0:	2b09      	cmp	r3, #9
 800e9f2:	d94b      	bls.n	800ea8c <_svfiprintf_r+0x17c>
 800e9f4:	b1b0      	cbz	r0, 800ea24 <_svfiprintf_r+0x114>
 800e9f6:	9207      	str	r2, [sp, #28]
 800e9f8:	e014      	b.n	800ea24 <_svfiprintf_r+0x114>
 800e9fa:	eba0 0308 	sub.w	r3, r0, r8
 800e9fe:	fa09 f303 	lsl.w	r3, r9, r3
 800ea02:	4313      	orrs	r3, r2
 800ea04:	9304      	str	r3, [sp, #16]
 800ea06:	46a2      	mov	sl, r4
 800ea08:	e7d2      	b.n	800e9b0 <_svfiprintf_r+0xa0>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	1d19      	adds	r1, r3, #4
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	9103      	str	r1, [sp, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	bfbb      	ittet	lt
 800ea16:	425b      	neglt	r3, r3
 800ea18:	f042 0202 	orrlt.w	r2, r2, #2
 800ea1c:	9307      	strge	r3, [sp, #28]
 800ea1e:	9307      	strlt	r3, [sp, #28]
 800ea20:	bfb8      	it	lt
 800ea22:	9204      	strlt	r2, [sp, #16]
 800ea24:	7823      	ldrb	r3, [r4, #0]
 800ea26:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea28:	d10a      	bne.n	800ea40 <_svfiprintf_r+0x130>
 800ea2a:	7863      	ldrb	r3, [r4, #1]
 800ea2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea2e:	d132      	bne.n	800ea96 <_svfiprintf_r+0x186>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	1d1a      	adds	r2, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9203      	str	r2, [sp, #12]
 800ea38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea3c:	3402      	adds	r4, #2
 800ea3e:	9305      	str	r3, [sp, #20]
 800ea40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb04 <_svfiprintf_r+0x1f4>
 800ea44:	7821      	ldrb	r1, [r4, #0]
 800ea46:	2203      	movs	r2, #3
 800ea48:	4650      	mov	r0, sl
 800ea4a:	f7f1 fc49 	bl	80002e0 <memchr>
 800ea4e:	b138      	cbz	r0, 800ea60 <_svfiprintf_r+0x150>
 800ea50:	9b04      	ldr	r3, [sp, #16]
 800ea52:	eba0 000a 	sub.w	r0, r0, sl
 800ea56:	2240      	movs	r2, #64	@ 0x40
 800ea58:	4082      	lsls	r2, r0
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	3401      	adds	r4, #1
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea64:	4824      	ldr	r0, [pc, #144]	@ (800eaf8 <_svfiprintf_r+0x1e8>)
 800ea66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea6a:	2206      	movs	r2, #6
 800ea6c:	f7f1 fc38 	bl	80002e0 <memchr>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d036      	beq.n	800eae2 <_svfiprintf_r+0x1d2>
 800ea74:	4b21      	ldr	r3, [pc, #132]	@ (800eafc <_svfiprintf_r+0x1ec>)
 800ea76:	bb1b      	cbnz	r3, 800eac0 <_svfiprintf_r+0x1b0>
 800ea78:	9b03      	ldr	r3, [sp, #12]
 800ea7a:	3307      	adds	r3, #7
 800ea7c:	f023 0307 	bic.w	r3, r3, #7
 800ea80:	3308      	adds	r3, #8
 800ea82:	9303      	str	r3, [sp, #12]
 800ea84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea86:	4433      	add	r3, r6
 800ea88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea8a:	e76a      	b.n	800e962 <_svfiprintf_r+0x52>
 800ea8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea90:	460c      	mov	r4, r1
 800ea92:	2001      	movs	r0, #1
 800ea94:	e7a8      	b.n	800e9e8 <_svfiprintf_r+0xd8>
 800ea96:	2300      	movs	r3, #0
 800ea98:	3401      	adds	r4, #1
 800ea9a:	9305      	str	r3, [sp, #20]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	f04f 0c0a 	mov.w	ip, #10
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaa8:	3a30      	subs	r2, #48	@ 0x30
 800eaaa:	2a09      	cmp	r2, #9
 800eaac:	d903      	bls.n	800eab6 <_svfiprintf_r+0x1a6>
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d0c6      	beq.n	800ea40 <_svfiprintf_r+0x130>
 800eab2:	9105      	str	r1, [sp, #20]
 800eab4:	e7c4      	b.n	800ea40 <_svfiprintf_r+0x130>
 800eab6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaba:	4604      	mov	r4, r0
 800eabc:	2301      	movs	r3, #1
 800eabe:	e7f0      	b.n	800eaa2 <_svfiprintf_r+0x192>
 800eac0:	ab03      	add	r3, sp, #12
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	462a      	mov	r2, r5
 800eac6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb00 <_svfiprintf_r+0x1f0>)
 800eac8:	a904      	add	r1, sp, #16
 800eaca:	4638      	mov	r0, r7
 800eacc:	f7fc fdd8 	bl	800b680 <_printf_float>
 800ead0:	1c42      	adds	r2, r0, #1
 800ead2:	4606      	mov	r6, r0
 800ead4:	d1d6      	bne.n	800ea84 <_svfiprintf_r+0x174>
 800ead6:	89ab      	ldrh	r3, [r5, #12]
 800ead8:	065b      	lsls	r3, r3, #25
 800eada:	f53f af2d 	bmi.w	800e938 <_svfiprintf_r+0x28>
 800eade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eae0:	e72c      	b.n	800e93c <_svfiprintf_r+0x2c>
 800eae2:	ab03      	add	r3, sp, #12
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	462a      	mov	r2, r5
 800eae8:	4b05      	ldr	r3, [pc, #20]	@ (800eb00 <_svfiprintf_r+0x1f0>)
 800eaea:	a904      	add	r1, sp, #16
 800eaec:	4638      	mov	r0, r7
 800eaee:	f7fd f84f 	bl	800bb90 <_printf_i>
 800eaf2:	e7ed      	b.n	800ead0 <_svfiprintf_r+0x1c0>
 800eaf4:	0800fe08 	.word	0x0800fe08
 800eaf8:	0800fe12 	.word	0x0800fe12
 800eafc:	0800b681 	.word	0x0800b681
 800eb00:	0800e859 	.word	0x0800e859
 800eb04:	0800fe0e 	.word	0x0800fe0e

0800eb08 <__sflush_r>:
 800eb08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	0716      	lsls	r6, r2, #28
 800eb12:	4605      	mov	r5, r0
 800eb14:	460c      	mov	r4, r1
 800eb16:	d454      	bmi.n	800ebc2 <__sflush_r+0xba>
 800eb18:	684b      	ldr	r3, [r1, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	dc02      	bgt.n	800eb24 <__sflush_r+0x1c>
 800eb1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	dd48      	ble.n	800ebb6 <__sflush_r+0xae>
 800eb24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb26:	2e00      	cmp	r6, #0
 800eb28:	d045      	beq.n	800ebb6 <__sflush_r+0xae>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb30:	682f      	ldr	r7, [r5, #0]
 800eb32:	6a21      	ldr	r1, [r4, #32]
 800eb34:	602b      	str	r3, [r5, #0]
 800eb36:	d030      	beq.n	800eb9a <__sflush_r+0x92>
 800eb38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb3a:	89a3      	ldrh	r3, [r4, #12]
 800eb3c:	0759      	lsls	r1, r3, #29
 800eb3e:	d505      	bpl.n	800eb4c <__sflush_r+0x44>
 800eb40:	6863      	ldr	r3, [r4, #4]
 800eb42:	1ad2      	subs	r2, r2, r3
 800eb44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb46:	b10b      	cbz	r3, 800eb4c <__sflush_r+0x44>
 800eb48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb4a:	1ad2      	subs	r2, r2, r3
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb50:	6a21      	ldr	r1, [r4, #32]
 800eb52:	4628      	mov	r0, r5
 800eb54:	47b0      	blx	r6
 800eb56:	1c43      	adds	r3, r0, #1
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	d106      	bne.n	800eb6a <__sflush_r+0x62>
 800eb5c:	6829      	ldr	r1, [r5, #0]
 800eb5e:	291d      	cmp	r1, #29
 800eb60:	d82b      	bhi.n	800ebba <__sflush_r+0xb2>
 800eb62:	4a2a      	ldr	r2, [pc, #168]	@ (800ec0c <__sflush_r+0x104>)
 800eb64:	410a      	asrs	r2, r1
 800eb66:	07d6      	lsls	r6, r2, #31
 800eb68:	d427      	bmi.n	800ebba <__sflush_r+0xb2>
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	6062      	str	r2, [r4, #4]
 800eb6e:	04d9      	lsls	r1, r3, #19
 800eb70:	6922      	ldr	r2, [r4, #16]
 800eb72:	6022      	str	r2, [r4, #0]
 800eb74:	d504      	bpl.n	800eb80 <__sflush_r+0x78>
 800eb76:	1c42      	adds	r2, r0, #1
 800eb78:	d101      	bne.n	800eb7e <__sflush_r+0x76>
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	b903      	cbnz	r3, 800eb80 <__sflush_r+0x78>
 800eb7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb82:	602f      	str	r7, [r5, #0]
 800eb84:	b1b9      	cbz	r1, 800ebb6 <__sflush_r+0xae>
 800eb86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb8a:	4299      	cmp	r1, r3
 800eb8c:	d002      	beq.n	800eb94 <__sflush_r+0x8c>
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f7fe fafc 	bl	800d18c <_free_r>
 800eb94:	2300      	movs	r3, #0
 800eb96:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb98:	e00d      	b.n	800ebb6 <__sflush_r+0xae>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b0      	blx	r6
 800eba0:	4602      	mov	r2, r0
 800eba2:	1c50      	adds	r0, r2, #1
 800eba4:	d1c9      	bne.n	800eb3a <__sflush_r+0x32>
 800eba6:	682b      	ldr	r3, [r5, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0c6      	beq.n	800eb3a <__sflush_r+0x32>
 800ebac:	2b1d      	cmp	r3, #29
 800ebae:	d001      	beq.n	800ebb4 <__sflush_r+0xac>
 800ebb0:	2b16      	cmp	r3, #22
 800ebb2:	d11e      	bne.n	800ebf2 <__sflush_r+0xea>
 800ebb4:	602f      	str	r7, [r5, #0]
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	e022      	b.n	800ec00 <__sflush_r+0xf8>
 800ebba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebbe:	b21b      	sxth	r3, r3
 800ebc0:	e01b      	b.n	800ebfa <__sflush_r+0xf2>
 800ebc2:	690f      	ldr	r7, [r1, #16]
 800ebc4:	2f00      	cmp	r7, #0
 800ebc6:	d0f6      	beq.n	800ebb6 <__sflush_r+0xae>
 800ebc8:	0793      	lsls	r3, r2, #30
 800ebca:	680e      	ldr	r6, [r1, #0]
 800ebcc:	bf08      	it	eq
 800ebce:	694b      	ldreq	r3, [r1, #20]
 800ebd0:	600f      	str	r7, [r1, #0]
 800ebd2:	bf18      	it	ne
 800ebd4:	2300      	movne	r3, #0
 800ebd6:	eba6 0807 	sub.w	r8, r6, r7
 800ebda:	608b      	str	r3, [r1, #8]
 800ebdc:	f1b8 0f00 	cmp.w	r8, #0
 800ebe0:	dde9      	ble.n	800ebb6 <__sflush_r+0xae>
 800ebe2:	6a21      	ldr	r1, [r4, #32]
 800ebe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ebe6:	4643      	mov	r3, r8
 800ebe8:	463a      	mov	r2, r7
 800ebea:	4628      	mov	r0, r5
 800ebec:	47b0      	blx	r6
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	dc08      	bgt.n	800ec04 <__sflush_r+0xfc>
 800ebf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebfa:	81a3      	strh	r3, [r4, #12]
 800ebfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec04:	4407      	add	r7, r0
 800ec06:	eba8 0800 	sub.w	r8, r8, r0
 800ec0a:	e7e7      	b.n	800ebdc <__sflush_r+0xd4>
 800ec0c:	dfbffffe 	.word	0xdfbffffe

0800ec10 <_fflush_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	690b      	ldr	r3, [r1, #16]
 800ec14:	4605      	mov	r5, r0
 800ec16:	460c      	mov	r4, r1
 800ec18:	b913      	cbnz	r3, 800ec20 <_fflush_r+0x10>
 800ec1a:	2500      	movs	r5, #0
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	bd38      	pop	{r3, r4, r5, pc}
 800ec20:	b118      	cbz	r0, 800ec2a <_fflush_r+0x1a>
 800ec22:	6a03      	ldr	r3, [r0, #32]
 800ec24:	b90b      	cbnz	r3, 800ec2a <_fflush_r+0x1a>
 800ec26:	f7fd fb6b 	bl	800c300 <__sinit>
 800ec2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d0f3      	beq.n	800ec1a <_fflush_r+0xa>
 800ec32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec34:	07d0      	lsls	r0, r2, #31
 800ec36:	d404      	bmi.n	800ec42 <_fflush_r+0x32>
 800ec38:	0599      	lsls	r1, r3, #22
 800ec3a:	d402      	bmi.n	800ec42 <_fflush_r+0x32>
 800ec3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec3e:	f7fd fcbc 	bl	800c5ba <__retarget_lock_acquire_recursive>
 800ec42:	4628      	mov	r0, r5
 800ec44:	4621      	mov	r1, r4
 800ec46:	f7ff ff5f 	bl	800eb08 <__sflush_r>
 800ec4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec4c:	07da      	lsls	r2, r3, #31
 800ec4e:	4605      	mov	r5, r0
 800ec50:	d4e4      	bmi.n	800ec1c <_fflush_r+0xc>
 800ec52:	89a3      	ldrh	r3, [r4, #12]
 800ec54:	059b      	lsls	r3, r3, #22
 800ec56:	d4e1      	bmi.n	800ec1c <_fflush_r+0xc>
 800ec58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec5a:	f7fd fcaf 	bl	800c5bc <__retarget_lock_release_recursive>
 800ec5e:	e7dd      	b.n	800ec1c <_fflush_r+0xc>

0800ec60 <memmove>:
 800ec60:	4288      	cmp	r0, r1
 800ec62:	b510      	push	{r4, lr}
 800ec64:	eb01 0402 	add.w	r4, r1, r2
 800ec68:	d902      	bls.n	800ec70 <memmove+0x10>
 800ec6a:	4284      	cmp	r4, r0
 800ec6c:	4623      	mov	r3, r4
 800ec6e:	d807      	bhi.n	800ec80 <memmove+0x20>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	42a1      	cmp	r1, r4
 800ec74:	d008      	beq.n	800ec88 <memmove+0x28>
 800ec76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec7e:	e7f8      	b.n	800ec72 <memmove+0x12>
 800ec80:	4402      	add	r2, r0
 800ec82:	4601      	mov	r1, r0
 800ec84:	428a      	cmp	r2, r1
 800ec86:	d100      	bne.n	800ec8a <memmove+0x2a>
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec92:	e7f7      	b.n	800ec84 <memmove+0x24>

0800ec94 <_sbrk_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	4d06      	ldr	r5, [pc, #24]	@ (800ecb0 <_sbrk_r+0x1c>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	602b      	str	r3, [r5, #0]
 800eca0:	f7f2 fdea 	bl	8001878 <_sbrk>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_sbrk_r+0x1a>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_sbrk_r+0x1a>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	24000504 	.word	0x24000504

0800ecb4 <memcpy>:
 800ecb4:	440a      	add	r2, r1
 800ecb6:	4291      	cmp	r1, r2
 800ecb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecbc:	d100      	bne.n	800ecc0 <memcpy+0xc>
 800ecbe:	4770      	bx	lr
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecca:	4291      	cmp	r1, r2
 800eccc:	d1f9      	bne.n	800ecc2 <memcpy+0xe>
 800ecce:	bd10      	pop	{r4, pc}

0800ecd0 <nan>:
 800ecd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ecd8 <nan+0x8>
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	00000000 	.word	0x00000000
 800ecdc:	7ff80000 	.word	0x7ff80000

0800ece0 <__assert_func>:
 800ece0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ece2:	4614      	mov	r4, r2
 800ece4:	461a      	mov	r2, r3
 800ece6:	4b09      	ldr	r3, [pc, #36]	@ (800ed0c <__assert_func+0x2c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4605      	mov	r5, r0
 800ecec:	68d8      	ldr	r0, [r3, #12]
 800ecee:	b954      	cbnz	r4, 800ed06 <__assert_func+0x26>
 800ecf0:	4b07      	ldr	r3, [pc, #28]	@ (800ed10 <__assert_func+0x30>)
 800ecf2:	461c      	mov	r4, r3
 800ecf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecf8:	9100      	str	r1, [sp, #0]
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	4905      	ldr	r1, [pc, #20]	@ (800ed14 <__assert_func+0x34>)
 800ecfe:	f000 fba7 	bl	800f450 <fiprintf>
 800ed02:	f000 fbb7 	bl	800f474 <abort>
 800ed06:	4b04      	ldr	r3, [pc, #16]	@ (800ed18 <__assert_func+0x38>)
 800ed08:	e7f4      	b.n	800ecf4 <__assert_func+0x14>
 800ed0a:	bf00      	nop
 800ed0c:	2400002c 	.word	0x2400002c
 800ed10:	0800fe5c 	.word	0x0800fe5c
 800ed14:	0800fe2e 	.word	0x0800fe2e
 800ed18:	0800fe21 	.word	0x0800fe21

0800ed1c <_calloc_r>:
 800ed1c:	b570      	push	{r4, r5, r6, lr}
 800ed1e:	fba1 5402 	umull	r5, r4, r1, r2
 800ed22:	b93c      	cbnz	r4, 800ed34 <_calloc_r+0x18>
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7fe faa5 	bl	800d274 <_malloc_r>
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	b928      	cbnz	r0, 800ed3a <_calloc_r+0x1e>
 800ed2e:	2600      	movs	r6, #0
 800ed30:	4630      	mov	r0, r6
 800ed32:	bd70      	pop	{r4, r5, r6, pc}
 800ed34:	220c      	movs	r2, #12
 800ed36:	6002      	str	r2, [r0, #0]
 800ed38:	e7f9      	b.n	800ed2e <_calloc_r+0x12>
 800ed3a:	462a      	mov	r2, r5
 800ed3c:	4621      	mov	r1, r4
 800ed3e:	f7fd fbac 	bl	800c49a <memset>
 800ed42:	e7f5      	b.n	800ed30 <_calloc_r+0x14>

0800ed44 <rshift>:
 800ed44:	6903      	ldr	r3, [r0, #16]
 800ed46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed52:	f100 0414 	add.w	r4, r0, #20
 800ed56:	dd45      	ble.n	800ede4 <rshift+0xa0>
 800ed58:	f011 011f 	ands.w	r1, r1, #31
 800ed5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed64:	d10c      	bne.n	800ed80 <rshift+0x3c>
 800ed66:	f100 0710 	add.w	r7, r0, #16
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	42b1      	cmp	r1, r6
 800ed6e:	d334      	bcc.n	800edda <rshift+0x96>
 800ed70:	1a9b      	subs	r3, r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	1eea      	subs	r2, r5, #3
 800ed76:	4296      	cmp	r6, r2
 800ed78:	bf38      	it	cc
 800ed7a:	2300      	movcc	r3, #0
 800ed7c:	4423      	add	r3, r4
 800ed7e:	e015      	b.n	800edac <rshift+0x68>
 800ed80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed84:	f1c1 0820 	rsb	r8, r1, #32
 800ed88:	40cf      	lsrs	r7, r1
 800ed8a:	f105 0e04 	add.w	lr, r5, #4
 800ed8e:	46a1      	mov	r9, r4
 800ed90:	4576      	cmp	r6, lr
 800ed92:	46f4      	mov	ip, lr
 800ed94:	d815      	bhi.n	800edc2 <rshift+0x7e>
 800ed96:	1a9a      	subs	r2, r3, r2
 800ed98:	0092      	lsls	r2, r2, #2
 800ed9a:	3a04      	subs	r2, #4
 800ed9c:	3501      	adds	r5, #1
 800ed9e:	42ae      	cmp	r6, r5
 800eda0:	bf38      	it	cc
 800eda2:	2200      	movcc	r2, #0
 800eda4:	18a3      	adds	r3, r4, r2
 800eda6:	50a7      	str	r7, [r4, r2]
 800eda8:	b107      	cbz	r7, 800edac <rshift+0x68>
 800edaa:	3304      	adds	r3, #4
 800edac:	1b1a      	subs	r2, r3, r4
 800edae:	42a3      	cmp	r3, r4
 800edb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edb4:	bf08      	it	eq
 800edb6:	2300      	moveq	r3, #0
 800edb8:	6102      	str	r2, [r0, #16]
 800edba:	bf08      	it	eq
 800edbc:	6143      	streq	r3, [r0, #20]
 800edbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edc2:	f8dc c000 	ldr.w	ip, [ip]
 800edc6:	fa0c fc08 	lsl.w	ip, ip, r8
 800edca:	ea4c 0707 	orr.w	r7, ip, r7
 800edce:	f849 7b04 	str.w	r7, [r9], #4
 800edd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edd6:	40cf      	lsrs	r7, r1
 800edd8:	e7da      	b.n	800ed90 <rshift+0x4c>
 800edda:	f851 cb04 	ldr.w	ip, [r1], #4
 800edde:	f847 cf04 	str.w	ip, [r7, #4]!
 800ede2:	e7c3      	b.n	800ed6c <rshift+0x28>
 800ede4:	4623      	mov	r3, r4
 800ede6:	e7e1      	b.n	800edac <rshift+0x68>

0800ede8 <__hexdig_fun>:
 800ede8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800edec:	2b09      	cmp	r3, #9
 800edee:	d802      	bhi.n	800edf6 <__hexdig_fun+0xe>
 800edf0:	3820      	subs	r0, #32
 800edf2:	b2c0      	uxtb	r0, r0
 800edf4:	4770      	bx	lr
 800edf6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800edfa:	2b05      	cmp	r3, #5
 800edfc:	d801      	bhi.n	800ee02 <__hexdig_fun+0x1a>
 800edfe:	3847      	subs	r0, #71	@ 0x47
 800ee00:	e7f7      	b.n	800edf2 <__hexdig_fun+0xa>
 800ee02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ee06:	2b05      	cmp	r3, #5
 800ee08:	d801      	bhi.n	800ee0e <__hexdig_fun+0x26>
 800ee0a:	3827      	subs	r0, #39	@ 0x27
 800ee0c:	e7f1      	b.n	800edf2 <__hexdig_fun+0xa>
 800ee0e:	2000      	movs	r0, #0
 800ee10:	4770      	bx	lr
	...

0800ee14 <__gethex>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	b085      	sub	sp, #20
 800ee1a:	468a      	mov	sl, r1
 800ee1c:	9302      	str	r3, [sp, #8]
 800ee1e:	680b      	ldr	r3, [r1, #0]
 800ee20:	9001      	str	r0, [sp, #4]
 800ee22:	4690      	mov	r8, r2
 800ee24:	1c9c      	adds	r4, r3, #2
 800ee26:	46a1      	mov	r9, r4
 800ee28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ee2c:	2830      	cmp	r0, #48	@ 0x30
 800ee2e:	d0fa      	beq.n	800ee26 <__gethex+0x12>
 800ee30:	eba9 0303 	sub.w	r3, r9, r3
 800ee34:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee38:	f7ff ffd6 	bl	800ede8 <__hexdig_fun>
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d168      	bne.n	800ef14 <__gethex+0x100>
 800ee42:	49a0      	ldr	r1, [pc, #640]	@ (800f0c4 <__gethex+0x2b0>)
 800ee44:	2201      	movs	r2, #1
 800ee46:	4648      	mov	r0, r9
 800ee48:	f7fd fb2f 	bl	800c4aa <strncmp>
 800ee4c:	4607      	mov	r7, r0
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d167      	bne.n	800ef22 <__gethex+0x10e>
 800ee52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee56:	4626      	mov	r6, r4
 800ee58:	f7ff ffc6 	bl	800ede8 <__hexdig_fun>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d062      	beq.n	800ef26 <__gethex+0x112>
 800ee60:	4623      	mov	r3, r4
 800ee62:	7818      	ldrb	r0, [r3, #0]
 800ee64:	2830      	cmp	r0, #48	@ 0x30
 800ee66:	4699      	mov	r9, r3
 800ee68:	f103 0301 	add.w	r3, r3, #1
 800ee6c:	d0f9      	beq.n	800ee62 <__gethex+0x4e>
 800ee6e:	f7ff ffbb 	bl	800ede8 <__hexdig_fun>
 800ee72:	fab0 f580 	clz	r5, r0
 800ee76:	096d      	lsrs	r5, r5, #5
 800ee78:	f04f 0b01 	mov.w	fp, #1
 800ee7c:	464a      	mov	r2, r9
 800ee7e:	4616      	mov	r6, r2
 800ee80:	3201      	adds	r2, #1
 800ee82:	7830      	ldrb	r0, [r6, #0]
 800ee84:	f7ff ffb0 	bl	800ede8 <__hexdig_fun>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d1f8      	bne.n	800ee7e <__gethex+0x6a>
 800ee8c:	498d      	ldr	r1, [pc, #564]	@ (800f0c4 <__gethex+0x2b0>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	4630      	mov	r0, r6
 800ee92:	f7fd fb0a 	bl	800c4aa <strncmp>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d13f      	bne.n	800ef1a <__gethex+0x106>
 800ee9a:	b944      	cbnz	r4, 800eeae <__gethex+0x9a>
 800ee9c:	1c74      	adds	r4, r6, #1
 800ee9e:	4622      	mov	r2, r4
 800eea0:	4616      	mov	r6, r2
 800eea2:	3201      	adds	r2, #1
 800eea4:	7830      	ldrb	r0, [r6, #0]
 800eea6:	f7ff ff9f 	bl	800ede8 <__hexdig_fun>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d1f8      	bne.n	800eea0 <__gethex+0x8c>
 800eeae:	1ba4      	subs	r4, r4, r6
 800eeb0:	00a7      	lsls	r7, r4, #2
 800eeb2:	7833      	ldrb	r3, [r6, #0]
 800eeb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eeb8:	2b50      	cmp	r3, #80	@ 0x50
 800eeba:	d13e      	bne.n	800ef3a <__gethex+0x126>
 800eebc:	7873      	ldrb	r3, [r6, #1]
 800eebe:	2b2b      	cmp	r3, #43	@ 0x2b
 800eec0:	d033      	beq.n	800ef2a <__gethex+0x116>
 800eec2:	2b2d      	cmp	r3, #45	@ 0x2d
 800eec4:	d034      	beq.n	800ef30 <__gethex+0x11c>
 800eec6:	1c71      	adds	r1, r6, #1
 800eec8:	2400      	movs	r4, #0
 800eeca:	7808      	ldrb	r0, [r1, #0]
 800eecc:	f7ff ff8c 	bl	800ede8 <__hexdig_fun>
 800eed0:	1e43      	subs	r3, r0, #1
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	2b18      	cmp	r3, #24
 800eed6:	d830      	bhi.n	800ef3a <__gethex+0x126>
 800eed8:	f1a0 0210 	sub.w	r2, r0, #16
 800eedc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eee0:	f7ff ff82 	bl	800ede8 <__hexdig_fun>
 800eee4:	f100 3cff 	add.w	ip, r0, #4294967295
 800eee8:	fa5f fc8c 	uxtb.w	ip, ip
 800eeec:	f1bc 0f18 	cmp.w	ip, #24
 800eef0:	f04f 030a 	mov.w	r3, #10
 800eef4:	d91e      	bls.n	800ef34 <__gethex+0x120>
 800eef6:	b104      	cbz	r4, 800eefa <__gethex+0xe6>
 800eef8:	4252      	negs	r2, r2
 800eefa:	4417      	add	r7, r2
 800eefc:	f8ca 1000 	str.w	r1, [sl]
 800ef00:	b1ed      	cbz	r5, 800ef3e <__gethex+0x12a>
 800ef02:	f1bb 0f00 	cmp.w	fp, #0
 800ef06:	bf0c      	ite	eq
 800ef08:	2506      	moveq	r5, #6
 800ef0a:	2500      	movne	r5, #0
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	b005      	add	sp, #20
 800ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef14:	2500      	movs	r5, #0
 800ef16:	462c      	mov	r4, r5
 800ef18:	e7b0      	b.n	800ee7c <__gethex+0x68>
 800ef1a:	2c00      	cmp	r4, #0
 800ef1c:	d1c7      	bne.n	800eeae <__gethex+0x9a>
 800ef1e:	4627      	mov	r7, r4
 800ef20:	e7c7      	b.n	800eeb2 <__gethex+0x9e>
 800ef22:	464e      	mov	r6, r9
 800ef24:	462f      	mov	r7, r5
 800ef26:	2501      	movs	r5, #1
 800ef28:	e7c3      	b.n	800eeb2 <__gethex+0x9e>
 800ef2a:	2400      	movs	r4, #0
 800ef2c:	1cb1      	adds	r1, r6, #2
 800ef2e:	e7cc      	b.n	800eeca <__gethex+0xb6>
 800ef30:	2401      	movs	r4, #1
 800ef32:	e7fb      	b.n	800ef2c <__gethex+0x118>
 800ef34:	fb03 0002 	mla	r0, r3, r2, r0
 800ef38:	e7ce      	b.n	800eed8 <__gethex+0xc4>
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	e7de      	b.n	800eefc <__gethex+0xe8>
 800ef3e:	eba6 0309 	sub.w	r3, r6, r9
 800ef42:	3b01      	subs	r3, #1
 800ef44:	4629      	mov	r1, r5
 800ef46:	2b07      	cmp	r3, #7
 800ef48:	dc0a      	bgt.n	800ef60 <__gethex+0x14c>
 800ef4a:	9801      	ldr	r0, [sp, #4]
 800ef4c:	f7fe fa1e 	bl	800d38c <_Balloc>
 800ef50:	4604      	mov	r4, r0
 800ef52:	b940      	cbnz	r0, 800ef66 <__gethex+0x152>
 800ef54:	4b5c      	ldr	r3, [pc, #368]	@ (800f0c8 <__gethex+0x2b4>)
 800ef56:	4602      	mov	r2, r0
 800ef58:	21e4      	movs	r1, #228	@ 0xe4
 800ef5a:	485c      	ldr	r0, [pc, #368]	@ (800f0cc <__gethex+0x2b8>)
 800ef5c:	f7ff fec0 	bl	800ece0 <__assert_func>
 800ef60:	3101      	adds	r1, #1
 800ef62:	105b      	asrs	r3, r3, #1
 800ef64:	e7ef      	b.n	800ef46 <__gethex+0x132>
 800ef66:	f100 0a14 	add.w	sl, r0, #20
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	4655      	mov	r5, sl
 800ef6e:	469b      	mov	fp, r3
 800ef70:	45b1      	cmp	r9, r6
 800ef72:	d337      	bcc.n	800efe4 <__gethex+0x1d0>
 800ef74:	f845 bb04 	str.w	fp, [r5], #4
 800ef78:	eba5 050a 	sub.w	r5, r5, sl
 800ef7c:	10ad      	asrs	r5, r5, #2
 800ef7e:	6125      	str	r5, [r4, #16]
 800ef80:	4658      	mov	r0, fp
 800ef82:	f7fe faf5 	bl	800d570 <__hi0bits>
 800ef86:	016d      	lsls	r5, r5, #5
 800ef88:	f8d8 6000 	ldr.w	r6, [r8]
 800ef8c:	1a2d      	subs	r5, r5, r0
 800ef8e:	42b5      	cmp	r5, r6
 800ef90:	dd54      	ble.n	800f03c <__gethex+0x228>
 800ef92:	1bad      	subs	r5, r5, r6
 800ef94:	4629      	mov	r1, r5
 800ef96:	4620      	mov	r0, r4
 800ef98:	f7fe fe86 	bl	800dca8 <__any_on>
 800ef9c:	4681      	mov	r9, r0
 800ef9e:	b178      	cbz	r0, 800efc0 <__gethex+0x1ac>
 800efa0:	1e6b      	subs	r3, r5, #1
 800efa2:	1159      	asrs	r1, r3, #5
 800efa4:	f003 021f 	and.w	r2, r3, #31
 800efa8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800efac:	f04f 0901 	mov.w	r9, #1
 800efb0:	fa09 f202 	lsl.w	r2, r9, r2
 800efb4:	420a      	tst	r2, r1
 800efb6:	d003      	beq.n	800efc0 <__gethex+0x1ac>
 800efb8:	454b      	cmp	r3, r9
 800efba:	dc36      	bgt.n	800f02a <__gethex+0x216>
 800efbc:	f04f 0902 	mov.w	r9, #2
 800efc0:	4629      	mov	r1, r5
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff febe 	bl	800ed44 <rshift>
 800efc8:	442f      	add	r7, r5
 800efca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efce:	42bb      	cmp	r3, r7
 800efd0:	da42      	bge.n	800f058 <__gethex+0x244>
 800efd2:	9801      	ldr	r0, [sp, #4]
 800efd4:	4621      	mov	r1, r4
 800efd6:	f7fe fa19 	bl	800d40c <_Bfree>
 800efda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efdc:	2300      	movs	r3, #0
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	25a3      	movs	r5, #163	@ 0xa3
 800efe2:	e793      	b.n	800ef0c <__gethex+0xf8>
 800efe4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800efe8:	2a2e      	cmp	r2, #46	@ 0x2e
 800efea:	d012      	beq.n	800f012 <__gethex+0x1fe>
 800efec:	2b20      	cmp	r3, #32
 800efee:	d104      	bne.n	800effa <__gethex+0x1e6>
 800eff0:	f845 bb04 	str.w	fp, [r5], #4
 800eff4:	f04f 0b00 	mov.w	fp, #0
 800eff8:	465b      	mov	r3, fp
 800effa:	7830      	ldrb	r0, [r6, #0]
 800effc:	9303      	str	r3, [sp, #12]
 800effe:	f7ff fef3 	bl	800ede8 <__hexdig_fun>
 800f002:	9b03      	ldr	r3, [sp, #12]
 800f004:	f000 000f 	and.w	r0, r0, #15
 800f008:	4098      	lsls	r0, r3
 800f00a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f00e:	3304      	adds	r3, #4
 800f010:	e7ae      	b.n	800ef70 <__gethex+0x15c>
 800f012:	45b1      	cmp	r9, r6
 800f014:	d8ea      	bhi.n	800efec <__gethex+0x1d8>
 800f016:	492b      	ldr	r1, [pc, #172]	@ (800f0c4 <__gethex+0x2b0>)
 800f018:	9303      	str	r3, [sp, #12]
 800f01a:	2201      	movs	r2, #1
 800f01c:	4630      	mov	r0, r6
 800f01e:	f7fd fa44 	bl	800c4aa <strncmp>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	2800      	cmp	r0, #0
 800f026:	d1e1      	bne.n	800efec <__gethex+0x1d8>
 800f028:	e7a2      	b.n	800ef70 <__gethex+0x15c>
 800f02a:	1ea9      	subs	r1, r5, #2
 800f02c:	4620      	mov	r0, r4
 800f02e:	f7fe fe3b 	bl	800dca8 <__any_on>
 800f032:	2800      	cmp	r0, #0
 800f034:	d0c2      	beq.n	800efbc <__gethex+0x1a8>
 800f036:	f04f 0903 	mov.w	r9, #3
 800f03a:	e7c1      	b.n	800efc0 <__gethex+0x1ac>
 800f03c:	da09      	bge.n	800f052 <__gethex+0x23e>
 800f03e:	1b75      	subs	r5, r6, r5
 800f040:	4621      	mov	r1, r4
 800f042:	9801      	ldr	r0, [sp, #4]
 800f044:	462a      	mov	r2, r5
 800f046:	f7fe fbf9 	bl	800d83c <__lshift>
 800f04a:	1b7f      	subs	r7, r7, r5
 800f04c:	4604      	mov	r4, r0
 800f04e:	f100 0a14 	add.w	sl, r0, #20
 800f052:	f04f 0900 	mov.w	r9, #0
 800f056:	e7b8      	b.n	800efca <__gethex+0x1b6>
 800f058:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f05c:	42bd      	cmp	r5, r7
 800f05e:	dd6f      	ble.n	800f140 <__gethex+0x32c>
 800f060:	1bed      	subs	r5, r5, r7
 800f062:	42ae      	cmp	r6, r5
 800f064:	dc34      	bgt.n	800f0d0 <__gethex+0x2bc>
 800f066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d022      	beq.n	800f0b4 <__gethex+0x2a0>
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d024      	beq.n	800f0bc <__gethex+0x2a8>
 800f072:	2b01      	cmp	r3, #1
 800f074:	d115      	bne.n	800f0a2 <__gethex+0x28e>
 800f076:	42ae      	cmp	r6, r5
 800f078:	d113      	bne.n	800f0a2 <__gethex+0x28e>
 800f07a:	2e01      	cmp	r6, #1
 800f07c:	d10b      	bne.n	800f096 <__gethex+0x282>
 800f07e:	9a02      	ldr	r2, [sp, #8]
 800f080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f084:	6013      	str	r3, [r2, #0]
 800f086:	2301      	movs	r3, #1
 800f088:	6123      	str	r3, [r4, #16]
 800f08a:	f8ca 3000 	str.w	r3, [sl]
 800f08e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f090:	2562      	movs	r5, #98	@ 0x62
 800f092:	601c      	str	r4, [r3, #0]
 800f094:	e73a      	b.n	800ef0c <__gethex+0xf8>
 800f096:	1e71      	subs	r1, r6, #1
 800f098:	4620      	mov	r0, r4
 800f09a:	f7fe fe05 	bl	800dca8 <__any_on>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	d1ed      	bne.n	800f07e <__gethex+0x26a>
 800f0a2:	9801      	ldr	r0, [sp, #4]
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	f7fe f9b1 	bl	800d40c <_Bfree>
 800f0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	6013      	str	r3, [r2, #0]
 800f0b0:	2550      	movs	r5, #80	@ 0x50
 800f0b2:	e72b      	b.n	800ef0c <__gethex+0xf8>
 800f0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1f3      	bne.n	800f0a2 <__gethex+0x28e>
 800f0ba:	e7e0      	b.n	800f07e <__gethex+0x26a>
 800f0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1dd      	bne.n	800f07e <__gethex+0x26a>
 800f0c2:	e7ee      	b.n	800f0a2 <__gethex+0x28e>
 800f0c4:	0800fdb0 	.word	0x0800fdb0
 800f0c8:	0800fc46 	.word	0x0800fc46
 800f0cc:	0800fe5d 	.word	0x0800fe5d
 800f0d0:	1e6f      	subs	r7, r5, #1
 800f0d2:	f1b9 0f00 	cmp.w	r9, #0
 800f0d6:	d130      	bne.n	800f13a <__gethex+0x326>
 800f0d8:	b127      	cbz	r7, 800f0e4 <__gethex+0x2d0>
 800f0da:	4639      	mov	r1, r7
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f7fe fde3 	bl	800dca8 <__any_on>
 800f0e2:	4681      	mov	r9, r0
 800f0e4:	117a      	asrs	r2, r7, #5
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f0ec:	f007 071f 	and.w	r7, r7, #31
 800f0f0:	40bb      	lsls	r3, r7
 800f0f2:	4213      	tst	r3, r2
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	bf18      	it	ne
 800f0fa:	f049 0902 	orrne.w	r9, r9, #2
 800f0fe:	f7ff fe21 	bl	800ed44 <rshift>
 800f102:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f106:	1b76      	subs	r6, r6, r5
 800f108:	2502      	movs	r5, #2
 800f10a:	f1b9 0f00 	cmp.w	r9, #0
 800f10e:	d047      	beq.n	800f1a0 <__gethex+0x38c>
 800f110:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f114:	2b02      	cmp	r3, #2
 800f116:	d015      	beq.n	800f144 <__gethex+0x330>
 800f118:	2b03      	cmp	r3, #3
 800f11a:	d017      	beq.n	800f14c <__gethex+0x338>
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d109      	bne.n	800f134 <__gethex+0x320>
 800f120:	f019 0f02 	tst.w	r9, #2
 800f124:	d006      	beq.n	800f134 <__gethex+0x320>
 800f126:	f8da 3000 	ldr.w	r3, [sl]
 800f12a:	ea49 0903 	orr.w	r9, r9, r3
 800f12e:	f019 0f01 	tst.w	r9, #1
 800f132:	d10e      	bne.n	800f152 <__gethex+0x33e>
 800f134:	f045 0510 	orr.w	r5, r5, #16
 800f138:	e032      	b.n	800f1a0 <__gethex+0x38c>
 800f13a:	f04f 0901 	mov.w	r9, #1
 800f13e:	e7d1      	b.n	800f0e4 <__gethex+0x2d0>
 800f140:	2501      	movs	r5, #1
 800f142:	e7e2      	b.n	800f10a <__gethex+0x2f6>
 800f144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f146:	f1c3 0301 	rsb	r3, r3, #1
 800f14a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d0f0      	beq.n	800f134 <__gethex+0x320>
 800f152:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f156:	f104 0314 	add.w	r3, r4, #20
 800f15a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f15e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f162:	f04f 0c00 	mov.w	ip, #0
 800f166:	4618      	mov	r0, r3
 800f168:	f853 2b04 	ldr.w	r2, [r3], #4
 800f16c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f170:	d01b      	beq.n	800f1aa <__gethex+0x396>
 800f172:	3201      	adds	r2, #1
 800f174:	6002      	str	r2, [r0, #0]
 800f176:	2d02      	cmp	r5, #2
 800f178:	f104 0314 	add.w	r3, r4, #20
 800f17c:	d13c      	bne.n	800f1f8 <__gethex+0x3e4>
 800f17e:	f8d8 2000 	ldr.w	r2, [r8]
 800f182:	3a01      	subs	r2, #1
 800f184:	42b2      	cmp	r2, r6
 800f186:	d109      	bne.n	800f19c <__gethex+0x388>
 800f188:	1171      	asrs	r1, r6, #5
 800f18a:	2201      	movs	r2, #1
 800f18c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f190:	f006 061f 	and.w	r6, r6, #31
 800f194:	fa02 f606 	lsl.w	r6, r2, r6
 800f198:	421e      	tst	r6, r3
 800f19a:	d13a      	bne.n	800f212 <__gethex+0x3fe>
 800f19c:	f045 0520 	orr.w	r5, r5, #32
 800f1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1a2:	601c      	str	r4, [r3, #0]
 800f1a4:	9b02      	ldr	r3, [sp, #8]
 800f1a6:	601f      	str	r7, [r3, #0]
 800f1a8:	e6b0      	b.n	800ef0c <__gethex+0xf8>
 800f1aa:	4299      	cmp	r1, r3
 800f1ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1b0:	d8d9      	bhi.n	800f166 <__gethex+0x352>
 800f1b2:	68a3      	ldr	r3, [r4, #8]
 800f1b4:	459b      	cmp	fp, r3
 800f1b6:	db17      	blt.n	800f1e8 <__gethex+0x3d4>
 800f1b8:	6861      	ldr	r1, [r4, #4]
 800f1ba:	9801      	ldr	r0, [sp, #4]
 800f1bc:	3101      	adds	r1, #1
 800f1be:	f7fe f8e5 	bl	800d38c <_Balloc>
 800f1c2:	4681      	mov	r9, r0
 800f1c4:	b918      	cbnz	r0, 800f1ce <__gethex+0x3ba>
 800f1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800f230 <__gethex+0x41c>)
 800f1c8:	4602      	mov	r2, r0
 800f1ca:	2184      	movs	r1, #132	@ 0x84
 800f1cc:	e6c5      	b.n	800ef5a <__gethex+0x146>
 800f1ce:	6922      	ldr	r2, [r4, #16]
 800f1d0:	3202      	adds	r2, #2
 800f1d2:	f104 010c 	add.w	r1, r4, #12
 800f1d6:	0092      	lsls	r2, r2, #2
 800f1d8:	300c      	adds	r0, #12
 800f1da:	f7ff fd6b 	bl	800ecb4 <memcpy>
 800f1de:	4621      	mov	r1, r4
 800f1e0:	9801      	ldr	r0, [sp, #4]
 800f1e2:	f7fe f913 	bl	800d40c <_Bfree>
 800f1e6:	464c      	mov	r4, r9
 800f1e8:	6923      	ldr	r3, [r4, #16]
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1f0:	6122      	str	r2, [r4, #16]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	615a      	str	r2, [r3, #20]
 800f1f6:	e7be      	b.n	800f176 <__gethex+0x362>
 800f1f8:	6922      	ldr	r2, [r4, #16]
 800f1fa:	455a      	cmp	r2, fp
 800f1fc:	dd0b      	ble.n	800f216 <__gethex+0x402>
 800f1fe:	2101      	movs	r1, #1
 800f200:	4620      	mov	r0, r4
 800f202:	f7ff fd9f 	bl	800ed44 <rshift>
 800f206:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f20a:	3701      	adds	r7, #1
 800f20c:	42bb      	cmp	r3, r7
 800f20e:	f6ff aee0 	blt.w	800efd2 <__gethex+0x1be>
 800f212:	2501      	movs	r5, #1
 800f214:	e7c2      	b.n	800f19c <__gethex+0x388>
 800f216:	f016 061f 	ands.w	r6, r6, #31
 800f21a:	d0fa      	beq.n	800f212 <__gethex+0x3fe>
 800f21c:	4453      	add	r3, sl
 800f21e:	f1c6 0620 	rsb	r6, r6, #32
 800f222:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f226:	f7fe f9a3 	bl	800d570 <__hi0bits>
 800f22a:	42b0      	cmp	r0, r6
 800f22c:	dbe7      	blt.n	800f1fe <__gethex+0x3ea>
 800f22e:	e7f0      	b.n	800f212 <__gethex+0x3fe>
 800f230:	0800fc46 	.word	0x0800fc46

0800f234 <L_shift>:
 800f234:	f1c2 0208 	rsb	r2, r2, #8
 800f238:	0092      	lsls	r2, r2, #2
 800f23a:	b570      	push	{r4, r5, r6, lr}
 800f23c:	f1c2 0620 	rsb	r6, r2, #32
 800f240:	6843      	ldr	r3, [r0, #4]
 800f242:	6804      	ldr	r4, [r0, #0]
 800f244:	fa03 f506 	lsl.w	r5, r3, r6
 800f248:	432c      	orrs	r4, r5
 800f24a:	40d3      	lsrs	r3, r2
 800f24c:	6004      	str	r4, [r0, #0]
 800f24e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f252:	4288      	cmp	r0, r1
 800f254:	d3f4      	bcc.n	800f240 <L_shift+0xc>
 800f256:	bd70      	pop	{r4, r5, r6, pc}

0800f258 <__match>:
 800f258:	b530      	push	{r4, r5, lr}
 800f25a:	6803      	ldr	r3, [r0, #0]
 800f25c:	3301      	adds	r3, #1
 800f25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f262:	b914      	cbnz	r4, 800f26a <__match+0x12>
 800f264:	6003      	str	r3, [r0, #0]
 800f266:	2001      	movs	r0, #1
 800f268:	bd30      	pop	{r4, r5, pc}
 800f26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f26e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f272:	2d19      	cmp	r5, #25
 800f274:	bf98      	it	ls
 800f276:	3220      	addls	r2, #32
 800f278:	42a2      	cmp	r2, r4
 800f27a:	d0f0      	beq.n	800f25e <__match+0x6>
 800f27c:	2000      	movs	r0, #0
 800f27e:	e7f3      	b.n	800f268 <__match+0x10>

0800f280 <__hexnan>:
 800f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	680b      	ldr	r3, [r1, #0]
 800f286:	6801      	ldr	r1, [r0, #0]
 800f288:	115e      	asrs	r6, r3, #5
 800f28a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f28e:	f013 031f 	ands.w	r3, r3, #31
 800f292:	b087      	sub	sp, #28
 800f294:	bf18      	it	ne
 800f296:	3604      	addne	r6, #4
 800f298:	2500      	movs	r5, #0
 800f29a:	1f37      	subs	r7, r6, #4
 800f29c:	4682      	mov	sl, r0
 800f29e:	4690      	mov	r8, r2
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2a6:	46b9      	mov	r9, r7
 800f2a8:	463c      	mov	r4, r7
 800f2aa:	9502      	str	r5, [sp, #8]
 800f2ac:	46ab      	mov	fp, r5
 800f2ae:	784a      	ldrb	r2, [r1, #1]
 800f2b0:	1c4b      	adds	r3, r1, #1
 800f2b2:	9303      	str	r3, [sp, #12]
 800f2b4:	b342      	cbz	r2, 800f308 <__hexnan+0x88>
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	9105      	str	r1, [sp, #20]
 800f2ba:	9204      	str	r2, [sp, #16]
 800f2bc:	f7ff fd94 	bl	800ede8 <__hexdig_fun>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d151      	bne.n	800f368 <__hexnan+0xe8>
 800f2c4:	9a04      	ldr	r2, [sp, #16]
 800f2c6:	9905      	ldr	r1, [sp, #20]
 800f2c8:	2a20      	cmp	r2, #32
 800f2ca:	d818      	bhi.n	800f2fe <__hexnan+0x7e>
 800f2cc:	9b02      	ldr	r3, [sp, #8]
 800f2ce:	459b      	cmp	fp, r3
 800f2d0:	dd13      	ble.n	800f2fa <__hexnan+0x7a>
 800f2d2:	454c      	cmp	r4, r9
 800f2d4:	d206      	bcs.n	800f2e4 <__hexnan+0x64>
 800f2d6:	2d07      	cmp	r5, #7
 800f2d8:	dc04      	bgt.n	800f2e4 <__hexnan+0x64>
 800f2da:	462a      	mov	r2, r5
 800f2dc:	4649      	mov	r1, r9
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f7ff ffa8 	bl	800f234 <L_shift>
 800f2e4:	4544      	cmp	r4, r8
 800f2e6:	d952      	bls.n	800f38e <__hexnan+0x10e>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f1a4 0904 	sub.w	r9, r4, #4
 800f2ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2f2:	f8cd b008 	str.w	fp, [sp, #8]
 800f2f6:	464c      	mov	r4, r9
 800f2f8:	461d      	mov	r5, r3
 800f2fa:	9903      	ldr	r1, [sp, #12]
 800f2fc:	e7d7      	b.n	800f2ae <__hexnan+0x2e>
 800f2fe:	2a29      	cmp	r2, #41	@ 0x29
 800f300:	d157      	bne.n	800f3b2 <__hexnan+0x132>
 800f302:	3102      	adds	r1, #2
 800f304:	f8ca 1000 	str.w	r1, [sl]
 800f308:	f1bb 0f00 	cmp.w	fp, #0
 800f30c:	d051      	beq.n	800f3b2 <__hexnan+0x132>
 800f30e:	454c      	cmp	r4, r9
 800f310:	d206      	bcs.n	800f320 <__hexnan+0xa0>
 800f312:	2d07      	cmp	r5, #7
 800f314:	dc04      	bgt.n	800f320 <__hexnan+0xa0>
 800f316:	462a      	mov	r2, r5
 800f318:	4649      	mov	r1, r9
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7ff ff8a 	bl	800f234 <L_shift>
 800f320:	4544      	cmp	r4, r8
 800f322:	d936      	bls.n	800f392 <__hexnan+0x112>
 800f324:	f1a8 0204 	sub.w	r2, r8, #4
 800f328:	4623      	mov	r3, r4
 800f32a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f32e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f332:	429f      	cmp	r7, r3
 800f334:	d2f9      	bcs.n	800f32a <__hexnan+0xaa>
 800f336:	1b3b      	subs	r3, r7, r4
 800f338:	f023 0303 	bic.w	r3, r3, #3
 800f33c:	3304      	adds	r3, #4
 800f33e:	3401      	adds	r4, #1
 800f340:	3e03      	subs	r6, #3
 800f342:	42b4      	cmp	r4, r6
 800f344:	bf88      	it	hi
 800f346:	2304      	movhi	r3, #4
 800f348:	4443      	add	r3, r8
 800f34a:	2200      	movs	r2, #0
 800f34c:	f843 2b04 	str.w	r2, [r3], #4
 800f350:	429f      	cmp	r7, r3
 800f352:	d2fb      	bcs.n	800f34c <__hexnan+0xcc>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	b91b      	cbnz	r3, 800f360 <__hexnan+0xe0>
 800f358:	4547      	cmp	r7, r8
 800f35a:	d128      	bne.n	800f3ae <__hexnan+0x12e>
 800f35c:	2301      	movs	r3, #1
 800f35e:	603b      	str	r3, [r7, #0]
 800f360:	2005      	movs	r0, #5
 800f362:	b007      	add	sp, #28
 800f364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f368:	3501      	adds	r5, #1
 800f36a:	2d08      	cmp	r5, #8
 800f36c:	f10b 0b01 	add.w	fp, fp, #1
 800f370:	dd06      	ble.n	800f380 <__hexnan+0x100>
 800f372:	4544      	cmp	r4, r8
 800f374:	d9c1      	bls.n	800f2fa <__hexnan+0x7a>
 800f376:	2300      	movs	r3, #0
 800f378:	f844 3c04 	str.w	r3, [r4, #-4]
 800f37c:	2501      	movs	r5, #1
 800f37e:	3c04      	subs	r4, #4
 800f380:	6822      	ldr	r2, [r4, #0]
 800f382:	f000 000f 	and.w	r0, r0, #15
 800f386:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f38a:	6020      	str	r0, [r4, #0]
 800f38c:	e7b5      	b.n	800f2fa <__hexnan+0x7a>
 800f38e:	2508      	movs	r5, #8
 800f390:	e7b3      	b.n	800f2fa <__hexnan+0x7a>
 800f392:	9b01      	ldr	r3, [sp, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d0dd      	beq.n	800f354 <__hexnan+0xd4>
 800f398:	f1c3 0320 	rsb	r3, r3, #32
 800f39c:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a0:	40da      	lsrs	r2, r3
 800f3a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f3ac:	e7d2      	b.n	800f354 <__hexnan+0xd4>
 800f3ae:	3f04      	subs	r7, #4
 800f3b0:	e7d0      	b.n	800f354 <__hexnan+0xd4>
 800f3b2:	2004      	movs	r0, #4
 800f3b4:	e7d5      	b.n	800f362 <__hexnan+0xe2>

0800f3b6 <__ascii_mbtowc>:
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	b901      	cbnz	r1, 800f3bc <__ascii_mbtowc+0x6>
 800f3ba:	a901      	add	r1, sp, #4
 800f3bc:	b142      	cbz	r2, 800f3d0 <__ascii_mbtowc+0x1a>
 800f3be:	b14b      	cbz	r3, 800f3d4 <__ascii_mbtowc+0x1e>
 800f3c0:	7813      	ldrb	r3, [r2, #0]
 800f3c2:	600b      	str	r3, [r1, #0]
 800f3c4:	7812      	ldrb	r2, [r2, #0]
 800f3c6:	1e10      	subs	r0, r2, #0
 800f3c8:	bf18      	it	ne
 800f3ca:	2001      	movne	r0, #1
 800f3cc:	b002      	add	sp, #8
 800f3ce:	4770      	bx	lr
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	e7fb      	b.n	800f3cc <__ascii_mbtowc+0x16>
 800f3d4:	f06f 0001 	mvn.w	r0, #1
 800f3d8:	e7f8      	b.n	800f3cc <__ascii_mbtowc+0x16>

0800f3da <_realloc_r>:
 800f3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3de:	4680      	mov	r8, r0
 800f3e0:	4615      	mov	r5, r2
 800f3e2:	460c      	mov	r4, r1
 800f3e4:	b921      	cbnz	r1, 800f3f0 <_realloc_r+0x16>
 800f3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	f7fd bf42 	b.w	800d274 <_malloc_r>
 800f3f0:	b92a      	cbnz	r2, 800f3fe <_realloc_r+0x24>
 800f3f2:	f7fd fecb 	bl	800d18c <_free_r>
 800f3f6:	2400      	movs	r4, #0
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3fe:	f000 f840 	bl	800f482 <_malloc_usable_size_r>
 800f402:	4285      	cmp	r5, r0
 800f404:	4606      	mov	r6, r0
 800f406:	d802      	bhi.n	800f40e <_realloc_r+0x34>
 800f408:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f40c:	d8f4      	bhi.n	800f3f8 <_realloc_r+0x1e>
 800f40e:	4629      	mov	r1, r5
 800f410:	4640      	mov	r0, r8
 800f412:	f7fd ff2f 	bl	800d274 <_malloc_r>
 800f416:	4607      	mov	r7, r0
 800f418:	2800      	cmp	r0, #0
 800f41a:	d0ec      	beq.n	800f3f6 <_realloc_r+0x1c>
 800f41c:	42b5      	cmp	r5, r6
 800f41e:	462a      	mov	r2, r5
 800f420:	4621      	mov	r1, r4
 800f422:	bf28      	it	cs
 800f424:	4632      	movcs	r2, r6
 800f426:	f7ff fc45 	bl	800ecb4 <memcpy>
 800f42a:	4621      	mov	r1, r4
 800f42c:	4640      	mov	r0, r8
 800f42e:	f7fd fead 	bl	800d18c <_free_r>
 800f432:	463c      	mov	r4, r7
 800f434:	e7e0      	b.n	800f3f8 <_realloc_r+0x1e>

0800f436 <__ascii_wctomb>:
 800f436:	4603      	mov	r3, r0
 800f438:	4608      	mov	r0, r1
 800f43a:	b141      	cbz	r1, 800f44e <__ascii_wctomb+0x18>
 800f43c:	2aff      	cmp	r2, #255	@ 0xff
 800f43e:	d904      	bls.n	800f44a <__ascii_wctomb+0x14>
 800f440:	228a      	movs	r2, #138	@ 0x8a
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	4770      	bx	lr
 800f44a:	700a      	strb	r2, [r1, #0]
 800f44c:	2001      	movs	r0, #1
 800f44e:	4770      	bx	lr

0800f450 <fiprintf>:
 800f450:	b40e      	push	{r1, r2, r3}
 800f452:	b503      	push	{r0, r1, lr}
 800f454:	4601      	mov	r1, r0
 800f456:	ab03      	add	r3, sp, #12
 800f458:	4805      	ldr	r0, [pc, #20]	@ (800f470 <fiprintf+0x20>)
 800f45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f45e:	6800      	ldr	r0, [r0, #0]
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	f000 f83f 	bl	800f4e4 <_vfiprintf_r>
 800f466:	b002      	add	sp, #8
 800f468:	f85d eb04 	ldr.w	lr, [sp], #4
 800f46c:	b003      	add	sp, #12
 800f46e:	4770      	bx	lr
 800f470:	2400002c 	.word	0x2400002c

0800f474 <abort>:
 800f474:	b508      	push	{r3, lr}
 800f476:	2006      	movs	r0, #6
 800f478:	f000 fa08 	bl	800f88c <raise>
 800f47c:	2001      	movs	r0, #1
 800f47e:	f7f2 f983 	bl	8001788 <_exit>

0800f482 <_malloc_usable_size_r>:
 800f482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f486:	1f18      	subs	r0, r3, #4
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfbc      	itt	lt
 800f48c:	580b      	ldrlt	r3, [r1, r0]
 800f48e:	18c0      	addlt	r0, r0, r3
 800f490:	4770      	bx	lr

0800f492 <__sfputc_r>:
 800f492:	6893      	ldr	r3, [r2, #8]
 800f494:	3b01      	subs	r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	b410      	push	{r4}
 800f49a:	6093      	str	r3, [r2, #8]
 800f49c:	da08      	bge.n	800f4b0 <__sfputc_r+0x1e>
 800f49e:	6994      	ldr	r4, [r2, #24]
 800f4a0:	42a3      	cmp	r3, r4
 800f4a2:	db01      	blt.n	800f4a8 <__sfputc_r+0x16>
 800f4a4:	290a      	cmp	r1, #10
 800f4a6:	d103      	bne.n	800f4b0 <__sfputc_r+0x1e>
 800f4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ac:	f000 b932 	b.w	800f714 <__swbuf_r>
 800f4b0:	6813      	ldr	r3, [r2, #0]
 800f4b2:	1c58      	adds	r0, r3, #1
 800f4b4:	6010      	str	r0, [r2, #0]
 800f4b6:	7019      	strb	r1, [r3, #0]
 800f4b8:	4608      	mov	r0, r1
 800f4ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <__sfputs_r>:
 800f4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c2:	4606      	mov	r6, r0
 800f4c4:	460f      	mov	r7, r1
 800f4c6:	4614      	mov	r4, r2
 800f4c8:	18d5      	adds	r5, r2, r3
 800f4ca:	42ac      	cmp	r4, r5
 800f4cc:	d101      	bne.n	800f4d2 <__sfputs_r+0x12>
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	e007      	b.n	800f4e2 <__sfputs_r+0x22>
 800f4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d6:	463a      	mov	r2, r7
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f7ff ffda 	bl	800f492 <__sfputc_r>
 800f4de:	1c43      	adds	r3, r0, #1
 800f4e0:	d1f3      	bne.n	800f4ca <__sfputs_r+0xa>
 800f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f4e4 <_vfiprintf_r>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	b09d      	sub	sp, #116	@ 0x74
 800f4ec:	4614      	mov	r4, r2
 800f4ee:	4698      	mov	r8, r3
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	b118      	cbz	r0, 800f4fc <_vfiprintf_r+0x18>
 800f4f4:	6a03      	ldr	r3, [r0, #32]
 800f4f6:	b90b      	cbnz	r3, 800f4fc <_vfiprintf_r+0x18>
 800f4f8:	f7fc ff02 	bl	800c300 <__sinit>
 800f4fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4fe:	07d9      	lsls	r1, r3, #31
 800f500:	d405      	bmi.n	800f50e <_vfiprintf_r+0x2a>
 800f502:	89ab      	ldrh	r3, [r5, #12]
 800f504:	059a      	lsls	r2, r3, #22
 800f506:	d402      	bmi.n	800f50e <_vfiprintf_r+0x2a>
 800f508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f50a:	f7fd f856 	bl	800c5ba <__retarget_lock_acquire_recursive>
 800f50e:	89ab      	ldrh	r3, [r5, #12]
 800f510:	071b      	lsls	r3, r3, #28
 800f512:	d501      	bpl.n	800f518 <_vfiprintf_r+0x34>
 800f514:	692b      	ldr	r3, [r5, #16]
 800f516:	b99b      	cbnz	r3, 800f540 <_vfiprintf_r+0x5c>
 800f518:	4629      	mov	r1, r5
 800f51a:	4630      	mov	r0, r6
 800f51c:	f000 f938 	bl	800f790 <__swsetup_r>
 800f520:	b170      	cbz	r0, 800f540 <_vfiprintf_r+0x5c>
 800f522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f524:	07dc      	lsls	r4, r3, #31
 800f526:	d504      	bpl.n	800f532 <_vfiprintf_r+0x4e>
 800f528:	f04f 30ff 	mov.w	r0, #4294967295
 800f52c:	b01d      	add	sp, #116	@ 0x74
 800f52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f532:	89ab      	ldrh	r3, [r5, #12]
 800f534:	0598      	lsls	r0, r3, #22
 800f536:	d4f7      	bmi.n	800f528 <_vfiprintf_r+0x44>
 800f538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f53a:	f7fd f83f 	bl	800c5bc <__retarget_lock_release_recursive>
 800f53e:	e7f3      	b.n	800f528 <_vfiprintf_r+0x44>
 800f540:	2300      	movs	r3, #0
 800f542:	9309      	str	r3, [sp, #36]	@ 0x24
 800f544:	2320      	movs	r3, #32
 800f546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f54e:	2330      	movs	r3, #48	@ 0x30
 800f550:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f700 <_vfiprintf_r+0x21c>
 800f554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f558:	f04f 0901 	mov.w	r9, #1
 800f55c:	4623      	mov	r3, r4
 800f55e:	469a      	mov	sl, r3
 800f560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f564:	b10a      	cbz	r2, 800f56a <_vfiprintf_r+0x86>
 800f566:	2a25      	cmp	r2, #37	@ 0x25
 800f568:	d1f9      	bne.n	800f55e <_vfiprintf_r+0x7a>
 800f56a:	ebba 0b04 	subs.w	fp, sl, r4
 800f56e:	d00b      	beq.n	800f588 <_vfiprintf_r+0xa4>
 800f570:	465b      	mov	r3, fp
 800f572:	4622      	mov	r2, r4
 800f574:	4629      	mov	r1, r5
 800f576:	4630      	mov	r0, r6
 800f578:	f7ff ffa2 	bl	800f4c0 <__sfputs_r>
 800f57c:	3001      	adds	r0, #1
 800f57e:	f000 80a7 	beq.w	800f6d0 <_vfiprintf_r+0x1ec>
 800f582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f584:	445a      	add	r2, fp
 800f586:	9209      	str	r2, [sp, #36]	@ 0x24
 800f588:	f89a 3000 	ldrb.w	r3, [sl]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f000 809f 	beq.w	800f6d0 <_vfiprintf_r+0x1ec>
 800f592:	2300      	movs	r3, #0
 800f594:	f04f 32ff 	mov.w	r2, #4294967295
 800f598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f59c:	f10a 0a01 	add.w	sl, sl, #1
 800f5a0:	9304      	str	r3, [sp, #16]
 800f5a2:	9307      	str	r3, [sp, #28]
 800f5a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5aa:	4654      	mov	r4, sl
 800f5ac:	2205      	movs	r2, #5
 800f5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b2:	4853      	ldr	r0, [pc, #332]	@ (800f700 <_vfiprintf_r+0x21c>)
 800f5b4:	f7f0 fe94 	bl	80002e0 <memchr>
 800f5b8:	9a04      	ldr	r2, [sp, #16]
 800f5ba:	b9d8      	cbnz	r0, 800f5f4 <_vfiprintf_r+0x110>
 800f5bc:	06d1      	lsls	r1, r2, #27
 800f5be:	bf44      	itt	mi
 800f5c0:	2320      	movmi	r3, #32
 800f5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5c6:	0713      	lsls	r3, r2, #28
 800f5c8:	bf44      	itt	mi
 800f5ca:	232b      	movmi	r3, #43	@ 0x2b
 800f5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5d6:	d015      	beq.n	800f604 <_vfiprintf_r+0x120>
 800f5d8:	9a07      	ldr	r2, [sp, #28]
 800f5da:	4654      	mov	r4, sl
 800f5dc:	2000      	movs	r0, #0
 800f5de:	f04f 0c0a 	mov.w	ip, #10
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5e8:	3b30      	subs	r3, #48	@ 0x30
 800f5ea:	2b09      	cmp	r3, #9
 800f5ec:	d94b      	bls.n	800f686 <_vfiprintf_r+0x1a2>
 800f5ee:	b1b0      	cbz	r0, 800f61e <_vfiprintf_r+0x13a>
 800f5f0:	9207      	str	r2, [sp, #28]
 800f5f2:	e014      	b.n	800f61e <_vfiprintf_r+0x13a>
 800f5f4:	eba0 0308 	sub.w	r3, r0, r8
 800f5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	9304      	str	r3, [sp, #16]
 800f600:	46a2      	mov	sl, r4
 800f602:	e7d2      	b.n	800f5aa <_vfiprintf_r+0xc6>
 800f604:	9b03      	ldr	r3, [sp, #12]
 800f606:	1d19      	adds	r1, r3, #4
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	9103      	str	r1, [sp, #12]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	bfbb      	ittet	lt
 800f610:	425b      	neglt	r3, r3
 800f612:	f042 0202 	orrlt.w	r2, r2, #2
 800f616:	9307      	strge	r3, [sp, #28]
 800f618:	9307      	strlt	r3, [sp, #28]
 800f61a:	bfb8      	it	lt
 800f61c:	9204      	strlt	r2, [sp, #16]
 800f61e:	7823      	ldrb	r3, [r4, #0]
 800f620:	2b2e      	cmp	r3, #46	@ 0x2e
 800f622:	d10a      	bne.n	800f63a <_vfiprintf_r+0x156>
 800f624:	7863      	ldrb	r3, [r4, #1]
 800f626:	2b2a      	cmp	r3, #42	@ 0x2a
 800f628:	d132      	bne.n	800f690 <_vfiprintf_r+0x1ac>
 800f62a:	9b03      	ldr	r3, [sp, #12]
 800f62c:	1d1a      	adds	r2, r3, #4
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	9203      	str	r2, [sp, #12]
 800f632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f636:	3402      	adds	r4, #2
 800f638:	9305      	str	r3, [sp, #20]
 800f63a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f710 <_vfiprintf_r+0x22c>
 800f63e:	7821      	ldrb	r1, [r4, #0]
 800f640:	2203      	movs	r2, #3
 800f642:	4650      	mov	r0, sl
 800f644:	f7f0 fe4c 	bl	80002e0 <memchr>
 800f648:	b138      	cbz	r0, 800f65a <_vfiprintf_r+0x176>
 800f64a:	9b04      	ldr	r3, [sp, #16]
 800f64c:	eba0 000a 	sub.w	r0, r0, sl
 800f650:	2240      	movs	r2, #64	@ 0x40
 800f652:	4082      	lsls	r2, r0
 800f654:	4313      	orrs	r3, r2
 800f656:	3401      	adds	r4, #1
 800f658:	9304      	str	r3, [sp, #16]
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	4829      	ldr	r0, [pc, #164]	@ (800f704 <_vfiprintf_r+0x220>)
 800f660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f664:	2206      	movs	r2, #6
 800f666:	f7f0 fe3b 	bl	80002e0 <memchr>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d03f      	beq.n	800f6ee <_vfiprintf_r+0x20a>
 800f66e:	4b26      	ldr	r3, [pc, #152]	@ (800f708 <_vfiprintf_r+0x224>)
 800f670:	bb1b      	cbnz	r3, 800f6ba <_vfiprintf_r+0x1d6>
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	3307      	adds	r3, #7
 800f676:	f023 0307 	bic.w	r3, r3, #7
 800f67a:	3308      	adds	r3, #8
 800f67c:	9303      	str	r3, [sp, #12]
 800f67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f680:	443b      	add	r3, r7
 800f682:	9309      	str	r3, [sp, #36]	@ 0x24
 800f684:	e76a      	b.n	800f55c <_vfiprintf_r+0x78>
 800f686:	fb0c 3202 	mla	r2, ip, r2, r3
 800f68a:	460c      	mov	r4, r1
 800f68c:	2001      	movs	r0, #1
 800f68e:	e7a8      	b.n	800f5e2 <_vfiprintf_r+0xfe>
 800f690:	2300      	movs	r3, #0
 800f692:	3401      	adds	r4, #1
 800f694:	9305      	str	r3, [sp, #20]
 800f696:	4619      	mov	r1, r3
 800f698:	f04f 0c0a 	mov.w	ip, #10
 800f69c:	4620      	mov	r0, r4
 800f69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6a2:	3a30      	subs	r2, #48	@ 0x30
 800f6a4:	2a09      	cmp	r2, #9
 800f6a6:	d903      	bls.n	800f6b0 <_vfiprintf_r+0x1cc>
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d0c6      	beq.n	800f63a <_vfiprintf_r+0x156>
 800f6ac:	9105      	str	r1, [sp, #20]
 800f6ae:	e7c4      	b.n	800f63a <_vfiprintf_r+0x156>
 800f6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e7f0      	b.n	800f69c <_vfiprintf_r+0x1b8>
 800f6ba:	ab03      	add	r3, sp, #12
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	462a      	mov	r2, r5
 800f6c0:	4b12      	ldr	r3, [pc, #72]	@ (800f70c <_vfiprintf_r+0x228>)
 800f6c2:	a904      	add	r1, sp, #16
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f7fb ffdb 	bl	800b680 <_printf_float>
 800f6ca:	4607      	mov	r7, r0
 800f6cc:	1c78      	adds	r0, r7, #1
 800f6ce:	d1d6      	bne.n	800f67e <_vfiprintf_r+0x19a>
 800f6d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6d2:	07d9      	lsls	r1, r3, #31
 800f6d4:	d405      	bmi.n	800f6e2 <_vfiprintf_r+0x1fe>
 800f6d6:	89ab      	ldrh	r3, [r5, #12]
 800f6d8:	059a      	lsls	r2, r3, #22
 800f6da:	d402      	bmi.n	800f6e2 <_vfiprintf_r+0x1fe>
 800f6dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6de:	f7fc ff6d 	bl	800c5bc <__retarget_lock_release_recursive>
 800f6e2:	89ab      	ldrh	r3, [r5, #12]
 800f6e4:	065b      	lsls	r3, r3, #25
 800f6e6:	f53f af1f 	bmi.w	800f528 <_vfiprintf_r+0x44>
 800f6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6ec:	e71e      	b.n	800f52c <_vfiprintf_r+0x48>
 800f6ee:	ab03      	add	r3, sp, #12
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	462a      	mov	r2, r5
 800f6f4:	4b05      	ldr	r3, [pc, #20]	@ (800f70c <_vfiprintf_r+0x228>)
 800f6f6:	a904      	add	r1, sp, #16
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7fc fa49 	bl	800bb90 <_printf_i>
 800f6fe:	e7e4      	b.n	800f6ca <_vfiprintf_r+0x1e6>
 800f700:	0800fe08 	.word	0x0800fe08
 800f704:	0800fe12 	.word	0x0800fe12
 800f708:	0800b681 	.word	0x0800b681
 800f70c:	0800f4c1 	.word	0x0800f4c1
 800f710:	0800fe0e 	.word	0x0800fe0e

0800f714 <__swbuf_r>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	460e      	mov	r6, r1
 800f718:	4614      	mov	r4, r2
 800f71a:	4605      	mov	r5, r0
 800f71c:	b118      	cbz	r0, 800f726 <__swbuf_r+0x12>
 800f71e:	6a03      	ldr	r3, [r0, #32]
 800f720:	b90b      	cbnz	r3, 800f726 <__swbuf_r+0x12>
 800f722:	f7fc fded 	bl	800c300 <__sinit>
 800f726:	69a3      	ldr	r3, [r4, #24]
 800f728:	60a3      	str	r3, [r4, #8]
 800f72a:	89a3      	ldrh	r3, [r4, #12]
 800f72c:	071a      	lsls	r2, r3, #28
 800f72e:	d501      	bpl.n	800f734 <__swbuf_r+0x20>
 800f730:	6923      	ldr	r3, [r4, #16]
 800f732:	b943      	cbnz	r3, 800f746 <__swbuf_r+0x32>
 800f734:	4621      	mov	r1, r4
 800f736:	4628      	mov	r0, r5
 800f738:	f000 f82a 	bl	800f790 <__swsetup_r>
 800f73c:	b118      	cbz	r0, 800f746 <__swbuf_r+0x32>
 800f73e:	f04f 37ff 	mov.w	r7, #4294967295
 800f742:	4638      	mov	r0, r7
 800f744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	6922      	ldr	r2, [r4, #16]
 800f74a:	1a98      	subs	r0, r3, r2
 800f74c:	6963      	ldr	r3, [r4, #20]
 800f74e:	b2f6      	uxtb	r6, r6
 800f750:	4283      	cmp	r3, r0
 800f752:	4637      	mov	r7, r6
 800f754:	dc05      	bgt.n	800f762 <__swbuf_r+0x4e>
 800f756:	4621      	mov	r1, r4
 800f758:	4628      	mov	r0, r5
 800f75a:	f7ff fa59 	bl	800ec10 <_fflush_r>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d1ed      	bne.n	800f73e <__swbuf_r+0x2a>
 800f762:	68a3      	ldr	r3, [r4, #8]
 800f764:	3b01      	subs	r3, #1
 800f766:	60a3      	str	r3, [r4, #8]
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	1c5a      	adds	r2, r3, #1
 800f76c:	6022      	str	r2, [r4, #0]
 800f76e:	701e      	strb	r6, [r3, #0]
 800f770:	6962      	ldr	r2, [r4, #20]
 800f772:	1c43      	adds	r3, r0, #1
 800f774:	429a      	cmp	r2, r3
 800f776:	d004      	beq.n	800f782 <__swbuf_r+0x6e>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	07db      	lsls	r3, r3, #31
 800f77c:	d5e1      	bpl.n	800f742 <__swbuf_r+0x2e>
 800f77e:	2e0a      	cmp	r6, #10
 800f780:	d1df      	bne.n	800f742 <__swbuf_r+0x2e>
 800f782:	4621      	mov	r1, r4
 800f784:	4628      	mov	r0, r5
 800f786:	f7ff fa43 	bl	800ec10 <_fflush_r>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d0d9      	beq.n	800f742 <__swbuf_r+0x2e>
 800f78e:	e7d6      	b.n	800f73e <__swbuf_r+0x2a>

0800f790 <__swsetup_r>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4b29      	ldr	r3, [pc, #164]	@ (800f838 <__swsetup_r+0xa8>)
 800f794:	4605      	mov	r5, r0
 800f796:	6818      	ldr	r0, [r3, #0]
 800f798:	460c      	mov	r4, r1
 800f79a:	b118      	cbz	r0, 800f7a4 <__swsetup_r+0x14>
 800f79c:	6a03      	ldr	r3, [r0, #32]
 800f79e:	b90b      	cbnz	r3, 800f7a4 <__swsetup_r+0x14>
 800f7a0:	f7fc fdae 	bl	800c300 <__sinit>
 800f7a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7a8:	0719      	lsls	r1, r3, #28
 800f7aa:	d422      	bmi.n	800f7f2 <__swsetup_r+0x62>
 800f7ac:	06da      	lsls	r2, r3, #27
 800f7ae:	d407      	bmi.n	800f7c0 <__swsetup_r+0x30>
 800f7b0:	2209      	movs	r2, #9
 800f7b2:	602a      	str	r2, [r5, #0]
 800f7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7b8:	81a3      	strh	r3, [r4, #12]
 800f7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f7be:	e033      	b.n	800f828 <__swsetup_r+0x98>
 800f7c0:	0758      	lsls	r0, r3, #29
 800f7c2:	d512      	bpl.n	800f7ea <__swsetup_r+0x5a>
 800f7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7c6:	b141      	cbz	r1, 800f7da <__swsetup_r+0x4a>
 800f7c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7cc:	4299      	cmp	r1, r3
 800f7ce:	d002      	beq.n	800f7d6 <__swsetup_r+0x46>
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f7fd fcdb 	bl	800d18c <_free_r>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7da:	89a3      	ldrh	r3, [r4, #12]
 800f7dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f7e0:	81a3      	strh	r3, [r4, #12]
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	6063      	str	r3, [r4, #4]
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	89a3      	ldrh	r3, [r4, #12]
 800f7ec:	f043 0308 	orr.w	r3, r3, #8
 800f7f0:	81a3      	strh	r3, [r4, #12]
 800f7f2:	6923      	ldr	r3, [r4, #16]
 800f7f4:	b94b      	cbnz	r3, 800f80a <__swsetup_r+0x7a>
 800f7f6:	89a3      	ldrh	r3, [r4, #12]
 800f7f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f7fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f800:	d003      	beq.n	800f80a <__swsetup_r+0x7a>
 800f802:	4621      	mov	r1, r4
 800f804:	4628      	mov	r0, r5
 800f806:	f000 f883 	bl	800f910 <__smakebuf_r>
 800f80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f80e:	f013 0201 	ands.w	r2, r3, #1
 800f812:	d00a      	beq.n	800f82a <__swsetup_r+0x9a>
 800f814:	2200      	movs	r2, #0
 800f816:	60a2      	str	r2, [r4, #8]
 800f818:	6962      	ldr	r2, [r4, #20]
 800f81a:	4252      	negs	r2, r2
 800f81c:	61a2      	str	r2, [r4, #24]
 800f81e:	6922      	ldr	r2, [r4, #16]
 800f820:	b942      	cbnz	r2, 800f834 <__swsetup_r+0xa4>
 800f822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f826:	d1c5      	bne.n	800f7b4 <__swsetup_r+0x24>
 800f828:	bd38      	pop	{r3, r4, r5, pc}
 800f82a:	0799      	lsls	r1, r3, #30
 800f82c:	bf58      	it	pl
 800f82e:	6962      	ldrpl	r2, [r4, #20]
 800f830:	60a2      	str	r2, [r4, #8]
 800f832:	e7f4      	b.n	800f81e <__swsetup_r+0x8e>
 800f834:	2000      	movs	r0, #0
 800f836:	e7f7      	b.n	800f828 <__swsetup_r+0x98>
 800f838:	2400002c 	.word	0x2400002c

0800f83c <_raise_r>:
 800f83c:	291f      	cmp	r1, #31
 800f83e:	b538      	push	{r3, r4, r5, lr}
 800f840:	4605      	mov	r5, r0
 800f842:	460c      	mov	r4, r1
 800f844:	d904      	bls.n	800f850 <_raise_r+0x14>
 800f846:	2316      	movs	r3, #22
 800f848:	6003      	str	r3, [r0, #0]
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f852:	b112      	cbz	r2, 800f85a <_raise_r+0x1e>
 800f854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f858:	b94b      	cbnz	r3, 800f86e <_raise_r+0x32>
 800f85a:	4628      	mov	r0, r5
 800f85c:	f000 f830 	bl	800f8c0 <_getpid_r>
 800f860:	4622      	mov	r2, r4
 800f862:	4601      	mov	r1, r0
 800f864:	4628      	mov	r0, r5
 800f866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f86a:	f000 b817 	b.w	800f89c <_kill_r>
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d00a      	beq.n	800f888 <_raise_r+0x4c>
 800f872:	1c59      	adds	r1, r3, #1
 800f874:	d103      	bne.n	800f87e <_raise_r+0x42>
 800f876:	2316      	movs	r3, #22
 800f878:	6003      	str	r3, [r0, #0]
 800f87a:	2001      	movs	r0, #1
 800f87c:	e7e7      	b.n	800f84e <_raise_r+0x12>
 800f87e:	2100      	movs	r1, #0
 800f880:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f884:	4620      	mov	r0, r4
 800f886:	4798      	blx	r3
 800f888:	2000      	movs	r0, #0
 800f88a:	e7e0      	b.n	800f84e <_raise_r+0x12>

0800f88c <raise>:
 800f88c:	4b02      	ldr	r3, [pc, #8]	@ (800f898 <raise+0xc>)
 800f88e:	4601      	mov	r1, r0
 800f890:	6818      	ldr	r0, [r3, #0]
 800f892:	f7ff bfd3 	b.w	800f83c <_raise_r>
 800f896:	bf00      	nop
 800f898:	2400002c 	.word	0x2400002c

0800f89c <_kill_r>:
 800f89c:	b538      	push	{r3, r4, r5, lr}
 800f89e:	4d07      	ldr	r5, [pc, #28]	@ (800f8bc <_kill_r+0x20>)
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	4608      	mov	r0, r1
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	602b      	str	r3, [r5, #0]
 800f8aa:	f7f1 ff5d 	bl	8001768 <_kill>
 800f8ae:	1c43      	adds	r3, r0, #1
 800f8b0:	d102      	bne.n	800f8b8 <_kill_r+0x1c>
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	b103      	cbz	r3, 800f8b8 <_kill_r+0x1c>
 800f8b6:	6023      	str	r3, [r4, #0]
 800f8b8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ba:	bf00      	nop
 800f8bc:	24000504 	.word	0x24000504

0800f8c0 <_getpid_r>:
 800f8c0:	f7f1 bf4a 	b.w	8001758 <_getpid>

0800f8c4 <__swhatbuf_r>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	b096      	sub	sp, #88	@ 0x58
 800f8d0:	4615      	mov	r5, r2
 800f8d2:	461e      	mov	r6, r3
 800f8d4:	da0d      	bge.n	800f8f2 <__swhatbuf_r+0x2e>
 800f8d6:	89a3      	ldrh	r3, [r4, #12]
 800f8d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f8dc:	f04f 0100 	mov.w	r1, #0
 800f8e0:	bf14      	ite	ne
 800f8e2:	2340      	movne	r3, #64	@ 0x40
 800f8e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	6031      	str	r1, [r6, #0]
 800f8ec:	602b      	str	r3, [r5, #0]
 800f8ee:	b016      	add	sp, #88	@ 0x58
 800f8f0:	bd70      	pop	{r4, r5, r6, pc}
 800f8f2:	466a      	mov	r2, sp
 800f8f4:	f000 f848 	bl	800f988 <_fstat_r>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	dbec      	blt.n	800f8d6 <__swhatbuf_r+0x12>
 800f8fc:	9901      	ldr	r1, [sp, #4]
 800f8fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f902:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f906:	4259      	negs	r1, r3
 800f908:	4159      	adcs	r1, r3
 800f90a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f90e:	e7eb      	b.n	800f8e8 <__swhatbuf_r+0x24>

0800f910 <__smakebuf_r>:
 800f910:	898b      	ldrh	r3, [r1, #12]
 800f912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f914:	079d      	lsls	r5, r3, #30
 800f916:	4606      	mov	r6, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	d507      	bpl.n	800f92c <__smakebuf_r+0x1c>
 800f91c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f920:	6023      	str	r3, [r4, #0]
 800f922:	6123      	str	r3, [r4, #16]
 800f924:	2301      	movs	r3, #1
 800f926:	6163      	str	r3, [r4, #20]
 800f928:	b003      	add	sp, #12
 800f92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f92c:	ab01      	add	r3, sp, #4
 800f92e:	466a      	mov	r2, sp
 800f930:	f7ff ffc8 	bl	800f8c4 <__swhatbuf_r>
 800f934:	9f00      	ldr	r7, [sp, #0]
 800f936:	4605      	mov	r5, r0
 800f938:	4639      	mov	r1, r7
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7fd fc9a 	bl	800d274 <_malloc_r>
 800f940:	b948      	cbnz	r0, 800f956 <__smakebuf_r+0x46>
 800f942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f946:	059a      	lsls	r2, r3, #22
 800f948:	d4ee      	bmi.n	800f928 <__smakebuf_r+0x18>
 800f94a:	f023 0303 	bic.w	r3, r3, #3
 800f94e:	f043 0302 	orr.w	r3, r3, #2
 800f952:	81a3      	strh	r3, [r4, #12]
 800f954:	e7e2      	b.n	800f91c <__smakebuf_r+0xc>
 800f956:	89a3      	ldrh	r3, [r4, #12]
 800f958:	6020      	str	r0, [r4, #0]
 800f95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f95e:	81a3      	strh	r3, [r4, #12]
 800f960:	9b01      	ldr	r3, [sp, #4]
 800f962:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f966:	b15b      	cbz	r3, 800f980 <__smakebuf_r+0x70>
 800f968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f96c:	4630      	mov	r0, r6
 800f96e:	f000 f81d 	bl	800f9ac <_isatty_r>
 800f972:	b128      	cbz	r0, 800f980 <__smakebuf_r+0x70>
 800f974:	89a3      	ldrh	r3, [r4, #12]
 800f976:	f023 0303 	bic.w	r3, r3, #3
 800f97a:	f043 0301 	orr.w	r3, r3, #1
 800f97e:	81a3      	strh	r3, [r4, #12]
 800f980:	89a3      	ldrh	r3, [r4, #12]
 800f982:	431d      	orrs	r5, r3
 800f984:	81a5      	strh	r5, [r4, #12]
 800f986:	e7cf      	b.n	800f928 <__smakebuf_r+0x18>

0800f988 <_fstat_r>:
 800f988:	b538      	push	{r3, r4, r5, lr}
 800f98a:	4d07      	ldr	r5, [pc, #28]	@ (800f9a8 <_fstat_r+0x20>)
 800f98c:	2300      	movs	r3, #0
 800f98e:	4604      	mov	r4, r0
 800f990:	4608      	mov	r0, r1
 800f992:	4611      	mov	r1, r2
 800f994:	602b      	str	r3, [r5, #0]
 800f996:	f7f1 ff47 	bl	8001828 <_fstat>
 800f99a:	1c43      	adds	r3, r0, #1
 800f99c:	d102      	bne.n	800f9a4 <_fstat_r+0x1c>
 800f99e:	682b      	ldr	r3, [r5, #0]
 800f9a0:	b103      	cbz	r3, 800f9a4 <_fstat_r+0x1c>
 800f9a2:	6023      	str	r3, [r4, #0]
 800f9a4:	bd38      	pop	{r3, r4, r5, pc}
 800f9a6:	bf00      	nop
 800f9a8:	24000504 	.word	0x24000504

0800f9ac <_isatty_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4d06      	ldr	r5, [pc, #24]	@ (800f9c8 <_isatty_r+0x1c>)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	4608      	mov	r0, r1
 800f9b6:	602b      	str	r3, [r5, #0]
 800f9b8:	f7f1 ff46 	bl	8001848 <_isatty>
 800f9bc:	1c43      	adds	r3, r0, #1
 800f9be:	d102      	bne.n	800f9c6 <_isatty_r+0x1a>
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	b103      	cbz	r3, 800f9c6 <_isatty_r+0x1a>
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	24000504 	.word	0x24000504

0800f9cc <_init>:
 800f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ce:	bf00      	nop
 800f9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9d2:	bc08      	pop	{r3}
 800f9d4:	469e      	mov	lr, r3
 800f9d6:	4770      	bx	lr

0800f9d8 <_fini>:
 800f9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9da:	bf00      	nop
 800f9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9de:	bc08      	pop	{r3}
 800f9e0:	469e      	mov	lr, r3
 800f9e2:	4770      	bx	lr
