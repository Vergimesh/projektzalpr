
projektzal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800fa60  0800fa60  00010a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff38  0800ff38  000111e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff38  0800ff38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff40  0800ff40  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff40  0800ff40  00010f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff44  0800ff44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  24000000  0800ff48  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  240001e8  0801012c  000111e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000528  0801012c  00011528  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dafa  00000000  00000000  00011212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f2  00000000  00000000  0002ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00032500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001126  00000000  00000000  00033b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cd71  00000000  00000000  00034c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220f4  00000000  00000000  00071997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a1d6  00000000  00000000  00093a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021dc61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007050  00000000  00000000  0021dca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00224cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fa44 	.word	0x0800fa44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800fa44 	.word	0x0800fa44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <BMP280_Init>:
// File: bmp2.c
#include "bmp2.h"

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Configuration for control measurement register
    config[0] = 0xF4; // Address of control register
 8000b9c:	23f4      	movs	r3, #244	@ 0xf4
 8000b9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x27; // Normal mode, oversampling x1 for temperature
 8000ba0:	2327      	movs	r3, #39	@ 0x27
 8000ba2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	21ec      	movs	r1, #236	@ 0xec
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f002 fa82 	bl	80030bc <HAL_I2C_Master_Transmit>

    // Configuration for configuration register
    config[0] = 0xF5; // Address of configuration register
 8000bb8:	23f5      	movs	r3, #245	@ 0xf5
 8000bba:	733b      	strb	r3, [r7, #12]
    config[1] = 0xA0; // Filter x4, standby time 1000 ms
 8000bbc:	23a0      	movs	r3, #160	@ 0xa0
 8000bbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	21ec      	movs	r1, #236	@ 0xec
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f002 fa74 	bl	80030bc <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    uint8_t calib_raw[24];

    // Read 24 bytes of calibration data starting at register 0x88
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0x88, 1, calib_raw, 24, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2318      	movs	r3, #24
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	21ec      	movs	r1, #236	@ 0xec
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 fb75 	bl	80032ec <HAL_I2C_Mem_Read>

    // Parse calibration data
    calib_data->dig_T1 = (uint16_t)(calib_raw[1] << 8 | calib_raw[0]);
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)(calib_raw[3] << 8 | calib_raw[2]);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)(calib_raw[5] << 8 | calib_raw[4]);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	809a      	strh	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    uint8_t temp_raw[3];
    int32_t temp_adc;
    float var1, var2, temperature;

    // Read 3 bytes of temperature data starting from register 0xFA
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0xFA, 1, temp_raw, 3, HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	22fa      	movs	r2, #250	@ 0xfa
 8000c66:	21ec      	movs	r1, #236	@ 0xec
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 fb3f 	bl	80032ec <HAL_I2C_Mem_Read>

    // Combine bytes into 20-bit raw temperature value
    temp_adc = ((int32_t)(temp_raw[0] << 12)) | ((int32_t)(temp_raw[1] << 4)) | ((temp_raw[2] >> 4));
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	031a      	lsls	r2, r3, #12
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]

    // Compensate temperature using calibration data
    var1 = (((float)temp_adc) / 16384.0 - ((float)calib_data->dig_T1) / 1024.0) * ((float)calib_data->dig_T2);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c90:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d80 <BMP280_ReadTemperature+0x138>
 8000c94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ca8:	ed9f 4b37 	vldr	d4, [pc, #220]	@ 8000d88 <BMP280_ReadTemperature+0x140>
 8000cac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
    var2 = ((((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0) * (((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0)) * ((float)calib_data->dig_T3);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000ce4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf8:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000cfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 4b1f 	vldr	d4, [pc, #124]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000d16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d2a:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000d2e:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
    temperature = (var1 + var2) / 5120.0;
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <BMP280_ReadTemperature+0x158>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40d00000 	.word	0x40d00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40900000 	.word	0x40900000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	41000000 	.word	0x41000000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40c00000 	.word	0x40c00000
 8000da0:	45a00000 	.word	0x45a00000

08000da4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e50:	2332      	movs	r3, #50	@ 0x32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0x160>)
 8000e6c:	f001 feac 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e70:	2386      	movs	r3, #134	@ 0x86
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000e8c:	f001 fe9c 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x168>)
 8000eae:	f001 fe8b 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000ed0:	f001 fe7a 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x16c>)
 8000ef2:	f001 fe69 	bl	8002bc8 <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f002 f818 	bl	8002f84 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 fb17 	bl	800158c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f003 fc13 	bl	800478c <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 fb0e 	bl	800158c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 fc55 	bl	8004822 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fb05 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000204 	.word	0x24000204
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	00707cbb 	.word	0x00707cbb

08000f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	@ 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22c0      	movs	r2, #192	@ 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00b ffe4 	bl	800cf82 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <HAL_I2C_MspInit+0xe4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d155      	bne.n	8001070 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	f04f 0208 	mov.w	r2, #8
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fcae 	bl	800593c <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f000 fad1 	bl	800158c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <HAL_I2C_MspInit+0xec>)
 800102e:	f001 fdcb 	bl	8002bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	201f      	movs	r0, #31
 8001056:	f001 f810 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800105a:	201f      	movs	r0, #31
 800105c:	f001 f827 	bl	80020ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2020      	movs	r0, #32
 8001066:	f001 f808 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800106a:	2020      	movs	r0, #32
 800106c:	f001 f81f 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	37e8      	adds	r7, #232	@ 0xe8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001090:	bf00      	nop
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <main+0x114>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x24>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dcf4      	bgt.n	8001092 <main+0xe>
  if ( timeout < 0 )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <main+0x2e>
  {
  Error_Handler();
 80010ae:	f000 fa6d 	bl	800158c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fe69 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f887 	bl	80011c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010ba:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <main+0x114>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a35      	ldr	r2, [pc, #212]	@ (8001198 <main+0x114>)
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <main+0x114>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 ff25 	bl	8002f28 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 ff3b 	bl	8002f5c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80010e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ea:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010ec:	bf00      	nop
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <main+0x114>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <main+0x80>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dcf4      	bgt.n	80010ee <main+0x6a>
if ( timeout < 0 )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <main+0x8a>
{
Error_Handler();
 800110a:	f000 fa3f 	bl	800158c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff fe49 	bl	8000da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001112:	f7ff feff 	bl	8000f14 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001116:	f000 fd4f 	bl	8001bb8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800111a:	f000 fc19 	bl	8001950 <MX_TIM2_Init>
  MX_TIM3_Init();
 800111e:	f000 fc65 	bl	80019ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1);
 8001122:	481e      	ldr	r0, [pc, #120]	@ (800119c <main+0x118>)
 8001124:	f7ff fd36 	bl	8000b94 <BMP280_Init>


  BMP280_ReadCalibrationData(&hi2c1, &calib_data);
 8001128:	491d      	ldr	r1, [pc, #116]	@ (80011a0 <main+0x11c>)
 800112a:	481c      	ldr	r0, [pc, #112]	@ (800119c <main+0x118>)
 800112c:	f7ff fd56 	bl	8000bdc <BMP280_ReadCalibrationData>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001130:	2108      	movs	r1, #8
 8001132:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <main+0x120>)
 8001134:	f006 fcd4 	bl	8007ae0 <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <main+0x120>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c
  	  htim3.Init.Period = 999;
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <main+0x120>)
 8001142:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim3);
 8001148:	4816      	ldr	r0, [pc, #88]	@ (80011a4 <main+0x120>)
 800114a:	f006 fa23 	bl	8007594 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 800114e:	4815      	ldr	r0, [pc, #84]	@ (80011a4 <main+0x120>)
 8001150:	f006 fa78 	bl	8007644 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001154:	2108      	movs	r1, #8
 8001156:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <main+0x120>)
 8001158:	f006 fbb4 	bl	80078c4 <HAL_TIM_PWM_Start>

  pid_init(&pid_controller,  kp,  ki,  kd,5000);
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <main+0x124>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <main+0x128>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <main+0x12c>)
 800116a:	edd3 6a00 	vldr	s13, [r3]
 800116e:	eddf 1a11 	vldr	s3, [pc, #68]	@ 80011b4 <main+0x130>
 8001172:	eeb0 1a66 	vmov.f32	s2, s13
 8001176:	eef0 0a47 	vmov.f32	s1, s14
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <main+0x134>)
 8001180:	f000 fa0a 	bl	8001598 <pid_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <main+0x138>)
 8001186:	f006 facd 	bl	8007724 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, wejscie, 5);
 800118a:	2205      	movs	r2, #5
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <main+0x13c>)
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <main+0x140>)
 8001190:	f007 fe42 	bl	8008e18 <HAL_UART_Receive_IT>



  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <main+0x110>
 8001198:	58024400 	.word	0x58024400
 800119c:	24000204 	.word	0x24000204
 80011a0:	24000258 	.word	0x24000258
 80011a4:	240002f8 	.word	0x240002f8
 80011a8:	2400000c 	.word	0x2400000c
 80011ac:	24000010 	.word	0x24000010
 80011b0:	24000280 	.word	0x24000280
 80011b4:	459c4000 	.word	0x459c4000
 80011b8:	24000284 	.word	0x24000284
 80011bc:	240002ac 	.word	0x240002ac
 80011c0:	24000264 	.word	0x24000264
 80011c4:	24000344 	.word	0x24000344

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09c      	sub	sp, #112	@ 0x70
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	224c      	movs	r2, #76	@ 0x4c
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00b fed3 	bl	800cf82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2220      	movs	r2, #32
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00b fecd 	bl	800cf82 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011e8:	2004      	movs	r0, #4
 80011ea:	f003 fb67 	bl	80048bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <SystemClock_Config+0xcc>)
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <SystemClock_Config+0xcc>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <SystemClock_Config+0xcc>)
 8001200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <SystemClock_Config+0xd0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <SystemClock_Config+0xd0>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <SystemClock_Config+0xd0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001224:	bf00      	nop
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <SystemClock_Config+0xd0>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800122e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001232:	d1f8      	bne.n	8001226 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001238:	2301      	movs	r3, #1
 800123a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2340      	movs	r3, #64	@ 0x40
 800123e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fb91 	bl	8004970 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001254:	f000 f99a 	bl	800158c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	233f      	movs	r3, #63	@ 0x3f
 800125a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800126c:	2340      	movs	r3, #64	@ 0x40
 800126e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f003 ffd1 	bl	8005224 <HAL_RCC_ClockConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001288:	f000 f980 	bl	800158c <Error_Handler>
  }
}
 800128c:	bf00      	nop
 800128e:	3770      	adds	r7, #112	@ 0x70
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58000400 	.word	0x58000400
 8001298:	58024800 	.word	0x58024800

0800129c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ba      	sub	sp, #232	@ 0xe8
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ac:	f040 80d5 	bne.w	800145a <HAL_TIM_PeriodElapsedCallback+0x1be>
  {
    // Timer interrupt triggered, perform UART transmission here
    temperature = BMP280_ReadTemperature(&hi2c1, &calib_data);
 80012b0:	496c      	ldr	r1, [pc, #432]	@ (8001464 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80012b2:	486d      	ldr	r0, [pc, #436]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80012b4:	f7ff fcc8 	bl	8000c48 <BMP280_ReadTemperature>
 80012b8:	eef0 7a40 	vmov.f32	s15, s0
 80012bc:	4b6b      	ldr	r3, [pc, #428]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80012be:	edc3 7a00 	vstr	s15, [r3]
    pid_output = pid_calculate(&pid_controller, wartosc, temperature);
 80012c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	4b68      	ldr	r3, [pc, #416]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	eef0 0a47 	vmov.f32	s1, s14
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	4867      	ldr	r0, [pc, #412]	@ (8001474 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80012d8:	f000 f984 	bl	80015e4 <pid_calculate>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	4b65      	ldr	r3, [pc, #404]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]

    char pid[50];
    snprintf(pid, sizeof(pid), "sygnal z pid: %.2f \r\n", pid_output);
 80012e6:	4b64      	ldr	r3, [pc, #400]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	ed8d 7b00 	vstr	d7, [sp]
 80012f8:	4a60      	ldr	r2, [pc, #384]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80012fa:	2132      	movs	r1, #50	@ 0x32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00b fda9 	bl	800ce54 <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)pid, strlen(pid), HAL_MAX_DELAY);
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f83a 	bl	8000380 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f107 0108 	add.w	r1, r7, #8
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	4859      	ldr	r0, [pc, #356]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800131a:	f007 fcef 	bl	8008cfc <HAL_UART_Transmit>


    // Definicja zakresu PID
    int min_pid = 0; // Minimalna wartość wyjścia PID
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int max_pid = 10;  // Maksymalna wartość wyjścia PID
 8001324:	230a      	movs	r3, #10
 8001326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

           // Skalowanie wyniku PID na zakres 0-100
    scaled_output = ((pid_output - min_pid) / (float)(max_pid - min_pid))*100.0;
 800132a:	4b53      	ldr	r3, [pc, #332]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001340:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8001344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001484 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
     char sygnal[50];


     snprintf(sygnal, sizeof(sygnal), "sygnal sterujacy: %.2f \r\n", scaled_output);
 8001364:	4b48      	ldr	r3, [pc, #288]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800136e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001372:	ed8d 7b00 	vstr	d7, [sp]
 8001376:	4a45      	ldr	r2, [pc, #276]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001378:	2132      	movs	r1, #50	@ 0x32
 800137a:	4618      	mov	r0, r3
 800137c:	f00b fd6a 	bl	800ce54 <sniprintf>

     HAL_UART_Transmit(&huart3, (uint8_t *)sygnal, strlen(sygnal), HAL_MAX_DELAY);
 8001380:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe fffb 	bl	8000380 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	483a      	ldr	r0, [pc, #232]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001398:	f007 fcb0 	bl	8008cfc <HAL_UART_Transmit>

     if (scaled_output < 0.0) {
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d503      	bpl.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0x118>
         final_output = 0;
 80013ac:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e016      	b.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x146>
     } else if (scaled_output > 100.0) {
 80013b4:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001484 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80013be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	dd03      	ble.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0x134>
         final_output = 100;
 80013c8:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013ca:	2264      	movs	r2, #100	@ 0x64
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e008      	b.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x146>
     } else {
         final_output = (int)scaled_output;  // rzutowanie na int
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013da:	ee17 2a90 	vmov	r2, s15
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013e0:	601a      	str	r2, [r3, #0]
     }

     char ost[50];
     snprintf(ost, sizeof(ost), "sygnal finalny: %d \r\n", final_output);
 80013e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80013ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80013ec:	2132      	movs	r1, #50	@ 0x32
 80013ee:	f00b fd31 	bl	800ce54 <sniprintf>

     HAL_UART_Transmit(&huart3, (uint8_t *)ost, strlen(ost), HAL_MAX_DELAY);
 80013f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ffc2 	bl	8000380 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	481d      	ldr	r0, [pc, #116]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800140a:	f007 fc77 	bl	8008cfc <HAL_UART_Transmit>


           // Ustawienie wypełnienia PWM
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, final_output  * 10);
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	461a      	mov	r2, r3
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c
    char uart_msg[50];
    snprintf(uart_msg, sizeof(uart_msg), "Temperature: %.2f C\r\n", temperature);
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800142c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001430:	ed8d 7b00 	vstr	d7, [sp]
 8001434:	4a19      	ldr	r2, [pc, #100]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001436:	2132      	movs	r1, #50	@ 0x32
 8001438:	4618      	mov	r0, r3
 800143a:	f00b fd0b 	bl	800ce54 <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 800143e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ff9c 	bl	8000380 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	480a      	ldr	r0, [pc, #40]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001456:	f007 fc51 	bl	8008cfc <HAL_UART_Transmit>

  }
}
 800145a:	bf00      	nop
 800145c:	37e0      	adds	r7, #224	@ 0xe0
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	24000258 	.word	0x24000258
 8001468:	24000204 	.word	0x24000204
 800146c:	24000260 	.word	0x24000260
 8001470:	24000008 	.word	0x24000008
 8001474:	24000284 	.word	0x24000284
 8001478:	2400029c 	.word	0x2400029c
 800147c:	0800fa60 	.word	0x0800fa60
 8001480:	24000344 	.word	0x24000344
 8001484:	42c80000 	.word	0x42c80000
 8001488:	240002a0 	.word	0x240002a0
 800148c:	0800fa78 	.word	0x0800fa78
 8001490:	240002a4 	.word	0x240002a4
 8001494:	0800fa94 	.word	0x0800fa94
 8001498:	240002f8 	.word	0x240002f8
 800149c:	0800faac 	.word	0x0800faac

080014a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2f      	ldr	r2, [pc, #188]	@ (800156c <HAL_UART_RxCpltCallback+0xcc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d157      	bne.n	8001562 <HAL_UART_RxCpltCallback+0xc2>
        // Sprawdzamy, czy odebrano poprawne dane
        if (strncmp("B", (char*)wejscie, 1) == 0) {
 80014b2:	2201      	movs	r2, #1
 80014b4:	492e      	ldr	r1, [pc, #184]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 80014b6:	482f      	ldr	r0, [pc, #188]	@ (8001574 <HAL_UART_RxCpltCallback+0xd4>)
 80014b8:	f00b fd6b 	bl	800cf92 <strncmp>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d14f      	bne.n	8001562 <HAL_UART_RxCpltCallback+0xc2>
        	 pomoc[0] = wejscie[1];
 80014c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 80014c4:	785a      	ldrb	r2, [r3, #1]
 80014c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014c8:	701a      	strb	r2, [r3, #0]
        	    pomoc[1] = wejscie[2];
 80014ca:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 80014cc:	789a      	ldrb	r2, [r3, #2]
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014d0:	705a      	strb	r2, [r3, #1]
        	    pomoc[2] = wejscie[3];
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 80014d4:	78da      	ldrb	r2, [r3, #3]
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014d8:	709a      	strb	r2, [r3, #2]
        	    pomoc[3] = wejscie[4];  // Dodajemy czwarty znak (część dziesiętna)
 80014da:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 80014dc:	791a      	ldrb	r2, [r3, #4]
 80014de:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014e0:	70da      	strb	r2, [r3, #3]
        	    pomoc[4] = '\0';  // Zakończenie stringa
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	711a      	strb	r2, [r3, #4]
        	    HAL_UART_Transmit(&huart3, pomoc, 4, 10);
 80014e8:	230a      	movs	r3, #10
 80014ea:	2204      	movs	r2, #4
 80014ec:	4922      	ldr	r1, [pc, #136]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014ee:	4823      	ldr	r0, [pc, #140]	@ (800157c <HAL_UART_RxCpltCallback+0xdc>)
 80014f0:	f007 fc04 	bl	8008cfc <HAL_UART_Transmit>
            // Konwertujemy na float
            wartosc1 = atof(pomoc);
 80014f4:	4820      	ldr	r0, [pc, #128]	@ (8001578 <HAL_UART_RxCpltCallback+0xd8>)
 80014f6:	f009 ffdf 	bl	800b4b8 <atof>
 80014fa:	ee07 0a90 	vmov	s15, r0
 80014fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <HAL_UART_RxCpltCallback+0xe0>)
 8001504:	ed83 7b00 	vstr	d7, [r3]
            wartosc = (float)wartosc1;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <HAL_UART_RxCpltCallback+0xe0>)
 800150a:	ed93 7b00 	vldr	d7, [r3]
 800150e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_UART_RxCpltCallback+0xe4>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
            // Wysyłamy wynik przez UART
            char transmit_msg[10];
            snprintf(transmit_msg, sizeof(transmit_msg), "R%.1f", wartosc);
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_UART_RxCpltCallback+0xe4>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	ed8d 7b00 	vstr	d7, [sp]
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_UART_RxCpltCallback+0xe8>)
 800152c:	210a      	movs	r1, #10
 800152e:	4618      	mov	r0, r3
 8001530:	f00b fc90 	bl	800ce54 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)transmit_msg, strlen(transmit_msg), 10);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff21 	bl	8000380 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 010c 	add.w	r1, r7, #12
 8001546:	230a      	movs	r3, #10
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <HAL_UART_RxCpltCallback+0xdc>)
 800154a:	f007 fbd7 	bl	8008cfc <HAL_UART_Transmit>

            // Czyszczenie bufora wejściowego, aby gotowy był do kolejnego odbioru
            memset(wejscie, ' ', 10);
 800154e:	220a      	movs	r2, #10
 8001550:	2120      	movs	r1, #32
 8001552:	4807      	ldr	r0, [pc, #28]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 8001554:	f00b fd15 	bl	800cf82 <memset>

            // Zainicjuj ponownie odbiór danych w trybie przerwania
            HAL_UART_Receive_IT(huart, (uint8_t*)wejscie, 10);
 8001558:	220a      	movs	r2, #10
 800155a:	4905      	ldr	r1, [pc, #20]	@ (8001570 <HAL_UART_RxCpltCallback+0xd0>)
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f007 fc5b 	bl	8008e18 <HAL_UART_Receive_IT>
        }
    }
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40004800 	.word	0x40004800
 8001570:	24000264 	.word	0x24000264
 8001574:	0800fac4 	.word	0x0800fac4
 8001578:	24000270 	.word	0x24000270
 800157c:	24000344 	.word	0x24000344
 8001580:	24000278 	.word	0x24000278
 8001584:	24000008 	.word	0x24000008
 8001588:	0800fac8 	.word	0x0800fac8

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <Error_Handler+0x8>

08001598 <pid_init>:
#include "pid.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float anti_windup_limit_init)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6178      	str	r0, [r7, #20]
 80015a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80015a4:	edc7 0a03 	vstr	s1, [r7, #12]
 80015a8:	ed87 1a02 	vstr	s2, [r7, #8]
 80015ac:	edc7 1a01 	vstr	s3, [r7, #4]
	pid_data->previous_error = 0;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	615a      	str	r2, [r3, #20]
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <pid_calculate>:
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}

float pid_calculate(pid_str *pid_data, float setpoint, float process_variable)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b08b      	sub	sp, #44	@ 0x2c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80015f0:	edc7 0a01 	vstr	s1, [r7, #4]
	 float error = setpoint - process_variable;
 80015f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80015f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	edc7 7a08 	vstr	s15, [r7, #32]


	    pid_data->total_error += error;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ed93 7a01 	vldr	s14, [r3, #4]
 800160a:	edd7 7a08 	vldr	s15, [r7, #32]
 800160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	edc3 7a01 	vstr	s15, [r3, #4]
	    float p_term = pid_data->Kp * error;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	edd3 7a02 	vldr	s15, [r3, #8]
 800161e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	edc7 7a07 	vstr	s15, [r7, #28]
	    float i_term = pid_data->Ki * pid_data->total_error;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	edd3 7a01 	vldr	s15, [r3, #4]
 8001636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	    float d_term = pid_data->Kd * (error - pid_data->previous_error);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	ed93 7a04 	vldr	s14, [r3, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	edd7 6a08 	vldr	s13, [r7, #32]
 800164e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	edc7 7a06 	vstr	s15, [r7, #24]

	    if (i_term > pid_data->anti_windup_limit){ i_term = pid_data->anti_windup_limit;}
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001660:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	dd02      	ble.n	8001674 <pid_calculate+0x90>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
	    if (i_term < -pid_data->anti_windup_limit) {i_term = -pid_data->anti_windup_limit;}
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	edd3 7a05 	vldr	s15, [r3, #20]
 800167a:	eef1 7a67 	vneg.f32	s15, s15
 800167e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	d506      	bpl.n	800169a <pid_calculate+0xb6>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001692:	eef1 7a67 	vneg.f32	s15, s15
 8001696:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	    pid_data->previous_error = error;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	601a      	str	r2, [r3, #0]

	    float output = (float)(p_term + i_term + d_term);
 80016a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80016a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	edc7 7a05 	vstr	s15, [r7, #20]
	    return output;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	ee07 3a90 	vmov	s15, r3
}
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	372c      	adds	r7, #44	@ 0x2c
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_MspInit+0x30>)
 80016d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016d8:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_MspInit+0x30>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_MspInit+0x30>)
 80016e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58024400 	.word	0x58024400

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <NMI_Handler+0x4>

08001708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <MemManage_Handler+0x4>

08001718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <UsageFault_Handler+0x4>

08001728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001756:	f000 fb89 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <TIM2_IRQHandler+0x10>)
 8001766:	f006 fa51 	bl	8007c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	240002ac 	.word	0x240002ac

08001774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM3_IRQHandler+0x10>)
 800177a:	f006 fa47 	bl	8007c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	240002f8 	.word	0x240002f8

08001788 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <I2C1_EV_IRQHandler+0x10>)
 800178e:	f001 fec7 	bl	8003520 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000204 	.word	0x24000204

0800179c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <I2C1_ER_IRQHandler+0x10>)
 80017a2:	f001 fed7 	bl	8003554 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	24000204 	.word	0x24000204

080017b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <USART3_IRQHandler+0x10>)
 80017b6:	f007 fb7b 	bl	8008eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24000344 	.word	0x24000344

080017c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return 1;
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_kill>:

int _kill(int pid, int sig)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017de:	f00b fc35 	bl	800d04c <__errno>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2216      	movs	r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
  return -1;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_exit>:

void _exit (int status)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ffe7 	bl	80017d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001806:	bf00      	nop
 8001808:	e7fd      	b.n	8001806 <_exit+0x12>

0800180a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e00a      	b.n	8001832 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181c:	f3af 8000 	nop.w
 8001820:	4601      	mov	r1, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbf0      	blt.n	800181c <_read+0x12>
  }

  return len;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e009      	b.n	800186a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf1      	blt.n	8001856 <_write+0x12>
  }
  return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_close>:

int _close(int file)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a4:	605a      	str	r2, [r3, #4]
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_isatty>:

int _isatty(int file)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f00b fb9a 	bl	800d04c <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	24080000 	.word	0x24080000
 8001944:	00000400 	.word	0x00000400
 8001948:	240002a8 	.word	0x240002a8
 800194c:	24000528 	.word	0x24000528

08001950 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001970:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001974:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001978:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800197c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001986:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800198a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_TIM2_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <MX_TIM2_Init+0x98>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001998:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <MX_TIM2_Init+0x98>)
 800199a:	f005 fdfb 	bl	8007594 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80019a4:	f7ff fdf2 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4619      	mov	r1, r3
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <MX_TIM2_Init+0x98>)
 80019b6:	f006 fb45 	bl	8008044 <HAL_TIM_ConfigClockSource>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019c0:	f7ff fde4 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_TIM2_Init+0x98>)
 80019d2:	f007 f897 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019dc:	f7ff fdd6 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	240002ac 	.word	0x240002ac

080019ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	615a      	str	r2, [r3, #20]
 8001a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a10:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a12:	4a23      	ldr	r2, [pc, #140]	@ (8001aa0 <MX_TIM3_Init+0xb4>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a18:	223f      	movs	r2, #63	@ 0x3f
 8001a1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a36:	4819      	ldr	r0, [pc, #100]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a38:	f005 feec 	bl	8007814 <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a42:	f7ff fda3 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a56:	f007 f855 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a60:	f7ff fd94 	bl	800158c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	@ 0x60
 8001a66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001a68:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a7e:	f006 f9cd 	bl	8007e1c <HAL_TIM_PWM_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001a88:	f7ff fd80 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <MX_TIM3_Init+0xb0>)
 8001a8e:	f000 f857 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240002f8 	.word	0x240002f8
 8001aa0:	40000400 	.word	0x40000400

08001aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab4:	d116      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_TIM_Base_MspInit+0x48>)
 8001ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001abc:	4a0b      	ldr	r2, [pc, #44]	@ (8001aec <HAL_TIM_Base_MspInit+0x48>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_TIM_Base_MspInit+0x48>)
 8001ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	201c      	movs	r0, #28
 8001ada:	f000 face 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f000 fae5 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58024400 	.word	0x58024400

08001af0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b38 <HAL_TIM_PWM_MspInit+0x48>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d116      	bne.n	8001b30 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HAL_TIM_PWM_MspInit+0x4c>)
 8001b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b08:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <HAL_TIM_PWM_MspInit+0x4c>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_TIM_PWM_MspInit+0x4c>)
 8001b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	201d      	movs	r0, #29
 8001b26:	f000 faa8 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b2a:	201d      	movs	r0, #29
 8001b2c:	f000 fabf 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	58024400 	.word	0x58024400

08001b40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a13      	ldr	r2, [pc, #76]	@ (8001bac <HAL_TIM_MspPostInit+0x6c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11f      	bne.n	8001ba2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_TIM_MspPostInit+0x70>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_TIM_MspPostInit+0x70>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_TIM_MspPostInit+0x70>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <HAL_TIM_MspPostInit+0x74>)
 8001b9e:	f001 f813 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	58020800 	.word	0x58020800

08001bb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bbc:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bbe:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <MX_USART3_UART_Init+0x94>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bee:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c00:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c02:	f007 f82b 	bl	8008c5c <HAL_UART_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c0c:	f7ff fcbe 	bl	800158c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c10:	2100      	movs	r1, #0
 8001c12:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c14:	f009 fb85 	bl	800b322 <HAL_UARTEx_SetTxFifoThreshold>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c1e:	f7ff fcb5 	bl	800158c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c22:	2100      	movs	r1, #0
 8001c24:	4808      	ldr	r0, [pc, #32]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c26:	f009 fbba 	bl	800b39e <HAL_UARTEx_SetRxFifoThreshold>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c30:	f7ff fcac 	bl	800158c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <MX_USART3_UART_Init+0x90>)
 8001c36:	f009 fb3b 	bl	800b2b0 <HAL_UARTEx_DisableFifoMode>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c40:	f7ff fca4 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	24000344 	.word	0x24000344
 8001c4c:	40004800 	.word	0x40004800

08001c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0ba      	sub	sp, #232	@ 0xe8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	22c0      	movs	r2, #192	@ 0xc0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00b f986 	bl	800cf82 <memset>
  if(uartHandle->Instance==USART3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d28 <HAL_UART_MspInit+0xd8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d14e      	bne.n	8001d1e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c80:	f04f 0202 	mov.w	r2, #2
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c92:	f107 0310 	add.w	r3, r7, #16
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fe50 	bl	800593c <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ca2:	f7ff fc73 	bl	800158c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cac:	4a1f      	ldr	r2, [pc, #124]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cca:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_UART_MspInit+0xdc>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ce2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	@ (8001d30 <HAL_UART_MspInit+0xe0>)
 8001d0a:	f000 ff5d 	bl	8002bc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2027      	movs	r0, #39	@ 0x27
 8001d14:	f000 f9b1 	bl	800207a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d18:	2027      	movs	r0, #39	@ 0x27
 8001d1a:	f000 f9c8 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d1e:	bf00      	nop
 8001d20:	37e8      	adds	r7, #232	@ 0xe8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40004800 	.word	0x40004800
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58020c00 	.word	0x58020c00

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d38:	f7fe fe96 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	@ (8001d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f00b f979 	bl	800d058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7ff f98d 	bl	8001084 <main>
  bx  lr
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d74:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001d78:	0800ff48 	.word	0x0800ff48
  ldr r2, =_sbss
 8001d7c:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001d80:	24000528 	.word	0x24000528

08001d84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC3_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 f968 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d94:	f003 fbfc 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_Init+0x68>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	4913      	ldr	r1, [pc, #76]	@ (8001df4 <HAL_Init+0x6c>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_Init+0x68>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a0e      	ldr	r2, [pc, #56]	@ (8001df4 <HAL_Init+0x6c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001df8 <HAL_Init+0x70>)
 8001dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_Init+0x74>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f814 	bl	8001e00 <HAL_InitTick>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e002      	b.n	8001de8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001de2:	f7ff fc73 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58024400 	.word	0x58024400
 8001df4:	0800fad0 	.word	0x0800fad0
 8001df8:	24000004 	.word	0x24000004
 8001dfc:	24000000 	.word	0x24000000

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_InitTick+0x60>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e021      	b.n	8001e58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <HAL_InitTick+0x64>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_InitTick+0x60>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f94d 	bl	80020ca <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f917 	bl	800207a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <HAL_InitTick+0x68>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	24000018 	.word	0x24000018
 8001e64:	24000000 	.word	0x24000000
 8001e68:	24000014 	.word	0x24000014

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	24000018 	.word	0x24000018
 8001e90:	240003d8 	.word	0x240003d8

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	240003d8 	.word	0x240003d8

08001eac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001eb0:	4b03      	ldr	r3, [pc, #12]	@ (8001ec0 <HAL_GetREVID+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	5c001000 	.word	0x5c001000

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	05fa0000 	.word	0x05fa0000

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	@ (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002030:	d301      	bcc.n	8002036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2301      	movs	r3, #1
 8002034:	e00f      	b.n	8002056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <SysTick_Config+0x40>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3b01      	subs	r3, #1
 800203c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203e:	210f      	movs	r1, #15
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f7ff ff8e 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <SysTick_Config+0x40>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <SysTick_Config+0x40>)
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	e000e010 	.word	0xe000e010

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff29 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff40 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff90 	bl	8001fb8 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5f 	bl	8001f64 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff33 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa4 	bl	8002020 <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff fed2 	bl	8001e94 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e2dc      	b.n	80026b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d008      	beq.n	800211a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e2cd      	b.n	80026b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a76      	ldr	r2, [pc, #472]	@ (80022f8 <HAL_DMA_Abort+0x214>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d04a      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a74      	ldr	r2, [pc, #464]	@ (80022fc <HAL_DMA_Abort+0x218>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d045      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a73      	ldr	r2, [pc, #460]	@ (8002300 <HAL_DMA_Abort+0x21c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d040      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a71      	ldr	r2, [pc, #452]	@ (8002304 <HAL_DMA_Abort+0x220>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d03b      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a70      	ldr	r2, [pc, #448]	@ (8002308 <HAL_DMA_Abort+0x224>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d036      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6e      	ldr	r2, [pc, #440]	@ (800230c <HAL_DMA_Abort+0x228>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6d      	ldr	r2, [pc, #436]	@ (8002310 <HAL_DMA_Abort+0x22c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d02c      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6b      	ldr	r2, [pc, #428]	@ (8002314 <HAL_DMA_Abort+0x230>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d027      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6a      	ldr	r2, [pc, #424]	@ (8002318 <HAL_DMA_Abort+0x234>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a68      	ldr	r2, [pc, #416]	@ (800231c <HAL_DMA_Abort+0x238>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a67      	ldr	r2, [pc, #412]	@ (8002320 <HAL_DMA_Abort+0x23c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d018      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a65      	ldr	r2, [pc, #404]	@ (8002324 <HAL_DMA_Abort+0x240>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a64      	ldr	r2, [pc, #400]	@ (8002328 <HAL_DMA_Abort+0x244>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a62      	ldr	r2, [pc, #392]	@ (800232c <HAL_DMA_Abort+0x248>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a61      	ldr	r2, [pc, #388]	@ (8002330 <HAL_DMA_Abort+0x24c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_DMA_Abort+0xd6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002334 <HAL_DMA_Abort+0x250>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_DMA_Abort+0xda>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_DMA_Abort+0xdc>
 80021be:	2300      	movs	r3, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 021e 	bic.w	r2, r2, #30
 80021d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e00a      	b.n	8002202 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020e 	bic.w	r2, r2, #14
 80021fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a3c      	ldr	r2, [pc, #240]	@ (80022f8 <HAL_DMA_Abort+0x214>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d072      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a3a      	ldr	r2, [pc, #232]	@ (80022fc <HAL_DMA_Abort+0x218>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d06d      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a39      	ldr	r2, [pc, #228]	@ (8002300 <HAL_DMA_Abort+0x21c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d068      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a37      	ldr	r2, [pc, #220]	@ (8002304 <HAL_DMA_Abort+0x220>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d063      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a36      	ldr	r2, [pc, #216]	@ (8002308 <HAL_DMA_Abort+0x224>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d05e      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a34      	ldr	r2, [pc, #208]	@ (800230c <HAL_DMA_Abort+0x228>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d059      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a33      	ldr	r2, [pc, #204]	@ (8002310 <HAL_DMA_Abort+0x22c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d054      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a31      	ldr	r2, [pc, #196]	@ (8002314 <HAL_DMA_Abort+0x230>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d04f      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a30      	ldr	r2, [pc, #192]	@ (8002318 <HAL_DMA_Abort+0x234>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d04a      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2e      	ldr	r2, [pc, #184]	@ (800231c <HAL_DMA_Abort+0x238>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d045      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <HAL_DMA_Abort+0x23c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d040      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2b      	ldr	r2, [pc, #172]	@ (8002324 <HAL_DMA_Abort+0x240>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d03b      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2a      	ldr	r2, [pc, #168]	@ (8002328 <HAL_DMA_Abort+0x244>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d036      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a28      	ldr	r2, [pc, #160]	@ (800232c <HAL_DMA_Abort+0x248>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d031      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a27      	ldr	r2, [pc, #156]	@ (8002330 <HAL_DMA_Abort+0x24c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d02c      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a25      	ldr	r2, [pc, #148]	@ (8002334 <HAL_DMA_Abort+0x250>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d027      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a24      	ldr	r2, [pc, #144]	@ (8002338 <HAL_DMA_Abort+0x254>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d022      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a22      	ldr	r2, [pc, #136]	@ (800233c <HAL_DMA_Abort+0x258>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01d      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a21      	ldr	r2, [pc, #132]	@ (8002340 <HAL_DMA_Abort+0x25c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d018      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <HAL_DMA_Abort+0x260>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002348 <HAL_DMA_Abort+0x264>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00e      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1c      	ldr	r2, [pc, #112]	@ (800234c <HAL_DMA_Abort+0x268>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002350 <HAL_DMA_Abort+0x26c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d004      	beq.n	80022f2 <HAL_DMA_Abort+0x20e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <HAL_DMA_Abort+0x270>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d132      	bne.n	8002358 <HAL_DMA_Abort+0x274>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e031      	b.n	800235a <HAL_DMA_Abort+0x276>
 80022f6:	bf00      	nop
 80022f8:	40020010 	.word	0x40020010
 80022fc:	40020028 	.word	0x40020028
 8002300:	40020040 	.word	0x40020040
 8002304:	40020058 	.word	0x40020058
 8002308:	40020070 	.word	0x40020070
 800230c:	40020088 	.word	0x40020088
 8002310:	400200a0 	.word	0x400200a0
 8002314:	400200b8 	.word	0x400200b8
 8002318:	40020410 	.word	0x40020410
 800231c:	40020428 	.word	0x40020428
 8002320:	40020440 	.word	0x40020440
 8002324:	40020458 	.word	0x40020458
 8002328:	40020470 	.word	0x40020470
 800232c:	40020488 	.word	0x40020488
 8002330:	400204a0 	.word	0x400204a0
 8002334:	400204b8 	.word	0x400204b8
 8002338:	58025408 	.word	0x58025408
 800233c:	5802541c 	.word	0x5802541c
 8002340:	58025430 	.word	0x58025430
 8002344:	58025444 	.word	0x58025444
 8002348:	58025458 	.word	0x58025458
 800234c:	5802546c 	.word	0x5802546c
 8002350:	58025480 	.word	0x58025480
 8002354:	58025494 	.word	0x58025494
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800236c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6d      	ldr	r2, [pc, #436]	@ (8002528 <HAL_DMA_Abort+0x444>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04a      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6b      	ldr	r2, [pc, #428]	@ (800252c <HAL_DMA_Abort+0x448>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d045      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6a      	ldr	r2, [pc, #424]	@ (8002530 <HAL_DMA_Abort+0x44c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d040      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a68      	ldr	r2, [pc, #416]	@ (8002534 <HAL_DMA_Abort+0x450>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d03b      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a67      	ldr	r2, [pc, #412]	@ (8002538 <HAL_DMA_Abort+0x454>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d036      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_DMA_Abort+0x458>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d031      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a64      	ldr	r2, [pc, #400]	@ (8002540 <HAL_DMA_Abort+0x45c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d02c      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a62      	ldr	r2, [pc, #392]	@ (8002544 <HAL_DMA_Abort+0x460>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d027      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a61      	ldr	r2, [pc, #388]	@ (8002548 <HAL_DMA_Abort+0x464>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5f      	ldr	r2, [pc, #380]	@ (800254c <HAL_DMA_Abort+0x468>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5e      	ldr	r2, [pc, #376]	@ (8002550 <HAL_DMA_Abort+0x46c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d018      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a5c      	ldr	r2, [pc, #368]	@ (8002554 <HAL_DMA_Abort+0x470>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002558 <HAL_DMA_Abort+0x474>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00e      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a59      	ldr	r2, [pc, #356]	@ (800255c <HAL_DMA_Abort+0x478>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a58      	ldr	r2, [pc, #352]	@ (8002560 <HAL_DMA_Abort+0x47c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_DMA_Abort+0x32a>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a56      	ldr	r2, [pc, #344]	@ (8002564 <HAL_DMA_Abort+0x480>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d108      	bne.n	8002420 <HAL_DMA_Abort+0x33c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e007      	b.n	8002430 <HAL_DMA_Abort+0x34c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002430:	e013      	b.n	800245a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002432:	f7ff fd2f 	bl	8001e94 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b05      	cmp	r3, #5
 800243e:	d90c      	bls.n	800245a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e12d      	b.n	80026b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e5      	bne.n	8002432 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2f      	ldr	r2, [pc, #188]	@ (8002528 <HAL_DMA_Abort+0x444>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04a      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2d      	ldr	r2, [pc, #180]	@ (800252c <HAL_DMA_Abort+0x448>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d045      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2c      	ldr	r2, [pc, #176]	@ (8002530 <HAL_DMA_Abort+0x44c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d040      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2a      	ldr	r2, [pc, #168]	@ (8002534 <HAL_DMA_Abort+0x450>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03b      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_DMA_Abort+0x454>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d036      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_DMA_Abort+0x458>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <HAL_DMA_Abort+0x45c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02c      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <HAL_DMA_Abort+0x460>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d027      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <HAL_DMA_Abort+0x464>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a21      	ldr	r2, [pc, #132]	@ (800254c <HAL_DMA_Abort+0x468>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <HAL_DMA_Abort+0x46c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_DMA_Abort+0x470>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <HAL_DMA_Abort+0x474>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <HAL_DMA_Abort+0x478>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <HAL_DMA_Abort+0x47c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort+0x422>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_DMA_Abort+0x480>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_DMA_Abort+0x426>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_DMA_Abort+0x428>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d02b      	beq.n	8002568 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	223f      	movs	r2, #63	@ 0x3f
 8002520:	409a      	lsls	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	e02a      	b.n	800257e <HAL_DMA_Abort+0x49a>
 8002528:	40020010 	.word	0x40020010
 800252c:	40020028 	.word	0x40020028
 8002530:	40020040 	.word	0x40020040
 8002534:	40020058 	.word	0x40020058
 8002538:	40020070 	.word	0x40020070
 800253c:	40020088 	.word	0x40020088
 8002540:	400200a0 	.word	0x400200a0
 8002544:	400200b8 	.word	0x400200b8
 8002548:	40020410 	.word	0x40020410
 800254c:	40020428 	.word	0x40020428
 8002550:	40020440 	.word	0x40020440
 8002554:	40020458 	.word	0x40020458
 8002558:	40020470 	.word	0x40020470
 800255c:	40020488 	.word	0x40020488
 8002560:	400204a0 	.word	0x400204a0
 8002564:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2201      	movs	r2, #1
 8002578:	409a      	lsls	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4f      	ldr	r2, [pc, #316]	@ (80026c0 <HAL_DMA_Abort+0x5dc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d072      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a4d      	ldr	r2, [pc, #308]	@ (80026c4 <HAL_DMA_Abort+0x5e0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d06d      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a4c      	ldr	r2, [pc, #304]	@ (80026c8 <HAL_DMA_Abort+0x5e4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d068      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a4a      	ldr	r2, [pc, #296]	@ (80026cc <HAL_DMA_Abort+0x5e8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d063      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a49      	ldr	r2, [pc, #292]	@ (80026d0 <HAL_DMA_Abort+0x5ec>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d05e      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a47      	ldr	r2, [pc, #284]	@ (80026d4 <HAL_DMA_Abort+0x5f0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d059      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a46      	ldr	r2, [pc, #280]	@ (80026d8 <HAL_DMA_Abort+0x5f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d054      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a44      	ldr	r2, [pc, #272]	@ (80026dc <HAL_DMA_Abort+0x5f8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d04f      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a43      	ldr	r2, [pc, #268]	@ (80026e0 <HAL_DMA_Abort+0x5fc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d04a      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a41      	ldr	r2, [pc, #260]	@ (80026e4 <HAL_DMA_Abort+0x600>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d045      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a40      	ldr	r2, [pc, #256]	@ (80026e8 <HAL_DMA_Abort+0x604>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d040      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a3e      	ldr	r2, [pc, #248]	@ (80026ec <HAL_DMA_Abort+0x608>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d03b      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a3d      	ldr	r2, [pc, #244]	@ (80026f0 <HAL_DMA_Abort+0x60c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d036      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a3b      	ldr	r2, [pc, #236]	@ (80026f4 <HAL_DMA_Abort+0x610>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d031      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a3a      	ldr	r2, [pc, #232]	@ (80026f8 <HAL_DMA_Abort+0x614>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d02c      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a38      	ldr	r2, [pc, #224]	@ (80026fc <HAL_DMA_Abort+0x618>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d027      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a37      	ldr	r2, [pc, #220]	@ (8002700 <HAL_DMA_Abort+0x61c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d022      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a35      	ldr	r2, [pc, #212]	@ (8002704 <HAL_DMA_Abort+0x620>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01d      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a34      	ldr	r2, [pc, #208]	@ (8002708 <HAL_DMA_Abort+0x624>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d018      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a32      	ldr	r2, [pc, #200]	@ (800270c <HAL_DMA_Abort+0x628>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a31      	ldr	r2, [pc, #196]	@ (8002710 <HAL_DMA_Abort+0x62c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2f      	ldr	r2, [pc, #188]	@ (8002714 <HAL_DMA_Abort+0x630>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2e      	ldr	r2, [pc, #184]	@ (8002718 <HAL_DMA_Abort+0x634>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_DMA_Abort+0x58a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2c      	ldr	r2, [pc, #176]	@ (800271c <HAL_DMA_Abort+0x638>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Abort+0x58e>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_DMA_Abort+0x590>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002680:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002698:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8
 8002700:	58025408 	.word	0x58025408
 8002704:	5802541c 	.word	0x5802541c
 8002708:	58025430 	.word	0x58025430
 800270c:	58025444 	.word	0x58025444
 8002710:	58025458 	.word	0x58025458
 8002714:	5802546c 	.word	0x5802546c
 8002718:	58025480 	.word	0x58025480
 800271c:	58025494 	.word	0x58025494

08002720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e237      	b.n	8002ba2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d004      	beq.n	8002748 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e22c      	b.n	8002ba2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a5c      	ldr	r2, [pc, #368]	@ (80028c0 <HAL_DMA_Abort_IT+0x1a0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d04a      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a5b      	ldr	r2, [pc, #364]	@ (80028c4 <HAL_DMA_Abort_IT+0x1a4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d045      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a59      	ldr	r2, [pc, #356]	@ (80028c8 <HAL_DMA_Abort_IT+0x1a8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d040      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a58      	ldr	r2, [pc, #352]	@ (80028cc <HAL_DMA_Abort_IT+0x1ac>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d03b      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <HAL_DMA_Abort_IT+0x1b0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d036      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a55      	ldr	r2, [pc, #340]	@ (80028d4 <HAL_DMA_Abort_IT+0x1b4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d031      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a53      	ldr	r2, [pc, #332]	@ (80028d8 <HAL_DMA_Abort_IT+0x1b8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02c      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a52      	ldr	r2, [pc, #328]	@ (80028dc <HAL_DMA_Abort_IT+0x1bc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d027      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a50      	ldr	r2, [pc, #320]	@ (80028e0 <HAL_DMA_Abort_IT+0x1c0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d022      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a4f      	ldr	r2, [pc, #316]	@ (80028e4 <HAL_DMA_Abort_IT+0x1c4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d01d      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_DMA_Abort_IT+0x1c8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <HAL_DMA_Abort_IT+0x1cc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <HAL_DMA_Abort_IT+0x1d0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a49      	ldr	r2, [pc, #292]	@ (80028f4 <HAL_DMA_Abort_IT+0x1d4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a47      	ldr	r2, [pc, #284]	@ (80028f8 <HAL_DMA_Abort_IT+0x1d8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_Abort_IT+0xc8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a46      	ldr	r2, [pc, #280]	@ (80028fc <HAL_DMA_Abort_IT+0x1dc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Abort_IT+0xcc>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_DMA_Abort_IT+0xce>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8086 	beq.w	8002900 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <HAL_DMA_Abort_IT+0x1a0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2e      	ldr	r2, [pc, #184]	@ (80028c4 <HAL_DMA_Abort_IT+0x1a4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2c      	ldr	r2, [pc, #176]	@ (80028c8 <HAL_DMA_Abort_IT+0x1a8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2b      	ldr	r2, [pc, #172]	@ (80028cc <HAL_DMA_Abort_IT+0x1ac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <HAL_DMA_Abort_IT+0x1b0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a28      	ldr	r2, [pc, #160]	@ (80028d4 <HAL_DMA_Abort_IT+0x1b4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a26      	ldr	r2, [pc, #152]	@ (80028d8 <HAL_DMA_Abort_IT+0x1b8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a25      	ldr	r2, [pc, #148]	@ (80028dc <HAL_DMA_Abort_IT+0x1bc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <HAL_DMA_Abort_IT+0x1c0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_DMA_Abort_IT+0x1c4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <HAL_DMA_Abort_IT+0x1c8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <HAL_DMA_Abort_IT+0x1cc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_DMA_Abort_IT+0x1d0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <HAL_DMA_Abort_IT+0x1d4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <HAL_DMA_Abort_IT+0x1d8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Abort_IT+0x17c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a19      	ldr	r2, [pc, #100]	@ (80028fc <HAL_DMA_Abort_IT+0x1dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d108      	bne.n	80028ae <HAL_DMA_Abort_IT+0x18e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e178      	b.n	8002ba0 <HAL_DMA_Abort_IT+0x480>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e16f      	b.n	8002ba0 <HAL_DMA_Abort_IT+0x480>
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020e 	bic.w	r2, r2, #14
 800290e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac8 <HAL_DMA_Abort_IT+0x3a8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d04a      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6b      	ldr	r2, [pc, #428]	@ (8002acc <HAL_DMA_Abort_IT+0x3ac>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d045      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a69      	ldr	r2, [pc, #420]	@ (8002ad0 <HAL_DMA_Abort_IT+0x3b0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d040      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a68      	ldr	r2, [pc, #416]	@ (8002ad4 <HAL_DMA_Abort_IT+0x3b4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d03b      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a66      	ldr	r2, [pc, #408]	@ (8002ad8 <HAL_DMA_Abort_IT+0x3b8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d036      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a65      	ldr	r2, [pc, #404]	@ (8002adc <HAL_DMA_Abort_IT+0x3bc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d031      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a63      	ldr	r2, [pc, #396]	@ (8002ae0 <HAL_DMA_Abort_IT+0x3c0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d02c      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a62      	ldr	r2, [pc, #392]	@ (8002ae4 <HAL_DMA_Abort_IT+0x3c4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d027      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a60      	ldr	r2, [pc, #384]	@ (8002ae8 <HAL_DMA_Abort_IT+0x3c8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d022      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5f      	ldr	r2, [pc, #380]	@ (8002aec <HAL_DMA_Abort_IT+0x3cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d01d      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5d      	ldr	r2, [pc, #372]	@ (8002af0 <HAL_DMA_Abort_IT+0x3d0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d018      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_DMA_Abort_IT+0x3d4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d013      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5a      	ldr	r2, [pc, #360]	@ (8002af8 <HAL_DMA_Abort_IT+0x3d8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00e      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a59      	ldr	r2, [pc, #356]	@ (8002afc <HAL_DMA_Abort_IT+0x3dc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d009      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a57      	ldr	r2, [pc, #348]	@ (8002b00 <HAL_DMA_Abort_IT+0x3e0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x290>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a56      	ldr	r2, [pc, #344]	@ (8002b04 <HAL_DMA_Abort_IT+0x3e4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d108      	bne.n	80029c2 <HAL_DMA_Abort_IT+0x2a2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e007      	b.n	80029d2 <HAL_DMA_Abort_IT+0x2b2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac8 <HAL_DMA_Abort_IT+0x3a8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d072      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a3a      	ldr	r2, [pc, #232]	@ (8002acc <HAL_DMA_Abort_IT+0x3ac>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d06d      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a39      	ldr	r2, [pc, #228]	@ (8002ad0 <HAL_DMA_Abort_IT+0x3b0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d068      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <HAL_DMA_Abort_IT+0x3b4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d063      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a36      	ldr	r2, [pc, #216]	@ (8002ad8 <HAL_DMA_Abort_IT+0x3b8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d05e      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a34      	ldr	r2, [pc, #208]	@ (8002adc <HAL_DMA_Abort_IT+0x3bc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d059      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a33      	ldr	r2, [pc, #204]	@ (8002ae0 <HAL_DMA_Abort_IT+0x3c0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d054      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ae4 <HAL_DMA_Abort_IT+0x3c4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04f      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a30      	ldr	r2, [pc, #192]	@ (8002ae8 <HAL_DMA_Abort_IT+0x3c8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2e      	ldr	r2, [pc, #184]	@ (8002aec <HAL_DMA_Abort_IT+0x3cc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <HAL_DMA_Abort_IT+0x3d0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2b      	ldr	r2, [pc, #172]	@ (8002af4 <HAL_DMA_Abort_IT+0x3d4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <HAL_DMA_Abort_IT+0x3d8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a28      	ldr	r2, [pc, #160]	@ (8002afc <HAL_DMA_Abort_IT+0x3dc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <HAL_DMA_Abort_IT+0x3e0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a25      	ldr	r2, [pc, #148]	@ (8002b04 <HAL_DMA_Abort_IT+0x3e4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a24      	ldr	r2, [pc, #144]	@ (8002b08 <HAL_DMA_Abort_IT+0x3e8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	@ (8002b0c <HAL_DMA_Abort_IT+0x3ec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <HAL_DMA_Abort_IT+0x3f0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	@ (8002b14 <HAL_DMA_Abort_IT+0x3f4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_DMA_Abort_IT+0x3f8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <HAL_DMA_Abort_IT+0x3fc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_DMA_Abort_IT+0x400>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x3a2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	@ (8002b24 <HAL_DMA_Abort_IT+0x404>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d132      	bne.n	8002b28 <HAL_DMA_Abort_IT+0x408>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e031      	b.n	8002b2a <HAL_DMA_Abort_IT+0x40a>
 8002ac6:	bf00      	nop
 8002ac8:	40020010 	.word	0x40020010
 8002acc:	40020028 	.word	0x40020028
 8002ad0:	40020040 	.word	0x40020040
 8002ad4:	40020058 	.word	0x40020058
 8002ad8:	40020070 	.word	0x40020070
 8002adc:	40020088 	.word	0x40020088
 8002ae0:	400200a0 	.word	0x400200a0
 8002ae4:	400200b8 	.word	0x400200b8
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	40020428 	.word	0x40020428
 8002af0:	40020440 	.word	0x40020440
 8002af4:	40020458 	.word	0x40020458
 8002af8:	40020470 	.word	0x40020470
 8002afc:	40020488 	.word	0x40020488
 8002b00:	400204a0 	.word	0x400204a0
 8002b04:	400204b8 	.word	0x400204b8
 8002b08:	58025408 	.word	0x58025408
 8002b0c:	5802541c 	.word	0x5802541c
 8002b10:	58025430 	.word	0x58025430
 8002b14:	58025444 	.word	0x58025444
 8002b18:	58025458 	.word	0x58025458
 8002b1c:	5802546c 	.word	0x5802546c
 8002b20:	58025480 	.word	0x58025480
 8002b24:	58025494 	.word	0x58025494
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d028      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop

08002bac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bba:	b2db      	uxtb	r3, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	@ 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bd6:	4b89      	ldr	r3, [pc, #548]	@ (8002dfc <HAL_GPIO_Init+0x234>)
 8002bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bda:	e194      	b.n	8002f06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8186 	beq.w	8002f00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d005      	beq.n	8002c0c <HAL_GPIO_Init+0x44>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d130      	bne.n	8002c6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c42:	2201      	movs	r2, #1
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0201 	and.w	r2, r3, #1
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d017      	beq.n	8002caa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	2203      	movs	r2, #3
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d123      	bne.n	8002cfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	69b9      	ldr	r1, [r7, #24]
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80e0 	beq.w	8002f00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <HAL_GPIO_Init+0x238>)
 8002d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d46:	4a2e      	ldr	r2, [pc, #184]	@ (8002e00 <HAL_GPIO_Init+0x238>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d50:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <HAL_GPIO_Init+0x238>)
 8002d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5e:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <HAL_GPIO_Init+0x23c>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a20      	ldr	r2, [pc, #128]	@ (8002e08 <HAL_GPIO_Init+0x240>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d052      	beq.n	8002e30 <HAL_GPIO_Init+0x268>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e0c <HAL_GPIO_Init+0x244>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_GPIO_Init+0x22e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1e      	ldr	r2, [pc, #120]	@ (8002e10 <HAL_GPIO_Init+0x248>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <HAL_GPIO_Init+0x22a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <HAL_GPIO_Init+0x24c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x226>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <HAL_GPIO_Init+0x250>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x222>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1b      	ldr	r2, [pc, #108]	@ (8002e1c <HAL_GPIO_Init+0x254>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x21e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <HAL_GPIO_Init+0x258>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x21a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_GPIO_Init+0x25c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x216>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a18      	ldr	r2, [pc, #96]	@ (8002e28 <HAL_GPIO_Init+0x260>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x212>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <HAL_GPIO_Init+0x264>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x20e>
 8002dd2:	2309      	movs	r3, #9
 8002dd4:	e02d      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	e02b      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	e029      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e027      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002de2:	2306      	movs	r3, #6
 8002de4:	e025      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002de6:	2305      	movs	r3, #5
 8002de8:	e023      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e021      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e01f      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e01d      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e01b      	b.n	8002e32 <HAL_GPIO_Init+0x26a>
 8002dfa:	bf00      	nop
 8002dfc:	58000080 	.word	0x58000080
 8002e00:	58024400 	.word	0x58024400
 8002e04:	58000400 	.word	0x58000400
 8002e08:	58020000 	.word	0x58020000
 8002e0c:	58020400 	.word	0x58020400
 8002e10:	58020800 	.word	0x58020800
 8002e14:	58020c00 	.word	0x58020c00
 8002e18:	58021000 	.word	0x58021000
 8002e1c:	58021400 	.word	0x58021400
 8002e20:	58021800 	.word	0x58021800
 8002e24:	58021c00 	.word	0x58021c00
 8002e28:	58022000 	.word	0x58022000
 8002e2c:	58022400 	.word	0x58022400
 8002e30:	2300      	movs	r3, #0
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	f002 0203 	and.w	r2, r2, #3
 8002e38:	0092      	lsls	r2, r2, #2
 8002e3a:	4093      	lsls	r3, r2
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e42:	4938      	ldr	r1, [pc, #224]	@ (8002f24 <HAL_GPIO_Init+0x35c>)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ea4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f ae63 	bne.w	8002bdc <HAL_GPIO_Init+0x14>
  }
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	3724      	adds	r7, #36	@ 0x24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	58000400 	.word	0x58000400

08002f28 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f30:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <HAL_HSEM_FastTake+0x2c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3320      	adds	r3, #32
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3a:	4a07      	ldr	r2, [pc, #28]	@ (8002f58 <HAL_HSEM_FastTake+0x30>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	58026400 	.word	0x58026400
 8002f58:	80000300 	.word	0x80000300

08002f5c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002f66:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <HAL_HSEM_Release+0x24>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	58026400 	.word	0x58026400

08002f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e08b      	b.n	80030ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fff2 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	@ 0x24
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e006      	b.n	800300c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800300a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d108      	bne.n	8003026 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	e007      	b.n	8003036 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <HAL_I2C_Init+0x134>)
 8003042:	430b      	orrs	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	02008000 	.word	0x02008000

080030bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
 80030cc:	4613      	mov	r3, r2
 80030ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b20      	cmp	r3, #32
 80030da:	f040 80fd 	bne.w	80032d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_I2C_Master_Transmit+0x30>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0f6      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030f4:	f7fe fece 	bl	8001e94 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2319      	movs	r3, #25
 8003100:	2201      	movs	r2, #1
 8003102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f001 f8ed 	bl	80042e6 <I2C_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0e1      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2221      	movs	r2, #33	@ 0x21
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2210      	movs	r2, #16
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2bff      	cmp	r3, #255	@ 0xff
 8003146:	d906      	bls.n	8003156 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	22ff      	movs	r2, #255	@ 0xff
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800314e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e007      	b.n	8003166 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003164:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d024      	beq.n	80031b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	4b4e      	ldr	r3, [pc, #312]	@ (80032e4 <HAL_I2C_Master_Transmit+0x228>)
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f001 fa5b 	bl	800466c <I2C_TransferConfig>
 80031b6:	e066      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	8979      	ldrh	r1, [r7, #10]
 80031c0:	4b48      	ldr	r3, [pc, #288]	@ (80032e4 <HAL_I2C_Master_Transmit+0x228>)
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f001 fa50 	bl	800466c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031cc:	e05b      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	6a39      	ldr	r1, [r7, #32]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f001 f8e0 	bl	8004398 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07b      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d034      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d130      	bne.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2200      	movs	r2, #0
 800322c:	2180      	movs	r1, #128	@ 0x80
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f001 f859 	bl	80042e6 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e04d      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	@ 0xff
 8003246:	d90e      	bls.n	8003266 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	2300      	movs	r3, #0
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f001 fa04 	bl	800466c <I2C_TransferConfig>
 8003264:	e00f      	b.n	8003286 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	2300      	movs	r3, #0
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f001 f9f3 	bl	800466c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d19e      	bne.n	80031ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	6a39      	ldr	r1, [r7, #32]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f001 f8c6 	bl	8004426 <I2C_WaitOnSTOPFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e01a      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2220      	movs	r2, #32
 80032aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <HAL_I2C_Master_Transmit+0x22c>)
 80032b8:	400b      	ands	r3, r1
 80032ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	80002000 	.word	0x80002000
 80032e8:	fe00e800 	.word	0xfe00e800

080032ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	460b      	mov	r3, r1
 8003300:	813b      	strh	r3, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	f040 80fd 	bne.w	800350e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_I2C_Mem_Read+0x34>
 800331a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0f1      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_I2C_Mem_Read+0x4e>
 8003336:	2302      	movs	r3, #2
 8003338:	e0ea      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003342:	f7fe fda7 	bl	8001e94 <HAL_GetTick>
 8003346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2319      	movs	r3, #25
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 ffc6 	bl	80042e6 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0d5      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2222      	movs	r2, #34	@ 0x22
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800338c:	88f8      	ldrh	r0, [r7, #6]
 800338e:	893a      	ldrh	r2, [r7, #8]
 8003390:	8979      	ldrh	r1, [r7, #10]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4603      	mov	r3, r0
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fa6d 	bl	800387c <I2C_RequestMemoryRead>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0ad      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2bff      	cmp	r3, #255	@ 0xff
 80033bc:	d90e      	bls.n	80033dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	22ff      	movs	r2, #255	@ 0xff
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	8979      	ldrh	r1, [r7, #10]
 80033cc:	4b52      	ldr	r3, [pc, #328]	@ (8003518 <HAL_I2C_Mem_Read+0x22c>)
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f001 f949 	bl	800466c <I2C_TransferConfig>
 80033da:	e00f      	b.n	80033fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	8979      	ldrh	r1, [r7, #10]
 80033ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003518 <HAL_I2C_Mem_Read+0x22c>)
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f001 f938 	bl	800466c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003402:	2200      	movs	r2, #0
 8003404:	2104      	movs	r1, #4
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 ff6d 	bl	80042e6 <I2C_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07c      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d034      	beq.n	80034bc <HAL_I2C_Mem_Read+0x1d0>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d130      	bne.n	80034bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	2200      	movs	r2, #0
 8003462:	2180      	movs	r1, #128	@ 0x80
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 ff3e 	bl	80042e6 <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e04d      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2bff      	cmp	r3, #255	@ 0xff
 800347c:	d90e      	bls.n	800349c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22ff      	movs	r2, #255	@ 0xff
 8003482:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	b2da      	uxtb	r2, r3
 800348a:	8979      	ldrh	r1, [r7, #10]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f001 f8e9 	bl	800466c <I2C_TransferConfig>
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f001 f8d8 	bl	800466c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d19a      	bne.n	80033fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 ffab 	bl	8004426 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e01a      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2220      	movs	r2, #32
 80034e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <HAL_I2C_Mem_Read+0x230>)
 80034ee:	400b      	ands	r3, r1
 80034f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	80002400 	.word	0x80002400
 800351c:	fe00e800 	.word	0xfe00e800

08003520 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
  }
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003594:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00f      	beq.n	80035c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00f      	beq.n	80035ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	f043 0202 	orr.w	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 030b 	and.w	r3, r3, #11
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fd19 	bl	8004034 <I2C_ITError>
  }
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	70fb      	strb	r3, [r7, #3]
 800363e:	4613      	mov	r3, r2
 8003640:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <I2C_Slave_ISR_IT+0x24>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e0e2      	b.n	8003874 <I2C_Slave_ISR_IT+0x1ea>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036ca:	6939      	ldr	r1, [r7, #16]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa09 	bl	8003ae4 <I2C_ITSlaveCplt>
 80036d2:	e0ca      	b.n	800386a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d04b      	beq.n	8003776 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d046      	beq.n	8003776 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d128      	bne.n	8003744 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b28      	cmp	r3, #40	@ 0x28
 80036fc:	d108      	bne.n	8003710 <I2C_Slave_ISR_IT+0x86>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003704:	d104      	bne.n	8003710 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003706:	6939      	ldr	r1, [r7, #16]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fc3f 	bl	8003f8c <I2C_ITListenCplt>
 800370e:	e031      	b.n	8003774 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b29      	cmp	r3, #41	@ 0x29
 800371a:	d10e      	bne.n	800373a <I2C_Slave_ISR_IT+0xb0>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003722:	d00a      	beq.n	800373a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fd98 	bl	8004262 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f97a 	bl	8003a2c <I2C_ITSlaveSeqCplt>
 8003738:	e01c      	b.n	8003774 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2210      	movs	r2, #16
 8003740:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003742:	e08f      	b.n	8003864 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2210      	movs	r2, #16
 800374a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <I2C_Slave_ISR_IT+0xdc>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003764:	d17e      	bne.n	8003864 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	4619      	mov	r1, r3
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fc61 	bl	8004034 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003772:	e077      	b.n	8003864 <I2C_Slave_ISR_IT+0x1da>
 8003774:	e076      	b.n	8003864 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02f      	beq.n	80037e0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02a      	beq.n	80037e0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d018      	beq.n	80037c6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d14b      	bne.n	8003868 <I2C_Slave_ISR_IT+0x1de>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037d6:	d047      	beq.n	8003868 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f927 	bl	8003a2c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037de:	e043      	b.n	8003868 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037f4:	6939      	ldr	r1, [r7, #16]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f894 	bl	8003924 <I2C_ITAddrCplt>
 80037fc:	e035      	b.n	800386a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d030      	beq.n	800386a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800380e:	2b00      	cmp	r3, #0
 8003810:	d02b      	beq.n	800386a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800384c:	e00d      	b.n	800386a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003854:	d002      	beq.n	800385c <I2C_Slave_ISR_IT+0x1d2>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f8e5 	bl	8003a2c <I2C_ITSlaveSeqCplt>
 8003862:	e002      	b.n	800386a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003868:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	461a      	mov	r2, r3
 800388a:	4603      	mov	r3, r0
 800388c:	817b      	strh	r3, [r7, #10]
 800388e:	460b      	mov	r3, r1
 8003890:	813b      	strh	r3, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	8979      	ldrh	r1, [r7, #10]
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <I2C_RequestMemoryRead+0xa4>)
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fee2 	bl	800466c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fd73 	bl	8004398 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e02c      	b.n	8003916 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c2:	893b      	ldrh	r3, [r7, #8]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80038cc:	e015      	b.n	80038fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ce:	893b      	ldrh	r3, [r7, #8]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fd59 	bl	8004398 <I2C_WaitOnTXISFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e012      	b.n	8003916 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2200      	movs	r2, #0
 8003902:	2140      	movs	r1, #64	@ 0x40
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fcee 	bl	80042e6 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	80002000 	.word	0x80002000

08003924 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800393a:	2b28      	cmp	r3, #40	@ 0x28
 800393c:	d16a      	bne.n	8003a14 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	b29b      	uxth	r3, r3
 8003958:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800395c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003978:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d138      	bne.n	80039f4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	09db      	lsrs	r3, r3, #7
 8003986:	b29a      	uxth	r2, r3
 8003988:	89bb      	ldrh	r3, [r7, #12]
 800398a:	4053      	eors	r3, r2
 800398c:	b29b      	uxth	r3, r3
 800398e:	f003 0306 	and.w	r3, r3, #6
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11c      	bne.n	80039d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d13b      	bne.n	8003a24 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2208      	movs	r2, #8
 80039b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039c2:	89ba      	ldrh	r2, [r7, #12]
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe32 	bl	8003632 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039ce:	e029      	b.n	8003a24 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fe79 	bl	80046d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039e6:	89ba      	ldrh	r2, [r7, #12]
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fe20 	bl	8003632 <HAL_I2C_AddrCallback>
}
 80039f2:	e017      	b.n	8003a24 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fe69 	bl	80046d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a06:	89ba      	ldrh	r2, [r7, #12]
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff fe10 	bl	8003632 <HAL_I2C_AddrCallback>
}
 8003a12:	e007      	b.n	8003a24 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2208      	movs	r2, #8
 8003a1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e00c      	b.n	8003a7a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b29      	cmp	r3, #41	@ 0x29
 8003a84:	d112      	bne.n	8003aac <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2228      	movs	r2, #40	@ 0x28
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2221      	movs	r2, #33	@ 0x21
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a94:	2101      	movs	r1, #1
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe1a 	bl	80046d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fdb0 	bl	800360a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003aaa:	e017      	b.n	8003adc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ab6:	d111      	bne.n	8003adc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2228      	movs	r2, #40	@ 0x28
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2222      	movs	r2, #34	@ 0x22
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fe01 	bl	80046d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fda1 	bl	800361e <HAL_I2C_SlaveRxCpltCallback>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b06:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	2b21      	cmp	r3, #33	@ 0x21
 8003b14:	d002      	beq.n	8003b1c <I2C_ITSlaveCplt+0x38>
 8003b16:	7afb      	ldrb	r3, [r7, #11]
 8003b18:	2b29      	cmp	r3, #41	@ 0x29
 8003b1a:	d108      	bne.n	8003b2e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b1c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fdd5 	bl	80046d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2221      	movs	r2, #33	@ 0x21
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b2c:	e019      	b.n	8003b62 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	2b22      	cmp	r3, #34	@ 0x22
 8003b32:	d002      	beq.n	8003b3a <I2C_ITSlaveCplt+0x56>
 8003b34:	7afb      	ldrb	r3, [r7, #11]
 8003b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b38:	d108      	bne.n	8003b4c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b3a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fdc6 	bl	80046d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2222      	movs	r2, #34	@ 0x22
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b4a:	e00a      	b.n	8003b62 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	2b28      	cmp	r3, #40	@ 0x28
 8003b50:	d107      	bne.n	8003b62 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003b52:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fdba 	bl	80046d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b70:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8003d7c <I2C_ITSlaveCplt+0x298>)
 8003b7e:	400b      	ands	r3, r1
 8003b80:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fb6d 	bl	8004262 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d07a      	beq.n	8003c88 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ba0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8111 	beq.w	8003dce <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	@ (8003d80 <I2C_ITSlaveCplt+0x29c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d059      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a71      	ldr	r2, [pc, #452]	@ (8003d84 <I2C_ITSlaveCplt+0x2a0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d053      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6f      	ldr	r2, [pc, #444]	@ (8003d88 <I2C_ITSlaveCplt+0x2a4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04d      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6d      	ldr	r2, [pc, #436]	@ (8003d8c <I2C_ITSlaveCplt+0x2a8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d047      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6b      	ldr	r2, [pc, #428]	@ (8003d90 <I2C_ITSlaveCplt+0x2ac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d041      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a69      	ldr	r2, [pc, #420]	@ (8003d94 <I2C_ITSlaveCplt+0x2b0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d03b      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a67      	ldr	r2, [pc, #412]	@ (8003d98 <I2C_ITSlaveCplt+0x2b4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d035      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a65      	ldr	r2, [pc, #404]	@ (8003d9c <I2C_ITSlaveCplt+0x2b8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02f      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a63      	ldr	r2, [pc, #396]	@ (8003da0 <I2C_ITSlaveCplt+0x2bc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d029      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a61      	ldr	r2, [pc, #388]	@ (8003da4 <I2C_ITSlaveCplt+0x2c0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d023      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003da8 <I2C_ITSlaveCplt+0x2c4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01d      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5d      	ldr	r2, [pc, #372]	@ (8003dac <I2C_ITSlaveCplt+0x2c8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d017      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a5b      	ldr	r2, [pc, #364]	@ (8003db0 <I2C_ITSlaveCplt+0x2cc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d011      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a59      	ldr	r2, [pc, #356]	@ (8003db4 <I2C_ITSlaveCplt+0x2d0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a57      	ldr	r2, [pc, #348]	@ (8003db8 <I2C_ITSlaveCplt+0x2d4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d005      	beq.n	8003c6c <I2C_ITSlaveCplt+0x188>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a55      	ldr	r2, [pc, #340]	@ (8003dbc <I2C_ITSlaveCplt+0x2d8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d105      	bne.n	8003c78 <I2C_ITSlaveCplt+0x194>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	e004      	b.n	8003c82 <I2C_ITSlaveCplt+0x19e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003c86:	e0a2      	b.n	8003dce <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 809d 	beq.w	8003dce <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8090 	beq.w	8003dce <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a32      	ldr	r2, [pc, #200]	@ (8003d80 <I2C_ITSlaveCplt+0x29c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d059      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a30      	ldr	r2, [pc, #192]	@ (8003d84 <I2C_ITSlaveCplt+0x2a0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d053      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d88 <I2C_ITSlaveCplt+0x2a4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04d      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d8c <I2C_ITSlaveCplt+0x2a8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d047      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d90 <I2C_ITSlaveCplt+0x2ac>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d041      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a28      	ldr	r2, [pc, #160]	@ (8003d94 <I2C_ITSlaveCplt+0x2b0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d03b      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	@ (8003d98 <I2C_ITSlaveCplt+0x2b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d035      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a24      	ldr	r2, [pc, #144]	@ (8003d9c <I2C_ITSlaveCplt+0x2b8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02f      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <I2C_ITSlaveCplt+0x2bc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d029      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a20      	ldr	r2, [pc, #128]	@ (8003da4 <I2C_ITSlaveCplt+0x2c0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d023      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003da8 <I2C_ITSlaveCplt+0x2c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	@ (8003dac <I2C_ITSlaveCplt+0x2c8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d017      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <I2C_ITSlaveCplt+0x2cc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d011      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a18      	ldr	r2, [pc, #96]	@ (8003db4 <I2C_ITSlaveCplt+0x2d0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <I2C_ITSlaveCplt+0x2d4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d005      	beq.n	8003d6e <I2C_ITSlaveCplt+0x28a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <I2C_ITSlaveCplt+0x2d8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d128      	bne.n	8003dc0 <I2C_ITSlaveCplt+0x2dc>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	e027      	b.n	8003dca <I2C_ITSlaveCplt+0x2e6>
 8003d7a:	bf00      	nop
 8003d7c:	fe00e800 	.word	0xfe00e800
 8003d80:	40020010 	.word	0x40020010
 8003d84:	40020028 	.word	0x40020028
 8003d88:	40020040 	.word	0x40020040
 8003d8c:	40020058 	.word	0x40020058
 8003d90:	40020070 	.word	0x40020070
 8003d94:	40020088 	.word	0x40020088
 8003d98:	400200a0 	.word	0x400200a0
 8003d9c:	400200b8 	.word	0x400200b8
 8003da0:	40020410 	.word	0x40020410
 8003da4:	40020428 	.word	0x40020428
 8003da8:	40020440 	.word	0x40020440
 8003dac:	40020458 	.word	0x40020458
 8003db0:	40020470 	.word	0x40020470
 8003db4:	40020488 	.word	0x40020488
 8003db8:	400204a0 	.word	0x400204a0
 8003dbc:	400204b8 	.word	0x400204b8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d020      	beq.n	8003e1a <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e28:	f043 0204 	orr.w	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d049      	beq.n	8003ece <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d044      	beq.n	8003ece <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d128      	bne.n	8003ea0 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b28      	cmp	r3, #40	@ 0x28
 8003e58:	d108      	bne.n	8003e6c <I2C_ITSlaveCplt+0x388>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e60:	d104      	bne.n	8003e6c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e62:	6979      	ldr	r1, [r7, #20]
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f891 	bl	8003f8c <I2C_ITListenCplt>
 8003e6a:	e030      	b.n	8003ece <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b29      	cmp	r3, #41	@ 0x29
 8003e76:	d10e      	bne.n	8003e96 <I2C_ITSlaveCplt+0x3b2>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e7e:	d00a      	beq.n	8003e96 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2210      	movs	r2, #16
 8003e86:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9ea 	bl	8004262 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fdcc 	bl	8003a2c <I2C_ITSlaveSeqCplt>
 8003e94:	e01b      	b.n	8003ece <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	61da      	str	r2, [r3, #28]
 8003e9e:	e016      	b.n	8003ece <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eac:	f043 0204 	orr.w	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <I2C_ITSlaveCplt+0x3de>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec0:	d105      	bne.n	8003ece <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8b3 	bl	8004034 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8a2 	bl	8004034 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b28      	cmp	r3, #40	@ 0x28
 8003efa:	d141      	bne.n	8003f80 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f844 	bl	8003f8c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f04:	e03c      	b.n	8003f80 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f0e:	d014      	beq.n	8003f3a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fd8b 	bl	8003a2c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <I2C_ITSlaveCplt+0x4a4>)
 8003f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fb8b 	bl	800364e <HAL_I2C_ListenCpltCallback>
}
 8003f38:	e022      	b.n	8003f80 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b22      	cmp	r3, #34	@ 0x22
 8003f44:	d10e      	bne.n	8003f64 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fb5e 	bl	800361e <HAL_I2C_SlaveRxCpltCallback>
}
 8003f62:	e00d      	b.n	8003f80 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff fb45 	bl	800360a <HAL_I2C_SlaveTxCpltCallback>
}
 8003f80:	bf00      	nop
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a25      	ldr	r2, [pc, #148]	@ (8004030 <I2C_ITListenCplt+0xa4>)
 8003f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d022      	beq.n	8004008 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004008:	f248 0103 	movw	r1, #32771	@ 0x8003
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fb5f 	bl	80046d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2210      	movs	r2, #16
 8004018:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fb13 	bl	800364e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	ffff0000 	.word	0xffff0000

08004034 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004044:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a6d      	ldr	r2, [pc, #436]	@ (8004208 <I2C_ITError+0x1d4>)
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b28      	cmp	r3, #40	@ 0x28
 800406a:	d005      	beq.n	8004078 <I2C_ITError+0x44>
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b29      	cmp	r3, #41	@ 0x29
 8004070:	d002      	beq.n	8004078 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	2b2a      	cmp	r3, #42	@ 0x2a
 8004076:	d10b      	bne.n	8004090 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004078:	2103      	movs	r1, #3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fb28 	bl	80046d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2228      	movs	r2, #40	@ 0x28
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a60      	ldr	r2, [pc, #384]	@ (800420c <I2C_ITError+0x1d8>)
 800408c:	635a      	str	r2, [r3, #52]	@ 0x34
 800408e:	e030      	b.n	80040f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004090:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb1b 	bl	80046d0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8e1 	bl	8004262 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b60      	cmp	r3, #96	@ 0x60
 80040aa:	d01f      	beq.n	80040ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d114      	bne.n	80040ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d109      	bne.n	80040e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2210      	movs	r2, #16
 80040d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040dc:	f043 0204 	orr.w	r2, r3, #4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d039      	beq.n	8004174 <I2C_ITError+0x140>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b11      	cmp	r3, #17
 8004104:	d002      	beq.n	800410c <I2C_ITError+0xd8>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b21      	cmp	r3, #33	@ 0x21
 800410a:	d133      	bne.n	8004174 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411a:	d107      	bne.n	800412c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800412a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fd3b 	bl	8002bac <HAL_DMA_GetState>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d017      	beq.n	800416c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	4a33      	ldr	r2, [pc, #204]	@ (8004210 <I2C_ITError+0x1dc>)
 8004142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe fae5 	bl	8002720 <HAL_DMA_Abort_IT>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d04d      	beq.n	80041f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004166:	4610      	mov	r0, r2
 8004168:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800416a:	e045      	b.n	80041f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f851 	bl	8004214 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004172:	e041      	b.n	80041f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d039      	beq.n	80041f0 <I2C_ITError+0x1bc>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b12      	cmp	r3, #18
 8004180:	d002      	beq.n	8004188 <I2C_ITError+0x154>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b22      	cmp	r3, #34	@ 0x22
 8004186:	d133      	bne.n	80041f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004196:	d107      	bne.n	80041a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fcfd 	bl	8002bac <HAL_DMA_GetState>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d017      	beq.n	80041e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041bc:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <I2C_ITError+0x1dc>)
 80041be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe faa7 	bl	8002720 <HAL_DMA_Abort_IT>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e2:	4610      	mov	r0, r2
 80041e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041e6:	e009      	b.n	80041fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f813 	bl	8004214 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041ee:	e005      	b.n	80041fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f80f 	bl	8004214 <I2C_TreatErrorCallback>
  }
}
 80041f6:	e002      	b.n	80041fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041fc:	bf00      	nop
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	ffff0000 	.word	0xffff0000
 800420c:	0800368b 	.word	0x0800368b
 8004210:	080042ab 	.word	0x080042ab

08004214 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b60      	cmp	r3, #96	@ 0x60
 8004226:	d10e      	bne.n	8004246 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fa19 	bl	8003676 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004244:	e009      	b.n	800425a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff fa04 	bl	8003662 <HAL_I2C_ErrorCallback>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d103      	bne.n	8004280 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d007      	beq.n	800429e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	619a      	str	r2, [r3, #24]
  }
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	2200      	movs	r2, #0
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d4:	2200      	movs	r2, #0
 80042d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff ff9b 	bl	8004214 <I2C_TreatErrorCallback>
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f6:	e03b      	b.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f8d5 	bl	80044ac <I2C_IsErrorOccurred>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e041      	b.n	8004390 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d02d      	beq.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fd fdbe 	bl	8001e94 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <I2C_WaitOnFlagUntilTimeout+0x44>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d122      	bne.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d113      	bne.n	8004370 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e00f      	b.n	8004390 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4013      	ands	r3, r2
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	429a      	cmp	r2, r3
 800438c:	d0b4      	beq.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043a4:	e033      	b.n	800440e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f87e 	bl	80044ac <I2C_IsErrorOccurred>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e031      	b.n	800441e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d025      	beq.n	800440e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fd fd67 	bl	8001e94 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11a      	bne.n	800440e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d013      	beq.n	800440e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e007      	b.n	800441e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d1c4      	bne.n	80043a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004432:	e02f      	b.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f837 	bl	80044ac <I2C_IsErrorOccurred>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e02d      	b.n	80044a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fd fd24 	bl	8001e94 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11a      	bne.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b20      	cmp	r3, #32
 800446a:	d013      	beq.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d1c8      	bne.n	8004434 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	@ 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d068      	beq.n	80045aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2210      	movs	r2, #16
 80044de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044e0:	e049      	b.n	8004576 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d045      	beq.n	8004576 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fd fcd3 	bl	8001e94 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_IsErrorOccurred+0x54>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d13a      	bne.n	8004576 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800450a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004512:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800451e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004522:	d121      	bne.n	8004568 <I2C_IsErrorOccurred+0xbc>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800452a:	d01d      	beq.n	8004568 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b20      	cmp	r3, #32
 8004530:	d01a      	beq.n	8004568 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004540:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004542:	f7fd fca7 	bl	8001e94 <HAL_GetTick>
 8004546:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004548:	e00e      	b.n	8004568 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800454a:	f7fd fca3 	bl	8001e94 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b19      	cmp	r3, #25
 8004556:	d907      	bls.n	8004568 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f043 0320 	orr.w	r3, r3, #32
 800455e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004566:	e006      	b.n	8004576 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d1e9      	bne.n	800454a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b20      	cmp	r3, #32
 8004582:	d003      	beq.n	800458c <I2C_IsErrorOccurred+0xe0>
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0aa      	beq.n	80044e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800458c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2220      	movs	r2, #32
 800459a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f043 0304 	orr.w	r3, r3, #4
 80045a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004610:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01c      	beq.n	800465a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fe1e 	bl	8004262 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <I2C_IsErrorOccurred+0x1bc>)
 8004632:	400b      	ands	r3, r1
 8004634:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800465a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800465e:	4618      	mov	r0, r3
 8004660:	3728      	adds	r7, #40	@ 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	fe00e800 	.word	0xfe00e800

0800466c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	4613      	mov	r3, r2
 800467c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004684:	7a7b      	ldrb	r3, [r7, #9]
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800468c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	4313      	orrs	r3, r2
 8004696:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800469a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	0d5b      	lsrs	r3, r3, #21
 80046a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046aa:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <I2C_TransferConfig+0x60>)
 80046ac:	430b      	orrs	r3, r1
 80046ae:	43db      	mvns	r3, r3
 80046b0:	ea02 0103 	and.w	r1, r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	03ff63ff 	.word	0x03ff63ff

080046d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00f      	beq.n	800470a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80046f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046fe:	2b28      	cmp	r3, #40	@ 0x28
 8004700:	d003      	beq.n	800470a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004708:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800470a:	887b      	ldrh	r3, [r7, #2]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00f      	beq.n	8004734 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800471a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004728:	2b28      	cmp	r3, #40	@ 0x28
 800472a:	d003      	beq.n	8004734 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004732:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004738:	2b00      	cmp	r3, #0
 800473a:	da03      	bge.n	8004744 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004742:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	2b10      	cmp	r3, #16
 8004748:	d103      	bne.n	8004752 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	2b20      	cmp	r3, #32
 8004756:	d103      	bne.n	8004760 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f043 0320 	orr.w	r3, r3, #32
 800475e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d103      	bne.n	800476e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800476c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43da      	mvns	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	400a      	ands	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d138      	bne.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e032      	b.n	8004816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	@ 0x24
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b20      	cmp	r3, #32
 8004836:	d139      	bne.n	80048ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004842:	2302      	movs	r3, #2
 8004844:	e033      	b.n	80048ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2224      	movs	r2, #36	@ 0x24
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80048c4:	4b29      	ldr	r3, [pc, #164]	@ (800496c <HAL_PWREx_ConfigSupply+0xb0>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d00a      	beq.n	80048e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048d0:	4b26      	ldr	r3, [pc, #152]	@ (800496c <HAL_PWREx_ConfigSupply+0xb0>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d001      	beq.n	80048e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e040      	b.n	8004964 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e03e      	b.n	8004964 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048e6:	4b21      	ldr	r3, [pc, #132]	@ (800496c <HAL_PWREx_ConfigSupply+0xb0>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80048ee:	491f      	ldr	r1, [pc, #124]	@ (800496c <HAL_PWREx_ConfigSupply+0xb0>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048f6:	f7fd facd 	bl	8001e94 <HAL_GetTick>
 80048fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048fc:	e009      	b.n	8004912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048fe:	f7fd fac9 	bl	8001e94 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800490c:	d901      	bls.n	8004912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e028      	b.n	8004964 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004912:	4b16      	ldr	r3, [pc, #88]	@ (800496c <HAL_PWREx_ConfigSupply+0xb0>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491e:	d1ee      	bne.n	80048fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b1e      	cmp	r3, #30
 8004924:	d008      	beq.n	8004938 <HAL_PWREx_ConfigSupply+0x7c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b2e      	cmp	r3, #46	@ 0x2e
 800492a:	d005      	beq.n	8004938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b1d      	cmp	r3, #29
 8004930:	d002      	beq.n	8004938 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b2d      	cmp	r3, #45	@ 0x2d
 8004936:	d114      	bne.n	8004962 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004938:	f7fd faac 	bl	8001e94 <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800493e:	e009      	b.n	8004954 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004940:	f7fd faa8 	bl	8001e94 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800494e:	d901      	bls.n	8004954 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e007      	b.n	8004964 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_PWREx_ConfigSupply+0xb0>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d1ee      	bne.n	8004940 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	58024800 	.word	0x58024800

08004970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	@ 0x30
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f000 bc48 	b.w	8005214 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8088 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4b99      	ldr	r3, [pc, #612]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800499c:	4b96      	ldr	r3, [pc, #600]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 800499e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d007      	beq.n	80049b8 <HAL_RCC_OscConfig+0x48>
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	2b18      	cmp	r3, #24
 80049ac:	d111      	bne.n	80049d2 <HAL_RCC_OscConfig+0x62>
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b8f      	ldr	r3, [pc, #572]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d06d      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x130>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d169      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f000 bc21 	b.w	8005214 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x7a>
 80049dc:	4b86      	ldr	r3, [pc, #536]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a85      	ldr	r2, [pc, #532]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 80049e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e02e      	b.n	8004a48 <HAL_RCC_OscConfig+0xd8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x9c>
 80049f2:	4b81      	ldr	r3, [pc, #516]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a80      	ldr	r2, [pc, #512]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b7e      	ldr	r3, [pc, #504]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a7d      	ldr	r2, [pc, #500]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e01d      	b.n	8004a48 <HAL_RCC_OscConfig+0xd8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCC_OscConfig+0xc0>
 8004a16:	4b78      	ldr	r3, [pc, #480]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a77      	ldr	r2, [pc, #476]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b75      	ldr	r3, [pc, #468]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a74      	ldr	r2, [pc, #464]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e00b      	b.n	8004a48 <HAL_RCC_OscConfig+0xd8>
 8004a30:	4b71      	ldr	r3, [pc, #452]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a70      	ldr	r2, [pc, #448]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a6d      	ldr	r2, [pc, #436]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d013      	beq.n	8004a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fd fa20 	bl	8001e94 <HAL_GetTick>
 8004a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7fd fa1c 	bl	8001e94 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	@ 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e3d4      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a6a:	4b63      	ldr	r3, [pc, #396]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0xe8>
 8004a76:	e014      	b.n	8004aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd fa0c 	bl	8001e94 <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fd fa08 	bl	8001e94 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	@ 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e3c0      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a92:	4b59      	ldr	r3, [pc, #356]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x110>
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80ca 	beq.w	8004c44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab0:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ab8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aba:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x166>
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2b18      	cmp	r3, #24
 8004aca:	d156      	bne.n	8004b7a <HAL_RCC_OscConfig+0x20a>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d151      	bne.n	8004b7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad6:	4b48      	ldr	r3, [pc, #288]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x17e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e392      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004aee:	4b42      	ldr	r3, [pc, #264]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 0219 	bic.w	r2, r3, #25
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	493f      	ldr	r1, [pc, #252]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fd f9c8 	bl	8001e94 <HAL_GetTick>
 8004b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fd f9c4 	bl	8001e94 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e37c      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1a:	4b37      	ldr	r3, [pc, #220]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	f7fd f9c1 	bl	8001eac <HAL_GetREVID>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d817      	bhi.n	8004b64 <HAL_RCC_OscConfig+0x1f4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d108      	bne.n	8004b4e <HAL_RCC_OscConfig+0x1de>
 8004b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b44:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b4c:	e07a      	b.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	031b      	lsls	r3, r3, #12
 8004b5c:	4926      	ldr	r1, [pc, #152]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b62:	e06f      	b.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	4921      	ldr	r1, [pc, #132]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b78:	e064      	b.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d047      	beq.n	8004c12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b82:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 0219 	bic.w	r2, r3, #25
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	491a      	ldr	r1, [pc, #104]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fd f97e 	bl	8001e94 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fd f97a 	bl	8001e94 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e332      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bae:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	f7fd f977 	bl	8001eac <HAL_GetREVID>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d819      	bhi.n	8004bfc <HAL_RCC_OscConfig+0x28c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d108      	bne.n	8004be2 <HAL_RCC_OscConfig+0x272>
 8004bd0:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bd8:	4a07      	ldr	r2, [pc, #28]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bde:	6053      	str	r3, [r2, #4]
 8004be0:	e030      	b.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	031b      	lsls	r3, r3, #12
 8004bf0:	4901      	ldr	r1, [pc, #4]	@ (8004bf8 <HAL_RCC_OscConfig+0x288>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	604b      	str	r3, [r1, #4]
 8004bf6:	e025      	b.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	4997      	ldr	r1, [pc, #604]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	e018      	b.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c12:	4b95      	ldr	r3, [pc, #596]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a94      	ldr	r2, [pc, #592]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7fd f939 	bl	8001e94 <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fd f935 	bl	8001e94 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e2ed      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c38:	4b8b      	ldr	r3, [pc, #556]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a9 	beq.w	8004da4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c52:	4b85      	ldr	r3, [pc, #532]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c5c:	4b82      	ldr	r3, [pc, #520]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d007      	beq.n	8004c78 <HAL_RCC_OscConfig+0x308>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b18      	cmp	r3, #24
 8004c6c:	d13a      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x374>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d135      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c78:	4b7b      	ldr	r3, [pc, #492]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_OscConfig+0x320>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b80      	cmp	r3, #128	@ 0x80
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e2c1      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c90:	f7fd f90c 	bl	8001eac <HAL_GetREVID>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d817      	bhi.n	8004cce <HAL_RCC_OscConfig+0x35e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d108      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x348>
 8004ca6:	4b70      	ldr	r3, [pc, #448]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004cae:	4a6e      	ldr	r2, [pc, #440]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cb6:	e075      	b.n	8004da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	069b      	lsls	r3, r3, #26
 8004cc6:	4968      	ldr	r1, [pc, #416]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ccc:	e06a      	b.n	8004da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cce:	4b66      	ldr	r3, [pc, #408]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	4962      	ldr	r1, [pc, #392]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce2:	e05f      	b.n	8004da4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d042      	beq.n	8004d72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cec:	4b5e      	ldr	r3, [pc, #376]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fd f8cc 	bl	8001e94 <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d00:	f7fd f8c8 	bl	8001e94 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e280      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d12:	4b55      	ldr	r3, [pc, #340]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d1e:	f7fd f8c5 	bl	8001eac <HAL_GetREVID>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d817      	bhi.n	8004d5c <HAL_RCC_OscConfig+0x3ec>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d108      	bne.n	8004d46 <HAL_RCC_OscConfig+0x3d6>
 8004d34:	4b4c      	ldr	r3, [pc, #304]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d42:	6053      	str	r3, [r2, #4]
 8004d44:	e02e      	b.n	8004da4 <HAL_RCC_OscConfig+0x434>
 8004d46:	4b48      	ldr	r3, [pc, #288]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	069b      	lsls	r3, r3, #26
 8004d54:	4944      	ldr	r1, [pc, #272]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
 8004d5a:	e023      	b.n	8004da4 <HAL_RCC_OscConfig+0x434>
 8004d5c:	4b42      	ldr	r3, [pc, #264]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	493f      	ldr	r1, [pc, #252]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60cb      	str	r3, [r1, #12]
 8004d70:	e018      	b.n	8004da4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d72:	4b3d      	ldr	r3, [pc, #244]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3c      	ldr	r2, [pc, #240]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fd f889 	bl	8001e94 <HAL_GetTick>
 8004d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d86:	f7fd f885 	bl	8001e94 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e23d      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d98:	4b33      	ldr	r3, [pc, #204]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d036      	beq.n	8004e1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d019      	beq.n	8004dec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fd f866 	bl	8001e94 <HAL_GetTick>
 8004dc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7fd f862 	bl	8001e94 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e21a      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dde:	4b22      	ldr	r3, [pc, #136]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x45c>
 8004dea:	e018      	b.n	8004e1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dec:	4b1e      	ldr	r3, [pc, #120]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd f84c 	bl	8001e94 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fd f848 	bl	8001e94 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e200      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e12:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d039      	beq.n	8004e9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e32:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a0c      	ldr	r2, [pc, #48]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e3e:	f7fd f829 	bl	8001e94 <HAL_GetTick>
 8004e42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e46:	f7fd f825 	bl	8001e94 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e1dd      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e58:	4b03      	ldr	r3, [pc, #12]	@ (8004e68 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x4d6>
 8004e64:	e01b      	b.n	8004e9e <HAL_RCC_OscConfig+0x52e>
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e6c:	4b9b      	ldr	r3, [pc, #620]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a9a      	ldr	r2, [pc, #616]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e78:	f7fd f80c 	bl	8001e94 <HAL_GetTick>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e80:	f7fd f808 	bl	8001e94 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1c0      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e92:	4b92      	ldr	r3, [pc, #584]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8081 	beq.w	8004fae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eac:	4b8c      	ldr	r3, [pc, #560]	@ (80050e0 <HAL_RCC_OscConfig+0x770>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a8b      	ldr	r2, [pc, #556]	@ (80050e0 <HAL_RCC_OscConfig+0x770>)
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eb8:	f7fc ffec 	bl	8001e94 <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec0:	f7fc ffe8 	bl	8001e94 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	@ 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1a0      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed2:	4b83      	ldr	r3, [pc, #524]	@ (80050e0 <HAL_RCC_OscConfig+0x770>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x584>
 8004ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eea:	4a7c      	ldr	r2, [pc, #496]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef2:	e02d      	b.n	8004f50 <HAL_RCC_OscConfig+0x5e0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5a6>
 8004efc:	4b77      	ldr	r3, [pc, #476]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f00:	4a76      	ldr	r2, [pc, #472]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f08:	4b74      	ldr	r3, [pc, #464]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a73      	ldr	r2, [pc, #460]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f0e:	f023 0304 	bic.w	r3, r3, #4
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x5e0>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x5c8>
 8004f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	4a6e      	ldr	r2, [pc, #440]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0x5e0>
 8004f38:	4b68      	ldr	r3, [pc, #416]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3c:	4a67      	ldr	r2, [pc, #412]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f44:	4b65      	ldr	r3, [pc, #404]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f48:	4a64      	ldr	r2, [pc, #400]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fc ff9c 	bl	8001e94 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fc ff98 	bl	8001e94 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e14e      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f76:	4b59      	ldr	r3, [pc, #356]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCC_OscConfig+0x5f0>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fc ff86 	bl	8001e94 <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fc ff82 	bl	8001e94 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e138      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ee      	bne.n	8004f8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 812d 	beq.w	8005212 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fb8:	4b48      	ldr	r3, [pc, #288]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc0:	2b18      	cmp	r3, #24
 8004fc2:	f000 80bd 	beq.w	8005140 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	f040 809e 	bne.w	800510c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	4b42      	ldr	r3, [pc, #264]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a41      	ldr	r2, [pc, #260]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fc ff5a 	bl	8001e94 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fc ff56 	bl	8001e94 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e10e      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ff6:	4b39      	ldr	r3, [pc, #228]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005002:	4b36      	ldr	r3, [pc, #216]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005006:	4b37      	ldr	r3, [pc, #220]	@ (80050e4 <HAL_RCC_OscConfig+0x774>)
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005012:	0112      	lsls	r2, r2, #4
 8005014:	430a      	orrs	r2, r1
 8005016:	4931      	ldr	r1, [pc, #196]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	628b      	str	r3, [r1, #40]	@ 0x28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	3b01      	subs	r3, #1
 8005022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800502a:	3b01      	subs	r3, #1
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	b29b      	uxth	r3, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	3b01      	subs	r3, #1
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	3b01      	subs	r3, #1
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800504c:	4923      	ldr	r1, [pc, #140]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005052:	4b22      	ldr	r3, [pc, #136]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	4a21      	ldr	r2, [pc, #132]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800505e:	4b1f      	ldr	r3, [pc, #124]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005062:	4b21      	ldr	r3, [pc, #132]	@ (80050e8 <HAL_RCC_OscConfig+0x778>)
 8005064:	4013      	ands	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800506a:	00d2      	lsls	r2, r2, #3
 800506c:	491b      	ldr	r1, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005072:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	f023 020c 	bic.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	4917      	ldr	r1, [pc, #92]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005080:	4313      	orrs	r3, r2
 8005082:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005084:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	f023 0202 	bic.w	r2, r3, #2
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005090:	4912      	ldr	r1, [pc, #72]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005096:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a10      	ldr	r2, [pc, #64]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	4a0d      	ldr	r2, [pc, #52]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050ae:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050ba:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	4a07      	ldr	r2, [pc, #28]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a04      	ldr	r2, [pc, #16]	@ (80050dc <HAL_RCC_OscConfig+0x76c>)
 80050cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fc fedf 	bl	8001e94 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d8:	e011      	b.n	80050fe <HAL_RCC_OscConfig+0x78e>
 80050da:	bf00      	nop
 80050dc:	58024400 	.word	0x58024400
 80050e0:	58024800 	.word	0x58024800
 80050e4:	fffffc0c 	.word	0xfffffc0c
 80050e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fc fed2 	bl	8001e94 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e08a      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x77c>
 800510a:	e082      	b.n	8005212 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b43      	ldr	r3, [pc, #268]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a42      	ldr	r2, [pc, #264]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc febc 	bl	8001e94 <HAL_GetTick>
 800511c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005120:	f7fc feb8 	bl	8001e94 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e070      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005132:	4b3a      	ldr	r3, [pc, #232]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x7b0>
 800513e:	e068      	b.n	8005212 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005140:	4b36      	ldr	r3, [pc, #216]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005146:	4b35      	ldr	r3, [pc, #212]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	2b01      	cmp	r3, #1
 8005152:	d031      	beq.n	80051b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0203 	and.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d12a      	bne.n	80051b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d122      	bne.n	80051b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d11a      	bne.n	80051b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0a5b      	lsrs	r3, r3, #9
 8005186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d111      	bne.n	80051b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d108      	bne.n	80051b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0e1b      	lsrs	r3, r3, #24
 80051aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e02b      	b.n	8005214 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051bc:	4b17      	ldr	r3, [pc, #92]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 80051be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c0:	08db      	lsrs	r3, r3, #3
 80051c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d01f      	beq.n	8005212 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	4a11      	ldr	r2, [pc, #68]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051de:	f7fc fe59 	bl	8001e94 <HAL_GetTick>
 80051e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051e4:	bf00      	nop
 80051e6:	f7fc fe55 	bl	8001e94 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d0f9      	beq.n	80051e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051f2:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 80051f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_RCC_OscConfig+0x8b0>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051fe:	00d2      	lsls	r2, r2, #3
 8005200:	4906      	ldr	r1, [pc, #24]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005202:	4313      	orrs	r3, r2
 8005204:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005206:	4b05      	ldr	r3, [pc, #20]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	4a04      	ldr	r2, [pc, #16]	@ (800521c <HAL_RCC_OscConfig+0x8ac>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3730      	adds	r7, #48	@ 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	58024400 	.word	0x58024400
 8005220:	ffff0007 	.word	0xffff0007

08005224 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e19c      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005238:	4b8a      	ldr	r3, [pc, #552]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d910      	bls.n	8005268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b87      	ldr	r3, [pc, #540]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 020f 	bic.w	r2, r3, #15
 800524e:	4985      	ldr	r1, [pc, #532]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b83      	ldr	r3, [pc, #524]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e184      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d010      	beq.n	8005296 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	4b7b      	ldr	r3, [pc, #492]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005280:	429a      	cmp	r2, r3
 8005282:	d908      	bls.n	8005296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005284:	4b78      	ldr	r3, [pc, #480]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	4975      	ldr	r1, [pc, #468]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005292:	4313      	orrs	r3, r2
 8005294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d010      	beq.n	80052c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	4b70      	ldr	r3, [pc, #448]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d908      	bls.n	80052c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	496a      	ldr	r1, [pc, #424]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d010      	beq.n	80052f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	4b64      	ldr	r3, [pc, #400]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052dc:	429a      	cmp	r2, r3
 80052de:	d908      	bls.n	80052f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052e0:	4b61      	ldr	r3, [pc, #388]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	495e      	ldr	r1, [pc, #376]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	4b59      	ldr	r3, [pc, #356]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800530a:	429a      	cmp	r2, r3
 800530c:	d908      	bls.n	8005320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800530e:	4b56      	ldr	r3, [pc, #344]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4953      	ldr	r1, [pc, #332]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 800531c:	4313      	orrs	r3, r2
 800531e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d010      	beq.n	800534e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	4b4d      	ldr	r3, [pc, #308]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	429a      	cmp	r2, r3
 800533a:	d908      	bls.n	800534e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b4a      	ldr	r3, [pc, #296]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f023 020f 	bic.w	r2, r3, #15
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4947      	ldr	r1, [pc, #284]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 800534a:	4313      	orrs	r3, r2
 800534c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d055      	beq.n	8005406 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800535a:	4b43      	ldr	r3, [pc, #268]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	4940      	ldr	r1, [pc, #256]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005368:	4313      	orrs	r3, r2
 800536a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d107      	bne.n	8005384 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005374:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d121      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0f6      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d107      	bne.n	800539c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800538c:	4b36      	ldr	r3, [pc, #216]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d115      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0ea      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053a4:	4b30      	ldr	r3, [pc, #192]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0de      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0d6      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053c4:	4b28      	ldr	r3, [pc, #160]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f023 0207 	bic.w	r2, r3, #7
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4925      	ldr	r1, [pc, #148]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc fd5d 	bl	8001e94 <HAL_GetTick>
 80053da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053de:	f7fc fd59 	bl	8001e94 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0be      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	429a      	cmp	r2, r3
 8005404:	d1eb      	bne.n	80053de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d010      	beq.n	8005434 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	429a      	cmp	r2, r3
 8005420:	d208      	bcs.n	8005434 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005422:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f023 020f 	bic.w	r2, r3, #15
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	490e      	ldr	r1, [pc, #56]	@ (8005468 <HAL_RCC_ClockConfig+0x244>)
 8005430:	4313      	orrs	r3, r2
 8005432:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005434:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d214      	bcs.n	800546c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b08      	ldr	r3, [pc, #32]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 020f 	bic.w	r2, r3, #15
 800544a:	4906      	ldr	r1, [pc, #24]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	4313      	orrs	r3, r2
 8005450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <HAL_RCC_ClockConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e086      	b.n	8005572 <HAL_RCC_ClockConfig+0x34e>
 8005464:	52002000 	.word	0x52002000
 8005468:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d010      	beq.n	800549a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	4b3f      	ldr	r3, [pc, #252]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005484:	429a      	cmp	r2, r3
 8005486:	d208      	bcs.n	800549a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005488:	4b3c      	ldr	r3, [pc, #240]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	4939      	ldr	r1, [pc, #228]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 8005496:	4313      	orrs	r3, r2
 8005498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d010      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	4b34      	ldr	r3, [pc, #208]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d208      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054b6:	4b31      	ldr	r3, [pc, #196]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	492e      	ldr	r1, [pc, #184]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d010      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	4b28      	ldr	r3, [pc, #160]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d208      	bcs.n	80054f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054e4:	4b25      	ldr	r3, [pc, #148]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	4922      	ldr	r1, [pc, #136]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69da      	ldr	r2, [r3, #28]
 8005506:	4b1d      	ldr	r3, [pc, #116]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800550e:	429a      	cmp	r2, r3
 8005510:	d208      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005512:	4b1a      	ldr	r3, [pc, #104]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	4917      	ldr	r1, [pc, #92]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 8005520:	4313      	orrs	r3, r2
 8005522:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005524:	f000 f834 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b14      	ldr	r3, [pc, #80]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	4912      	ldr	r1, [pc, #72]	@ (8005580 <HAL_RCC_ClockConfig+0x35c>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005542:	4b0e      	ldr	r3, [pc, #56]	@ (800557c <HAL_RCC_ClockConfig+0x358>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	4a0d      	ldr	r2, [pc, #52]	@ (8005580 <HAL_RCC_ClockConfig+0x35c>)
 800554c:	5cd3      	ldrb	r3, [r2, r3]
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	4a0a      	ldr	r2, [pc, #40]	@ (8005584 <HAL_RCC_ClockConfig+0x360>)
 800555a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800555c:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <HAL_RCC_ClockConfig+0x364>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005562:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <HAL_RCC_ClockConfig+0x368>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc fc4a 	bl	8001e00 <HAL_InitTick>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
 8005580:	0800fad0 	.word	0x0800fad0
 8005584:	24000004 	.word	0x24000004
 8005588:	24000000 	.word	0x24000000
 800558c:	24000014 	.word	0x24000014

08005590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	@ 0x24
 8005594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005596:	4bb3      	ldr	r3, [pc, #716]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800559e:	2b18      	cmp	r3, #24
 80055a0:	f200 8155 	bhi.w	800584e <HAL_RCC_GetSysClockFreq+0x2be>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	08005611 	.word	0x08005611
 80055b0:	0800584f 	.word	0x0800584f
 80055b4:	0800584f 	.word	0x0800584f
 80055b8:	0800584f 	.word	0x0800584f
 80055bc:	0800584f 	.word	0x0800584f
 80055c0:	0800584f 	.word	0x0800584f
 80055c4:	0800584f 	.word	0x0800584f
 80055c8:	0800584f 	.word	0x0800584f
 80055cc:	08005637 	.word	0x08005637
 80055d0:	0800584f 	.word	0x0800584f
 80055d4:	0800584f 	.word	0x0800584f
 80055d8:	0800584f 	.word	0x0800584f
 80055dc:	0800584f 	.word	0x0800584f
 80055e0:	0800584f 	.word	0x0800584f
 80055e4:	0800584f 	.word	0x0800584f
 80055e8:	0800584f 	.word	0x0800584f
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800584f 	.word	0x0800584f
 80055f4:	0800584f 	.word	0x0800584f
 80055f8:	0800584f 	.word	0x0800584f
 80055fc:	0800584f 	.word	0x0800584f
 8005600:	0800584f 	.word	0x0800584f
 8005604:	0800584f 	.word	0x0800584f
 8005608:	0800584f 	.word	0x0800584f
 800560c:	08005643 	.word	0x08005643
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005610:	4b94      	ldr	r3, [pc, #592]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800561c:	4b91      	ldr	r3, [pc, #580]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	4a90      	ldr	r2, [pc, #576]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800562e:	e111      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005630:	4b8d      	ldr	r3, [pc, #564]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005632:	61bb      	str	r3, [r7, #24]
      break;
 8005634:	e10e      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005636:	4b8d      	ldr	r3, [pc, #564]	@ (800586c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005638:	61bb      	str	r3, [r7, #24]
      break;
 800563a:	e10b      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800563c:	4b8c      	ldr	r3, [pc, #560]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800563e:	61bb      	str	r3, [r7, #24]
      break;
 8005640:	e108      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005642:	4b88      	ldr	r3, [pc, #544]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800564c:	4b85      	ldr	r3, [pc, #532]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005656:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005658:	4b82      	ldr	r3, [pc, #520]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005662:	4b80      	ldr	r3, [pc, #512]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005666:	08db      	lsrs	r3, r3, #3
 8005668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80e1 	beq.w	8005848 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b02      	cmp	r3, #2
 800568a:	f000 8083 	beq.w	8005794 <HAL_RCC_GetSysClockFreq+0x204>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b02      	cmp	r3, #2
 8005692:	f200 80a1 	bhi.w	80057d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x114>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d056      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056a2:	e099      	b.n	80057d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02d      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	08db      	lsrs	r3, r3, #3
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056da:	4b62      	ldr	r3, [pc, #392]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005706:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800570a:	e087      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571e:	4b51      	ldr	r3, [pc, #324]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005732:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800574e:	e065      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800587c <HAL_RCC_GetSysClockFreq+0x2ec>
 800575e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005762:	4b40      	ldr	r3, [pc, #256]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005772:	ed97 6a02 	vldr	s12, [r7, #8]
 8005776:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800577a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005792:	e043      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005880 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057d6:	e021      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	ee07 3a90 	vmov	s15, r3
 80057de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800587c <HAL_RCC_GetSysClockFreq+0x2ec>
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80057fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800581a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800581c:	4b11      	ldr	r3, [pc, #68]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	0a5b      	lsrs	r3, r3, #9
 8005822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005826:	3301      	adds	r3, #1
 8005828:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	ee07 3a90 	vmov	s15, r3
 8005830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005834:	edd7 6a07 	vldr	s13, [r7, #28]
 8005838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005840:	ee17 3a90 	vmov	r3, s15
 8005844:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005846:	e005      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
      break;
 800584c:	e002      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800584e:	4b07      	ldr	r3, [pc, #28]	@ (800586c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005850:	61bb      	str	r3, [r7, #24]
      break;
 8005852:	bf00      	nop
  }

  return sysclockfreq;
 8005854:	69bb      	ldr	r3, [r7, #24]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	@ 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
 8005868:	03d09000 	.word	0x03d09000
 800586c:	003d0900 	.word	0x003d0900
 8005870:	017d7840 	.word	0x017d7840
 8005874:	46000000 	.word	0x46000000
 8005878:	4c742400 	.word	0x4c742400
 800587c:	4a742400 	.word	0x4a742400
 8005880:	4bbebc20 	.word	0x4bbebc20

08005884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800588a:	f7ff fe81 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 800588e:	4602      	mov	r2, r0
 8005890:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	490f      	ldr	r1, [pc, #60]	@ (80058d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800589c:	5ccb      	ldrb	r3, [r1, r3]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058a8:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	4a09      	ldr	r2, [pc, #36]	@ (80058d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	4a07      	ldr	r2, [pc, #28]	@ (80058dc <HAL_RCC_GetHCLKFreq+0x58>)
 80058c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058c2:	4a07      	ldr	r2, [pc, #28]	@ (80058e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058c8:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <HAL_RCC_GetHCLKFreq+0x58>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	58024400 	.word	0x58024400
 80058d8:	0800fad0 	.word	0x0800fad0
 80058dc:	24000004 	.word	0x24000004
 80058e0:	24000000 	.word	0x24000000

080058e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058e8:	f7ff ffcc 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	@ (800590c <HAL_RCC_GetPCLK1Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	0800fad0 	.word	0x0800fad0

08005910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005914:	f7ff ffb6 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 8005918:	4602      	mov	r2, r0
 800591a:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	4904      	ldr	r1, [pc, #16]	@ (8005938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005926:	5ccb      	ldrb	r3, [r1, r3]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	58024400 	.word	0x58024400
 8005938:	0800fad0 	.word	0x0800fad0

0800593c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b0ca      	sub	sp, #296	@ 0x128
 8005942:	af00      	add	r7, sp, #0
 8005944:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800594e:	2300      	movs	r3, #0
 8005950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005960:	2500      	movs	r5, #0
 8005962:	ea54 0305 	orrs.w	r3, r4, r5
 8005966:	d049      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800596e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005972:	d02f      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005978:	d828      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800597a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800597e:	d01a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005984:	d822      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800598a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800598e:	d007      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005990:	e01c      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005992:	4bb8      	ldr	r3, [pc, #736]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	4ab7      	ldr	r2, [pc, #732]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800599e:	e01a      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a4:	3308      	adds	r3, #8
 80059a6:	2102      	movs	r1, #2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 fc8f 	bl	80072cc <RCCEx_PLL2_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059b4:	e00f      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	3328      	adds	r3, #40	@ 0x28
 80059bc:	2102      	movs	r1, #2
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fd36 	bl	8007430 <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059ca:	e004      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059de:	4ba5      	ldr	r3, [pc, #660]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ec:	4aa1      	ldr	r2, [pc, #644]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80059f2:	e003      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a08:	f04f 0900 	mov.w	r9, #0
 8005a0c:	ea58 0309 	orrs.w	r3, r8, r9
 8005a10:	d047      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d82a      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a39 	.word	0x08005a39
 8005a28:	08005a47 	.word	0x08005a47
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a7b 	.word	0x08005a7b
 8005a34:	08005a7b 	.word	0x08005a7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a38:	4b8e      	ldr	r3, [pc, #568]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	4a8d      	ldr	r2, [pc, #564]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a44:	e01a      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fc3c 	bl	80072cc <RCCEx_PLL2_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a5a:	e00f      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	3328      	adds	r3, #40	@ 0x28
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fce3 	bl	8007430 <RCCEx_PLL3_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a70:	e004      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a84:	4b7b      	ldr	r3, [pc, #492]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a88:	f023 0107 	bic.w	r1, r3, #7
 8005a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a92:	4a78      	ldr	r2, [pc, #480]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a98:	e003      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005aae:	f04f 0b00 	mov.w	fp, #0
 8005ab2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ab6:	d04c      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac2:	d030      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac8:	d829      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005acc:	d02d      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad0:	d825      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ad2:	2b80      	cmp	r3, #128	@ 0x80
 8005ad4:	d018      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ad6:	2b80      	cmp	r3, #128	@ 0x80
 8005ad8:	d821      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d007      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005ae2:	e01c      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae4:	4b63      	ldr	r3, [pc, #396]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	4a62      	ldr	r2, [pc, #392]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005af0:	e01c      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	3308      	adds	r3, #8
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fbe6 	bl	80072cc <RCCEx_PLL2_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	3328      	adds	r3, #40	@ 0x28
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fc8d 	bl	8007430 <RCCEx_PLL3_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b1c:	e006      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b24:	e002      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b34:	4b4f      	ldr	r3, [pc, #316]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	4a4c      	ldr	r2, [pc, #304]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b48:	e003      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005b68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	d053      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b7e:	d035      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b84:	d82e      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b8a:	d031      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b90:	d828      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b96:	d01a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b9c:	d822      	bhi.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ba6:	d007      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005baa:	4b32      	ldr	r3, [pc, #200]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	4a31      	ldr	r2, [pc, #196]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e01c      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fb83 	bl	80072cc <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e011      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	3328      	adds	r3, #40	@ 0x28
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 fc2a 	bl	8007430 <RCCEx_PLL3_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be2:	e006      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bea:	e002      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c10:	e003      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c34:	460b      	mov	r3, r1
 8005c36:	4313      	orrs	r3, r2
 8005c38:	d056      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c46:	d038      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c4c:	d831      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c52:	d034      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c58:	d82b      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c5e:	d01d      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c64:	d825      	bhi.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c6e:	d00a      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c70:	e01f      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c72:	bf00      	nop
 8005c74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c78:	4ba2      	ldr	r3, [pc, #648]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7c:	4aa1      	ldr	r2, [pc, #644]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c84:	e01c      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fb1c 	bl	80072cc <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c9a:	e011      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca0:	3328      	adds	r3, #40	@ 0x28
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fbc3 	bl	8007430 <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ccc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cd8:	4a8a      	ldr	r2, [pc, #552]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cde:	e003      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d02:	460b      	mov	r3, r1
 8005d04:	4313      	orrs	r3, r2
 8005d06:	d03a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0e:	2b30      	cmp	r3, #48	@ 0x30
 8005d10:	d01f      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d12:	2b30      	cmp	r3, #48	@ 0x30
 8005d14:	d819      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d00c      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d815      	bhi.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d019      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d111      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d26:	4b77      	ldr	r3, [pc, #476]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2a:	4a76      	ldr	r2, [pc, #472]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d32:	e011      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	3308      	adds	r3, #8
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fac5 	bl	80072cc <RCCEx_PLL2_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d48:	e006      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d60:	4b68      	ldr	r3, [pc, #416]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6e:	4a65      	ldr	r2, [pc, #404]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d70:	430b      	orrs	r3, r1
 8005d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d74:	e003      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	d051      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005da8:	d035      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dae:	d82e      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005db4:	d031      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dba:	d828      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc0:	d01a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc6:	d822      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd0:	d007      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005dd2:	e01c      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005de0:	e01c      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	3308      	adds	r3, #8
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 fa6e 	bl	80072cc <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005df6:	e011      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	3328      	adds	r3, #40	@ 0x28
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fb15 	bl	8007430 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e0c:	e006      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e24:	4b37      	ldr	r3, [pc, #220]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e32:	4a34      	ldr	r2, [pc, #208]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e38:	e003      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d056      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e6c:	d033      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e72:	d82c      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e78:	d02f      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e7e:	d826      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e84:	d02b      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e8a:	d820      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e90:	d012      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e96:	d81a      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d022      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea0:	d115      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fa0e 	bl	80072cc <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	3328      	adds	r3, #40	@ 0x28
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fab5 	bl	8007430 <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ecc:	e00a      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ed6:	bf00      	nop
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005eec:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005efa:	4a02      	ldr	r2, [pc, #8]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f00:	e006      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	d055      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f3c:	d033      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f42:	d82c      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f48:	d02f      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4e:	d826      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f54:	d02b      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f5a:	d820      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f60:	d012      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f66:	d81a      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d022      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f70:	d115      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f76:	3308      	adds	r3, #8
 8005f78:	2101      	movs	r1, #1
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 f9a6 	bl	80072cc <RCCEx_PLL2_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f86:	e015      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	3328      	adds	r3, #40	@ 0x28
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fa4d 	bl	8007430 <RCCEx_PLL3_Config>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa4:	e006      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fa6:	bf00      	nop
 8005fa8:	e004      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005faa:	bf00      	nop
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fbc:	4ba3      	ldr	r3, [pc, #652]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd2:	e003      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d037      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006006:	d00e      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800600c:	d816      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006016:	d111      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006018:	4b8c      	ldr	r3, [pc, #560]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601c:	4a8b      	ldr	r2, [pc, #556]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800601e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006024:	e00f      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	3308      	adds	r3, #8
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f001 f94c 	bl	80072cc <RCCEx_PLL2_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800604e:	4b7f      	ldr	r3, [pc, #508]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605c:	4a7b      	ldr	r2, [pc, #492]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800605e:	430b      	orrs	r3, r1
 8006060:	6513      	str	r3, [r2, #80]	@ 0x50
 8006062:	e003      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006086:	460b      	mov	r3, r1
 8006088:	4313      	orrs	r3, r2
 800608a:	d039      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006092:	2b03      	cmp	r3, #3
 8006094:	d81c      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060d9 	.word	0x080060d9
 80060a0:	080060ad 	.word	0x080060ad
 80060a4:	080060bb 	.word	0x080060bb
 80060a8:	080060d9 	.word	0x080060d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ac:	4b67      	ldr	r3, [pc, #412]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4a66      	ldr	r2, [pc, #408]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060b8:	e00f      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060be:	3308      	adds	r3, #8
 80060c0:	2102      	movs	r1, #2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f902 	bl	80072cc <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060ce:	e004      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060d6:	e000      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80060d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060e2:	4b5a      	ldr	r3, [pc, #360]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e6:	f023 0103 	bic.w	r1, r3, #3
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f0:	4a56      	ldr	r2, [pc, #344]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f2:	430b      	orrs	r3, r1
 80060f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060f6:	e003      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800610c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	f000 809f 	beq.w	8006260 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006122:	4b4b      	ldr	r3, [pc, #300]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a4a      	ldr	r2, [pc, #296]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800612c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800612e:	f7fb feb1 	bl	8001e94 <HAL_GetTick>
 8006132:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006136:	e00b      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006138:	f7fb feac 	bl	8001e94 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b64      	cmp	r3, #100	@ 0x64
 8006146:	d903      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800614e:	e005      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006150:	4b3f      	ldr	r3, [pc, #252]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0ed      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800615c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006160:	2b00      	cmp	r3, #0
 8006162:	d179      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006164:	4b39      	ldr	r3, [pc, #228]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006170:	4053      	eors	r3, r2
 8006172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d015      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800617a:	4b34      	ldr	r3, [pc, #208]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006186:	4b31      	ldr	r3, [pc, #196]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618a:	4a30      	ldr	r2, [pc, #192]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006190:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006192:	4b2e      	ldr	r3, [pc, #184]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006196:	4a2d      	ldr	r2, [pc, #180]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800619e:	4a2b      	ldr	r2, [pc, #172]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b2:	d118      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fb fe6e 	bl	8001e94 <HAL_GetTick>
 80061b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061bc:	e00d      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061be:	f7fb fe69 	bl	8001e94 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061c8:	1ad2      	subs	r2, r2, r3
 80061ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d903      	bls.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80061d8:	e005      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061da:	4b1c      	ldr	r3, [pc, #112]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0eb      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80061e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d129      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061fe:	d10e      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006200:	4b12      	ldr	r3, [pc, #72]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006210:	091a      	lsrs	r2, r3, #4
 8006212:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006214:	4013      	ands	r3, r2
 8006216:	4a0d      	ldr	r2, [pc, #52]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006218:	430b      	orrs	r3, r1
 800621a:	6113      	str	r3, [r2, #16]
 800621c:	e005      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800621e:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006224:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006228:	6113      	str	r3, [r2, #16]
 800622a:	4b08      	ldr	r3, [pc, #32]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800622c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623a:	4a04      	ldr	r2, [pc, #16]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800623c:	430b      	orrs	r3, r1
 800623e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006240:	e00e      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800624a:	e009      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800624c:	58024400 	.word	0x58024400
 8006250:	58024800 	.word	0x58024800
 8006254:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 0301 	and.w	r3, r2, #1
 800626c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006270:	2300      	movs	r3, #0
 8006272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006276:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800627a:	460b      	mov	r3, r1
 800627c:	4313      	orrs	r3, r2
 800627e:	f000 8089 	beq.w	8006394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006288:	2b28      	cmp	r3, #40	@ 0x28
 800628a:	d86b      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800628c:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	0800636d 	.word	0x0800636d
 8006298:	08006365 	.word	0x08006365
 800629c:	08006365 	.word	0x08006365
 80062a0:	08006365 	.word	0x08006365
 80062a4:	08006365 	.word	0x08006365
 80062a8:	08006365 	.word	0x08006365
 80062ac:	08006365 	.word	0x08006365
 80062b0:	08006365 	.word	0x08006365
 80062b4:	08006339 	.word	0x08006339
 80062b8:	08006365 	.word	0x08006365
 80062bc:	08006365 	.word	0x08006365
 80062c0:	08006365 	.word	0x08006365
 80062c4:	08006365 	.word	0x08006365
 80062c8:	08006365 	.word	0x08006365
 80062cc:	08006365 	.word	0x08006365
 80062d0:	08006365 	.word	0x08006365
 80062d4:	0800634f 	.word	0x0800634f
 80062d8:	08006365 	.word	0x08006365
 80062dc:	08006365 	.word	0x08006365
 80062e0:	08006365 	.word	0x08006365
 80062e4:	08006365 	.word	0x08006365
 80062e8:	08006365 	.word	0x08006365
 80062ec:	08006365 	.word	0x08006365
 80062f0:	08006365 	.word	0x08006365
 80062f4:	0800636d 	.word	0x0800636d
 80062f8:	08006365 	.word	0x08006365
 80062fc:	08006365 	.word	0x08006365
 8006300:	08006365 	.word	0x08006365
 8006304:	08006365 	.word	0x08006365
 8006308:	08006365 	.word	0x08006365
 800630c:	08006365 	.word	0x08006365
 8006310:	08006365 	.word	0x08006365
 8006314:	0800636d 	.word	0x0800636d
 8006318:	08006365 	.word	0x08006365
 800631c:	08006365 	.word	0x08006365
 8006320:	08006365 	.word	0x08006365
 8006324:	08006365 	.word	0x08006365
 8006328:	08006365 	.word	0x08006365
 800632c:	08006365 	.word	0x08006365
 8006330:	08006365 	.word	0x08006365
 8006334:	0800636d 	.word	0x0800636d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	3308      	adds	r3, #8
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f000 ffc3 	bl	80072cc <RCCEx_PLL2_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800634c:	e00f      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006352:	3328      	adds	r3, #40	@ 0x28
 8006354:	2101      	movs	r1, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f001 f86a 	bl	8007430 <RCCEx_PLL3_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006376:	4bbf      	ldr	r3, [pc, #764]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006384:	4abb      	ldr	r2, [pc, #748]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6553      	str	r3, [r2, #84]	@ 0x54
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f002 0302 	and.w	r3, r2, #2
 80063a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d041      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ba:	2b05      	cmp	r3, #5
 80063bc:	d824      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80063be:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	08006411 	.word	0x08006411
 80063c8:	080063dd 	.word	0x080063dd
 80063cc:	080063f3 	.word	0x080063f3
 80063d0:	08006411 	.word	0x08006411
 80063d4:	08006411 	.word	0x08006411
 80063d8:	08006411 	.word	0x08006411
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e0:	3308      	adds	r3, #8
 80063e2:	2101      	movs	r1, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 ff71 	bl	80072cc <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80063f0:	e00f      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	3328      	adds	r3, #40	@ 0x28
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f818 	bl	8007430 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800641a:	4b96      	ldr	r3, [pc, #600]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800641c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641e:	f023 0107 	bic.w	r1, r3, #7
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006428:	4a92      	ldr	r2, [pc, #584]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6553      	str	r3, [r2, #84]	@ 0x54
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f002 0304 	and.w	r3, r2, #4
 8006444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800644e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d044      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006460:	2b05      	cmp	r3, #5
 8006462:	d825      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006464:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	080064b9 	.word	0x080064b9
 8006470:	08006485 	.word	0x08006485
 8006474:	0800649b 	.word	0x0800649b
 8006478:	080064b9 	.word	0x080064b9
 800647c:	080064b9 	.word	0x080064b9
 8006480:	080064b9 	.word	0x080064b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	3308      	adds	r3, #8
 800648a:	2101      	movs	r1, #1
 800648c:	4618      	mov	r0, r3
 800648e:	f000 ff1d 	bl	80072cc <RCCEx_PLL2_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006498:	e00f      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649e:	3328      	adds	r3, #40	@ 0x28
 80064a0:	2101      	movs	r1, #1
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 ffc4 	bl	8007430 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	f023 0107 	bic.w	r1, r3, #7
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064d2:	4a68      	ldr	r2, [pc, #416]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f002 0320 	and.w	r3, r2, #32
 80064ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064fc:	460b      	mov	r3, r1
 80064fe:	4313      	orrs	r3, r2
 8006500:	d055      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800650e:	d033      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006514:	d82c      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651a:	d02f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006520:	d826      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006526:	d02b      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006528:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800652c:	d820      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800652e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006532:	d012      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006538:	d81a      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d022      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800653e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006542:	d115      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	3308      	adds	r3, #8
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f000 febd 	bl	80072cc <RCCEx_PLL2_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006558:	e015      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	3328      	adds	r3, #40	@ 0x28
 8006560:	2102      	movs	r1, #2
 8006562:	4618      	mov	r0, r3
 8006564:	f000 ff64 	bl	8007430 <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800656e:	e00a      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006576:	e006      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800658e:	4b39      	ldr	r3, [pc, #228]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006592:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659e:	4a35      	ldr	r2, [pc, #212]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065be:	2300      	movs	r3, #0
 80065c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d058      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065da:	d033      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065e0:	d82c      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e6:	d02f      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ec:	d826      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f2:	d02b      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80065f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065f8:	d820      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065fe:	d012      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006604:	d81a      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d022      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800660a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660e:	d115      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	3308      	adds	r3, #8
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fe57 	bl	80072cc <RCCEx_PLL2_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006624:	e015      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	3328      	adds	r3, #40	@ 0x28
 800662c:	2102      	movs	r1, #2
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fefe 	bl	8007430 <RCCEx_PLL3_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800663a:	e00a      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006642:	e006      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006644:	bf00      	nop
 8006646:	e004      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006648:	bf00      	nop
 800664a:	e002      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800664c:	bf00      	nop
 800664e:	e000      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10e      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800665a:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800665c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800666a:	4a02      	ldr	r2, [pc, #8]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800666c:	430b      	orrs	r3, r1
 800666e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006672:	bf00      	nop
 8006674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800667c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800668c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006690:	2300      	movs	r3, #0
 8006692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006696:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800669a:	460b      	mov	r3, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	d055      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066ac:	d033      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80066ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066b2:	d82c      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b8:	d02f      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80066ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066be:	d826      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066c4:	d02b      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80066c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066ca:	d820      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066d0:	d012      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80066d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066d6:	d81a      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d022      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e0:	d115      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	3308      	adds	r3, #8
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fdee 	bl	80072cc <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80066f6:	e015      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	3328      	adds	r3, #40	@ 0x28
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fe95 	bl	8007430 <RCCEx_PLL3_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800670c:	e00a      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006714:	e006      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006716:	bf00      	nop
 8006718:	e004      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800671a:	bf00      	nop
 800671c:	e002      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800671e:	bf00      	nop
 8006720:	e000      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800672c:	4ba1      	ldr	r3, [pc, #644]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800672e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006730:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800673c:	4a9d      	ldr	r2, [pc, #628]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800673e:	430b      	orrs	r3, r1
 8006740:	6593      	str	r3, [r2, #88]	@ 0x58
 8006742:	e003      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f002 0308 	and.w	r3, r2, #8
 8006758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800675c:	2300      	movs	r3, #0
 800675e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006762:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006766:	460b      	mov	r3, r1
 8006768:	4313      	orrs	r3, r2
 800676a:	d01e      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006778:	d10c      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	3328      	adds	r3, #40	@ 0x28
 8006780:	2102      	movs	r1, #2
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fe54 	bl	8007430 <RCCEx_PLL3_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006794:	4b87      	ldr	r3, [pc, #540]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a4:	4a83      	ldr	r2, [pc, #524]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067a6:	430b      	orrs	r3, r1
 80067a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f002 0310 	and.w	r3, r2, #16
 80067b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067ba:	2300      	movs	r3, #0
 80067bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067c4:	460b      	mov	r3, r1
 80067c6:	4313      	orrs	r3, r2
 80067c8:	d01e      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d6:	d10c      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	3328      	adds	r3, #40	@ 0x28
 80067de:	2102      	movs	r1, #2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fe25 	bl	8007430 <RCCEx_PLL3_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067f2:	4b70      	ldr	r3, [pc, #448]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006802:	4a6c      	ldr	r2, [pc, #432]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006814:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800681e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d03e      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006834:	d022      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800683a:	d81b      	bhi.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006844:	d00b      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006846:	e015      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	3308      	adds	r3, #8
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fd3b 	bl	80072cc <RCCEx_PLL2_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800685c:	e00f      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	3328      	adds	r3, #40	@ 0x28
 8006864:	2102      	movs	r1, #2
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fde2 	bl	8007430 <RCCEx_PLL3_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006872:	e004      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800687a:	e000      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800687c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006886:	4b4b      	ldr	r3, [pc, #300]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006896:	4a47      	ldr	r2, [pc, #284]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006898:	430b      	orrs	r3, r1
 800689a:	6593      	str	r3, [r2, #88]	@ 0x58
 800689c:	e003      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80068b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068b4:	2300      	movs	r3, #0
 80068b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068ce:	d01f      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80068d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068d4:	d818      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068da:	d003      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80068dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068e0:	d007      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80068e2:	e011      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e4:	4b33      	ldr	r3, [pc, #204]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	4a32      	ldr	r2, [pc, #200]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80068f0:	e00f      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	3328      	adds	r3, #40	@ 0x28
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fd98 	bl	8007430 <RCCEx_PLL3_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006906:	e004      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800691a:	4b26      	ldr	r3, [pc, #152]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	4a22      	ldr	r2, [pc, #136]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800692c:	430b      	orrs	r3, r1
 800692e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006930:	e003      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006946:	673b      	str	r3, [r7, #112]	@ 0x70
 8006948:	2300      	movs	r3, #0
 800694a:	677b      	str	r3, [r7, #116]	@ 0x74
 800694c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006950:	460b      	mov	r3, r1
 8006952:	4313      	orrs	r3, r2
 8006954:	d034      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006964:	d007      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006966:	e011      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006968:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	4a11      	ldr	r2, [pc, #68]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800696e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006974:	e00e      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	3308      	adds	r3, #8
 800697c:	2102      	movs	r1, #2
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fca4 	bl	80072cc <RCCEx_PLL2_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800698a:	e003      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10d      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069aa:	4a02      	ldr	r2, [pc, #8]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ac:	430b      	orrs	r3, r1
 80069ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069b0:	e006      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80069b2:	bf00      	nop
 80069b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80069cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ce:	2300      	movs	r3, #0
 80069d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d00c      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e0:	3328      	adds	r3, #40	@ 0x28
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fd23 	bl	8007430 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a04:	2300      	movs	r3, #0
 8006a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d038      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a1e:	d018      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a24:	d811      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2a:	d014      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a30:	d80b      	bhi.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3a:	d106      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a3c:	4bc3      	ldr	r3, [pc, #780]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a40:	4ac2      	ldr	r2, [pc, #776]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a48:	e008      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a50:	e004      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a52:	bf00      	nop
 8006a54:	e002      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10b      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a64:	4bb9      	ldr	r3, [pc, #740]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a74:	4ab5      	ldr	r2, [pc, #724]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a76:	430b      	orrs	r3, r1
 8006a78:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a7a:	e003      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a92:	2300      	movs	r3, #0
 8006a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006aa0:	4baa      	ldr	r3, [pc, #680]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aae:	4aa7      	ldr	r2, [pc, #668]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ac6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006aca:	460b      	mov	r3, r1
 8006acc:	4313      	orrs	r3, r2
 8006ace:	d00a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ad0:	4b9e      	ldr	r3, [pc, #632]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ae0:	4a9a      	ldr	r2, [pc, #616]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af4:	2300      	movs	r3, #0
 8006af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006afc:	460b      	mov	r3, r1
 8006afe:	4313      	orrs	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b02:	4b92      	ldr	r3, [pc, #584]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b10:	4a8e      	ldr	r2, [pc, #568]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b24:	2300      	movs	r3, #0
 8006b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	d00e      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b32:	4b86      	ldr	r3, [pc, #536]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	4a85      	ldr	r2, [pc, #532]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b3c:	6113      	str	r3, [r2, #16]
 8006b3e:	4b83      	ldr	r3, [pc, #524]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b40:	6919      	ldr	r1, [r3, #16]
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b4a:	4a80      	ldr	r2, [pc, #512]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b66:	460b      	mov	r3, r1
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b6c:	4b77      	ldr	r3, [pc, #476]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7a:	4a74      	ldr	r2, [pc, #464]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b96:	460b      	mov	r3, r1
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	d00a      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bac:	4a67      	ldr	r2, [pc, #412]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	2100      	movs	r1, #0
 8006bbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d011      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fb78 	bl	80072cc <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6239      	str	r1, [r7, #32]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	d011      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c12:	3308      	adds	r3, #8
 8006c14:	2101      	movs	r1, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fb58 	bl	80072cc <RCCEx_PLL2_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	61b9      	str	r1, [r7, #24]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	d011      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	3308      	adds	r3, #8
 8006c54:	2102      	movs	r1, #2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fb38 	bl	80072cc <RCCEx_PLL2_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	6139      	str	r1, [r7, #16]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	d011      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	3328      	adds	r3, #40	@ 0x28
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fbca 	bl	8007430 <RCCEx_PLL3_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	d011      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	3328      	adds	r3, #40	@ 0x28
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fbaa 	bl	8007430 <RCCEx_PLL3_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d011      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	3328      	adds	r3, #40	@ 0x28
 8006d14:	2102      	movs	r1, #2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fb8a 	bl	8007430 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006d46:	46bd      	mov	sp, r7
 8006d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4c:	58024400 	.word	0x58024400

08006d50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d54:	f7fe fd96 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	4b06      	ldr	r3, [pc, #24]	@ (8006d74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	091b      	lsrs	r3, r3, #4
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	4904      	ldr	r1, [pc, #16]	@ (8006d78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d66:	5ccb      	ldrb	r3, [r1, r3]
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	58024400 	.word	0x58024400
 8006d78:	0800fad0 	.word	0x0800fad0

08006d7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	@ 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d84:	4ba1      	ldr	r3, [pc, #644]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d8e:	4b9f      	ldr	r3, [pc, #636]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	0b1b      	lsrs	r3, r3, #12
 8006d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d9a:	4b9c      	ldr	r3, [pc, #624]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	091b      	lsrs	r3, r3, #4
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006da6:	4b99      	ldr	r3, [pc, #612]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006daa:	08db      	lsrs	r3, r3, #3
 8006dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	fb02 f303 	mul.w	r3, r2, r3
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8111 	beq.w	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	f000 8083 	beq.w	8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	f200 80a1 	bhi.w	8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d056      	beq.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006de6:	e099      	b.n	8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006de8:	4b88      	ldr	r3, [pc, #544]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02d      	beq.n	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006df4:	4b85      	ldr	r3, [pc, #532]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	08db      	lsrs	r3, r3, #3
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	4a84      	ldr	r2, [pc, #528]	@ (8007010 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e00:	fa22 f303 	lsr.w	r3, r2, r3
 8006e04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	ee07 3a90 	vmov	s15, r3
 8006e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e4e:	e087      	b.n	8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b6a      	ldr	r3, [pc, #424]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e92:	e065      	b.n	8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800701c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea6:	4b59      	ldr	r3, [pc, #356]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ed6:	e043      	b.n	8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eea:	4b48      	ldr	r3, [pc, #288]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1a:	e021      	b.n	8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800701c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b37      	ldr	r3, [pc, #220]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f60:	4b2a      	ldr	r3, [pc, #168]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f64:	0a5b      	lsrs	r3, r3, #9
 8006f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f86:	ee17 2a90 	vmov	r2, s15
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f92:	0c1b      	lsrs	r3, r3, #16
 8006f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb4:	ee17 2a90 	vmov	r2, s15
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006fbc:	4b13      	ldr	r3, [pc, #76]	@ (800700c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc0:	0e1b      	lsrs	r3, r3, #24
 8006fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe2:	ee17 2a90 	vmov	r2, s15
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fea:	e008      	b.n	8006ffe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	609a      	str	r2, [r3, #8]
}
 8006ffe:	bf00      	nop
 8007000:	3724      	adds	r7, #36	@ 0x24
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	58024400 	.word	0x58024400
 8007010:	03d09000 	.word	0x03d09000
 8007014:	46000000 	.word	0x46000000
 8007018:	4c742400 	.word	0x4c742400
 800701c:	4a742400 	.word	0x4a742400
 8007020:	4bbebc20 	.word	0x4bbebc20

08007024 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007024:	b480      	push	{r7}
 8007026:	b089      	sub	sp, #36	@ 0x24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800702c:	4ba1      	ldr	r3, [pc, #644]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007036:	4b9f      	ldr	r3, [pc, #636]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	0d1b      	lsrs	r3, r3, #20
 800703c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007040:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007042:	4b9c      	ldr	r3, [pc, #624]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800704e:	4b99      	ldr	r3, [pc, #612]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8111 	beq.w	8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f000 8083 	beq.w	8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b02      	cmp	r3, #2
 800707e:	f200 80a1 	bhi.w	80071c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d056      	beq.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800708e:	e099      	b.n	80071c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007090:	4b88      	ldr	r3, [pc, #544]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02d      	beq.n	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800709c:	4b85      	ldr	r3, [pc, #532]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	08db      	lsrs	r3, r3, #3
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	4a84      	ldr	r2, [pc, #528]	@ (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b7b      	ldr	r3, [pc, #492]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070f6:	e087      	b.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b6a      	ldr	r3, [pc, #424]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a03 	vldr	s12, [r7, #12]
 800711e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713a:	e065      	b.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b59      	ldr	r3, [pc, #356]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007162:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717e:	e043      	b.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b48      	ldr	r3, [pc, #288]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c2:	e021      	b.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b37      	ldr	r3, [pc, #220]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007206:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007208:	4b2a      	ldr	r3, [pc, #168]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720c:	0a5b      	lsrs	r3, r3, #9
 800720e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800721e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007222:	edd7 6a07 	vldr	s13, [r7, #28]
 8007226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722e:	ee17 2a90 	vmov	r2, s15
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007236:	4b1f      	ldr	r3, [pc, #124]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800724c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007250:	edd7 6a07 	vldr	s13, [r7, #28]
 8007254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725c:	ee17 2a90 	vmov	r2, s15
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007264:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007268:	0e1b      	lsrs	r3, r3, #24
 800726a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800727a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800727e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728a:	ee17 2a90 	vmov	r2, s15
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007292:	e008      	b.n	80072a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	bf00      	nop
 80072a8:	3724      	adds	r7, #36	@ 0x24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
 80072b8:	03d09000 	.word	0x03d09000
 80072bc:	46000000 	.word	0x46000000
 80072c0:	4c742400 	.word	0x4c742400
 80072c4:	4a742400 	.word	0x4a742400
 80072c8:	4bbebc20 	.word	0x4bbebc20

080072cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072da:	4b53      	ldr	r3, [pc, #332]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d101      	bne.n	80072ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e099      	b.n	800741e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4e      	ldr	r2, [pc, #312]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80072f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f6:	f7fa fdcd 	bl	8001e94 <HAL_GetTick>
 80072fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072fc:	e008      	b.n	8007310 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072fe:	f7fa fdc9 	bl	8001e94 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e086      	b.n	800741e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007310:	4b45      	ldr	r3, [pc, #276]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f0      	bne.n	80072fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800731c:	4b42      	ldr	r3, [pc, #264]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 800731e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007320:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	031b      	lsls	r3, r3, #12
 800732a:	493f      	ldr	r1, [pc, #252]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 800732c:	4313      	orrs	r3, r2
 800732e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	3b01      	subs	r3, #1
 8007340:	025b      	lsls	r3, r3, #9
 8007342:	b29b      	uxth	r3, r3
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	3b01      	subs	r3, #1
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	3b01      	subs	r3, #1
 800735a:	061b      	lsls	r3, r3, #24
 800735c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007360:	4931      	ldr	r1, [pc, #196]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007366:	4b30      	ldr	r3, [pc, #192]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	492d      	ldr	r1, [pc, #180]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007378:	4b2b      	ldr	r3, [pc, #172]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 800737a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737c:	f023 0220 	bic.w	r2, r3, #32
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	4928      	ldr	r1, [pc, #160]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	4a26      	ldr	r2, [pc, #152]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007396:	4b24      	ldr	r3, [pc, #144]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800739a:	4b24      	ldr	r3, [pc, #144]	@ (800742c <RCCEx_PLL2_Config+0x160>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	69d2      	ldr	r2, [r2, #28]
 80073a2:	00d2      	lsls	r2, r2, #3
 80073a4:	4920      	ldr	r1, [pc, #128]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073b0:	f043 0310 	orr.w	r3, r3, #16
 80073b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073c8:	e00f      	b.n	80073ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d106      	bne.n	80073de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073d0:	4b15      	ldr	r3, [pc, #84]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	4a14      	ldr	r2, [pc, #80]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073dc:	e005      	b.n	80073ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073de:	4b12      	ldr	r3, [pc, #72]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	4a11      	ldr	r2, [pc, #68]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f6:	f7fa fd4d 	bl	8001e94 <HAL_GetTick>
 80073fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073fc:	e008      	b.n	8007410 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073fe:	f7fa fd49 	bl	8001e94 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e006      	b.n	800741e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007410:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0f0      	beq.n	80073fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	58024400 	.word	0x58024400
 800742c:	ffff0007 	.word	0xffff0007

08007430 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800743e:	4b53      	ldr	r3, [pc, #332]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d101      	bne.n	800744e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e099      	b.n	8007582 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800744e:	4b4f      	ldr	r3, [pc, #316]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a4e      	ldr	r2, [pc, #312]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745a:	f7fa fd1b 	bl	8001e94 <HAL_GetTick>
 800745e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007460:	e008      	b.n	8007474 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007462:	f7fa fd17 	bl	8001e94 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e086      	b.n	8007582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007474:	4b45      	ldr	r3, [pc, #276]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f0      	bne.n	8007462 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007480:	4b42      	ldr	r3, [pc, #264]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007484:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	051b      	lsls	r3, r3, #20
 800748e:	493f      	ldr	r1, [pc, #252]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007490:	4313      	orrs	r3, r2
 8007492:	628b      	str	r3, [r1, #40]	@ 0x28
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	025b      	lsls	r3, r3, #9
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	3b01      	subs	r3, #1
 80074be:	061b      	lsls	r3, r3, #24
 80074c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074c4:	4931      	ldr	r1, [pc, #196]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074ca:	4b30      	ldr	r3, [pc, #192]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	492d      	ldr	r1, [pc, #180]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074dc:	4b2b      	ldr	r3, [pc, #172]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	4928      	ldr	r1, [pc, #160]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074ee:	4b27      	ldr	r3, [pc, #156]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f2:	4a26      	ldr	r2, [pc, #152]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074fa:	4b24      	ldr	r3, [pc, #144]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 80074fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074fe:	4b24      	ldr	r3, [pc, #144]	@ (8007590 <RCCEx_PLL3_Config+0x160>)
 8007500:	4013      	ands	r3, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	69d2      	ldr	r2, [r2, #28]
 8007506:	00d2      	lsls	r2, r2, #3
 8007508:	4920      	ldr	r1, [pc, #128]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800750e:	4b1f      	ldr	r3, [pc, #124]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	4a1e      	ldr	r2, [pc, #120]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007518:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007520:	4b1a      	ldr	r3, [pc, #104]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a19      	ldr	r2, [pc, #100]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007526:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800752a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800752c:	e00f      	b.n	800754e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d106      	bne.n	8007542 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007534:	4b15      	ldr	r3, [pc, #84]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	4a14      	ldr	r2, [pc, #80]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 800753a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800753e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007540:	e005      	b.n	800754e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007542:	4b12      	ldr	r3, [pc, #72]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a11      	ldr	r2, [pc, #68]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007548:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800754c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800754e:	4b0f      	ldr	r3, [pc, #60]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a0e      	ldr	r2, [pc, #56]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755a:	f7fa fc9b 	bl	8001e94 <HAL_GetTick>
 800755e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007560:	e008      	b.n	8007574 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007562:	f7fa fc97 	bl	8001e94 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e006      	b.n	8007582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007574:	4b05      	ldr	r3, [pc, #20]	@ (800758c <RCCEx_PLL3_Config+0x15c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	58024400 	.word	0x58024400
 8007590:	ffff0007 	.word	0xffff0007

08007594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e049      	b.n	800763a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fa fa72 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f000 fe56 	bl	8008284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d001      	beq.n	800765c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e04c      	b.n	80076f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a26      	ldr	r2, [pc, #152]	@ (8007704 <HAL_TIM_Base_Start+0xc0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d022      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007676:	d01d      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a22      	ldr	r2, [pc, #136]	@ (8007708 <HAL_TIM_Base_Start+0xc4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d018      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a21      	ldr	r2, [pc, #132]	@ (800770c <HAL_TIM_Base_Start+0xc8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d013      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a1f      	ldr	r2, [pc, #124]	@ (8007710 <HAL_TIM_Base_Start+0xcc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00e      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1e      	ldr	r2, [pc, #120]	@ (8007714 <HAL_TIM_Base_Start+0xd0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d009      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007718 <HAL_TIM_Base_Start+0xd4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d004      	beq.n	80076b4 <HAL_TIM_Base_Start+0x70>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <HAL_TIM_Base_Start+0xd8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d115      	bne.n	80076e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	4b19      	ldr	r3, [pc, #100]	@ (8007720 <HAL_TIM_Base_Start+0xdc>)
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b06      	cmp	r3, #6
 80076c4:	d015      	beq.n	80076f2 <HAL_TIM_Base_Start+0xae>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076cc:	d011      	beq.n	80076f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0201 	orr.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076de:	e008      	b.n	80076f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e000      	b.n	80076f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40010000 	.word	0x40010000
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
 8007710:	40000c00 	.word	0x40000c00
 8007714:	40010400 	.word	0x40010400
 8007718:	40001800 	.word	0x40001800
 800771c:	40014000 	.word	0x40014000
 8007720:	00010007 	.word	0x00010007

08007724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	d001      	beq.n	800773c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e054      	b.n	80077e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0201 	orr.w	r2, r2, #1
 8007752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a26      	ldr	r2, [pc, #152]	@ (80077f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d022      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007766:	d01d      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a22      	ldr	r2, [pc, #136]	@ (80077f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d018      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a21      	ldr	r2, [pc, #132]	@ (80077fc <HAL_TIM_Base_Start_IT+0xd8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d013      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1f      	ldr	r2, [pc, #124]	@ (8007800 <HAL_TIM_Base_Start_IT+0xdc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00e      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1e      	ldr	r2, [pc, #120]	@ (8007804 <HAL_TIM_Base_Start_IT+0xe0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1c      	ldr	r2, [pc, #112]	@ (8007808 <HAL_TIM_Base_Start_IT+0xe4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x80>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1b      	ldr	r2, [pc, #108]	@ (800780c <HAL_TIM_Base_Start_IT+0xe8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d115      	bne.n	80077d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <HAL_TIM_Base_Start_IT+0xec>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d015      	beq.n	80077e2 <HAL_TIM_Base_Start_IT+0xbe>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077bc:	d011      	beq.n	80077e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0201 	orr.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ce:	e008      	b.n	80077e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e000      	b.n	80077e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40010400 	.word	0x40010400
 8007808:	40001800 	.word	0x40001800
 800780c:	40014000 	.word	0x40014000
 8007810:	00010007 	.word	0x00010007

08007814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e049      	b.n	80078ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fa f958 	bl	8001af0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3304      	adds	r3, #4
 8007850:	4619      	mov	r1, r3
 8007852:	4610      	mov	r0, r2
 8007854:	f000 fd16 	bl	8008284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d109      	bne.n	80078e8 <HAL_TIM_PWM_Start+0x24>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	bf14      	ite	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	2300      	moveq	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	e03c      	b.n	8007962 <HAL_TIM_PWM_Start+0x9e>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d109      	bne.n	8007902 <HAL_TIM_PWM_Start+0x3e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	bf14      	ite	ne
 80078fa:	2301      	movne	r3, #1
 80078fc:	2300      	moveq	r3, #0
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	e02f      	b.n	8007962 <HAL_TIM_PWM_Start+0x9e>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b08      	cmp	r3, #8
 8007906:	d109      	bne.n	800791c <HAL_TIM_PWM_Start+0x58>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	bf14      	ite	ne
 8007914:	2301      	movne	r3, #1
 8007916:	2300      	moveq	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	e022      	b.n	8007962 <HAL_TIM_PWM_Start+0x9e>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b0c      	cmp	r3, #12
 8007920:	d109      	bne.n	8007936 <HAL_TIM_PWM_Start+0x72>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b01      	cmp	r3, #1
 800792c:	bf14      	ite	ne
 800792e:	2301      	movne	r3, #1
 8007930:	2300      	moveq	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	e015      	b.n	8007962 <HAL_TIM_PWM_Start+0x9e>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b10      	cmp	r3, #16
 800793a:	d109      	bne.n	8007950 <HAL_TIM_PWM_Start+0x8c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	bf14      	ite	ne
 8007948:	2301      	movne	r3, #1
 800794a:	2300      	moveq	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e008      	b.n	8007962 <HAL_TIM_PWM_Start+0x9e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	bf14      	ite	ne
 800795c:	2301      	movne	r3, #1
 800795e:	2300      	moveq	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e0a1      	b.n	8007aae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <HAL_TIM_PWM_Start+0xb6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007978:	e023      	b.n	80079c2 <HAL_TIM_PWM_Start+0xfe>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start+0xc6>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007988:	e01b      	b.n	80079c2 <HAL_TIM_PWM_Start+0xfe>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d104      	bne.n	800799a <HAL_TIM_PWM_Start+0xd6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007998:	e013      	b.n	80079c2 <HAL_TIM_PWM_Start+0xfe>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b0c      	cmp	r3, #12
 800799e:	d104      	bne.n	80079aa <HAL_TIM_PWM_Start+0xe6>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079a8:	e00b      	b.n	80079c2 <HAL_TIM_PWM_Start+0xfe>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	d104      	bne.n	80079ba <HAL_TIM_PWM_Start+0xf6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079b8:	e003      	b.n	80079c2 <HAL_TIM_PWM_Start+0xfe>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2201      	movs	r2, #1
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 f874 	bl	8008ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a38      	ldr	r2, [pc, #224]	@ (8007ab8 <HAL_TIM_PWM_Start+0x1f4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d013      	beq.n	8007a02 <HAL_TIM_PWM_Start+0x13e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a37      	ldr	r2, [pc, #220]	@ (8007abc <HAL_TIM_PWM_Start+0x1f8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00e      	beq.n	8007a02 <HAL_TIM_PWM_Start+0x13e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a35      	ldr	r2, [pc, #212]	@ (8007ac0 <HAL_TIM_PWM_Start+0x1fc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d009      	beq.n	8007a02 <HAL_TIM_PWM_Start+0x13e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a34      	ldr	r2, [pc, #208]	@ (8007ac4 <HAL_TIM_PWM_Start+0x200>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d004      	beq.n	8007a02 <HAL_TIM_PWM_Start+0x13e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a32      	ldr	r2, [pc, #200]	@ (8007ac8 <HAL_TIM_PWM_Start+0x204>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d101      	bne.n	8007a06 <HAL_TIM_PWM_Start+0x142>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <HAL_TIM_PWM_Start+0x144>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a25      	ldr	r2, [pc, #148]	@ (8007ab8 <HAL_TIM_PWM_Start+0x1f4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d022      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a2e:	d01d      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a25      	ldr	r2, [pc, #148]	@ (8007acc <HAL_TIM_PWM_Start+0x208>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d018      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a24      	ldr	r2, [pc, #144]	@ (8007ad0 <HAL_TIM_PWM_Start+0x20c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a22      	ldr	r2, [pc, #136]	@ (8007ad4 <HAL_TIM_PWM_Start+0x210>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1a      	ldr	r2, [pc, #104]	@ (8007abc <HAL_TIM_PWM_Start+0x1f8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d009      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad8 <HAL_TIM_PWM_Start+0x214>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <HAL_TIM_PWM_Start+0x1a8>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a16      	ldr	r2, [pc, #88]	@ (8007ac0 <HAL_TIM_PWM_Start+0x1fc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d115      	bne.n	8007a98 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	4b1a      	ldr	r3, [pc, #104]	@ (8007adc <HAL_TIM_PWM_Start+0x218>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b06      	cmp	r3, #6
 8007a7c:	d015      	beq.n	8007aaa <HAL_TIM_PWM_Start+0x1e6>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a84:	d011      	beq.n	8007aaa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0201 	orr.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a96:	e008      	b.n	8007aaa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e000      	b.n	8007aac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40010400 	.word	0x40010400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40014400 	.word	0x40014400
 8007ac8:	40014800 	.word	0x40014800
 8007acc:	40000400 	.word	0x40000400
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	40000c00 	.word	0x40000c00
 8007ad8:	40001800 	.word	0x40001800
 8007adc:	00010007 	.word	0x00010007

08007ae0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2200      	movs	r2, #0
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 ffe0 	bl	8008ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf8 <HAL_TIM_PWM_Stop+0x118>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_TIM_PWM_Stop+0x4a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a3d      	ldr	r2, [pc, #244]	@ (8007bfc <HAL_TIM_PWM_Stop+0x11c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_TIM_PWM_Stop+0x4a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a3b      	ldr	r2, [pc, #236]	@ (8007c00 <HAL_TIM_PWM_Stop+0x120>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_TIM_PWM_Stop+0x4a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8007c04 <HAL_TIM_PWM_Stop+0x124>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_TIM_PWM_Stop+0x4a>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a38      	ldr	r2, [pc, #224]	@ (8007c08 <HAL_TIM_PWM_Stop+0x128>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <HAL_TIM_PWM_Stop+0x4e>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_TIM_PWM_Stop+0x50>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d017      	beq.n	8007b64 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10f      	bne.n	8007b64 <HAL_TIM_PWM_Stop+0x84>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6a1a      	ldr	r2, [r3, #32]
 8007b4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d107      	bne.n	8007b64 <HAL_TIM_PWM_Stop+0x84>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <HAL_TIM_PWM_Stop+0xb4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6a1a      	ldr	r2, [r3, #32]
 8007b7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <HAL_TIM_PWM_Stop+0xb4>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0201 	bic.w	r2, r2, #1
 8007b92:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d104      	bne.n	8007ba4 <HAL_TIM_PWM_Stop+0xc4>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ba2:	e023      	b.n	8007bec <HAL_TIM_PWM_Stop+0x10c>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d104      	bne.n	8007bb4 <HAL_TIM_PWM_Stop+0xd4>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bb2:	e01b      	b.n	8007bec <HAL_TIM_PWM_Stop+0x10c>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d104      	bne.n	8007bc4 <HAL_TIM_PWM_Stop+0xe4>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc2:	e013      	b.n	8007bec <HAL_TIM_PWM_Stop+0x10c>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b0c      	cmp	r3, #12
 8007bc8:	d104      	bne.n	8007bd4 <HAL_TIM_PWM_Stop+0xf4>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bd2:	e00b      	b.n	8007bec <HAL_TIM_PWM_Stop+0x10c>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d104      	bne.n	8007be4 <HAL_TIM_PWM_Stop+0x104>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007be2:	e003      	b.n	8007bec <HAL_TIM_PWM_Stop+0x10c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	40014000 	.word	0x40014000
 8007c04:	40014400 	.word	0x40014400
 8007c08:	40014800 	.word	0x40014800

08007c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d020      	beq.n	8007c70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01b      	beq.n	8007c70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0202 	mvn.w	r2, #2
 8007c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 faf6 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007c5c:	e005      	b.n	8007c6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fae8 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 faf9 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d020      	beq.n	8007cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01b      	beq.n	8007cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0204 	mvn.w	r2, #4
 8007c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fad0 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007ca8:	e005      	b.n	8007cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fac2 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fad3 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d020      	beq.n	8007d08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01b      	beq.n	8007d08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0208 	mvn.w	r2, #8
 8007cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 faaa 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007cf4:	e005      	b.n	8007d02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa9c 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 faad 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d020      	beq.n	8007d54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01b      	beq.n	8007d54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0210 	mvn.w	r2, #16
 8007d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2208      	movs	r2, #8
 8007d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa84 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa76 	bl	8008234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa87 	bl	800825c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00c      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0201 	mvn.w	r2, #1
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7f9 fa92 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00c      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 ff47 	bl	8008c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00c      	beq.n	8007dca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 ff3f 	bl	8008c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00c      	beq.n	8007dee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa41 	bl	8008270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00c      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d007      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f06f 0220 	mvn.w	r2, #32
 8007e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 ff07 	bl	8008c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e0ff      	b.n	800803a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b14      	cmp	r3, #20
 8007e46:	f200 80f0 	bhi.w	800802a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007ea5 	.word	0x08007ea5
 8007e54:	0800802b 	.word	0x0800802b
 8007e58:	0800802b 	.word	0x0800802b
 8007e5c:	0800802b 	.word	0x0800802b
 8007e60:	08007ee5 	.word	0x08007ee5
 8007e64:	0800802b 	.word	0x0800802b
 8007e68:	0800802b 	.word	0x0800802b
 8007e6c:	0800802b 	.word	0x0800802b
 8007e70:	08007f27 	.word	0x08007f27
 8007e74:	0800802b 	.word	0x0800802b
 8007e78:	0800802b 	.word	0x0800802b
 8007e7c:	0800802b 	.word	0x0800802b
 8007e80:	08007f67 	.word	0x08007f67
 8007e84:	0800802b 	.word	0x0800802b
 8007e88:	0800802b 	.word	0x0800802b
 8007e8c:	0800802b 	.word	0x0800802b
 8007e90:	08007fa9 	.word	0x08007fa9
 8007e94:	0800802b 	.word	0x0800802b
 8007e98:	0800802b 	.word	0x0800802b
 8007e9c:	0800802b 	.word	0x0800802b
 8007ea0:	08007fe9 	.word	0x08007fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fa90 	bl	80083d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0208 	orr.w	r2, r2, #8
 8007ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0204 	bic.w	r2, r2, #4
 8007ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6999      	ldr	r1, [r3, #24]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	619a      	str	r2, [r3, #24]
      break;
 8007ee2:	e0a5      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fb00 	bl	80084f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6999      	ldr	r1, [r3, #24]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	021a      	lsls	r2, r3, #8
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	619a      	str	r2, [r3, #24]
      break;
 8007f24:	e084      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fb69 	bl	8008604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0208 	orr.w	r2, r2, #8
 8007f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0204 	bic.w	r2, r2, #4
 8007f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69d9      	ldr	r1, [r3, #28]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	61da      	str	r2, [r3, #28]
      break;
 8007f64:	e064      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fbd1 	bl	8008714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69da      	ldr	r2, [r3, #28]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69d9      	ldr	r1, [r3, #28]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	021a      	lsls	r2, r3, #8
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	61da      	str	r2, [r3, #28]
      break;
 8007fa6:	e043      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fc1a 	bl	80087e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0208 	orr.w	r2, r2, #8
 8007fc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0204 	bic.w	r2, r2, #4
 8007fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007fe6:	e023      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fc5e 	bl	80088b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008002:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008012:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	021a      	lsls	r2, r3, #8
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008028:	e002      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
      break;
 800802e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop

08008044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_TIM_ConfigClockSource+0x1c>
 800805c:	2302      	movs	r3, #2
 800805e:	e0dc      	b.n	800821a <HAL_TIM_ConfigClockSource+0x1d6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	4b6a      	ldr	r3, [pc, #424]	@ (8008224 <HAL_TIM_ConfigClockSource+0x1e0>)
 800807c:	4013      	ands	r3, r2
 800807e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a64      	ldr	r2, [pc, #400]	@ (8008228 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	f000 80a9 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 800809c:	4a62      	ldr	r2, [pc, #392]	@ (8008228 <HAL_TIM_ConfigClockSource+0x1e4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	f200 80ae 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a4:	4a61      	ldr	r2, [pc, #388]	@ (800822c <HAL_TIM_ConfigClockSource+0x1e8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f000 80a1 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 80080ac:	4a5f      	ldr	r2, [pc, #380]	@ (800822c <HAL_TIM_ConfigClockSource+0x1e8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	f200 80a6 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008230 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f000 8099 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 80080bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008230 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	f200 809e 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 80080c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080c8:	f000 8091 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 80080cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080d0:	f200 8096 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 80080d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080d8:	f000 8089 	beq.w	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 80080dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080e0:	f200 808e 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e8:	d03e      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0x124>
 80080ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ee:	f200 8087 	bhi.w	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f6:	f000 8086 	beq.w	8008206 <HAL_TIM_ConfigClockSource+0x1c2>
 80080fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080fe:	d87f      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008100:	2b70      	cmp	r3, #112	@ 0x70
 8008102:	d01a      	beq.n	800813a <HAL_TIM_ConfigClockSource+0xf6>
 8008104:	2b70      	cmp	r3, #112	@ 0x70
 8008106:	d87b      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008108:	2b60      	cmp	r3, #96	@ 0x60
 800810a:	d050      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x16a>
 800810c:	2b60      	cmp	r3, #96	@ 0x60
 800810e:	d877      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008110:	2b50      	cmp	r3, #80	@ 0x50
 8008112:	d03c      	beq.n	800818e <HAL_TIM_ConfigClockSource+0x14a>
 8008114:	2b50      	cmp	r3, #80	@ 0x50
 8008116:	d873      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008118:	2b40      	cmp	r3, #64	@ 0x40
 800811a:	d058      	beq.n	80081ce <HAL_TIM_ConfigClockSource+0x18a>
 800811c:	2b40      	cmp	r3, #64	@ 0x40
 800811e:	d86f      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008120:	2b30      	cmp	r3, #48	@ 0x30
 8008122:	d064      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008124:	2b30      	cmp	r3, #48	@ 0x30
 8008126:	d86b      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008128:	2b20      	cmp	r3, #32
 800812a:	d060      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 800812c:	2b20      	cmp	r3, #32
 800812e:	d867      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d05c      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008134:	2b10      	cmp	r3, #16
 8008136:	d05a      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0x1aa>
 8008138:	e062      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800814a:	f000 fc95 	bl	8008a78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800815c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	609a      	str	r2, [r3, #8]
      break;
 8008166:	e04f      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008178:	f000 fc7e 	bl	8008a78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689a      	ldr	r2, [r3, #8]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800818a:	609a      	str	r2, [r3, #8]
      break;
 800818c:	e03c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800819a:	461a      	mov	r2, r3
 800819c:	f000 fbee 	bl	800897c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2150      	movs	r1, #80	@ 0x50
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 fc48 	bl	8008a3c <TIM_ITRx_SetConfig>
      break;
 80081ac:	e02c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ba:	461a      	mov	r2, r3
 80081bc:	f000 fc0d 	bl	80089da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2160      	movs	r1, #96	@ 0x60
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fc38 	bl	8008a3c <TIM_ITRx_SetConfig>
      break;
 80081cc:	e01c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081da:	461a      	mov	r2, r3
 80081dc:	f000 fbce 	bl	800897c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2140      	movs	r1, #64	@ 0x40
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fc28 	bl	8008a3c <TIM_ITRx_SetConfig>
      break;
 80081ec:	e00c      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f000 fc1f 	bl	8008a3c <TIM_ITRx_SetConfig>
      break;
 80081fe:	e003      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
      break;
 8008204:	e000      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	ffceff88 	.word	0xffceff88
 8008228:	00100040 	.word	0x00100040
 800822c:	00100030 	.word	0x00100030
 8008230:	00100020 	.word	0x00100020

08008234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a46      	ldr	r2, [pc, #280]	@ (80083b0 <TIM_Base_SetConfig+0x12c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a2:	d00f      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a43      	ldr	r2, [pc, #268]	@ (80083b4 <TIM_Base_SetConfig+0x130>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00b      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a42      	ldr	r2, [pc, #264]	@ (80083b8 <TIM_Base_SetConfig+0x134>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d007      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a41      	ldr	r2, [pc, #260]	@ (80083bc <TIM_Base_SetConfig+0x138>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_Base_SetConfig+0x40>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a40      	ldr	r2, [pc, #256]	@ (80083c0 <TIM_Base_SetConfig+0x13c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d108      	bne.n	80082d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a35      	ldr	r2, [pc, #212]	@ (80083b0 <TIM_Base_SetConfig+0x12c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01f      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e4:	d01b      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a32      	ldr	r2, [pc, #200]	@ (80083b4 <TIM_Base_SetConfig+0x130>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d017      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a31      	ldr	r2, [pc, #196]	@ (80083b8 <TIM_Base_SetConfig+0x134>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a30      	ldr	r2, [pc, #192]	@ (80083bc <TIM_Base_SetConfig+0x138>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00f      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a2f      	ldr	r2, [pc, #188]	@ (80083c0 <TIM_Base_SetConfig+0x13c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00b      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a2e      	ldr	r2, [pc, #184]	@ (80083c4 <TIM_Base_SetConfig+0x140>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d007      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a2d      	ldr	r2, [pc, #180]	@ (80083c8 <TIM_Base_SetConfig+0x144>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d003      	beq.n	800831e <TIM_Base_SetConfig+0x9a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a2c      	ldr	r2, [pc, #176]	@ (80083cc <TIM_Base_SetConfig+0x148>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d108      	bne.n	8008330 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4313      	orrs	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a16      	ldr	r2, [pc, #88]	@ (80083b0 <TIM_Base_SetConfig+0x12c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00f      	beq.n	800837c <TIM_Base_SetConfig+0xf8>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a18      	ldr	r2, [pc, #96]	@ (80083c0 <TIM_Base_SetConfig+0x13c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00b      	beq.n	800837c <TIM_Base_SetConfig+0xf8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a17      	ldr	r2, [pc, #92]	@ (80083c4 <TIM_Base_SetConfig+0x140>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d007      	beq.n	800837c <TIM_Base_SetConfig+0xf8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a16      	ldr	r2, [pc, #88]	@ (80083c8 <TIM_Base_SetConfig+0x144>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_Base_SetConfig+0xf8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a15      	ldr	r2, [pc, #84]	@ (80083cc <TIM_Base_SetConfig+0x148>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d103      	bne.n	8008384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b01      	cmp	r3, #1
 8008394:	d105      	bne.n	80083a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f023 0201 	bic.w	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	611a      	str	r2, [r3, #16]
  }
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40000400 	.word	0x40000400
 80083b8:	40000800 	.word	0x40000800
 80083bc:	40000c00 	.word	0x40000c00
 80083c0:	40010400 	.word	0x40010400
 80083c4:	40014000 	.word	0x40014000
 80083c8:	40014400 	.word	0x40014400
 80083cc:	40014800 	.word	0x40014800

080083d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f023 0201 	bic.w	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4b37      	ldr	r3, [pc, #220]	@ (80084d8 <TIM_OC1_SetConfig+0x108>)
 80083fc:	4013      	ands	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f023 0302 	bic.w	r3, r3, #2
 8008418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a2d      	ldr	r2, [pc, #180]	@ (80084dc <TIM_OC1_SetConfig+0x10c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00f      	beq.n	800844c <TIM_OC1_SetConfig+0x7c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a2c      	ldr	r2, [pc, #176]	@ (80084e0 <TIM_OC1_SetConfig+0x110>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00b      	beq.n	800844c <TIM_OC1_SetConfig+0x7c>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a2b      	ldr	r2, [pc, #172]	@ (80084e4 <TIM_OC1_SetConfig+0x114>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d007      	beq.n	800844c <TIM_OC1_SetConfig+0x7c>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <TIM_OC1_SetConfig+0x118>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_OC1_SetConfig+0x7c>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a29      	ldr	r2, [pc, #164]	@ (80084ec <TIM_OC1_SetConfig+0x11c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d10c      	bne.n	8008466 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f023 0308 	bic.w	r3, r3, #8
 8008452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f023 0304 	bic.w	r3, r3, #4
 8008464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a1c      	ldr	r2, [pc, #112]	@ (80084dc <TIM_OC1_SetConfig+0x10c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00f      	beq.n	800848e <TIM_OC1_SetConfig+0xbe>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a1b      	ldr	r2, [pc, #108]	@ (80084e0 <TIM_OC1_SetConfig+0x110>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d00b      	beq.n	800848e <TIM_OC1_SetConfig+0xbe>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a1a      	ldr	r2, [pc, #104]	@ (80084e4 <TIM_OC1_SetConfig+0x114>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d007      	beq.n	800848e <TIM_OC1_SetConfig+0xbe>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a19      	ldr	r2, [pc, #100]	@ (80084e8 <TIM_OC1_SetConfig+0x118>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_OC1_SetConfig+0xbe>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a18      	ldr	r2, [pc, #96]	@ (80084ec <TIM_OC1_SetConfig+0x11c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d111      	bne.n	80084b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800849c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	621a      	str	r2, [r3, #32]
}
 80084cc:	bf00      	nop
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	fffeff8f 	.word	0xfffeff8f
 80084dc:	40010000 	.word	0x40010000
 80084e0:	40010400 	.word	0x40010400
 80084e4:	40014000 	.word	0x40014000
 80084e8:	40014400 	.word	0x40014400
 80084ec:	40014800 	.word	0x40014800

080084f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	f023 0210 	bic.w	r2, r3, #16
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4b34      	ldr	r3, [pc, #208]	@ (80085ec <TIM_OC2_SetConfig+0xfc>)
 800851c:	4013      	ands	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f023 0320 	bic.w	r3, r3, #32
 800853a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a29      	ldr	r2, [pc, #164]	@ (80085f0 <TIM_OC2_SetConfig+0x100>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_OC2_SetConfig+0x68>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a28      	ldr	r2, [pc, #160]	@ (80085f4 <TIM_OC2_SetConfig+0x104>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d10d      	bne.n	8008574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800855e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008572:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a1e      	ldr	r2, [pc, #120]	@ (80085f0 <TIM_OC2_SetConfig+0x100>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00f      	beq.n	800859c <TIM_OC2_SetConfig+0xac>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a1d      	ldr	r2, [pc, #116]	@ (80085f4 <TIM_OC2_SetConfig+0x104>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00b      	beq.n	800859c <TIM_OC2_SetConfig+0xac>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a1c      	ldr	r2, [pc, #112]	@ (80085f8 <TIM_OC2_SetConfig+0x108>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d007      	beq.n	800859c <TIM_OC2_SetConfig+0xac>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <TIM_OC2_SetConfig+0x10c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_OC2_SetConfig+0xac>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a1a      	ldr	r2, [pc, #104]	@ (8008600 <TIM_OC2_SetConfig+0x110>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d113      	bne.n	80085c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	feff8fff 	.word	0xfeff8fff
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40010400 	.word	0x40010400
 80085f8:	40014000 	.word	0x40014000
 80085fc:	40014400 	.word	0x40014400
 8008600:	40014800 	.word	0x40014800

08008604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4b33      	ldr	r3, [pc, #204]	@ (80086fc <TIM_OC3_SetConfig+0xf8>)
 8008630:	4013      	ands	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800864c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a28      	ldr	r2, [pc, #160]	@ (8008700 <TIM_OC3_SetConfig+0xfc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <TIM_OC3_SetConfig+0x66>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a27      	ldr	r2, [pc, #156]	@ (8008704 <TIM_OC3_SetConfig+0x100>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d10d      	bne.n	8008686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <TIM_OC3_SetConfig+0xfc>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00f      	beq.n	80086ae <TIM_OC3_SetConfig+0xaa>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <TIM_OC3_SetConfig+0x100>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00b      	beq.n	80086ae <TIM_OC3_SetConfig+0xaa>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1b      	ldr	r2, [pc, #108]	@ (8008708 <TIM_OC3_SetConfig+0x104>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d007      	beq.n	80086ae <TIM_OC3_SetConfig+0xaa>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a1a      	ldr	r2, [pc, #104]	@ (800870c <TIM_OC3_SetConfig+0x108>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d003      	beq.n	80086ae <TIM_OC3_SetConfig+0xaa>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a19      	ldr	r2, [pc, #100]	@ (8008710 <TIM_OC3_SetConfig+0x10c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d113      	bne.n	80086d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	fffeff8f 	.word	0xfffeff8f
 8008700:	40010000 	.word	0x40010000
 8008704:	40010400 	.word	0x40010400
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4b24      	ldr	r3, [pc, #144]	@ (80087d0 <TIM_OC4_SetConfig+0xbc>)
 8008740:	4013      	ands	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800874a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	021b      	lsls	r3, r3, #8
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800875e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	031b      	lsls	r3, r3, #12
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a19      	ldr	r2, [pc, #100]	@ (80087d4 <TIM_OC4_SetConfig+0xc0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00f      	beq.n	8008794 <TIM_OC4_SetConfig+0x80>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a18      	ldr	r2, [pc, #96]	@ (80087d8 <TIM_OC4_SetConfig+0xc4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00b      	beq.n	8008794 <TIM_OC4_SetConfig+0x80>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a17      	ldr	r2, [pc, #92]	@ (80087dc <TIM_OC4_SetConfig+0xc8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d007      	beq.n	8008794 <TIM_OC4_SetConfig+0x80>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a16      	ldr	r2, [pc, #88]	@ (80087e0 <TIM_OC4_SetConfig+0xcc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d003      	beq.n	8008794 <TIM_OC4_SetConfig+0x80>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a15      	ldr	r2, [pc, #84]	@ (80087e4 <TIM_OC4_SetConfig+0xd0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d109      	bne.n	80087a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800879a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	019b      	lsls	r3, r3, #6
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	feff8fff 	.word	0xfeff8fff
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400
 80087dc:	40014000 	.word	0x40014000
 80087e0:	40014400 	.word	0x40014400
 80087e4:	40014800 	.word	0x40014800

080087e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4b21      	ldr	r3, [pc, #132]	@ (8008898 <TIM_OC5_SetConfig+0xb0>)
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a18      	ldr	r2, [pc, #96]	@ (800889c <TIM_OC5_SetConfig+0xb4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00f      	beq.n	800885e <TIM_OC5_SetConfig+0x76>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a17      	ldr	r2, [pc, #92]	@ (80088a0 <TIM_OC5_SetConfig+0xb8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00b      	beq.n	800885e <TIM_OC5_SetConfig+0x76>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a16      	ldr	r2, [pc, #88]	@ (80088a4 <TIM_OC5_SetConfig+0xbc>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d007      	beq.n	800885e <TIM_OC5_SetConfig+0x76>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a15      	ldr	r2, [pc, #84]	@ (80088a8 <TIM_OC5_SetConfig+0xc0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d003      	beq.n	800885e <TIM_OC5_SetConfig+0x76>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a14      	ldr	r2, [pc, #80]	@ (80088ac <TIM_OC5_SetConfig+0xc4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d109      	bne.n	8008872 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	4313      	orrs	r3, r2
 8008870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	621a      	str	r2, [r3, #32]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	fffeff8f 	.word	0xfffeff8f
 800889c:	40010000 	.word	0x40010000
 80088a0:	40010400 	.word	0x40010400
 80088a4:	40014000 	.word	0x40014000
 80088a8:	40014400 	.word	0x40014400
 80088ac:	40014800 	.word	0x40014800

080088b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4b22      	ldr	r3, [pc, #136]	@ (8008964 <TIM_OC6_SetConfig+0xb4>)
 80088dc:	4013      	ands	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	051b      	lsls	r3, r3, #20
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a19      	ldr	r2, [pc, #100]	@ (8008968 <TIM_OC6_SetConfig+0xb8>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00f      	beq.n	8008928 <TIM_OC6_SetConfig+0x78>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a18      	ldr	r2, [pc, #96]	@ (800896c <TIM_OC6_SetConfig+0xbc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00b      	beq.n	8008928 <TIM_OC6_SetConfig+0x78>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a17      	ldr	r2, [pc, #92]	@ (8008970 <TIM_OC6_SetConfig+0xc0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d007      	beq.n	8008928 <TIM_OC6_SetConfig+0x78>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a16      	ldr	r2, [pc, #88]	@ (8008974 <TIM_OC6_SetConfig+0xc4>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_OC6_SetConfig+0x78>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a15      	ldr	r2, [pc, #84]	@ (8008978 <TIM_OC6_SetConfig+0xc8>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d109      	bne.n	800893c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800892e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	029b      	lsls	r3, r3, #10
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	621a      	str	r2, [r3, #32]
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	feff8fff 	.word	0xfeff8fff
 8008968:	40010000 	.word	0x40010000
 800896c:	40010400 	.word	0x40010400
 8008970:	40014000 	.word	0x40014000
 8008974:	40014400 	.word	0x40014400
 8008978:	40014800 	.word	0x40014800

0800897c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0201 	bic.w	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 030a 	bic.w	r3, r3, #10
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	f023 0210 	bic.w	r2, r3, #16
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	031b      	lsls	r3, r3, #12
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4b09      	ldr	r3, [pc, #36]	@ (8008a74 <TIM_ITRx_SetConfig+0x38>)
 8008a50:	4013      	ands	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	f043 0307 	orr.w	r3, r3, #7
 8008a5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	609a      	str	r2, [r3, #8]
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	ffcfff8f 	.word	0xffcfff8f

08008a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	021a      	lsls	r2, r3, #8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2201      	movs	r2, #1
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	401a      	ands	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f003 031f 	and.w	r3, r3, #31
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	fa01 f303 	lsl.w	r3, r1, r3
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	621a      	str	r2, [r3, #32]
}
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e06d      	b.n	8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a30      	ldr	r2, [pc, #192]	@ (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d004      	beq.n	8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d108      	bne.n	8008b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a20      	ldr	r2, [pc, #128]	@ (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d022      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8e:	d01d      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1d      	ldr	r2, [pc, #116]	@ (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d018      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d013      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00e      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	@ (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d009      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a16      	ldr	r2, [pc, #88]	@ (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d004      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a15      	ldr	r2, [pc, #84]	@ (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d10c      	bne.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40010400 	.word	0x40010400
 8008c0c:	40000400 	.word	0x40000400
 8008c10:	40000800 	.word	0x40000800
 8008c14:	40000c00 	.word	0x40000c00
 8008c18:	40001800 	.word	0x40001800
 8008c1c:	40014000 	.word	0x40014000

08008c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e042      	b.n	8008cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7f8 ffe5 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2224      	movs	r2, #36	@ 0x24
 8008c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0201 	bic.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fa44 	bl	800a134 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fcd9 	bl	8009664 <UART_SetConfig>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e01b      	b.n	8008cf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fac3 	bl	800a278 <UART_CheckIdleState>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	@ 0x28
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d17b      	bne.n	8008e0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <HAL_UART_Transmit+0x26>
 8008d1c:	88fb      	ldrh	r3, [r7, #6]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e074      	b.n	8008e10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2221      	movs	r2, #33	@ 0x21
 8008d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d36:	f7f9 f8ad 	bl	8001e94 <HAL_GetTick>
 8008d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	88fa      	ldrh	r2, [r7, #6]
 8008d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d54:	d108      	bne.n	8008d68 <HAL_UART_Transmit+0x6c>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	61bb      	str	r3, [r7, #24]
 8008d66:	e003      	b.n	8008d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d70:	e030      	b.n	8008dd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2180      	movs	r1, #128	@ 0x80
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f001 fb25 	bl	800a3cc <UART_WaitOnFlagUntilTimeout>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e03d      	b.n	8008e10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10b      	bne.n	8008db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	3302      	adds	r3, #2
 8008dae:	61bb      	str	r3, [r7, #24]
 8008db0:	e007      	b.n	8008dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	781a      	ldrb	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1c8      	bne.n	8008d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2200      	movs	r2, #0
 8008de8:	2140      	movs	r1, #64	@ 0x40
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f001 faee 	bl	800a3cc <UART_WaitOnFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e006      	b.n	8008e10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e000      	b.n	8008e10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e0e:	2302      	movs	r3, #2
  }
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	@ 0x28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e2c:	2b20      	cmp	r3, #32
 8008e2e:	d137      	bne.n	8008ea0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <HAL_UART_Receive_IT+0x24>
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e030      	b.n	8008ea2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a18      	ldr	r2, [pc, #96]	@ (8008eac <HAL_UART_Receive_IT+0x94>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d01f      	beq.n	8008e90 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d018      	beq.n	8008e90 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	623b      	str	r3, [r7, #32]
 8008e7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	69f9      	ldr	r1, [r7, #28]
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e6      	bne.n	8008e5e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e90:	88fb      	ldrh	r3, [r7, #6]
 8008e92:	461a      	mov	r2, r3
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f001 fb06 	bl	800a4a8 <UART_Start_Receive_IT>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	e000      	b.n	8008ea2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ea0:	2302      	movs	r3, #2
  }
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3728      	adds	r7, #40	@ 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	58000c00 	.word	0x58000c00

08008eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ed6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008eda:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ede:	4013      	ands	r3, r2
 8008ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d11b      	bne.n	8008f24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d015      	beq.n	8008f24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efc:	f003 0320 	and.w	r3, r3, #32
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d105      	bne.n	8008f10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8377 	beq.w	8009608 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
      }
      return;
 8008f22:	e371      	b.n	8009608 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8123 	beq.w	8009174 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f32:	4b8d      	ldr	r3, [pc, #564]	@ (8009168 <HAL_UART_IRQHandler+0x2b8>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d106      	bne.n	8008f48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800916c <HAL_UART_IRQHandler+0x2bc>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8116 	beq.w	8009174 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d011      	beq.n	8008f78 <HAL_UART_IRQHandler+0xc8>
 8008f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2201      	movs	r2, #1
 8008f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f6e:	f043 0201 	orr.w	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d011      	beq.n	8008fa8 <HAL_UART_IRQHandler+0xf8>
 8008f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2202      	movs	r2, #2
 8008f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9e:	f043 0204 	orr.w	r2, r3, #4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d011      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x128>
 8008fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fce:	f043 0202 	orr.w	r2, r3, #2
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fdc:	f003 0308 	and.w	r3, r3, #8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d017      	beq.n	8009014 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d105      	bne.n	8008ffc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ff0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8009168 <HAL_UART_IRQHandler+0x2b8>)
 8008ff6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2208      	movs	r2, #8
 8009002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800900a:	f043 0208 	orr.w	r2, r3, #8
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800901c:	2b00      	cmp	r3, #0
 800901e:	d012      	beq.n	8009046 <HAL_UART_IRQHandler+0x196>
 8009020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009024:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00c      	beq.n	8009046 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800903c:	f043 0220 	orr.w	r2, r3, #32
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904c:	2b00      	cmp	r3, #0
 800904e:	f000 82dd 	beq.w	800960c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d013      	beq.n	8009086 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800905e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d105      	bne.n	8009076 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800906a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800906e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909a:	2b40      	cmp	r3, #64	@ 0x40
 800909c:	d005      	beq.n	80090aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800909e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d054      	beq.n	8009154 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fb1e 	bl	800a6ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ba:	2b40      	cmp	r3, #64	@ 0x40
 80090bc:	d146      	bne.n	800914c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1d9      	bne.n	80090be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009110:	2b00      	cmp	r3, #0
 8009112:	d017      	beq.n	8009144 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800911a:	4a15      	ldr	r2, [pc, #84]	@ (8009170 <HAL_UART_IRQHandler+0x2c0>)
 800911c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009124:	4618      	mov	r0, r3
 8009126:	f7f9 fafb 	bl	8002720 <HAL_DMA_Abort_IT>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d019      	beq.n	8009164 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800913e:	4610      	mov	r0, r2
 8009140:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009142:	e00f      	b.n	8009164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa77 	bl	8009638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800914a:	e00b      	b.n	8009164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa73 	bl	8009638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009152:	e007      	b.n	8009164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fa6f 	bl	8009638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009162:	e253      	b.n	800960c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009164:	bf00      	nop
    return;
 8009166:	e251      	b.n	800960c <HAL_UART_IRQHandler+0x75c>
 8009168:	10000001 	.word	0x10000001
 800916c:	04000120 	.word	0x04000120
 8009170:	0800a7b9 	.word	0x0800a7b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009178:	2b01      	cmp	r3, #1
 800917a:	f040 81e7 	bne.w	800954c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800917e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009182:	f003 0310 	and.w	r3, r3, #16
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 81e0 	beq.w	800954c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800918c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 81d9 	beq.w	800954c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2210      	movs	r2, #16
 80091a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ac:	2b40      	cmp	r3, #64	@ 0x40
 80091ae:	f040 8151 	bne.w	8009454 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a96      	ldr	r2, [pc, #600]	@ (8009414 <HAL_UART_IRQHandler+0x564>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d068      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a93      	ldr	r2, [pc, #588]	@ (8009418 <HAL_UART_IRQHandler+0x568>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d061      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a91      	ldr	r2, [pc, #580]	@ (800941c <HAL_UART_IRQHandler+0x56c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d05a      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009420 <HAL_UART_IRQHandler+0x570>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d053      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a8c      	ldr	r2, [pc, #560]	@ (8009424 <HAL_UART_IRQHandler+0x574>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d04c      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a89      	ldr	r2, [pc, #548]	@ (8009428 <HAL_UART_IRQHandler+0x578>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d045      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a87      	ldr	r2, [pc, #540]	@ (800942c <HAL_UART_IRQHandler+0x57c>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d03e      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a84      	ldr	r2, [pc, #528]	@ (8009430 <HAL_UART_IRQHandler+0x580>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d037      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a82      	ldr	r2, [pc, #520]	@ (8009434 <HAL_UART_IRQHandler+0x584>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d030      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a7f      	ldr	r2, [pc, #508]	@ (8009438 <HAL_UART_IRQHandler+0x588>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d029      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a7d      	ldr	r2, [pc, #500]	@ (800943c <HAL_UART_IRQHandler+0x58c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d022      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a7a      	ldr	r2, [pc, #488]	@ (8009440 <HAL_UART_IRQHandler+0x590>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d01b      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a78      	ldr	r2, [pc, #480]	@ (8009444 <HAL_UART_IRQHandler+0x594>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d014      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a75      	ldr	r2, [pc, #468]	@ (8009448 <HAL_UART_IRQHandler+0x598>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00d      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a73      	ldr	r2, [pc, #460]	@ (800944c <HAL_UART_IRQHandler+0x59c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d006      	beq.n	8009292 <HAL_UART_IRQHandler+0x3e2>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a70      	ldr	r2, [pc, #448]	@ (8009450 <HAL_UART_IRQHandler+0x5a0>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d106      	bne.n	80092a0 <HAL_UART_IRQHandler+0x3f0>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	b29b      	uxth	r3, r3
 800929e:	e005      	b.n	80092ac <HAL_UART_IRQHandler+0x3fc>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 81ab 	beq.w	8009610 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092c4:	429a      	cmp	r2, r3
 80092c6:	f080 81a3 	bcs.w	8009610 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092e0:	f000 8087 	beq.w	80093f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800930e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009312:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800931a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1da      	bne.n	80092e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800933e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3308      	adds	r3, #8
 800934e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009352:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009356:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800935a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e1      	bne.n	800932e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800937a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800937c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3308      	adds	r3, #8
 800938a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800938e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800939c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e3      	bne.n	800936a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093c0:	f023 0310 	bic.w	r3, r3, #16
 80093c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e4      	bne.n	80093b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f8 fe79 	bl	80020e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2202      	movs	r2, #2
 80093f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009404:	b29b      	uxth	r3, r3
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	b29b      	uxth	r3, r3
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f91d 	bl	800964c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009412:	e0fd      	b.n	8009610 <HAL_UART_IRQHandler+0x760>
 8009414:	40020010 	.word	0x40020010
 8009418:	40020028 	.word	0x40020028
 800941c:	40020040 	.word	0x40020040
 8009420:	40020058 	.word	0x40020058
 8009424:	40020070 	.word	0x40020070
 8009428:	40020088 	.word	0x40020088
 800942c:	400200a0 	.word	0x400200a0
 8009430:	400200b8 	.word	0x400200b8
 8009434:	40020410 	.word	0x40020410
 8009438:	40020428 	.word	0x40020428
 800943c:	40020440 	.word	0x40020440
 8009440:	40020458 	.word	0x40020458
 8009444:	40020470 	.word	0x40020470
 8009448:	40020488 	.word	0x40020488
 800944c:	400204a0 	.word	0x400204a0
 8009450:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009460:	b29b      	uxth	r3, r3
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800946e:	b29b      	uxth	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80cf 	beq.w	8009614 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80ca 	beq.w	8009614 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800948e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80094a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e4      	bne.n	8009480 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	623b      	str	r3, [r7, #32]
   return(result);
 80094c6:	6a3a      	ldr	r2, [r7, #32]
 80094c8:	4b55      	ldr	r3, [pc, #340]	@ (8009620 <HAL_UART_IRQHandler+0x770>)
 80094ca:	4013      	ands	r3, r2
 80094cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3308      	adds	r3, #8
 80094d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094da:	633a      	str	r2, [r7, #48]	@ 0x30
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e3      	bne.n	80094b6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0310 	bic.w	r3, r3, #16
 8009516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	69b9      	ldr	r1, [r7, #24]
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	617b      	str	r3, [r7, #20]
   return(result);
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e4      	bne.n	8009502 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800953e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f881 	bl	800964c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800954a:	e063      	b.n	8009614 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00e      	beq.n	8009576 <HAL_UART_IRQHandler+0x6c6>
 8009558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800955c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d008      	beq.n	8009576 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800956c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fe80 	bl	800b274 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009574:	e051      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957e:	2b00      	cmp	r3, #0
 8009580:	d014      	beq.n	80095ac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800958a:	2b00      	cmp	r3, #0
 800958c:	d105      	bne.n	800959a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800958e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d008      	beq.n	80095ac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d03a      	beq.n	8009618 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
    }
    return;
 80095aa:	e035      	b.n	8009618 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d009      	beq.n	80095cc <HAL_UART_IRQHandler+0x71c>
 80095b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 f90d 	bl	800a7e4 <UART_EndTransmit_IT>
    return;
 80095ca:	e026      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <HAL_UART_IRQHandler+0x73c>
 80095d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 fe59 	bl	800b29c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095ea:	e016      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d010      	beq.n	800961a <HAL_UART_IRQHandler+0x76a>
 80095f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da0c      	bge.n	800961a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fe41 	bl	800b288 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009606:	e008      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
      return;
 8009608:	bf00      	nop
 800960a:	e006      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
    return;
 800960c:	bf00      	nop
 800960e:	e004      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
      return;
 8009610:	bf00      	nop
 8009612:	e002      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
      return;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <HAL_UART_IRQHandler+0x76a>
    return;
 8009618:	bf00      	nop
  }
}
 800961a:	37e8      	adds	r7, #232	@ 0xe8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	effffffe 	.word	0xeffffffe

08009624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009668:	b092      	sub	sp, #72	@ 0x48
 800966a:	af00      	add	r7, sp, #0
 800966c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	431a      	orrs	r2, r3
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	431a      	orrs	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	4313      	orrs	r3, r2
 800968a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4bbe      	ldr	r3, [pc, #760]	@ (800998c <UART_SetConfig+0x328>)
 8009694:	4013      	ands	r3, r2
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	6812      	ldr	r2, [r2, #0]
 800969a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800969c:	430b      	orrs	r3, r1
 800969e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4ab3      	ldr	r2, [pc, #716]	@ (8009990 <UART_SetConfig+0x32c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096cc:	4313      	orrs	r3, r2
 80096ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	4baf      	ldr	r3, [pc, #700]	@ (8009994 <UART_SetConfig+0x330>)
 80096d8:	4013      	ands	r3, r2
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096e0:	430b      	orrs	r3, r1
 80096e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ea:	f023 010f 	bic.w	r1, r3, #15
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4aa6      	ldr	r2, [pc, #664]	@ (8009998 <UART_SetConfig+0x334>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d177      	bne.n	80097f4 <UART_SetConfig+0x190>
 8009704:	4ba5      	ldr	r3, [pc, #660]	@ (800999c <UART_SetConfig+0x338>)
 8009706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009708:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800970c:	2b28      	cmp	r3, #40	@ 0x28
 800970e:	d86d      	bhi.n	80097ec <UART_SetConfig+0x188>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <UART_SetConfig+0xb4>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	080097bd 	.word	0x080097bd
 800971c:	080097ed 	.word	0x080097ed
 8009720:	080097ed 	.word	0x080097ed
 8009724:	080097ed 	.word	0x080097ed
 8009728:	080097ed 	.word	0x080097ed
 800972c:	080097ed 	.word	0x080097ed
 8009730:	080097ed 	.word	0x080097ed
 8009734:	080097ed 	.word	0x080097ed
 8009738:	080097c5 	.word	0x080097c5
 800973c:	080097ed 	.word	0x080097ed
 8009740:	080097ed 	.word	0x080097ed
 8009744:	080097ed 	.word	0x080097ed
 8009748:	080097ed 	.word	0x080097ed
 800974c:	080097ed 	.word	0x080097ed
 8009750:	080097ed 	.word	0x080097ed
 8009754:	080097ed 	.word	0x080097ed
 8009758:	080097cd 	.word	0x080097cd
 800975c:	080097ed 	.word	0x080097ed
 8009760:	080097ed 	.word	0x080097ed
 8009764:	080097ed 	.word	0x080097ed
 8009768:	080097ed 	.word	0x080097ed
 800976c:	080097ed 	.word	0x080097ed
 8009770:	080097ed 	.word	0x080097ed
 8009774:	080097ed 	.word	0x080097ed
 8009778:	080097d5 	.word	0x080097d5
 800977c:	080097ed 	.word	0x080097ed
 8009780:	080097ed 	.word	0x080097ed
 8009784:	080097ed 	.word	0x080097ed
 8009788:	080097ed 	.word	0x080097ed
 800978c:	080097ed 	.word	0x080097ed
 8009790:	080097ed 	.word	0x080097ed
 8009794:	080097ed 	.word	0x080097ed
 8009798:	080097dd 	.word	0x080097dd
 800979c:	080097ed 	.word	0x080097ed
 80097a0:	080097ed 	.word	0x080097ed
 80097a4:	080097ed 	.word	0x080097ed
 80097a8:	080097ed 	.word	0x080097ed
 80097ac:	080097ed 	.word	0x080097ed
 80097b0:	080097ed 	.word	0x080097ed
 80097b4:	080097ed 	.word	0x080097ed
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e222      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097c4:	2304      	movs	r3, #4
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e21e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e21a      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097d4:	2310      	movs	r3, #16
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e216      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097dc:	2320      	movs	r3, #32
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e212      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097e4:	2340      	movs	r3, #64	@ 0x40
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e20e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097ec:	2380      	movs	r3, #128	@ 0x80
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f2:	e20a      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a69      	ldr	r2, [pc, #420]	@ (80099a0 <UART_SetConfig+0x33c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d130      	bne.n	8009860 <UART_SetConfig+0x1fc>
 80097fe:	4b67      	ldr	r3, [pc, #412]	@ (800999c <UART_SetConfig+0x338>)
 8009800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b05      	cmp	r3, #5
 8009808:	d826      	bhi.n	8009858 <UART_SetConfig+0x1f4>
 800980a:	a201      	add	r2, pc, #4	@ (adr r2, 8009810 <UART_SetConfig+0x1ac>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009829 	.word	0x08009829
 8009814:	08009831 	.word	0x08009831
 8009818:	08009839 	.word	0x08009839
 800981c:	08009841 	.word	0x08009841
 8009820:	08009849 	.word	0x08009849
 8009824:	08009851 	.word	0x08009851
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e1ec      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e1e8      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e1e4      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e1e0      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009848:	2320      	movs	r3, #32
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e1dc      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009850:	2340      	movs	r3, #64	@ 0x40
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e1d8      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009858:	2380      	movs	r3, #128	@ 0x80
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e1d4      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a4f      	ldr	r2, [pc, #316]	@ (80099a4 <UART_SetConfig+0x340>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d130      	bne.n	80098cc <UART_SetConfig+0x268>
 800986a:	4b4c      	ldr	r3, [pc, #304]	@ (800999c <UART_SetConfig+0x338>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b05      	cmp	r3, #5
 8009874:	d826      	bhi.n	80098c4 <UART_SetConfig+0x260>
 8009876:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <UART_SetConfig+0x218>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009895 	.word	0x08009895
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098a5 	.word	0x080098a5
 8009888:	080098ad 	.word	0x080098ad
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098bd 	.word	0x080098bd
 8009894:	2300      	movs	r3, #0
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e1b6      	b.n	8009c0a <UART_SetConfig+0x5a6>
 800989c:	2304      	movs	r3, #4
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e1b2      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80098a4:	2308      	movs	r3, #8
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e1ae      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80098ac:	2310      	movs	r3, #16
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e1aa      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80098b4:	2320      	movs	r3, #32
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e1a6      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80098bc:	2340      	movs	r3, #64	@ 0x40
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e1a2      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80098c4:	2380      	movs	r3, #128	@ 0x80
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e19e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a35      	ldr	r2, [pc, #212]	@ (80099a8 <UART_SetConfig+0x344>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d130      	bne.n	8009938 <UART_SetConfig+0x2d4>
 80098d6:	4b31      	ldr	r3, [pc, #196]	@ (800999c <UART_SetConfig+0x338>)
 80098d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	2b05      	cmp	r3, #5
 80098e0:	d826      	bhi.n	8009930 <UART_SetConfig+0x2cc>
 80098e2:	a201      	add	r2, pc, #4	@ (adr r2, 80098e8 <UART_SetConfig+0x284>)
 80098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e8:	08009901 	.word	0x08009901
 80098ec:	08009909 	.word	0x08009909
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009921 	.word	0x08009921
 80098fc:	08009929 	.word	0x08009929
 8009900:	2300      	movs	r3, #0
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e180      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009908:	2304      	movs	r3, #4
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e17c      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009910:	2308      	movs	r3, #8
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e178      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009918:	2310      	movs	r3, #16
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e174      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009920:	2320      	movs	r3, #32
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e170      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009928:	2340      	movs	r3, #64	@ 0x40
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e16c      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009930:	2380      	movs	r3, #128	@ 0x80
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e168      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1b      	ldr	r2, [pc, #108]	@ (80099ac <UART_SetConfig+0x348>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d142      	bne.n	80099c8 <UART_SetConfig+0x364>
 8009942:	4b16      	ldr	r3, [pc, #88]	@ (800999c <UART_SetConfig+0x338>)
 8009944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b05      	cmp	r3, #5
 800994c:	d838      	bhi.n	80099c0 <UART_SetConfig+0x35c>
 800994e:	a201      	add	r2, pc, #4	@ (adr r2, 8009954 <UART_SetConfig+0x2f0>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009975 	.word	0x08009975
 800995c:	0800997d 	.word	0x0800997d
 8009960:	08009985 	.word	0x08009985
 8009964:	080099b1 	.word	0x080099b1
 8009968:	080099b9 	.word	0x080099b9
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e14a      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e146      	b.n	8009c0a <UART_SetConfig+0x5a6>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e142      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e13e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 800998c:	cfff69f3 	.word	0xcfff69f3
 8009990:	58000c00 	.word	0x58000c00
 8009994:	11fff4ff 	.word	0x11fff4ff
 8009998:	40011000 	.word	0x40011000
 800999c:	58024400 	.word	0x58024400
 80099a0:	40004400 	.word	0x40004400
 80099a4:	40004800 	.word	0x40004800
 80099a8:	40004c00 	.word	0x40004c00
 80099ac:	40005000 	.word	0x40005000
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e128      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80099b8:	2340      	movs	r3, #64	@ 0x40
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e124      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80099c0:	2380      	movs	r3, #128	@ 0x80
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e120      	b.n	8009c0a <UART_SetConfig+0x5a6>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4acb      	ldr	r2, [pc, #812]	@ (8009cfc <UART_SetConfig+0x698>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d176      	bne.n	8009ac0 <UART_SetConfig+0x45c>
 80099d2:	4bcb      	ldr	r3, [pc, #812]	@ (8009d00 <UART_SetConfig+0x69c>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099da:	2b28      	cmp	r3, #40	@ 0x28
 80099dc:	d86c      	bhi.n	8009ab8 <UART_SetConfig+0x454>
 80099de:	a201      	add	r2, pc, #4	@ (adr r2, 80099e4 <UART_SetConfig+0x380>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a89 	.word	0x08009a89
 80099e8:	08009ab9 	.word	0x08009ab9
 80099ec:	08009ab9 	.word	0x08009ab9
 80099f0:	08009ab9 	.word	0x08009ab9
 80099f4:	08009ab9 	.word	0x08009ab9
 80099f8:	08009ab9 	.word	0x08009ab9
 80099fc:	08009ab9 	.word	0x08009ab9
 8009a00:	08009ab9 	.word	0x08009ab9
 8009a04:	08009a91 	.word	0x08009a91
 8009a08:	08009ab9 	.word	0x08009ab9
 8009a0c:	08009ab9 	.word	0x08009ab9
 8009a10:	08009ab9 	.word	0x08009ab9
 8009a14:	08009ab9 	.word	0x08009ab9
 8009a18:	08009ab9 	.word	0x08009ab9
 8009a1c:	08009ab9 	.word	0x08009ab9
 8009a20:	08009ab9 	.word	0x08009ab9
 8009a24:	08009a99 	.word	0x08009a99
 8009a28:	08009ab9 	.word	0x08009ab9
 8009a2c:	08009ab9 	.word	0x08009ab9
 8009a30:	08009ab9 	.word	0x08009ab9
 8009a34:	08009ab9 	.word	0x08009ab9
 8009a38:	08009ab9 	.word	0x08009ab9
 8009a3c:	08009ab9 	.word	0x08009ab9
 8009a40:	08009ab9 	.word	0x08009ab9
 8009a44:	08009aa1 	.word	0x08009aa1
 8009a48:	08009ab9 	.word	0x08009ab9
 8009a4c:	08009ab9 	.word	0x08009ab9
 8009a50:	08009ab9 	.word	0x08009ab9
 8009a54:	08009ab9 	.word	0x08009ab9
 8009a58:	08009ab9 	.word	0x08009ab9
 8009a5c:	08009ab9 	.word	0x08009ab9
 8009a60:	08009ab9 	.word	0x08009ab9
 8009a64:	08009aa9 	.word	0x08009aa9
 8009a68:	08009ab9 	.word	0x08009ab9
 8009a6c:	08009ab9 	.word	0x08009ab9
 8009a70:	08009ab9 	.word	0x08009ab9
 8009a74:	08009ab9 	.word	0x08009ab9
 8009a78:	08009ab9 	.word	0x08009ab9
 8009a7c:	08009ab9 	.word	0x08009ab9
 8009a80:	08009ab9 	.word	0x08009ab9
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e0bc      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009a90:	2304      	movs	r3, #4
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e0b8      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009a98:	2308      	movs	r3, #8
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e0b4      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e0b0      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e0ac      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009ab0:	2340      	movs	r3, #64	@ 0x40
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e0a8      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009ab8:	2380      	movs	r3, #128	@ 0x80
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009abe:	e0a4      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a8f      	ldr	r2, [pc, #572]	@ (8009d04 <UART_SetConfig+0x6a0>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d130      	bne.n	8009b2c <UART_SetConfig+0x4c8>
 8009aca:	4b8d      	ldr	r3, [pc, #564]	@ (8009d00 <UART_SetConfig+0x69c>)
 8009acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d826      	bhi.n	8009b24 <UART_SetConfig+0x4c0>
 8009ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8009adc <UART_SetConfig+0x478>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009af5 	.word	0x08009af5
 8009ae0:	08009afd 	.word	0x08009afd
 8009ae4:	08009b05 	.word	0x08009b05
 8009ae8:	08009b0d 	.word	0x08009b0d
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e086      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009afc:	2304      	movs	r3, #4
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e082      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b04:	2308      	movs	r3, #8
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e07e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e07a      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b14:	2320      	movs	r3, #32
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e076      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b1c:	2340      	movs	r3, #64	@ 0x40
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e072      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b24:	2380      	movs	r3, #128	@ 0x80
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e06e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a75      	ldr	r2, [pc, #468]	@ (8009d08 <UART_SetConfig+0x6a4>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d130      	bne.n	8009b98 <UART_SetConfig+0x534>
 8009b36:	4b72      	ldr	r3, [pc, #456]	@ (8009d00 <UART_SetConfig+0x69c>)
 8009b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3a:	f003 0307 	and.w	r3, r3, #7
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	d826      	bhi.n	8009b90 <UART_SetConfig+0x52c>
 8009b42:	a201      	add	r2, pc, #4	@ (adr r2, 8009b48 <UART_SetConfig+0x4e4>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b61 	.word	0x08009b61
 8009b4c:	08009b69 	.word	0x08009b69
 8009b50:	08009b71 	.word	0x08009b71
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b81 	.word	0x08009b81
 8009b5c:	08009b89 	.word	0x08009b89
 8009b60:	2300      	movs	r3, #0
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e050      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e04c      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b70:	2308      	movs	r3, #8
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e048      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e044      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b80:	2320      	movs	r3, #32
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e040      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b88:	2340      	movs	r3, #64	@ 0x40
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e03c      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b90:	2380      	movs	r3, #128	@ 0x80
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e038      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a5b      	ldr	r2, [pc, #364]	@ (8009d0c <UART_SetConfig+0x6a8>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d130      	bne.n	8009c04 <UART_SetConfig+0x5a0>
 8009ba2:	4b57      	ldr	r3, [pc, #348]	@ (8009d00 <UART_SetConfig+0x69c>)
 8009ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	d826      	bhi.n	8009bfc <UART_SetConfig+0x598>
 8009bae:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb4 <UART_SetConfig+0x550>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bcd 	.word	0x08009bcd
 8009bb8:	08009bd5 	.word	0x08009bd5
 8009bbc:	08009bdd 	.word	0x08009bdd
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009bed 	.word	0x08009bed
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	2302      	movs	r3, #2
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e01a      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e016      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e012      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e00e      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009bec:	2320      	movs	r3, #32
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e00a      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009bf4:	2340      	movs	r3, #64	@ 0x40
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e006      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009bfc:	2380      	movs	r3, #128	@ 0x80
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e002      	b.n	8009c0a <UART_SetConfig+0x5a6>
 8009c04:	2380      	movs	r3, #128	@ 0x80
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8009d0c <UART_SetConfig+0x6a8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	f040 80f8 	bne.w	8009e06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	dc46      	bgt.n	8009cac <UART_SetConfig+0x648>
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	f2c0 8082 	blt.w	8009d28 <UART_SetConfig+0x6c4>
 8009c24:	3b02      	subs	r3, #2
 8009c26:	2b1e      	cmp	r3, #30
 8009c28:	d87e      	bhi.n	8009d28 <UART_SetConfig+0x6c4>
 8009c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c30 <UART_SetConfig+0x5cc>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009cb3 	.word	0x08009cb3
 8009c34:	08009d29 	.word	0x08009d29
 8009c38:	08009cbb 	.word	0x08009cbb
 8009c3c:	08009d29 	.word	0x08009d29
 8009c40:	08009d29 	.word	0x08009d29
 8009c44:	08009d29 	.word	0x08009d29
 8009c48:	08009ccb 	.word	0x08009ccb
 8009c4c:	08009d29 	.word	0x08009d29
 8009c50:	08009d29 	.word	0x08009d29
 8009c54:	08009d29 	.word	0x08009d29
 8009c58:	08009d29 	.word	0x08009d29
 8009c5c:	08009d29 	.word	0x08009d29
 8009c60:	08009d29 	.word	0x08009d29
 8009c64:	08009d29 	.word	0x08009d29
 8009c68:	08009cdb 	.word	0x08009cdb
 8009c6c:	08009d29 	.word	0x08009d29
 8009c70:	08009d29 	.word	0x08009d29
 8009c74:	08009d29 	.word	0x08009d29
 8009c78:	08009d29 	.word	0x08009d29
 8009c7c:	08009d29 	.word	0x08009d29
 8009c80:	08009d29 	.word	0x08009d29
 8009c84:	08009d29 	.word	0x08009d29
 8009c88:	08009d29 	.word	0x08009d29
 8009c8c:	08009d29 	.word	0x08009d29
 8009c90:	08009d29 	.word	0x08009d29
 8009c94:	08009d29 	.word	0x08009d29
 8009c98:	08009d29 	.word	0x08009d29
 8009c9c:	08009d29 	.word	0x08009d29
 8009ca0:	08009d29 	.word	0x08009d29
 8009ca4:	08009d29 	.word	0x08009d29
 8009ca8:	08009d1b 	.word	0x08009d1b
 8009cac:	2b40      	cmp	r3, #64	@ 0x40
 8009cae:	d037      	beq.n	8009d20 <UART_SetConfig+0x6bc>
 8009cb0:	e03a      	b.n	8009d28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cb2:	f7fd f84d 	bl	8006d50 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cb8:	e03c      	b.n	8009d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fd f85c 	bl	8006d7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc8:	e034      	b.n	8009d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cca:	f107 0318 	add.w	r3, r7, #24
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fd f9a8 	bl	8007024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd8:	e02c      	b.n	8009d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cda:	4b09      	ldr	r3, [pc, #36]	@ (8009d00 <UART_SetConfig+0x69c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d016      	beq.n	8009d14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ce6:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <UART_SetConfig+0x69c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	08db      	lsrs	r3, r3, #3
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	4a07      	ldr	r2, [pc, #28]	@ (8009d10 <UART_SetConfig+0x6ac>)
 8009cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cf8:	e01c      	b.n	8009d34 <UART_SetConfig+0x6d0>
 8009cfa:	bf00      	nop
 8009cfc:	40011400 	.word	0x40011400
 8009d00:	58024400 	.word	0x58024400
 8009d04:	40007800 	.word	0x40007800
 8009d08:	40007c00 	.word	0x40007c00
 8009d0c:	58000c00 	.word	0x58000c00
 8009d10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009d14:	4b9d      	ldr	r3, [pc, #628]	@ (8009f8c <UART_SetConfig+0x928>)
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d18:	e00c      	b.n	8009d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d1a:	4b9d      	ldr	r3, [pc, #628]	@ (8009f90 <UART_SetConfig+0x92c>)
 8009d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d1e:	e009      	b.n	8009d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d26:	e005      	b.n	8009d34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 81de 	beq.w	800a0f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	4a94      	ldr	r2, [pc, #592]	@ (8009f94 <UART_SetConfig+0x930>)
 8009d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d305      	bcc.n	8009d6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d903      	bls.n	8009d74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d72:	e1c1      	b.n	800a0f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d76:	2200      	movs	r2, #0
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	60fa      	str	r2, [r7, #12]
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d80:	4a84      	ldr	r2, [pc, #528]	@ (8009f94 <UART_SetConfig+0x930>)
 8009d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	2200      	movs	r2, #0
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d96:	f7f6 fcb7 	bl	8000708 <__aeabi_uldivmod>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4610      	mov	r0, r2
 8009da0:	4619      	mov	r1, r3
 8009da2:	f04f 0200 	mov.w	r2, #0
 8009da6:	f04f 0300 	mov.w	r3, #0
 8009daa:	020b      	lsls	r3, r1, #8
 8009dac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009db0:	0202      	lsls	r2, r0, #8
 8009db2:	6979      	ldr	r1, [r7, #20]
 8009db4:	6849      	ldr	r1, [r1, #4]
 8009db6:	0849      	lsrs	r1, r1, #1
 8009db8:	2000      	movs	r0, #0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	eb12 0804 	adds.w	r8, r2, r4
 8009dc2:	eb43 0905 	adc.w	r9, r3, r5
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	469a      	mov	sl, r3
 8009dce:	4693      	mov	fp, r2
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fc96 	bl	8000708 <__aeabi_uldivmod>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4613      	mov	r3, r2
 8009de2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dea:	d308      	bcc.n	8009dfe <UART_SetConfig+0x79a>
 8009dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009df2:	d204      	bcs.n	8009dfe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dfa:	60da      	str	r2, [r3, #12]
 8009dfc:	e17c      	b.n	800a0f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e04:	e178      	b.n	800a0f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e0e:	f040 80c5 	bne.w	8009f9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009e12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	dc48      	bgt.n	8009eac <UART_SetConfig+0x848>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	db7b      	blt.n	8009f16 <UART_SetConfig+0x8b2>
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d879      	bhi.n	8009f16 <UART_SetConfig+0x8b2>
 8009e22:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <UART_SetConfig+0x7c4>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009eb3 	.word	0x08009eb3
 8009e2c:	08009ebb 	.word	0x08009ebb
 8009e30:	08009f17 	.word	0x08009f17
 8009e34:	08009f17 	.word	0x08009f17
 8009e38:	08009ec3 	.word	0x08009ec3
 8009e3c:	08009f17 	.word	0x08009f17
 8009e40:	08009f17 	.word	0x08009f17
 8009e44:	08009f17 	.word	0x08009f17
 8009e48:	08009ed3 	.word	0x08009ed3
 8009e4c:	08009f17 	.word	0x08009f17
 8009e50:	08009f17 	.word	0x08009f17
 8009e54:	08009f17 	.word	0x08009f17
 8009e58:	08009f17 	.word	0x08009f17
 8009e5c:	08009f17 	.word	0x08009f17
 8009e60:	08009f17 	.word	0x08009f17
 8009e64:	08009f17 	.word	0x08009f17
 8009e68:	08009ee3 	.word	0x08009ee3
 8009e6c:	08009f17 	.word	0x08009f17
 8009e70:	08009f17 	.word	0x08009f17
 8009e74:	08009f17 	.word	0x08009f17
 8009e78:	08009f17 	.word	0x08009f17
 8009e7c:	08009f17 	.word	0x08009f17
 8009e80:	08009f17 	.word	0x08009f17
 8009e84:	08009f17 	.word	0x08009f17
 8009e88:	08009f17 	.word	0x08009f17
 8009e8c:	08009f17 	.word	0x08009f17
 8009e90:	08009f17 	.word	0x08009f17
 8009e94:	08009f17 	.word	0x08009f17
 8009e98:	08009f17 	.word	0x08009f17
 8009e9c:	08009f17 	.word	0x08009f17
 8009ea0:	08009f17 	.word	0x08009f17
 8009ea4:	08009f17 	.word	0x08009f17
 8009ea8:	08009f09 	.word	0x08009f09
 8009eac:	2b40      	cmp	r3, #64	@ 0x40
 8009eae:	d02e      	beq.n	8009f0e <UART_SetConfig+0x8aa>
 8009eb0:	e031      	b.n	8009f16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb2:	f7fb fd17 	bl	80058e4 <HAL_RCC_GetPCLK1Freq>
 8009eb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009eb8:	e033      	b.n	8009f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eba:	f7fb fd29 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 8009ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ec0:	e02f      	b.n	8009f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fc ff58 	bl	8006d7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed0:	e027      	b.n	8009f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed2:	f107 0318 	add.w	r3, r7, #24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd f8a4 	bl	8007024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee0:	e01f      	b.n	8009f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8009f98 <UART_SetConfig+0x934>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009eee:	4b2a      	ldr	r3, [pc, #168]	@ (8009f98 <UART_SetConfig+0x934>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	08db      	lsrs	r3, r3, #3
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	4a24      	ldr	r2, [pc, #144]	@ (8009f8c <UART_SetConfig+0x928>)
 8009efa:	fa22 f303 	lsr.w	r3, r2, r3
 8009efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f00:	e00f      	b.n	8009f22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f02:	4b22      	ldr	r3, [pc, #136]	@ (8009f8c <UART_SetConfig+0x928>)
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f06:	e00c      	b.n	8009f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f08:	4b21      	ldr	r3, [pc, #132]	@ (8009f90 <UART_SetConfig+0x92c>)
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0c:	e009      	b.n	8009f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f14:	e005      	b.n	8009f22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 80e7 	beq.w	800a0f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2e:	4a19      	ldr	r2, [pc, #100]	@ (8009f94 <UART_SetConfig+0x930>)
 8009f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f34:	461a      	mov	r2, r3
 8009f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f3c:	005a      	lsls	r2, r3, #1
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	085b      	lsrs	r3, r3, #1
 8009f44:	441a      	add	r2, r3
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f52:	2b0f      	cmp	r3, #15
 8009f54:	d916      	bls.n	8009f84 <UART_SetConfig+0x920>
 8009f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f5c:	d212      	bcs.n	8009f84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	f023 030f 	bic.w	r3, r3, #15
 8009f66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f76:	4313      	orrs	r3, r2
 8009f78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009f80:	60da      	str	r2, [r3, #12]
 8009f82:	e0b9      	b.n	800a0f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f8a:	e0b5      	b.n	800a0f8 <UART_SetConfig+0xa94>
 8009f8c:	03d09000 	.word	0x03d09000
 8009f90:	003d0900 	.word	0x003d0900
 8009f94:	0800fae0 	.word	0x0800fae0
 8009f98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fa0:	2b20      	cmp	r3, #32
 8009fa2:	dc49      	bgt.n	800a038 <UART_SetConfig+0x9d4>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	db7c      	blt.n	800a0a2 <UART_SetConfig+0xa3e>
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d87a      	bhi.n	800a0a2 <UART_SetConfig+0xa3e>
 8009fac:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <UART_SetConfig+0x950>)
 8009fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb2:	bf00      	nop
 8009fb4:	0800a03f 	.word	0x0800a03f
 8009fb8:	0800a047 	.word	0x0800a047
 8009fbc:	0800a0a3 	.word	0x0800a0a3
 8009fc0:	0800a0a3 	.word	0x0800a0a3
 8009fc4:	0800a04f 	.word	0x0800a04f
 8009fc8:	0800a0a3 	.word	0x0800a0a3
 8009fcc:	0800a0a3 	.word	0x0800a0a3
 8009fd0:	0800a0a3 	.word	0x0800a0a3
 8009fd4:	0800a05f 	.word	0x0800a05f
 8009fd8:	0800a0a3 	.word	0x0800a0a3
 8009fdc:	0800a0a3 	.word	0x0800a0a3
 8009fe0:	0800a0a3 	.word	0x0800a0a3
 8009fe4:	0800a0a3 	.word	0x0800a0a3
 8009fe8:	0800a0a3 	.word	0x0800a0a3
 8009fec:	0800a0a3 	.word	0x0800a0a3
 8009ff0:	0800a0a3 	.word	0x0800a0a3
 8009ff4:	0800a06f 	.word	0x0800a06f
 8009ff8:	0800a0a3 	.word	0x0800a0a3
 8009ffc:	0800a0a3 	.word	0x0800a0a3
 800a000:	0800a0a3 	.word	0x0800a0a3
 800a004:	0800a0a3 	.word	0x0800a0a3
 800a008:	0800a0a3 	.word	0x0800a0a3
 800a00c:	0800a0a3 	.word	0x0800a0a3
 800a010:	0800a0a3 	.word	0x0800a0a3
 800a014:	0800a0a3 	.word	0x0800a0a3
 800a018:	0800a0a3 	.word	0x0800a0a3
 800a01c:	0800a0a3 	.word	0x0800a0a3
 800a020:	0800a0a3 	.word	0x0800a0a3
 800a024:	0800a0a3 	.word	0x0800a0a3
 800a028:	0800a0a3 	.word	0x0800a0a3
 800a02c:	0800a0a3 	.word	0x0800a0a3
 800a030:	0800a0a3 	.word	0x0800a0a3
 800a034:	0800a095 	.word	0x0800a095
 800a038:	2b40      	cmp	r3, #64	@ 0x40
 800a03a:	d02e      	beq.n	800a09a <UART_SetConfig+0xa36>
 800a03c:	e031      	b.n	800a0a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a03e:	f7fb fc51 	bl	80058e4 <HAL_RCC_GetPCLK1Freq>
 800a042:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a044:	e033      	b.n	800a0ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a046:	f7fb fc63 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 800a04a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a04c:	e02f      	b.n	800a0ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a04e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a052:	4618      	mov	r0, r3
 800a054:	f7fc fe92 	bl	8006d7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a05c:	e027      	b.n	800a0ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4618      	mov	r0, r3
 800a064:	f7fc ffde 	bl	8007024 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a06c:	e01f      	b.n	800a0ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a06e:	4b2d      	ldr	r3, [pc, #180]	@ (800a124 <UART_SetConfig+0xac0>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a07a:	4b2a      	ldr	r3, [pc, #168]	@ (800a124 <UART_SetConfig+0xac0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	08db      	lsrs	r3, r3, #3
 800a080:	f003 0303 	and.w	r3, r3, #3
 800a084:	4a28      	ldr	r2, [pc, #160]	@ (800a128 <UART_SetConfig+0xac4>)
 800a086:	fa22 f303 	lsr.w	r3, r2, r3
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a08c:	e00f      	b.n	800a0ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a08e:	4b26      	ldr	r3, [pc, #152]	@ (800a128 <UART_SetConfig+0xac4>)
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a092:	e00c      	b.n	800a0ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a094:	4b25      	ldr	r3, [pc, #148]	@ (800a12c <UART_SetConfig+0xac8>)
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	e009      	b.n	800a0ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a09a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a0:	e005      	b.n	800a0ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a0ac:	bf00      	nop
    }

    if (pclk != 0U)
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d021      	beq.n	800a0f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a130 <UART_SetConfig+0xacc>)
 800a0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	085b      	lsrs	r3, r3, #1
 800a0cc:	441a      	add	r2, r3
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d909      	bls.n	800a0f2 <UART_SetConfig+0xa8e>
 800a0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0e4:	d205      	bcs.n	800a0f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60da      	str	r2, [r3, #12]
 800a0f0:	e002      	b.n	800a0f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2201      	movs	r2, #1
 800a104:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2200      	movs	r2, #0
 800a10c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2200      	movs	r2, #0
 800a112:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a114:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3748      	adds	r7, #72	@ 0x48
 800a11c:	46bd      	mov	sp, r7
 800a11e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a122:	bf00      	nop
 800a124:	58024400 	.word	0x58024400
 800a128:	03d09000 	.word	0x03d09000
 800a12c:	003d0900 	.word	0x003d0900
 800a130:	0800fae0 	.word	0x0800fae0

0800a134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a140:	f003 0308 	and.w	r3, r3, #8
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a184:	f003 0302 	and.w	r3, r3, #2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00a      	beq.n	800a1a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01a      	beq.n	800a24a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a22e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a232:	d10a      	bne.n	800a24a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	430a      	orrs	r2, r1
 800a248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	605a      	str	r2, [r3, #4]
  }
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b098      	sub	sp, #96	@ 0x60
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a288:	f7f7 fe04 	bl	8001e94 <HAL_GetTick>
 800a28c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d12f      	bne.n	800a2fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a29c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f88e 	bl	800a3cc <UART_WaitOnFlagUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d022      	beq.n	800a2fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	e853 3f00 	ldrex	r3, [r3]
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e6      	bne.n	800a2b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e063      	b.n	800a3c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	2b04      	cmp	r3, #4
 800a308:	d149      	bne.n	800a39e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a30a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a312:	2200      	movs	r2, #0
 800a314:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f857 	bl	800a3cc <UART_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d03c      	beq.n	800a39e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	623b      	str	r3, [r7, #32]
   return(result);
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a342:	633b      	str	r3, [r7, #48]	@ 0x30
 800a344:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e6      	bne.n	800a324 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3308      	adds	r3, #8
 800a35c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	60fb      	str	r3, [r7, #12]
   return(result);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a376:	61fa      	str	r2, [r7, #28]
 800a378:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	69b9      	ldr	r1, [r7, #24]
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	617b      	str	r3, [r7, #20]
   return(result);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e5      	bne.n	800a356 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e012      	b.n	800a3c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3758      	adds	r7, #88	@ 0x58
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3dc:	e04f      	b.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e4:	d04b      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e6:	f7f7 fd55 	bl	8001e94 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d302      	bcc.n	800a3fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e04e      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d037      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b80      	cmp	r3, #128	@ 0x80
 800a412:	d034      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b40      	cmp	r3, #64	@ 0x40
 800a418:	d031      	beq.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69db      	ldr	r3, [r3, #28]
 800a420:	f003 0308 	and.w	r3, r3, #8
 800a424:	2b08      	cmp	r3, #8
 800a426:	d110      	bne.n	800a44a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2208      	movs	r2, #8
 800a42e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f95b 	bl	800a6ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2208      	movs	r2, #8
 800a43a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e029      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a458:	d111      	bne.n	800a47e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a462:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 f941 	bl	800a6ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2220      	movs	r2, #32
 800a46e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e00f      	b.n	800a49e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4013      	ands	r3, r2
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	bf0c      	ite	eq
 800a48e:	2301      	moveq	r3, #1
 800a490:	2300      	movne	r3, #0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	461a      	mov	r2, r3
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d0a0      	beq.n	800a3de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b0a3      	sub	sp, #140	@ 0x8c
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	88fa      	ldrh	r2, [r7, #6]
 800a4c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	88fa      	ldrh	r2, [r7, #6]
 800a4c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4da:	d10e      	bne.n	800a4fa <UART_Start_Receive_IT+0x52>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <UART_Start_Receive_IT+0x48>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a4ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4ee:	e02d      	b.n	800a54c <UART_Start_Receive_IT+0xa4>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	22ff      	movs	r2, #255	@ 0xff
 800a4f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a4f8:	e028      	b.n	800a54c <UART_Start_Receive_IT+0xa4>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10d      	bne.n	800a51e <UART_Start_Receive_IT+0x76>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d104      	bne.n	800a514 <UART_Start_Receive_IT+0x6c>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	22ff      	movs	r2, #255	@ 0xff
 800a50e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a512:	e01b      	b.n	800a54c <UART_Start_Receive_IT+0xa4>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	227f      	movs	r2, #127	@ 0x7f
 800a518:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a51c:	e016      	b.n	800a54c <UART_Start_Receive_IT+0xa4>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a526:	d10d      	bne.n	800a544 <UART_Start_Receive_IT+0x9c>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <UART_Start_Receive_IT+0x92>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	227f      	movs	r2, #127	@ 0x7f
 800a534:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a538:	e008      	b.n	800a54c <UART_Start_Receive_IT+0xa4>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	223f      	movs	r2, #63	@ 0x3f
 800a53e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a542:	e003      	b.n	800a54c <UART_Start_Receive_IT+0xa4>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2222      	movs	r2, #34	@ 0x22
 800a558:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a56c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a580:	673a      	str	r2, [r7, #112]	@ 0x70
 800a582:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a586:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a58e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e3      	bne.n	800a55c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a59c:	d14f      	bne.n	800a63e <UART_Start_Receive_IT+0x196>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a5a4:	88fa      	ldrh	r2, [r7, #6]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d349      	bcc.n	800a63e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5b2:	d107      	bne.n	800a5c4 <UART_Start_Receive_IT+0x11c>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4a47      	ldr	r2, [pc, #284]	@ (800a6dc <UART_Start_Receive_IT+0x234>)
 800a5c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800a5c2:	e002      	b.n	800a5ca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4a46      	ldr	r2, [pc, #280]	@ (800a6e0 <UART_Start_Receive_IT+0x238>)
 800a5c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01a      	beq.n	800a608 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a5f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5f6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a5fc:	e841 2300 	strex	r3, r2, [r1]
 800a600:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e4      	bne.n	800a5d2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3308      	adds	r3, #8
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a61e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3308      	adds	r3, #8
 800a626:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a628:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a62a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a62e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a630:	e841 2300 	strex	r3, r2, [r1]
 800a634:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e5      	bne.n	800a608 <UART_Start_Receive_IT+0x160>
 800a63c:	e046      	b.n	800a6cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a646:	d107      	bne.n	800a658 <UART_Start_Receive_IT+0x1b0>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d103      	bne.n	800a658 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a24      	ldr	r2, [pc, #144]	@ (800a6e4 <UART_Start_Receive_IT+0x23c>)
 800a654:	675a      	str	r2, [r3, #116]	@ 0x74
 800a656:	e002      	b.n	800a65e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4a23      	ldr	r2, [pc, #140]	@ (800a6e8 <UART_Start_Receive_IT+0x240>)
 800a65c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d019      	beq.n	800a69a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	e853 3f00 	ldrex	r3, [r3]
 800a672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a67a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a684:	637b      	str	r3, [r7, #52]	@ 0x34
 800a686:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a688:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a68a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a68c:	e841 2300 	strex	r3, r2, [r1]
 800a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1e6      	bne.n	800a666 <UART_Start_Receive_IT+0x1be>
 800a698:	e018      	b.n	800a6cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f043 0320 	orr.w	r3, r3, #32
 800a6ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6b8:	623b      	str	r3, [r7, #32]
 800a6ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	69f9      	ldr	r1, [r7, #28]
 800a6be:	6a3a      	ldr	r2, [r7, #32]
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e6      	bne.n	800a69a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	378c      	adds	r7, #140	@ 0x8c
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	0800af0d 	.word	0x0800af0d
 800a6e0:	0800abad 	.word	0x0800abad
 800a6e4:	0800a9f5 	.word	0x0800a9f5
 800a6e8:	0800a83d 	.word	0x0800a83d

0800a6ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b095      	sub	sp, #84	@ 0x54
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a712:	643b      	str	r3, [r7, #64]	@ 0x40
 800a714:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e6      	bne.n	800a6f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	61fb      	str	r3, [r7, #28]
   return(result);
 800a736:	69fa      	ldr	r2, [r7, #28]
 800a738:	4b1e      	ldr	r3, [pc, #120]	@ (800a7b4 <UART_EndRxTransfer+0xc8>)
 800a73a:	4013      	ands	r3, r2
 800a73c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3308      	adds	r3, #8
 800a744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a74c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e5      	bne.n	800a726 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d118      	bne.n	800a794 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e853 3f00 	ldrex	r3, [r3]
 800a76e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	f023 0310 	bic.w	r3, r3, #16
 800a776:	647b      	str	r3, [r7, #68]	@ 0x44
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a780:	61bb      	str	r3, [r7, #24]
 800a782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a784:	6979      	ldr	r1, [r7, #20]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	e841 2300 	strex	r3, r2, [r1]
 800a78c:	613b      	str	r3, [r7, #16]
   return(result);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1e6      	bne.n	800a762 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2220      	movs	r2, #32
 800a798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7a8:	bf00      	nop
 800a7aa:	3754      	adds	r7, #84	@ 0x54
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	effffffe 	.word	0xeffffffe

0800a7b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f7fe ff2e 	bl	8009638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	e853 3f00 	ldrex	r3, [r3]
 800a7f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a800:	61fb      	str	r3, [r7, #28]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	61bb      	str	r3, [r7, #24]
 800a80c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80e:	6979      	ldr	r1, [r7, #20]
 800a810:	69ba      	ldr	r2, [r7, #24]
 800a812:	e841 2300 	strex	r3, r2, [r1]
 800a816:	613b      	str	r3, [r7, #16]
   return(result);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1e6      	bne.n	800a7ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7fe fef9 	bl	8009624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a832:	bf00      	nop
 800a834:	3720      	adds	r7, #32
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b09c      	sub	sp, #112	@ 0x70
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a84a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a854:	2b22      	cmp	r3, #34	@ 0x22
 800a856:	f040 80be 	bne.w	800a9d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a860:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a868:	b2d9      	uxtb	r1, r3
 800a86a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a874:	400a      	ands	r2, r1
 800a876:	b2d2      	uxtb	r2, r2
 800a878:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 80a1 	bne.w	800a9e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8ca:	e841 2300 	strex	r3, r2, [r1]
 800a8ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1e6      	bne.n	800a8a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e8:	f023 0301 	bic.w	r3, r3, #1
 800a8ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e5      	bne.n	800a8d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a33      	ldr	r2, [pc, #204]	@ (800a9f0 <UART_RxISR_8BIT+0x1b4>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d01f      	beq.n	800a968 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d018      	beq.n	800a968 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	623b      	str	r3, [r7, #32]
   return(result);
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a94a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a954:	633b      	str	r3, [r7, #48]	@ 0x30
 800a956:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e6      	bne.n	800a936 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d12e      	bne.n	800a9ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	60fb      	str	r3, [r7, #12]
   return(result);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0310 	bic.w	r3, r3, #16
 800a98a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	461a      	mov	r2, r3
 800a992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a994:	61fb      	str	r3, [r7, #28]
 800a996:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	69b9      	ldr	r1, [r7, #24]
 800a99a:	69fa      	ldr	r2, [r7, #28]
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e6      	bne.n	800a976 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f003 0310 	and.w	r3, r3, #16
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	d103      	bne.n	800a9be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2210      	movs	r2, #16
 800a9bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7fe fe40 	bl	800964c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9cc:	e00b      	b.n	800a9e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7f6 fd66 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 800a9d4:	e007      	b.n	800a9e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f042 0208 	orr.w	r2, r2, #8
 800a9e4:	619a      	str	r2, [r3, #24]
}
 800a9e6:	bf00      	nop
 800a9e8:	3770      	adds	r7, #112	@ 0x70
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	58000c00 	.word	0x58000c00

0800a9f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b09c      	sub	sp, #112	@ 0x70
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa0c:	2b22      	cmp	r3, #34	@ 0x22
 800aa0e:	f040 80be 	bne.w	800ab8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa20:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800aa22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800aa26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa36:	1c9a      	adds	r2, r3, #2
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f040 80a1 	bne.w	800ab9e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aa6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa70:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa82:	e841 2300 	strex	r3, r2, [r1]
 800aa86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1e6      	bne.n	800aa5c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3308      	adds	r3, #8
 800aa94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa98:	e853 3f00 	ldrex	r3, [r3]
 800aa9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	f023 0301 	bic.w	r3, r3, #1
 800aaa4:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3308      	adds	r3, #8
 800aaac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aaae:	643a      	str	r2, [r7, #64]	@ 0x40
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e5      	bne.n	800aa8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a33      	ldr	r2, [pc, #204]	@ (800aba8 <UART_RxISR_16BIT+0x1b4>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d01f      	beq.n	800ab20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d018      	beq.n	800ab20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	61fb      	str	r3, [r7, #28]
   return(result);
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e6      	bne.n	800aaee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d12e      	bne.n	800ab86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	e853 3f00 	ldrex	r3, [r3]
 800ab3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f023 0310 	bic.w	r3, r3, #16
 800ab42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab4c:	61bb      	str	r3, [r7, #24]
 800ab4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6979      	ldr	r1, [r7, #20]
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	e841 2300 	strex	r3, r2, [r1]
 800ab58:	613b      	str	r3, [r7, #16]
   return(result);
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e6      	bne.n	800ab2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	f003 0310 	and.w	r3, r3, #16
 800ab6a:	2b10      	cmp	r3, #16
 800ab6c:	d103      	bne.n	800ab76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2210      	movs	r2, #16
 800ab74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7fe fd64 	bl	800964c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab84:	e00b      	b.n	800ab9e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7f6 fc8a 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 800ab8c:	e007      	b.n	800ab9e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0208 	orr.w	r2, r2, #8
 800ab9c:	619a      	str	r2, [r3, #24]
}
 800ab9e:	bf00      	nop
 800aba0:	3770      	adds	r7, #112	@ 0x70
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	58000c00 	.word	0x58000c00

0800abac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b0ac      	sub	sp, #176	@ 0xb0
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800abba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abe2:	2b22      	cmp	r3, #34	@ 0x22
 800abe4:	f040 8180 	bne.w	800aee8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800abee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abf2:	e123      	b.n	800ae3c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abfe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ac02:	b2d9      	uxtb	r1, r3
 800ac04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac0e:	400a      	ands	r2, r1
 800ac10:	b2d2      	uxtb	r2, r2
 800ac12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	3b01      	subs	r3, #1
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ac3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d053      	beq.n	800acee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d011      	beq.n	800ac76 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ac52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ac56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00b      	beq.n	800ac76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2201      	movs	r2, #1
 800ac64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac6c:	f043 0201 	orr.w	r2, r3, #1
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d011      	beq.n	800aca6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ac82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00b      	beq.n	800aca6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2202      	movs	r2, #2
 800ac94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac9c:	f043 0204 	orr.w	r2, r3, #4
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acaa:	f003 0304 	and.w	r3, r3, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d011      	beq.n	800acd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800acb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00b      	beq.n	800acd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2204      	movs	r2, #4
 800acc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800accc:	f043 0202 	orr.w	r2, r3, #2
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d006      	beq.n	800acee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7fe fca9 	bl	8009638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 80a0 	bne.w	800ae3c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ad0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad20:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ad24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ad2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e4      	bne.n	800acfc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3308      	adds	r3, #8
 800ad38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ad42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad44:	4b6e      	ldr	r3, [pc, #440]	@ (800af00 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ad46:	4013      	ands	r3, r2
 800ad48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3308      	adds	r3, #8
 800ad52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad56:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ad58:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ad5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ad64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e3      	bne.n	800ad32 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a60      	ldr	r2, [pc, #384]	@ (800af04 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d021      	beq.n	800adcc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d01a      	beq.n	800adcc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ada4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ada6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800adaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800adb8:	657b      	str	r3, [r7, #84]	@ 0x54
 800adba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800adbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adc0:	e841 2300 	strex	r3, r2, [r1]
 800adc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800adc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e4      	bne.n	800ad96 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800add0:	2b01      	cmp	r3, #1
 800add2:	d130      	bne.n	800ae36 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade2:	e853 3f00 	ldrex	r3, [r3]
 800ade6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ade8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adea:	f023 0310 	bic.w	r3, r3, #16
 800adee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adfc:	643b      	str	r3, [r7, #64]	@ 0x40
 800adfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae04:	e841 2300 	strex	r3, r2, [r1]
 800ae08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1e4      	bne.n	800adda <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	f003 0310 	and.w	r3, r3, #16
 800ae1a:	2b10      	cmp	r3, #16
 800ae1c:	d103      	bne.n	800ae26 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2210      	movs	r2, #16
 800ae24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7fe fc0c 	bl	800964c <HAL_UARTEx_RxEventCallback>
 800ae34:	e002      	b.n	800ae3c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7f6 fb32 	bl	80014a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae3c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ae44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f47f aed1 	bne.w	800abf4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d049      	beq.n	800aef8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae6a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d242      	bcs.n	800aef8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3308      	adds	r3, #8
 800ae78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3308      	adds	r3, #8
 800ae92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ae96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e3      	bne.n	800ae72 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a16      	ldr	r2, [pc, #88]	@ (800af08 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aeae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f043 0320 	orr.w	r3, r3, #32
 800aec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	461a      	mov	r2, r3
 800aece:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aed2:	61bb      	str	r3, [r7, #24]
 800aed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6979      	ldr	r1, [r7, #20]
 800aed8:	69ba      	ldr	r2, [r7, #24]
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	613b      	str	r3, [r7, #16]
   return(result);
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e4      	bne.n	800aeb0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aee6:	e007      	b.n	800aef8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	699a      	ldr	r2, [r3, #24]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f042 0208 	orr.w	r2, r2, #8
 800aef6:	619a      	str	r2, [r3, #24]
}
 800aef8:	bf00      	nop
 800aefa:	37b0      	adds	r7, #176	@ 0xb0
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	effffffe 	.word	0xeffffffe
 800af04:	58000c00 	.word	0x58000c00
 800af08:	0800a83d 	.word	0x0800a83d

0800af0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b0ae      	sub	sp, #184	@ 0xb8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af42:	2b22      	cmp	r3, #34	@ 0x22
 800af44:	f040 8184 	bne.w	800b250 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af52:	e127      	b.n	800b1a4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800af66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800af6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800af6e:	4013      	ands	r3, r2
 800af70:	b29a      	uxth	r2, r3
 800af72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af7c:	1c9a      	adds	r2, r3, #2
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af88:	b29b      	uxth	r3, r3
 800af8a:	3b01      	subs	r3, #1
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d053      	beq.n	800b052 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d011      	beq.n	800afda <UART_RxISR_16BIT_FIFOEN+0xce>
 800afb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2201      	movs	r2, #1
 800afc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd0:	f043 0201 	orr.w	r2, r3, #1
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d011      	beq.n	800b00a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800afe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00b      	beq.n	800b00a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2202      	movs	r2, #2
 800aff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b000:	f043 0204 	orr.w	r2, r3, #4
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b00a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b00e:	f003 0304 	and.w	r3, r3, #4
 800b012:	2b00      	cmp	r3, #0
 800b014:	d011      	beq.n	800b03a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00b      	beq.n	800b03a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2204      	movs	r2, #4
 800b028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b030:	f043 0202 	orr.w	r2, r3, #2
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b040:	2b00      	cmp	r3, #0
 800b042:	d006      	beq.n	800b052 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7fe faf7 	bl	8009638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b058:	b29b      	uxth	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f040 80a2 	bne.w	800b1a4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b06e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b086:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b08a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e2      	bne.n	800b060 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b0aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b0ac:	4b6e      	ldr	r3, [pc, #440]	@ (800b268 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b0be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b0c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b0cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e3      	bne.n	800b09a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a60      	ldr	r2, [pc, #384]	@ (800b26c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d021      	beq.n	800b134 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d01a      	beq.n	800b134 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b106:	e853 3f00 	ldrex	r3, [r3]
 800b10a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b10c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b120:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b122:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b126:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e4      	bne.n	800b0fe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d130      	bne.n	800b19e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	e853 3f00 	ldrex	r3, [r3]
 800b14e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b152:	f023 0310 	bic.w	r3, r3, #16
 800b156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b164:	647b      	str	r3, [r7, #68]	@ 0x44
 800b166:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b16a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e4      	bne.n	800b142 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69db      	ldr	r3, [r3, #28]
 800b17e:	f003 0310 	and.w	r3, r3, #16
 800b182:	2b10      	cmp	r3, #16
 800b184:	d103      	bne.n	800b18e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2210      	movs	r2, #16
 800b18c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7fe fa58 	bl	800964c <HAL_UARTEx_RxEventCallback>
 800b19c:	e002      	b.n	800b1a4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7f6 f97e 	bl	80014a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d006      	beq.n	800b1ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b1ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b1b0:	f003 0320 	and.w	r3, r3, #32
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f47f aecd 	bne.w	800af54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1c0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b1c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d049      	beq.n	800b260 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d242      	bcs.n	800b260 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3308      	adds	r3, #8
 800b1e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e4:	e853 3f00 	ldrex	r3, [r3]
 800b1e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800b200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e3      	bne.n	800b1da <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a16      	ldr	r2, [pc, #88]	@ (800b270 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b216:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	60fb      	str	r3, [r7, #12]
   return(result);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f043 0320 	orr.w	r3, r3, #32
 800b22c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	69b9      	ldr	r1, [r7, #24]
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	617b      	str	r3, [r7, #20]
   return(result);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e4      	bne.n	800b218 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b24e:	e007      	b.n	800b260 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0208 	orr.w	r2, r2, #8
 800b25e:	619a      	str	r2, [r3, #24]
}
 800b260:	bf00      	nop
 800b262:	37b8      	adds	r7, #184	@ 0xb8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	effffffe 	.word	0xeffffffe
 800b26c:	58000c00 	.word	0x58000c00
 800b270:	0800a9f5 	.word	0x0800a9f5

0800b274 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	e027      	b.n	800b316 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2224      	movs	r2, #36	@ 0x24
 800b2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0201 	bic.w	r2, r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2220      	movs	r2, #32
 800b308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b332:	2b01      	cmp	r3, #1
 800b334:	d101      	bne.n	800b33a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b336:	2302      	movs	r3, #2
 800b338:	e02d      	b.n	800b396 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2224      	movs	r2, #36	@ 0x24
 800b346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f022 0201 	bic.w	r2, r2, #1
 800b360:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f850 	bl	800b41c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2220      	movs	r2, #32
 800b388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d101      	bne.n	800b3b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	e02d      	b.n	800b412 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2224      	movs	r2, #36	@ 0x24
 800b3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f022 0201 	bic.w	r2, r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f812 	bl	800b41c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2220      	movs	r2, #32
 800b404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d108      	bne.n	800b43e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b43c:	e031      	b.n	800b4a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b43e:	2310      	movs	r3, #16
 800b440:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b442:	2310      	movs	r3, #16
 800b444:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	0e5b      	lsrs	r3, r3, #25
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	f003 0307 	and.w	r3, r3, #7
 800b454:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	0f5b      	lsrs	r3, r3, #29
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0307 	and.w	r3, r3, #7
 800b464:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	7b3a      	ldrb	r2, [r7, #12]
 800b46a:	4911      	ldr	r1, [pc, #68]	@ (800b4b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b46c:	5c8a      	ldrb	r2, [r1, r2]
 800b46e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b472:	7b3a      	ldrb	r2, [r7, #12]
 800b474:	490f      	ldr	r1, [pc, #60]	@ (800b4b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b476:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b478:	fb93 f3f2 	sdiv	r3, r3, r2
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	7b7a      	ldrb	r2, [r7, #13]
 800b488:	4909      	ldr	r1, [pc, #36]	@ (800b4b0 <UARTEx_SetNbDataToProcess+0x94>)
 800b48a:	5c8a      	ldrb	r2, [r1, r2]
 800b48c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b490:	7b7a      	ldrb	r2, [r7, #13]
 800b492:	4908      	ldr	r1, [pc, #32]	@ (800b4b4 <UARTEx_SetNbDataToProcess+0x98>)
 800b494:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b496:	fb93 f3f2 	sdiv	r3, r3, r2
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b4a2:	bf00      	nop
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	0800faf8 	.word	0x0800faf8
 800b4b4:	0800fb00 	.word	0x0800fb00

0800b4b8 <atof>:
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	f000 bdb9 	b.w	800c030 <strtod>

0800b4be <sulp>:
 800b4be:	b570      	push	{r4, r5, r6, lr}
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	ec45 4b10 	vmov	d0, r4, r5
 800b4ca:	f003 fbab 	bl	800ec24 <__ulp>
 800b4ce:	b17e      	cbz	r6, 800b4f0 <sulp+0x32>
 800b4d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4d4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dd09      	ble.n	800b4f0 <sulp+0x32>
 800b4dc:	051b      	lsls	r3, r3, #20
 800b4de:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b4e8:	ec41 0b17 	vmov	d7, r0, r1
 800b4ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	0000      	movs	r0, r0
 800b4f4:	0000      	movs	r0, r0
	...

0800b4f8 <_strtod_l>:
 800b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	ed2d 8b0a 	vpush	{d8-d12}
 800b500:	b097      	sub	sp, #92	@ 0x5c
 800b502:	4688      	mov	r8, r1
 800b504:	920e      	str	r2, [sp, #56]	@ 0x38
 800b506:	2200      	movs	r2, #0
 800b508:	9212      	str	r2, [sp, #72]	@ 0x48
 800b50a:	9005      	str	r0, [sp, #20]
 800b50c:	f04f 0a00 	mov.w	sl, #0
 800b510:	f04f 0b00 	mov.w	fp, #0
 800b514:	460a      	mov	r2, r1
 800b516:	9211      	str	r2, [sp, #68]	@ 0x44
 800b518:	7811      	ldrb	r1, [r2, #0]
 800b51a:	292b      	cmp	r1, #43	@ 0x2b
 800b51c:	d04c      	beq.n	800b5b8 <_strtod_l+0xc0>
 800b51e:	d839      	bhi.n	800b594 <_strtod_l+0x9c>
 800b520:	290d      	cmp	r1, #13
 800b522:	d833      	bhi.n	800b58c <_strtod_l+0x94>
 800b524:	2908      	cmp	r1, #8
 800b526:	d833      	bhi.n	800b590 <_strtod_l+0x98>
 800b528:	2900      	cmp	r1, #0
 800b52a:	d03c      	beq.n	800b5a6 <_strtod_l+0xae>
 800b52c:	2200      	movs	r2, #0
 800b52e:	9208      	str	r2, [sp, #32]
 800b530:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b532:	782a      	ldrb	r2, [r5, #0]
 800b534:	2a30      	cmp	r2, #48	@ 0x30
 800b536:	f040 80b5 	bne.w	800b6a4 <_strtod_l+0x1ac>
 800b53a:	786a      	ldrb	r2, [r5, #1]
 800b53c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b540:	2a58      	cmp	r2, #88	@ 0x58
 800b542:	d170      	bne.n	800b626 <_strtod_l+0x12e>
 800b544:	9302      	str	r3, [sp, #8]
 800b546:	9b08      	ldr	r3, [sp, #32]
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	ab12      	add	r3, sp, #72	@ 0x48
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	4a8b      	ldr	r2, [pc, #556]	@ (800b77c <_strtod_l+0x284>)
 800b550:	9805      	ldr	r0, [sp, #20]
 800b552:	ab13      	add	r3, sp, #76	@ 0x4c
 800b554:	a911      	add	r1, sp, #68	@ 0x44
 800b556:	f002 fc57 	bl	800de08 <__gethex>
 800b55a:	f010 060f 	ands.w	r6, r0, #15
 800b55e:	4604      	mov	r4, r0
 800b560:	d005      	beq.n	800b56e <_strtod_l+0x76>
 800b562:	2e06      	cmp	r6, #6
 800b564:	d12a      	bne.n	800b5bc <_strtod_l+0xc4>
 800b566:	3501      	adds	r5, #1
 800b568:	2300      	movs	r3, #0
 800b56a:	9511      	str	r5, [sp, #68]	@ 0x44
 800b56c:	9308      	str	r3, [sp, #32]
 800b56e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b570:	2b00      	cmp	r3, #0
 800b572:	f040 852f 	bne.w	800bfd4 <_strtod_l+0xadc>
 800b576:	9b08      	ldr	r3, [sp, #32]
 800b578:	ec4b ab10 	vmov	d0, sl, fp
 800b57c:	b1cb      	cbz	r3, 800b5b2 <_strtod_l+0xba>
 800b57e:	eeb1 0b40 	vneg.f64	d0, d0
 800b582:	b017      	add	sp, #92	@ 0x5c
 800b584:	ecbd 8b0a 	vpop	{d8-d12}
 800b588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58c:	2920      	cmp	r1, #32
 800b58e:	d1cd      	bne.n	800b52c <_strtod_l+0x34>
 800b590:	3201      	adds	r2, #1
 800b592:	e7c0      	b.n	800b516 <_strtod_l+0x1e>
 800b594:	292d      	cmp	r1, #45	@ 0x2d
 800b596:	d1c9      	bne.n	800b52c <_strtod_l+0x34>
 800b598:	2101      	movs	r1, #1
 800b59a:	9108      	str	r1, [sp, #32]
 800b59c:	1c51      	adds	r1, r2, #1
 800b59e:	9111      	str	r1, [sp, #68]	@ 0x44
 800b5a0:	7852      	ldrb	r2, [r2, #1]
 800b5a2:	2a00      	cmp	r2, #0
 800b5a4:	d1c4      	bne.n	800b530 <_strtod_l+0x38>
 800b5a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5a8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f040 850f 	bne.w	800bfd0 <_strtod_l+0xad8>
 800b5b2:	ec4b ab10 	vmov	d0, sl, fp
 800b5b6:	e7e4      	b.n	800b582 <_strtod_l+0x8a>
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	e7ee      	b.n	800b59a <_strtod_l+0xa2>
 800b5bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b5be:	b13a      	cbz	r2, 800b5d0 <_strtod_l+0xd8>
 800b5c0:	2135      	movs	r1, #53	@ 0x35
 800b5c2:	a814      	add	r0, sp, #80	@ 0x50
 800b5c4:	f003 fc25 	bl	800ee12 <__copybits>
 800b5c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b5ca:	9805      	ldr	r0, [sp, #20]
 800b5cc:	f002 fff6 	bl	800e5bc <_Bfree>
 800b5d0:	1e73      	subs	r3, r6, #1
 800b5d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b5d4:	2b04      	cmp	r3, #4
 800b5d6:	d806      	bhi.n	800b5e6 <_strtod_l+0xee>
 800b5d8:	e8df f003 	tbb	[pc, r3]
 800b5dc:	201d0314 	.word	0x201d0314
 800b5e0:	14          	.byte	0x14
 800b5e1:	00          	.byte	0x00
 800b5e2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b5e6:	05e3      	lsls	r3, r4, #23
 800b5e8:	bf48      	it	mi
 800b5ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b5ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5f2:	0d1b      	lsrs	r3, r3, #20
 800b5f4:	051b      	lsls	r3, r3, #20
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1b9      	bne.n	800b56e <_strtod_l+0x76>
 800b5fa:	f001 fd27 	bl	800d04c <__errno>
 800b5fe:	2322      	movs	r3, #34	@ 0x22
 800b600:	6003      	str	r3, [r0, #0]
 800b602:	e7b4      	b.n	800b56e <_strtod_l+0x76>
 800b604:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b608:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b60c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b610:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b614:	e7e7      	b.n	800b5e6 <_strtod_l+0xee>
 800b616:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b784 <_strtod_l+0x28c>
 800b61a:	e7e4      	b.n	800b5e6 <_strtod_l+0xee>
 800b61c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b620:	f04f 3aff 	mov.w	sl, #4294967295
 800b624:	e7df      	b.n	800b5e6 <_strtod_l+0xee>
 800b626:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b62c:	785b      	ldrb	r3, [r3, #1]
 800b62e:	2b30      	cmp	r3, #48	@ 0x30
 800b630:	d0f9      	beq.n	800b626 <_strtod_l+0x12e>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d09b      	beq.n	800b56e <_strtod_l+0x76>
 800b636:	2301      	movs	r3, #1
 800b638:	2600      	movs	r6, #0
 800b63a:	9307      	str	r3, [sp, #28]
 800b63c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b640:	46b1      	mov	r9, r6
 800b642:	4635      	mov	r5, r6
 800b644:	220a      	movs	r2, #10
 800b646:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b648:	7804      	ldrb	r4, [r0, #0]
 800b64a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b64e:	b2d9      	uxtb	r1, r3
 800b650:	2909      	cmp	r1, #9
 800b652:	d929      	bls.n	800b6a8 <_strtod_l+0x1b0>
 800b654:	494a      	ldr	r1, [pc, #296]	@ (800b780 <_strtod_l+0x288>)
 800b656:	2201      	movs	r2, #1
 800b658:	f001 fc9b 	bl	800cf92 <strncmp>
 800b65c:	b378      	cbz	r0, 800b6be <_strtod_l+0x1c6>
 800b65e:	2000      	movs	r0, #0
 800b660:	4622      	mov	r2, r4
 800b662:	462b      	mov	r3, r5
 800b664:	4607      	mov	r7, r0
 800b666:	9006      	str	r0, [sp, #24]
 800b668:	2a65      	cmp	r2, #101	@ 0x65
 800b66a:	d001      	beq.n	800b670 <_strtod_l+0x178>
 800b66c:	2a45      	cmp	r2, #69	@ 0x45
 800b66e:	d117      	bne.n	800b6a0 <_strtod_l+0x1a8>
 800b670:	b91b      	cbnz	r3, 800b67a <_strtod_l+0x182>
 800b672:	9b07      	ldr	r3, [sp, #28]
 800b674:	4303      	orrs	r3, r0
 800b676:	d096      	beq.n	800b5a6 <_strtod_l+0xae>
 800b678:	2300      	movs	r3, #0
 800b67a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b67e:	f108 0201 	add.w	r2, r8, #1
 800b682:	9211      	str	r2, [sp, #68]	@ 0x44
 800b684:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b688:	2a2b      	cmp	r2, #43	@ 0x2b
 800b68a:	d06b      	beq.n	800b764 <_strtod_l+0x26c>
 800b68c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b68e:	d071      	beq.n	800b774 <_strtod_l+0x27c>
 800b690:	f04f 0e00 	mov.w	lr, #0
 800b694:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b698:	2c09      	cmp	r4, #9
 800b69a:	d979      	bls.n	800b790 <_strtod_l+0x298>
 800b69c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	e094      	b.n	800b7ce <_strtod_l+0x2d6>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e7c7      	b.n	800b638 <_strtod_l+0x140>
 800b6a8:	2d08      	cmp	r5, #8
 800b6aa:	f100 0001 	add.w	r0, r0, #1
 800b6ae:	bfd4      	ite	le
 800b6b0:	fb02 3909 	mlale	r9, r2, r9, r3
 800b6b4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b6b8:	3501      	adds	r5, #1
 800b6ba:	9011      	str	r0, [sp, #68]	@ 0x44
 800b6bc:	e7c3      	b.n	800b646 <_strtod_l+0x14e>
 800b6be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	9211      	str	r2, [sp, #68]	@ 0x44
 800b6c4:	785a      	ldrb	r2, [r3, #1]
 800b6c6:	b375      	cbz	r5, 800b726 <_strtod_l+0x22e>
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b6d0:	2909      	cmp	r1, #9
 800b6d2:	d913      	bls.n	800b6fc <_strtod_l+0x204>
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	9106      	str	r1, [sp, #24]
 800b6d8:	e7c6      	b.n	800b668 <_strtod_l+0x170>
 800b6da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6dc:	1c5a      	adds	r2, r3, #1
 800b6de:	9211      	str	r2, [sp, #68]	@ 0x44
 800b6e0:	785a      	ldrb	r2, [r3, #1]
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	2a30      	cmp	r2, #48	@ 0x30
 800b6e6:	d0f8      	beq.n	800b6da <_strtod_l+0x1e2>
 800b6e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b6ec:	2b08      	cmp	r3, #8
 800b6ee:	f200 8476 	bhi.w	800bfde <_strtod_l+0xae6>
 800b6f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	3a30      	subs	r2, #48	@ 0x30
 800b6fe:	f100 0101 	add.w	r1, r0, #1
 800b702:	d023      	beq.n	800b74c <_strtod_l+0x254>
 800b704:	440f      	add	r7, r1
 800b706:	eb00 0c03 	add.w	ip, r0, r3
 800b70a:	4619      	mov	r1, r3
 800b70c:	240a      	movs	r4, #10
 800b70e:	4561      	cmp	r1, ip
 800b710:	d10b      	bne.n	800b72a <_strtod_l+0x232>
 800b712:	1c5c      	adds	r4, r3, #1
 800b714:	4403      	add	r3, r0
 800b716:	2b08      	cmp	r3, #8
 800b718:	4404      	add	r4, r0
 800b71a:	dc11      	bgt.n	800b740 <_strtod_l+0x248>
 800b71c:	230a      	movs	r3, #10
 800b71e:	fb03 2909 	mla	r9, r3, r9, r2
 800b722:	2100      	movs	r1, #0
 800b724:	e013      	b.n	800b74e <_strtod_l+0x256>
 800b726:	4628      	mov	r0, r5
 800b728:	e7dc      	b.n	800b6e4 <_strtod_l+0x1ec>
 800b72a:	2908      	cmp	r1, #8
 800b72c:	f101 0101 	add.w	r1, r1, #1
 800b730:	dc02      	bgt.n	800b738 <_strtod_l+0x240>
 800b732:	fb04 f909 	mul.w	r9, r4, r9
 800b736:	e7ea      	b.n	800b70e <_strtod_l+0x216>
 800b738:	2910      	cmp	r1, #16
 800b73a:	bfd8      	it	le
 800b73c:	4366      	mulle	r6, r4
 800b73e:	e7e6      	b.n	800b70e <_strtod_l+0x216>
 800b740:	2b0f      	cmp	r3, #15
 800b742:	dcee      	bgt.n	800b722 <_strtod_l+0x22a>
 800b744:	230a      	movs	r3, #10
 800b746:	fb03 2606 	mla	r6, r3, r6, r2
 800b74a:	e7ea      	b.n	800b722 <_strtod_l+0x22a>
 800b74c:	461c      	mov	r4, r3
 800b74e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b750:	1c5a      	adds	r2, r3, #1
 800b752:	9211      	str	r2, [sp, #68]	@ 0x44
 800b754:	785a      	ldrb	r2, [r3, #1]
 800b756:	4608      	mov	r0, r1
 800b758:	4623      	mov	r3, r4
 800b75a:	e7b7      	b.n	800b6cc <_strtod_l+0x1d4>
 800b75c:	2301      	movs	r3, #1
 800b75e:	2700      	movs	r7, #0
 800b760:	9306      	str	r3, [sp, #24]
 800b762:	e786      	b.n	800b672 <_strtod_l+0x17a>
 800b764:	f04f 0e00 	mov.w	lr, #0
 800b768:	f108 0202 	add.w	r2, r8, #2
 800b76c:	9211      	str	r2, [sp, #68]	@ 0x44
 800b76e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b772:	e78f      	b.n	800b694 <_strtod_l+0x19c>
 800b774:	f04f 0e01 	mov.w	lr, #1
 800b778:	e7f6      	b.n	800b768 <_strtod_l+0x270>
 800b77a:	bf00      	nop
 800b77c:	0800fb20 	.word	0x0800fb20
 800b780:	0800fb08 	.word	0x0800fb08
 800b784:	7ff00000 	.word	0x7ff00000
 800b788:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b78a:	1c54      	adds	r4, r2, #1
 800b78c:	9411      	str	r4, [sp, #68]	@ 0x44
 800b78e:	7852      	ldrb	r2, [r2, #1]
 800b790:	2a30      	cmp	r2, #48	@ 0x30
 800b792:	d0f9      	beq.n	800b788 <_strtod_l+0x290>
 800b794:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b798:	2c08      	cmp	r4, #8
 800b79a:	d881      	bhi.n	800b6a0 <_strtod_l+0x1a8>
 800b79c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b7a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7a6:	1c51      	adds	r1, r2, #1
 800b7a8:	9111      	str	r1, [sp, #68]	@ 0x44
 800b7aa:	7852      	ldrb	r2, [r2, #1]
 800b7ac:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b7b0:	2c09      	cmp	r4, #9
 800b7b2:	d938      	bls.n	800b826 <_strtod_l+0x32e>
 800b7b4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b7b6:	1b0c      	subs	r4, r1, r4
 800b7b8:	2c08      	cmp	r4, #8
 800b7ba:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b7be:	dc02      	bgt.n	800b7c6 <_strtod_l+0x2ce>
 800b7c0:	4564      	cmp	r4, ip
 800b7c2:	bfa8      	it	ge
 800b7c4:	4664      	movge	r4, ip
 800b7c6:	f1be 0f00 	cmp.w	lr, #0
 800b7ca:	d000      	beq.n	800b7ce <_strtod_l+0x2d6>
 800b7cc:	4264      	negs	r4, r4
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d14e      	bne.n	800b870 <_strtod_l+0x378>
 800b7d2:	9b07      	ldr	r3, [sp, #28]
 800b7d4:	4318      	orrs	r0, r3
 800b7d6:	f47f aeca 	bne.w	800b56e <_strtod_l+0x76>
 800b7da:	9b06      	ldr	r3, [sp, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f47f aee2 	bne.w	800b5a6 <_strtod_l+0xae>
 800b7e2:	2a69      	cmp	r2, #105	@ 0x69
 800b7e4:	d027      	beq.n	800b836 <_strtod_l+0x33e>
 800b7e6:	dc24      	bgt.n	800b832 <_strtod_l+0x33a>
 800b7e8:	2a49      	cmp	r2, #73	@ 0x49
 800b7ea:	d024      	beq.n	800b836 <_strtod_l+0x33e>
 800b7ec:	2a4e      	cmp	r2, #78	@ 0x4e
 800b7ee:	f47f aeda 	bne.w	800b5a6 <_strtod_l+0xae>
 800b7f2:	4997      	ldr	r1, [pc, #604]	@ (800ba50 <_strtod_l+0x558>)
 800b7f4:	a811      	add	r0, sp, #68	@ 0x44
 800b7f6:	f002 fd29 	bl	800e24c <__match>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	f43f aed3 	beq.w	800b5a6 <_strtod_l+0xae>
 800b800:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2b28      	cmp	r3, #40	@ 0x28
 800b806:	d12d      	bne.n	800b864 <_strtod_l+0x36c>
 800b808:	4992      	ldr	r1, [pc, #584]	@ (800ba54 <_strtod_l+0x55c>)
 800b80a:	aa14      	add	r2, sp, #80	@ 0x50
 800b80c:	a811      	add	r0, sp, #68	@ 0x44
 800b80e:	f002 fd31 	bl	800e274 <__hexnan>
 800b812:	2805      	cmp	r0, #5
 800b814:	d126      	bne.n	800b864 <_strtod_l+0x36c>
 800b816:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b818:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b81c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b820:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b824:	e6a3      	b.n	800b56e <_strtod_l+0x76>
 800b826:	240a      	movs	r4, #10
 800b828:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b82c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b830:	e7b8      	b.n	800b7a4 <_strtod_l+0x2ac>
 800b832:	2a6e      	cmp	r2, #110	@ 0x6e
 800b834:	e7db      	b.n	800b7ee <_strtod_l+0x2f6>
 800b836:	4988      	ldr	r1, [pc, #544]	@ (800ba58 <_strtod_l+0x560>)
 800b838:	a811      	add	r0, sp, #68	@ 0x44
 800b83a:	f002 fd07 	bl	800e24c <__match>
 800b83e:	2800      	cmp	r0, #0
 800b840:	f43f aeb1 	beq.w	800b5a6 <_strtod_l+0xae>
 800b844:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b846:	4985      	ldr	r1, [pc, #532]	@ (800ba5c <_strtod_l+0x564>)
 800b848:	3b01      	subs	r3, #1
 800b84a:	a811      	add	r0, sp, #68	@ 0x44
 800b84c:	9311      	str	r3, [sp, #68]	@ 0x44
 800b84e:	f002 fcfd 	bl	800e24c <__match>
 800b852:	b910      	cbnz	r0, 800b85a <_strtod_l+0x362>
 800b854:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b856:	3301      	adds	r3, #1
 800b858:	9311      	str	r3, [sp, #68]	@ 0x44
 800b85a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ba70 <_strtod_l+0x578>
 800b85e:	f04f 0a00 	mov.w	sl, #0
 800b862:	e684      	b.n	800b56e <_strtod_l+0x76>
 800b864:	487e      	ldr	r0, [pc, #504]	@ (800ba60 <_strtod_l+0x568>)
 800b866:	f001 fc2f 	bl	800d0c8 <nan>
 800b86a:	ec5b ab10 	vmov	sl, fp, d0
 800b86e:	e67e      	b.n	800b56e <_strtod_l+0x76>
 800b870:	ee07 9a90 	vmov	s15, r9
 800b874:	1be2      	subs	r2, r4, r7
 800b876:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b87a:	2d00      	cmp	r5, #0
 800b87c:	bf08      	it	eq
 800b87e:	461d      	moveq	r5, r3
 800b880:	2b10      	cmp	r3, #16
 800b882:	9209      	str	r2, [sp, #36]	@ 0x24
 800b884:	461a      	mov	r2, r3
 800b886:	bfa8      	it	ge
 800b888:	2210      	movge	r2, #16
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	ec5b ab17 	vmov	sl, fp, d7
 800b890:	dc15      	bgt.n	800b8be <_strtod_l+0x3c6>
 800b892:	1be1      	subs	r1, r4, r7
 800b894:	2900      	cmp	r1, #0
 800b896:	f43f ae6a 	beq.w	800b56e <_strtod_l+0x76>
 800b89a:	eba4 0107 	sub.w	r1, r4, r7
 800b89e:	dd72      	ble.n	800b986 <_strtod_l+0x48e>
 800b8a0:	2916      	cmp	r1, #22
 800b8a2:	dc59      	bgt.n	800b958 <_strtod_l+0x460>
 800b8a4:	4b6f      	ldr	r3, [pc, #444]	@ (800ba64 <_strtod_l+0x56c>)
 800b8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8ac:	ed93 7b00 	vldr	d7, [r3]
 800b8b0:	ec4b ab16 	vmov	d6, sl, fp
 800b8b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8b8:	ec5b ab17 	vmov	sl, fp, d7
 800b8bc:	e657      	b.n	800b56e <_strtod_l+0x76>
 800b8be:	4969      	ldr	r1, [pc, #420]	@ (800ba64 <_strtod_l+0x56c>)
 800b8c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b8c4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b8c8:	ee06 6a90 	vmov	s13, r6
 800b8cc:	2b0f      	cmp	r3, #15
 800b8ce:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b8d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b8d6:	ec5b ab16 	vmov	sl, fp, d6
 800b8da:	ddda      	ble.n	800b892 <_strtod_l+0x39a>
 800b8dc:	1a9a      	subs	r2, r3, r2
 800b8de:	1be1      	subs	r1, r4, r7
 800b8e0:	440a      	add	r2, r1
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	f340 8094 	ble.w	800ba10 <_strtod_l+0x518>
 800b8e8:	f012 000f 	ands.w	r0, r2, #15
 800b8ec:	d00a      	beq.n	800b904 <_strtod_l+0x40c>
 800b8ee:	495d      	ldr	r1, [pc, #372]	@ (800ba64 <_strtod_l+0x56c>)
 800b8f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b8f4:	ed91 7b00 	vldr	d7, [r1]
 800b8f8:	ec4b ab16 	vmov	d6, sl, fp
 800b8fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b900:	ec5b ab17 	vmov	sl, fp, d7
 800b904:	f032 020f 	bics.w	r2, r2, #15
 800b908:	d073      	beq.n	800b9f2 <_strtod_l+0x4fa>
 800b90a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b90e:	dd47      	ble.n	800b9a0 <_strtod_l+0x4a8>
 800b910:	2400      	movs	r4, #0
 800b912:	4625      	mov	r5, r4
 800b914:	9407      	str	r4, [sp, #28]
 800b916:	4626      	mov	r6, r4
 800b918:	9a05      	ldr	r2, [sp, #20]
 800b91a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ba70 <_strtod_l+0x578>
 800b91e:	2322      	movs	r3, #34	@ 0x22
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	f04f 0a00 	mov.w	sl, #0
 800b926:	9b07      	ldr	r3, [sp, #28]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f43f ae20 	beq.w	800b56e <_strtod_l+0x76>
 800b92e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b930:	9805      	ldr	r0, [sp, #20]
 800b932:	f002 fe43 	bl	800e5bc <_Bfree>
 800b936:	9805      	ldr	r0, [sp, #20]
 800b938:	4631      	mov	r1, r6
 800b93a:	f002 fe3f 	bl	800e5bc <_Bfree>
 800b93e:	9805      	ldr	r0, [sp, #20]
 800b940:	4629      	mov	r1, r5
 800b942:	f002 fe3b 	bl	800e5bc <_Bfree>
 800b946:	9907      	ldr	r1, [sp, #28]
 800b948:	9805      	ldr	r0, [sp, #20]
 800b94a:	f002 fe37 	bl	800e5bc <_Bfree>
 800b94e:	9805      	ldr	r0, [sp, #20]
 800b950:	4621      	mov	r1, r4
 800b952:	f002 fe33 	bl	800e5bc <_Bfree>
 800b956:	e60a      	b.n	800b56e <_strtod_l+0x76>
 800b958:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b95c:	1be0      	subs	r0, r4, r7
 800b95e:	4281      	cmp	r1, r0
 800b960:	dbbc      	blt.n	800b8dc <_strtod_l+0x3e4>
 800b962:	4a40      	ldr	r2, [pc, #256]	@ (800ba64 <_strtod_l+0x56c>)
 800b964:	f1c3 030f 	rsb	r3, r3, #15
 800b968:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b96c:	ed91 7b00 	vldr	d7, [r1]
 800b970:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b972:	ec4b ab16 	vmov	d6, sl, fp
 800b976:	1acb      	subs	r3, r1, r3
 800b978:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b97c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b980:	ed92 6b00 	vldr	d6, [r2]
 800b984:	e796      	b.n	800b8b4 <_strtod_l+0x3bc>
 800b986:	3116      	adds	r1, #22
 800b988:	dba8      	blt.n	800b8dc <_strtod_l+0x3e4>
 800b98a:	4b36      	ldr	r3, [pc, #216]	@ (800ba64 <_strtod_l+0x56c>)
 800b98c:	1b3c      	subs	r4, r7, r4
 800b98e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b992:	ed94 7b00 	vldr	d7, [r4]
 800b996:	ec4b ab16 	vmov	d6, sl, fp
 800b99a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b99e:	e78b      	b.n	800b8b8 <_strtod_l+0x3c0>
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	ec4b ab17 	vmov	d7, sl, fp
 800b9a6:	4e30      	ldr	r6, [pc, #192]	@ (800ba68 <_strtod_l+0x570>)
 800b9a8:	1112      	asrs	r2, r2, #4
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	2a01      	cmp	r2, #1
 800b9ae:	dc23      	bgt.n	800b9f8 <_strtod_l+0x500>
 800b9b0:	b108      	cbz	r0, 800b9b6 <_strtod_l+0x4be>
 800b9b2:	ec5b ab17 	vmov	sl, fp, d7
 800b9b6:	4a2c      	ldr	r2, [pc, #176]	@ (800ba68 <_strtod_l+0x570>)
 800b9b8:	482c      	ldr	r0, [pc, #176]	@ (800ba6c <_strtod_l+0x574>)
 800b9ba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b9be:	ed92 7b00 	vldr	d7, [r2]
 800b9c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b9c6:	ec4b ab16 	vmov	d6, sl, fp
 800b9ca:	4a29      	ldr	r2, [pc, #164]	@ (800ba70 <_strtod_l+0x578>)
 800b9cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9d0:	ee17 1a90 	vmov	r1, s15
 800b9d4:	400a      	ands	r2, r1
 800b9d6:	4282      	cmp	r2, r0
 800b9d8:	ec5b ab17 	vmov	sl, fp, d7
 800b9dc:	d898      	bhi.n	800b910 <_strtod_l+0x418>
 800b9de:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b9e2:	4282      	cmp	r2, r0
 800b9e4:	bf86      	itte	hi
 800b9e6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ba74 <_strtod_l+0x57c>
 800b9ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800b9ee:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	9206      	str	r2, [sp, #24]
 800b9f6:	e076      	b.n	800bae6 <_strtod_l+0x5ee>
 800b9f8:	f012 0f01 	tst.w	r2, #1
 800b9fc:	d004      	beq.n	800ba08 <_strtod_l+0x510>
 800b9fe:	ed96 6b00 	vldr	d6, [r6]
 800ba02:	2001      	movs	r0, #1
 800ba04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba08:	3101      	adds	r1, #1
 800ba0a:	1052      	asrs	r2, r2, #1
 800ba0c:	3608      	adds	r6, #8
 800ba0e:	e7cd      	b.n	800b9ac <_strtod_l+0x4b4>
 800ba10:	d0ef      	beq.n	800b9f2 <_strtod_l+0x4fa>
 800ba12:	4252      	negs	r2, r2
 800ba14:	f012 000f 	ands.w	r0, r2, #15
 800ba18:	d00a      	beq.n	800ba30 <_strtod_l+0x538>
 800ba1a:	4912      	ldr	r1, [pc, #72]	@ (800ba64 <_strtod_l+0x56c>)
 800ba1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ba20:	ed91 7b00 	vldr	d7, [r1]
 800ba24:	ec4b ab16 	vmov	d6, sl, fp
 800ba28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ba2c:	ec5b ab17 	vmov	sl, fp, d7
 800ba30:	1112      	asrs	r2, r2, #4
 800ba32:	d0de      	beq.n	800b9f2 <_strtod_l+0x4fa>
 800ba34:	2a1f      	cmp	r2, #31
 800ba36:	dd1f      	ble.n	800ba78 <_strtod_l+0x580>
 800ba38:	2400      	movs	r4, #0
 800ba3a:	4625      	mov	r5, r4
 800ba3c:	9407      	str	r4, [sp, #28]
 800ba3e:	4626      	mov	r6, r4
 800ba40:	9a05      	ldr	r2, [sp, #20]
 800ba42:	2322      	movs	r3, #34	@ 0x22
 800ba44:	f04f 0a00 	mov.w	sl, #0
 800ba48:	f04f 0b00 	mov.w	fp, #0
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	e76a      	b.n	800b926 <_strtod_l+0x42e>
 800ba50:	0800fb6d 	.word	0x0800fb6d
 800ba54:	0800fb0c 	.word	0x0800fb0c
 800ba58:	0800fb65 	.word	0x0800fb65
 800ba5c:	0800fba4 	.word	0x0800fba4
 800ba60:	0800ff35 	.word	0x0800ff35
 800ba64:	0800fd20 	.word	0x0800fd20
 800ba68:	0800fcf8 	.word	0x0800fcf8
 800ba6c:	7ca00000 	.word	0x7ca00000
 800ba70:	7ff00000 	.word	0x7ff00000
 800ba74:	7fefffff 	.word	0x7fefffff
 800ba78:	f012 0110 	ands.w	r1, r2, #16
 800ba7c:	bf18      	it	ne
 800ba7e:	216a      	movne	r1, #106	@ 0x6a
 800ba80:	9106      	str	r1, [sp, #24]
 800ba82:	ec4b ab17 	vmov	d7, sl, fp
 800ba86:	49b0      	ldr	r1, [pc, #704]	@ (800bd48 <_strtod_l+0x850>)
 800ba88:	2000      	movs	r0, #0
 800ba8a:	07d6      	lsls	r6, r2, #31
 800ba8c:	d504      	bpl.n	800ba98 <_strtod_l+0x5a0>
 800ba8e:	ed91 6b00 	vldr	d6, [r1]
 800ba92:	2001      	movs	r0, #1
 800ba94:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba98:	1052      	asrs	r2, r2, #1
 800ba9a:	f101 0108 	add.w	r1, r1, #8
 800ba9e:	d1f4      	bne.n	800ba8a <_strtod_l+0x592>
 800baa0:	b108      	cbz	r0, 800baa6 <_strtod_l+0x5ae>
 800baa2:	ec5b ab17 	vmov	sl, fp, d7
 800baa6:	9a06      	ldr	r2, [sp, #24]
 800baa8:	b1b2      	cbz	r2, 800bad8 <_strtod_l+0x5e0>
 800baaa:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800baae:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	4658      	mov	r0, fp
 800bab6:	dd0f      	ble.n	800bad8 <_strtod_l+0x5e0>
 800bab8:	2a1f      	cmp	r2, #31
 800baba:	dd55      	ble.n	800bb68 <_strtod_l+0x670>
 800babc:	2a34      	cmp	r2, #52	@ 0x34
 800babe:	bfde      	ittt	le
 800bac0:	f04f 32ff 	movle.w	r2, #4294967295
 800bac4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800bac8:	408a      	lslle	r2, r1
 800baca:	f04f 0a00 	mov.w	sl, #0
 800bace:	bfcc      	ite	gt
 800bad0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bad4:	ea02 0b00 	andle.w	fp, r2, r0
 800bad8:	ec4b ab17 	vmov	d7, sl, fp
 800badc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae4:	d0a8      	beq.n	800ba38 <_strtod_l+0x540>
 800bae6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bae8:	9805      	ldr	r0, [sp, #20]
 800baea:	f8cd 9000 	str.w	r9, [sp]
 800baee:	462a      	mov	r2, r5
 800baf0:	f002 fdcc 	bl	800e68c <__s2b>
 800baf4:	9007      	str	r0, [sp, #28]
 800baf6:	2800      	cmp	r0, #0
 800baf8:	f43f af0a 	beq.w	800b910 <_strtod_l+0x418>
 800bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafe:	1b3f      	subs	r7, r7, r4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfb4      	ite	lt
 800bb04:	463b      	movlt	r3, r7
 800bb06:	2300      	movge	r3, #0
 800bb08:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb0c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800bd38 <_strtod_l+0x840>
 800bb10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bb14:	2400      	movs	r4, #0
 800bb16:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb18:	4625      	mov	r5, r4
 800bb1a:	9b07      	ldr	r3, [sp, #28]
 800bb1c:	9805      	ldr	r0, [sp, #20]
 800bb1e:	6859      	ldr	r1, [r3, #4]
 800bb20:	f002 fd0c 	bl	800e53c <_Balloc>
 800bb24:	4606      	mov	r6, r0
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f43f aef6 	beq.w	800b918 <_strtod_l+0x420>
 800bb2c:	9b07      	ldr	r3, [sp, #28]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	ec4b ab19 	vmov	d9, sl, fp
 800bb34:	3202      	adds	r2, #2
 800bb36:	f103 010c 	add.w	r1, r3, #12
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	300c      	adds	r0, #12
 800bb3e:	f001 fab2 	bl	800d0a6 <memcpy>
 800bb42:	eeb0 0b49 	vmov.f64	d0, d9
 800bb46:	9805      	ldr	r0, [sp, #20]
 800bb48:	aa14      	add	r2, sp, #80	@ 0x50
 800bb4a:	a913      	add	r1, sp, #76	@ 0x4c
 800bb4c:	f003 f8da 	bl	800ed04 <__d2b>
 800bb50:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb52:	2800      	cmp	r0, #0
 800bb54:	f43f aee0 	beq.w	800b918 <_strtod_l+0x420>
 800bb58:	9805      	ldr	r0, [sp, #20]
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	f002 fe2c 	bl	800e7b8 <__i2b>
 800bb60:	4605      	mov	r5, r0
 800bb62:	b940      	cbnz	r0, 800bb76 <_strtod_l+0x67e>
 800bb64:	2500      	movs	r5, #0
 800bb66:	e6d7      	b.n	800b918 <_strtod_l+0x420>
 800bb68:	f04f 31ff 	mov.w	r1, #4294967295
 800bb6c:	fa01 f202 	lsl.w	r2, r1, r2
 800bb70:	ea02 0a0a 	and.w	sl, r2, sl
 800bb74:	e7b0      	b.n	800bad8 <_strtod_l+0x5e0>
 800bb76:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800bb78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bb7a:	2f00      	cmp	r7, #0
 800bb7c:	bfab      	itete	ge
 800bb7e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800bb80:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800bb82:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800bb86:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800bb8a:	bfac      	ite	ge
 800bb8c:	eb07 0903 	addge.w	r9, r7, r3
 800bb90:	eba3 0807 	sublt.w	r8, r3, r7
 800bb94:	9b06      	ldr	r3, [sp, #24]
 800bb96:	1aff      	subs	r7, r7, r3
 800bb98:	4417      	add	r7, r2
 800bb9a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800bb9e:	4a6b      	ldr	r2, [pc, #428]	@ (800bd4c <_strtod_l+0x854>)
 800bba0:	3f01      	subs	r7, #1
 800bba2:	4297      	cmp	r7, r2
 800bba4:	da51      	bge.n	800bc4a <_strtod_l+0x752>
 800bba6:	1bd1      	subs	r1, r2, r7
 800bba8:	291f      	cmp	r1, #31
 800bbaa:	eba3 0301 	sub.w	r3, r3, r1
 800bbae:	f04f 0201 	mov.w	r2, #1
 800bbb2:	dc3e      	bgt.n	800bc32 <_strtod_l+0x73a>
 800bbb4:	408a      	lsls	r2, r1
 800bbb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bbb8:	2200      	movs	r2, #0
 800bbba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bbbc:	eb09 0703 	add.w	r7, r9, r3
 800bbc0:	4498      	add	r8, r3
 800bbc2:	9b06      	ldr	r3, [sp, #24]
 800bbc4:	45b9      	cmp	r9, r7
 800bbc6:	4498      	add	r8, r3
 800bbc8:	464b      	mov	r3, r9
 800bbca:	bfa8      	it	ge
 800bbcc:	463b      	movge	r3, r7
 800bbce:	4543      	cmp	r3, r8
 800bbd0:	bfa8      	it	ge
 800bbd2:	4643      	movge	r3, r8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bfc2      	ittt	gt
 800bbd8:	1aff      	subgt	r7, r7, r3
 800bbda:	eba8 0803 	subgt.w	r8, r8, r3
 800bbde:	eba9 0903 	subgt.w	r9, r9, r3
 800bbe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dd16      	ble.n	800bc16 <_strtod_l+0x71e>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	9805      	ldr	r0, [sp, #20]
 800bbec:	461a      	mov	r2, r3
 800bbee:	f002 fea3 	bl	800e938 <__pow5mult>
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0b5      	beq.n	800bb64 <_strtod_l+0x66c>
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bbfc:	9805      	ldr	r0, [sp, #20]
 800bbfe:	f002 fdf1 	bl	800e7e4 <__multiply>
 800bc02:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f ae87 	beq.w	800b918 <_strtod_l+0x420>
 800bc0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bc0c:	9805      	ldr	r0, [sp, #20]
 800bc0e:	f002 fcd5 	bl	800e5bc <_Bfree>
 800bc12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc14:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc16:	2f00      	cmp	r7, #0
 800bc18:	dc1b      	bgt.n	800bc52 <_strtod_l+0x75a>
 800bc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dd21      	ble.n	800bc64 <_strtod_l+0x76c>
 800bc20:	4631      	mov	r1, r6
 800bc22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc24:	9805      	ldr	r0, [sp, #20]
 800bc26:	f002 fe87 	bl	800e938 <__pow5mult>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	b9d0      	cbnz	r0, 800bc64 <_strtod_l+0x76c>
 800bc2e:	2600      	movs	r6, #0
 800bc30:	e672      	b.n	800b918 <_strtod_l+0x420>
 800bc32:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800bc36:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800bc3a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800bc3e:	37e2      	adds	r7, #226	@ 0xe2
 800bc40:	fa02 f107 	lsl.w	r1, r2, r7
 800bc44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc46:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc48:	e7b8      	b.n	800bbbc <_strtod_l+0x6c4>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bc4e:	2201      	movs	r2, #1
 800bc50:	e7f9      	b.n	800bc46 <_strtod_l+0x74e>
 800bc52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bc54:	9805      	ldr	r0, [sp, #20]
 800bc56:	463a      	mov	r2, r7
 800bc58:	f002 fec8 	bl	800e9ec <__lshift>
 800bc5c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d1db      	bne.n	800bc1a <_strtod_l+0x722>
 800bc62:	e659      	b.n	800b918 <_strtod_l+0x420>
 800bc64:	f1b8 0f00 	cmp.w	r8, #0
 800bc68:	dd07      	ble.n	800bc7a <_strtod_l+0x782>
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	9805      	ldr	r0, [sp, #20]
 800bc6e:	4642      	mov	r2, r8
 800bc70:	f002 febc 	bl	800e9ec <__lshift>
 800bc74:	4606      	mov	r6, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d0d9      	beq.n	800bc2e <_strtod_l+0x736>
 800bc7a:	f1b9 0f00 	cmp.w	r9, #0
 800bc7e:	dd08      	ble.n	800bc92 <_strtod_l+0x79a>
 800bc80:	4629      	mov	r1, r5
 800bc82:	9805      	ldr	r0, [sp, #20]
 800bc84:	464a      	mov	r2, r9
 800bc86:	f002 feb1 	bl	800e9ec <__lshift>
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f43f ae43 	beq.w	800b918 <_strtod_l+0x420>
 800bc92:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bc94:	9805      	ldr	r0, [sp, #20]
 800bc96:	4632      	mov	r2, r6
 800bc98:	f002 ff30 	bl	800eafc <__mdiff>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f43f ae3a 	beq.w	800b918 <_strtod_l+0x420>
 800bca4:	2300      	movs	r3, #0
 800bca6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800bcaa:	60c3      	str	r3, [r0, #12]
 800bcac:	4629      	mov	r1, r5
 800bcae:	f002 ff09 	bl	800eac4 <__mcmp>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	da4e      	bge.n	800bd54 <_strtod_l+0x85c>
 800bcb6:	ea58 080a 	orrs.w	r8, r8, sl
 800bcba:	d174      	bne.n	800bda6 <_strtod_l+0x8ae>
 800bcbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d170      	bne.n	800bda6 <_strtod_l+0x8ae>
 800bcc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcc8:	0d1b      	lsrs	r3, r3, #20
 800bcca:	051b      	lsls	r3, r3, #20
 800bccc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bcd0:	d969      	bls.n	800bda6 <_strtod_l+0x8ae>
 800bcd2:	6963      	ldr	r3, [r4, #20]
 800bcd4:	b913      	cbnz	r3, 800bcdc <_strtod_l+0x7e4>
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	dd64      	ble.n	800bda6 <_strtod_l+0x8ae>
 800bcdc:	4621      	mov	r1, r4
 800bcde:	2201      	movs	r2, #1
 800bce0:	9805      	ldr	r0, [sp, #20]
 800bce2:	f002 fe83 	bl	800e9ec <__lshift>
 800bce6:	4629      	mov	r1, r5
 800bce8:	4604      	mov	r4, r0
 800bcea:	f002 feeb 	bl	800eac4 <__mcmp>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	dd59      	ble.n	800bda6 <_strtod_l+0x8ae>
 800bcf2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcf6:	9a06      	ldr	r2, [sp, #24]
 800bcf8:	0d1b      	lsrs	r3, r3, #20
 800bcfa:	051b      	lsls	r3, r3, #20
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	d070      	beq.n	800bde2 <_strtod_l+0x8ea>
 800bd00:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd04:	d86d      	bhi.n	800bde2 <_strtod_l+0x8ea>
 800bd06:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd0a:	f67f ae99 	bls.w	800ba40 <_strtod_l+0x548>
 800bd0e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800bd40 <_strtod_l+0x848>
 800bd12:	ec4b ab16 	vmov	d6, sl, fp
 800bd16:	4b0e      	ldr	r3, [pc, #56]	@ (800bd50 <_strtod_l+0x858>)
 800bd18:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bd1c:	ee17 2a90 	vmov	r2, s15
 800bd20:	4013      	ands	r3, r2
 800bd22:	ec5b ab17 	vmov	sl, fp, d7
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f47f ae01 	bne.w	800b92e <_strtod_l+0x436>
 800bd2c:	9a05      	ldr	r2, [sp, #20]
 800bd2e:	2322      	movs	r3, #34	@ 0x22
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	e5fc      	b.n	800b92e <_strtod_l+0x436>
 800bd34:	f3af 8000 	nop.w
 800bd38:	ffc00000 	.word	0xffc00000
 800bd3c:	41dfffff 	.word	0x41dfffff
 800bd40:	00000000 	.word	0x00000000
 800bd44:	39500000 	.word	0x39500000
 800bd48:	0800fb38 	.word	0x0800fb38
 800bd4c:	fffffc02 	.word	0xfffffc02
 800bd50:	7ff00000 	.word	0x7ff00000
 800bd54:	46d9      	mov	r9, fp
 800bd56:	d15d      	bne.n	800be14 <_strtod_l+0x91c>
 800bd58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd5c:	f1b8 0f00 	cmp.w	r8, #0
 800bd60:	d02a      	beq.n	800bdb8 <_strtod_l+0x8c0>
 800bd62:	4aab      	ldr	r2, [pc, #684]	@ (800c010 <_strtod_l+0xb18>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d12a      	bne.n	800bdbe <_strtod_l+0x8c6>
 800bd68:	9b06      	ldr	r3, [sp, #24]
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	b1fb      	cbz	r3, 800bdae <_strtod_l+0x8b6>
 800bd6e:	4ba9      	ldr	r3, [pc, #676]	@ (800c014 <_strtod_l+0xb1c>)
 800bd70:	ea0b 0303 	and.w	r3, fp, r3
 800bd74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bd78:	f04f 31ff 	mov.w	r1, #4294967295
 800bd7c:	d81a      	bhi.n	800bdb4 <_strtod_l+0x8bc>
 800bd7e:	0d1b      	lsrs	r3, r3, #20
 800bd80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd84:	fa01 f303 	lsl.w	r3, r1, r3
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d118      	bne.n	800bdbe <_strtod_l+0x8c6>
 800bd8c:	4ba2      	ldr	r3, [pc, #648]	@ (800c018 <_strtod_l+0xb20>)
 800bd8e:	4599      	cmp	r9, r3
 800bd90:	d102      	bne.n	800bd98 <_strtod_l+0x8a0>
 800bd92:	3201      	adds	r2, #1
 800bd94:	f43f adc0 	beq.w	800b918 <_strtod_l+0x420>
 800bd98:	4b9e      	ldr	r3, [pc, #632]	@ (800c014 <_strtod_l+0xb1c>)
 800bd9a:	ea09 0303 	and.w	r3, r9, r3
 800bd9e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800bda2:	f04f 0a00 	mov.w	sl, #0
 800bda6:	9b06      	ldr	r3, [sp, #24]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1b0      	bne.n	800bd0e <_strtod_l+0x816>
 800bdac:	e5bf      	b.n	800b92e <_strtod_l+0x436>
 800bdae:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb2:	e7e9      	b.n	800bd88 <_strtod_l+0x890>
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	e7e7      	b.n	800bd88 <_strtod_l+0x890>
 800bdb8:	ea53 030a 	orrs.w	r3, r3, sl
 800bdbc:	d099      	beq.n	800bcf2 <_strtod_l+0x7fa>
 800bdbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdc0:	b1c3      	cbz	r3, 800bdf4 <_strtod_l+0x8fc>
 800bdc2:	ea13 0f09 	tst.w	r3, r9
 800bdc6:	d0ee      	beq.n	800bda6 <_strtod_l+0x8ae>
 800bdc8:	9a06      	ldr	r2, [sp, #24]
 800bdca:	4650      	mov	r0, sl
 800bdcc:	4659      	mov	r1, fp
 800bdce:	f1b8 0f00 	cmp.w	r8, #0
 800bdd2:	d013      	beq.n	800bdfc <_strtod_l+0x904>
 800bdd4:	f7ff fb73 	bl	800b4be <sulp>
 800bdd8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800bddc:	ec5b ab17 	vmov	sl, fp, d7
 800bde0:	e7e1      	b.n	800bda6 <_strtod_l+0x8ae>
 800bde2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bde6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bdea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bdee:	f04f 3aff 	mov.w	sl, #4294967295
 800bdf2:	e7d8      	b.n	800bda6 <_strtod_l+0x8ae>
 800bdf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdf6:	ea13 0f0a 	tst.w	r3, sl
 800bdfa:	e7e4      	b.n	800bdc6 <_strtod_l+0x8ce>
 800bdfc:	f7ff fb5f 	bl	800b4be <sulp>
 800be00:	ee39 0b40 	vsub.f64	d0, d9, d0
 800be04:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800be08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0c:	ec5b ab10 	vmov	sl, fp, d0
 800be10:	d1c9      	bne.n	800bda6 <_strtod_l+0x8ae>
 800be12:	e615      	b.n	800ba40 <_strtod_l+0x548>
 800be14:	4629      	mov	r1, r5
 800be16:	4620      	mov	r0, r4
 800be18:	f002 ffcc 	bl	800edb4 <__ratio>
 800be1c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800be20:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800be24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be28:	d85d      	bhi.n	800bee6 <_strtod_l+0x9ee>
 800be2a:	f1b8 0f00 	cmp.w	r8, #0
 800be2e:	d164      	bne.n	800befa <_strtod_l+0xa02>
 800be30:	f1ba 0f00 	cmp.w	sl, #0
 800be34:	d14b      	bne.n	800bece <_strtod_l+0x9d6>
 800be36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be3a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d160      	bne.n	800bf04 <_strtod_l+0xa0c>
 800be42:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800be46:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800be4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4e:	d401      	bmi.n	800be54 <_strtod_l+0x95c>
 800be50:	ee20 8b08 	vmul.f64	d8, d0, d8
 800be54:	eeb1 ab48 	vneg.f64	d10, d8
 800be58:	486e      	ldr	r0, [pc, #440]	@ (800c014 <_strtod_l+0xb1c>)
 800be5a:	4970      	ldr	r1, [pc, #448]	@ (800c01c <_strtod_l+0xb24>)
 800be5c:	ea09 0700 	and.w	r7, r9, r0
 800be60:	428f      	cmp	r7, r1
 800be62:	ec53 2b1a 	vmov	r2, r3, d10
 800be66:	d17d      	bne.n	800bf64 <_strtod_l+0xa6c>
 800be68:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800be6c:	ec4b ab1c 	vmov	d12, sl, fp
 800be70:	eeb0 0b4c 	vmov.f64	d0, d12
 800be74:	f002 fed6 	bl	800ec24 <__ulp>
 800be78:	4866      	ldr	r0, [pc, #408]	@ (800c014 <_strtod_l+0xb1c>)
 800be7a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800be7e:	ee1c 3a90 	vmov	r3, s25
 800be82:	4a67      	ldr	r2, [pc, #412]	@ (800c020 <_strtod_l+0xb28>)
 800be84:	ea03 0100 	and.w	r1, r3, r0
 800be88:	4291      	cmp	r1, r2
 800be8a:	ec5b ab1c 	vmov	sl, fp, d12
 800be8e:	d93c      	bls.n	800bf0a <_strtod_l+0xa12>
 800be90:	ee19 2a90 	vmov	r2, s19
 800be94:	4b60      	ldr	r3, [pc, #384]	@ (800c018 <_strtod_l+0xb20>)
 800be96:	429a      	cmp	r2, r3
 800be98:	d104      	bne.n	800bea4 <_strtod_l+0x9ac>
 800be9a:	ee19 3a10 	vmov	r3, s18
 800be9e:	3301      	adds	r3, #1
 800bea0:	f43f ad3a 	beq.w	800b918 <_strtod_l+0x420>
 800bea4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c018 <_strtod_l+0xb20>
 800bea8:	f04f 3aff 	mov.w	sl, #4294967295
 800beac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800beae:	9805      	ldr	r0, [sp, #20]
 800beb0:	f002 fb84 	bl	800e5bc <_Bfree>
 800beb4:	9805      	ldr	r0, [sp, #20]
 800beb6:	4631      	mov	r1, r6
 800beb8:	f002 fb80 	bl	800e5bc <_Bfree>
 800bebc:	9805      	ldr	r0, [sp, #20]
 800bebe:	4629      	mov	r1, r5
 800bec0:	f002 fb7c 	bl	800e5bc <_Bfree>
 800bec4:	9805      	ldr	r0, [sp, #20]
 800bec6:	4621      	mov	r1, r4
 800bec8:	f002 fb78 	bl	800e5bc <_Bfree>
 800becc:	e625      	b.n	800bb1a <_strtod_l+0x622>
 800bece:	f1ba 0f01 	cmp.w	sl, #1
 800bed2:	d103      	bne.n	800bedc <_strtod_l+0x9e4>
 800bed4:	f1bb 0f00 	cmp.w	fp, #0
 800bed8:	f43f adb2 	beq.w	800ba40 <_strtod_l+0x548>
 800bedc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800bee0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800bee4:	e7b8      	b.n	800be58 <_strtod_l+0x960>
 800bee6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800beea:	ee20 8b08 	vmul.f64	d8, d0, d8
 800beee:	f1b8 0f00 	cmp.w	r8, #0
 800bef2:	d0af      	beq.n	800be54 <_strtod_l+0x95c>
 800bef4:	eeb0 ab48 	vmov.f64	d10, d8
 800bef8:	e7ae      	b.n	800be58 <_strtod_l+0x960>
 800befa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800befe:	eeb0 8b4a 	vmov.f64	d8, d10
 800bf02:	e7a9      	b.n	800be58 <_strtod_l+0x960>
 800bf04:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800bf08:	e7a6      	b.n	800be58 <_strtod_l+0x960>
 800bf0a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf0e:	9b06      	ldr	r3, [sp, #24]
 800bf10:	46d9      	mov	r9, fp
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1ca      	bne.n	800beac <_strtod_l+0x9b4>
 800bf16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf1a:	0d1b      	lsrs	r3, r3, #20
 800bf1c:	051b      	lsls	r3, r3, #20
 800bf1e:	429f      	cmp	r7, r3
 800bf20:	d1c4      	bne.n	800beac <_strtod_l+0x9b4>
 800bf22:	ec51 0b18 	vmov	r0, r1, d8
 800bf26:	f7f4 fc07 	bl	8000738 <__aeabi_d2lz>
 800bf2a:	f7f4 fbbf 	bl	80006ac <__aeabi_l2d>
 800bf2e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800bf32:	ec41 0b17 	vmov	d7, r0, r1
 800bf36:	ea49 090a 	orr.w	r9, r9, sl
 800bf3a:	ea59 0908 	orrs.w	r9, r9, r8
 800bf3e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800bf42:	d03c      	beq.n	800bfbe <_strtod_l+0xac6>
 800bf44:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800bff8 <_strtod_l+0xb00>
 800bf48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf50:	f53f aced 	bmi.w	800b92e <_strtod_l+0x436>
 800bf54:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c000 <_strtod_l+0xb08>
 800bf58:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf60:	dda4      	ble.n	800beac <_strtod_l+0x9b4>
 800bf62:	e4e4      	b.n	800b92e <_strtod_l+0x436>
 800bf64:	9906      	ldr	r1, [sp, #24]
 800bf66:	b1e1      	cbz	r1, 800bfa2 <_strtod_l+0xaaa>
 800bf68:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800bf6c:	d819      	bhi.n	800bfa2 <_strtod_l+0xaaa>
 800bf6e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800bf72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf76:	d811      	bhi.n	800bf9c <_strtod_l+0xaa4>
 800bf78:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800bf7c:	ee18 3a10 	vmov	r3, s16
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	bf38      	it	cc
 800bf84:	2301      	movcc	r3, #1
 800bf86:	ee08 3a10 	vmov	s16, r3
 800bf8a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800bf8e:	f1b8 0f00 	cmp.w	r8, #0
 800bf92:	d111      	bne.n	800bfb8 <_strtod_l+0xac0>
 800bf94:	eeb1 7b48 	vneg.f64	d7, d8
 800bf98:	ec53 2b17 	vmov	r2, r3, d7
 800bf9c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800bfa0:	1bcb      	subs	r3, r1, r7
 800bfa2:	eeb0 0b49 	vmov.f64	d0, d9
 800bfa6:	ec43 2b1a 	vmov	d10, r2, r3
 800bfaa:	f002 fe3b 	bl	800ec24 <__ulp>
 800bfae:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800bfb2:	ec5b ab19 	vmov	sl, fp, d9
 800bfb6:	e7aa      	b.n	800bf0e <_strtod_l+0xa16>
 800bfb8:	eeb0 7b48 	vmov.f64	d7, d8
 800bfbc:	e7ec      	b.n	800bf98 <_strtod_l+0xaa0>
 800bfbe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c008 <_strtod_l+0xb10>
 800bfc2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfca:	f57f af6f 	bpl.w	800beac <_strtod_l+0x9b4>
 800bfce:	e4ae      	b.n	800b92e <_strtod_l+0x436>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9308      	str	r3, [sp, #32]
 800bfd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	f7ff bacc 	b.w	800b576 <_strtod_l+0x7e>
 800bfde:	2a65      	cmp	r2, #101	@ 0x65
 800bfe0:	f43f abbc 	beq.w	800b75c <_strtod_l+0x264>
 800bfe4:	2a45      	cmp	r2, #69	@ 0x45
 800bfe6:	f43f abb9 	beq.w	800b75c <_strtod_l+0x264>
 800bfea:	2301      	movs	r3, #1
 800bfec:	9306      	str	r3, [sp, #24]
 800bfee:	f7ff bbf0 	b.w	800b7d2 <_strtod_l+0x2da>
 800bff2:	bf00      	nop
 800bff4:	f3af 8000 	nop.w
 800bff8:	94a03595 	.word	0x94a03595
 800bffc:	3fdfffff 	.word	0x3fdfffff
 800c000:	35afe535 	.word	0x35afe535
 800c004:	3fe00000 	.word	0x3fe00000
 800c008:	94a03595 	.word	0x94a03595
 800c00c:	3fcfffff 	.word	0x3fcfffff
 800c010:	000fffff 	.word	0x000fffff
 800c014:	7ff00000 	.word	0x7ff00000
 800c018:	7fefffff 	.word	0x7fefffff
 800c01c:	7fe00000 	.word	0x7fe00000
 800c020:	7c9fffff 	.word	0x7c9fffff

0800c024 <_strtod_r>:
 800c024:	4b01      	ldr	r3, [pc, #4]	@ (800c02c <_strtod_r+0x8>)
 800c026:	f7ff ba67 	b.w	800b4f8 <_strtod_l>
 800c02a:	bf00      	nop
 800c02c:	24000028 	.word	0x24000028

0800c030 <strtod>:
 800c030:	460a      	mov	r2, r1
 800c032:	4601      	mov	r1, r0
 800c034:	4802      	ldr	r0, [pc, #8]	@ (800c040 <strtod+0x10>)
 800c036:	4b03      	ldr	r3, [pc, #12]	@ (800c044 <strtod+0x14>)
 800c038:	6800      	ldr	r0, [r0, #0]
 800c03a:	f7ff ba5d 	b.w	800b4f8 <_strtod_l>
 800c03e:	bf00      	nop
 800c040:	24000194 	.word	0x24000194
 800c044:	24000028 	.word	0x24000028

0800c048 <__cvt>:
 800c048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04a:	ed2d 8b02 	vpush	{d8}
 800c04e:	eeb0 8b40 	vmov.f64	d8, d0
 800c052:	b085      	sub	sp, #20
 800c054:	4617      	mov	r7, r2
 800c056:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c058:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c05a:	ee18 2a90 	vmov	r2, s17
 800c05e:	f025 0520 	bic.w	r5, r5, #32
 800c062:	2a00      	cmp	r2, #0
 800c064:	bfb6      	itet	lt
 800c066:	222d      	movlt	r2, #45	@ 0x2d
 800c068:	2200      	movge	r2, #0
 800c06a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c06e:	2d46      	cmp	r5, #70	@ 0x46
 800c070:	460c      	mov	r4, r1
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	d004      	beq.n	800c080 <__cvt+0x38>
 800c076:	2d45      	cmp	r5, #69	@ 0x45
 800c078:	d100      	bne.n	800c07c <__cvt+0x34>
 800c07a:	3401      	adds	r4, #1
 800c07c:	2102      	movs	r1, #2
 800c07e:	e000      	b.n	800c082 <__cvt+0x3a>
 800c080:	2103      	movs	r1, #3
 800c082:	ab03      	add	r3, sp, #12
 800c084:	9301      	str	r3, [sp, #4]
 800c086:	ab02      	add	r3, sp, #8
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	4622      	mov	r2, r4
 800c08c:	4633      	mov	r3, r6
 800c08e:	eeb0 0b48 	vmov.f64	d0, d8
 800c092:	f001 f8b1 	bl	800d1f8 <_dtoa_r>
 800c096:	2d47      	cmp	r5, #71	@ 0x47
 800c098:	d114      	bne.n	800c0c4 <__cvt+0x7c>
 800c09a:	07fb      	lsls	r3, r7, #31
 800c09c:	d50a      	bpl.n	800c0b4 <__cvt+0x6c>
 800c09e:	1902      	adds	r2, r0, r4
 800c0a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	bf08      	it	eq
 800c0aa:	9203      	streq	r2, [sp, #12]
 800c0ac:	2130      	movs	r1, #48	@ 0x30
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d319      	bcc.n	800c0e8 <__cvt+0xa0>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0b8:	1a1b      	subs	r3, r3, r0
 800c0ba:	6013      	str	r3, [r2, #0]
 800c0bc:	b005      	add	sp, #20
 800c0be:	ecbd 8b02 	vpop	{d8}
 800c0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c4:	2d46      	cmp	r5, #70	@ 0x46
 800c0c6:	eb00 0204 	add.w	r2, r0, r4
 800c0ca:	d1e9      	bne.n	800c0a0 <__cvt+0x58>
 800c0cc:	7803      	ldrb	r3, [r0, #0]
 800c0ce:	2b30      	cmp	r3, #48	@ 0x30
 800c0d0:	d107      	bne.n	800c0e2 <__cvt+0x9a>
 800c0d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0da:	bf1c      	itt	ne
 800c0dc:	f1c4 0401 	rsbne	r4, r4, #1
 800c0e0:	6034      	strne	r4, [r6, #0]
 800c0e2:	6833      	ldr	r3, [r6, #0]
 800c0e4:	441a      	add	r2, r3
 800c0e6:	e7db      	b.n	800c0a0 <__cvt+0x58>
 800c0e8:	1c5c      	adds	r4, r3, #1
 800c0ea:	9403      	str	r4, [sp, #12]
 800c0ec:	7019      	strb	r1, [r3, #0]
 800c0ee:	e7de      	b.n	800c0ae <__cvt+0x66>

0800c0f0 <__exponent>:
 800c0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	bfba      	itte	lt
 800c0f6:	4249      	neglt	r1, r1
 800c0f8:	232d      	movlt	r3, #45	@ 0x2d
 800c0fa:	232b      	movge	r3, #43	@ 0x2b
 800c0fc:	2909      	cmp	r1, #9
 800c0fe:	7002      	strb	r2, [r0, #0]
 800c100:	7043      	strb	r3, [r0, #1]
 800c102:	dd29      	ble.n	800c158 <__exponent+0x68>
 800c104:	f10d 0307 	add.w	r3, sp, #7
 800c108:	461d      	mov	r5, r3
 800c10a:	270a      	movs	r7, #10
 800c10c:	461a      	mov	r2, r3
 800c10e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c112:	fb07 1416 	mls	r4, r7, r6, r1
 800c116:	3430      	adds	r4, #48	@ 0x30
 800c118:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c11c:	460c      	mov	r4, r1
 800c11e:	2c63      	cmp	r4, #99	@ 0x63
 800c120:	f103 33ff 	add.w	r3, r3, #4294967295
 800c124:	4631      	mov	r1, r6
 800c126:	dcf1      	bgt.n	800c10c <__exponent+0x1c>
 800c128:	3130      	adds	r1, #48	@ 0x30
 800c12a:	1e94      	subs	r4, r2, #2
 800c12c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c130:	1c41      	adds	r1, r0, #1
 800c132:	4623      	mov	r3, r4
 800c134:	42ab      	cmp	r3, r5
 800c136:	d30a      	bcc.n	800c14e <__exponent+0x5e>
 800c138:	f10d 0309 	add.w	r3, sp, #9
 800c13c:	1a9b      	subs	r3, r3, r2
 800c13e:	42ac      	cmp	r4, r5
 800c140:	bf88      	it	hi
 800c142:	2300      	movhi	r3, #0
 800c144:	3302      	adds	r3, #2
 800c146:	4403      	add	r3, r0
 800c148:	1a18      	subs	r0, r3, r0
 800c14a:	b003      	add	sp, #12
 800c14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c14e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c152:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c156:	e7ed      	b.n	800c134 <__exponent+0x44>
 800c158:	2330      	movs	r3, #48	@ 0x30
 800c15a:	3130      	adds	r1, #48	@ 0x30
 800c15c:	7083      	strb	r3, [r0, #2]
 800c15e:	70c1      	strb	r1, [r0, #3]
 800c160:	1d03      	adds	r3, r0, #4
 800c162:	e7f1      	b.n	800c148 <__exponent+0x58>
 800c164:	0000      	movs	r0, r0
	...

0800c168 <_printf_float>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	b08d      	sub	sp, #52	@ 0x34
 800c16e:	460c      	mov	r4, r1
 800c170:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c174:	4616      	mov	r6, r2
 800c176:	461f      	mov	r7, r3
 800c178:	4605      	mov	r5, r0
 800c17a:	f000 ff1d 	bl	800cfb8 <_localeconv_r>
 800c17e:	f8d0 b000 	ldr.w	fp, [r0]
 800c182:	4658      	mov	r0, fp
 800c184:	f7f4 f8fc 	bl	8000380 <strlen>
 800c188:	2300      	movs	r3, #0
 800c18a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c18c:	f8d8 3000 	ldr.w	r3, [r8]
 800c190:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c194:	6822      	ldr	r2, [r4, #0]
 800c196:	9005      	str	r0, [sp, #20]
 800c198:	3307      	adds	r3, #7
 800c19a:	f023 0307 	bic.w	r3, r3, #7
 800c19e:	f103 0108 	add.w	r1, r3, #8
 800c1a2:	f8c8 1000 	str.w	r1, [r8]
 800c1a6:	ed93 0b00 	vldr	d0, [r3]
 800c1aa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c408 <_printf_float+0x2a0>
 800c1ae:	eeb0 7bc0 	vabs.f64	d7, d0
 800c1b2:	eeb4 7b46 	vcmp.f64	d7, d6
 800c1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c1be:	dd24      	ble.n	800c20a <_printf_float+0xa2>
 800c1c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c8:	d502      	bpl.n	800c1d0 <_printf_float+0x68>
 800c1ca:	232d      	movs	r3, #45	@ 0x2d
 800c1cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d0:	498f      	ldr	r1, [pc, #572]	@ (800c410 <_printf_float+0x2a8>)
 800c1d2:	4b90      	ldr	r3, [pc, #576]	@ (800c414 <_printf_float+0x2ac>)
 800c1d4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c1d8:	bf94      	ite	ls
 800c1da:	4688      	movls	r8, r1
 800c1dc:	4698      	movhi	r8, r3
 800c1de:	f022 0204 	bic.w	r2, r2, #4
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	6123      	str	r3, [r4, #16]
 800c1e6:	6022      	str	r2, [r4, #0]
 800c1e8:	f04f 0a00 	mov.w	sl, #0
 800c1ec:	9700      	str	r7, [sp, #0]
 800c1ee:	4633      	mov	r3, r6
 800c1f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f000 f9d1 	bl	800c59c <_printf_common>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f040 8089 	bne.w	800c312 <_printf_float+0x1aa>
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	b00d      	add	sp, #52	@ 0x34
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	d709      	bvc.n	800c228 <_printf_float+0xc0>
 800c214:	ee10 3a90 	vmov	r3, s1
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfbc      	itt	lt
 800c21c:	232d      	movlt	r3, #45	@ 0x2d
 800c21e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c222:	497d      	ldr	r1, [pc, #500]	@ (800c418 <_printf_float+0x2b0>)
 800c224:	4b7d      	ldr	r3, [pc, #500]	@ (800c41c <_printf_float+0x2b4>)
 800c226:	e7d5      	b.n	800c1d4 <_printf_float+0x6c>
 800c228:	6863      	ldr	r3, [r4, #4]
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c230:	d139      	bne.n	800c2a6 <_printf_float+0x13e>
 800c232:	2306      	movs	r3, #6
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c23a:	2300      	movs	r3, #0
 800c23c:	6022      	str	r2, [r4, #0]
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	ab0a      	add	r3, sp, #40	@ 0x28
 800c242:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c246:	ab09      	add	r3, sp, #36	@ 0x24
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	6861      	ldr	r1, [r4, #4]
 800c24c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c250:	4628      	mov	r0, r5
 800c252:	f7ff fef9 	bl	800c048 <__cvt>
 800c256:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c25a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c25c:	4680      	mov	r8, r0
 800c25e:	d129      	bne.n	800c2b4 <_printf_float+0x14c>
 800c260:	1cc8      	adds	r0, r1, #3
 800c262:	db02      	blt.n	800c26a <_printf_float+0x102>
 800c264:	6863      	ldr	r3, [r4, #4]
 800c266:	4299      	cmp	r1, r3
 800c268:	dd41      	ble.n	800c2ee <_printf_float+0x186>
 800c26a:	f1a9 0902 	sub.w	r9, r9, #2
 800c26e:	fa5f f989 	uxtb.w	r9, r9
 800c272:	3901      	subs	r1, #1
 800c274:	464a      	mov	r2, r9
 800c276:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c27a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c27c:	f7ff ff38 	bl	800c0f0 <__exponent>
 800c280:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c282:	1813      	adds	r3, r2, r0
 800c284:	2a01      	cmp	r2, #1
 800c286:	4682      	mov	sl, r0
 800c288:	6123      	str	r3, [r4, #16]
 800c28a:	dc02      	bgt.n	800c292 <_printf_float+0x12a>
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	07d2      	lsls	r2, r2, #31
 800c290:	d501      	bpl.n	800c296 <_printf_float+0x12e>
 800c292:	3301      	adds	r3, #1
 800c294:	6123      	str	r3, [r4, #16]
 800c296:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d0a6      	beq.n	800c1ec <_printf_float+0x84>
 800c29e:	232d      	movs	r3, #45	@ 0x2d
 800c2a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2a4:	e7a2      	b.n	800c1ec <_printf_float+0x84>
 800c2a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c2aa:	d1c4      	bne.n	800c236 <_printf_float+0xce>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1c2      	bne.n	800c236 <_printf_float+0xce>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e7bf      	b.n	800c234 <_printf_float+0xcc>
 800c2b4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c2b8:	d9db      	bls.n	800c272 <_printf_float+0x10a>
 800c2ba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c2be:	d118      	bne.n	800c2f2 <_printf_float+0x18a>
 800c2c0:	2900      	cmp	r1, #0
 800c2c2:	6863      	ldr	r3, [r4, #4]
 800c2c4:	dd0b      	ble.n	800c2de <_printf_float+0x176>
 800c2c6:	6121      	str	r1, [r4, #16]
 800c2c8:	b913      	cbnz	r3, 800c2d0 <_printf_float+0x168>
 800c2ca:	6822      	ldr	r2, [r4, #0]
 800c2cc:	07d0      	lsls	r0, r2, #31
 800c2ce:	d502      	bpl.n	800c2d6 <_printf_float+0x16e>
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	440b      	add	r3, r1
 800c2d4:	6123      	str	r3, [r4, #16]
 800c2d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c2d8:	f04f 0a00 	mov.w	sl, #0
 800c2dc:	e7db      	b.n	800c296 <_printf_float+0x12e>
 800c2de:	b913      	cbnz	r3, 800c2e6 <_printf_float+0x17e>
 800c2e0:	6822      	ldr	r2, [r4, #0]
 800c2e2:	07d2      	lsls	r2, r2, #31
 800c2e4:	d501      	bpl.n	800c2ea <_printf_float+0x182>
 800c2e6:	3302      	adds	r3, #2
 800c2e8:	e7f4      	b.n	800c2d4 <_printf_float+0x16c>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e7f2      	b.n	800c2d4 <_printf_float+0x16c>
 800c2ee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c2f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2f4:	4299      	cmp	r1, r3
 800c2f6:	db05      	blt.n	800c304 <_printf_float+0x19c>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	6121      	str	r1, [r4, #16]
 800c2fc:	07d8      	lsls	r0, r3, #31
 800c2fe:	d5ea      	bpl.n	800c2d6 <_printf_float+0x16e>
 800c300:	1c4b      	adds	r3, r1, #1
 800c302:	e7e7      	b.n	800c2d4 <_printf_float+0x16c>
 800c304:	2900      	cmp	r1, #0
 800c306:	bfd4      	ite	le
 800c308:	f1c1 0202 	rsble	r2, r1, #2
 800c30c:	2201      	movgt	r2, #1
 800c30e:	4413      	add	r3, r2
 800c310:	e7e0      	b.n	800c2d4 <_printf_float+0x16c>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	055a      	lsls	r2, r3, #21
 800c316:	d407      	bmi.n	800c328 <_printf_float+0x1c0>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	4642      	mov	r2, r8
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	d12a      	bne.n	800c37c <_printf_float+0x214>
 800c326:	e76b      	b.n	800c200 <_printf_float+0x98>
 800c328:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c32c:	f240 80e0 	bls.w	800c4f0 <_printf_float+0x388>
 800c330:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c334:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c33c:	d133      	bne.n	800c3a6 <_printf_float+0x23e>
 800c33e:	4a38      	ldr	r2, [pc, #224]	@ (800c420 <_printf_float+0x2b8>)
 800c340:	2301      	movs	r3, #1
 800c342:	4631      	mov	r1, r6
 800c344:	4628      	mov	r0, r5
 800c346:	47b8      	blx	r7
 800c348:	3001      	adds	r0, #1
 800c34a:	f43f af59 	beq.w	800c200 <_printf_float+0x98>
 800c34e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c352:	4543      	cmp	r3, r8
 800c354:	db02      	blt.n	800c35c <_printf_float+0x1f4>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	07d8      	lsls	r0, r3, #31
 800c35a:	d50f      	bpl.n	800c37c <_printf_float+0x214>
 800c35c:	9b05      	ldr	r3, [sp, #20]
 800c35e:	465a      	mov	r2, fp
 800c360:	4631      	mov	r1, r6
 800c362:	4628      	mov	r0, r5
 800c364:	47b8      	blx	r7
 800c366:	3001      	adds	r0, #1
 800c368:	f43f af4a 	beq.w	800c200 <_printf_float+0x98>
 800c36c:	f04f 0900 	mov.w	r9, #0
 800c370:	f108 38ff 	add.w	r8, r8, #4294967295
 800c374:	f104 0a1a 	add.w	sl, r4, #26
 800c378:	45c8      	cmp	r8, r9
 800c37a:	dc09      	bgt.n	800c390 <_printf_float+0x228>
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	079b      	lsls	r3, r3, #30
 800c380:	f100 8107 	bmi.w	800c592 <_printf_float+0x42a>
 800c384:	68e0      	ldr	r0, [r4, #12]
 800c386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c388:	4298      	cmp	r0, r3
 800c38a:	bfb8      	it	lt
 800c38c:	4618      	movlt	r0, r3
 800c38e:	e739      	b.n	800c204 <_printf_float+0x9c>
 800c390:	2301      	movs	r3, #1
 800c392:	4652      	mov	r2, sl
 800c394:	4631      	mov	r1, r6
 800c396:	4628      	mov	r0, r5
 800c398:	47b8      	blx	r7
 800c39a:	3001      	adds	r0, #1
 800c39c:	f43f af30 	beq.w	800c200 <_printf_float+0x98>
 800c3a0:	f109 0901 	add.w	r9, r9, #1
 800c3a4:	e7e8      	b.n	800c378 <_printf_float+0x210>
 800c3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dc3b      	bgt.n	800c424 <_printf_float+0x2bc>
 800c3ac:	4a1c      	ldr	r2, [pc, #112]	@ (800c420 <_printf_float+0x2b8>)
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	47b8      	blx	r7
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	f43f af22 	beq.w	800c200 <_printf_float+0x98>
 800c3bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c3c0:	ea59 0303 	orrs.w	r3, r9, r3
 800c3c4:	d102      	bne.n	800c3cc <_printf_float+0x264>
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	07d9      	lsls	r1, r3, #31
 800c3ca:	d5d7      	bpl.n	800c37c <_printf_float+0x214>
 800c3cc:	9b05      	ldr	r3, [sp, #20]
 800c3ce:	465a      	mov	r2, fp
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	47b8      	blx	r7
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	f43f af12 	beq.w	800c200 <_printf_float+0x98>
 800c3dc:	f04f 0a00 	mov.w	sl, #0
 800c3e0:	f104 0b1a 	add.w	fp, r4, #26
 800c3e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e6:	425b      	negs	r3, r3
 800c3e8:	4553      	cmp	r3, sl
 800c3ea:	dc01      	bgt.n	800c3f0 <_printf_float+0x288>
 800c3ec:	464b      	mov	r3, r9
 800c3ee:	e794      	b.n	800c31a <_printf_float+0x1b2>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	465a      	mov	r2, fp
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	47b8      	blx	r7
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f43f af00 	beq.w	800c200 <_printf_float+0x98>
 800c400:	f10a 0a01 	add.w	sl, sl, #1
 800c404:	e7ee      	b.n	800c3e4 <_printf_float+0x27c>
 800c406:	bf00      	nop
 800c408:	ffffffff 	.word	0xffffffff
 800c40c:	7fefffff 	.word	0x7fefffff
 800c410:	0800fb60 	.word	0x0800fb60
 800c414:	0800fb64 	.word	0x0800fb64
 800c418:	0800fb68 	.word	0x0800fb68
 800c41c:	0800fb6c 	.word	0x0800fb6c
 800c420:	0800fb70 	.word	0x0800fb70
 800c424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c426:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c42a:	4553      	cmp	r3, sl
 800c42c:	bfa8      	it	ge
 800c42e:	4653      	movge	r3, sl
 800c430:	2b00      	cmp	r3, #0
 800c432:	4699      	mov	r9, r3
 800c434:	dc37      	bgt.n	800c4a6 <_printf_float+0x33e>
 800c436:	2300      	movs	r3, #0
 800c438:	9307      	str	r3, [sp, #28]
 800c43a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c43e:	f104 021a 	add.w	r2, r4, #26
 800c442:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c444:	9907      	ldr	r1, [sp, #28]
 800c446:	9306      	str	r3, [sp, #24]
 800c448:	eba3 0309 	sub.w	r3, r3, r9
 800c44c:	428b      	cmp	r3, r1
 800c44e:	dc31      	bgt.n	800c4b4 <_printf_float+0x34c>
 800c450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c452:	459a      	cmp	sl, r3
 800c454:	dc3b      	bgt.n	800c4ce <_printf_float+0x366>
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	07da      	lsls	r2, r3, #31
 800c45a:	d438      	bmi.n	800c4ce <_printf_float+0x366>
 800c45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45e:	ebaa 0903 	sub.w	r9, sl, r3
 800c462:	9b06      	ldr	r3, [sp, #24]
 800c464:	ebaa 0303 	sub.w	r3, sl, r3
 800c468:	4599      	cmp	r9, r3
 800c46a:	bfa8      	it	ge
 800c46c:	4699      	movge	r9, r3
 800c46e:	f1b9 0f00 	cmp.w	r9, #0
 800c472:	dc34      	bgt.n	800c4de <_printf_float+0x376>
 800c474:	f04f 0800 	mov.w	r8, #0
 800c478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c47c:	f104 0b1a 	add.w	fp, r4, #26
 800c480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c482:	ebaa 0303 	sub.w	r3, sl, r3
 800c486:	eba3 0309 	sub.w	r3, r3, r9
 800c48a:	4543      	cmp	r3, r8
 800c48c:	f77f af76 	ble.w	800c37c <_printf_float+0x214>
 800c490:	2301      	movs	r3, #1
 800c492:	465a      	mov	r2, fp
 800c494:	4631      	mov	r1, r6
 800c496:	4628      	mov	r0, r5
 800c498:	47b8      	blx	r7
 800c49a:	3001      	adds	r0, #1
 800c49c:	f43f aeb0 	beq.w	800c200 <_printf_float+0x98>
 800c4a0:	f108 0801 	add.w	r8, r8, #1
 800c4a4:	e7ec      	b.n	800c480 <_printf_float+0x318>
 800c4a6:	4642      	mov	r2, r8
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	47b8      	blx	r7
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	d1c1      	bne.n	800c436 <_printf_float+0x2ce>
 800c4b2:	e6a5      	b.n	800c200 <_printf_float+0x98>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4631      	mov	r1, r6
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	9206      	str	r2, [sp, #24]
 800c4bc:	47b8      	blx	r7
 800c4be:	3001      	adds	r0, #1
 800c4c0:	f43f ae9e 	beq.w	800c200 <_printf_float+0x98>
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	9a06      	ldr	r2, [sp, #24]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	9307      	str	r3, [sp, #28]
 800c4cc:	e7b9      	b.n	800c442 <_printf_float+0x2da>
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	465a      	mov	r2, fp
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	47b8      	blx	r7
 800c4d8:	3001      	adds	r0, #1
 800c4da:	d1bf      	bne.n	800c45c <_printf_float+0x2f4>
 800c4dc:	e690      	b.n	800c200 <_printf_float+0x98>
 800c4de:	9a06      	ldr	r2, [sp, #24]
 800c4e0:	464b      	mov	r3, r9
 800c4e2:	4442      	add	r2, r8
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	47b8      	blx	r7
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	d1c2      	bne.n	800c474 <_printf_float+0x30c>
 800c4ee:	e687      	b.n	800c200 <_printf_float+0x98>
 800c4f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c4f4:	f1b9 0f01 	cmp.w	r9, #1
 800c4f8:	dc01      	bgt.n	800c4fe <_printf_float+0x396>
 800c4fa:	07db      	lsls	r3, r3, #31
 800c4fc:	d536      	bpl.n	800c56c <_printf_float+0x404>
 800c4fe:	2301      	movs	r3, #1
 800c500:	4642      	mov	r2, r8
 800c502:	4631      	mov	r1, r6
 800c504:	4628      	mov	r0, r5
 800c506:	47b8      	blx	r7
 800c508:	3001      	adds	r0, #1
 800c50a:	f43f ae79 	beq.w	800c200 <_printf_float+0x98>
 800c50e:	9b05      	ldr	r3, [sp, #20]
 800c510:	465a      	mov	r2, fp
 800c512:	4631      	mov	r1, r6
 800c514:	4628      	mov	r0, r5
 800c516:	47b8      	blx	r7
 800c518:	3001      	adds	r0, #1
 800c51a:	f43f ae71 	beq.w	800c200 <_printf_float+0x98>
 800c51e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c522:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c52a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c52e:	d018      	beq.n	800c562 <_printf_float+0x3fa>
 800c530:	464b      	mov	r3, r9
 800c532:	f108 0201 	add.w	r2, r8, #1
 800c536:	4631      	mov	r1, r6
 800c538:	4628      	mov	r0, r5
 800c53a:	47b8      	blx	r7
 800c53c:	3001      	adds	r0, #1
 800c53e:	d10c      	bne.n	800c55a <_printf_float+0x3f2>
 800c540:	e65e      	b.n	800c200 <_printf_float+0x98>
 800c542:	2301      	movs	r3, #1
 800c544:	465a      	mov	r2, fp
 800c546:	4631      	mov	r1, r6
 800c548:	4628      	mov	r0, r5
 800c54a:	47b8      	blx	r7
 800c54c:	3001      	adds	r0, #1
 800c54e:	f43f ae57 	beq.w	800c200 <_printf_float+0x98>
 800c552:	f108 0801 	add.w	r8, r8, #1
 800c556:	45c8      	cmp	r8, r9
 800c558:	dbf3      	blt.n	800c542 <_printf_float+0x3da>
 800c55a:	4653      	mov	r3, sl
 800c55c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c560:	e6dc      	b.n	800c31c <_printf_float+0x1b4>
 800c562:	f04f 0800 	mov.w	r8, #0
 800c566:	f104 0b1a 	add.w	fp, r4, #26
 800c56a:	e7f4      	b.n	800c556 <_printf_float+0x3ee>
 800c56c:	2301      	movs	r3, #1
 800c56e:	4642      	mov	r2, r8
 800c570:	e7e1      	b.n	800c536 <_printf_float+0x3ce>
 800c572:	2301      	movs	r3, #1
 800c574:	464a      	mov	r2, r9
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	47b8      	blx	r7
 800c57c:	3001      	adds	r0, #1
 800c57e:	f43f ae3f 	beq.w	800c200 <_printf_float+0x98>
 800c582:	f108 0801 	add.w	r8, r8, #1
 800c586:	68e3      	ldr	r3, [r4, #12]
 800c588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c58a:	1a5b      	subs	r3, r3, r1
 800c58c:	4543      	cmp	r3, r8
 800c58e:	dcf0      	bgt.n	800c572 <_printf_float+0x40a>
 800c590:	e6f8      	b.n	800c384 <_printf_float+0x21c>
 800c592:	f04f 0800 	mov.w	r8, #0
 800c596:	f104 0919 	add.w	r9, r4, #25
 800c59a:	e7f4      	b.n	800c586 <_printf_float+0x41e>

0800c59c <_printf_common>:
 800c59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a0:	4616      	mov	r6, r2
 800c5a2:	4698      	mov	r8, r3
 800c5a4:	688a      	ldr	r2, [r1, #8]
 800c5a6:	690b      	ldr	r3, [r1, #16]
 800c5a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	bfb8      	it	lt
 800c5b0:	4613      	movlt	r3, r2
 800c5b2:	6033      	str	r3, [r6, #0]
 800c5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	b10a      	cbz	r2, 800c5c2 <_printf_common+0x26>
 800c5be:	3301      	adds	r3, #1
 800c5c0:	6033      	str	r3, [r6, #0]
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	0699      	lsls	r1, r3, #26
 800c5c6:	bf42      	ittt	mi
 800c5c8:	6833      	ldrmi	r3, [r6, #0]
 800c5ca:	3302      	addmi	r3, #2
 800c5cc:	6033      	strmi	r3, [r6, #0]
 800c5ce:	6825      	ldr	r5, [r4, #0]
 800c5d0:	f015 0506 	ands.w	r5, r5, #6
 800c5d4:	d106      	bne.n	800c5e4 <_printf_common+0x48>
 800c5d6:	f104 0a19 	add.w	sl, r4, #25
 800c5da:	68e3      	ldr	r3, [r4, #12]
 800c5dc:	6832      	ldr	r2, [r6, #0]
 800c5de:	1a9b      	subs	r3, r3, r2
 800c5e0:	42ab      	cmp	r3, r5
 800c5e2:	dc26      	bgt.n	800c632 <_printf_common+0x96>
 800c5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5e8:	6822      	ldr	r2, [r4, #0]
 800c5ea:	3b00      	subs	r3, #0
 800c5ec:	bf18      	it	ne
 800c5ee:	2301      	movne	r3, #1
 800c5f0:	0692      	lsls	r2, r2, #26
 800c5f2:	d42b      	bmi.n	800c64c <_printf_common+0xb0>
 800c5f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	47c8      	blx	r9
 800c5fe:	3001      	adds	r0, #1
 800c600:	d01e      	beq.n	800c640 <_printf_common+0xa4>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	6922      	ldr	r2, [r4, #16]
 800c606:	f003 0306 	and.w	r3, r3, #6
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	bf02      	ittt	eq
 800c60e:	68e5      	ldreq	r5, [r4, #12]
 800c610:	6833      	ldreq	r3, [r6, #0]
 800c612:	1aed      	subeq	r5, r5, r3
 800c614:	68a3      	ldr	r3, [r4, #8]
 800c616:	bf0c      	ite	eq
 800c618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c61c:	2500      	movne	r5, #0
 800c61e:	4293      	cmp	r3, r2
 800c620:	bfc4      	itt	gt
 800c622:	1a9b      	subgt	r3, r3, r2
 800c624:	18ed      	addgt	r5, r5, r3
 800c626:	2600      	movs	r6, #0
 800c628:	341a      	adds	r4, #26
 800c62a:	42b5      	cmp	r5, r6
 800c62c:	d11a      	bne.n	800c664 <_printf_common+0xc8>
 800c62e:	2000      	movs	r0, #0
 800c630:	e008      	b.n	800c644 <_printf_common+0xa8>
 800c632:	2301      	movs	r3, #1
 800c634:	4652      	mov	r2, sl
 800c636:	4641      	mov	r1, r8
 800c638:	4638      	mov	r0, r7
 800c63a:	47c8      	blx	r9
 800c63c:	3001      	adds	r0, #1
 800c63e:	d103      	bne.n	800c648 <_printf_common+0xac>
 800c640:	f04f 30ff 	mov.w	r0, #4294967295
 800c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c648:	3501      	adds	r5, #1
 800c64a:	e7c6      	b.n	800c5da <_printf_common+0x3e>
 800c64c:	18e1      	adds	r1, r4, r3
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	2030      	movs	r0, #48	@ 0x30
 800c652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c656:	4422      	add	r2, r4
 800c658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c65c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c660:	3302      	adds	r3, #2
 800c662:	e7c7      	b.n	800c5f4 <_printf_common+0x58>
 800c664:	2301      	movs	r3, #1
 800c666:	4622      	mov	r2, r4
 800c668:	4641      	mov	r1, r8
 800c66a:	4638      	mov	r0, r7
 800c66c:	47c8      	blx	r9
 800c66e:	3001      	adds	r0, #1
 800c670:	d0e6      	beq.n	800c640 <_printf_common+0xa4>
 800c672:	3601      	adds	r6, #1
 800c674:	e7d9      	b.n	800c62a <_printf_common+0x8e>
	...

0800c678 <_printf_i>:
 800c678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c67c:	7e0f      	ldrb	r7, [r1, #24]
 800c67e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c680:	2f78      	cmp	r7, #120	@ 0x78
 800c682:	4691      	mov	r9, r2
 800c684:	4680      	mov	r8, r0
 800c686:	460c      	mov	r4, r1
 800c688:	469a      	mov	sl, r3
 800c68a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c68e:	d807      	bhi.n	800c6a0 <_printf_i+0x28>
 800c690:	2f62      	cmp	r7, #98	@ 0x62
 800c692:	d80a      	bhi.n	800c6aa <_printf_i+0x32>
 800c694:	2f00      	cmp	r7, #0
 800c696:	f000 80d2 	beq.w	800c83e <_printf_i+0x1c6>
 800c69a:	2f58      	cmp	r7, #88	@ 0x58
 800c69c:	f000 80b9 	beq.w	800c812 <_printf_i+0x19a>
 800c6a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c6a8:	e03a      	b.n	800c720 <_printf_i+0xa8>
 800c6aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c6ae:	2b15      	cmp	r3, #21
 800c6b0:	d8f6      	bhi.n	800c6a0 <_printf_i+0x28>
 800c6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c6b8 <_printf_i+0x40>)
 800c6b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6b8:	0800c711 	.word	0x0800c711
 800c6bc:	0800c725 	.word	0x0800c725
 800c6c0:	0800c6a1 	.word	0x0800c6a1
 800c6c4:	0800c6a1 	.word	0x0800c6a1
 800c6c8:	0800c6a1 	.word	0x0800c6a1
 800c6cc:	0800c6a1 	.word	0x0800c6a1
 800c6d0:	0800c725 	.word	0x0800c725
 800c6d4:	0800c6a1 	.word	0x0800c6a1
 800c6d8:	0800c6a1 	.word	0x0800c6a1
 800c6dc:	0800c6a1 	.word	0x0800c6a1
 800c6e0:	0800c6a1 	.word	0x0800c6a1
 800c6e4:	0800c825 	.word	0x0800c825
 800c6e8:	0800c74f 	.word	0x0800c74f
 800c6ec:	0800c7df 	.word	0x0800c7df
 800c6f0:	0800c6a1 	.word	0x0800c6a1
 800c6f4:	0800c6a1 	.word	0x0800c6a1
 800c6f8:	0800c847 	.word	0x0800c847
 800c6fc:	0800c6a1 	.word	0x0800c6a1
 800c700:	0800c74f 	.word	0x0800c74f
 800c704:	0800c6a1 	.word	0x0800c6a1
 800c708:	0800c6a1 	.word	0x0800c6a1
 800c70c:	0800c7e7 	.word	0x0800c7e7
 800c710:	6833      	ldr	r3, [r6, #0]
 800c712:	1d1a      	adds	r2, r3, #4
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6032      	str	r2, [r6, #0]
 800c718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c71c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c720:	2301      	movs	r3, #1
 800c722:	e09d      	b.n	800c860 <_printf_i+0x1e8>
 800c724:	6833      	ldr	r3, [r6, #0]
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	1d19      	adds	r1, r3, #4
 800c72a:	6031      	str	r1, [r6, #0]
 800c72c:	0606      	lsls	r6, r0, #24
 800c72e:	d501      	bpl.n	800c734 <_printf_i+0xbc>
 800c730:	681d      	ldr	r5, [r3, #0]
 800c732:	e003      	b.n	800c73c <_printf_i+0xc4>
 800c734:	0645      	lsls	r5, r0, #25
 800c736:	d5fb      	bpl.n	800c730 <_printf_i+0xb8>
 800c738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c73c:	2d00      	cmp	r5, #0
 800c73e:	da03      	bge.n	800c748 <_printf_i+0xd0>
 800c740:	232d      	movs	r3, #45	@ 0x2d
 800c742:	426d      	negs	r5, r5
 800c744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c748:	4859      	ldr	r0, [pc, #356]	@ (800c8b0 <_printf_i+0x238>)
 800c74a:	230a      	movs	r3, #10
 800c74c:	e011      	b.n	800c772 <_printf_i+0xfa>
 800c74e:	6821      	ldr	r1, [r4, #0]
 800c750:	6833      	ldr	r3, [r6, #0]
 800c752:	0608      	lsls	r0, r1, #24
 800c754:	f853 5b04 	ldr.w	r5, [r3], #4
 800c758:	d402      	bmi.n	800c760 <_printf_i+0xe8>
 800c75a:	0649      	lsls	r1, r1, #25
 800c75c:	bf48      	it	mi
 800c75e:	b2ad      	uxthmi	r5, r5
 800c760:	2f6f      	cmp	r7, #111	@ 0x6f
 800c762:	4853      	ldr	r0, [pc, #332]	@ (800c8b0 <_printf_i+0x238>)
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	bf14      	ite	ne
 800c768:	230a      	movne	r3, #10
 800c76a:	2308      	moveq	r3, #8
 800c76c:	2100      	movs	r1, #0
 800c76e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c772:	6866      	ldr	r6, [r4, #4]
 800c774:	60a6      	str	r6, [r4, #8]
 800c776:	2e00      	cmp	r6, #0
 800c778:	bfa2      	ittt	ge
 800c77a:	6821      	ldrge	r1, [r4, #0]
 800c77c:	f021 0104 	bicge.w	r1, r1, #4
 800c780:	6021      	strge	r1, [r4, #0]
 800c782:	b90d      	cbnz	r5, 800c788 <_printf_i+0x110>
 800c784:	2e00      	cmp	r6, #0
 800c786:	d04b      	beq.n	800c820 <_printf_i+0x1a8>
 800c788:	4616      	mov	r6, r2
 800c78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c78e:	fb03 5711 	mls	r7, r3, r1, r5
 800c792:	5dc7      	ldrb	r7, [r0, r7]
 800c794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c798:	462f      	mov	r7, r5
 800c79a:	42bb      	cmp	r3, r7
 800c79c:	460d      	mov	r5, r1
 800c79e:	d9f4      	bls.n	800c78a <_printf_i+0x112>
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	d10b      	bne.n	800c7bc <_printf_i+0x144>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	07df      	lsls	r7, r3, #31
 800c7a8:	d508      	bpl.n	800c7bc <_printf_i+0x144>
 800c7aa:	6923      	ldr	r3, [r4, #16]
 800c7ac:	6861      	ldr	r1, [r4, #4]
 800c7ae:	4299      	cmp	r1, r3
 800c7b0:	bfde      	ittt	le
 800c7b2:	2330      	movle	r3, #48	@ 0x30
 800c7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7bc:	1b92      	subs	r2, r2, r6
 800c7be:	6122      	str	r2, [r4, #16]
 800c7c0:	f8cd a000 	str.w	sl, [sp]
 800c7c4:	464b      	mov	r3, r9
 800c7c6:	aa03      	add	r2, sp, #12
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4640      	mov	r0, r8
 800c7cc:	f7ff fee6 	bl	800c59c <_printf_common>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d14a      	bne.n	800c86a <_printf_i+0x1f2>
 800c7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d8:	b004      	add	sp, #16
 800c7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	f043 0320 	orr.w	r3, r3, #32
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	4833      	ldr	r0, [pc, #204]	@ (800c8b4 <_printf_i+0x23c>)
 800c7e8:	2778      	movs	r7, #120	@ 0x78
 800c7ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	6831      	ldr	r1, [r6, #0]
 800c7f2:	061f      	lsls	r7, r3, #24
 800c7f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7f8:	d402      	bmi.n	800c800 <_printf_i+0x188>
 800c7fa:	065f      	lsls	r7, r3, #25
 800c7fc:	bf48      	it	mi
 800c7fe:	b2ad      	uxthmi	r5, r5
 800c800:	6031      	str	r1, [r6, #0]
 800c802:	07d9      	lsls	r1, r3, #31
 800c804:	bf44      	itt	mi
 800c806:	f043 0320 	orrmi.w	r3, r3, #32
 800c80a:	6023      	strmi	r3, [r4, #0]
 800c80c:	b11d      	cbz	r5, 800c816 <_printf_i+0x19e>
 800c80e:	2310      	movs	r3, #16
 800c810:	e7ac      	b.n	800c76c <_printf_i+0xf4>
 800c812:	4827      	ldr	r0, [pc, #156]	@ (800c8b0 <_printf_i+0x238>)
 800c814:	e7e9      	b.n	800c7ea <_printf_i+0x172>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	f023 0320 	bic.w	r3, r3, #32
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	e7f6      	b.n	800c80e <_printf_i+0x196>
 800c820:	4616      	mov	r6, r2
 800c822:	e7bd      	b.n	800c7a0 <_printf_i+0x128>
 800c824:	6833      	ldr	r3, [r6, #0]
 800c826:	6825      	ldr	r5, [r4, #0]
 800c828:	6961      	ldr	r1, [r4, #20]
 800c82a:	1d18      	adds	r0, r3, #4
 800c82c:	6030      	str	r0, [r6, #0]
 800c82e:	062e      	lsls	r6, r5, #24
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	d501      	bpl.n	800c838 <_printf_i+0x1c0>
 800c834:	6019      	str	r1, [r3, #0]
 800c836:	e002      	b.n	800c83e <_printf_i+0x1c6>
 800c838:	0668      	lsls	r0, r5, #25
 800c83a:	d5fb      	bpl.n	800c834 <_printf_i+0x1bc>
 800c83c:	8019      	strh	r1, [r3, #0]
 800c83e:	2300      	movs	r3, #0
 800c840:	6123      	str	r3, [r4, #16]
 800c842:	4616      	mov	r6, r2
 800c844:	e7bc      	b.n	800c7c0 <_printf_i+0x148>
 800c846:	6833      	ldr	r3, [r6, #0]
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	6032      	str	r2, [r6, #0]
 800c84c:	681e      	ldr	r6, [r3, #0]
 800c84e:	6862      	ldr	r2, [r4, #4]
 800c850:	2100      	movs	r1, #0
 800c852:	4630      	mov	r0, r6
 800c854:	f7f3 fd44 	bl	80002e0 <memchr>
 800c858:	b108      	cbz	r0, 800c85e <_printf_i+0x1e6>
 800c85a:	1b80      	subs	r0, r0, r6
 800c85c:	6060      	str	r0, [r4, #4]
 800c85e:	6863      	ldr	r3, [r4, #4]
 800c860:	6123      	str	r3, [r4, #16]
 800c862:	2300      	movs	r3, #0
 800c864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c868:	e7aa      	b.n	800c7c0 <_printf_i+0x148>
 800c86a:	6923      	ldr	r3, [r4, #16]
 800c86c:	4632      	mov	r2, r6
 800c86e:	4649      	mov	r1, r9
 800c870:	4640      	mov	r0, r8
 800c872:	47d0      	blx	sl
 800c874:	3001      	adds	r0, #1
 800c876:	d0ad      	beq.n	800c7d4 <_printf_i+0x15c>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	079b      	lsls	r3, r3, #30
 800c87c:	d413      	bmi.n	800c8a6 <_printf_i+0x22e>
 800c87e:	68e0      	ldr	r0, [r4, #12]
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	4298      	cmp	r0, r3
 800c884:	bfb8      	it	lt
 800c886:	4618      	movlt	r0, r3
 800c888:	e7a6      	b.n	800c7d8 <_printf_i+0x160>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4632      	mov	r2, r6
 800c88e:	4649      	mov	r1, r9
 800c890:	4640      	mov	r0, r8
 800c892:	47d0      	blx	sl
 800c894:	3001      	adds	r0, #1
 800c896:	d09d      	beq.n	800c7d4 <_printf_i+0x15c>
 800c898:	3501      	adds	r5, #1
 800c89a:	68e3      	ldr	r3, [r4, #12]
 800c89c:	9903      	ldr	r1, [sp, #12]
 800c89e:	1a5b      	subs	r3, r3, r1
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	dcf2      	bgt.n	800c88a <_printf_i+0x212>
 800c8a4:	e7eb      	b.n	800c87e <_printf_i+0x206>
 800c8a6:	2500      	movs	r5, #0
 800c8a8:	f104 0619 	add.w	r6, r4, #25
 800c8ac:	e7f5      	b.n	800c89a <_printf_i+0x222>
 800c8ae:	bf00      	nop
 800c8b0:	0800fb72 	.word	0x0800fb72
 800c8b4:	0800fb83 	.word	0x0800fb83

0800c8b8 <_scanf_float>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	b087      	sub	sp, #28
 800c8be:	4617      	mov	r7, r2
 800c8c0:	9303      	str	r3, [sp, #12]
 800c8c2:	688b      	ldr	r3, [r1, #8]
 800c8c4:	1e5a      	subs	r2, r3, #1
 800c8c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c8ca:	bf81      	itttt	hi
 800c8cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c8d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8d8:	608b      	strhi	r3, [r1, #8]
 800c8da:	680b      	ldr	r3, [r1, #0]
 800c8dc:	460a      	mov	r2, r1
 800c8de:	f04f 0500 	mov.w	r5, #0
 800c8e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c8e6:	f842 3b1c 	str.w	r3, [r2], #28
 800c8ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c8ee:	4680      	mov	r8, r0
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	bf98      	it	ls
 800c8f4:	f04f 0b00 	movls.w	fp, #0
 800c8f8:	9201      	str	r2, [sp, #4]
 800c8fa:	4616      	mov	r6, r2
 800c8fc:	46aa      	mov	sl, r5
 800c8fe:	46a9      	mov	r9, r5
 800c900:	9502      	str	r5, [sp, #8]
 800c902:	68a2      	ldr	r2, [r4, #8]
 800c904:	b152      	cbz	r2, 800c91c <_scanf_float+0x64>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c90c:	d864      	bhi.n	800c9d8 <_scanf_float+0x120>
 800c90e:	2b40      	cmp	r3, #64	@ 0x40
 800c910:	d83c      	bhi.n	800c98c <_scanf_float+0xd4>
 800c912:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c916:	b2c8      	uxtb	r0, r1
 800c918:	280e      	cmp	r0, #14
 800c91a:	d93a      	bls.n	800c992 <_scanf_float+0xda>
 800c91c:	f1b9 0f00 	cmp.w	r9, #0
 800c920:	d003      	beq.n	800c92a <_scanf_float+0x72>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c92e:	f1ba 0f01 	cmp.w	sl, #1
 800c932:	f200 8117 	bhi.w	800cb64 <_scanf_float+0x2ac>
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	429e      	cmp	r6, r3
 800c93a:	f200 8108 	bhi.w	800cb4e <_scanf_float+0x296>
 800c93e:	2001      	movs	r0, #1
 800c940:	b007      	add	sp, #28
 800c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c946:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c94a:	2a0d      	cmp	r2, #13
 800c94c:	d8e6      	bhi.n	800c91c <_scanf_float+0x64>
 800c94e:	a101      	add	r1, pc, #4	@ (adr r1, 800c954 <_scanf_float+0x9c>)
 800c950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c954:	0800ca9b 	.word	0x0800ca9b
 800c958:	0800c91d 	.word	0x0800c91d
 800c95c:	0800c91d 	.word	0x0800c91d
 800c960:	0800c91d 	.word	0x0800c91d
 800c964:	0800cafb 	.word	0x0800cafb
 800c968:	0800cad3 	.word	0x0800cad3
 800c96c:	0800c91d 	.word	0x0800c91d
 800c970:	0800c91d 	.word	0x0800c91d
 800c974:	0800caa9 	.word	0x0800caa9
 800c978:	0800c91d 	.word	0x0800c91d
 800c97c:	0800c91d 	.word	0x0800c91d
 800c980:	0800c91d 	.word	0x0800c91d
 800c984:	0800c91d 	.word	0x0800c91d
 800c988:	0800ca61 	.word	0x0800ca61
 800c98c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c990:	e7db      	b.n	800c94a <_scanf_float+0x92>
 800c992:	290e      	cmp	r1, #14
 800c994:	d8c2      	bhi.n	800c91c <_scanf_float+0x64>
 800c996:	a001      	add	r0, pc, #4	@ (adr r0, 800c99c <_scanf_float+0xe4>)
 800c998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c99c:	0800ca51 	.word	0x0800ca51
 800c9a0:	0800c91d 	.word	0x0800c91d
 800c9a4:	0800ca51 	.word	0x0800ca51
 800c9a8:	0800cae7 	.word	0x0800cae7
 800c9ac:	0800c91d 	.word	0x0800c91d
 800c9b0:	0800c9f9 	.word	0x0800c9f9
 800c9b4:	0800ca37 	.word	0x0800ca37
 800c9b8:	0800ca37 	.word	0x0800ca37
 800c9bc:	0800ca37 	.word	0x0800ca37
 800c9c0:	0800ca37 	.word	0x0800ca37
 800c9c4:	0800ca37 	.word	0x0800ca37
 800c9c8:	0800ca37 	.word	0x0800ca37
 800c9cc:	0800ca37 	.word	0x0800ca37
 800c9d0:	0800ca37 	.word	0x0800ca37
 800c9d4:	0800ca37 	.word	0x0800ca37
 800c9d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c9da:	d809      	bhi.n	800c9f0 <_scanf_float+0x138>
 800c9dc:	2b60      	cmp	r3, #96	@ 0x60
 800c9de:	d8b2      	bhi.n	800c946 <_scanf_float+0x8e>
 800c9e0:	2b54      	cmp	r3, #84	@ 0x54
 800c9e2:	d07b      	beq.n	800cadc <_scanf_float+0x224>
 800c9e4:	2b59      	cmp	r3, #89	@ 0x59
 800c9e6:	d199      	bne.n	800c91c <_scanf_float+0x64>
 800c9e8:	2d07      	cmp	r5, #7
 800c9ea:	d197      	bne.n	800c91c <_scanf_float+0x64>
 800c9ec:	2508      	movs	r5, #8
 800c9ee:	e02c      	b.n	800ca4a <_scanf_float+0x192>
 800c9f0:	2b74      	cmp	r3, #116	@ 0x74
 800c9f2:	d073      	beq.n	800cadc <_scanf_float+0x224>
 800c9f4:	2b79      	cmp	r3, #121	@ 0x79
 800c9f6:	e7f6      	b.n	800c9e6 <_scanf_float+0x12e>
 800c9f8:	6821      	ldr	r1, [r4, #0]
 800c9fa:	05c8      	lsls	r0, r1, #23
 800c9fc:	d51b      	bpl.n	800ca36 <_scanf_float+0x17e>
 800c9fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ca02:	6021      	str	r1, [r4, #0]
 800ca04:	f109 0901 	add.w	r9, r9, #1
 800ca08:	f1bb 0f00 	cmp.w	fp, #0
 800ca0c:	d003      	beq.n	800ca16 <_scanf_float+0x15e>
 800ca0e:	3201      	adds	r2, #1
 800ca10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca14:	60a2      	str	r2, [r4, #8]
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	60a3      	str	r3, [r4, #8]
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	6123      	str	r3, [r4, #16]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	f340 8087 	ble.w	800cb3c <_scanf_float+0x284>
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	3301      	adds	r3, #1
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	e765      	b.n	800c902 <_scanf_float+0x4a>
 800ca36:	eb1a 0105 	adds.w	r1, sl, r5
 800ca3a:	f47f af6f 	bne.w	800c91c <_scanf_float+0x64>
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ca44:	6022      	str	r2, [r4, #0]
 800ca46:	460d      	mov	r5, r1
 800ca48:	468a      	mov	sl, r1
 800ca4a:	f806 3b01 	strb.w	r3, [r6], #1
 800ca4e:	e7e2      	b.n	800ca16 <_scanf_float+0x15e>
 800ca50:	6822      	ldr	r2, [r4, #0]
 800ca52:	0610      	lsls	r0, r2, #24
 800ca54:	f57f af62 	bpl.w	800c91c <_scanf_float+0x64>
 800ca58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca5c:	6022      	str	r2, [r4, #0]
 800ca5e:	e7f4      	b.n	800ca4a <_scanf_float+0x192>
 800ca60:	f1ba 0f00 	cmp.w	sl, #0
 800ca64:	d10e      	bne.n	800ca84 <_scanf_float+0x1cc>
 800ca66:	f1b9 0f00 	cmp.w	r9, #0
 800ca6a:	d10e      	bne.n	800ca8a <_scanf_float+0x1d2>
 800ca6c:	6822      	ldr	r2, [r4, #0]
 800ca6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca76:	d108      	bne.n	800ca8a <_scanf_float+0x1d2>
 800ca78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca7c:	6022      	str	r2, [r4, #0]
 800ca7e:	f04f 0a01 	mov.w	sl, #1
 800ca82:	e7e2      	b.n	800ca4a <_scanf_float+0x192>
 800ca84:	f1ba 0f02 	cmp.w	sl, #2
 800ca88:	d055      	beq.n	800cb36 <_scanf_float+0x27e>
 800ca8a:	2d01      	cmp	r5, #1
 800ca8c:	d002      	beq.n	800ca94 <_scanf_float+0x1dc>
 800ca8e:	2d04      	cmp	r5, #4
 800ca90:	f47f af44 	bne.w	800c91c <_scanf_float+0x64>
 800ca94:	3501      	adds	r5, #1
 800ca96:	b2ed      	uxtb	r5, r5
 800ca98:	e7d7      	b.n	800ca4a <_scanf_float+0x192>
 800ca9a:	f1ba 0f01 	cmp.w	sl, #1
 800ca9e:	f47f af3d 	bne.w	800c91c <_scanf_float+0x64>
 800caa2:	f04f 0a02 	mov.w	sl, #2
 800caa6:	e7d0      	b.n	800ca4a <_scanf_float+0x192>
 800caa8:	b97d      	cbnz	r5, 800caca <_scanf_float+0x212>
 800caaa:	f1b9 0f00 	cmp.w	r9, #0
 800caae:	f47f af38 	bne.w	800c922 <_scanf_float+0x6a>
 800cab2:	6822      	ldr	r2, [r4, #0]
 800cab4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cab8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cabc:	f040 8101 	bne.w	800ccc2 <_scanf_float+0x40a>
 800cac0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cac4:	6022      	str	r2, [r4, #0]
 800cac6:	2501      	movs	r5, #1
 800cac8:	e7bf      	b.n	800ca4a <_scanf_float+0x192>
 800caca:	2d03      	cmp	r5, #3
 800cacc:	d0e2      	beq.n	800ca94 <_scanf_float+0x1dc>
 800cace:	2d05      	cmp	r5, #5
 800cad0:	e7de      	b.n	800ca90 <_scanf_float+0x1d8>
 800cad2:	2d02      	cmp	r5, #2
 800cad4:	f47f af22 	bne.w	800c91c <_scanf_float+0x64>
 800cad8:	2503      	movs	r5, #3
 800cada:	e7b6      	b.n	800ca4a <_scanf_float+0x192>
 800cadc:	2d06      	cmp	r5, #6
 800cade:	f47f af1d 	bne.w	800c91c <_scanf_float+0x64>
 800cae2:	2507      	movs	r5, #7
 800cae4:	e7b1      	b.n	800ca4a <_scanf_float+0x192>
 800cae6:	6822      	ldr	r2, [r4, #0]
 800cae8:	0591      	lsls	r1, r2, #22
 800caea:	f57f af17 	bpl.w	800c91c <_scanf_float+0x64>
 800caee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800caf2:	6022      	str	r2, [r4, #0]
 800caf4:	f8cd 9008 	str.w	r9, [sp, #8]
 800caf8:	e7a7      	b.n	800ca4a <_scanf_float+0x192>
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cb00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cb04:	d006      	beq.n	800cb14 <_scanf_float+0x25c>
 800cb06:	0550      	lsls	r0, r2, #21
 800cb08:	f57f af08 	bpl.w	800c91c <_scanf_float+0x64>
 800cb0c:	f1b9 0f00 	cmp.w	r9, #0
 800cb10:	f000 80d7 	beq.w	800ccc2 <_scanf_float+0x40a>
 800cb14:	0591      	lsls	r1, r2, #22
 800cb16:	bf58      	it	pl
 800cb18:	9902      	ldrpl	r1, [sp, #8]
 800cb1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb1e:	bf58      	it	pl
 800cb20:	eba9 0101 	subpl.w	r1, r9, r1
 800cb24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cb28:	bf58      	it	pl
 800cb2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cb2e:	6022      	str	r2, [r4, #0]
 800cb30:	f04f 0900 	mov.w	r9, #0
 800cb34:	e789      	b.n	800ca4a <_scanf_float+0x192>
 800cb36:	f04f 0a03 	mov.w	sl, #3
 800cb3a:	e786      	b.n	800ca4a <_scanf_float+0x192>
 800cb3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cb40:	4639      	mov	r1, r7
 800cb42:	4640      	mov	r0, r8
 800cb44:	4798      	blx	r3
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f43f aedb 	beq.w	800c902 <_scanf_float+0x4a>
 800cb4c:	e6e6      	b.n	800c91c <_scanf_float+0x64>
 800cb4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb56:	463a      	mov	r2, r7
 800cb58:	4640      	mov	r0, r8
 800cb5a:	4798      	blx	r3
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	6123      	str	r3, [r4, #16]
 800cb62:	e6e8      	b.n	800c936 <_scanf_float+0x7e>
 800cb64:	1e6b      	subs	r3, r5, #1
 800cb66:	2b06      	cmp	r3, #6
 800cb68:	d824      	bhi.n	800cbb4 <_scanf_float+0x2fc>
 800cb6a:	2d02      	cmp	r5, #2
 800cb6c:	d836      	bhi.n	800cbdc <_scanf_float+0x324>
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	429e      	cmp	r6, r3
 800cb72:	f67f aee4 	bls.w	800c93e <_scanf_float+0x86>
 800cb76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb7e:	463a      	mov	r2, r7
 800cb80:	4640      	mov	r0, r8
 800cb82:	4798      	blx	r3
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	e7f0      	b.n	800cb6e <_scanf_float+0x2b6>
 800cb8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cb94:	463a      	mov	r2, r7
 800cb96:	4640      	mov	r0, r8
 800cb98:	4798      	blx	r3
 800cb9a:	6923      	ldr	r3, [r4, #16]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	6123      	str	r3, [r4, #16]
 800cba0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cba4:	fa5f fa8a 	uxtb.w	sl, sl
 800cba8:	f1ba 0f02 	cmp.w	sl, #2
 800cbac:	d1ee      	bne.n	800cb8c <_scanf_float+0x2d4>
 800cbae:	3d03      	subs	r5, #3
 800cbb0:	b2ed      	uxtb	r5, r5
 800cbb2:	1b76      	subs	r6, r6, r5
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	05da      	lsls	r2, r3, #23
 800cbb8:	d530      	bpl.n	800cc1c <_scanf_float+0x364>
 800cbba:	055b      	lsls	r3, r3, #21
 800cbbc:	d511      	bpl.n	800cbe2 <_scanf_float+0x32a>
 800cbbe:	9b01      	ldr	r3, [sp, #4]
 800cbc0:	429e      	cmp	r6, r3
 800cbc2:	f67f aebc 	bls.w	800c93e <_scanf_float+0x86>
 800cbc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbce:	463a      	mov	r2, r7
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	4798      	blx	r3
 800cbd4:	6923      	ldr	r3, [r4, #16]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	6123      	str	r3, [r4, #16]
 800cbda:	e7f0      	b.n	800cbbe <_scanf_float+0x306>
 800cbdc:	46aa      	mov	sl, r5
 800cbde:	46b3      	mov	fp, r6
 800cbe0:	e7de      	b.n	800cba0 <_scanf_float+0x2e8>
 800cbe2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cbe6:	6923      	ldr	r3, [r4, #16]
 800cbe8:	2965      	cmp	r1, #101	@ 0x65
 800cbea:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbee:	f106 35ff 	add.w	r5, r6, #4294967295
 800cbf2:	6123      	str	r3, [r4, #16]
 800cbf4:	d00c      	beq.n	800cc10 <_scanf_float+0x358>
 800cbf6:	2945      	cmp	r1, #69	@ 0x45
 800cbf8:	d00a      	beq.n	800cc10 <_scanf_float+0x358>
 800cbfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbfe:	463a      	mov	r2, r7
 800cc00:	4640      	mov	r0, r8
 800cc02:	4798      	blx	r3
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	1eb5      	subs	r5, r6, #2
 800cc0e:	6123      	str	r3, [r4, #16]
 800cc10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc14:	463a      	mov	r2, r7
 800cc16:	4640      	mov	r0, r8
 800cc18:	4798      	blx	r3
 800cc1a:	462e      	mov	r6, r5
 800cc1c:	6822      	ldr	r2, [r4, #0]
 800cc1e:	f012 0210 	ands.w	r2, r2, #16
 800cc22:	d001      	beq.n	800cc28 <_scanf_float+0x370>
 800cc24:	2000      	movs	r0, #0
 800cc26:	e68b      	b.n	800c940 <_scanf_float+0x88>
 800cc28:	7032      	strb	r2, [r6, #0]
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cc30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc34:	d11a      	bne.n	800cc6c <_scanf_float+0x3b4>
 800cc36:	9b02      	ldr	r3, [sp, #8]
 800cc38:	454b      	cmp	r3, r9
 800cc3a:	eba3 0209 	sub.w	r2, r3, r9
 800cc3e:	d121      	bne.n	800cc84 <_scanf_float+0x3cc>
 800cc40:	9901      	ldr	r1, [sp, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	4640      	mov	r0, r8
 800cc46:	f7ff f9ed 	bl	800c024 <_strtod_r>
 800cc4a:	9b03      	ldr	r3, [sp, #12]
 800cc4c:	6821      	ldr	r1, [r4, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f011 0f02 	tst.w	r1, #2
 800cc54:	f103 0204 	add.w	r2, r3, #4
 800cc58:	d01f      	beq.n	800cc9a <_scanf_float+0x3e2>
 800cc5a:	9903      	ldr	r1, [sp, #12]
 800cc5c:	600a      	str	r2, [r1, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	ed83 0b00 	vstr	d0, [r3]
 800cc64:	68e3      	ldr	r3, [r4, #12]
 800cc66:	3301      	adds	r3, #1
 800cc68:	60e3      	str	r3, [r4, #12]
 800cc6a:	e7db      	b.n	800cc24 <_scanf_float+0x36c>
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0e6      	beq.n	800cc40 <_scanf_float+0x388>
 800cc72:	9905      	ldr	r1, [sp, #20]
 800cc74:	230a      	movs	r3, #10
 800cc76:	3101      	adds	r1, #1
 800cc78:	4640      	mov	r0, r8
 800cc7a:	f002 f989 	bl	800ef90 <_strtol_r>
 800cc7e:	9b04      	ldr	r3, [sp, #16]
 800cc80:	9e05      	ldr	r6, [sp, #20]
 800cc82:	1ac2      	subs	r2, r0, r3
 800cc84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cc88:	429e      	cmp	r6, r3
 800cc8a:	bf28      	it	cs
 800cc8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cc90:	490d      	ldr	r1, [pc, #52]	@ (800ccc8 <_scanf_float+0x410>)
 800cc92:	4630      	mov	r0, r6
 800cc94:	f000 f912 	bl	800cebc <siprintf>
 800cc98:	e7d2      	b.n	800cc40 <_scanf_float+0x388>
 800cc9a:	f011 0f04 	tst.w	r1, #4
 800cc9e:	9903      	ldr	r1, [sp, #12]
 800cca0:	600a      	str	r2, [r1, #0]
 800cca2:	d1dc      	bne.n	800cc5e <_scanf_float+0x3a6>
 800cca4:	eeb4 0b40 	vcmp.f64	d0, d0
 800cca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccac:	681d      	ldr	r5, [r3, #0]
 800ccae:	d705      	bvc.n	800ccbc <_scanf_float+0x404>
 800ccb0:	4806      	ldr	r0, [pc, #24]	@ (800cccc <_scanf_float+0x414>)
 800ccb2:	f000 fa11 	bl	800d0d8 <nanf>
 800ccb6:	ed85 0a00 	vstr	s0, [r5]
 800ccba:	e7d3      	b.n	800cc64 <_scanf_float+0x3ac>
 800ccbc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ccc0:	e7f9      	b.n	800ccb6 <_scanf_float+0x3fe>
 800ccc2:	f04f 0900 	mov.w	r9, #0
 800ccc6:	e630      	b.n	800c92a <_scanf_float+0x72>
 800ccc8:	0800fb94 	.word	0x0800fb94
 800cccc:	0800ff35 	.word	0x0800ff35

0800ccd0 <std>:
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	b510      	push	{r4, lr}
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	e9c0 3300 	strd	r3, r3, [r0]
 800ccda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccde:	6083      	str	r3, [r0, #8]
 800cce0:	8181      	strh	r1, [r0, #12]
 800cce2:	6643      	str	r3, [r0, #100]	@ 0x64
 800cce4:	81c2      	strh	r2, [r0, #14]
 800cce6:	6183      	str	r3, [r0, #24]
 800cce8:	4619      	mov	r1, r3
 800ccea:	2208      	movs	r2, #8
 800ccec:	305c      	adds	r0, #92	@ 0x5c
 800ccee:	f000 f948 	bl	800cf82 <memset>
 800ccf2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd28 <std+0x58>)
 800ccf4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccf6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd2c <std+0x5c>)
 800ccf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccfa:	4b0d      	ldr	r3, [pc, #52]	@ (800cd30 <std+0x60>)
 800ccfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	@ (800cd34 <std+0x64>)
 800cd00:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd02:	4b0d      	ldr	r3, [pc, #52]	@ (800cd38 <std+0x68>)
 800cd04:	6224      	str	r4, [r4, #32]
 800cd06:	429c      	cmp	r4, r3
 800cd08:	d006      	beq.n	800cd18 <std+0x48>
 800cd0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd0e:	4294      	cmp	r4, r2
 800cd10:	d002      	beq.n	800cd18 <std+0x48>
 800cd12:	33d0      	adds	r3, #208	@ 0xd0
 800cd14:	429c      	cmp	r4, r3
 800cd16:	d105      	bne.n	800cd24 <std+0x54>
 800cd18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd20:	f000 b9be 	b.w	800d0a0 <__retarget_lock_init_recursive>
 800cd24:	bd10      	pop	{r4, pc}
 800cd26:	bf00      	nop
 800cd28:	0800cefd 	.word	0x0800cefd
 800cd2c:	0800cf1f 	.word	0x0800cf1f
 800cd30:	0800cf57 	.word	0x0800cf57
 800cd34:	0800cf7b 	.word	0x0800cf7b
 800cd38:	240003dc 	.word	0x240003dc

0800cd3c <stdio_exit_handler>:
 800cd3c:	4a02      	ldr	r2, [pc, #8]	@ (800cd48 <stdio_exit_handler+0xc>)
 800cd3e:	4903      	ldr	r1, [pc, #12]	@ (800cd4c <stdio_exit_handler+0x10>)
 800cd40:	4803      	ldr	r0, [pc, #12]	@ (800cd50 <stdio_exit_handler+0x14>)
 800cd42:	f000 b869 	b.w	800ce18 <_fwalk_sglue>
 800cd46:	bf00      	nop
 800cd48:	2400001c 	.word	0x2400001c
 800cd4c:	0800f365 	.word	0x0800f365
 800cd50:	24000198 	.word	0x24000198

0800cd54 <cleanup_stdio>:
 800cd54:	6841      	ldr	r1, [r0, #4]
 800cd56:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <cleanup_stdio+0x34>)
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	b510      	push	{r4, lr}
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	d001      	beq.n	800cd64 <cleanup_stdio+0x10>
 800cd60:	f002 fb00 	bl	800f364 <_fflush_r>
 800cd64:	68a1      	ldr	r1, [r4, #8]
 800cd66:	4b09      	ldr	r3, [pc, #36]	@ (800cd8c <cleanup_stdio+0x38>)
 800cd68:	4299      	cmp	r1, r3
 800cd6a:	d002      	beq.n	800cd72 <cleanup_stdio+0x1e>
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f002 faf9 	bl	800f364 <_fflush_r>
 800cd72:	68e1      	ldr	r1, [r4, #12]
 800cd74:	4b06      	ldr	r3, [pc, #24]	@ (800cd90 <cleanup_stdio+0x3c>)
 800cd76:	4299      	cmp	r1, r3
 800cd78:	d004      	beq.n	800cd84 <cleanup_stdio+0x30>
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd80:	f002 baf0 	b.w	800f364 <_fflush_r>
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	bf00      	nop
 800cd88:	240003dc 	.word	0x240003dc
 800cd8c:	24000444 	.word	0x24000444
 800cd90:	240004ac 	.word	0x240004ac

0800cd94 <global_stdio_init.part.0>:
 800cd94:	b510      	push	{r4, lr}
 800cd96:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc4 <global_stdio_init.part.0+0x30>)
 800cd98:	4c0b      	ldr	r4, [pc, #44]	@ (800cdc8 <global_stdio_init.part.0+0x34>)
 800cd9a:	4a0c      	ldr	r2, [pc, #48]	@ (800cdcc <global_stdio_init.part.0+0x38>)
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	4620      	mov	r0, r4
 800cda0:	2200      	movs	r2, #0
 800cda2:	2104      	movs	r1, #4
 800cda4:	f7ff ff94 	bl	800ccd0 <std>
 800cda8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cdac:	2201      	movs	r2, #1
 800cdae:	2109      	movs	r1, #9
 800cdb0:	f7ff ff8e 	bl	800ccd0 <std>
 800cdb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cdb8:	2202      	movs	r2, #2
 800cdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdbe:	2112      	movs	r1, #18
 800cdc0:	f7ff bf86 	b.w	800ccd0 <std>
 800cdc4:	24000514 	.word	0x24000514
 800cdc8:	240003dc 	.word	0x240003dc
 800cdcc:	0800cd3d 	.word	0x0800cd3d

0800cdd0 <__sfp_lock_acquire>:
 800cdd0:	4801      	ldr	r0, [pc, #4]	@ (800cdd8 <__sfp_lock_acquire+0x8>)
 800cdd2:	f000 b966 	b.w	800d0a2 <__retarget_lock_acquire_recursive>
 800cdd6:	bf00      	nop
 800cdd8:	2400051d 	.word	0x2400051d

0800cddc <__sfp_lock_release>:
 800cddc:	4801      	ldr	r0, [pc, #4]	@ (800cde4 <__sfp_lock_release+0x8>)
 800cdde:	f000 b961 	b.w	800d0a4 <__retarget_lock_release_recursive>
 800cde2:	bf00      	nop
 800cde4:	2400051d 	.word	0x2400051d

0800cde8 <__sinit>:
 800cde8:	b510      	push	{r4, lr}
 800cdea:	4604      	mov	r4, r0
 800cdec:	f7ff fff0 	bl	800cdd0 <__sfp_lock_acquire>
 800cdf0:	6a23      	ldr	r3, [r4, #32]
 800cdf2:	b11b      	cbz	r3, 800cdfc <__sinit+0x14>
 800cdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdf8:	f7ff bff0 	b.w	800cddc <__sfp_lock_release>
 800cdfc:	4b04      	ldr	r3, [pc, #16]	@ (800ce10 <__sinit+0x28>)
 800cdfe:	6223      	str	r3, [r4, #32]
 800ce00:	4b04      	ldr	r3, [pc, #16]	@ (800ce14 <__sinit+0x2c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1f5      	bne.n	800cdf4 <__sinit+0xc>
 800ce08:	f7ff ffc4 	bl	800cd94 <global_stdio_init.part.0>
 800ce0c:	e7f2      	b.n	800cdf4 <__sinit+0xc>
 800ce0e:	bf00      	nop
 800ce10:	0800cd55 	.word	0x0800cd55
 800ce14:	24000514 	.word	0x24000514

0800ce18 <_fwalk_sglue>:
 800ce18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	4688      	mov	r8, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	2600      	movs	r6, #0
 800ce24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce28:	f1b9 0901 	subs.w	r9, r9, #1
 800ce2c:	d505      	bpl.n	800ce3a <_fwalk_sglue+0x22>
 800ce2e:	6824      	ldr	r4, [r4, #0]
 800ce30:	2c00      	cmp	r4, #0
 800ce32:	d1f7      	bne.n	800ce24 <_fwalk_sglue+0xc>
 800ce34:	4630      	mov	r0, r6
 800ce36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3a:	89ab      	ldrh	r3, [r5, #12]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d907      	bls.n	800ce50 <_fwalk_sglue+0x38>
 800ce40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce44:	3301      	adds	r3, #1
 800ce46:	d003      	beq.n	800ce50 <_fwalk_sglue+0x38>
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	47c0      	blx	r8
 800ce4e:	4306      	orrs	r6, r0
 800ce50:	3568      	adds	r5, #104	@ 0x68
 800ce52:	e7e9      	b.n	800ce28 <_fwalk_sglue+0x10>

0800ce54 <sniprintf>:
 800ce54:	b40c      	push	{r2, r3}
 800ce56:	b530      	push	{r4, r5, lr}
 800ce58:	4b17      	ldr	r3, [pc, #92]	@ (800ceb8 <sniprintf+0x64>)
 800ce5a:	1e0c      	subs	r4, r1, #0
 800ce5c:	681d      	ldr	r5, [r3, #0]
 800ce5e:	b09d      	sub	sp, #116	@ 0x74
 800ce60:	da08      	bge.n	800ce74 <sniprintf+0x20>
 800ce62:	238b      	movs	r3, #139	@ 0x8b
 800ce64:	602b      	str	r3, [r5, #0]
 800ce66:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6a:	b01d      	add	sp, #116	@ 0x74
 800ce6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce70:	b002      	add	sp, #8
 800ce72:	4770      	bx	lr
 800ce74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce7c:	bf14      	ite	ne
 800ce7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce82:	4623      	moveq	r3, r4
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	9307      	str	r3, [sp, #28]
 800ce88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce8c:	9002      	str	r0, [sp, #8]
 800ce8e:	9006      	str	r0, [sp, #24]
 800ce90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ce96:	ab21      	add	r3, sp, #132	@ 0x84
 800ce98:	a902      	add	r1, sp, #8
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	f002 f8e1 	bl	800f064 <_svfiprintf_r>
 800cea2:	1c43      	adds	r3, r0, #1
 800cea4:	bfbc      	itt	lt
 800cea6:	238b      	movlt	r3, #139	@ 0x8b
 800cea8:	602b      	strlt	r3, [r5, #0]
 800ceaa:	2c00      	cmp	r4, #0
 800ceac:	d0dd      	beq.n	800ce6a <sniprintf+0x16>
 800ceae:	9b02      	ldr	r3, [sp, #8]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	701a      	strb	r2, [r3, #0]
 800ceb4:	e7d9      	b.n	800ce6a <sniprintf+0x16>
 800ceb6:	bf00      	nop
 800ceb8:	24000194 	.word	0x24000194

0800cebc <siprintf>:
 800cebc:	b40e      	push	{r1, r2, r3}
 800cebe:	b500      	push	{lr}
 800cec0:	b09c      	sub	sp, #112	@ 0x70
 800cec2:	ab1d      	add	r3, sp, #116	@ 0x74
 800cec4:	9002      	str	r0, [sp, #8]
 800cec6:	9006      	str	r0, [sp, #24]
 800cec8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cecc:	4809      	ldr	r0, [pc, #36]	@ (800cef4 <siprintf+0x38>)
 800cece:	9107      	str	r1, [sp, #28]
 800ced0:	9104      	str	r1, [sp, #16]
 800ced2:	4909      	ldr	r1, [pc, #36]	@ (800cef8 <siprintf+0x3c>)
 800ced4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ced8:	9105      	str	r1, [sp, #20]
 800ceda:	6800      	ldr	r0, [r0, #0]
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	a902      	add	r1, sp, #8
 800cee0:	f002 f8c0 	bl	800f064 <_svfiprintf_r>
 800cee4:	9b02      	ldr	r3, [sp, #8]
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	b01c      	add	sp, #112	@ 0x70
 800ceec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cef0:	b003      	add	sp, #12
 800cef2:	4770      	bx	lr
 800cef4:	24000194 	.word	0x24000194
 800cef8:	ffff0208 	.word	0xffff0208

0800cefc <__sread>:
 800cefc:	b510      	push	{r4, lr}
 800cefe:	460c      	mov	r4, r1
 800cf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf04:	f000 f87e 	bl	800d004 <_read_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	bfab      	itete	ge
 800cf0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf0e:	89a3      	ldrhlt	r3, [r4, #12]
 800cf10:	181b      	addge	r3, r3, r0
 800cf12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf16:	bfac      	ite	ge
 800cf18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf1a:	81a3      	strhlt	r3, [r4, #12]
 800cf1c:	bd10      	pop	{r4, pc}

0800cf1e <__swrite>:
 800cf1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf22:	461f      	mov	r7, r3
 800cf24:	898b      	ldrh	r3, [r1, #12]
 800cf26:	05db      	lsls	r3, r3, #23
 800cf28:	4605      	mov	r5, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4616      	mov	r6, r2
 800cf2e:	d505      	bpl.n	800cf3c <__swrite+0x1e>
 800cf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf34:	2302      	movs	r3, #2
 800cf36:	2200      	movs	r2, #0
 800cf38:	f000 f852 	bl	800cfe0 <_lseek_r>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	4632      	mov	r2, r6
 800cf4a:	463b      	mov	r3, r7
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf52:	f000 b869 	b.w	800d028 <_write_r>

0800cf56 <__sseek>:
 800cf56:	b510      	push	{r4, lr}
 800cf58:	460c      	mov	r4, r1
 800cf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5e:	f000 f83f 	bl	800cfe0 <_lseek_r>
 800cf62:	1c43      	adds	r3, r0, #1
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	bf15      	itete	ne
 800cf68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf72:	81a3      	strheq	r3, [r4, #12]
 800cf74:	bf18      	it	ne
 800cf76:	81a3      	strhne	r3, [r4, #12]
 800cf78:	bd10      	pop	{r4, pc}

0800cf7a <__sclose>:
 800cf7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf7e:	f000 b81f 	b.w	800cfc0 <_close_r>

0800cf82 <memset>:
 800cf82:	4402      	add	r2, r0
 800cf84:	4603      	mov	r3, r0
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d100      	bne.n	800cf8c <memset+0xa>
 800cf8a:	4770      	bx	lr
 800cf8c:	f803 1b01 	strb.w	r1, [r3], #1
 800cf90:	e7f9      	b.n	800cf86 <memset+0x4>

0800cf92 <strncmp>:
 800cf92:	b510      	push	{r4, lr}
 800cf94:	b16a      	cbz	r2, 800cfb2 <strncmp+0x20>
 800cf96:	3901      	subs	r1, #1
 800cf98:	1884      	adds	r4, r0, r2
 800cf9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d103      	bne.n	800cfae <strncmp+0x1c>
 800cfa6:	42a0      	cmp	r0, r4
 800cfa8:	d001      	beq.n	800cfae <strncmp+0x1c>
 800cfaa:	2a00      	cmp	r2, #0
 800cfac:	d1f5      	bne.n	800cf9a <strncmp+0x8>
 800cfae:	1ad0      	subs	r0, r2, r3
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	e7fc      	b.n	800cfb0 <strncmp+0x1e>
	...

0800cfb8 <_localeconv_r>:
 800cfb8:	4800      	ldr	r0, [pc, #0]	@ (800cfbc <_localeconv_r+0x4>)
 800cfba:	4770      	bx	lr
 800cfbc:	24000118 	.word	0x24000118

0800cfc0 <_close_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4d06      	ldr	r5, [pc, #24]	@ (800cfdc <_close_r+0x1c>)
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	4608      	mov	r0, r1
 800cfca:	602b      	str	r3, [r5, #0]
 800cfcc:	f7f4 fc56 	bl	800187c <_close>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	d102      	bne.n	800cfda <_close_r+0x1a>
 800cfd4:	682b      	ldr	r3, [r5, #0]
 800cfd6:	b103      	cbz	r3, 800cfda <_close_r+0x1a>
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	24000518 	.word	0x24000518

0800cfe0 <_lseek_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4d07      	ldr	r5, [pc, #28]	@ (800d000 <_lseek_r+0x20>)
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	4608      	mov	r0, r1
 800cfe8:	4611      	mov	r1, r2
 800cfea:	2200      	movs	r2, #0
 800cfec:	602a      	str	r2, [r5, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	f7f4 fc6b 	bl	80018ca <_lseek>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	d102      	bne.n	800cffe <_lseek_r+0x1e>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	b103      	cbz	r3, 800cffe <_lseek_r+0x1e>
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	24000518 	.word	0x24000518

0800d004 <_read_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d07      	ldr	r5, [pc, #28]	@ (800d024 <_read_r+0x20>)
 800d008:	4604      	mov	r4, r0
 800d00a:	4608      	mov	r0, r1
 800d00c:	4611      	mov	r1, r2
 800d00e:	2200      	movs	r2, #0
 800d010:	602a      	str	r2, [r5, #0]
 800d012:	461a      	mov	r2, r3
 800d014:	f7f4 fbf9 	bl	800180a <_read>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	d102      	bne.n	800d022 <_read_r+0x1e>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	b103      	cbz	r3, 800d022 <_read_r+0x1e>
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	24000518 	.word	0x24000518

0800d028 <_write_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d07      	ldr	r5, [pc, #28]	@ (800d048 <_write_r+0x20>)
 800d02c:	4604      	mov	r4, r0
 800d02e:	4608      	mov	r0, r1
 800d030:	4611      	mov	r1, r2
 800d032:	2200      	movs	r2, #0
 800d034:	602a      	str	r2, [r5, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	f7f4 fc04 	bl	8001844 <_write>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_write_r+0x1e>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_write_r+0x1e>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	24000518 	.word	0x24000518

0800d04c <__errno>:
 800d04c:	4b01      	ldr	r3, [pc, #4]	@ (800d054 <__errno+0x8>)
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	24000194 	.word	0x24000194

0800d058 <__libc_init_array>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	4d0d      	ldr	r5, [pc, #52]	@ (800d090 <__libc_init_array+0x38>)
 800d05c:	4c0d      	ldr	r4, [pc, #52]	@ (800d094 <__libc_init_array+0x3c>)
 800d05e:	1b64      	subs	r4, r4, r5
 800d060:	10a4      	asrs	r4, r4, #2
 800d062:	2600      	movs	r6, #0
 800d064:	42a6      	cmp	r6, r4
 800d066:	d109      	bne.n	800d07c <__libc_init_array+0x24>
 800d068:	4d0b      	ldr	r5, [pc, #44]	@ (800d098 <__libc_init_array+0x40>)
 800d06a:	4c0c      	ldr	r4, [pc, #48]	@ (800d09c <__libc_init_array+0x44>)
 800d06c:	f002 fcea 	bl	800fa44 <_init>
 800d070:	1b64      	subs	r4, r4, r5
 800d072:	10a4      	asrs	r4, r4, #2
 800d074:	2600      	movs	r6, #0
 800d076:	42a6      	cmp	r6, r4
 800d078:	d105      	bne.n	800d086 <__libc_init_array+0x2e>
 800d07a:	bd70      	pop	{r4, r5, r6, pc}
 800d07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d080:	4798      	blx	r3
 800d082:	3601      	adds	r6, #1
 800d084:	e7ee      	b.n	800d064 <__libc_init_array+0xc>
 800d086:	f855 3b04 	ldr.w	r3, [r5], #4
 800d08a:	4798      	blx	r3
 800d08c:	3601      	adds	r6, #1
 800d08e:	e7f2      	b.n	800d076 <__libc_init_array+0x1e>
 800d090:	0800ff40 	.word	0x0800ff40
 800d094:	0800ff40 	.word	0x0800ff40
 800d098:	0800ff40 	.word	0x0800ff40
 800d09c:	0800ff44 	.word	0x0800ff44

0800d0a0 <__retarget_lock_init_recursive>:
 800d0a0:	4770      	bx	lr

0800d0a2 <__retarget_lock_acquire_recursive>:
 800d0a2:	4770      	bx	lr

0800d0a4 <__retarget_lock_release_recursive>:
 800d0a4:	4770      	bx	lr

0800d0a6 <memcpy>:
 800d0a6:	440a      	add	r2, r1
 800d0a8:	4291      	cmp	r1, r2
 800d0aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0ae:	d100      	bne.n	800d0b2 <memcpy+0xc>
 800d0b0:	4770      	bx	lr
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0bc:	4291      	cmp	r1, r2
 800d0be:	d1f9      	bne.n	800d0b4 <memcpy+0xe>
 800d0c0:	bd10      	pop	{r4, pc}
 800d0c2:	0000      	movs	r0, r0
 800d0c4:	0000      	movs	r0, r0
	...

0800d0c8 <nan>:
 800d0c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d0d0 <nan+0x8>
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	00000000 	.word	0x00000000
 800d0d4:	7ff80000 	.word	0x7ff80000

0800d0d8 <nanf>:
 800d0d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d0e0 <nanf+0x8>
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	7fc00000 	.word	0x7fc00000

0800d0e4 <quorem>:
 800d0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e8:	6903      	ldr	r3, [r0, #16]
 800d0ea:	690c      	ldr	r4, [r1, #16]
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	db7e      	blt.n	800d1f0 <quorem+0x10c>
 800d0f2:	3c01      	subs	r4, #1
 800d0f4:	f101 0814 	add.w	r8, r1, #20
 800d0f8:	00a3      	lsls	r3, r4, #2
 800d0fa:	f100 0514 	add.w	r5, r0, #20
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d10a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d10e:	3301      	adds	r3, #1
 800d110:	429a      	cmp	r2, r3
 800d112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d116:	fbb2 f6f3 	udiv	r6, r2, r3
 800d11a:	d32e      	bcc.n	800d17a <quorem+0x96>
 800d11c:	f04f 0a00 	mov.w	sl, #0
 800d120:	46c4      	mov	ip, r8
 800d122:	46ae      	mov	lr, r5
 800d124:	46d3      	mov	fp, sl
 800d126:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d12a:	b298      	uxth	r0, r3
 800d12c:	fb06 a000 	mla	r0, r6, r0, sl
 800d130:	0c02      	lsrs	r2, r0, #16
 800d132:	0c1b      	lsrs	r3, r3, #16
 800d134:	fb06 2303 	mla	r3, r6, r3, r2
 800d138:	f8de 2000 	ldr.w	r2, [lr]
 800d13c:	b280      	uxth	r0, r0
 800d13e:	b292      	uxth	r2, r2
 800d140:	1a12      	subs	r2, r2, r0
 800d142:	445a      	add	r2, fp
 800d144:	f8de 0000 	ldr.w	r0, [lr]
 800d148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d152:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d156:	b292      	uxth	r2, r2
 800d158:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d15c:	45e1      	cmp	r9, ip
 800d15e:	f84e 2b04 	str.w	r2, [lr], #4
 800d162:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d166:	d2de      	bcs.n	800d126 <quorem+0x42>
 800d168:	9b00      	ldr	r3, [sp, #0]
 800d16a:	58eb      	ldr	r3, [r5, r3]
 800d16c:	b92b      	cbnz	r3, 800d17a <quorem+0x96>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	3b04      	subs	r3, #4
 800d172:	429d      	cmp	r5, r3
 800d174:	461a      	mov	r2, r3
 800d176:	d32f      	bcc.n	800d1d8 <quorem+0xf4>
 800d178:	613c      	str	r4, [r7, #16]
 800d17a:	4638      	mov	r0, r7
 800d17c:	f001 fca2 	bl	800eac4 <__mcmp>
 800d180:	2800      	cmp	r0, #0
 800d182:	db25      	blt.n	800d1d0 <quorem+0xec>
 800d184:	4629      	mov	r1, r5
 800d186:	2000      	movs	r0, #0
 800d188:	f858 2b04 	ldr.w	r2, [r8], #4
 800d18c:	f8d1 c000 	ldr.w	ip, [r1]
 800d190:	fa1f fe82 	uxth.w	lr, r2
 800d194:	fa1f f38c 	uxth.w	r3, ip
 800d198:	eba3 030e 	sub.w	r3, r3, lr
 800d19c:	4403      	add	r3, r0
 800d19e:	0c12      	lsrs	r2, r2, #16
 800d1a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d1a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ae:	45c1      	cmp	r9, r8
 800d1b0:	f841 3b04 	str.w	r3, [r1], #4
 800d1b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d1b8:	d2e6      	bcs.n	800d188 <quorem+0xa4>
 800d1ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1c2:	b922      	cbnz	r2, 800d1ce <quorem+0xea>
 800d1c4:	3b04      	subs	r3, #4
 800d1c6:	429d      	cmp	r5, r3
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	d30b      	bcc.n	800d1e4 <quorem+0x100>
 800d1cc:	613c      	str	r4, [r7, #16]
 800d1ce:	3601      	adds	r6, #1
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	b003      	add	sp, #12
 800d1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	3b04      	subs	r3, #4
 800d1dc:	2a00      	cmp	r2, #0
 800d1de:	d1cb      	bne.n	800d178 <quorem+0x94>
 800d1e0:	3c01      	subs	r4, #1
 800d1e2:	e7c6      	b.n	800d172 <quorem+0x8e>
 800d1e4:	6812      	ldr	r2, [r2, #0]
 800d1e6:	3b04      	subs	r3, #4
 800d1e8:	2a00      	cmp	r2, #0
 800d1ea:	d1ef      	bne.n	800d1cc <quorem+0xe8>
 800d1ec:	3c01      	subs	r4, #1
 800d1ee:	e7ea      	b.n	800d1c6 <quorem+0xe2>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e7ee      	b.n	800d1d2 <quorem+0xee>
 800d1f4:	0000      	movs	r0, r0
	...

0800d1f8 <_dtoa_r>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	ed2d 8b02 	vpush	{d8}
 800d200:	69c7      	ldr	r7, [r0, #28]
 800d202:	b091      	sub	sp, #68	@ 0x44
 800d204:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d208:	ec55 4b10 	vmov	r4, r5, d0
 800d20c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d20e:	9107      	str	r1, [sp, #28]
 800d210:	4681      	mov	r9, r0
 800d212:	9209      	str	r2, [sp, #36]	@ 0x24
 800d214:	930d      	str	r3, [sp, #52]	@ 0x34
 800d216:	b97f      	cbnz	r7, 800d238 <_dtoa_r+0x40>
 800d218:	2010      	movs	r0, #16
 800d21a:	f001 f8c7 	bl	800e3ac <malloc>
 800d21e:	4602      	mov	r2, r0
 800d220:	f8c9 001c 	str.w	r0, [r9, #28]
 800d224:	b920      	cbnz	r0, 800d230 <_dtoa_r+0x38>
 800d226:	4ba0      	ldr	r3, [pc, #640]	@ (800d4a8 <_dtoa_r+0x2b0>)
 800d228:	21ef      	movs	r1, #239	@ 0xef
 800d22a:	48a0      	ldr	r0, [pc, #640]	@ (800d4ac <_dtoa_r+0x2b4>)
 800d22c:	f002 f8ec 	bl	800f408 <__assert_func>
 800d230:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d234:	6007      	str	r7, [r0, #0]
 800d236:	60c7      	str	r7, [r0, #12]
 800d238:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d23c:	6819      	ldr	r1, [r3, #0]
 800d23e:	b159      	cbz	r1, 800d258 <_dtoa_r+0x60>
 800d240:	685a      	ldr	r2, [r3, #4]
 800d242:	604a      	str	r2, [r1, #4]
 800d244:	2301      	movs	r3, #1
 800d246:	4093      	lsls	r3, r2
 800d248:	608b      	str	r3, [r1, #8]
 800d24a:	4648      	mov	r0, r9
 800d24c:	f001 f9b6 	bl	800e5bc <_Bfree>
 800d250:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
 800d258:	1e2b      	subs	r3, r5, #0
 800d25a:	bfbb      	ittet	lt
 800d25c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d260:	9303      	strlt	r3, [sp, #12]
 800d262:	2300      	movge	r3, #0
 800d264:	2201      	movlt	r2, #1
 800d266:	bfac      	ite	ge
 800d268:	6033      	strge	r3, [r6, #0]
 800d26a:	6032      	strlt	r2, [r6, #0]
 800d26c:	4b90      	ldr	r3, [pc, #576]	@ (800d4b0 <_dtoa_r+0x2b8>)
 800d26e:	9e03      	ldr	r6, [sp, #12]
 800d270:	43b3      	bics	r3, r6
 800d272:	d110      	bne.n	800d296 <_dtoa_r+0x9e>
 800d274:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d276:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d280:	4323      	orrs	r3, r4
 800d282:	f000 84de 	beq.w	800dc42 <_dtoa_r+0xa4a>
 800d286:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d288:	4f8a      	ldr	r7, [pc, #552]	@ (800d4b4 <_dtoa_r+0x2bc>)
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 84e0 	beq.w	800dc50 <_dtoa_r+0xa58>
 800d290:	1cfb      	adds	r3, r7, #3
 800d292:	f000 bcdb 	b.w	800dc4c <_dtoa_r+0xa54>
 800d296:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d29a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a2:	d10a      	bne.n	800d2ba <_dtoa_r+0xc2>
 800d2a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d2ac:	b113      	cbz	r3, 800d2b4 <_dtoa_r+0xbc>
 800d2ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d2b0:	4b81      	ldr	r3, [pc, #516]	@ (800d4b8 <_dtoa_r+0x2c0>)
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	4f81      	ldr	r7, [pc, #516]	@ (800d4bc <_dtoa_r+0x2c4>)
 800d2b6:	f000 bccb 	b.w	800dc50 <_dtoa_r+0xa58>
 800d2ba:	aa0e      	add	r2, sp, #56	@ 0x38
 800d2bc:	a90f      	add	r1, sp, #60	@ 0x3c
 800d2be:	4648      	mov	r0, r9
 800d2c0:	eeb0 0b48 	vmov.f64	d0, d8
 800d2c4:	f001 fd1e 	bl	800ed04 <__d2b>
 800d2c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d2cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2ce:	9001      	str	r0, [sp, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d045      	beq.n	800d360 <_dtoa_r+0x168>
 800d2d4:	eeb0 7b48 	vmov.f64	d7, d8
 800d2d8:	ee18 1a90 	vmov	r1, s17
 800d2dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d2e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d2e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d2e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	ee07 1a90 	vmov	s15, r1
 800d2f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d2f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d490 <_dtoa_r+0x298>
 800d2fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d498 <_dtoa_r+0x2a0>
 800d302:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d306:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d4a0 <_dtoa_r+0x2a8>
 800d30a:	ee07 3a90 	vmov	s15, r3
 800d30e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d312:	eeb0 7b46 	vmov.f64	d7, d6
 800d316:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d31a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d31e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d326:	ee16 8a90 	vmov	r8, s13
 800d32a:	d508      	bpl.n	800d33e <_dtoa_r+0x146>
 800d32c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d330:	eeb4 6b47 	vcmp.f64	d6, d7
 800d334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d338:	bf18      	it	ne
 800d33a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d33e:	f1b8 0f16 	cmp.w	r8, #22
 800d342:	d82b      	bhi.n	800d39c <_dtoa_r+0x1a4>
 800d344:	495e      	ldr	r1, [pc, #376]	@ (800d4c0 <_dtoa_r+0x2c8>)
 800d346:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d34a:	ed91 7b00 	vldr	d7, [r1]
 800d34e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d356:	d501      	bpl.n	800d35c <_dtoa_r+0x164>
 800d358:	f108 38ff 	add.w	r8, r8, #4294967295
 800d35c:	2100      	movs	r1, #0
 800d35e:	e01e      	b.n	800d39e <_dtoa_r+0x1a6>
 800d360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d362:	4413      	add	r3, r2
 800d364:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d368:	2920      	cmp	r1, #32
 800d36a:	bfc1      	itttt	gt
 800d36c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d370:	408e      	lslgt	r6, r1
 800d372:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d376:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d37a:	bfd6      	itet	le
 800d37c:	f1c1 0120 	rsble	r1, r1, #32
 800d380:	4331      	orrgt	r1, r6
 800d382:	fa04 f101 	lslle.w	r1, r4, r1
 800d386:	ee07 1a90 	vmov	s15, r1
 800d38a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d38e:	3b01      	subs	r3, #1
 800d390:	ee17 1a90 	vmov	r1, s15
 800d394:	2501      	movs	r5, #1
 800d396:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d39a:	e7a8      	b.n	800d2ee <_dtoa_r+0xf6>
 800d39c:	2101      	movs	r1, #1
 800d39e:	1ad2      	subs	r2, r2, r3
 800d3a0:	1e53      	subs	r3, r2, #1
 800d3a2:	9306      	str	r3, [sp, #24]
 800d3a4:	bf45      	ittet	mi
 800d3a6:	f1c2 0301 	rsbmi	r3, r2, #1
 800d3aa:	9305      	strmi	r3, [sp, #20]
 800d3ac:	2300      	movpl	r3, #0
 800d3ae:	2300      	movmi	r3, #0
 800d3b0:	bf4c      	ite	mi
 800d3b2:	9306      	strmi	r3, [sp, #24]
 800d3b4:	9305      	strpl	r3, [sp, #20]
 800d3b6:	f1b8 0f00 	cmp.w	r8, #0
 800d3ba:	910c      	str	r1, [sp, #48]	@ 0x30
 800d3bc:	db18      	blt.n	800d3f0 <_dtoa_r+0x1f8>
 800d3be:	9b06      	ldr	r3, [sp, #24]
 800d3c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d3c4:	4443      	add	r3, r8
 800d3c6:	9306      	str	r3, [sp, #24]
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9a07      	ldr	r2, [sp, #28]
 800d3cc:	2a09      	cmp	r2, #9
 800d3ce:	d849      	bhi.n	800d464 <_dtoa_r+0x26c>
 800d3d0:	2a05      	cmp	r2, #5
 800d3d2:	bfc4      	itt	gt
 800d3d4:	3a04      	subgt	r2, #4
 800d3d6:	9207      	strgt	r2, [sp, #28]
 800d3d8:	9a07      	ldr	r2, [sp, #28]
 800d3da:	f1a2 0202 	sub.w	r2, r2, #2
 800d3de:	bfcc      	ite	gt
 800d3e0:	2400      	movgt	r4, #0
 800d3e2:	2401      	movle	r4, #1
 800d3e4:	2a03      	cmp	r2, #3
 800d3e6:	d848      	bhi.n	800d47a <_dtoa_r+0x282>
 800d3e8:	e8df f002 	tbb	[pc, r2]
 800d3ec:	3a2c2e0b 	.word	0x3a2c2e0b
 800d3f0:	9b05      	ldr	r3, [sp, #20]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	eba3 0308 	sub.w	r3, r3, r8
 800d3f8:	9305      	str	r3, [sp, #20]
 800d3fa:	920a      	str	r2, [sp, #40]	@ 0x28
 800d3fc:	f1c8 0300 	rsb	r3, r8, #0
 800d400:	e7e3      	b.n	800d3ca <_dtoa_r+0x1d2>
 800d402:	2200      	movs	r2, #0
 800d404:	9208      	str	r2, [sp, #32]
 800d406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d408:	2a00      	cmp	r2, #0
 800d40a:	dc39      	bgt.n	800d480 <_dtoa_r+0x288>
 800d40c:	f04f 0b01 	mov.w	fp, #1
 800d410:	46da      	mov	sl, fp
 800d412:	465a      	mov	r2, fp
 800d414:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d418:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d41c:	2100      	movs	r1, #0
 800d41e:	2004      	movs	r0, #4
 800d420:	f100 0614 	add.w	r6, r0, #20
 800d424:	4296      	cmp	r6, r2
 800d426:	d930      	bls.n	800d48a <_dtoa_r+0x292>
 800d428:	6079      	str	r1, [r7, #4]
 800d42a:	4648      	mov	r0, r9
 800d42c:	9304      	str	r3, [sp, #16]
 800d42e:	f001 f885 	bl	800e53c <_Balloc>
 800d432:	9b04      	ldr	r3, [sp, #16]
 800d434:	4607      	mov	r7, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	d146      	bne.n	800d4c8 <_dtoa_r+0x2d0>
 800d43a:	4b22      	ldr	r3, [pc, #136]	@ (800d4c4 <_dtoa_r+0x2cc>)
 800d43c:	4602      	mov	r2, r0
 800d43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d442:	e6f2      	b.n	800d22a <_dtoa_r+0x32>
 800d444:	2201      	movs	r2, #1
 800d446:	e7dd      	b.n	800d404 <_dtoa_r+0x20c>
 800d448:	2200      	movs	r2, #0
 800d44a:	9208      	str	r2, [sp, #32]
 800d44c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d44e:	eb08 0b02 	add.w	fp, r8, r2
 800d452:	f10b 0a01 	add.w	sl, fp, #1
 800d456:	4652      	mov	r2, sl
 800d458:	2a01      	cmp	r2, #1
 800d45a:	bfb8      	it	lt
 800d45c:	2201      	movlt	r2, #1
 800d45e:	e7db      	b.n	800d418 <_dtoa_r+0x220>
 800d460:	2201      	movs	r2, #1
 800d462:	e7f2      	b.n	800d44a <_dtoa_r+0x252>
 800d464:	2401      	movs	r4, #1
 800d466:	2200      	movs	r2, #0
 800d468:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d46c:	f04f 3bff 	mov.w	fp, #4294967295
 800d470:	2100      	movs	r1, #0
 800d472:	46da      	mov	sl, fp
 800d474:	2212      	movs	r2, #18
 800d476:	9109      	str	r1, [sp, #36]	@ 0x24
 800d478:	e7ce      	b.n	800d418 <_dtoa_r+0x220>
 800d47a:	2201      	movs	r2, #1
 800d47c:	9208      	str	r2, [sp, #32]
 800d47e:	e7f5      	b.n	800d46c <_dtoa_r+0x274>
 800d480:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800d484:	46da      	mov	sl, fp
 800d486:	465a      	mov	r2, fp
 800d488:	e7c6      	b.n	800d418 <_dtoa_r+0x220>
 800d48a:	3101      	adds	r1, #1
 800d48c:	0040      	lsls	r0, r0, #1
 800d48e:	e7c7      	b.n	800d420 <_dtoa_r+0x228>
 800d490:	636f4361 	.word	0x636f4361
 800d494:	3fd287a7 	.word	0x3fd287a7
 800d498:	8b60c8b3 	.word	0x8b60c8b3
 800d49c:	3fc68a28 	.word	0x3fc68a28
 800d4a0:	509f79fb 	.word	0x509f79fb
 800d4a4:	3fd34413 	.word	0x3fd34413
 800d4a8:	0800fbae 	.word	0x0800fbae
 800d4ac:	0800fbc5 	.word	0x0800fbc5
 800d4b0:	7ff00000 	.word	0x7ff00000
 800d4b4:	0800fbaa 	.word	0x0800fbaa
 800d4b8:	0800fb71 	.word	0x0800fb71
 800d4bc:	0800fb70 	.word	0x0800fb70
 800d4c0:	0800fd20 	.word	0x0800fd20
 800d4c4:	0800fc1d 	.word	0x0800fc1d
 800d4c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d4cc:	f1ba 0f0e 	cmp.w	sl, #14
 800d4d0:	6010      	str	r0, [r2, #0]
 800d4d2:	d86f      	bhi.n	800d5b4 <_dtoa_r+0x3bc>
 800d4d4:	2c00      	cmp	r4, #0
 800d4d6:	d06d      	beq.n	800d5b4 <_dtoa_r+0x3bc>
 800d4d8:	f1b8 0f00 	cmp.w	r8, #0
 800d4dc:	f340 80c2 	ble.w	800d664 <_dtoa_r+0x46c>
 800d4e0:	4aca      	ldr	r2, [pc, #808]	@ (800d80c <_dtoa_r+0x614>)
 800d4e2:	f008 010f 	and.w	r1, r8, #15
 800d4e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d4ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d4ee:	ed92 7b00 	vldr	d7, [r2]
 800d4f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d4f6:	f000 80a9 	beq.w	800d64c <_dtoa_r+0x454>
 800d4fa:	4ac5      	ldr	r2, [pc, #788]	@ (800d810 <_dtoa_r+0x618>)
 800d4fc:	ed92 6b08 	vldr	d6, [r2, #32]
 800d500:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d504:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d508:	f001 010f 	and.w	r1, r1, #15
 800d50c:	2203      	movs	r2, #3
 800d50e:	48c0      	ldr	r0, [pc, #768]	@ (800d810 <_dtoa_r+0x618>)
 800d510:	2900      	cmp	r1, #0
 800d512:	f040 809d 	bne.w	800d650 <_dtoa_r+0x458>
 800d516:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d51a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d51e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d522:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d524:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d528:	2900      	cmp	r1, #0
 800d52a:	f000 80c1 	beq.w	800d6b0 <_dtoa_r+0x4b8>
 800d52e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d532:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53a:	f140 80b9 	bpl.w	800d6b0 <_dtoa_r+0x4b8>
 800d53e:	f1ba 0f00 	cmp.w	sl, #0
 800d542:	f000 80b5 	beq.w	800d6b0 <_dtoa_r+0x4b8>
 800d546:	f1bb 0f00 	cmp.w	fp, #0
 800d54a:	dd31      	ble.n	800d5b0 <_dtoa_r+0x3b8>
 800d54c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d550:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d554:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d558:	f108 31ff 	add.w	r1, r8, #4294967295
 800d55c:	9104      	str	r1, [sp, #16]
 800d55e:	3201      	adds	r2, #1
 800d560:	465c      	mov	r4, fp
 800d562:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d566:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d56a:	ee07 2a90 	vmov	s15, r2
 800d56e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d572:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d576:	ee15 2a90 	vmov	r2, s11
 800d57a:	ec51 0b15 	vmov	r0, r1, d5
 800d57e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d582:	2c00      	cmp	r4, #0
 800d584:	f040 8098 	bne.w	800d6b8 <_dtoa_r+0x4c0>
 800d588:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d58c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d590:	ec41 0b17 	vmov	d7, r0, r1
 800d594:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59c:	f300 8261 	bgt.w	800da62 <_dtoa_r+0x86a>
 800d5a0:	eeb1 7b47 	vneg.f64	d7, d7
 800d5a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ac:	f100 80f5 	bmi.w	800d79a <_dtoa_r+0x5a2>
 800d5b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d5b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d5b6:	2a00      	cmp	r2, #0
 800d5b8:	f2c0 812c 	blt.w	800d814 <_dtoa_r+0x61c>
 800d5bc:	f1b8 0f0e 	cmp.w	r8, #14
 800d5c0:	f300 8128 	bgt.w	800d814 <_dtoa_r+0x61c>
 800d5c4:	4b91      	ldr	r3, [pc, #580]	@ (800d80c <_dtoa_r+0x614>)
 800d5c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d5ca:	ed93 6b00 	vldr	d6, [r3]
 800d5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	da03      	bge.n	800d5dc <_dtoa_r+0x3e4>
 800d5d4:	f1ba 0f00 	cmp.w	sl, #0
 800d5d8:	f340 80d2 	ble.w	800d780 <_dtoa_r+0x588>
 800d5dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d5e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5e4:	463e      	mov	r6, r7
 800d5e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d5ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d5ee:	ee15 3a10 	vmov	r3, s10
 800d5f2:	3330      	adds	r3, #48	@ 0x30
 800d5f4:	f806 3b01 	strb.w	r3, [r6], #1
 800d5f8:	1bf3      	subs	r3, r6, r7
 800d5fa:	459a      	cmp	sl, r3
 800d5fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d600:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d604:	f040 80f8 	bne.w	800d7f8 <_dtoa_r+0x600>
 800d608:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d60c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d614:	f300 80dd 	bgt.w	800d7d2 <_dtoa_r+0x5da>
 800d618:	eeb4 7b46 	vcmp.f64	d7, d6
 800d61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d620:	d104      	bne.n	800d62c <_dtoa_r+0x434>
 800d622:	ee15 3a10 	vmov	r3, s10
 800d626:	07db      	lsls	r3, r3, #31
 800d628:	f100 80d3 	bmi.w	800d7d2 <_dtoa_r+0x5da>
 800d62c:	9901      	ldr	r1, [sp, #4]
 800d62e:	4648      	mov	r0, r9
 800d630:	f000 ffc4 	bl	800e5bc <_Bfree>
 800d634:	2300      	movs	r3, #0
 800d636:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d638:	7033      	strb	r3, [r6, #0]
 800d63a:	f108 0301 	add.w	r3, r8, #1
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 8304 	beq.w	800dc50 <_dtoa_r+0xa58>
 800d648:	601e      	str	r6, [r3, #0]
 800d64a:	e301      	b.n	800dc50 <_dtoa_r+0xa58>
 800d64c:	2202      	movs	r2, #2
 800d64e:	e75e      	b.n	800d50e <_dtoa_r+0x316>
 800d650:	07cc      	lsls	r4, r1, #31
 800d652:	d504      	bpl.n	800d65e <_dtoa_r+0x466>
 800d654:	ed90 6b00 	vldr	d6, [r0]
 800d658:	3201      	adds	r2, #1
 800d65a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d65e:	1049      	asrs	r1, r1, #1
 800d660:	3008      	adds	r0, #8
 800d662:	e755      	b.n	800d510 <_dtoa_r+0x318>
 800d664:	d022      	beq.n	800d6ac <_dtoa_r+0x4b4>
 800d666:	f1c8 0100 	rsb	r1, r8, #0
 800d66a:	4a68      	ldr	r2, [pc, #416]	@ (800d80c <_dtoa_r+0x614>)
 800d66c:	f001 000f 	and.w	r0, r1, #15
 800d670:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d674:	ed92 7b00 	vldr	d7, [r2]
 800d678:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d67c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d680:	4863      	ldr	r0, [pc, #396]	@ (800d810 <_dtoa_r+0x618>)
 800d682:	1109      	asrs	r1, r1, #4
 800d684:	2400      	movs	r4, #0
 800d686:	2202      	movs	r2, #2
 800d688:	b929      	cbnz	r1, 800d696 <_dtoa_r+0x49e>
 800d68a:	2c00      	cmp	r4, #0
 800d68c:	f43f af49 	beq.w	800d522 <_dtoa_r+0x32a>
 800d690:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d694:	e745      	b.n	800d522 <_dtoa_r+0x32a>
 800d696:	07ce      	lsls	r6, r1, #31
 800d698:	d505      	bpl.n	800d6a6 <_dtoa_r+0x4ae>
 800d69a:	ed90 6b00 	vldr	d6, [r0]
 800d69e:	3201      	adds	r2, #1
 800d6a0:	2401      	movs	r4, #1
 800d6a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6a6:	1049      	asrs	r1, r1, #1
 800d6a8:	3008      	adds	r0, #8
 800d6aa:	e7ed      	b.n	800d688 <_dtoa_r+0x490>
 800d6ac:	2202      	movs	r2, #2
 800d6ae:	e738      	b.n	800d522 <_dtoa_r+0x32a>
 800d6b0:	f8cd 8010 	str.w	r8, [sp, #16]
 800d6b4:	4654      	mov	r4, sl
 800d6b6:	e754      	b.n	800d562 <_dtoa_r+0x36a>
 800d6b8:	4a54      	ldr	r2, [pc, #336]	@ (800d80c <_dtoa_r+0x614>)
 800d6ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d6be:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d6c2:	9a08      	ldr	r2, [sp, #32]
 800d6c4:	ec41 0b17 	vmov	d7, r0, r1
 800d6c8:	443c      	add	r4, r7
 800d6ca:	b34a      	cbz	r2, 800d720 <_dtoa_r+0x528>
 800d6cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d6d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d6d4:	463e      	mov	r6, r7
 800d6d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d6da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d6de:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d6e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d6e6:	ee14 2a90 	vmov	r2, s9
 800d6ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d6ee:	3230      	adds	r2, #48	@ 0x30
 800d6f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d6f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fc:	f806 2b01 	strb.w	r2, [r6], #1
 800d700:	d438      	bmi.n	800d774 <_dtoa_r+0x57c>
 800d702:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d706:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70e:	d462      	bmi.n	800d7d6 <_dtoa_r+0x5de>
 800d710:	42a6      	cmp	r6, r4
 800d712:	f43f af4d 	beq.w	800d5b0 <_dtoa_r+0x3b8>
 800d716:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d71a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d71e:	e7e0      	b.n	800d6e2 <_dtoa_r+0x4ea>
 800d720:	4621      	mov	r1, r4
 800d722:	463e      	mov	r6, r7
 800d724:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d728:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d72c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d730:	ee14 2a90 	vmov	r2, s9
 800d734:	3230      	adds	r2, #48	@ 0x30
 800d736:	f806 2b01 	strb.w	r2, [r6], #1
 800d73a:	42a6      	cmp	r6, r4
 800d73c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d740:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d744:	d119      	bne.n	800d77a <_dtoa_r+0x582>
 800d746:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d74a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d74e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d756:	dc3e      	bgt.n	800d7d6 <_dtoa_r+0x5de>
 800d758:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d75c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d764:	f57f af24 	bpl.w	800d5b0 <_dtoa_r+0x3b8>
 800d768:	460e      	mov	r6, r1
 800d76a:	3901      	subs	r1, #1
 800d76c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d770:	2b30      	cmp	r3, #48	@ 0x30
 800d772:	d0f9      	beq.n	800d768 <_dtoa_r+0x570>
 800d774:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d778:	e758      	b.n	800d62c <_dtoa_r+0x434>
 800d77a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d77e:	e7d5      	b.n	800d72c <_dtoa_r+0x534>
 800d780:	d10b      	bne.n	800d79a <_dtoa_r+0x5a2>
 800d782:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d786:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d78a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d78e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d796:	f2c0 8161 	blt.w	800da5c <_dtoa_r+0x864>
 800d79a:	2400      	movs	r4, #0
 800d79c:	4625      	mov	r5, r4
 800d79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a0:	43db      	mvns	r3, r3
 800d7a2:	9304      	str	r3, [sp, #16]
 800d7a4:	463e      	mov	r6, r7
 800d7a6:	f04f 0800 	mov.w	r8, #0
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4648      	mov	r0, r9
 800d7ae:	f000 ff05 	bl	800e5bc <_Bfree>
 800d7b2:	2d00      	cmp	r5, #0
 800d7b4:	d0de      	beq.n	800d774 <_dtoa_r+0x57c>
 800d7b6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ba:	d005      	beq.n	800d7c8 <_dtoa_r+0x5d0>
 800d7bc:	45a8      	cmp	r8, r5
 800d7be:	d003      	beq.n	800d7c8 <_dtoa_r+0x5d0>
 800d7c0:	4641      	mov	r1, r8
 800d7c2:	4648      	mov	r0, r9
 800d7c4:	f000 fefa 	bl	800e5bc <_Bfree>
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	4648      	mov	r0, r9
 800d7cc:	f000 fef6 	bl	800e5bc <_Bfree>
 800d7d0:	e7d0      	b.n	800d774 <_dtoa_r+0x57c>
 800d7d2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d7d6:	4633      	mov	r3, r6
 800d7d8:	461e      	mov	r6, r3
 800d7da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7de:	2a39      	cmp	r2, #57	@ 0x39
 800d7e0:	d106      	bne.n	800d7f0 <_dtoa_r+0x5f8>
 800d7e2:	429f      	cmp	r7, r3
 800d7e4:	d1f8      	bne.n	800d7d8 <_dtoa_r+0x5e0>
 800d7e6:	9a04      	ldr	r2, [sp, #16]
 800d7e8:	3201      	adds	r2, #1
 800d7ea:	9204      	str	r2, [sp, #16]
 800d7ec:	2230      	movs	r2, #48	@ 0x30
 800d7ee:	703a      	strb	r2, [r7, #0]
 800d7f0:	781a      	ldrb	r2, [r3, #0]
 800d7f2:	3201      	adds	r2, #1
 800d7f4:	701a      	strb	r2, [r3, #0]
 800d7f6:	e7bd      	b.n	800d774 <_dtoa_r+0x57c>
 800d7f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d7fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d804:	f47f aeef 	bne.w	800d5e6 <_dtoa_r+0x3ee>
 800d808:	e710      	b.n	800d62c <_dtoa_r+0x434>
 800d80a:	bf00      	nop
 800d80c:	0800fd20 	.word	0x0800fd20
 800d810:	0800fcf8 	.word	0x0800fcf8
 800d814:	9908      	ldr	r1, [sp, #32]
 800d816:	2900      	cmp	r1, #0
 800d818:	f000 80e3 	beq.w	800d9e2 <_dtoa_r+0x7ea>
 800d81c:	9907      	ldr	r1, [sp, #28]
 800d81e:	2901      	cmp	r1, #1
 800d820:	f300 80c8 	bgt.w	800d9b4 <_dtoa_r+0x7bc>
 800d824:	2d00      	cmp	r5, #0
 800d826:	f000 80c1 	beq.w	800d9ac <_dtoa_r+0x7b4>
 800d82a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d82e:	9e05      	ldr	r6, [sp, #20]
 800d830:	461c      	mov	r4, r3
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	9b05      	ldr	r3, [sp, #20]
 800d836:	4413      	add	r3, r2
 800d838:	9305      	str	r3, [sp, #20]
 800d83a:	9b06      	ldr	r3, [sp, #24]
 800d83c:	2101      	movs	r1, #1
 800d83e:	4413      	add	r3, r2
 800d840:	4648      	mov	r0, r9
 800d842:	9306      	str	r3, [sp, #24]
 800d844:	f000 ffb8 	bl	800e7b8 <__i2b>
 800d848:	9b04      	ldr	r3, [sp, #16]
 800d84a:	4605      	mov	r5, r0
 800d84c:	b166      	cbz	r6, 800d868 <_dtoa_r+0x670>
 800d84e:	9a06      	ldr	r2, [sp, #24]
 800d850:	2a00      	cmp	r2, #0
 800d852:	dd09      	ble.n	800d868 <_dtoa_r+0x670>
 800d854:	42b2      	cmp	r2, r6
 800d856:	9905      	ldr	r1, [sp, #20]
 800d858:	bfa8      	it	ge
 800d85a:	4632      	movge	r2, r6
 800d85c:	1a89      	subs	r1, r1, r2
 800d85e:	9105      	str	r1, [sp, #20]
 800d860:	9906      	ldr	r1, [sp, #24]
 800d862:	1ab6      	subs	r6, r6, r2
 800d864:	1a8a      	subs	r2, r1, r2
 800d866:	9206      	str	r2, [sp, #24]
 800d868:	b1fb      	cbz	r3, 800d8aa <_dtoa_r+0x6b2>
 800d86a:	9a08      	ldr	r2, [sp, #32]
 800d86c:	2a00      	cmp	r2, #0
 800d86e:	f000 80bc 	beq.w	800d9ea <_dtoa_r+0x7f2>
 800d872:	b19c      	cbz	r4, 800d89c <_dtoa_r+0x6a4>
 800d874:	4629      	mov	r1, r5
 800d876:	4622      	mov	r2, r4
 800d878:	4648      	mov	r0, r9
 800d87a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d87c:	f001 f85c 	bl	800e938 <__pow5mult>
 800d880:	9a01      	ldr	r2, [sp, #4]
 800d882:	4601      	mov	r1, r0
 800d884:	4605      	mov	r5, r0
 800d886:	4648      	mov	r0, r9
 800d888:	f000 ffac 	bl	800e7e4 <__multiply>
 800d88c:	9901      	ldr	r1, [sp, #4]
 800d88e:	9004      	str	r0, [sp, #16]
 800d890:	4648      	mov	r0, r9
 800d892:	f000 fe93 	bl	800e5bc <_Bfree>
 800d896:	9a04      	ldr	r2, [sp, #16]
 800d898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d89a:	9201      	str	r2, [sp, #4]
 800d89c:	1b1a      	subs	r2, r3, r4
 800d89e:	d004      	beq.n	800d8aa <_dtoa_r+0x6b2>
 800d8a0:	9901      	ldr	r1, [sp, #4]
 800d8a2:	4648      	mov	r0, r9
 800d8a4:	f001 f848 	bl	800e938 <__pow5mult>
 800d8a8:	9001      	str	r0, [sp, #4]
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	4648      	mov	r0, r9
 800d8ae:	f000 ff83 	bl	800e7b8 <__i2b>
 800d8b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 81d0 	beq.w	800dc5c <_dtoa_r+0xa64>
 800d8bc:	461a      	mov	r2, r3
 800d8be:	4601      	mov	r1, r0
 800d8c0:	4648      	mov	r0, r9
 800d8c2:	f001 f839 	bl	800e938 <__pow5mult>
 800d8c6:	9b07      	ldr	r3, [sp, #28]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	f300 8095 	bgt.w	800d9fa <_dtoa_r+0x802>
 800d8d0:	9b02      	ldr	r3, [sp, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f040 808b 	bne.w	800d9ee <_dtoa_r+0x7f6>
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	f040 8087 	bne.w	800d9f2 <_dtoa_r+0x7fa>
 800d8e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d8e8:	0d12      	lsrs	r2, r2, #20
 800d8ea:	0512      	lsls	r2, r2, #20
 800d8ec:	2a00      	cmp	r2, #0
 800d8ee:	f000 8082 	beq.w	800d9f6 <_dtoa_r+0x7fe>
 800d8f2:	9b05      	ldr	r3, [sp, #20]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	9305      	str	r3, [sp, #20]
 800d8f8:	9b06      	ldr	r3, [sp, #24]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	9306      	str	r3, [sp, #24]
 800d8fe:	2301      	movs	r3, #1
 800d900:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 81af 	beq.w	800dc68 <_dtoa_r+0xa70>
 800d90a:	6922      	ldr	r2, [r4, #16]
 800d90c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d910:	6910      	ldr	r0, [r2, #16]
 800d912:	f000 ff05 	bl	800e720 <__hi0bits>
 800d916:	f1c0 0020 	rsb	r0, r0, #32
 800d91a:	9b06      	ldr	r3, [sp, #24]
 800d91c:	4418      	add	r0, r3
 800d91e:	f010 001f 	ands.w	r0, r0, #31
 800d922:	d076      	beq.n	800da12 <_dtoa_r+0x81a>
 800d924:	f1c0 0220 	rsb	r2, r0, #32
 800d928:	2a04      	cmp	r2, #4
 800d92a:	dd69      	ble.n	800da00 <_dtoa_r+0x808>
 800d92c:	9b05      	ldr	r3, [sp, #20]
 800d92e:	f1c0 001c 	rsb	r0, r0, #28
 800d932:	4403      	add	r3, r0
 800d934:	9305      	str	r3, [sp, #20]
 800d936:	9b06      	ldr	r3, [sp, #24]
 800d938:	4406      	add	r6, r0
 800d93a:	4403      	add	r3, r0
 800d93c:	9306      	str	r3, [sp, #24]
 800d93e:	9b05      	ldr	r3, [sp, #20]
 800d940:	2b00      	cmp	r3, #0
 800d942:	dd05      	ble.n	800d950 <_dtoa_r+0x758>
 800d944:	9901      	ldr	r1, [sp, #4]
 800d946:	461a      	mov	r2, r3
 800d948:	4648      	mov	r0, r9
 800d94a:	f001 f84f 	bl	800e9ec <__lshift>
 800d94e:	9001      	str	r0, [sp, #4]
 800d950:	9b06      	ldr	r3, [sp, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	dd05      	ble.n	800d962 <_dtoa_r+0x76a>
 800d956:	4621      	mov	r1, r4
 800d958:	461a      	mov	r2, r3
 800d95a:	4648      	mov	r0, r9
 800d95c:	f001 f846 	bl	800e9ec <__lshift>
 800d960:	4604      	mov	r4, r0
 800d962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d964:	2b00      	cmp	r3, #0
 800d966:	d056      	beq.n	800da16 <_dtoa_r+0x81e>
 800d968:	9801      	ldr	r0, [sp, #4]
 800d96a:	4621      	mov	r1, r4
 800d96c:	f001 f8aa 	bl	800eac4 <__mcmp>
 800d970:	2800      	cmp	r0, #0
 800d972:	da50      	bge.n	800da16 <_dtoa_r+0x81e>
 800d974:	f108 33ff 	add.w	r3, r8, #4294967295
 800d978:	9304      	str	r3, [sp, #16]
 800d97a:	9901      	ldr	r1, [sp, #4]
 800d97c:	2300      	movs	r3, #0
 800d97e:	220a      	movs	r2, #10
 800d980:	4648      	mov	r0, r9
 800d982:	f000 fe3d 	bl	800e600 <__multadd>
 800d986:	9b08      	ldr	r3, [sp, #32]
 800d988:	9001      	str	r0, [sp, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f000 816e 	beq.w	800dc6c <_dtoa_r+0xa74>
 800d990:	4629      	mov	r1, r5
 800d992:	2300      	movs	r3, #0
 800d994:	220a      	movs	r2, #10
 800d996:	4648      	mov	r0, r9
 800d998:	f000 fe32 	bl	800e600 <__multadd>
 800d99c:	f1bb 0f00 	cmp.w	fp, #0
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	dc64      	bgt.n	800da6e <_dtoa_r+0x876>
 800d9a4:	9b07      	ldr	r3, [sp, #28]
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	dc3e      	bgt.n	800da28 <_dtoa_r+0x830>
 800d9aa:	e060      	b.n	800da6e <_dtoa_r+0x876>
 800d9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d9b2:	e73c      	b.n	800d82e <_dtoa_r+0x636>
 800d9b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d9b8:	42a3      	cmp	r3, r4
 800d9ba:	bfbf      	itttt	lt
 800d9bc:	1ae2      	sublt	r2, r4, r3
 800d9be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d9c0:	189b      	addlt	r3, r3, r2
 800d9c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d9c4:	bfae      	itee	ge
 800d9c6:	1b1c      	subge	r4, r3, r4
 800d9c8:	4623      	movlt	r3, r4
 800d9ca:	2400      	movlt	r4, #0
 800d9cc:	f1ba 0f00 	cmp.w	sl, #0
 800d9d0:	bfb5      	itete	lt
 800d9d2:	9a05      	ldrlt	r2, [sp, #20]
 800d9d4:	9e05      	ldrge	r6, [sp, #20]
 800d9d6:	eba2 060a 	sublt.w	r6, r2, sl
 800d9da:	4652      	movge	r2, sl
 800d9dc:	bfb8      	it	lt
 800d9de:	2200      	movlt	r2, #0
 800d9e0:	e727      	b.n	800d832 <_dtoa_r+0x63a>
 800d9e2:	9e05      	ldr	r6, [sp, #20]
 800d9e4:	9d08      	ldr	r5, [sp, #32]
 800d9e6:	461c      	mov	r4, r3
 800d9e8:	e730      	b.n	800d84c <_dtoa_r+0x654>
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	e758      	b.n	800d8a0 <_dtoa_r+0x6a8>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e786      	b.n	800d900 <_dtoa_r+0x708>
 800d9f2:	9b02      	ldr	r3, [sp, #8]
 800d9f4:	e784      	b.n	800d900 <_dtoa_r+0x708>
 800d9f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d9f8:	e783      	b.n	800d902 <_dtoa_r+0x70a>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9fe:	e784      	b.n	800d90a <_dtoa_r+0x712>
 800da00:	d09d      	beq.n	800d93e <_dtoa_r+0x746>
 800da02:	9b05      	ldr	r3, [sp, #20]
 800da04:	321c      	adds	r2, #28
 800da06:	4413      	add	r3, r2
 800da08:	9305      	str	r3, [sp, #20]
 800da0a:	9b06      	ldr	r3, [sp, #24]
 800da0c:	4416      	add	r6, r2
 800da0e:	4413      	add	r3, r2
 800da10:	e794      	b.n	800d93c <_dtoa_r+0x744>
 800da12:	4602      	mov	r2, r0
 800da14:	e7f5      	b.n	800da02 <_dtoa_r+0x80a>
 800da16:	f1ba 0f00 	cmp.w	sl, #0
 800da1a:	f8cd 8010 	str.w	r8, [sp, #16]
 800da1e:	46d3      	mov	fp, sl
 800da20:	dc21      	bgt.n	800da66 <_dtoa_r+0x86e>
 800da22:	9b07      	ldr	r3, [sp, #28]
 800da24:	2b02      	cmp	r3, #2
 800da26:	dd1e      	ble.n	800da66 <_dtoa_r+0x86e>
 800da28:	f1bb 0f00 	cmp.w	fp, #0
 800da2c:	f47f aeb7 	bne.w	800d79e <_dtoa_r+0x5a6>
 800da30:	4621      	mov	r1, r4
 800da32:	465b      	mov	r3, fp
 800da34:	2205      	movs	r2, #5
 800da36:	4648      	mov	r0, r9
 800da38:	f000 fde2 	bl	800e600 <__multadd>
 800da3c:	4601      	mov	r1, r0
 800da3e:	4604      	mov	r4, r0
 800da40:	9801      	ldr	r0, [sp, #4]
 800da42:	f001 f83f 	bl	800eac4 <__mcmp>
 800da46:	2800      	cmp	r0, #0
 800da48:	f77f aea9 	ble.w	800d79e <_dtoa_r+0x5a6>
 800da4c:	463e      	mov	r6, r7
 800da4e:	2331      	movs	r3, #49	@ 0x31
 800da50:	f806 3b01 	strb.w	r3, [r6], #1
 800da54:	9b04      	ldr	r3, [sp, #16]
 800da56:	3301      	adds	r3, #1
 800da58:	9304      	str	r3, [sp, #16]
 800da5a:	e6a4      	b.n	800d7a6 <_dtoa_r+0x5ae>
 800da5c:	f8cd 8010 	str.w	r8, [sp, #16]
 800da60:	4654      	mov	r4, sl
 800da62:	4625      	mov	r5, r4
 800da64:	e7f2      	b.n	800da4c <_dtoa_r+0x854>
 800da66:	9b08      	ldr	r3, [sp, #32]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f000 8103 	beq.w	800dc74 <_dtoa_r+0xa7c>
 800da6e:	2e00      	cmp	r6, #0
 800da70:	dd05      	ble.n	800da7e <_dtoa_r+0x886>
 800da72:	4629      	mov	r1, r5
 800da74:	4632      	mov	r2, r6
 800da76:	4648      	mov	r0, r9
 800da78:	f000 ffb8 	bl	800e9ec <__lshift>
 800da7c:	4605      	mov	r5, r0
 800da7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d058      	beq.n	800db36 <_dtoa_r+0x93e>
 800da84:	6869      	ldr	r1, [r5, #4]
 800da86:	4648      	mov	r0, r9
 800da88:	f000 fd58 	bl	800e53c <_Balloc>
 800da8c:	4606      	mov	r6, r0
 800da8e:	b928      	cbnz	r0, 800da9c <_dtoa_r+0x8a4>
 800da90:	4b82      	ldr	r3, [pc, #520]	@ (800dc9c <_dtoa_r+0xaa4>)
 800da92:	4602      	mov	r2, r0
 800da94:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800da98:	f7ff bbc7 	b.w	800d22a <_dtoa_r+0x32>
 800da9c:	692a      	ldr	r2, [r5, #16]
 800da9e:	3202      	adds	r2, #2
 800daa0:	0092      	lsls	r2, r2, #2
 800daa2:	f105 010c 	add.w	r1, r5, #12
 800daa6:	300c      	adds	r0, #12
 800daa8:	f7ff fafd 	bl	800d0a6 <memcpy>
 800daac:	2201      	movs	r2, #1
 800daae:	4631      	mov	r1, r6
 800dab0:	4648      	mov	r0, r9
 800dab2:	f000 ff9b 	bl	800e9ec <__lshift>
 800dab6:	1c7b      	adds	r3, r7, #1
 800dab8:	9305      	str	r3, [sp, #20]
 800daba:	eb07 030b 	add.w	r3, r7, fp
 800dabe:	9309      	str	r3, [sp, #36]	@ 0x24
 800dac0:	9b02      	ldr	r3, [sp, #8]
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	46a8      	mov	r8, r5
 800dac8:	9308      	str	r3, [sp, #32]
 800daca:	4605      	mov	r5, r0
 800dacc:	9b05      	ldr	r3, [sp, #20]
 800dace:	9801      	ldr	r0, [sp, #4]
 800dad0:	4621      	mov	r1, r4
 800dad2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dad6:	f7ff fb05 	bl	800d0e4 <quorem>
 800dada:	4641      	mov	r1, r8
 800dadc:	9002      	str	r0, [sp, #8]
 800dade:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800dae2:	9801      	ldr	r0, [sp, #4]
 800dae4:	f000 ffee 	bl	800eac4 <__mcmp>
 800dae8:	462a      	mov	r2, r5
 800daea:	9006      	str	r0, [sp, #24]
 800daec:	4621      	mov	r1, r4
 800daee:	4648      	mov	r0, r9
 800daf0:	f001 f804 	bl	800eafc <__mdiff>
 800daf4:	68c2      	ldr	r2, [r0, #12]
 800daf6:	4606      	mov	r6, r0
 800daf8:	b9fa      	cbnz	r2, 800db3a <_dtoa_r+0x942>
 800dafa:	4601      	mov	r1, r0
 800dafc:	9801      	ldr	r0, [sp, #4]
 800dafe:	f000 ffe1 	bl	800eac4 <__mcmp>
 800db02:	4602      	mov	r2, r0
 800db04:	4631      	mov	r1, r6
 800db06:	4648      	mov	r0, r9
 800db08:	920a      	str	r2, [sp, #40]	@ 0x28
 800db0a:	f000 fd57 	bl	800e5bc <_Bfree>
 800db0e:	9b07      	ldr	r3, [sp, #28]
 800db10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db12:	9e05      	ldr	r6, [sp, #20]
 800db14:	ea43 0102 	orr.w	r1, r3, r2
 800db18:	9b08      	ldr	r3, [sp, #32]
 800db1a:	4319      	orrs	r1, r3
 800db1c:	d10f      	bne.n	800db3e <_dtoa_r+0x946>
 800db1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800db22:	d028      	beq.n	800db76 <_dtoa_r+0x97e>
 800db24:	9b06      	ldr	r3, [sp, #24]
 800db26:	2b00      	cmp	r3, #0
 800db28:	dd02      	ble.n	800db30 <_dtoa_r+0x938>
 800db2a:	9b02      	ldr	r3, [sp, #8]
 800db2c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800db30:	f88b a000 	strb.w	sl, [fp]
 800db34:	e639      	b.n	800d7aa <_dtoa_r+0x5b2>
 800db36:	4628      	mov	r0, r5
 800db38:	e7bd      	b.n	800dab6 <_dtoa_r+0x8be>
 800db3a:	2201      	movs	r2, #1
 800db3c:	e7e2      	b.n	800db04 <_dtoa_r+0x90c>
 800db3e:	9b06      	ldr	r3, [sp, #24]
 800db40:	2b00      	cmp	r3, #0
 800db42:	db04      	blt.n	800db4e <_dtoa_r+0x956>
 800db44:	9907      	ldr	r1, [sp, #28]
 800db46:	430b      	orrs	r3, r1
 800db48:	9908      	ldr	r1, [sp, #32]
 800db4a:	430b      	orrs	r3, r1
 800db4c:	d120      	bne.n	800db90 <_dtoa_r+0x998>
 800db4e:	2a00      	cmp	r2, #0
 800db50:	ddee      	ble.n	800db30 <_dtoa_r+0x938>
 800db52:	9901      	ldr	r1, [sp, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	4648      	mov	r0, r9
 800db58:	f000 ff48 	bl	800e9ec <__lshift>
 800db5c:	4621      	mov	r1, r4
 800db5e:	9001      	str	r0, [sp, #4]
 800db60:	f000 ffb0 	bl	800eac4 <__mcmp>
 800db64:	2800      	cmp	r0, #0
 800db66:	dc03      	bgt.n	800db70 <_dtoa_r+0x978>
 800db68:	d1e2      	bne.n	800db30 <_dtoa_r+0x938>
 800db6a:	f01a 0f01 	tst.w	sl, #1
 800db6e:	d0df      	beq.n	800db30 <_dtoa_r+0x938>
 800db70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800db74:	d1d9      	bne.n	800db2a <_dtoa_r+0x932>
 800db76:	2339      	movs	r3, #57	@ 0x39
 800db78:	f88b 3000 	strb.w	r3, [fp]
 800db7c:	4633      	mov	r3, r6
 800db7e:	461e      	mov	r6, r3
 800db80:	3b01      	subs	r3, #1
 800db82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800db86:	2a39      	cmp	r2, #57	@ 0x39
 800db88:	d053      	beq.n	800dc32 <_dtoa_r+0xa3a>
 800db8a:	3201      	adds	r2, #1
 800db8c:	701a      	strb	r2, [r3, #0]
 800db8e:	e60c      	b.n	800d7aa <_dtoa_r+0x5b2>
 800db90:	2a00      	cmp	r2, #0
 800db92:	dd07      	ble.n	800dba4 <_dtoa_r+0x9ac>
 800db94:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800db98:	d0ed      	beq.n	800db76 <_dtoa_r+0x97e>
 800db9a:	f10a 0301 	add.w	r3, sl, #1
 800db9e:	f88b 3000 	strb.w	r3, [fp]
 800dba2:	e602      	b.n	800d7aa <_dtoa_r+0x5b2>
 800dba4:	9b05      	ldr	r3, [sp, #20]
 800dba6:	9a05      	ldr	r2, [sp, #20]
 800dba8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800dbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d029      	beq.n	800dc06 <_dtoa_r+0xa0e>
 800dbb2:	9901      	ldr	r1, [sp, #4]
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	220a      	movs	r2, #10
 800dbb8:	4648      	mov	r0, r9
 800dbba:	f000 fd21 	bl	800e600 <__multadd>
 800dbbe:	45a8      	cmp	r8, r5
 800dbc0:	9001      	str	r0, [sp, #4]
 800dbc2:	f04f 0300 	mov.w	r3, #0
 800dbc6:	f04f 020a 	mov.w	r2, #10
 800dbca:	4641      	mov	r1, r8
 800dbcc:	4648      	mov	r0, r9
 800dbce:	d107      	bne.n	800dbe0 <_dtoa_r+0x9e8>
 800dbd0:	f000 fd16 	bl	800e600 <__multadd>
 800dbd4:	4680      	mov	r8, r0
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	9b05      	ldr	r3, [sp, #20]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	9305      	str	r3, [sp, #20]
 800dbde:	e775      	b.n	800dacc <_dtoa_r+0x8d4>
 800dbe0:	f000 fd0e 	bl	800e600 <__multadd>
 800dbe4:	4629      	mov	r1, r5
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	2300      	movs	r3, #0
 800dbea:	220a      	movs	r2, #10
 800dbec:	4648      	mov	r0, r9
 800dbee:	f000 fd07 	bl	800e600 <__multadd>
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	e7f0      	b.n	800dbd8 <_dtoa_r+0x9e0>
 800dbf6:	f1bb 0f00 	cmp.w	fp, #0
 800dbfa:	bfcc      	ite	gt
 800dbfc:	465e      	movgt	r6, fp
 800dbfe:	2601      	movle	r6, #1
 800dc00:	443e      	add	r6, r7
 800dc02:	f04f 0800 	mov.w	r8, #0
 800dc06:	9901      	ldr	r1, [sp, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	4648      	mov	r0, r9
 800dc0c:	f000 feee 	bl	800e9ec <__lshift>
 800dc10:	4621      	mov	r1, r4
 800dc12:	9001      	str	r0, [sp, #4]
 800dc14:	f000 ff56 	bl	800eac4 <__mcmp>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	dcaf      	bgt.n	800db7c <_dtoa_r+0x984>
 800dc1c:	d102      	bne.n	800dc24 <_dtoa_r+0xa2c>
 800dc1e:	f01a 0f01 	tst.w	sl, #1
 800dc22:	d1ab      	bne.n	800db7c <_dtoa_r+0x984>
 800dc24:	4633      	mov	r3, r6
 800dc26:	461e      	mov	r6, r3
 800dc28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc2c:	2a30      	cmp	r2, #48	@ 0x30
 800dc2e:	d0fa      	beq.n	800dc26 <_dtoa_r+0xa2e>
 800dc30:	e5bb      	b.n	800d7aa <_dtoa_r+0x5b2>
 800dc32:	429f      	cmp	r7, r3
 800dc34:	d1a3      	bne.n	800db7e <_dtoa_r+0x986>
 800dc36:	9b04      	ldr	r3, [sp, #16]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	9304      	str	r3, [sp, #16]
 800dc3c:	2331      	movs	r3, #49	@ 0x31
 800dc3e:	703b      	strb	r3, [r7, #0]
 800dc40:	e5b3      	b.n	800d7aa <_dtoa_r+0x5b2>
 800dc42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc44:	4f16      	ldr	r7, [pc, #88]	@ (800dca0 <_dtoa_r+0xaa8>)
 800dc46:	b11b      	cbz	r3, 800dc50 <_dtoa_r+0xa58>
 800dc48:	f107 0308 	add.w	r3, r7, #8
 800dc4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	4638      	mov	r0, r7
 800dc52:	b011      	add	sp, #68	@ 0x44
 800dc54:	ecbd 8b02 	vpop	{d8}
 800dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5c:	9b07      	ldr	r3, [sp, #28]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	f77f ae36 	ble.w	800d8d0 <_dtoa_r+0x6d8>
 800dc64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc68:	2001      	movs	r0, #1
 800dc6a:	e656      	b.n	800d91a <_dtoa_r+0x722>
 800dc6c:	f1bb 0f00 	cmp.w	fp, #0
 800dc70:	f77f aed7 	ble.w	800da22 <_dtoa_r+0x82a>
 800dc74:	463e      	mov	r6, r7
 800dc76:	9801      	ldr	r0, [sp, #4]
 800dc78:	4621      	mov	r1, r4
 800dc7a:	f7ff fa33 	bl	800d0e4 <quorem>
 800dc7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800dc82:	f806 ab01 	strb.w	sl, [r6], #1
 800dc86:	1bf2      	subs	r2, r6, r7
 800dc88:	4593      	cmp	fp, r2
 800dc8a:	ddb4      	ble.n	800dbf6 <_dtoa_r+0x9fe>
 800dc8c:	9901      	ldr	r1, [sp, #4]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	220a      	movs	r2, #10
 800dc92:	4648      	mov	r0, r9
 800dc94:	f000 fcb4 	bl	800e600 <__multadd>
 800dc98:	9001      	str	r0, [sp, #4]
 800dc9a:	e7ec      	b.n	800dc76 <_dtoa_r+0xa7e>
 800dc9c:	0800fc1d 	.word	0x0800fc1d
 800dca0:	0800fba1 	.word	0x0800fba1

0800dca4 <_free_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4605      	mov	r5, r0
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d041      	beq.n	800dd30 <_free_r+0x8c>
 800dcac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcb0:	1f0c      	subs	r4, r1, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bfb8      	it	lt
 800dcb6:	18e4      	addlt	r4, r4, r3
 800dcb8:	f000 fc34 	bl	800e524 <__malloc_lock>
 800dcbc:	4a1d      	ldr	r2, [pc, #116]	@ (800dd34 <_free_r+0x90>)
 800dcbe:	6813      	ldr	r3, [r2, #0]
 800dcc0:	b933      	cbnz	r3, 800dcd0 <_free_r+0x2c>
 800dcc2:	6063      	str	r3, [r4, #4]
 800dcc4:	6014      	str	r4, [r2, #0]
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dccc:	f000 bc30 	b.w	800e530 <__malloc_unlock>
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	d908      	bls.n	800dce6 <_free_r+0x42>
 800dcd4:	6820      	ldr	r0, [r4, #0]
 800dcd6:	1821      	adds	r1, r4, r0
 800dcd8:	428b      	cmp	r3, r1
 800dcda:	bf01      	itttt	eq
 800dcdc:	6819      	ldreq	r1, [r3, #0]
 800dcde:	685b      	ldreq	r3, [r3, #4]
 800dce0:	1809      	addeq	r1, r1, r0
 800dce2:	6021      	streq	r1, [r4, #0]
 800dce4:	e7ed      	b.n	800dcc2 <_free_r+0x1e>
 800dce6:	461a      	mov	r2, r3
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	b10b      	cbz	r3, 800dcf0 <_free_r+0x4c>
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	d9fa      	bls.n	800dce6 <_free_r+0x42>
 800dcf0:	6811      	ldr	r1, [r2, #0]
 800dcf2:	1850      	adds	r0, r2, r1
 800dcf4:	42a0      	cmp	r0, r4
 800dcf6:	d10b      	bne.n	800dd10 <_free_r+0x6c>
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	4401      	add	r1, r0
 800dcfc:	1850      	adds	r0, r2, r1
 800dcfe:	4283      	cmp	r3, r0
 800dd00:	6011      	str	r1, [r2, #0]
 800dd02:	d1e0      	bne.n	800dcc6 <_free_r+0x22>
 800dd04:	6818      	ldr	r0, [r3, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	6053      	str	r3, [r2, #4]
 800dd0a:	4408      	add	r0, r1
 800dd0c:	6010      	str	r0, [r2, #0]
 800dd0e:	e7da      	b.n	800dcc6 <_free_r+0x22>
 800dd10:	d902      	bls.n	800dd18 <_free_r+0x74>
 800dd12:	230c      	movs	r3, #12
 800dd14:	602b      	str	r3, [r5, #0]
 800dd16:	e7d6      	b.n	800dcc6 <_free_r+0x22>
 800dd18:	6820      	ldr	r0, [r4, #0]
 800dd1a:	1821      	adds	r1, r4, r0
 800dd1c:	428b      	cmp	r3, r1
 800dd1e:	bf04      	itt	eq
 800dd20:	6819      	ldreq	r1, [r3, #0]
 800dd22:	685b      	ldreq	r3, [r3, #4]
 800dd24:	6063      	str	r3, [r4, #4]
 800dd26:	bf04      	itt	eq
 800dd28:	1809      	addeq	r1, r1, r0
 800dd2a:	6021      	streq	r1, [r4, #0]
 800dd2c:	6054      	str	r4, [r2, #4]
 800dd2e:	e7ca      	b.n	800dcc6 <_free_r+0x22>
 800dd30:	bd38      	pop	{r3, r4, r5, pc}
 800dd32:	bf00      	nop
 800dd34:	24000524 	.word	0x24000524

0800dd38 <rshift>:
 800dd38:	6903      	ldr	r3, [r0, #16]
 800dd3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd42:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd46:	f100 0414 	add.w	r4, r0, #20
 800dd4a:	dd45      	ble.n	800ddd8 <rshift+0xa0>
 800dd4c:	f011 011f 	ands.w	r1, r1, #31
 800dd50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd58:	d10c      	bne.n	800dd74 <rshift+0x3c>
 800dd5a:	f100 0710 	add.w	r7, r0, #16
 800dd5e:	4629      	mov	r1, r5
 800dd60:	42b1      	cmp	r1, r6
 800dd62:	d334      	bcc.n	800ddce <rshift+0x96>
 800dd64:	1a9b      	subs	r3, r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	1eea      	subs	r2, r5, #3
 800dd6a:	4296      	cmp	r6, r2
 800dd6c:	bf38      	it	cc
 800dd6e:	2300      	movcc	r3, #0
 800dd70:	4423      	add	r3, r4
 800dd72:	e015      	b.n	800dda0 <rshift+0x68>
 800dd74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd78:	f1c1 0820 	rsb	r8, r1, #32
 800dd7c:	40cf      	lsrs	r7, r1
 800dd7e:	f105 0e04 	add.w	lr, r5, #4
 800dd82:	46a1      	mov	r9, r4
 800dd84:	4576      	cmp	r6, lr
 800dd86:	46f4      	mov	ip, lr
 800dd88:	d815      	bhi.n	800ddb6 <rshift+0x7e>
 800dd8a:	1a9a      	subs	r2, r3, r2
 800dd8c:	0092      	lsls	r2, r2, #2
 800dd8e:	3a04      	subs	r2, #4
 800dd90:	3501      	adds	r5, #1
 800dd92:	42ae      	cmp	r6, r5
 800dd94:	bf38      	it	cc
 800dd96:	2200      	movcc	r2, #0
 800dd98:	18a3      	adds	r3, r4, r2
 800dd9a:	50a7      	str	r7, [r4, r2]
 800dd9c:	b107      	cbz	r7, 800dda0 <rshift+0x68>
 800dd9e:	3304      	adds	r3, #4
 800dda0:	1b1a      	subs	r2, r3, r4
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dda8:	bf08      	it	eq
 800ddaa:	2300      	moveq	r3, #0
 800ddac:	6102      	str	r2, [r0, #16]
 800ddae:	bf08      	it	eq
 800ddb0:	6143      	streq	r3, [r0, #20]
 800ddb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb6:	f8dc c000 	ldr.w	ip, [ip]
 800ddba:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddbe:	ea4c 0707 	orr.w	r7, ip, r7
 800ddc2:	f849 7b04 	str.w	r7, [r9], #4
 800ddc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddca:	40cf      	lsrs	r7, r1
 800ddcc:	e7da      	b.n	800dd84 <rshift+0x4c>
 800ddce:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddd2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddd6:	e7c3      	b.n	800dd60 <rshift+0x28>
 800ddd8:	4623      	mov	r3, r4
 800ddda:	e7e1      	b.n	800dda0 <rshift+0x68>

0800dddc <__hexdig_fun>:
 800dddc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dde0:	2b09      	cmp	r3, #9
 800dde2:	d802      	bhi.n	800ddea <__hexdig_fun+0xe>
 800dde4:	3820      	subs	r0, #32
 800dde6:	b2c0      	uxtb	r0, r0
 800dde8:	4770      	bx	lr
 800ddea:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ddee:	2b05      	cmp	r3, #5
 800ddf0:	d801      	bhi.n	800ddf6 <__hexdig_fun+0x1a>
 800ddf2:	3847      	subs	r0, #71	@ 0x47
 800ddf4:	e7f7      	b.n	800dde6 <__hexdig_fun+0xa>
 800ddf6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ddfa:	2b05      	cmp	r3, #5
 800ddfc:	d801      	bhi.n	800de02 <__hexdig_fun+0x26>
 800ddfe:	3827      	subs	r0, #39	@ 0x27
 800de00:	e7f1      	b.n	800dde6 <__hexdig_fun+0xa>
 800de02:	2000      	movs	r0, #0
 800de04:	4770      	bx	lr
	...

0800de08 <__gethex>:
 800de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0c:	b085      	sub	sp, #20
 800de0e:	468a      	mov	sl, r1
 800de10:	9302      	str	r3, [sp, #8]
 800de12:	680b      	ldr	r3, [r1, #0]
 800de14:	9001      	str	r0, [sp, #4]
 800de16:	4690      	mov	r8, r2
 800de18:	1c9c      	adds	r4, r3, #2
 800de1a:	46a1      	mov	r9, r4
 800de1c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de20:	2830      	cmp	r0, #48	@ 0x30
 800de22:	d0fa      	beq.n	800de1a <__gethex+0x12>
 800de24:	eba9 0303 	sub.w	r3, r9, r3
 800de28:	f1a3 0b02 	sub.w	fp, r3, #2
 800de2c:	f7ff ffd6 	bl	800dddc <__hexdig_fun>
 800de30:	4605      	mov	r5, r0
 800de32:	2800      	cmp	r0, #0
 800de34:	d168      	bne.n	800df08 <__gethex+0x100>
 800de36:	49a0      	ldr	r1, [pc, #640]	@ (800e0b8 <__gethex+0x2b0>)
 800de38:	2201      	movs	r2, #1
 800de3a:	4648      	mov	r0, r9
 800de3c:	f7ff f8a9 	bl	800cf92 <strncmp>
 800de40:	4607      	mov	r7, r0
 800de42:	2800      	cmp	r0, #0
 800de44:	d167      	bne.n	800df16 <__gethex+0x10e>
 800de46:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de4a:	4626      	mov	r6, r4
 800de4c:	f7ff ffc6 	bl	800dddc <__hexdig_fun>
 800de50:	2800      	cmp	r0, #0
 800de52:	d062      	beq.n	800df1a <__gethex+0x112>
 800de54:	4623      	mov	r3, r4
 800de56:	7818      	ldrb	r0, [r3, #0]
 800de58:	2830      	cmp	r0, #48	@ 0x30
 800de5a:	4699      	mov	r9, r3
 800de5c:	f103 0301 	add.w	r3, r3, #1
 800de60:	d0f9      	beq.n	800de56 <__gethex+0x4e>
 800de62:	f7ff ffbb 	bl	800dddc <__hexdig_fun>
 800de66:	fab0 f580 	clz	r5, r0
 800de6a:	096d      	lsrs	r5, r5, #5
 800de6c:	f04f 0b01 	mov.w	fp, #1
 800de70:	464a      	mov	r2, r9
 800de72:	4616      	mov	r6, r2
 800de74:	3201      	adds	r2, #1
 800de76:	7830      	ldrb	r0, [r6, #0]
 800de78:	f7ff ffb0 	bl	800dddc <__hexdig_fun>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d1f8      	bne.n	800de72 <__gethex+0x6a>
 800de80:	498d      	ldr	r1, [pc, #564]	@ (800e0b8 <__gethex+0x2b0>)
 800de82:	2201      	movs	r2, #1
 800de84:	4630      	mov	r0, r6
 800de86:	f7ff f884 	bl	800cf92 <strncmp>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d13f      	bne.n	800df0e <__gethex+0x106>
 800de8e:	b944      	cbnz	r4, 800dea2 <__gethex+0x9a>
 800de90:	1c74      	adds	r4, r6, #1
 800de92:	4622      	mov	r2, r4
 800de94:	4616      	mov	r6, r2
 800de96:	3201      	adds	r2, #1
 800de98:	7830      	ldrb	r0, [r6, #0]
 800de9a:	f7ff ff9f 	bl	800dddc <__hexdig_fun>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d1f8      	bne.n	800de94 <__gethex+0x8c>
 800dea2:	1ba4      	subs	r4, r4, r6
 800dea4:	00a7      	lsls	r7, r4, #2
 800dea6:	7833      	ldrb	r3, [r6, #0]
 800dea8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800deac:	2b50      	cmp	r3, #80	@ 0x50
 800deae:	d13e      	bne.n	800df2e <__gethex+0x126>
 800deb0:	7873      	ldrb	r3, [r6, #1]
 800deb2:	2b2b      	cmp	r3, #43	@ 0x2b
 800deb4:	d033      	beq.n	800df1e <__gethex+0x116>
 800deb6:	2b2d      	cmp	r3, #45	@ 0x2d
 800deb8:	d034      	beq.n	800df24 <__gethex+0x11c>
 800deba:	1c71      	adds	r1, r6, #1
 800debc:	2400      	movs	r4, #0
 800debe:	7808      	ldrb	r0, [r1, #0]
 800dec0:	f7ff ff8c 	bl	800dddc <__hexdig_fun>
 800dec4:	1e43      	subs	r3, r0, #1
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	2b18      	cmp	r3, #24
 800deca:	d830      	bhi.n	800df2e <__gethex+0x126>
 800decc:	f1a0 0210 	sub.w	r2, r0, #16
 800ded0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ded4:	f7ff ff82 	bl	800dddc <__hexdig_fun>
 800ded8:	f100 3cff 	add.w	ip, r0, #4294967295
 800dedc:	fa5f fc8c 	uxtb.w	ip, ip
 800dee0:	f1bc 0f18 	cmp.w	ip, #24
 800dee4:	f04f 030a 	mov.w	r3, #10
 800dee8:	d91e      	bls.n	800df28 <__gethex+0x120>
 800deea:	b104      	cbz	r4, 800deee <__gethex+0xe6>
 800deec:	4252      	negs	r2, r2
 800deee:	4417      	add	r7, r2
 800def0:	f8ca 1000 	str.w	r1, [sl]
 800def4:	b1ed      	cbz	r5, 800df32 <__gethex+0x12a>
 800def6:	f1bb 0f00 	cmp.w	fp, #0
 800defa:	bf0c      	ite	eq
 800defc:	2506      	moveq	r5, #6
 800defe:	2500      	movne	r5, #0
 800df00:	4628      	mov	r0, r5
 800df02:	b005      	add	sp, #20
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	2500      	movs	r5, #0
 800df0a:	462c      	mov	r4, r5
 800df0c:	e7b0      	b.n	800de70 <__gethex+0x68>
 800df0e:	2c00      	cmp	r4, #0
 800df10:	d1c7      	bne.n	800dea2 <__gethex+0x9a>
 800df12:	4627      	mov	r7, r4
 800df14:	e7c7      	b.n	800dea6 <__gethex+0x9e>
 800df16:	464e      	mov	r6, r9
 800df18:	462f      	mov	r7, r5
 800df1a:	2501      	movs	r5, #1
 800df1c:	e7c3      	b.n	800dea6 <__gethex+0x9e>
 800df1e:	2400      	movs	r4, #0
 800df20:	1cb1      	adds	r1, r6, #2
 800df22:	e7cc      	b.n	800debe <__gethex+0xb6>
 800df24:	2401      	movs	r4, #1
 800df26:	e7fb      	b.n	800df20 <__gethex+0x118>
 800df28:	fb03 0002 	mla	r0, r3, r2, r0
 800df2c:	e7ce      	b.n	800decc <__gethex+0xc4>
 800df2e:	4631      	mov	r1, r6
 800df30:	e7de      	b.n	800def0 <__gethex+0xe8>
 800df32:	eba6 0309 	sub.w	r3, r6, r9
 800df36:	3b01      	subs	r3, #1
 800df38:	4629      	mov	r1, r5
 800df3a:	2b07      	cmp	r3, #7
 800df3c:	dc0a      	bgt.n	800df54 <__gethex+0x14c>
 800df3e:	9801      	ldr	r0, [sp, #4]
 800df40:	f000 fafc 	bl	800e53c <_Balloc>
 800df44:	4604      	mov	r4, r0
 800df46:	b940      	cbnz	r0, 800df5a <__gethex+0x152>
 800df48:	4b5c      	ldr	r3, [pc, #368]	@ (800e0bc <__gethex+0x2b4>)
 800df4a:	4602      	mov	r2, r0
 800df4c:	21e4      	movs	r1, #228	@ 0xe4
 800df4e:	485c      	ldr	r0, [pc, #368]	@ (800e0c0 <__gethex+0x2b8>)
 800df50:	f001 fa5a 	bl	800f408 <__assert_func>
 800df54:	3101      	adds	r1, #1
 800df56:	105b      	asrs	r3, r3, #1
 800df58:	e7ef      	b.n	800df3a <__gethex+0x132>
 800df5a:	f100 0a14 	add.w	sl, r0, #20
 800df5e:	2300      	movs	r3, #0
 800df60:	4655      	mov	r5, sl
 800df62:	469b      	mov	fp, r3
 800df64:	45b1      	cmp	r9, r6
 800df66:	d337      	bcc.n	800dfd8 <__gethex+0x1d0>
 800df68:	f845 bb04 	str.w	fp, [r5], #4
 800df6c:	eba5 050a 	sub.w	r5, r5, sl
 800df70:	10ad      	asrs	r5, r5, #2
 800df72:	6125      	str	r5, [r4, #16]
 800df74:	4658      	mov	r0, fp
 800df76:	f000 fbd3 	bl	800e720 <__hi0bits>
 800df7a:	016d      	lsls	r5, r5, #5
 800df7c:	f8d8 6000 	ldr.w	r6, [r8]
 800df80:	1a2d      	subs	r5, r5, r0
 800df82:	42b5      	cmp	r5, r6
 800df84:	dd54      	ble.n	800e030 <__gethex+0x228>
 800df86:	1bad      	subs	r5, r5, r6
 800df88:	4629      	mov	r1, r5
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 ff64 	bl	800ee58 <__any_on>
 800df90:	4681      	mov	r9, r0
 800df92:	b178      	cbz	r0, 800dfb4 <__gethex+0x1ac>
 800df94:	1e6b      	subs	r3, r5, #1
 800df96:	1159      	asrs	r1, r3, #5
 800df98:	f003 021f 	and.w	r2, r3, #31
 800df9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dfa0:	f04f 0901 	mov.w	r9, #1
 800dfa4:	fa09 f202 	lsl.w	r2, r9, r2
 800dfa8:	420a      	tst	r2, r1
 800dfaa:	d003      	beq.n	800dfb4 <__gethex+0x1ac>
 800dfac:	454b      	cmp	r3, r9
 800dfae:	dc36      	bgt.n	800e01e <__gethex+0x216>
 800dfb0:	f04f 0902 	mov.w	r9, #2
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7ff febe 	bl	800dd38 <rshift>
 800dfbc:	442f      	add	r7, r5
 800dfbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfc2:	42bb      	cmp	r3, r7
 800dfc4:	da42      	bge.n	800e04c <__gethex+0x244>
 800dfc6:	9801      	ldr	r0, [sp, #4]
 800dfc8:	4621      	mov	r1, r4
 800dfca:	f000 faf7 	bl	800e5bc <_Bfree>
 800dfce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	25a3      	movs	r5, #163	@ 0xa3
 800dfd6:	e793      	b.n	800df00 <__gethex+0xf8>
 800dfd8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dfdc:	2a2e      	cmp	r2, #46	@ 0x2e
 800dfde:	d012      	beq.n	800e006 <__gethex+0x1fe>
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	d104      	bne.n	800dfee <__gethex+0x1e6>
 800dfe4:	f845 bb04 	str.w	fp, [r5], #4
 800dfe8:	f04f 0b00 	mov.w	fp, #0
 800dfec:	465b      	mov	r3, fp
 800dfee:	7830      	ldrb	r0, [r6, #0]
 800dff0:	9303      	str	r3, [sp, #12]
 800dff2:	f7ff fef3 	bl	800dddc <__hexdig_fun>
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	f000 000f 	and.w	r0, r0, #15
 800dffc:	4098      	lsls	r0, r3
 800dffe:	ea4b 0b00 	orr.w	fp, fp, r0
 800e002:	3304      	adds	r3, #4
 800e004:	e7ae      	b.n	800df64 <__gethex+0x15c>
 800e006:	45b1      	cmp	r9, r6
 800e008:	d8ea      	bhi.n	800dfe0 <__gethex+0x1d8>
 800e00a:	492b      	ldr	r1, [pc, #172]	@ (800e0b8 <__gethex+0x2b0>)
 800e00c:	9303      	str	r3, [sp, #12]
 800e00e:	2201      	movs	r2, #1
 800e010:	4630      	mov	r0, r6
 800e012:	f7fe ffbe 	bl	800cf92 <strncmp>
 800e016:	9b03      	ldr	r3, [sp, #12]
 800e018:	2800      	cmp	r0, #0
 800e01a:	d1e1      	bne.n	800dfe0 <__gethex+0x1d8>
 800e01c:	e7a2      	b.n	800df64 <__gethex+0x15c>
 800e01e:	1ea9      	subs	r1, r5, #2
 800e020:	4620      	mov	r0, r4
 800e022:	f000 ff19 	bl	800ee58 <__any_on>
 800e026:	2800      	cmp	r0, #0
 800e028:	d0c2      	beq.n	800dfb0 <__gethex+0x1a8>
 800e02a:	f04f 0903 	mov.w	r9, #3
 800e02e:	e7c1      	b.n	800dfb4 <__gethex+0x1ac>
 800e030:	da09      	bge.n	800e046 <__gethex+0x23e>
 800e032:	1b75      	subs	r5, r6, r5
 800e034:	4621      	mov	r1, r4
 800e036:	9801      	ldr	r0, [sp, #4]
 800e038:	462a      	mov	r2, r5
 800e03a:	f000 fcd7 	bl	800e9ec <__lshift>
 800e03e:	1b7f      	subs	r7, r7, r5
 800e040:	4604      	mov	r4, r0
 800e042:	f100 0a14 	add.w	sl, r0, #20
 800e046:	f04f 0900 	mov.w	r9, #0
 800e04a:	e7b8      	b.n	800dfbe <__gethex+0x1b6>
 800e04c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e050:	42bd      	cmp	r5, r7
 800e052:	dd6f      	ble.n	800e134 <__gethex+0x32c>
 800e054:	1bed      	subs	r5, r5, r7
 800e056:	42ae      	cmp	r6, r5
 800e058:	dc34      	bgt.n	800e0c4 <__gethex+0x2bc>
 800e05a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d022      	beq.n	800e0a8 <__gethex+0x2a0>
 800e062:	2b03      	cmp	r3, #3
 800e064:	d024      	beq.n	800e0b0 <__gethex+0x2a8>
 800e066:	2b01      	cmp	r3, #1
 800e068:	d115      	bne.n	800e096 <__gethex+0x28e>
 800e06a:	42ae      	cmp	r6, r5
 800e06c:	d113      	bne.n	800e096 <__gethex+0x28e>
 800e06e:	2e01      	cmp	r6, #1
 800e070:	d10b      	bne.n	800e08a <__gethex+0x282>
 800e072:	9a02      	ldr	r2, [sp, #8]
 800e074:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	2301      	movs	r3, #1
 800e07c:	6123      	str	r3, [r4, #16]
 800e07e:	f8ca 3000 	str.w	r3, [sl]
 800e082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e084:	2562      	movs	r5, #98	@ 0x62
 800e086:	601c      	str	r4, [r3, #0]
 800e088:	e73a      	b.n	800df00 <__gethex+0xf8>
 800e08a:	1e71      	subs	r1, r6, #1
 800e08c:	4620      	mov	r0, r4
 800e08e:	f000 fee3 	bl	800ee58 <__any_on>
 800e092:	2800      	cmp	r0, #0
 800e094:	d1ed      	bne.n	800e072 <__gethex+0x26a>
 800e096:	9801      	ldr	r0, [sp, #4]
 800e098:	4621      	mov	r1, r4
 800e09a:	f000 fa8f 	bl	800e5bc <_Bfree>
 800e09e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	2550      	movs	r5, #80	@ 0x50
 800e0a6:	e72b      	b.n	800df00 <__gethex+0xf8>
 800e0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1f3      	bne.n	800e096 <__gethex+0x28e>
 800e0ae:	e7e0      	b.n	800e072 <__gethex+0x26a>
 800e0b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1dd      	bne.n	800e072 <__gethex+0x26a>
 800e0b6:	e7ee      	b.n	800e096 <__gethex+0x28e>
 800e0b8:	0800fb08 	.word	0x0800fb08
 800e0bc:	0800fc1d 	.word	0x0800fc1d
 800e0c0:	0800fc2e 	.word	0x0800fc2e
 800e0c4:	1e6f      	subs	r7, r5, #1
 800e0c6:	f1b9 0f00 	cmp.w	r9, #0
 800e0ca:	d130      	bne.n	800e12e <__gethex+0x326>
 800e0cc:	b127      	cbz	r7, 800e0d8 <__gethex+0x2d0>
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f000 fec1 	bl	800ee58 <__any_on>
 800e0d6:	4681      	mov	r9, r0
 800e0d8:	117a      	asrs	r2, r7, #5
 800e0da:	2301      	movs	r3, #1
 800e0dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e0e0:	f007 071f 	and.w	r7, r7, #31
 800e0e4:	40bb      	lsls	r3, r7
 800e0e6:	4213      	tst	r3, r2
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	bf18      	it	ne
 800e0ee:	f049 0902 	orrne.w	r9, r9, #2
 800e0f2:	f7ff fe21 	bl	800dd38 <rshift>
 800e0f6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e0fa:	1b76      	subs	r6, r6, r5
 800e0fc:	2502      	movs	r5, #2
 800e0fe:	f1b9 0f00 	cmp.w	r9, #0
 800e102:	d047      	beq.n	800e194 <__gethex+0x38c>
 800e104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e108:	2b02      	cmp	r3, #2
 800e10a:	d015      	beq.n	800e138 <__gethex+0x330>
 800e10c:	2b03      	cmp	r3, #3
 800e10e:	d017      	beq.n	800e140 <__gethex+0x338>
 800e110:	2b01      	cmp	r3, #1
 800e112:	d109      	bne.n	800e128 <__gethex+0x320>
 800e114:	f019 0f02 	tst.w	r9, #2
 800e118:	d006      	beq.n	800e128 <__gethex+0x320>
 800e11a:	f8da 3000 	ldr.w	r3, [sl]
 800e11e:	ea49 0903 	orr.w	r9, r9, r3
 800e122:	f019 0f01 	tst.w	r9, #1
 800e126:	d10e      	bne.n	800e146 <__gethex+0x33e>
 800e128:	f045 0510 	orr.w	r5, r5, #16
 800e12c:	e032      	b.n	800e194 <__gethex+0x38c>
 800e12e:	f04f 0901 	mov.w	r9, #1
 800e132:	e7d1      	b.n	800e0d8 <__gethex+0x2d0>
 800e134:	2501      	movs	r5, #1
 800e136:	e7e2      	b.n	800e0fe <__gethex+0x2f6>
 800e138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e13a:	f1c3 0301 	rsb	r3, r3, #1
 800e13e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0f0      	beq.n	800e128 <__gethex+0x320>
 800e146:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e14a:	f104 0314 	add.w	r3, r4, #20
 800e14e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e152:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e156:	f04f 0c00 	mov.w	ip, #0
 800e15a:	4618      	mov	r0, r3
 800e15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e160:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e164:	d01b      	beq.n	800e19e <__gethex+0x396>
 800e166:	3201      	adds	r2, #1
 800e168:	6002      	str	r2, [r0, #0]
 800e16a:	2d02      	cmp	r5, #2
 800e16c:	f104 0314 	add.w	r3, r4, #20
 800e170:	d13c      	bne.n	800e1ec <__gethex+0x3e4>
 800e172:	f8d8 2000 	ldr.w	r2, [r8]
 800e176:	3a01      	subs	r2, #1
 800e178:	42b2      	cmp	r2, r6
 800e17a:	d109      	bne.n	800e190 <__gethex+0x388>
 800e17c:	1171      	asrs	r1, r6, #5
 800e17e:	2201      	movs	r2, #1
 800e180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e184:	f006 061f 	and.w	r6, r6, #31
 800e188:	fa02 f606 	lsl.w	r6, r2, r6
 800e18c:	421e      	tst	r6, r3
 800e18e:	d13a      	bne.n	800e206 <__gethex+0x3fe>
 800e190:	f045 0520 	orr.w	r5, r5, #32
 800e194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e196:	601c      	str	r4, [r3, #0]
 800e198:	9b02      	ldr	r3, [sp, #8]
 800e19a:	601f      	str	r7, [r3, #0]
 800e19c:	e6b0      	b.n	800df00 <__gethex+0xf8>
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1a4:	d8d9      	bhi.n	800e15a <__gethex+0x352>
 800e1a6:	68a3      	ldr	r3, [r4, #8]
 800e1a8:	459b      	cmp	fp, r3
 800e1aa:	db17      	blt.n	800e1dc <__gethex+0x3d4>
 800e1ac:	6861      	ldr	r1, [r4, #4]
 800e1ae:	9801      	ldr	r0, [sp, #4]
 800e1b0:	3101      	adds	r1, #1
 800e1b2:	f000 f9c3 	bl	800e53c <_Balloc>
 800e1b6:	4681      	mov	r9, r0
 800e1b8:	b918      	cbnz	r0, 800e1c2 <__gethex+0x3ba>
 800e1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800e224 <__gethex+0x41c>)
 800e1bc:	4602      	mov	r2, r0
 800e1be:	2184      	movs	r1, #132	@ 0x84
 800e1c0:	e6c5      	b.n	800df4e <__gethex+0x146>
 800e1c2:	6922      	ldr	r2, [r4, #16]
 800e1c4:	3202      	adds	r2, #2
 800e1c6:	f104 010c 	add.w	r1, r4, #12
 800e1ca:	0092      	lsls	r2, r2, #2
 800e1cc:	300c      	adds	r0, #12
 800e1ce:	f7fe ff6a 	bl	800d0a6 <memcpy>
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	9801      	ldr	r0, [sp, #4]
 800e1d6:	f000 f9f1 	bl	800e5bc <_Bfree>
 800e1da:	464c      	mov	r4, r9
 800e1dc:	6923      	ldr	r3, [r4, #16]
 800e1de:	1c5a      	adds	r2, r3, #1
 800e1e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1e4:	6122      	str	r2, [r4, #16]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	615a      	str	r2, [r3, #20]
 800e1ea:	e7be      	b.n	800e16a <__gethex+0x362>
 800e1ec:	6922      	ldr	r2, [r4, #16]
 800e1ee:	455a      	cmp	r2, fp
 800e1f0:	dd0b      	ble.n	800e20a <__gethex+0x402>
 800e1f2:	2101      	movs	r1, #1
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7ff fd9f 	bl	800dd38 <rshift>
 800e1fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1fe:	3701      	adds	r7, #1
 800e200:	42bb      	cmp	r3, r7
 800e202:	f6ff aee0 	blt.w	800dfc6 <__gethex+0x1be>
 800e206:	2501      	movs	r5, #1
 800e208:	e7c2      	b.n	800e190 <__gethex+0x388>
 800e20a:	f016 061f 	ands.w	r6, r6, #31
 800e20e:	d0fa      	beq.n	800e206 <__gethex+0x3fe>
 800e210:	4453      	add	r3, sl
 800e212:	f1c6 0620 	rsb	r6, r6, #32
 800e216:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e21a:	f000 fa81 	bl	800e720 <__hi0bits>
 800e21e:	42b0      	cmp	r0, r6
 800e220:	dbe7      	blt.n	800e1f2 <__gethex+0x3ea>
 800e222:	e7f0      	b.n	800e206 <__gethex+0x3fe>
 800e224:	0800fc1d 	.word	0x0800fc1d

0800e228 <L_shift>:
 800e228:	f1c2 0208 	rsb	r2, r2, #8
 800e22c:	0092      	lsls	r2, r2, #2
 800e22e:	b570      	push	{r4, r5, r6, lr}
 800e230:	f1c2 0620 	rsb	r6, r2, #32
 800e234:	6843      	ldr	r3, [r0, #4]
 800e236:	6804      	ldr	r4, [r0, #0]
 800e238:	fa03 f506 	lsl.w	r5, r3, r6
 800e23c:	432c      	orrs	r4, r5
 800e23e:	40d3      	lsrs	r3, r2
 800e240:	6004      	str	r4, [r0, #0]
 800e242:	f840 3f04 	str.w	r3, [r0, #4]!
 800e246:	4288      	cmp	r0, r1
 800e248:	d3f4      	bcc.n	800e234 <L_shift+0xc>
 800e24a:	bd70      	pop	{r4, r5, r6, pc}

0800e24c <__match>:
 800e24c:	b530      	push	{r4, r5, lr}
 800e24e:	6803      	ldr	r3, [r0, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e256:	b914      	cbnz	r4, 800e25e <__match+0x12>
 800e258:	6003      	str	r3, [r0, #0]
 800e25a:	2001      	movs	r0, #1
 800e25c:	bd30      	pop	{r4, r5, pc}
 800e25e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e262:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e266:	2d19      	cmp	r5, #25
 800e268:	bf98      	it	ls
 800e26a:	3220      	addls	r2, #32
 800e26c:	42a2      	cmp	r2, r4
 800e26e:	d0f0      	beq.n	800e252 <__match+0x6>
 800e270:	2000      	movs	r0, #0
 800e272:	e7f3      	b.n	800e25c <__match+0x10>

0800e274 <__hexnan>:
 800e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	680b      	ldr	r3, [r1, #0]
 800e27a:	6801      	ldr	r1, [r0, #0]
 800e27c:	115e      	asrs	r6, r3, #5
 800e27e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e282:	f013 031f 	ands.w	r3, r3, #31
 800e286:	b087      	sub	sp, #28
 800e288:	bf18      	it	ne
 800e28a:	3604      	addne	r6, #4
 800e28c:	2500      	movs	r5, #0
 800e28e:	1f37      	subs	r7, r6, #4
 800e290:	4682      	mov	sl, r0
 800e292:	4690      	mov	r8, r2
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	f846 5c04 	str.w	r5, [r6, #-4]
 800e29a:	46b9      	mov	r9, r7
 800e29c:	463c      	mov	r4, r7
 800e29e:	9502      	str	r5, [sp, #8]
 800e2a0:	46ab      	mov	fp, r5
 800e2a2:	784a      	ldrb	r2, [r1, #1]
 800e2a4:	1c4b      	adds	r3, r1, #1
 800e2a6:	9303      	str	r3, [sp, #12]
 800e2a8:	b342      	cbz	r2, 800e2fc <__hexnan+0x88>
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	9105      	str	r1, [sp, #20]
 800e2ae:	9204      	str	r2, [sp, #16]
 800e2b0:	f7ff fd94 	bl	800dddc <__hexdig_fun>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d151      	bne.n	800e35c <__hexnan+0xe8>
 800e2b8:	9a04      	ldr	r2, [sp, #16]
 800e2ba:	9905      	ldr	r1, [sp, #20]
 800e2bc:	2a20      	cmp	r2, #32
 800e2be:	d818      	bhi.n	800e2f2 <__hexnan+0x7e>
 800e2c0:	9b02      	ldr	r3, [sp, #8]
 800e2c2:	459b      	cmp	fp, r3
 800e2c4:	dd13      	ble.n	800e2ee <__hexnan+0x7a>
 800e2c6:	454c      	cmp	r4, r9
 800e2c8:	d206      	bcs.n	800e2d8 <__hexnan+0x64>
 800e2ca:	2d07      	cmp	r5, #7
 800e2cc:	dc04      	bgt.n	800e2d8 <__hexnan+0x64>
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f7ff ffa8 	bl	800e228 <L_shift>
 800e2d8:	4544      	cmp	r4, r8
 800e2da:	d952      	bls.n	800e382 <__hexnan+0x10e>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f1a4 0904 	sub.w	r9, r4, #4
 800e2e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2e6:	f8cd b008 	str.w	fp, [sp, #8]
 800e2ea:	464c      	mov	r4, r9
 800e2ec:	461d      	mov	r5, r3
 800e2ee:	9903      	ldr	r1, [sp, #12]
 800e2f0:	e7d7      	b.n	800e2a2 <__hexnan+0x2e>
 800e2f2:	2a29      	cmp	r2, #41	@ 0x29
 800e2f4:	d157      	bne.n	800e3a6 <__hexnan+0x132>
 800e2f6:	3102      	adds	r1, #2
 800e2f8:	f8ca 1000 	str.w	r1, [sl]
 800e2fc:	f1bb 0f00 	cmp.w	fp, #0
 800e300:	d051      	beq.n	800e3a6 <__hexnan+0x132>
 800e302:	454c      	cmp	r4, r9
 800e304:	d206      	bcs.n	800e314 <__hexnan+0xa0>
 800e306:	2d07      	cmp	r5, #7
 800e308:	dc04      	bgt.n	800e314 <__hexnan+0xa0>
 800e30a:	462a      	mov	r2, r5
 800e30c:	4649      	mov	r1, r9
 800e30e:	4620      	mov	r0, r4
 800e310:	f7ff ff8a 	bl	800e228 <L_shift>
 800e314:	4544      	cmp	r4, r8
 800e316:	d936      	bls.n	800e386 <__hexnan+0x112>
 800e318:	f1a8 0204 	sub.w	r2, r8, #4
 800e31c:	4623      	mov	r3, r4
 800e31e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e322:	f842 1f04 	str.w	r1, [r2, #4]!
 800e326:	429f      	cmp	r7, r3
 800e328:	d2f9      	bcs.n	800e31e <__hexnan+0xaa>
 800e32a:	1b3b      	subs	r3, r7, r4
 800e32c:	f023 0303 	bic.w	r3, r3, #3
 800e330:	3304      	adds	r3, #4
 800e332:	3401      	adds	r4, #1
 800e334:	3e03      	subs	r6, #3
 800e336:	42b4      	cmp	r4, r6
 800e338:	bf88      	it	hi
 800e33a:	2304      	movhi	r3, #4
 800e33c:	4443      	add	r3, r8
 800e33e:	2200      	movs	r2, #0
 800e340:	f843 2b04 	str.w	r2, [r3], #4
 800e344:	429f      	cmp	r7, r3
 800e346:	d2fb      	bcs.n	800e340 <__hexnan+0xcc>
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	b91b      	cbnz	r3, 800e354 <__hexnan+0xe0>
 800e34c:	4547      	cmp	r7, r8
 800e34e:	d128      	bne.n	800e3a2 <__hexnan+0x12e>
 800e350:	2301      	movs	r3, #1
 800e352:	603b      	str	r3, [r7, #0]
 800e354:	2005      	movs	r0, #5
 800e356:	b007      	add	sp, #28
 800e358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35c:	3501      	adds	r5, #1
 800e35e:	2d08      	cmp	r5, #8
 800e360:	f10b 0b01 	add.w	fp, fp, #1
 800e364:	dd06      	ble.n	800e374 <__hexnan+0x100>
 800e366:	4544      	cmp	r4, r8
 800e368:	d9c1      	bls.n	800e2ee <__hexnan+0x7a>
 800e36a:	2300      	movs	r3, #0
 800e36c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e370:	2501      	movs	r5, #1
 800e372:	3c04      	subs	r4, #4
 800e374:	6822      	ldr	r2, [r4, #0]
 800e376:	f000 000f 	and.w	r0, r0, #15
 800e37a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e37e:	6020      	str	r0, [r4, #0]
 800e380:	e7b5      	b.n	800e2ee <__hexnan+0x7a>
 800e382:	2508      	movs	r5, #8
 800e384:	e7b3      	b.n	800e2ee <__hexnan+0x7a>
 800e386:	9b01      	ldr	r3, [sp, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d0dd      	beq.n	800e348 <__hexnan+0xd4>
 800e38c:	f1c3 0320 	rsb	r3, r3, #32
 800e390:	f04f 32ff 	mov.w	r2, #4294967295
 800e394:	40da      	lsrs	r2, r3
 800e396:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e39a:	4013      	ands	r3, r2
 800e39c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3a0:	e7d2      	b.n	800e348 <__hexnan+0xd4>
 800e3a2:	3f04      	subs	r7, #4
 800e3a4:	e7d0      	b.n	800e348 <__hexnan+0xd4>
 800e3a6:	2004      	movs	r0, #4
 800e3a8:	e7d5      	b.n	800e356 <__hexnan+0xe2>
	...

0800e3ac <malloc>:
 800e3ac:	4b02      	ldr	r3, [pc, #8]	@ (800e3b8 <malloc+0xc>)
 800e3ae:	4601      	mov	r1, r0
 800e3b0:	6818      	ldr	r0, [r3, #0]
 800e3b2:	f000 b825 	b.w	800e400 <_malloc_r>
 800e3b6:	bf00      	nop
 800e3b8:	24000194 	.word	0x24000194

0800e3bc <sbrk_aligned>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	4e0f      	ldr	r6, [pc, #60]	@ (800e3fc <sbrk_aligned+0x40>)
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	6831      	ldr	r1, [r6, #0]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	b911      	cbnz	r1, 800e3ce <sbrk_aligned+0x12>
 800e3c8:	f001 f80e 	bl	800f3e8 <_sbrk_r>
 800e3cc:	6030      	str	r0, [r6, #0]
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f001 f809 	bl	800f3e8 <_sbrk_r>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d103      	bne.n	800e3e2 <sbrk_aligned+0x26>
 800e3da:	f04f 34ff 	mov.w	r4, #4294967295
 800e3de:	4620      	mov	r0, r4
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	1cc4      	adds	r4, r0, #3
 800e3e4:	f024 0403 	bic.w	r4, r4, #3
 800e3e8:	42a0      	cmp	r0, r4
 800e3ea:	d0f8      	beq.n	800e3de <sbrk_aligned+0x22>
 800e3ec:	1a21      	subs	r1, r4, r0
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f000 fffa 	bl	800f3e8 <_sbrk_r>
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	d1f2      	bne.n	800e3de <sbrk_aligned+0x22>
 800e3f8:	e7ef      	b.n	800e3da <sbrk_aligned+0x1e>
 800e3fa:	bf00      	nop
 800e3fc:	24000520 	.word	0x24000520

0800e400 <_malloc_r>:
 800e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e404:	1ccd      	adds	r5, r1, #3
 800e406:	f025 0503 	bic.w	r5, r5, #3
 800e40a:	3508      	adds	r5, #8
 800e40c:	2d0c      	cmp	r5, #12
 800e40e:	bf38      	it	cc
 800e410:	250c      	movcc	r5, #12
 800e412:	2d00      	cmp	r5, #0
 800e414:	4606      	mov	r6, r0
 800e416:	db01      	blt.n	800e41c <_malloc_r+0x1c>
 800e418:	42a9      	cmp	r1, r5
 800e41a:	d904      	bls.n	800e426 <_malloc_r+0x26>
 800e41c:	230c      	movs	r3, #12
 800e41e:	6033      	str	r3, [r6, #0]
 800e420:	2000      	movs	r0, #0
 800e422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4fc <_malloc_r+0xfc>
 800e42a:	f000 f87b 	bl	800e524 <__malloc_lock>
 800e42e:	f8d8 3000 	ldr.w	r3, [r8]
 800e432:	461c      	mov	r4, r3
 800e434:	bb44      	cbnz	r4, 800e488 <_malloc_r+0x88>
 800e436:	4629      	mov	r1, r5
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff ffbf 	bl	800e3bc <sbrk_aligned>
 800e43e:	1c43      	adds	r3, r0, #1
 800e440:	4604      	mov	r4, r0
 800e442:	d158      	bne.n	800e4f6 <_malloc_r+0xf6>
 800e444:	f8d8 4000 	ldr.w	r4, [r8]
 800e448:	4627      	mov	r7, r4
 800e44a:	2f00      	cmp	r7, #0
 800e44c:	d143      	bne.n	800e4d6 <_malloc_r+0xd6>
 800e44e:	2c00      	cmp	r4, #0
 800e450:	d04b      	beq.n	800e4ea <_malloc_r+0xea>
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	4639      	mov	r1, r7
 800e456:	4630      	mov	r0, r6
 800e458:	eb04 0903 	add.w	r9, r4, r3
 800e45c:	f000 ffc4 	bl	800f3e8 <_sbrk_r>
 800e460:	4581      	cmp	r9, r0
 800e462:	d142      	bne.n	800e4ea <_malloc_r+0xea>
 800e464:	6821      	ldr	r1, [r4, #0]
 800e466:	1a6d      	subs	r5, r5, r1
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ffa6 	bl	800e3bc <sbrk_aligned>
 800e470:	3001      	adds	r0, #1
 800e472:	d03a      	beq.n	800e4ea <_malloc_r+0xea>
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	442b      	add	r3, r5
 800e478:	6023      	str	r3, [r4, #0]
 800e47a:	f8d8 3000 	ldr.w	r3, [r8]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	bb62      	cbnz	r2, 800e4dc <_malloc_r+0xdc>
 800e482:	f8c8 7000 	str.w	r7, [r8]
 800e486:	e00f      	b.n	800e4a8 <_malloc_r+0xa8>
 800e488:	6822      	ldr	r2, [r4, #0]
 800e48a:	1b52      	subs	r2, r2, r5
 800e48c:	d420      	bmi.n	800e4d0 <_malloc_r+0xd0>
 800e48e:	2a0b      	cmp	r2, #11
 800e490:	d917      	bls.n	800e4c2 <_malloc_r+0xc2>
 800e492:	1961      	adds	r1, r4, r5
 800e494:	42a3      	cmp	r3, r4
 800e496:	6025      	str	r5, [r4, #0]
 800e498:	bf18      	it	ne
 800e49a:	6059      	strne	r1, [r3, #4]
 800e49c:	6863      	ldr	r3, [r4, #4]
 800e49e:	bf08      	it	eq
 800e4a0:	f8c8 1000 	streq.w	r1, [r8]
 800e4a4:	5162      	str	r2, [r4, r5]
 800e4a6:	604b      	str	r3, [r1, #4]
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f000 f841 	bl	800e530 <__malloc_unlock>
 800e4ae:	f104 000b 	add.w	r0, r4, #11
 800e4b2:	1d23      	adds	r3, r4, #4
 800e4b4:	f020 0007 	bic.w	r0, r0, #7
 800e4b8:	1ac2      	subs	r2, r0, r3
 800e4ba:	bf1c      	itt	ne
 800e4bc:	1a1b      	subne	r3, r3, r0
 800e4be:	50a3      	strne	r3, [r4, r2]
 800e4c0:	e7af      	b.n	800e422 <_malloc_r+0x22>
 800e4c2:	6862      	ldr	r2, [r4, #4]
 800e4c4:	42a3      	cmp	r3, r4
 800e4c6:	bf0c      	ite	eq
 800e4c8:	f8c8 2000 	streq.w	r2, [r8]
 800e4cc:	605a      	strne	r2, [r3, #4]
 800e4ce:	e7eb      	b.n	800e4a8 <_malloc_r+0xa8>
 800e4d0:	4623      	mov	r3, r4
 800e4d2:	6864      	ldr	r4, [r4, #4]
 800e4d4:	e7ae      	b.n	800e434 <_malloc_r+0x34>
 800e4d6:	463c      	mov	r4, r7
 800e4d8:	687f      	ldr	r7, [r7, #4]
 800e4da:	e7b6      	b.n	800e44a <_malloc_r+0x4a>
 800e4dc:	461a      	mov	r2, r3
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	42a3      	cmp	r3, r4
 800e4e2:	d1fb      	bne.n	800e4dc <_malloc_r+0xdc>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	6053      	str	r3, [r2, #4]
 800e4e8:	e7de      	b.n	800e4a8 <_malloc_r+0xa8>
 800e4ea:	230c      	movs	r3, #12
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f000 f81e 	bl	800e530 <__malloc_unlock>
 800e4f4:	e794      	b.n	800e420 <_malloc_r+0x20>
 800e4f6:	6005      	str	r5, [r0, #0]
 800e4f8:	e7d6      	b.n	800e4a8 <_malloc_r+0xa8>
 800e4fa:	bf00      	nop
 800e4fc:	24000524 	.word	0x24000524

0800e500 <__ascii_mbtowc>:
 800e500:	b082      	sub	sp, #8
 800e502:	b901      	cbnz	r1, 800e506 <__ascii_mbtowc+0x6>
 800e504:	a901      	add	r1, sp, #4
 800e506:	b142      	cbz	r2, 800e51a <__ascii_mbtowc+0x1a>
 800e508:	b14b      	cbz	r3, 800e51e <__ascii_mbtowc+0x1e>
 800e50a:	7813      	ldrb	r3, [r2, #0]
 800e50c:	600b      	str	r3, [r1, #0]
 800e50e:	7812      	ldrb	r2, [r2, #0]
 800e510:	1e10      	subs	r0, r2, #0
 800e512:	bf18      	it	ne
 800e514:	2001      	movne	r0, #1
 800e516:	b002      	add	sp, #8
 800e518:	4770      	bx	lr
 800e51a:	4610      	mov	r0, r2
 800e51c:	e7fb      	b.n	800e516 <__ascii_mbtowc+0x16>
 800e51e:	f06f 0001 	mvn.w	r0, #1
 800e522:	e7f8      	b.n	800e516 <__ascii_mbtowc+0x16>

0800e524 <__malloc_lock>:
 800e524:	4801      	ldr	r0, [pc, #4]	@ (800e52c <__malloc_lock+0x8>)
 800e526:	f7fe bdbc 	b.w	800d0a2 <__retarget_lock_acquire_recursive>
 800e52a:	bf00      	nop
 800e52c:	2400051c 	.word	0x2400051c

0800e530 <__malloc_unlock>:
 800e530:	4801      	ldr	r0, [pc, #4]	@ (800e538 <__malloc_unlock+0x8>)
 800e532:	f7fe bdb7 	b.w	800d0a4 <__retarget_lock_release_recursive>
 800e536:	bf00      	nop
 800e538:	2400051c 	.word	0x2400051c

0800e53c <_Balloc>:
 800e53c:	b570      	push	{r4, r5, r6, lr}
 800e53e:	69c6      	ldr	r6, [r0, #28]
 800e540:	4604      	mov	r4, r0
 800e542:	460d      	mov	r5, r1
 800e544:	b976      	cbnz	r6, 800e564 <_Balloc+0x28>
 800e546:	2010      	movs	r0, #16
 800e548:	f7ff ff30 	bl	800e3ac <malloc>
 800e54c:	4602      	mov	r2, r0
 800e54e:	61e0      	str	r0, [r4, #28]
 800e550:	b920      	cbnz	r0, 800e55c <_Balloc+0x20>
 800e552:	4b18      	ldr	r3, [pc, #96]	@ (800e5b4 <_Balloc+0x78>)
 800e554:	4818      	ldr	r0, [pc, #96]	@ (800e5b8 <_Balloc+0x7c>)
 800e556:	216b      	movs	r1, #107	@ 0x6b
 800e558:	f000 ff56 	bl	800f408 <__assert_func>
 800e55c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e560:	6006      	str	r6, [r0, #0]
 800e562:	60c6      	str	r6, [r0, #12]
 800e564:	69e6      	ldr	r6, [r4, #28]
 800e566:	68f3      	ldr	r3, [r6, #12]
 800e568:	b183      	cbz	r3, 800e58c <_Balloc+0x50>
 800e56a:	69e3      	ldr	r3, [r4, #28]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e572:	b9b8      	cbnz	r0, 800e5a4 <_Balloc+0x68>
 800e574:	2101      	movs	r1, #1
 800e576:	fa01 f605 	lsl.w	r6, r1, r5
 800e57a:	1d72      	adds	r2, r6, #5
 800e57c:	0092      	lsls	r2, r2, #2
 800e57e:	4620      	mov	r0, r4
 800e580:	f000 ff60 	bl	800f444 <_calloc_r>
 800e584:	b160      	cbz	r0, 800e5a0 <_Balloc+0x64>
 800e586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e58a:	e00e      	b.n	800e5aa <_Balloc+0x6e>
 800e58c:	2221      	movs	r2, #33	@ 0x21
 800e58e:	2104      	movs	r1, #4
 800e590:	4620      	mov	r0, r4
 800e592:	f000 ff57 	bl	800f444 <_calloc_r>
 800e596:	69e3      	ldr	r3, [r4, #28]
 800e598:	60f0      	str	r0, [r6, #12]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1e4      	bne.n	800e56a <_Balloc+0x2e>
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	6802      	ldr	r2, [r0, #0]
 800e5a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5b0:	e7f7      	b.n	800e5a2 <_Balloc+0x66>
 800e5b2:	bf00      	nop
 800e5b4:	0800fbae 	.word	0x0800fbae
 800e5b8:	0800fc8e 	.word	0x0800fc8e

0800e5bc <_Bfree>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	69c6      	ldr	r6, [r0, #28]
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	460c      	mov	r4, r1
 800e5c4:	b976      	cbnz	r6, 800e5e4 <_Bfree+0x28>
 800e5c6:	2010      	movs	r0, #16
 800e5c8:	f7ff fef0 	bl	800e3ac <malloc>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	61e8      	str	r0, [r5, #28]
 800e5d0:	b920      	cbnz	r0, 800e5dc <_Bfree+0x20>
 800e5d2:	4b09      	ldr	r3, [pc, #36]	@ (800e5f8 <_Bfree+0x3c>)
 800e5d4:	4809      	ldr	r0, [pc, #36]	@ (800e5fc <_Bfree+0x40>)
 800e5d6:	218f      	movs	r1, #143	@ 0x8f
 800e5d8:	f000 ff16 	bl	800f408 <__assert_func>
 800e5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5e0:	6006      	str	r6, [r0, #0]
 800e5e2:	60c6      	str	r6, [r0, #12]
 800e5e4:	b13c      	cbz	r4, 800e5f6 <_Bfree+0x3a>
 800e5e6:	69eb      	ldr	r3, [r5, #28]
 800e5e8:	6862      	ldr	r2, [r4, #4]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5f0:	6021      	str	r1, [r4, #0]
 800e5f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	0800fbae 	.word	0x0800fbae
 800e5fc:	0800fc8e 	.word	0x0800fc8e

0800e600 <__multadd>:
 800e600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e604:	690d      	ldr	r5, [r1, #16]
 800e606:	4607      	mov	r7, r0
 800e608:	460c      	mov	r4, r1
 800e60a:	461e      	mov	r6, r3
 800e60c:	f101 0c14 	add.w	ip, r1, #20
 800e610:	2000      	movs	r0, #0
 800e612:	f8dc 3000 	ldr.w	r3, [ip]
 800e616:	b299      	uxth	r1, r3
 800e618:	fb02 6101 	mla	r1, r2, r1, r6
 800e61c:	0c1e      	lsrs	r6, r3, #16
 800e61e:	0c0b      	lsrs	r3, r1, #16
 800e620:	fb02 3306 	mla	r3, r2, r6, r3
 800e624:	b289      	uxth	r1, r1
 800e626:	3001      	adds	r0, #1
 800e628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e62c:	4285      	cmp	r5, r0
 800e62e:	f84c 1b04 	str.w	r1, [ip], #4
 800e632:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e636:	dcec      	bgt.n	800e612 <__multadd+0x12>
 800e638:	b30e      	cbz	r6, 800e67e <__multadd+0x7e>
 800e63a:	68a3      	ldr	r3, [r4, #8]
 800e63c:	42ab      	cmp	r3, r5
 800e63e:	dc19      	bgt.n	800e674 <__multadd+0x74>
 800e640:	6861      	ldr	r1, [r4, #4]
 800e642:	4638      	mov	r0, r7
 800e644:	3101      	adds	r1, #1
 800e646:	f7ff ff79 	bl	800e53c <_Balloc>
 800e64a:	4680      	mov	r8, r0
 800e64c:	b928      	cbnz	r0, 800e65a <__multadd+0x5a>
 800e64e:	4602      	mov	r2, r0
 800e650:	4b0c      	ldr	r3, [pc, #48]	@ (800e684 <__multadd+0x84>)
 800e652:	480d      	ldr	r0, [pc, #52]	@ (800e688 <__multadd+0x88>)
 800e654:	21ba      	movs	r1, #186	@ 0xba
 800e656:	f000 fed7 	bl	800f408 <__assert_func>
 800e65a:	6922      	ldr	r2, [r4, #16]
 800e65c:	3202      	adds	r2, #2
 800e65e:	f104 010c 	add.w	r1, r4, #12
 800e662:	0092      	lsls	r2, r2, #2
 800e664:	300c      	adds	r0, #12
 800e666:	f7fe fd1e 	bl	800d0a6 <memcpy>
 800e66a:	4621      	mov	r1, r4
 800e66c:	4638      	mov	r0, r7
 800e66e:	f7ff ffa5 	bl	800e5bc <_Bfree>
 800e672:	4644      	mov	r4, r8
 800e674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e678:	3501      	adds	r5, #1
 800e67a:	615e      	str	r6, [r3, #20]
 800e67c:	6125      	str	r5, [r4, #16]
 800e67e:	4620      	mov	r0, r4
 800e680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e684:	0800fc1d 	.word	0x0800fc1d
 800e688:	0800fc8e 	.word	0x0800fc8e

0800e68c <__s2b>:
 800e68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e690:	460c      	mov	r4, r1
 800e692:	4615      	mov	r5, r2
 800e694:	461f      	mov	r7, r3
 800e696:	2209      	movs	r2, #9
 800e698:	3308      	adds	r3, #8
 800e69a:	4606      	mov	r6, r0
 800e69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	db09      	blt.n	800e6bc <__s2b+0x30>
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	f7ff ff47 	bl	800e53c <_Balloc>
 800e6ae:	b940      	cbnz	r0, 800e6c2 <__s2b+0x36>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	4b19      	ldr	r3, [pc, #100]	@ (800e718 <__s2b+0x8c>)
 800e6b4:	4819      	ldr	r0, [pc, #100]	@ (800e71c <__s2b+0x90>)
 800e6b6:	21d3      	movs	r1, #211	@ 0xd3
 800e6b8:	f000 fea6 	bl	800f408 <__assert_func>
 800e6bc:	0052      	lsls	r2, r2, #1
 800e6be:	3101      	adds	r1, #1
 800e6c0:	e7f0      	b.n	800e6a4 <__s2b+0x18>
 800e6c2:	9b08      	ldr	r3, [sp, #32]
 800e6c4:	6143      	str	r3, [r0, #20]
 800e6c6:	2d09      	cmp	r5, #9
 800e6c8:	f04f 0301 	mov.w	r3, #1
 800e6cc:	6103      	str	r3, [r0, #16]
 800e6ce:	dd16      	ble.n	800e6fe <__s2b+0x72>
 800e6d0:	f104 0909 	add.w	r9, r4, #9
 800e6d4:	46c8      	mov	r8, r9
 800e6d6:	442c      	add	r4, r5
 800e6d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6dc:	4601      	mov	r1, r0
 800e6de:	3b30      	subs	r3, #48	@ 0x30
 800e6e0:	220a      	movs	r2, #10
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f7ff ff8c 	bl	800e600 <__multadd>
 800e6e8:	45a0      	cmp	r8, r4
 800e6ea:	d1f5      	bne.n	800e6d8 <__s2b+0x4c>
 800e6ec:	f1a5 0408 	sub.w	r4, r5, #8
 800e6f0:	444c      	add	r4, r9
 800e6f2:	1b2d      	subs	r5, r5, r4
 800e6f4:	1963      	adds	r3, r4, r5
 800e6f6:	42bb      	cmp	r3, r7
 800e6f8:	db04      	blt.n	800e704 <__s2b+0x78>
 800e6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	340a      	adds	r4, #10
 800e700:	2509      	movs	r5, #9
 800e702:	e7f6      	b.n	800e6f2 <__s2b+0x66>
 800e704:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e708:	4601      	mov	r1, r0
 800e70a:	3b30      	subs	r3, #48	@ 0x30
 800e70c:	220a      	movs	r2, #10
 800e70e:	4630      	mov	r0, r6
 800e710:	f7ff ff76 	bl	800e600 <__multadd>
 800e714:	e7ee      	b.n	800e6f4 <__s2b+0x68>
 800e716:	bf00      	nop
 800e718:	0800fc1d 	.word	0x0800fc1d
 800e71c:	0800fc8e 	.word	0x0800fc8e

0800e720 <__hi0bits>:
 800e720:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e724:	4603      	mov	r3, r0
 800e726:	bf36      	itet	cc
 800e728:	0403      	lslcc	r3, r0, #16
 800e72a:	2000      	movcs	r0, #0
 800e72c:	2010      	movcc	r0, #16
 800e72e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e732:	bf3c      	itt	cc
 800e734:	021b      	lslcc	r3, r3, #8
 800e736:	3008      	addcc	r0, #8
 800e738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e73c:	bf3c      	itt	cc
 800e73e:	011b      	lslcc	r3, r3, #4
 800e740:	3004      	addcc	r0, #4
 800e742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e746:	bf3c      	itt	cc
 800e748:	009b      	lslcc	r3, r3, #2
 800e74a:	3002      	addcc	r0, #2
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	db05      	blt.n	800e75c <__hi0bits+0x3c>
 800e750:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e754:	f100 0001 	add.w	r0, r0, #1
 800e758:	bf08      	it	eq
 800e75a:	2020      	moveq	r0, #32
 800e75c:	4770      	bx	lr

0800e75e <__lo0bits>:
 800e75e:	6803      	ldr	r3, [r0, #0]
 800e760:	4602      	mov	r2, r0
 800e762:	f013 0007 	ands.w	r0, r3, #7
 800e766:	d00b      	beq.n	800e780 <__lo0bits+0x22>
 800e768:	07d9      	lsls	r1, r3, #31
 800e76a:	d421      	bmi.n	800e7b0 <__lo0bits+0x52>
 800e76c:	0798      	lsls	r0, r3, #30
 800e76e:	bf49      	itett	mi
 800e770:	085b      	lsrmi	r3, r3, #1
 800e772:	089b      	lsrpl	r3, r3, #2
 800e774:	2001      	movmi	r0, #1
 800e776:	6013      	strmi	r3, [r2, #0]
 800e778:	bf5c      	itt	pl
 800e77a:	6013      	strpl	r3, [r2, #0]
 800e77c:	2002      	movpl	r0, #2
 800e77e:	4770      	bx	lr
 800e780:	b299      	uxth	r1, r3
 800e782:	b909      	cbnz	r1, 800e788 <__lo0bits+0x2a>
 800e784:	0c1b      	lsrs	r3, r3, #16
 800e786:	2010      	movs	r0, #16
 800e788:	b2d9      	uxtb	r1, r3
 800e78a:	b909      	cbnz	r1, 800e790 <__lo0bits+0x32>
 800e78c:	3008      	adds	r0, #8
 800e78e:	0a1b      	lsrs	r3, r3, #8
 800e790:	0719      	lsls	r1, r3, #28
 800e792:	bf04      	itt	eq
 800e794:	091b      	lsreq	r3, r3, #4
 800e796:	3004      	addeq	r0, #4
 800e798:	0799      	lsls	r1, r3, #30
 800e79a:	bf04      	itt	eq
 800e79c:	089b      	lsreq	r3, r3, #2
 800e79e:	3002      	addeq	r0, #2
 800e7a0:	07d9      	lsls	r1, r3, #31
 800e7a2:	d403      	bmi.n	800e7ac <__lo0bits+0x4e>
 800e7a4:	085b      	lsrs	r3, r3, #1
 800e7a6:	f100 0001 	add.w	r0, r0, #1
 800e7aa:	d003      	beq.n	800e7b4 <__lo0bits+0x56>
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	4770      	bx	lr
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	4770      	bx	lr
 800e7b4:	2020      	movs	r0, #32
 800e7b6:	4770      	bx	lr

0800e7b8 <__i2b>:
 800e7b8:	b510      	push	{r4, lr}
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	2101      	movs	r1, #1
 800e7be:	f7ff febd 	bl	800e53c <_Balloc>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	b928      	cbnz	r0, 800e7d2 <__i2b+0x1a>
 800e7c6:	4b05      	ldr	r3, [pc, #20]	@ (800e7dc <__i2b+0x24>)
 800e7c8:	4805      	ldr	r0, [pc, #20]	@ (800e7e0 <__i2b+0x28>)
 800e7ca:	f240 1145 	movw	r1, #325	@ 0x145
 800e7ce:	f000 fe1b 	bl	800f408 <__assert_func>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	6144      	str	r4, [r0, #20]
 800e7d6:	6103      	str	r3, [r0, #16]
 800e7d8:	bd10      	pop	{r4, pc}
 800e7da:	bf00      	nop
 800e7dc:	0800fc1d 	.word	0x0800fc1d
 800e7e0:	0800fc8e 	.word	0x0800fc8e

0800e7e4 <__multiply>:
 800e7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e8:	4614      	mov	r4, r2
 800e7ea:	690a      	ldr	r2, [r1, #16]
 800e7ec:	6923      	ldr	r3, [r4, #16]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	bfa8      	it	ge
 800e7f2:	4623      	movge	r3, r4
 800e7f4:	460f      	mov	r7, r1
 800e7f6:	bfa4      	itt	ge
 800e7f8:	460c      	movge	r4, r1
 800e7fa:	461f      	movge	r7, r3
 800e7fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e800:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e804:	68a3      	ldr	r3, [r4, #8]
 800e806:	6861      	ldr	r1, [r4, #4]
 800e808:	eb0a 0609 	add.w	r6, sl, r9
 800e80c:	42b3      	cmp	r3, r6
 800e80e:	b085      	sub	sp, #20
 800e810:	bfb8      	it	lt
 800e812:	3101      	addlt	r1, #1
 800e814:	f7ff fe92 	bl	800e53c <_Balloc>
 800e818:	b930      	cbnz	r0, 800e828 <__multiply+0x44>
 800e81a:	4602      	mov	r2, r0
 800e81c:	4b44      	ldr	r3, [pc, #272]	@ (800e930 <__multiply+0x14c>)
 800e81e:	4845      	ldr	r0, [pc, #276]	@ (800e934 <__multiply+0x150>)
 800e820:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e824:	f000 fdf0 	bl	800f408 <__assert_func>
 800e828:	f100 0514 	add.w	r5, r0, #20
 800e82c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e830:	462b      	mov	r3, r5
 800e832:	2200      	movs	r2, #0
 800e834:	4543      	cmp	r3, r8
 800e836:	d321      	bcc.n	800e87c <__multiply+0x98>
 800e838:	f107 0114 	add.w	r1, r7, #20
 800e83c:	f104 0214 	add.w	r2, r4, #20
 800e840:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e844:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e848:	9302      	str	r3, [sp, #8]
 800e84a:	1b13      	subs	r3, r2, r4
 800e84c:	3b15      	subs	r3, #21
 800e84e:	f023 0303 	bic.w	r3, r3, #3
 800e852:	3304      	adds	r3, #4
 800e854:	f104 0715 	add.w	r7, r4, #21
 800e858:	42ba      	cmp	r2, r7
 800e85a:	bf38      	it	cc
 800e85c:	2304      	movcc	r3, #4
 800e85e:	9301      	str	r3, [sp, #4]
 800e860:	9b02      	ldr	r3, [sp, #8]
 800e862:	9103      	str	r1, [sp, #12]
 800e864:	428b      	cmp	r3, r1
 800e866:	d80c      	bhi.n	800e882 <__multiply+0x9e>
 800e868:	2e00      	cmp	r6, #0
 800e86a:	dd03      	ble.n	800e874 <__multiply+0x90>
 800e86c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e870:	2b00      	cmp	r3, #0
 800e872:	d05b      	beq.n	800e92c <__multiply+0x148>
 800e874:	6106      	str	r6, [r0, #16]
 800e876:	b005      	add	sp, #20
 800e878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87c:	f843 2b04 	str.w	r2, [r3], #4
 800e880:	e7d8      	b.n	800e834 <__multiply+0x50>
 800e882:	f8b1 a000 	ldrh.w	sl, [r1]
 800e886:	f1ba 0f00 	cmp.w	sl, #0
 800e88a:	d024      	beq.n	800e8d6 <__multiply+0xf2>
 800e88c:	f104 0e14 	add.w	lr, r4, #20
 800e890:	46a9      	mov	r9, r5
 800e892:	f04f 0c00 	mov.w	ip, #0
 800e896:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e89a:	f8d9 3000 	ldr.w	r3, [r9]
 800e89e:	fa1f fb87 	uxth.w	fp, r7
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e8a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e8ac:	f8d9 7000 	ldr.w	r7, [r9]
 800e8b0:	4463      	add	r3, ip
 800e8b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e8ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e8c4:	4572      	cmp	r2, lr
 800e8c6:	f849 3b04 	str.w	r3, [r9], #4
 800e8ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8ce:	d8e2      	bhi.n	800e896 <__multiply+0xb2>
 800e8d0:	9b01      	ldr	r3, [sp, #4]
 800e8d2:	f845 c003 	str.w	ip, [r5, r3]
 800e8d6:	9b03      	ldr	r3, [sp, #12]
 800e8d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e8dc:	3104      	adds	r1, #4
 800e8de:	f1b9 0f00 	cmp.w	r9, #0
 800e8e2:	d021      	beq.n	800e928 <__multiply+0x144>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	f104 0c14 	add.w	ip, r4, #20
 800e8ea:	46ae      	mov	lr, r5
 800e8ec:	f04f 0a00 	mov.w	sl, #0
 800e8f0:	f8bc b000 	ldrh.w	fp, [ip]
 800e8f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e8f8:	fb09 770b 	mla	r7, r9, fp, r7
 800e8fc:	4457      	add	r7, sl
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e904:	f84e 3b04 	str.w	r3, [lr], #4
 800e908:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e90c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e910:	f8be 3000 	ldrh.w	r3, [lr]
 800e914:	fb09 330a 	mla	r3, r9, sl, r3
 800e918:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e91c:	4562      	cmp	r2, ip
 800e91e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e922:	d8e5      	bhi.n	800e8f0 <__multiply+0x10c>
 800e924:	9f01      	ldr	r7, [sp, #4]
 800e926:	51eb      	str	r3, [r5, r7]
 800e928:	3504      	adds	r5, #4
 800e92a:	e799      	b.n	800e860 <__multiply+0x7c>
 800e92c:	3e01      	subs	r6, #1
 800e92e:	e79b      	b.n	800e868 <__multiply+0x84>
 800e930:	0800fc1d 	.word	0x0800fc1d
 800e934:	0800fc8e 	.word	0x0800fc8e

0800e938 <__pow5mult>:
 800e938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e93c:	4615      	mov	r5, r2
 800e93e:	f012 0203 	ands.w	r2, r2, #3
 800e942:	4607      	mov	r7, r0
 800e944:	460e      	mov	r6, r1
 800e946:	d007      	beq.n	800e958 <__pow5mult+0x20>
 800e948:	4c25      	ldr	r4, [pc, #148]	@ (800e9e0 <__pow5mult+0xa8>)
 800e94a:	3a01      	subs	r2, #1
 800e94c:	2300      	movs	r3, #0
 800e94e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e952:	f7ff fe55 	bl	800e600 <__multadd>
 800e956:	4606      	mov	r6, r0
 800e958:	10ad      	asrs	r5, r5, #2
 800e95a:	d03d      	beq.n	800e9d8 <__pow5mult+0xa0>
 800e95c:	69fc      	ldr	r4, [r7, #28]
 800e95e:	b97c      	cbnz	r4, 800e980 <__pow5mult+0x48>
 800e960:	2010      	movs	r0, #16
 800e962:	f7ff fd23 	bl	800e3ac <malloc>
 800e966:	4602      	mov	r2, r0
 800e968:	61f8      	str	r0, [r7, #28]
 800e96a:	b928      	cbnz	r0, 800e978 <__pow5mult+0x40>
 800e96c:	4b1d      	ldr	r3, [pc, #116]	@ (800e9e4 <__pow5mult+0xac>)
 800e96e:	481e      	ldr	r0, [pc, #120]	@ (800e9e8 <__pow5mult+0xb0>)
 800e970:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e974:	f000 fd48 	bl	800f408 <__assert_func>
 800e978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e97c:	6004      	str	r4, [r0, #0]
 800e97e:	60c4      	str	r4, [r0, #12]
 800e980:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e988:	b94c      	cbnz	r4, 800e99e <__pow5mult+0x66>
 800e98a:	f240 2171 	movw	r1, #625	@ 0x271
 800e98e:	4638      	mov	r0, r7
 800e990:	f7ff ff12 	bl	800e7b8 <__i2b>
 800e994:	2300      	movs	r3, #0
 800e996:	f8c8 0008 	str.w	r0, [r8, #8]
 800e99a:	4604      	mov	r4, r0
 800e99c:	6003      	str	r3, [r0, #0]
 800e99e:	f04f 0900 	mov.w	r9, #0
 800e9a2:	07eb      	lsls	r3, r5, #31
 800e9a4:	d50a      	bpl.n	800e9bc <__pow5mult+0x84>
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	4622      	mov	r2, r4
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f7ff ff1a 	bl	800e7e4 <__multiply>
 800e9b0:	4631      	mov	r1, r6
 800e9b2:	4680      	mov	r8, r0
 800e9b4:	4638      	mov	r0, r7
 800e9b6:	f7ff fe01 	bl	800e5bc <_Bfree>
 800e9ba:	4646      	mov	r6, r8
 800e9bc:	106d      	asrs	r5, r5, #1
 800e9be:	d00b      	beq.n	800e9d8 <__pow5mult+0xa0>
 800e9c0:	6820      	ldr	r0, [r4, #0]
 800e9c2:	b938      	cbnz	r0, 800e9d4 <__pow5mult+0x9c>
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4638      	mov	r0, r7
 800e9ca:	f7ff ff0b 	bl	800e7e4 <__multiply>
 800e9ce:	6020      	str	r0, [r4, #0]
 800e9d0:	f8c0 9000 	str.w	r9, [r0]
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	e7e4      	b.n	800e9a2 <__pow5mult+0x6a>
 800e9d8:	4630      	mov	r0, r6
 800e9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9de:	bf00      	nop
 800e9e0:	0800fce8 	.word	0x0800fce8
 800e9e4:	0800fbae 	.word	0x0800fbae
 800e9e8:	0800fc8e 	.word	0x0800fc8e

0800e9ec <__lshift>:
 800e9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	6849      	ldr	r1, [r1, #4]
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9fa:	68a3      	ldr	r3, [r4, #8]
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	4691      	mov	r9, r2
 800ea00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea04:	f108 0601 	add.w	r6, r8, #1
 800ea08:	42b3      	cmp	r3, r6
 800ea0a:	db0b      	blt.n	800ea24 <__lshift+0x38>
 800ea0c:	4638      	mov	r0, r7
 800ea0e:	f7ff fd95 	bl	800e53c <_Balloc>
 800ea12:	4605      	mov	r5, r0
 800ea14:	b948      	cbnz	r0, 800ea2a <__lshift+0x3e>
 800ea16:	4602      	mov	r2, r0
 800ea18:	4b28      	ldr	r3, [pc, #160]	@ (800eabc <__lshift+0xd0>)
 800ea1a:	4829      	ldr	r0, [pc, #164]	@ (800eac0 <__lshift+0xd4>)
 800ea1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ea20:	f000 fcf2 	bl	800f408 <__assert_func>
 800ea24:	3101      	adds	r1, #1
 800ea26:	005b      	lsls	r3, r3, #1
 800ea28:	e7ee      	b.n	800ea08 <__lshift+0x1c>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	f100 0114 	add.w	r1, r0, #20
 800ea30:	f100 0210 	add.w	r2, r0, #16
 800ea34:	4618      	mov	r0, r3
 800ea36:	4553      	cmp	r3, sl
 800ea38:	db33      	blt.n	800eaa2 <__lshift+0xb6>
 800ea3a:	6920      	ldr	r0, [r4, #16]
 800ea3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea40:	f104 0314 	add.w	r3, r4, #20
 800ea44:	f019 091f 	ands.w	r9, r9, #31
 800ea48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea50:	d02b      	beq.n	800eaaa <__lshift+0xbe>
 800ea52:	f1c9 0e20 	rsb	lr, r9, #32
 800ea56:	468a      	mov	sl, r1
 800ea58:	2200      	movs	r2, #0
 800ea5a:	6818      	ldr	r0, [r3, #0]
 800ea5c:	fa00 f009 	lsl.w	r0, r0, r9
 800ea60:	4310      	orrs	r0, r2
 800ea62:	f84a 0b04 	str.w	r0, [sl], #4
 800ea66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea6a:	459c      	cmp	ip, r3
 800ea6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea70:	d8f3      	bhi.n	800ea5a <__lshift+0x6e>
 800ea72:	ebac 0304 	sub.w	r3, ip, r4
 800ea76:	3b15      	subs	r3, #21
 800ea78:	f023 0303 	bic.w	r3, r3, #3
 800ea7c:	3304      	adds	r3, #4
 800ea7e:	f104 0015 	add.w	r0, r4, #21
 800ea82:	4584      	cmp	ip, r0
 800ea84:	bf38      	it	cc
 800ea86:	2304      	movcc	r3, #4
 800ea88:	50ca      	str	r2, [r1, r3]
 800ea8a:	b10a      	cbz	r2, 800ea90 <__lshift+0xa4>
 800ea8c:	f108 0602 	add.w	r6, r8, #2
 800ea90:	3e01      	subs	r6, #1
 800ea92:	4638      	mov	r0, r7
 800ea94:	612e      	str	r6, [r5, #16]
 800ea96:	4621      	mov	r1, r4
 800ea98:	f7ff fd90 	bl	800e5bc <_Bfree>
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa2:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	e7c5      	b.n	800ea36 <__lshift+0x4a>
 800eaaa:	3904      	subs	r1, #4
 800eaac:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab0:	f841 2f04 	str.w	r2, [r1, #4]!
 800eab4:	459c      	cmp	ip, r3
 800eab6:	d8f9      	bhi.n	800eaac <__lshift+0xc0>
 800eab8:	e7ea      	b.n	800ea90 <__lshift+0xa4>
 800eaba:	bf00      	nop
 800eabc:	0800fc1d 	.word	0x0800fc1d
 800eac0:	0800fc8e 	.word	0x0800fc8e

0800eac4 <__mcmp>:
 800eac4:	690a      	ldr	r2, [r1, #16]
 800eac6:	4603      	mov	r3, r0
 800eac8:	6900      	ldr	r0, [r0, #16]
 800eaca:	1a80      	subs	r0, r0, r2
 800eacc:	b530      	push	{r4, r5, lr}
 800eace:	d10e      	bne.n	800eaee <__mcmp+0x2a>
 800ead0:	3314      	adds	r3, #20
 800ead2:	3114      	adds	r1, #20
 800ead4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ead8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eadc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eae0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eae4:	4295      	cmp	r5, r2
 800eae6:	d003      	beq.n	800eaf0 <__mcmp+0x2c>
 800eae8:	d205      	bcs.n	800eaf6 <__mcmp+0x32>
 800eaea:	f04f 30ff 	mov.w	r0, #4294967295
 800eaee:	bd30      	pop	{r4, r5, pc}
 800eaf0:	42a3      	cmp	r3, r4
 800eaf2:	d3f3      	bcc.n	800eadc <__mcmp+0x18>
 800eaf4:	e7fb      	b.n	800eaee <__mcmp+0x2a>
 800eaf6:	2001      	movs	r0, #1
 800eaf8:	e7f9      	b.n	800eaee <__mcmp+0x2a>
	...

0800eafc <__mdiff>:
 800eafc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	4689      	mov	r9, r1
 800eb02:	4606      	mov	r6, r0
 800eb04:	4611      	mov	r1, r2
 800eb06:	4648      	mov	r0, r9
 800eb08:	4614      	mov	r4, r2
 800eb0a:	f7ff ffdb 	bl	800eac4 <__mcmp>
 800eb0e:	1e05      	subs	r5, r0, #0
 800eb10:	d112      	bne.n	800eb38 <__mdiff+0x3c>
 800eb12:	4629      	mov	r1, r5
 800eb14:	4630      	mov	r0, r6
 800eb16:	f7ff fd11 	bl	800e53c <_Balloc>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	b928      	cbnz	r0, 800eb2a <__mdiff+0x2e>
 800eb1e:	4b3f      	ldr	r3, [pc, #252]	@ (800ec1c <__mdiff+0x120>)
 800eb20:	f240 2137 	movw	r1, #567	@ 0x237
 800eb24:	483e      	ldr	r0, [pc, #248]	@ (800ec20 <__mdiff+0x124>)
 800eb26:	f000 fc6f 	bl	800f408 <__assert_func>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb30:	4610      	mov	r0, r2
 800eb32:	b003      	add	sp, #12
 800eb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb38:	bfbc      	itt	lt
 800eb3a:	464b      	movlt	r3, r9
 800eb3c:	46a1      	movlt	r9, r4
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb44:	bfba      	itte	lt
 800eb46:	461c      	movlt	r4, r3
 800eb48:	2501      	movlt	r5, #1
 800eb4a:	2500      	movge	r5, #0
 800eb4c:	f7ff fcf6 	bl	800e53c <_Balloc>
 800eb50:	4602      	mov	r2, r0
 800eb52:	b918      	cbnz	r0, 800eb5c <__mdiff+0x60>
 800eb54:	4b31      	ldr	r3, [pc, #196]	@ (800ec1c <__mdiff+0x120>)
 800eb56:	f240 2145 	movw	r1, #581	@ 0x245
 800eb5a:	e7e3      	b.n	800eb24 <__mdiff+0x28>
 800eb5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb60:	6926      	ldr	r6, [r4, #16]
 800eb62:	60c5      	str	r5, [r0, #12]
 800eb64:	f109 0310 	add.w	r3, r9, #16
 800eb68:	f109 0514 	add.w	r5, r9, #20
 800eb6c:	f104 0e14 	add.w	lr, r4, #20
 800eb70:	f100 0b14 	add.w	fp, r0, #20
 800eb74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb7c:	9301      	str	r3, [sp, #4]
 800eb7e:	46d9      	mov	r9, fp
 800eb80:	f04f 0c00 	mov.w	ip, #0
 800eb84:	9b01      	ldr	r3, [sp, #4]
 800eb86:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb8e:	9301      	str	r3, [sp, #4]
 800eb90:	fa1f f38a 	uxth.w	r3, sl
 800eb94:	4619      	mov	r1, r3
 800eb96:	b283      	uxth	r3, r0
 800eb98:	1acb      	subs	r3, r1, r3
 800eb9a:	0c00      	lsrs	r0, r0, #16
 800eb9c:	4463      	add	r3, ip
 800eb9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eba2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ebac:	4576      	cmp	r6, lr
 800ebae:	f849 3b04 	str.w	r3, [r9], #4
 800ebb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebb6:	d8e5      	bhi.n	800eb84 <__mdiff+0x88>
 800ebb8:	1b33      	subs	r3, r6, r4
 800ebba:	3b15      	subs	r3, #21
 800ebbc:	f023 0303 	bic.w	r3, r3, #3
 800ebc0:	3415      	adds	r4, #21
 800ebc2:	3304      	adds	r3, #4
 800ebc4:	42a6      	cmp	r6, r4
 800ebc6:	bf38      	it	cc
 800ebc8:	2304      	movcc	r3, #4
 800ebca:	441d      	add	r5, r3
 800ebcc:	445b      	add	r3, fp
 800ebce:	461e      	mov	r6, r3
 800ebd0:	462c      	mov	r4, r5
 800ebd2:	4544      	cmp	r4, r8
 800ebd4:	d30e      	bcc.n	800ebf4 <__mdiff+0xf8>
 800ebd6:	f108 0103 	add.w	r1, r8, #3
 800ebda:	1b49      	subs	r1, r1, r5
 800ebdc:	f021 0103 	bic.w	r1, r1, #3
 800ebe0:	3d03      	subs	r5, #3
 800ebe2:	45a8      	cmp	r8, r5
 800ebe4:	bf38      	it	cc
 800ebe6:	2100      	movcc	r1, #0
 800ebe8:	440b      	add	r3, r1
 800ebea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebee:	b191      	cbz	r1, 800ec16 <__mdiff+0x11a>
 800ebf0:	6117      	str	r7, [r2, #16]
 800ebf2:	e79d      	b.n	800eb30 <__mdiff+0x34>
 800ebf4:	f854 1b04 	ldr.w	r1, [r4], #4
 800ebf8:	46e6      	mov	lr, ip
 800ebfa:	0c08      	lsrs	r0, r1, #16
 800ebfc:	fa1c fc81 	uxtah	ip, ip, r1
 800ec00:	4471      	add	r1, lr
 800ec02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ec06:	b289      	uxth	r1, r1
 800ec08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ec0c:	f846 1b04 	str.w	r1, [r6], #4
 800ec10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec14:	e7dd      	b.n	800ebd2 <__mdiff+0xd6>
 800ec16:	3f01      	subs	r7, #1
 800ec18:	e7e7      	b.n	800ebea <__mdiff+0xee>
 800ec1a:	bf00      	nop
 800ec1c:	0800fc1d 	.word	0x0800fc1d
 800ec20:	0800fc8e 	.word	0x0800fc8e

0800ec24 <__ulp>:
 800ec24:	b082      	sub	sp, #8
 800ec26:	ed8d 0b00 	vstr	d0, [sp]
 800ec2a:	9a01      	ldr	r2, [sp, #4]
 800ec2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec6c <__ulp+0x48>)
 800ec2e:	4013      	ands	r3, r2
 800ec30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	dc08      	bgt.n	800ec4a <__ulp+0x26>
 800ec38:	425b      	negs	r3, r3
 800ec3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ec3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec42:	da04      	bge.n	800ec4e <__ulp+0x2a>
 800ec44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec48:	4113      	asrs	r3, r2
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	e008      	b.n	800ec60 <__ulp+0x3c>
 800ec4e:	f1a2 0314 	sub.w	r3, r2, #20
 800ec52:	2b1e      	cmp	r3, #30
 800ec54:	bfda      	itte	le
 800ec56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ec5a:	40da      	lsrle	r2, r3
 800ec5c:	2201      	movgt	r2, #1
 800ec5e:	2300      	movs	r3, #0
 800ec60:	4619      	mov	r1, r3
 800ec62:	4610      	mov	r0, r2
 800ec64:	ec41 0b10 	vmov	d0, r0, r1
 800ec68:	b002      	add	sp, #8
 800ec6a:	4770      	bx	lr
 800ec6c:	7ff00000 	.word	0x7ff00000

0800ec70 <__b2d>:
 800ec70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec74:	6906      	ldr	r6, [r0, #16]
 800ec76:	f100 0814 	add.w	r8, r0, #20
 800ec7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec7e:	1f37      	subs	r7, r6, #4
 800ec80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec84:	4610      	mov	r0, r2
 800ec86:	f7ff fd4b 	bl	800e720 <__hi0bits>
 800ec8a:	f1c0 0320 	rsb	r3, r0, #32
 800ec8e:	280a      	cmp	r0, #10
 800ec90:	600b      	str	r3, [r1, #0]
 800ec92:	491b      	ldr	r1, [pc, #108]	@ (800ed00 <__b2d+0x90>)
 800ec94:	dc15      	bgt.n	800ecc2 <__b2d+0x52>
 800ec96:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec9a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec9e:	45b8      	cmp	r8, r7
 800eca0:	ea43 0501 	orr.w	r5, r3, r1
 800eca4:	bf34      	ite	cc
 800eca6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecaa:	2300      	movcs	r3, #0
 800ecac:	3015      	adds	r0, #21
 800ecae:	fa02 f000 	lsl.w	r0, r2, r0
 800ecb2:	fa23 f30c 	lsr.w	r3, r3, ip
 800ecb6:	4303      	orrs	r3, r0
 800ecb8:	461c      	mov	r4, r3
 800ecba:	ec45 4b10 	vmov	d0, r4, r5
 800ecbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc2:	45b8      	cmp	r8, r7
 800ecc4:	bf3a      	itte	cc
 800ecc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecca:	f1a6 0708 	subcc.w	r7, r6, #8
 800ecce:	2300      	movcs	r3, #0
 800ecd0:	380b      	subs	r0, #11
 800ecd2:	d012      	beq.n	800ecfa <__b2d+0x8a>
 800ecd4:	f1c0 0120 	rsb	r1, r0, #32
 800ecd8:	fa23 f401 	lsr.w	r4, r3, r1
 800ecdc:	4082      	lsls	r2, r0
 800ecde:	4322      	orrs	r2, r4
 800ece0:	4547      	cmp	r7, r8
 800ece2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ece6:	bf8c      	ite	hi
 800ece8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ecec:	2200      	movls	r2, #0
 800ecee:	4083      	lsls	r3, r0
 800ecf0:	40ca      	lsrs	r2, r1
 800ecf2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	e7de      	b.n	800ecb8 <__b2d+0x48>
 800ecfa:	ea42 0501 	orr.w	r5, r2, r1
 800ecfe:	e7db      	b.n	800ecb8 <__b2d+0x48>
 800ed00:	3ff00000 	.word	0x3ff00000

0800ed04 <__d2b>:
 800ed04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed08:	460f      	mov	r7, r1
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	ec59 8b10 	vmov	r8, r9, d0
 800ed10:	4616      	mov	r6, r2
 800ed12:	f7ff fc13 	bl	800e53c <_Balloc>
 800ed16:	4604      	mov	r4, r0
 800ed18:	b930      	cbnz	r0, 800ed28 <__d2b+0x24>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	4b23      	ldr	r3, [pc, #140]	@ (800edac <__d2b+0xa8>)
 800ed1e:	4824      	ldr	r0, [pc, #144]	@ (800edb0 <__d2b+0xac>)
 800ed20:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed24:	f000 fb70 	bl	800f408 <__assert_func>
 800ed28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed30:	b10d      	cbz	r5, 800ed36 <__d2b+0x32>
 800ed32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	f1b8 0300 	subs.w	r3, r8, #0
 800ed3c:	d023      	beq.n	800ed86 <__d2b+0x82>
 800ed3e:	4668      	mov	r0, sp
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	f7ff fd0c 	bl	800e75e <__lo0bits>
 800ed46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed4a:	b1d0      	cbz	r0, 800ed82 <__d2b+0x7e>
 800ed4c:	f1c0 0320 	rsb	r3, r0, #32
 800ed50:	fa02 f303 	lsl.w	r3, r2, r3
 800ed54:	430b      	orrs	r3, r1
 800ed56:	40c2      	lsrs	r2, r0
 800ed58:	6163      	str	r3, [r4, #20]
 800ed5a:	9201      	str	r2, [sp, #4]
 800ed5c:	9b01      	ldr	r3, [sp, #4]
 800ed5e:	61a3      	str	r3, [r4, #24]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bf0c      	ite	eq
 800ed64:	2201      	moveq	r2, #1
 800ed66:	2202      	movne	r2, #2
 800ed68:	6122      	str	r2, [r4, #16]
 800ed6a:	b1a5      	cbz	r5, 800ed96 <__d2b+0x92>
 800ed6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed70:	4405      	add	r5, r0
 800ed72:	603d      	str	r5, [r7, #0]
 800ed74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed78:	6030      	str	r0, [r6, #0]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	b003      	add	sp, #12
 800ed7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed82:	6161      	str	r1, [r4, #20]
 800ed84:	e7ea      	b.n	800ed5c <__d2b+0x58>
 800ed86:	a801      	add	r0, sp, #4
 800ed88:	f7ff fce9 	bl	800e75e <__lo0bits>
 800ed8c:	9b01      	ldr	r3, [sp, #4]
 800ed8e:	6163      	str	r3, [r4, #20]
 800ed90:	3020      	adds	r0, #32
 800ed92:	2201      	movs	r2, #1
 800ed94:	e7e8      	b.n	800ed68 <__d2b+0x64>
 800ed96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed9e:	6038      	str	r0, [r7, #0]
 800eda0:	6918      	ldr	r0, [r3, #16]
 800eda2:	f7ff fcbd 	bl	800e720 <__hi0bits>
 800eda6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edaa:	e7e5      	b.n	800ed78 <__d2b+0x74>
 800edac:	0800fc1d 	.word	0x0800fc1d
 800edb0:	0800fc8e 	.word	0x0800fc8e

0800edb4 <__ratio>:
 800edb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb8:	4688      	mov	r8, r1
 800edba:	4669      	mov	r1, sp
 800edbc:	4681      	mov	r9, r0
 800edbe:	f7ff ff57 	bl	800ec70 <__b2d>
 800edc2:	a901      	add	r1, sp, #4
 800edc4:	4640      	mov	r0, r8
 800edc6:	ec55 4b10 	vmov	r4, r5, d0
 800edca:	f7ff ff51 	bl	800ec70 <__b2d>
 800edce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800edd2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800edd6:	1ad2      	subs	r2, r2, r3
 800edd8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800eddc:	1a5b      	subs	r3, r3, r1
 800edde:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ede2:	ec57 6b10 	vmov	r6, r7, d0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	bfd6      	itet	le
 800edea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800edee:	462a      	movgt	r2, r5
 800edf0:	463a      	movle	r2, r7
 800edf2:	46ab      	mov	fp, r5
 800edf4:	46a2      	mov	sl, r4
 800edf6:	bfce      	itee	gt
 800edf8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800edfc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ee00:	ee00 3a90 	vmovle	s1, r3
 800ee04:	ec4b ab17 	vmov	d7, sl, fp
 800ee08:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ee0c:	b003      	add	sp, #12
 800ee0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee12 <__copybits>:
 800ee12:	3901      	subs	r1, #1
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	1149      	asrs	r1, r1, #5
 800ee18:	6914      	ldr	r4, [r2, #16]
 800ee1a:	3101      	adds	r1, #1
 800ee1c:	f102 0314 	add.w	r3, r2, #20
 800ee20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee28:	1f05      	subs	r5, r0, #4
 800ee2a:	42a3      	cmp	r3, r4
 800ee2c:	d30c      	bcc.n	800ee48 <__copybits+0x36>
 800ee2e:	1aa3      	subs	r3, r4, r2
 800ee30:	3b11      	subs	r3, #17
 800ee32:	f023 0303 	bic.w	r3, r3, #3
 800ee36:	3211      	adds	r2, #17
 800ee38:	42a2      	cmp	r2, r4
 800ee3a:	bf88      	it	hi
 800ee3c:	2300      	movhi	r3, #0
 800ee3e:	4418      	add	r0, r3
 800ee40:	2300      	movs	r3, #0
 800ee42:	4288      	cmp	r0, r1
 800ee44:	d305      	bcc.n	800ee52 <__copybits+0x40>
 800ee46:	bd70      	pop	{r4, r5, r6, pc}
 800ee48:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee4c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee50:	e7eb      	b.n	800ee2a <__copybits+0x18>
 800ee52:	f840 3b04 	str.w	r3, [r0], #4
 800ee56:	e7f4      	b.n	800ee42 <__copybits+0x30>

0800ee58 <__any_on>:
 800ee58:	f100 0214 	add.w	r2, r0, #20
 800ee5c:	6900      	ldr	r0, [r0, #16]
 800ee5e:	114b      	asrs	r3, r1, #5
 800ee60:	4298      	cmp	r0, r3
 800ee62:	b510      	push	{r4, lr}
 800ee64:	db11      	blt.n	800ee8a <__any_on+0x32>
 800ee66:	dd0a      	ble.n	800ee7e <__any_on+0x26>
 800ee68:	f011 011f 	ands.w	r1, r1, #31
 800ee6c:	d007      	beq.n	800ee7e <__any_on+0x26>
 800ee6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee72:	fa24 f001 	lsr.w	r0, r4, r1
 800ee76:	fa00 f101 	lsl.w	r1, r0, r1
 800ee7a:	428c      	cmp	r4, r1
 800ee7c:	d10b      	bne.n	800ee96 <__any_on+0x3e>
 800ee7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d803      	bhi.n	800ee8e <__any_on+0x36>
 800ee86:	2000      	movs	r0, #0
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	e7f7      	b.n	800ee7e <__any_on+0x26>
 800ee8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee92:	2900      	cmp	r1, #0
 800ee94:	d0f5      	beq.n	800ee82 <__any_on+0x2a>
 800ee96:	2001      	movs	r0, #1
 800ee98:	e7f6      	b.n	800ee88 <__any_on+0x30>
	...

0800ee9c <_strtol_l.constprop.0>:
 800ee9c:	2b24      	cmp	r3, #36	@ 0x24
 800ee9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea2:	4686      	mov	lr, r0
 800eea4:	4690      	mov	r8, r2
 800eea6:	d801      	bhi.n	800eeac <_strtol_l.constprop.0+0x10>
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d106      	bne.n	800eeba <_strtol_l.constprop.0+0x1e>
 800eeac:	f7fe f8ce 	bl	800d04c <__errno>
 800eeb0:	2316      	movs	r3, #22
 800eeb2:	6003      	str	r3, [r0, #0]
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeba:	4834      	ldr	r0, [pc, #208]	@ (800ef8c <_strtol_l.constprop.0+0xf0>)
 800eebc:	460d      	mov	r5, r1
 800eebe:	462a      	mov	r2, r5
 800eec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eec4:	5d06      	ldrb	r6, [r0, r4]
 800eec6:	f016 0608 	ands.w	r6, r6, #8
 800eeca:	d1f8      	bne.n	800eebe <_strtol_l.constprop.0+0x22>
 800eecc:	2c2d      	cmp	r4, #45	@ 0x2d
 800eece:	d12d      	bne.n	800ef2c <_strtol_l.constprop.0+0x90>
 800eed0:	782c      	ldrb	r4, [r5, #0]
 800eed2:	2601      	movs	r6, #1
 800eed4:	1c95      	adds	r5, r2, #2
 800eed6:	f033 0210 	bics.w	r2, r3, #16
 800eeda:	d109      	bne.n	800eef0 <_strtol_l.constprop.0+0x54>
 800eedc:	2c30      	cmp	r4, #48	@ 0x30
 800eede:	d12a      	bne.n	800ef36 <_strtol_l.constprop.0+0x9a>
 800eee0:	782a      	ldrb	r2, [r5, #0]
 800eee2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eee6:	2a58      	cmp	r2, #88	@ 0x58
 800eee8:	d125      	bne.n	800ef36 <_strtol_l.constprop.0+0x9a>
 800eeea:	786c      	ldrb	r4, [r5, #1]
 800eeec:	2310      	movs	r3, #16
 800eeee:	3502      	adds	r5, #2
 800eef0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eef4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eef8:	2200      	movs	r2, #0
 800eefa:	fbbc f9f3 	udiv	r9, ip, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef08:	2f09      	cmp	r7, #9
 800ef0a:	d81b      	bhi.n	800ef44 <_strtol_l.constprop.0+0xa8>
 800ef0c:	463c      	mov	r4, r7
 800ef0e:	42a3      	cmp	r3, r4
 800ef10:	dd27      	ble.n	800ef62 <_strtol_l.constprop.0+0xc6>
 800ef12:	1c57      	adds	r7, r2, #1
 800ef14:	d007      	beq.n	800ef26 <_strtol_l.constprop.0+0x8a>
 800ef16:	4581      	cmp	r9, r0
 800ef18:	d320      	bcc.n	800ef5c <_strtol_l.constprop.0+0xc0>
 800ef1a:	d101      	bne.n	800ef20 <_strtol_l.constprop.0+0x84>
 800ef1c:	45a2      	cmp	sl, r4
 800ef1e:	db1d      	blt.n	800ef5c <_strtol_l.constprop.0+0xc0>
 800ef20:	fb00 4003 	mla	r0, r0, r3, r4
 800ef24:	2201      	movs	r2, #1
 800ef26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef2a:	e7eb      	b.n	800ef04 <_strtol_l.constprop.0+0x68>
 800ef2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef2e:	bf04      	itt	eq
 800ef30:	782c      	ldrbeq	r4, [r5, #0]
 800ef32:	1c95      	addeq	r5, r2, #2
 800ef34:	e7cf      	b.n	800eed6 <_strtol_l.constprop.0+0x3a>
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d1da      	bne.n	800eef0 <_strtol_l.constprop.0+0x54>
 800ef3a:	2c30      	cmp	r4, #48	@ 0x30
 800ef3c:	bf0c      	ite	eq
 800ef3e:	2308      	moveq	r3, #8
 800ef40:	230a      	movne	r3, #10
 800ef42:	e7d5      	b.n	800eef0 <_strtol_l.constprop.0+0x54>
 800ef44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ef48:	2f19      	cmp	r7, #25
 800ef4a:	d801      	bhi.n	800ef50 <_strtol_l.constprop.0+0xb4>
 800ef4c:	3c37      	subs	r4, #55	@ 0x37
 800ef4e:	e7de      	b.n	800ef0e <_strtol_l.constprop.0+0x72>
 800ef50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ef54:	2f19      	cmp	r7, #25
 800ef56:	d804      	bhi.n	800ef62 <_strtol_l.constprop.0+0xc6>
 800ef58:	3c57      	subs	r4, #87	@ 0x57
 800ef5a:	e7d8      	b.n	800ef0e <_strtol_l.constprop.0+0x72>
 800ef5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef60:	e7e1      	b.n	800ef26 <_strtol_l.constprop.0+0x8a>
 800ef62:	1c53      	adds	r3, r2, #1
 800ef64:	d108      	bne.n	800ef78 <_strtol_l.constprop.0+0xdc>
 800ef66:	2322      	movs	r3, #34	@ 0x22
 800ef68:	f8ce 3000 	str.w	r3, [lr]
 800ef6c:	4660      	mov	r0, ip
 800ef6e:	f1b8 0f00 	cmp.w	r8, #0
 800ef72:	d0a0      	beq.n	800eeb6 <_strtol_l.constprop.0+0x1a>
 800ef74:	1e69      	subs	r1, r5, #1
 800ef76:	e006      	b.n	800ef86 <_strtol_l.constprop.0+0xea>
 800ef78:	b106      	cbz	r6, 800ef7c <_strtol_l.constprop.0+0xe0>
 800ef7a:	4240      	negs	r0, r0
 800ef7c:	f1b8 0f00 	cmp.w	r8, #0
 800ef80:	d099      	beq.n	800eeb6 <_strtol_l.constprop.0+0x1a>
 800ef82:	2a00      	cmp	r2, #0
 800ef84:	d1f6      	bne.n	800ef74 <_strtol_l.constprop.0+0xd8>
 800ef86:	f8c8 1000 	str.w	r1, [r8]
 800ef8a:	e794      	b.n	800eeb6 <_strtol_l.constprop.0+0x1a>
 800ef8c:	0800fde9 	.word	0x0800fde9

0800ef90 <_strtol_r>:
 800ef90:	f7ff bf84 	b.w	800ee9c <_strtol_l.constprop.0>

0800ef94 <__ascii_wctomb>:
 800ef94:	4603      	mov	r3, r0
 800ef96:	4608      	mov	r0, r1
 800ef98:	b141      	cbz	r1, 800efac <__ascii_wctomb+0x18>
 800ef9a:	2aff      	cmp	r2, #255	@ 0xff
 800ef9c:	d904      	bls.n	800efa8 <__ascii_wctomb+0x14>
 800ef9e:	228a      	movs	r2, #138	@ 0x8a
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295
 800efa6:	4770      	bx	lr
 800efa8:	700a      	strb	r2, [r1, #0]
 800efaa:	2001      	movs	r0, #1
 800efac:	4770      	bx	lr

0800efae <__ssputs_r>:
 800efae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efb2:	688e      	ldr	r6, [r1, #8]
 800efb4:	461f      	mov	r7, r3
 800efb6:	42be      	cmp	r6, r7
 800efb8:	680b      	ldr	r3, [r1, #0]
 800efba:	4682      	mov	sl, r0
 800efbc:	460c      	mov	r4, r1
 800efbe:	4690      	mov	r8, r2
 800efc0:	d82d      	bhi.n	800f01e <__ssputs_r+0x70>
 800efc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efc6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800efca:	d026      	beq.n	800f01a <__ssputs_r+0x6c>
 800efcc:	6965      	ldr	r5, [r4, #20]
 800efce:	6909      	ldr	r1, [r1, #16]
 800efd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efd4:	eba3 0901 	sub.w	r9, r3, r1
 800efd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efdc:	1c7b      	adds	r3, r7, #1
 800efde:	444b      	add	r3, r9
 800efe0:	106d      	asrs	r5, r5, #1
 800efe2:	429d      	cmp	r5, r3
 800efe4:	bf38      	it	cc
 800efe6:	461d      	movcc	r5, r3
 800efe8:	0553      	lsls	r3, r2, #21
 800efea:	d527      	bpl.n	800f03c <__ssputs_r+0x8e>
 800efec:	4629      	mov	r1, r5
 800efee:	f7ff fa07 	bl	800e400 <_malloc_r>
 800eff2:	4606      	mov	r6, r0
 800eff4:	b360      	cbz	r0, 800f050 <__ssputs_r+0xa2>
 800eff6:	6921      	ldr	r1, [r4, #16]
 800eff8:	464a      	mov	r2, r9
 800effa:	f7fe f854 	bl	800d0a6 <memcpy>
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f008:	81a3      	strh	r3, [r4, #12]
 800f00a:	6126      	str	r6, [r4, #16]
 800f00c:	6165      	str	r5, [r4, #20]
 800f00e:	444e      	add	r6, r9
 800f010:	eba5 0509 	sub.w	r5, r5, r9
 800f014:	6026      	str	r6, [r4, #0]
 800f016:	60a5      	str	r5, [r4, #8]
 800f018:	463e      	mov	r6, r7
 800f01a:	42be      	cmp	r6, r7
 800f01c:	d900      	bls.n	800f020 <__ssputs_r+0x72>
 800f01e:	463e      	mov	r6, r7
 800f020:	6820      	ldr	r0, [r4, #0]
 800f022:	4632      	mov	r2, r6
 800f024:	4641      	mov	r1, r8
 800f026:	f000 f9c5 	bl	800f3b4 <memmove>
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	1b9b      	subs	r3, r3, r6
 800f02e:	60a3      	str	r3, [r4, #8]
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	4433      	add	r3, r6
 800f034:	6023      	str	r3, [r4, #0]
 800f036:	2000      	movs	r0, #0
 800f038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03c:	462a      	mov	r2, r5
 800f03e:	f000 fa15 	bl	800f46c <_realloc_r>
 800f042:	4606      	mov	r6, r0
 800f044:	2800      	cmp	r0, #0
 800f046:	d1e0      	bne.n	800f00a <__ssputs_r+0x5c>
 800f048:	6921      	ldr	r1, [r4, #16]
 800f04a:	4650      	mov	r0, sl
 800f04c:	f7fe fe2a 	bl	800dca4 <_free_r>
 800f050:	230c      	movs	r3, #12
 800f052:	f8ca 3000 	str.w	r3, [sl]
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f05c:	81a3      	strh	r3, [r4, #12]
 800f05e:	f04f 30ff 	mov.w	r0, #4294967295
 800f062:	e7e9      	b.n	800f038 <__ssputs_r+0x8a>

0800f064 <_svfiprintf_r>:
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	4698      	mov	r8, r3
 800f06a:	898b      	ldrh	r3, [r1, #12]
 800f06c:	061b      	lsls	r3, r3, #24
 800f06e:	b09d      	sub	sp, #116	@ 0x74
 800f070:	4607      	mov	r7, r0
 800f072:	460d      	mov	r5, r1
 800f074:	4614      	mov	r4, r2
 800f076:	d510      	bpl.n	800f09a <_svfiprintf_r+0x36>
 800f078:	690b      	ldr	r3, [r1, #16]
 800f07a:	b973      	cbnz	r3, 800f09a <_svfiprintf_r+0x36>
 800f07c:	2140      	movs	r1, #64	@ 0x40
 800f07e:	f7ff f9bf 	bl	800e400 <_malloc_r>
 800f082:	6028      	str	r0, [r5, #0]
 800f084:	6128      	str	r0, [r5, #16]
 800f086:	b930      	cbnz	r0, 800f096 <_svfiprintf_r+0x32>
 800f088:	230c      	movs	r3, #12
 800f08a:	603b      	str	r3, [r7, #0]
 800f08c:	f04f 30ff 	mov.w	r0, #4294967295
 800f090:	b01d      	add	sp, #116	@ 0x74
 800f092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f096:	2340      	movs	r3, #64	@ 0x40
 800f098:	616b      	str	r3, [r5, #20]
 800f09a:	2300      	movs	r3, #0
 800f09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f09e:	2320      	movs	r3, #32
 800f0a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0a8:	2330      	movs	r3, #48	@ 0x30
 800f0aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f248 <_svfiprintf_r+0x1e4>
 800f0ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0b2:	f04f 0901 	mov.w	r9, #1
 800f0b6:	4623      	mov	r3, r4
 800f0b8:	469a      	mov	sl, r3
 800f0ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0be:	b10a      	cbz	r2, 800f0c4 <_svfiprintf_r+0x60>
 800f0c0:	2a25      	cmp	r2, #37	@ 0x25
 800f0c2:	d1f9      	bne.n	800f0b8 <_svfiprintf_r+0x54>
 800f0c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f0c8:	d00b      	beq.n	800f0e2 <_svfiprintf_r+0x7e>
 800f0ca:	465b      	mov	r3, fp
 800f0cc:	4622      	mov	r2, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	f7ff ff6c 	bl	800efae <__ssputs_r>
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	f000 80a7 	beq.w	800f22a <_svfiprintf_r+0x1c6>
 800f0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0de:	445a      	add	r2, fp
 800f0e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f000 809f 	beq.w	800f22a <_svfiprintf_r+0x1c6>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0f6:	f10a 0a01 	add.w	sl, sl, #1
 800f0fa:	9304      	str	r3, [sp, #16]
 800f0fc:	9307      	str	r3, [sp, #28]
 800f0fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f102:	931a      	str	r3, [sp, #104]	@ 0x68
 800f104:	4654      	mov	r4, sl
 800f106:	2205      	movs	r2, #5
 800f108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10c:	484e      	ldr	r0, [pc, #312]	@ (800f248 <_svfiprintf_r+0x1e4>)
 800f10e:	f7f1 f8e7 	bl	80002e0 <memchr>
 800f112:	9a04      	ldr	r2, [sp, #16]
 800f114:	b9d8      	cbnz	r0, 800f14e <_svfiprintf_r+0xea>
 800f116:	06d0      	lsls	r0, r2, #27
 800f118:	bf44      	itt	mi
 800f11a:	2320      	movmi	r3, #32
 800f11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f120:	0711      	lsls	r1, r2, #28
 800f122:	bf44      	itt	mi
 800f124:	232b      	movmi	r3, #43	@ 0x2b
 800f126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f12a:	f89a 3000 	ldrb.w	r3, [sl]
 800f12e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f130:	d015      	beq.n	800f15e <_svfiprintf_r+0xfa>
 800f132:	9a07      	ldr	r2, [sp, #28]
 800f134:	4654      	mov	r4, sl
 800f136:	2000      	movs	r0, #0
 800f138:	f04f 0c0a 	mov.w	ip, #10
 800f13c:	4621      	mov	r1, r4
 800f13e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f142:	3b30      	subs	r3, #48	@ 0x30
 800f144:	2b09      	cmp	r3, #9
 800f146:	d94b      	bls.n	800f1e0 <_svfiprintf_r+0x17c>
 800f148:	b1b0      	cbz	r0, 800f178 <_svfiprintf_r+0x114>
 800f14a:	9207      	str	r2, [sp, #28]
 800f14c:	e014      	b.n	800f178 <_svfiprintf_r+0x114>
 800f14e:	eba0 0308 	sub.w	r3, r0, r8
 800f152:	fa09 f303 	lsl.w	r3, r9, r3
 800f156:	4313      	orrs	r3, r2
 800f158:	9304      	str	r3, [sp, #16]
 800f15a:	46a2      	mov	sl, r4
 800f15c:	e7d2      	b.n	800f104 <_svfiprintf_r+0xa0>
 800f15e:	9b03      	ldr	r3, [sp, #12]
 800f160:	1d19      	adds	r1, r3, #4
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	9103      	str	r1, [sp, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfbb      	ittet	lt
 800f16a:	425b      	neglt	r3, r3
 800f16c:	f042 0202 	orrlt.w	r2, r2, #2
 800f170:	9307      	strge	r3, [sp, #28]
 800f172:	9307      	strlt	r3, [sp, #28]
 800f174:	bfb8      	it	lt
 800f176:	9204      	strlt	r2, [sp, #16]
 800f178:	7823      	ldrb	r3, [r4, #0]
 800f17a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f17c:	d10a      	bne.n	800f194 <_svfiprintf_r+0x130>
 800f17e:	7863      	ldrb	r3, [r4, #1]
 800f180:	2b2a      	cmp	r3, #42	@ 0x2a
 800f182:	d132      	bne.n	800f1ea <_svfiprintf_r+0x186>
 800f184:	9b03      	ldr	r3, [sp, #12]
 800f186:	1d1a      	adds	r2, r3, #4
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	9203      	str	r2, [sp, #12]
 800f18c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f190:	3402      	adds	r4, #2
 800f192:	9305      	str	r3, [sp, #20]
 800f194:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f258 <_svfiprintf_r+0x1f4>
 800f198:	7821      	ldrb	r1, [r4, #0]
 800f19a:	2203      	movs	r2, #3
 800f19c:	4650      	mov	r0, sl
 800f19e:	f7f1 f89f 	bl	80002e0 <memchr>
 800f1a2:	b138      	cbz	r0, 800f1b4 <_svfiprintf_r+0x150>
 800f1a4:	9b04      	ldr	r3, [sp, #16]
 800f1a6:	eba0 000a 	sub.w	r0, r0, sl
 800f1aa:	2240      	movs	r2, #64	@ 0x40
 800f1ac:	4082      	lsls	r2, r0
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	3401      	adds	r4, #1
 800f1b2:	9304      	str	r3, [sp, #16]
 800f1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1b8:	4824      	ldr	r0, [pc, #144]	@ (800f24c <_svfiprintf_r+0x1e8>)
 800f1ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1be:	2206      	movs	r2, #6
 800f1c0:	f7f1 f88e 	bl	80002e0 <memchr>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d036      	beq.n	800f236 <_svfiprintf_r+0x1d2>
 800f1c8:	4b21      	ldr	r3, [pc, #132]	@ (800f250 <_svfiprintf_r+0x1ec>)
 800f1ca:	bb1b      	cbnz	r3, 800f214 <_svfiprintf_r+0x1b0>
 800f1cc:	9b03      	ldr	r3, [sp, #12]
 800f1ce:	3307      	adds	r3, #7
 800f1d0:	f023 0307 	bic.w	r3, r3, #7
 800f1d4:	3308      	adds	r3, #8
 800f1d6:	9303      	str	r3, [sp, #12]
 800f1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1da:	4433      	add	r3, r6
 800f1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1de:	e76a      	b.n	800f0b6 <_svfiprintf_r+0x52>
 800f1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1e4:	460c      	mov	r4, r1
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	e7a8      	b.n	800f13c <_svfiprintf_r+0xd8>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	3401      	adds	r4, #1
 800f1ee:	9305      	str	r3, [sp, #20]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	f04f 0c0a 	mov.w	ip, #10
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1fc:	3a30      	subs	r2, #48	@ 0x30
 800f1fe:	2a09      	cmp	r2, #9
 800f200:	d903      	bls.n	800f20a <_svfiprintf_r+0x1a6>
 800f202:	2b00      	cmp	r3, #0
 800f204:	d0c6      	beq.n	800f194 <_svfiprintf_r+0x130>
 800f206:	9105      	str	r1, [sp, #20]
 800f208:	e7c4      	b.n	800f194 <_svfiprintf_r+0x130>
 800f20a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f20e:	4604      	mov	r4, r0
 800f210:	2301      	movs	r3, #1
 800f212:	e7f0      	b.n	800f1f6 <_svfiprintf_r+0x192>
 800f214:	ab03      	add	r3, sp, #12
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	462a      	mov	r2, r5
 800f21a:	4b0e      	ldr	r3, [pc, #56]	@ (800f254 <_svfiprintf_r+0x1f0>)
 800f21c:	a904      	add	r1, sp, #16
 800f21e:	4638      	mov	r0, r7
 800f220:	f7fc ffa2 	bl	800c168 <_printf_float>
 800f224:	1c42      	adds	r2, r0, #1
 800f226:	4606      	mov	r6, r0
 800f228:	d1d6      	bne.n	800f1d8 <_svfiprintf_r+0x174>
 800f22a:	89ab      	ldrh	r3, [r5, #12]
 800f22c:	065b      	lsls	r3, r3, #25
 800f22e:	f53f af2d 	bmi.w	800f08c <_svfiprintf_r+0x28>
 800f232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f234:	e72c      	b.n	800f090 <_svfiprintf_r+0x2c>
 800f236:	ab03      	add	r3, sp, #12
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	462a      	mov	r2, r5
 800f23c:	4b05      	ldr	r3, [pc, #20]	@ (800f254 <_svfiprintf_r+0x1f0>)
 800f23e:	a904      	add	r1, sp, #16
 800f240:	4638      	mov	r0, r7
 800f242:	f7fd fa19 	bl	800c678 <_printf_i>
 800f246:	e7ed      	b.n	800f224 <_svfiprintf_r+0x1c0>
 800f248:	0800fee9 	.word	0x0800fee9
 800f24c:	0800fef3 	.word	0x0800fef3
 800f250:	0800c169 	.word	0x0800c169
 800f254:	0800efaf 	.word	0x0800efaf
 800f258:	0800feef 	.word	0x0800feef

0800f25c <__sflush_r>:
 800f25c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f264:	0716      	lsls	r6, r2, #28
 800f266:	4605      	mov	r5, r0
 800f268:	460c      	mov	r4, r1
 800f26a:	d454      	bmi.n	800f316 <__sflush_r+0xba>
 800f26c:	684b      	ldr	r3, [r1, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	dc02      	bgt.n	800f278 <__sflush_r+0x1c>
 800f272:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f274:	2b00      	cmp	r3, #0
 800f276:	dd48      	ble.n	800f30a <__sflush_r+0xae>
 800f278:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f27a:	2e00      	cmp	r6, #0
 800f27c:	d045      	beq.n	800f30a <__sflush_r+0xae>
 800f27e:	2300      	movs	r3, #0
 800f280:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f284:	682f      	ldr	r7, [r5, #0]
 800f286:	6a21      	ldr	r1, [r4, #32]
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	d030      	beq.n	800f2ee <__sflush_r+0x92>
 800f28c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	0759      	lsls	r1, r3, #29
 800f292:	d505      	bpl.n	800f2a0 <__sflush_r+0x44>
 800f294:	6863      	ldr	r3, [r4, #4]
 800f296:	1ad2      	subs	r2, r2, r3
 800f298:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f29a:	b10b      	cbz	r3, 800f2a0 <__sflush_r+0x44>
 800f29c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f29e:	1ad2      	subs	r2, r2, r3
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2a4:	6a21      	ldr	r1, [r4, #32]
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	47b0      	blx	r6
 800f2aa:	1c43      	adds	r3, r0, #1
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	d106      	bne.n	800f2be <__sflush_r+0x62>
 800f2b0:	6829      	ldr	r1, [r5, #0]
 800f2b2:	291d      	cmp	r1, #29
 800f2b4:	d82b      	bhi.n	800f30e <__sflush_r+0xb2>
 800f2b6:	4a2a      	ldr	r2, [pc, #168]	@ (800f360 <__sflush_r+0x104>)
 800f2b8:	410a      	asrs	r2, r1
 800f2ba:	07d6      	lsls	r6, r2, #31
 800f2bc:	d427      	bmi.n	800f30e <__sflush_r+0xb2>
 800f2be:	2200      	movs	r2, #0
 800f2c0:	6062      	str	r2, [r4, #4]
 800f2c2:	04d9      	lsls	r1, r3, #19
 800f2c4:	6922      	ldr	r2, [r4, #16]
 800f2c6:	6022      	str	r2, [r4, #0]
 800f2c8:	d504      	bpl.n	800f2d4 <__sflush_r+0x78>
 800f2ca:	1c42      	adds	r2, r0, #1
 800f2cc:	d101      	bne.n	800f2d2 <__sflush_r+0x76>
 800f2ce:	682b      	ldr	r3, [r5, #0]
 800f2d0:	b903      	cbnz	r3, 800f2d4 <__sflush_r+0x78>
 800f2d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2d6:	602f      	str	r7, [r5, #0]
 800f2d8:	b1b9      	cbz	r1, 800f30a <__sflush_r+0xae>
 800f2da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2de:	4299      	cmp	r1, r3
 800f2e0:	d002      	beq.n	800f2e8 <__sflush_r+0x8c>
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f7fe fcde 	bl	800dca4 <_free_r>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2ec:	e00d      	b.n	800f30a <__sflush_r+0xae>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	47b0      	blx	r6
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	1c50      	adds	r0, r2, #1
 800f2f8:	d1c9      	bne.n	800f28e <__sflush_r+0x32>
 800f2fa:	682b      	ldr	r3, [r5, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0c6      	beq.n	800f28e <__sflush_r+0x32>
 800f300:	2b1d      	cmp	r3, #29
 800f302:	d001      	beq.n	800f308 <__sflush_r+0xac>
 800f304:	2b16      	cmp	r3, #22
 800f306:	d11e      	bne.n	800f346 <__sflush_r+0xea>
 800f308:	602f      	str	r7, [r5, #0]
 800f30a:	2000      	movs	r0, #0
 800f30c:	e022      	b.n	800f354 <__sflush_r+0xf8>
 800f30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f312:	b21b      	sxth	r3, r3
 800f314:	e01b      	b.n	800f34e <__sflush_r+0xf2>
 800f316:	690f      	ldr	r7, [r1, #16]
 800f318:	2f00      	cmp	r7, #0
 800f31a:	d0f6      	beq.n	800f30a <__sflush_r+0xae>
 800f31c:	0793      	lsls	r3, r2, #30
 800f31e:	680e      	ldr	r6, [r1, #0]
 800f320:	bf08      	it	eq
 800f322:	694b      	ldreq	r3, [r1, #20]
 800f324:	600f      	str	r7, [r1, #0]
 800f326:	bf18      	it	ne
 800f328:	2300      	movne	r3, #0
 800f32a:	eba6 0807 	sub.w	r8, r6, r7
 800f32e:	608b      	str	r3, [r1, #8]
 800f330:	f1b8 0f00 	cmp.w	r8, #0
 800f334:	dde9      	ble.n	800f30a <__sflush_r+0xae>
 800f336:	6a21      	ldr	r1, [r4, #32]
 800f338:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f33a:	4643      	mov	r3, r8
 800f33c:	463a      	mov	r2, r7
 800f33e:	4628      	mov	r0, r5
 800f340:	47b0      	blx	r6
 800f342:	2800      	cmp	r0, #0
 800f344:	dc08      	bgt.n	800f358 <__sflush_r+0xfc>
 800f346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f34a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f34e:	81a3      	strh	r3, [r4, #12]
 800f350:	f04f 30ff 	mov.w	r0, #4294967295
 800f354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f358:	4407      	add	r7, r0
 800f35a:	eba8 0800 	sub.w	r8, r8, r0
 800f35e:	e7e7      	b.n	800f330 <__sflush_r+0xd4>
 800f360:	dfbffffe 	.word	0xdfbffffe

0800f364 <_fflush_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	690b      	ldr	r3, [r1, #16]
 800f368:	4605      	mov	r5, r0
 800f36a:	460c      	mov	r4, r1
 800f36c:	b913      	cbnz	r3, 800f374 <_fflush_r+0x10>
 800f36e:	2500      	movs	r5, #0
 800f370:	4628      	mov	r0, r5
 800f372:	bd38      	pop	{r3, r4, r5, pc}
 800f374:	b118      	cbz	r0, 800f37e <_fflush_r+0x1a>
 800f376:	6a03      	ldr	r3, [r0, #32]
 800f378:	b90b      	cbnz	r3, 800f37e <_fflush_r+0x1a>
 800f37a:	f7fd fd35 	bl	800cde8 <__sinit>
 800f37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0f3      	beq.n	800f36e <_fflush_r+0xa>
 800f386:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f388:	07d0      	lsls	r0, r2, #31
 800f38a:	d404      	bmi.n	800f396 <_fflush_r+0x32>
 800f38c:	0599      	lsls	r1, r3, #22
 800f38e:	d402      	bmi.n	800f396 <_fflush_r+0x32>
 800f390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f392:	f7fd fe86 	bl	800d0a2 <__retarget_lock_acquire_recursive>
 800f396:	4628      	mov	r0, r5
 800f398:	4621      	mov	r1, r4
 800f39a:	f7ff ff5f 	bl	800f25c <__sflush_r>
 800f39e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3a0:	07da      	lsls	r2, r3, #31
 800f3a2:	4605      	mov	r5, r0
 800f3a4:	d4e4      	bmi.n	800f370 <_fflush_r+0xc>
 800f3a6:	89a3      	ldrh	r3, [r4, #12]
 800f3a8:	059b      	lsls	r3, r3, #22
 800f3aa:	d4e1      	bmi.n	800f370 <_fflush_r+0xc>
 800f3ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3ae:	f7fd fe79 	bl	800d0a4 <__retarget_lock_release_recursive>
 800f3b2:	e7dd      	b.n	800f370 <_fflush_r+0xc>

0800f3b4 <memmove>:
 800f3b4:	4288      	cmp	r0, r1
 800f3b6:	b510      	push	{r4, lr}
 800f3b8:	eb01 0402 	add.w	r4, r1, r2
 800f3bc:	d902      	bls.n	800f3c4 <memmove+0x10>
 800f3be:	4284      	cmp	r4, r0
 800f3c0:	4623      	mov	r3, r4
 800f3c2:	d807      	bhi.n	800f3d4 <memmove+0x20>
 800f3c4:	1e43      	subs	r3, r0, #1
 800f3c6:	42a1      	cmp	r1, r4
 800f3c8:	d008      	beq.n	800f3dc <memmove+0x28>
 800f3ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3d2:	e7f8      	b.n	800f3c6 <memmove+0x12>
 800f3d4:	4402      	add	r2, r0
 800f3d6:	4601      	mov	r1, r0
 800f3d8:	428a      	cmp	r2, r1
 800f3da:	d100      	bne.n	800f3de <memmove+0x2a>
 800f3dc:	bd10      	pop	{r4, pc}
 800f3de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3e6:	e7f7      	b.n	800f3d8 <memmove+0x24>

0800f3e8 <_sbrk_r>:
 800f3e8:	b538      	push	{r3, r4, r5, lr}
 800f3ea:	4d06      	ldr	r5, [pc, #24]	@ (800f404 <_sbrk_r+0x1c>)
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	4608      	mov	r0, r1
 800f3f2:	602b      	str	r3, [r5, #0]
 800f3f4:	f7f2 fa76 	bl	80018e4 <_sbrk>
 800f3f8:	1c43      	adds	r3, r0, #1
 800f3fa:	d102      	bne.n	800f402 <_sbrk_r+0x1a>
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	b103      	cbz	r3, 800f402 <_sbrk_r+0x1a>
 800f400:	6023      	str	r3, [r4, #0]
 800f402:	bd38      	pop	{r3, r4, r5, pc}
 800f404:	24000518 	.word	0x24000518

0800f408 <__assert_func>:
 800f408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f40a:	4614      	mov	r4, r2
 800f40c:	461a      	mov	r2, r3
 800f40e:	4b09      	ldr	r3, [pc, #36]	@ (800f434 <__assert_func+0x2c>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4605      	mov	r5, r0
 800f414:	68d8      	ldr	r0, [r3, #12]
 800f416:	b954      	cbnz	r4, 800f42e <__assert_func+0x26>
 800f418:	4b07      	ldr	r3, [pc, #28]	@ (800f438 <__assert_func+0x30>)
 800f41a:	461c      	mov	r4, r3
 800f41c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f420:	9100      	str	r1, [sp, #0]
 800f422:	462b      	mov	r3, r5
 800f424:	4905      	ldr	r1, [pc, #20]	@ (800f43c <__assert_func+0x34>)
 800f426:	f000 f84f 	bl	800f4c8 <fiprintf>
 800f42a:	f000 f85f 	bl	800f4ec <abort>
 800f42e:	4b04      	ldr	r3, [pc, #16]	@ (800f440 <__assert_func+0x38>)
 800f430:	e7f4      	b.n	800f41c <__assert_func+0x14>
 800f432:	bf00      	nop
 800f434:	24000194 	.word	0x24000194
 800f438:	0800ff35 	.word	0x0800ff35
 800f43c:	0800ff07 	.word	0x0800ff07
 800f440:	0800fefa 	.word	0x0800fefa

0800f444 <_calloc_r>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	fba1 5402 	umull	r5, r4, r1, r2
 800f44a:	b93c      	cbnz	r4, 800f45c <_calloc_r+0x18>
 800f44c:	4629      	mov	r1, r5
 800f44e:	f7fe ffd7 	bl	800e400 <_malloc_r>
 800f452:	4606      	mov	r6, r0
 800f454:	b928      	cbnz	r0, 800f462 <_calloc_r+0x1e>
 800f456:	2600      	movs	r6, #0
 800f458:	4630      	mov	r0, r6
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
 800f45c:	220c      	movs	r2, #12
 800f45e:	6002      	str	r2, [r0, #0]
 800f460:	e7f9      	b.n	800f456 <_calloc_r+0x12>
 800f462:	462a      	mov	r2, r5
 800f464:	4621      	mov	r1, r4
 800f466:	f7fd fd8c 	bl	800cf82 <memset>
 800f46a:	e7f5      	b.n	800f458 <_calloc_r+0x14>

0800f46c <_realloc_r>:
 800f46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f470:	4680      	mov	r8, r0
 800f472:	4615      	mov	r5, r2
 800f474:	460c      	mov	r4, r1
 800f476:	b921      	cbnz	r1, 800f482 <_realloc_r+0x16>
 800f478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	4611      	mov	r1, r2
 800f47e:	f7fe bfbf 	b.w	800e400 <_malloc_r>
 800f482:	b92a      	cbnz	r2, 800f490 <_realloc_r+0x24>
 800f484:	f7fe fc0e 	bl	800dca4 <_free_r>
 800f488:	2400      	movs	r4, #0
 800f48a:	4620      	mov	r0, r4
 800f48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f490:	f000 f833 	bl	800f4fa <_malloc_usable_size_r>
 800f494:	4285      	cmp	r5, r0
 800f496:	4606      	mov	r6, r0
 800f498:	d802      	bhi.n	800f4a0 <_realloc_r+0x34>
 800f49a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f49e:	d8f4      	bhi.n	800f48a <_realloc_r+0x1e>
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	f7fe ffac 	bl	800e400 <_malloc_r>
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d0ec      	beq.n	800f488 <_realloc_r+0x1c>
 800f4ae:	42b5      	cmp	r5, r6
 800f4b0:	462a      	mov	r2, r5
 800f4b2:	4621      	mov	r1, r4
 800f4b4:	bf28      	it	cs
 800f4b6:	4632      	movcs	r2, r6
 800f4b8:	f7fd fdf5 	bl	800d0a6 <memcpy>
 800f4bc:	4621      	mov	r1, r4
 800f4be:	4640      	mov	r0, r8
 800f4c0:	f7fe fbf0 	bl	800dca4 <_free_r>
 800f4c4:	463c      	mov	r4, r7
 800f4c6:	e7e0      	b.n	800f48a <_realloc_r+0x1e>

0800f4c8 <fiprintf>:
 800f4c8:	b40e      	push	{r1, r2, r3}
 800f4ca:	b503      	push	{r0, r1, lr}
 800f4cc:	4601      	mov	r1, r0
 800f4ce:	ab03      	add	r3, sp, #12
 800f4d0:	4805      	ldr	r0, [pc, #20]	@ (800f4e8 <fiprintf+0x20>)
 800f4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d6:	6800      	ldr	r0, [r0, #0]
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	f000 f83f 	bl	800f55c <_vfiprintf_r>
 800f4de:	b002      	add	sp, #8
 800f4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	4770      	bx	lr
 800f4e8:	24000194 	.word	0x24000194

0800f4ec <abort>:
 800f4ec:	b508      	push	{r3, lr}
 800f4ee:	2006      	movs	r0, #6
 800f4f0:	f000 fa08 	bl	800f904 <raise>
 800f4f4:	2001      	movs	r0, #1
 800f4f6:	f7f2 f97d 	bl	80017f4 <_exit>

0800f4fa <_malloc_usable_size_r>:
 800f4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4fe:	1f18      	subs	r0, r3, #4
 800f500:	2b00      	cmp	r3, #0
 800f502:	bfbc      	itt	lt
 800f504:	580b      	ldrlt	r3, [r1, r0]
 800f506:	18c0      	addlt	r0, r0, r3
 800f508:	4770      	bx	lr

0800f50a <__sfputc_r>:
 800f50a:	6893      	ldr	r3, [r2, #8]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	2b00      	cmp	r3, #0
 800f510:	b410      	push	{r4}
 800f512:	6093      	str	r3, [r2, #8]
 800f514:	da08      	bge.n	800f528 <__sfputc_r+0x1e>
 800f516:	6994      	ldr	r4, [r2, #24]
 800f518:	42a3      	cmp	r3, r4
 800f51a:	db01      	blt.n	800f520 <__sfputc_r+0x16>
 800f51c:	290a      	cmp	r1, #10
 800f51e:	d103      	bne.n	800f528 <__sfputc_r+0x1e>
 800f520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f524:	f000 b932 	b.w	800f78c <__swbuf_r>
 800f528:	6813      	ldr	r3, [r2, #0]
 800f52a:	1c58      	adds	r0, r3, #1
 800f52c:	6010      	str	r0, [r2, #0]
 800f52e:	7019      	strb	r1, [r3, #0]
 800f530:	4608      	mov	r0, r1
 800f532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <__sfputs_r>:
 800f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53a:	4606      	mov	r6, r0
 800f53c:	460f      	mov	r7, r1
 800f53e:	4614      	mov	r4, r2
 800f540:	18d5      	adds	r5, r2, r3
 800f542:	42ac      	cmp	r4, r5
 800f544:	d101      	bne.n	800f54a <__sfputs_r+0x12>
 800f546:	2000      	movs	r0, #0
 800f548:	e007      	b.n	800f55a <__sfputs_r+0x22>
 800f54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f54e:	463a      	mov	r2, r7
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff ffda 	bl	800f50a <__sfputc_r>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d1f3      	bne.n	800f542 <__sfputs_r+0xa>
 800f55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f55c <_vfiprintf_r>:
 800f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	460d      	mov	r5, r1
 800f562:	b09d      	sub	sp, #116	@ 0x74
 800f564:	4614      	mov	r4, r2
 800f566:	4698      	mov	r8, r3
 800f568:	4606      	mov	r6, r0
 800f56a:	b118      	cbz	r0, 800f574 <_vfiprintf_r+0x18>
 800f56c:	6a03      	ldr	r3, [r0, #32]
 800f56e:	b90b      	cbnz	r3, 800f574 <_vfiprintf_r+0x18>
 800f570:	f7fd fc3a 	bl	800cde8 <__sinit>
 800f574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f576:	07d9      	lsls	r1, r3, #31
 800f578:	d405      	bmi.n	800f586 <_vfiprintf_r+0x2a>
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	059a      	lsls	r2, r3, #22
 800f57e:	d402      	bmi.n	800f586 <_vfiprintf_r+0x2a>
 800f580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f582:	f7fd fd8e 	bl	800d0a2 <__retarget_lock_acquire_recursive>
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	071b      	lsls	r3, r3, #28
 800f58a:	d501      	bpl.n	800f590 <_vfiprintf_r+0x34>
 800f58c:	692b      	ldr	r3, [r5, #16]
 800f58e:	b99b      	cbnz	r3, 800f5b8 <_vfiprintf_r+0x5c>
 800f590:	4629      	mov	r1, r5
 800f592:	4630      	mov	r0, r6
 800f594:	f000 f938 	bl	800f808 <__swsetup_r>
 800f598:	b170      	cbz	r0, 800f5b8 <_vfiprintf_r+0x5c>
 800f59a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f59c:	07dc      	lsls	r4, r3, #31
 800f59e:	d504      	bpl.n	800f5aa <_vfiprintf_r+0x4e>
 800f5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a4:	b01d      	add	sp, #116	@ 0x74
 800f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5aa:	89ab      	ldrh	r3, [r5, #12]
 800f5ac:	0598      	lsls	r0, r3, #22
 800f5ae:	d4f7      	bmi.n	800f5a0 <_vfiprintf_r+0x44>
 800f5b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5b2:	f7fd fd77 	bl	800d0a4 <__retarget_lock_release_recursive>
 800f5b6:	e7f3      	b.n	800f5a0 <_vfiprintf_r+0x44>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5bc:	2320      	movs	r3, #32
 800f5be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c6:	2330      	movs	r3, #48	@ 0x30
 800f5c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f778 <_vfiprintf_r+0x21c>
 800f5cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5d0:	f04f 0901 	mov.w	r9, #1
 800f5d4:	4623      	mov	r3, r4
 800f5d6:	469a      	mov	sl, r3
 800f5d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5dc:	b10a      	cbz	r2, 800f5e2 <_vfiprintf_r+0x86>
 800f5de:	2a25      	cmp	r2, #37	@ 0x25
 800f5e0:	d1f9      	bne.n	800f5d6 <_vfiprintf_r+0x7a>
 800f5e2:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e6:	d00b      	beq.n	800f600 <_vfiprintf_r+0xa4>
 800f5e8:	465b      	mov	r3, fp
 800f5ea:	4622      	mov	r2, r4
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f7ff ffa2 	bl	800f538 <__sfputs_r>
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	f000 80a7 	beq.w	800f748 <_vfiprintf_r+0x1ec>
 800f5fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5fc:	445a      	add	r2, fp
 800f5fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800f600:	f89a 3000 	ldrb.w	r3, [sl]
 800f604:	2b00      	cmp	r3, #0
 800f606:	f000 809f 	beq.w	800f748 <_vfiprintf_r+0x1ec>
 800f60a:	2300      	movs	r3, #0
 800f60c:	f04f 32ff 	mov.w	r2, #4294967295
 800f610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f614:	f10a 0a01 	add.w	sl, sl, #1
 800f618:	9304      	str	r3, [sp, #16]
 800f61a:	9307      	str	r3, [sp, #28]
 800f61c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f620:	931a      	str	r3, [sp, #104]	@ 0x68
 800f622:	4654      	mov	r4, sl
 800f624:	2205      	movs	r2, #5
 800f626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f62a:	4853      	ldr	r0, [pc, #332]	@ (800f778 <_vfiprintf_r+0x21c>)
 800f62c:	f7f0 fe58 	bl	80002e0 <memchr>
 800f630:	9a04      	ldr	r2, [sp, #16]
 800f632:	b9d8      	cbnz	r0, 800f66c <_vfiprintf_r+0x110>
 800f634:	06d1      	lsls	r1, r2, #27
 800f636:	bf44      	itt	mi
 800f638:	2320      	movmi	r3, #32
 800f63a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f63e:	0713      	lsls	r3, r2, #28
 800f640:	bf44      	itt	mi
 800f642:	232b      	movmi	r3, #43	@ 0x2b
 800f644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f648:	f89a 3000 	ldrb.w	r3, [sl]
 800f64c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f64e:	d015      	beq.n	800f67c <_vfiprintf_r+0x120>
 800f650:	9a07      	ldr	r2, [sp, #28]
 800f652:	4654      	mov	r4, sl
 800f654:	2000      	movs	r0, #0
 800f656:	f04f 0c0a 	mov.w	ip, #10
 800f65a:	4621      	mov	r1, r4
 800f65c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f660:	3b30      	subs	r3, #48	@ 0x30
 800f662:	2b09      	cmp	r3, #9
 800f664:	d94b      	bls.n	800f6fe <_vfiprintf_r+0x1a2>
 800f666:	b1b0      	cbz	r0, 800f696 <_vfiprintf_r+0x13a>
 800f668:	9207      	str	r2, [sp, #28]
 800f66a:	e014      	b.n	800f696 <_vfiprintf_r+0x13a>
 800f66c:	eba0 0308 	sub.w	r3, r0, r8
 800f670:	fa09 f303 	lsl.w	r3, r9, r3
 800f674:	4313      	orrs	r3, r2
 800f676:	9304      	str	r3, [sp, #16]
 800f678:	46a2      	mov	sl, r4
 800f67a:	e7d2      	b.n	800f622 <_vfiprintf_r+0xc6>
 800f67c:	9b03      	ldr	r3, [sp, #12]
 800f67e:	1d19      	adds	r1, r3, #4
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	9103      	str	r1, [sp, #12]
 800f684:	2b00      	cmp	r3, #0
 800f686:	bfbb      	ittet	lt
 800f688:	425b      	neglt	r3, r3
 800f68a:	f042 0202 	orrlt.w	r2, r2, #2
 800f68e:	9307      	strge	r3, [sp, #28]
 800f690:	9307      	strlt	r3, [sp, #28]
 800f692:	bfb8      	it	lt
 800f694:	9204      	strlt	r2, [sp, #16]
 800f696:	7823      	ldrb	r3, [r4, #0]
 800f698:	2b2e      	cmp	r3, #46	@ 0x2e
 800f69a:	d10a      	bne.n	800f6b2 <_vfiprintf_r+0x156>
 800f69c:	7863      	ldrb	r3, [r4, #1]
 800f69e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6a0:	d132      	bne.n	800f708 <_vfiprintf_r+0x1ac>
 800f6a2:	9b03      	ldr	r3, [sp, #12]
 800f6a4:	1d1a      	adds	r2, r3, #4
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	9203      	str	r2, [sp, #12]
 800f6aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6ae:	3402      	adds	r4, #2
 800f6b0:	9305      	str	r3, [sp, #20]
 800f6b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f788 <_vfiprintf_r+0x22c>
 800f6b6:	7821      	ldrb	r1, [r4, #0]
 800f6b8:	2203      	movs	r2, #3
 800f6ba:	4650      	mov	r0, sl
 800f6bc:	f7f0 fe10 	bl	80002e0 <memchr>
 800f6c0:	b138      	cbz	r0, 800f6d2 <_vfiprintf_r+0x176>
 800f6c2:	9b04      	ldr	r3, [sp, #16]
 800f6c4:	eba0 000a 	sub.w	r0, r0, sl
 800f6c8:	2240      	movs	r2, #64	@ 0x40
 800f6ca:	4082      	lsls	r2, r0
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	3401      	adds	r4, #1
 800f6d0:	9304      	str	r3, [sp, #16]
 800f6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d6:	4829      	ldr	r0, [pc, #164]	@ (800f77c <_vfiprintf_r+0x220>)
 800f6d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6dc:	2206      	movs	r2, #6
 800f6de:	f7f0 fdff 	bl	80002e0 <memchr>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d03f      	beq.n	800f766 <_vfiprintf_r+0x20a>
 800f6e6:	4b26      	ldr	r3, [pc, #152]	@ (800f780 <_vfiprintf_r+0x224>)
 800f6e8:	bb1b      	cbnz	r3, 800f732 <_vfiprintf_r+0x1d6>
 800f6ea:	9b03      	ldr	r3, [sp, #12]
 800f6ec:	3307      	adds	r3, #7
 800f6ee:	f023 0307 	bic.w	r3, r3, #7
 800f6f2:	3308      	adds	r3, #8
 800f6f4:	9303      	str	r3, [sp, #12]
 800f6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f8:	443b      	add	r3, r7
 800f6fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6fc:	e76a      	b.n	800f5d4 <_vfiprintf_r+0x78>
 800f6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f702:	460c      	mov	r4, r1
 800f704:	2001      	movs	r0, #1
 800f706:	e7a8      	b.n	800f65a <_vfiprintf_r+0xfe>
 800f708:	2300      	movs	r3, #0
 800f70a:	3401      	adds	r4, #1
 800f70c:	9305      	str	r3, [sp, #20]
 800f70e:	4619      	mov	r1, r3
 800f710:	f04f 0c0a 	mov.w	ip, #10
 800f714:	4620      	mov	r0, r4
 800f716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f71a:	3a30      	subs	r2, #48	@ 0x30
 800f71c:	2a09      	cmp	r2, #9
 800f71e:	d903      	bls.n	800f728 <_vfiprintf_r+0x1cc>
 800f720:	2b00      	cmp	r3, #0
 800f722:	d0c6      	beq.n	800f6b2 <_vfiprintf_r+0x156>
 800f724:	9105      	str	r1, [sp, #20]
 800f726:	e7c4      	b.n	800f6b2 <_vfiprintf_r+0x156>
 800f728:	fb0c 2101 	mla	r1, ip, r1, r2
 800f72c:	4604      	mov	r4, r0
 800f72e:	2301      	movs	r3, #1
 800f730:	e7f0      	b.n	800f714 <_vfiprintf_r+0x1b8>
 800f732:	ab03      	add	r3, sp, #12
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	462a      	mov	r2, r5
 800f738:	4b12      	ldr	r3, [pc, #72]	@ (800f784 <_vfiprintf_r+0x228>)
 800f73a:	a904      	add	r1, sp, #16
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7fc fd13 	bl	800c168 <_printf_float>
 800f742:	4607      	mov	r7, r0
 800f744:	1c78      	adds	r0, r7, #1
 800f746:	d1d6      	bne.n	800f6f6 <_vfiprintf_r+0x19a>
 800f748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f74a:	07d9      	lsls	r1, r3, #31
 800f74c:	d405      	bmi.n	800f75a <_vfiprintf_r+0x1fe>
 800f74e:	89ab      	ldrh	r3, [r5, #12]
 800f750:	059a      	lsls	r2, r3, #22
 800f752:	d402      	bmi.n	800f75a <_vfiprintf_r+0x1fe>
 800f754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f756:	f7fd fca5 	bl	800d0a4 <__retarget_lock_release_recursive>
 800f75a:	89ab      	ldrh	r3, [r5, #12]
 800f75c:	065b      	lsls	r3, r3, #25
 800f75e:	f53f af1f 	bmi.w	800f5a0 <_vfiprintf_r+0x44>
 800f762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f764:	e71e      	b.n	800f5a4 <_vfiprintf_r+0x48>
 800f766:	ab03      	add	r3, sp, #12
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	462a      	mov	r2, r5
 800f76c:	4b05      	ldr	r3, [pc, #20]	@ (800f784 <_vfiprintf_r+0x228>)
 800f76e:	a904      	add	r1, sp, #16
 800f770:	4630      	mov	r0, r6
 800f772:	f7fc ff81 	bl	800c678 <_printf_i>
 800f776:	e7e4      	b.n	800f742 <_vfiprintf_r+0x1e6>
 800f778:	0800fee9 	.word	0x0800fee9
 800f77c:	0800fef3 	.word	0x0800fef3
 800f780:	0800c169 	.word	0x0800c169
 800f784:	0800f539 	.word	0x0800f539
 800f788:	0800feef 	.word	0x0800feef

0800f78c <__swbuf_r>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	460e      	mov	r6, r1
 800f790:	4614      	mov	r4, r2
 800f792:	4605      	mov	r5, r0
 800f794:	b118      	cbz	r0, 800f79e <__swbuf_r+0x12>
 800f796:	6a03      	ldr	r3, [r0, #32]
 800f798:	b90b      	cbnz	r3, 800f79e <__swbuf_r+0x12>
 800f79a:	f7fd fb25 	bl	800cde8 <__sinit>
 800f79e:	69a3      	ldr	r3, [r4, #24]
 800f7a0:	60a3      	str	r3, [r4, #8]
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	071a      	lsls	r2, r3, #28
 800f7a6:	d501      	bpl.n	800f7ac <__swbuf_r+0x20>
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	b943      	cbnz	r3, 800f7be <__swbuf_r+0x32>
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f000 f82a 	bl	800f808 <__swsetup_r>
 800f7b4:	b118      	cbz	r0, 800f7be <__swbuf_r+0x32>
 800f7b6:	f04f 37ff 	mov.w	r7, #4294967295
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	6922      	ldr	r2, [r4, #16]
 800f7c2:	1a98      	subs	r0, r3, r2
 800f7c4:	6963      	ldr	r3, [r4, #20]
 800f7c6:	b2f6      	uxtb	r6, r6
 800f7c8:	4283      	cmp	r3, r0
 800f7ca:	4637      	mov	r7, r6
 800f7cc:	dc05      	bgt.n	800f7da <__swbuf_r+0x4e>
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f7ff fdc7 	bl	800f364 <_fflush_r>
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d1ed      	bne.n	800f7b6 <__swbuf_r+0x2a>
 800f7da:	68a3      	ldr	r3, [r4, #8]
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	60a3      	str	r3, [r4, #8]
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	6022      	str	r2, [r4, #0]
 800f7e6:	701e      	strb	r6, [r3, #0]
 800f7e8:	6962      	ldr	r2, [r4, #20]
 800f7ea:	1c43      	adds	r3, r0, #1
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d004      	beq.n	800f7fa <__swbuf_r+0x6e>
 800f7f0:	89a3      	ldrh	r3, [r4, #12]
 800f7f2:	07db      	lsls	r3, r3, #31
 800f7f4:	d5e1      	bpl.n	800f7ba <__swbuf_r+0x2e>
 800f7f6:	2e0a      	cmp	r6, #10
 800f7f8:	d1df      	bne.n	800f7ba <__swbuf_r+0x2e>
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f7ff fdb1 	bl	800f364 <_fflush_r>
 800f802:	2800      	cmp	r0, #0
 800f804:	d0d9      	beq.n	800f7ba <__swbuf_r+0x2e>
 800f806:	e7d6      	b.n	800f7b6 <__swbuf_r+0x2a>

0800f808 <__swsetup_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	4b29      	ldr	r3, [pc, #164]	@ (800f8b0 <__swsetup_r+0xa8>)
 800f80c:	4605      	mov	r5, r0
 800f80e:	6818      	ldr	r0, [r3, #0]
 800f810:	460c      	mov	r4, r1
 800f812:	b118      	cbz	r0, 800f81c <__swsetup_r+0x14>
 800f814:	6a03      	ldr	r3, [r0, #32]
 800f816:	b90b      	cbnz	r3, 800f81c <__swsetup_r+0x14>
 800f818:	f7fd fae6 	bl	800cde8 <__sinit>
 800f81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f820:	0719      	lsls	r1, r3, #28
 800f822:	d422      	bmi.n	800f86a <__swsetup_r+0x62>
 800f824:	06da      	lsls	r2, r3, #27
 800f826:	d407      	bmi.n	800f838 <__swsetup_r+0x30>
 800f828:	2209      	movs	r2, #9
 800f82a:	602a      	str	r2, [r5, #0]
 800f82c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f830:	81a3      	strh	r3, [r4, #12]
 800f832:	f04f 30ff 	mov.w	r0, #4294967295
 800f836:	e033      	b.n	800f8a0 <__swsetup_r+0x98>
 800f838:	0758      	lsls	r0, r3, #29
 800f83a:	d512      	bpl.n	800f862 <__swsetup_r+0x5a>
 800f83c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f83e:	b141      	cbz	r1, 800f852 <__swsetup_r+0x4a>
 800f840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f844:	4299      	cmp	r1, r3
 800f846:	d002      	beq.n	800f84e <__swsetup_r+0x46>
 800f848:	4628      	mov	r0, r5
 800f84a:	f7fe fa2b 	bl	800dca4 <_free_r>
 800f84e:	2300      	movs	r3, #0
 800f850:	6363      	str	r3, [r4, #52]	@ 0x34
 800f852:	89a3      	ldrh	r3, [r4, #12]
 800f854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	2300      	movs	r3, #0
 800f85c:	6063      	str	r3, [r4, #4]
 800f85e:	6923      	ldr	r3, [r4, #16]
 800f860:	6023      	str	r3, [r4, #0]
 800f862:	89a3      	ldrh	r3, [r4, #12]
 800f864:	f043 0308 	orr.w	r3, r3, #8
 800f868:	81a3      	strh	r3, [r4, #12]
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	b94b      	cbnz	r3, 800f882 <__swsetup_r+0x7a>
 800f86e:	89a3      	ldrh	r3, [r4, #12]
 800f870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f878:	d003      	beq.n	800f882 <__swsetup_r+0x7a>
 800f87a:	4621      	mov	r1, r4
 800f87c:	4628      	mov	r0, r5
 800f87e:	f000 f883 	bl	800f988 <__smakebuf_r>
 800f882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f886:	f013 0201 	ands.w	r2, r3, #1
 800f88a:	d00a      	beq.n	800f8a2 <__swsetup_r+0x9a>
 800f88c:	2200      	movs	r2, #0
 800f88e:	60a2      	str	r2, [r4, #8]
 800f890:	6962      	ldr	r2, [r4, #20]
 800f892:	4252      	negs	r2, r2
 800f894:	61a2      	str	r2, [r4, #24]
 800f896:	6922      	ldr	r2, [r4, #16]
 800f898:	b942      	cbnz	r2, 800f8ac <__swsetup_r+0xa4>
 800f89a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f89e:	d1c5      	bne.n	800f82c <__swsetup_r+0x24>
 800f8a0:	bd38      	pop	{r3, r4, r5, pc}
 800f8a2:	0799      	lsls	r1, r3, #30
 800f8a4:	bf58      	it	pl
 800f8a6:	6962      	ldrpl	r2, [r4, #20]
 800f8a8:	60a2      	str	r2, [r4, #8]
 800f8aa:	e7f4      	b.n	800f896 <__swsetup_r+0x8e>
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	e7f7      	b.n	800f8a0 <__swsetup_r+0x98>
 800f8b0:	24000194 	.word	0x24000194

0800f8b4 <_raise_r>:
 800f8b4:	291f      	cmp	r1, #31
 800f8b6:	b538      	push	{r3, r4, r5, lr}
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	d904      	bls.n	800f8c8 <_raise_r+0x14>
 800f8be:	2316      	movs	r3, #22
 800f8c0:	6003      	str	r3, [r0, #0]
 800f8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f8ca:	b112      	cbz	r2, 800f8d2 <_raise_r+0x1e>
 800f8cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8d0:	b94b      	cbnz	r3, 800f8e6 <_raise_r+0x32>
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f000 f830 	bl	800f938 <_getpid_r>
 800f8d8:	4622      	mov	r2, r4
 800f8da:	4601      	mov	r1, r0
 800f8dc:	4628      	mov	r0, r5
 800f8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8e2:	f000 b817 	b.w	800f914 <_kill_r>
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	d00a      	beq.n	800f900 <_raise_r+0x4c>
 800f8ea:	1c59      	adds	r1, r3, #1
 800f8ec:	d103      	bne.n	800f8f6 <_raise_r+0x42>
 800f8ee:	2316      	movs	r3, #22
 800f8f0:	6003      	str	r3, [r0, #0]
 800f8f2:	2001      	movs	r0, #1
 800f8f4:	e7e7      	b.n	800f8c6 <_raise_r+0x12>
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	4798      	blx	r3
 800f900:	2000      	movs	r0, #0
 800f902:	e7e0      	b.n	800f8c6 <_raise_r+0x12>

0800f904 <raise>:
 800f904:	4b02      	ldr	r3, [pc, #8]	@ (800f910 <raise+0xc>)
 800f906:	4601      	mov	r1, r0
 800f908:	6818      	ldr	r0, [r3, #0]
 800f90a:	f7ff bfd3 	b.w	800f8b4 <_raise_r>
 800f90e:	bf00      	nop
 800f910:	24000194 	.word	0x24000194

0800f914 <_kill_r>:
 800f914:	b538      	push	{r3, r4, r5, lr}
 800f916:	4d07      	ldr	r5, [pc, #28]	@ (800f934 <_kill_r+0x20>)
 800f918:	2300      	movs	r3, #0
 800f91a:	4604      	mov	r4, r0
 800f91c:	4608      	mov	r0, r1
 800f91e:	4611      	mov	r1, r2
 800f920:	602b      	str	r3, [r5, #0]
 800f922:	f7f1 ff57 	bl	80017d4 <_kill>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	d102      	bne.n	800f930 <_kill_r+0x1c>
 800f92a:	682b      	ldr	r3, [r5, #0]
 800f92c:	b103      	cbz	r3, 800f930 <_kill_r+0x1c>
 800f92e:	6023      	str	r3, [r4, #0]
 800f930:	bd38      	pop	{r3, r4, r5, pc}
 800f932:	bf00      	nop
 800f934:	24000518 	.word	0x24000518

0800f938 <_getpid_r>:
 800f938:	f7f1 bf44 	b.w	80017c4 <_getpid>

0800f93c <__swhatbuf_r>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	460c      	mov	r4, r1
 800f940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f944:	2900      	cmp	r1, #0
 800f946:	b096      	sub	sp, #88	@ 0x58
 800f948:	4615      	mov	r5, r2
 800f94a:	461e      	mov	r6, r3
 800f94c:	da0d      	bge.n	800f96a <__swhatbuf_r+0x2e>
 800f94e:	89a3      	ldrh	r3, [r4, #12]
 800f950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f954:	f04f 0100 	mov.w	r1, #0
 800f958:	bf14      	ite	ne
 800f95a:	2340      	movne	r3, #64	@ 0x40
 800f95c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f960:	2000      	movs	r0, #0
 800f962:	6031      	str	r1, [r6, #0]
 800f964:	602b      	str	r3, [r5, #0]
 800f966:	b016      	add	sp, #88	@ 0x58
 800f968:	bd70      	pop	{r4, r5, r6, pc}
 800f96a:	466a      	mov	r2, sp
 800f96c:	f000 f848 	bl	800fa00 <_fstat_r>
 800f970:	2800      	cmp	r0, #0
 800f972:	dbec      	blt.n	800f94e <__swhatbuf_r+0x12>
 800f974:	9901      	ldr	r1, [sp, #4]
 800f976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f97a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f97e:	4259      	negs	r1, r3
 800f980:	4159      	adcs	r1, r3
 800f982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f986:	e7eb      	b.n	800f960 <__swhatbuf_r+0x24>

0800f988 <__smakebuf_r>:
 800f988:	898b      	ldrh	r3, [r1, #12]
 800f98a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f98c:	079d      	lsls	r5, r3, #30
 800f98e:	4606      	mov	r6, r0
 800f990:	460c      	mov	r4, r1
 800f992:	d507      	bpl.n	800f9a4 <__smakebuf_r+0x1c>
 800f994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f998:	6023      	str	r3, [r4, #0]
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	2301      	movs	r3, #1
 800f99e:	6163      	str	r3, [r4, #20]
 800f9a0:	b003      	add	sp, #12
 800f9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a4:	ab01      	add	r3, sp, #4
 800f9a6:	466a      	mov	r2, sp
 800f9a8:	f7ff ffc8 	bl	800f93c <__swhatbuf_r>
 800f9ac:	9f00      	ldr	r7, [sp, #0]
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7fe fd24 	bl	800e400 <_malloc_r>
 800f9b8:	b948      	cbnz	r0, 800f9ce <__smakebuf_r+0x46>
 800f9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9be:	059a      	lsls	r2, r3, #22
 800f9c0:	d4ee      	bmi.n	800f9a0 <__smakebuf_r+0x18>
 800f9c2:	f023 0303 	bic.w	r3, r3, #3
 800f9c6:	f043 0302 	orr.w	r3, r3, #2
 800f9ca:	81a3      	strh	r3, [r4, #12]
 800f9cc:	e7e2      	b.n	800f994 <__smakebuf_r+0xc>
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	6020      	str	r0, [r4, #0]
 800f9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9d6:	81a3      	strh	r3, [r4, #12]
 800f9d8:	9b01      	ldr	r3, [sp, #4]
 800f9da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f9de:	b15b      	cbz	r3, 800f9f8 <__smakebuf_r+0x70>
 800f9e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	f000 f81d 	bl	800fa24 <_isatty_r>
 800f9ea:	b128      	cbz	r0, 800f9f8 <__smakebuf_r+0x70>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	f023 0303 	bic.w	r3, r3, #3
 800f9f2:	f043 0301 	orr.w	r3, r3, #1
 800f9f6:	81a3      	strh	r3, [r4, #12]
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	431d      	orrs	r5, r3
 800f9fc:	81a5      	strh	r5, [r4, #12]
 800f9fe:	e7cf      	b.n	800f9a0 <__smakebuf_r+0x18>

0800fa00 <_fstat_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4d07      	ldr	r5, [pc, #28]	@ (800fa20 <_fstat_r+0x20>)
 800fa04:	2300      	movs	r3, #0
 800fa06:	4604      	mov	r4, r0
 800fa08:	4608      	mov	r0, r1
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	602b      	str	r3, [r5, #0]
 800fa0e:	f7f1 ff41 	bl	8001894 <_fstat>
 800fa12:	1c43      	adds	r3, r0, #1
 800fa14:	d102      	bne.n	800fa1c <_fstat_r+0x1c>
 800fa16:	682b      	ldr	r3, [r5, #0]
 800fa18:	b103      	cbz	r3, 800fa1c <_fstat_r+0x1c>
 800fa1a:	6023      	str	r3, [r4, #0]
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	bf00      	nop
 800fa20:	24000518 	.word	0x24000518

0800fa24 <_isatty_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	4d06      	ldr	r5, [pc, #24]	@ (800fa40 <_isatty_r+0x1c>)
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	4608      	mov	r0, r1
 800fa2e:	602b      	str	r3, [r5, #0]
 800fa30:	f7f1 ff40 	bl	80018b4 <_isatty>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d102      	bne.n	800fa3e <_isatty_r+0x1a>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	b103      	cbz	r3, 800fa3e <_isatty_r+0x1a>
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	24000518 	.word	0x24000518

0800fa44 <_init>:
 800fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa46:	bf00      	nop
 800fa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa4a:	bc08      	pop	{r3}
 800fa4c:	469e      	mov	lr, r3
 800fa4e:	4770      	bx	lr

0800fa50 <_fini>:
 800fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa52:	bf00      	nop
 800fa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa56:	bc08      	pop	{r3}
 800fa58:	469e      	mov	lr, r3
 800fa5a:	4770      	bx	lr
