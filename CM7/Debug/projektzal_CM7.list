
projektzal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800ef28  0800ef28  0000ff28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f440  0800f440  000111e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f440  0800f440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f448  0800f448  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f448  0800f448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f44c  0800f44c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  24000000  0800f450  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  240001e4  0800f634  000111e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000514  0800f634  00011514  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dab2  00000000  00000000  00011212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ed  00000000  00000000  0002ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  000324b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000111f  00000000  00000000  00033ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cd71  00000000  00000000  00034bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220fc  00000000  00000000  00071940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a1c0  00000000  00000000  00093a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021dbfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070a4  00000000  00000000  0021dc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00224ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ef0c 	.word	0x0800ef0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800ef0c 	.word	0x0800ef0c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <BMP280_Init>:
// File: bmp2.c
#include "bmp2.h"

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Configuration for control measurement register
    config[0] = 0xF4; // Address of control register
 8000b9c:	23f4      	movs	r3, #244	@ 0xf4
 8000b9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x27; // Normal mode, oversampling x1 for temperature
 8000ba0:	2327      	movs	r3, #39	@ 0x27
 8000ba2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	21ec      	movs	r1, #236	@ 0xec
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f002 fa9c 	bl	80030f0 <HAL_I2C_Master_Transmit>

    // Configuration for configuration register
    config[0] = 0xF5; // Address of configuration register
 8000bb8:	23f5      	movs	r3, #245	@ 0xf5
 8000bba:	733b      	strb	r3, [r7, #12]
    config[1] = 0xA0; // Filter x4, standby time 1000 ms
 8000bbc:	23a0      	movs	r3, #160	@ 0xa0
 8000bbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	21ec      	movs	r1, #236	@ 0xec
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f002 fa8e 	bl	80030f0 <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    uint8_t calib_raw[24];

    // Read 24 bytes of calibration data starting at register 0x88
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0x88, 1, calib_raw, 24, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2318      	movs	r3, #24
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	21ec      	movs	r1, #236	@ 0xec
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 fb8f 	bl	8003320 <HAL_I2C_Mem_Read>

    // Parse calibration data
    calib_data->dig_T1 = (uint16_t)(calib_raw[1] << 8 | calib_raw[0]);
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)(calib_raw[3] << 8 | calib_raw[2]);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)(calib_raw[5] << 8 | calib_raw[4]);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	809a      	strh	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    uint8_t temp_raw[3];
    int32_t temp_adc;
    float var1, var2, temperature;

    // Read 3 bytes of temperature data starting from register 0xFA
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0xFA, 1, temp_raw, 3, HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	22fa      	movs	r2, #250	@ 0xfa
 8000c66:	21ec      	movs	r1, #236	@ 0xec
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 fb59 	bl	8003320 <HAL_I2C_Mem_Read>

    // Combine bytes into 20-bit raw temperature value
    temp_adc = ((int32_t)(temp_raw[0] << 12)) | ((int32_t)(temp_raw[1] << 4)) | ((temp_raw[2] >> 4));
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	031a      	lsls	r2, r3, #12
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]

    // Compensate temperature using calibration data
    var1 = (((float)temp_adc) / 16384.0 - ((float)calib_data->dig_T1) / 1024.0) * ((float)calib_data->dig_T2);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c90:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d80 <BMP280_ReadTemperature+0x138>
 8000c94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ca8:	ed9f 4b37 	vldr	d4, [pc, #220]	@ 8000d88 <BMP280_ReadTemperature+0x140>
 8000cac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
    var2 = ((((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0) * (((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0)) * ((float)calib_data->dig_T3);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000ce4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf8:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000cfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 4b1f 	vldr	d4, [pc, #124]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000d16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d2a:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000d2e:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
    temperature = (var1 + var2) / 5120.0;
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <BMP280_ReadTemperature+0x158>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40d00000 	.word	0x40d00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40900000 	.word	0x40900000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	41000000 	.word	0x41000000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40c00000 	.word	0x40c00000
 8000da0:	45a00000 	.word	0x45a00000

08000da4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e50:	2332      	movs	r3, #50	@ 0x32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0x160>)
 8000e6c:	f001 fec6 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e70:	2386      	movs	r3, #134	@ 0x86
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000e8c:	f001 feb6 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x168>)
 8000eae:	f001 fea5 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000ed0:	f001 fe94 	bl	8002bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x16c>)
 8000ef2:	f001 fe83 	bl	8002bfc <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f002 f832 	bl	8002fb8 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 faf3 	bl	8001544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f003 fc2d 	bl	80047c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 faea 	bl	8001544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 fc6f 	bl	8004856 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fae1 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000200 	.word	0x24000200
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	00707cbb 	.word	0x00707cbb

08000f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	@ 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22c0      	movs	r2, #192	@ 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00a fd0e 	bl	800b9d6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <HAL_I2C_MspInit+0xe4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d155      	bne.n	8001070 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	f04f 0208 	mov.w	r2, #8
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fcc8 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f000 faad 	bl	8001544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <HAL_I2C_MspInit+0xec>)
 800102e:	f001 fde5 	bl	8002bfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	201f      	movs	r0, #31
 8001056:	f001 f82a 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800105a:	201f      	movs	r0, #31
 800105c:	f001 f841 	bl	80020e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2020      	movs	r0, #32
 8001066:	f001 f822 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800106a:	2020      	movs	r0, #32
 800106c:	f001 f839 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	37e8      	adds	r7, #232	@ 0xe8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001090:	bf00      	nop
 8001092:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <main+0x1a4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x24>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dcf4      	bgt.n	8001092 <main+0xe>
  if ( timeout < 0 )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <main+0x2e>
  {
  Error_Handler();
 80010ae:	f000 fa49 	bl	8001544 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fe83 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f8d5 	bl	8001264 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001228 <main+0x1a4>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a59      	ldr	r2, [pc, #356]	@ (8001228 <main+0x1a4>)
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b57      	ldr	r3, [pc, #348]	@ (8001228 <main+0x1a4>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 ff3f 	bl	8002f5c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 ff55 	bl	8002f90 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80010e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ea:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010ec:	bf00      	nop
 80010ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001228 <main+0x1a4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <main+0x80>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dcf4      	bgt.n	80010ee <main+0x6a>
if ( timeout < 0 )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <main+0x8a>
{
Error_Handler();
 800110a:	f000 fa1b 	bl	8001544 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff fe49 	bl	8000da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001112:	f7ff feff 	bl	8000f14 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001116:	f000 fd69 	bl	8001bec <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800111a:	f000 fc33 	bl	8001984 <MX_TIM2_Init>
  MX_TIM3_Init();
 800111e:	f000 fc7f 	bl	8001a20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1);
 8001122:	4842      	ldr	r0, [pc, #264]	@ (800122c <main+0x1a8>)
 8001124:	f7ff fd36 	bl	8000b94 <BMP280_Init>


  BMP280_ReadCalibrationData(&hi2c1, &calib_data);
 8001128:	4941      	ldr	r1, [pc, #260]	@ (8001230 <main+0x1ac>)
 800112a:	4840      	ldr	r0, [pc, #256]	@ (800122c <main+0x1a8>)
 800112c:	f7ff fd56 	bl	8000bdc <BMP280_ReadCalibrationData>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001130:	2108      	movs	r1, #8
 8001132:	4840      	ldr	r0, [pc, #256]	@ (8001234 <main+0x1b0>)
 8001134:	f006 fcee 	bl	8007b14 <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001138:	4b3e      	ldr	r3, [pc, #248]	@ (8001234 <main+0x1b0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c
  	  htim3.Init.Period = 999;
 8001140:	4b3c      	ldr	r3, [pc, #240]	@ (8001234 <main+0x1b0>)
 8001142:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim3);
 8001148:	483a      	ldr	r0, [pc, #232]	@ (8001234 <main+0x1b0>)
 800114a:	f006 fa3d 	bl	80075c8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 800114e:	4839      	ldr	r0, [pc, #228]	@ (8001234 <main+0x1b0>)
 8001150:	f006 fa92 	bl	8007678 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001154:	2108      	movs	r1, #8
 8001156:	4837      	ldr	r0, [pc, #220]	@ (8001234 <main+0x1b0>)
 8001158:	f006 fbce 	bl	80078f8 <HAL_TIM_PWM_Start>

  pid_init(&pid_controller,  kp,  ki,  kd,5000);
 800115c:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <main+0x1b4>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	4b36      	ldr	r3, [pc, #216]	@ (800123c <main+0x1b8>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <main+0x1bc>)
 800116a:	edd3 6a00 	vldr	s13, [r3]
 800116e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001172:	eeb0 1a66 	vmov.f32	s2, s13
 8001176:	eef0 0a47 	vmov.f32	s1, s14
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	4831      	ldr	r0, [pc, #196]	@ (8001244 <main+0x1c0>)
 8001180:	f000 f9e6 	bl	8001550 <pid_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8001184:	4830      	ldr	r0, [pc, #192]	@ (8001248 <main+0x1c4>)
 8001186:	f006 fae7 	bl	8007758 <HAL_TIM_Base_Start_IT>
  while (1)
  {

	  	  HAL_UART_Receive(&huart3, wejscie, 4, 10);
 800118a:	230a      	movs	r3, #10
 800118c:	2204      	movs	r2, #4
 800118e:	492f      	ldr	r1, [pc, #188]	@ (800124c <main+0x1c8>)
 8001190:	482f      	ldr	r0, [pc, #188]	@ (8001250 <main+0x1cc>)
 8001192:	f007 fe5b 	bl	8008e4c <HAL_UART_Receive>
	 	  if(strncmp("R", (char*)wejscie,1 )==0)
 8001196:	2201      	movs	r2, #1
 8001198:	492c      	ldr	r1, [pc, #176]	@ (800124c <main+0x1c8>)
 800119a:	482e      	ldr	r0, [pc, #184]	@ (8001254 <main+0x1d0>)
 800119c:	f00a fc23 	bl	800b9e6 <strncmp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f1      	bne.n	800118a <main+0x106>
	 	  {

	 		  pomoc[0]=wejscie[1];
 80011a6:	4b29      	ldr	r3, [pc, #164]	@ (800124c <main+0x1c8>)
 80011a8:	785a      	ldrb	r2, [r3, #1]
 80011aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001258 <main+0x1d4>)
 80011ac:	701a      	strb	r2, [r3, #0]
	 		  pomoc[1]=wejscie[2];
 80011ae:	4b27      	ldr	r3, [pc, #156]	@ (800124c <main+0x1c8>)
 80011b0:	789a      	ldrb	r2, [r3, #2]
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <main+0x1d4>)
 80011b4:	705a      	strb	r2, [r3, #1]
	 		  pomoc[2]=wejscie[3];
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <main+0x1c8>)
 80011b8:	78da      	ldrb	r2, [r3, #3]
 80011ba:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <main+0x1d4>)
 80011bc:	709a      	strb	r2, [r3, #2]
	 		  liczba_pom = atoi(pomoc);
 80011be:	4826      	ldr	r0, [pc, #152]	@ (8001258 <main+0x1d4>)
 80011c0:	f009 fbd0 	bl	800a964 <atoi>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <main+0x1d8>)
 80011ca:	601a      	str	r2, [r3, #0]
	 		  HAL_UART_Transmit(&huart3, "R", 1, 10);
 80011cc:	230a      	movs	r3, #10
 80011ce:	2201      	movs	r2, #1
 80011d0:	4920      	ldr	r1, [pc, #128]	@ (8001254 <main+0x1d0>)
 80011d2:	481f      	ldr	r0, [pc, #124]	@ (8001250 <main+0x1cc>)
 80011d4:	f007 fdac 	bl	8008d30 <HAL_UART_Transmit>
	 		  HAL_UART_Transmit(&huart3, pomoc, 3, 10);
 80011d8:	230a      	movs	r3, #10
 80011da:	2203      	movs	r2, #3
 80011dc:	491e      	ldr	r1, [pc, #120]	@ (8001258 <main+0x1d4>)
 80011de:	481c      	ldr	r0, [pc, #112]	@ (8001250 <main+0x1cc>)
 80011e0:	f007 fda6 	bl	8008d30 <HAL_UART_Transmit>
	 		  memcpy ( wejscie , " " , 3 ) ;
 80011e4:	2203      	movs	r2, #3
 80011e6:	491e      	ldr	r1, [pc, #120]	@ (8001260 <main+0x1dc>)
 80011e8:	4818      	ldr	r0, [pc, #96]	@ (800124c <main+0x1c8>)
 80011ea:	f00a fc86 	bl	800bafa <memcpy>

	 		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80011ee:	2108      	movs	r1, #8
 80011f0:	4810      	ldr	r0, [pc, #64]	@ (8001234 <main+0x1b0>)
 80011f2:	f006 fc8f 	bl	8007b14 <HAL_TIM_PWM_Stop>
	 		   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, liczba_pom*10);
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <main+0x1d8>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <main+0x1b0>)
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	63cb      	str	r3, [r1, #60]	@ 0x3c
	 		   htim3.Init.Period = 999;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <main+0x1b0>)
 800120a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800120e:	60da      	str	r2, [r3, #12]
	 		   HAL_TIM_Base_Init(&htim3);
 8001210:	4808      	ldr	r0, [pc, #32]	@ (8001234 <main+0x1b0>)
 8001212:	f006 f9d9 	bl	80075c8 <HAL_TIM_Base_Init>
	 		   HAL_TIM_Base_Start(&htim3);
 8001216:	4807      	ldr	r0, [pc, #28]	@ (8001234 <main+0x1b0>)
 8001218:	f006 fa2e 	bl	8007678 <HAL_TIM_Base_Start>
	 		   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800121c:	2108      	movs	r1, #8
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <main+0x1b0>)
 8001220:	f006 fb6a 	bl	80078f8 <HAL_TIM_PWM_Start>
	  	  HAL_UART_Receive(&huart3, wejscie, 4, 10);
 8001224:	e7b1      	b.n	800118a <main+0x106>
 8001226:	bf00      	nop
 8001228:	58024400 	.word	0x58024400
 800122c:	24000200 	.word	0x24000200
 8001230:	24000254 	.word	0x24000254
 8001234:	240002e4 	.word	0x240002e4
 8001238:	2400000c 	.word	0x2400000c
 800123c:	24000010 	.word	0x24000010
 8001240:	2400026c 	.word	0x2400026c
 8001244:	24000270 	.word	0x24000270
 8001248:	24000298 	.word	0x24000298
 800124c:	24000264 	.word	0x24000264
 8001250:	24000330 	.word	0x24000330
 8001254:	0800ef28 	.word	0x0800ef28
 8001258:	24000268 	.word	0x24000268
 800125c:	24000260 	.word	0x24000260
 8001260:	0800ef2c 	.word	0x0800ef2c

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b09c      	sub	sp, #112	@ 0x70
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126e:	224c      	movs	r2, #76	@ 0x4c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00a fbaf 	bl	800b9d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2220      	movs	r2, #32
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f00a fba9 	bl	800b9d6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001284:	2004      	movs	r0, #4
 8001286:	f003 fb33 	bl	80048f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <SystemClock_Config+0xcc>)
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <SystemClock_Config+0xcc>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <SystemClock_Config+0xcc>)
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <SystemClock_Config+0xd0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012ac:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <SystemClock_Config+0xd0>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <SystemClock_Config+0xd0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012c0:	bf00      	nop
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <SystemClock_Config+0xd0>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012ce:	d1f8      	bne.n	80012c2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d0:	2302      	movs	r3, #2
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d8:	2340      	movs	r3, #64	@ 0x40
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012dc:	2300      	movs	r3, #0
 80012de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fb5d 	bl	80049a4 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012f0:	f000 f928 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	233f      	movs	r3, #63	@ 0x3f
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001308:	2340      	movs	r3, #64	@ 0x40
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f003 ff9d 	bl	8005258 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001324:	f000 f90e 	bl	8001544 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3770      	adds	r7, #112	@ 0x70
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58000400 	.word	0x58000400
 8001334:	58024800 	.word	0x58024800

08001338 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0ba      	sub	sp, #232	@ 0xe8
 800133c:	af02      	add	r7, sp, #8
 800133e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001348:	f040 80da 	bne.w	8001500 <HAL_TIM_PeriodElapsedCallback+0x1c8>
  {
    // Timer interrupt triggered, perform UART transmission here
    temperature = BMP280_ReadTemperature(&hi2c1, &calib_data);
 800134c:	496e      	ldr	r1, [pc, #440]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800134e:	486f      	ldr	r0, [pc, #444]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001350:	f7ff fc7a 	bl	8000c48 <BMP280_ReadTemperature>
 8001354:	eef0 7a40 	vmov.f32	s15, s0
 8001358:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
    pid_output = pid_calculate(&pid_controller, wartosc, temperature);
 800135e:	4b6d      	ldr	r3, [pc, #436]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	eef0 0a47 	vmov.f32	s1, s14
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	4867      	ldr	r0, [pc, #412]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800137a:	f000 f90d 	bl	8001598 <pid_calculate>
 800137e:	ee07 0a90 	vmov	s15, r0
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	4b65      	ldr	r3, [pc, #404]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001388:	edc3 7a00 	vstr	s15, [r3]

    char pid[50];
    snprintf(pid, sizeof(pid), "sygnal z pid: %.2f \r\n", pid_output);
 800138c:	4b63      	ldr	r3, [pc, #396]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	ed8d 7b00 	vstr	d7, [sp]
 800139e:	4a60      	ldr	r2, [pc, #384]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80013a0:	2132      	movs	r1, #50	@ 0x32
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00a fa80 	bl	800b8a8 <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)pid, strlen(pid), HAL_MAX_DELAY);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ffe7 	bl	8000380 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f107 0108 	add.w	r1, r7, #8
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	4859      	ldr	r0, [pc, #356]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80013c0:	f007 fcb6 	bl	8008d30 <HAL_UART_Transmit>


    // Definicja zakresu PID
    int min_pid = 0; // Minimalna wartość wyjścia PID
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int max_pid = 10;  // Maksymalna wartość wyjścia PID
 80013ca:	230a      	movs	r3, #10
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

           // Skalowanie wyniku PID na zakres 0-100
    scaled_output = ((pid_output - min_pid) / (float)(max_pid - min_pid))*100.0;
 80013d0:	4b52      	ldr	r3, [pc, #328]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013e6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80013ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001528 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001404:	4b49      	ldr	r3, [pc, #292]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001406:	edc3 7a00 	vstr	s15, [r3]
     char sygnal[50];


     snprintf(sygnal, sizeof(sygnal), "sygnal sterujacy: %.2f \r\n", scaled_output);
 800140a:	4b48      	ldr	r3, [pc, #288]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001418:	ed8d 7b00 	vstr	d7, [sp]
 800141c:	4a44      	ldr	r2, [pc, #272]	@ (8001530 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800141e:	2132      	movs	r1, #50	@ 0x32
 8001420:	4618      	mov	r0, r3
 8001422:	f00a fa41 	bl	800b8a8 <sniprintf>

     HAL_UART_Transmit(&huart3, (uint8_t *)sygnal, strlen(sygnal), HAL_MAX_DELAY);
 8001426:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe ffa8 	bl	8000380 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	4839      	ldr	r0, [pc, #228]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800143e:	f007 fc77 	bl	8008d30 <HAL_UART_Transmit>

     if (scaled_output < 0.0) {
 8001442:	4b3a      	ldr	r3, [pc, #232]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	d503      	bpl.n	800145a <HAL_TIM_PeriodElapsedCallback+0x122>
         final_output = 0;
 8001452:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e016      	b.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x150>
     } else if (scaled_output > 100.0) {
 800145a:	4b34      	ldr	r3, [pc, #208]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001528 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	dd03      	ble.n	8001476 <HAL_TIM_PeriodElapsedCallback+0x13e>
         final_output = 100;
 800146e:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001470:	2264      	movs	r2, #100	@ 0x64
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e008      	b.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x150>
     } else {
         final_output = (int)scaled_output;  // rzutowanie na int
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001480:	ee17 2a90 	vmov	r2, s15
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001486:	601a      	str	r2, [r3, #0]
     }

     char ost[50];
     snprintf(ost, sizeof(ost), "sygnal finalny: %d \r\n", final_output);
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8001490:	4a29      	ldr	r2, [pc, #164]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001492:	2132      	movs	r1, #50	@ 0x32
 8001494:	f00a fa08 	bl	800b8a8 <sniprintf>

     HAL_UART_Transmit(&huart3, (uint8_t *)ost, strlen(ost), HAL_MAX_DELAY);
 8001498:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ff6f 	bl	8000380 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	481d      	ldr	r0, [pc, #116]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80014b0:	f007 fc3e 	bl	8008d30 <HAL_UART_Transmit>


           // Ustawienie wypełnienia PWM
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, final_output  * 10);
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    char uart_msg[50];
    snprintf(uart_msg, sizeof(uart_msg), "Temperature: %.2f C\r\n", temperature);
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014d6:	ed8d 7b00 	vstr	d7, [sp]
 80014da:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80014dc:	2132      	movs	r1, #50	@ 0x32
 80014de:	4618      	mov	r0, r3
 80014e0:	f00a f9e2 	bl	800b8a8 <sniprintf>

    HAL_UART_Transmit(&huart3, (uint8_t *)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80014e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ff49 	bl	8000380 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	480a      	ldr	r0, [pc, #40]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80014fc:	f007 fc18 	bl	8008d30 <HAL_UART_Transmit>

  }
}
 8001500:	bf00      	nop
 8001502:	37e0      	adds	r7, #224	@ 0xe0
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24000254 	.word	0x24000254
 800150c:	24000200 	.word	0x24000200
 8001510:	2400025c 	.word	0x2400025c
 8001514:	24000008 	.word	0x24000008
 8001518:	24000270 	.word	0x24000270
 800151c:	24000288 	.word	0x24000288
 8001520:	0800ef30 	.word	0x0800ef30
 8001524:	24000330 	.word	0x24000330
 8001528:	42c80000 	.word	0x42c80000
 800152c:	2400028c 	.word	0x2400028c
 8001530:	0800ef48 	.word	0x0800ef48
 8001534:	24000290 	.word	0x24000290
 8001538:	0800ef64 	.word	0x0800ef64
 800153c:	240002e4 	.word	0x240002e4
 8001540:	0800ef7c 	.word	0x0800ef7c

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <Error_Handler+0x8>

08001550 <pid_init>:
#include "pid.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6178      	str	r0, [r7, #20]
 8001558:	ed87 0a04 	vstr	s0, [r7, #16]
 800155c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001560:	ed87 1a02 	vstr	s2, [r7, #8]
 8001564:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2200      	movs	r2, #0
 8001570:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	615a      	str	r2, [r3, #20]
}
 800158a:	bf00      	nop
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <pid_calculate>:
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}

int pid_calculate(pid_str *pid_data, float setpoint, float process_variable)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08e      	sub	sp, #56	@ 0x38
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a4:	edc7 0a01 	vstr	s1, [r7, #4]
	 float error = setpoint - process_variable;
 80015a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	edc7 7a08 	vstr	s15, [r7, #32]
	    printf("Setpoint: %.2f, Process variable: %.2f, Error: %.2f\n", setpoint, process_variable, error);
 80015b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80015c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80015cc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80015d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80015d4:	ed8d 7b00 	vstr	d7, [sp]
 80015d8:	ec53 2b15 	vmov	r2, r3, d5
 80015dc:	4846      	ldr	r0, [pc, #280]	@ (80016f8 <pid_calculate+0x160>)
 80015de:	f00a f951 	bl	800b884 <iprintf>

	    pid_data->total_error += error;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fa:	ee17 2a90 	vmov	r2, s15
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
	    float p_term = pid_data->Kp * error;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edd3 7a02 	vldr	s15, [r3, #8]
 8001608:	ed97 7a08 	vldr	s14, [r7, #32]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a07 	vstr	s15, [r7, #28]
	    float i_term = pid_data->Ki * pid_data->total_error;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	ed93 7a03 	vldr	s14, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	    float d_term = pid_data->Kd * (error - pid_data->previous_error);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	ed93 7a04 	vldr	s14, [r3, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	edd7 6a08 	vldr	s13, [r7, #32]
 8001644:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	edc7 7a06 	vstr	s15, [r7, #24]

	    if (i_term > pid_data->anti_windup_limit){ i_term = pid_data->anti_windup_limit;}
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	dd07      	ble.n	800167a <pid_calculate+0xe2>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001676:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	    if (i_term < -pid_data->anti_windup_limit) {i_term = -pid_data->anti_windup_limit;}
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	425b      	negs	r3, r3
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001688:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800168c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d508      	bpl.n	80016a8 <pid_calculate+0x110>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	425b      	negs	r3, r3
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	    pid_data->previous_error = error;
 80016a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 2a90 	vmov	r2, s15
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	601a      	str	r2, [r3, #0]

	    float output = (float)(p_term + i_term + d_term);
 80016b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80016bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	edc7 7a05 	vstr	s15, [r7, #20]
	    printf("PID output: %d\n", output);
 80016d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d8:	ec53 2b17 	vmov	r2, r3, d7
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <pid_calculate+0x164>)
 80016de:	f00a f8d1 	bl	800b884 <iprintf>
	    return output;
 80016e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3728      	adds	r7, #40	@ 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800ef94 	.word	0x0800ef94
 80016fc:	0800efcc 	.word	0x0800efcc

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_MspInit+0x30>)
 8001708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800170c:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <HAL_MspInit+0x30>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_MspInit+0x30>)
 8001718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	58024400 	.word	0x58024400

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x4>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 fb89 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f006 fa51 	bl	8007c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	24000298 	.word	0x24000298

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <TIM3_IRQHandler+0x10>)
 80017ae:	f006 fa47 	bl	8007c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	240002e4 	.word	0x240002e4

080017bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <I2C1_EV_IRQHandler+0x10>)
 80017c2:	f001 fec7 	bl	8003554 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	24000200 	.word	0x24000200

080017d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <I2C1_ER_IRQHandler+0x10>)
 80017d6:	f001 fed7 	bl	8003588 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	24000200 	.word	0x24000200

080017e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <USART3_IRQHandler+0x10>)
 80017ea:	f007 fbf7 	bl	8008fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	24000330 	.word	0x24000330

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001812:	f00a f945 	bl	800baa0 <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
  return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
  while (1) {}    /* Make sure we hang here */
 800183a:	bf00      	nop
 800183c:	e7fd      	b.n	800183a <_exit+0x12>

0800183e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e00a      	b.n	8001866 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001850:	f3af 8000 	nop.w
 8001854:	4601      	mov	r1, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	b2ca      	uxtb	r2, r1
 800185e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	dbf0      	blt.n	8001850 <_read+0x12>
  }

  return len;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e009      	b.n	800189e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf1      	blt.n	800188a <_write+0x12>
  }
  return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_close>:

int _close(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d8:	605a      	str	r2, [r3, #4]
  return 0;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_isatty>:

int _isatty(int file)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f00a f8aa 	bl	800baa0 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	24080000 	.word	0x24080000
 8001978:	00000400 	.word	0x00000400
 800197c:	24000294 	.word	0x24000294
 8001980:	24000518 	.word	0x24000518

08001984 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019ac:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80019b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019cc:	4813      	ldr	r0, [pc, #76]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019ce:	f005 fdfb 	bl	80075c8 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80019d8:	f7ff fdb4 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <MX_TIM2_Init+0x98>)
 80019ea:	f006 fb45 	bl	8008078 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019f4:	f7ff fda6 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_TIM2_Init+0x98>)
 8001a06:	f007 f897 	bl	8008b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001a10:	f7ff fd98 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24000298 	.word	0x24000298

08001a20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	463b      	mov	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a44:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	@ (8001ad4 <MX_TIM3_Init+0xb4>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a4c:	223f      	movs	r2, #63	@ 0x3f
 8001a4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a6a:	4819      	ldr	r0, [pc, #100]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a6c:	f005 feec 	bl	8007848 <HAL_TIM_PWM_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a76:	f7ff fd65 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4811      	ldr	r0, [pc, #68]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001a8a:	f007 f855 	bl	8008b38 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a94:	f7ff fd56 	bl	8001544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a98:	2360      	movs	r3, #96	@ 0x60
 8001a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001a9c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2208      	movs	r2, #8
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001ab2:	f006 f9cd 	bl	8007e50 <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001abc:	f7ff fd42 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ac0:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <MX_TIM3_Init+0xb0>)
 8001ac2:	f000 f857 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	240002e4 	.word	0x240002e4
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae8:	d116      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_TIM_Base_MspInit+0x48>)
 8001aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_TIM_Base_MspInit+0x48>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_TIM_Base_MspInit+0x48>)
 8001afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	201c      	movs	r0, #28
 8001b0e:	f000 face 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b12:	201c      	movs	r0, #28
 8001b14:	f000 fae5 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	58024400 	.word	0x58024400

08001b24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_TIM_PWM_MspInit+0x48>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d116      	bne.n	8001b64 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_TIM_PWM_MspInit+0x4c>)
 8001b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b70 <HAL_TIM_PWM_MspInit+0x4c>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_TIM_PWM_MspInit+0x4c>)
 8001b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	201d      	movs	r0, #29
 8001b5a:	f000 faa8 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b5e:	201d      	movs	r0, #29
 8001b60:	f000 fabf 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	58024400 	.word	0x58024400

08001b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a13      	ldr	r2, [pc, #76]	@ (8001be0 <HAL_TIM_MspPostInit+0x6c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d11f      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_TIM_MspPostInit+0x70>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9c:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <HAL_TIM_MspPostInit+0x70>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_TIM_MspPostInit+0x70>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_TIM_MspPostInit+0x74>)
 8001bd2:	f001 f813 	bl	8002bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40000400 	.word	0x40000400
 8001be4:	58024400 	.word	0x58024400
 8001be8:	58020800 	.word	0x58020800

08001bec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf0:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001bf2:	4a23      	ldr	r2, [pc, #140]	@ (8001c80 <MX_USART3_UART_Init+0x94>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c22:	4b16      	ldr	r3, [pc, #88]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c28:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c34:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c36:	f007 f82b 	bl	8008c90 <HAL_UART_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c40:	f7ff fc80 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c44:	2100      	movs	r1, #0
 8001c46:	480d      	ldr	r0, [pc, #52]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c48:	f008 fdc2 	bl	800a7d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c52:	f7ff fc77 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c56:	2100      	movs	r1, #0
 8001c58:	4808      	ldr	r0, [pc, #32]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c5a:	f008 fdf7 	bl	800a84c <HAL_UARTEx_SetRxFifoThreshold>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c64:	f7ff fc6e 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <MX_USART3_UART_Init+0x90>)
 8001c6a:	f008 fd78 	bl	800a75e <HAL_UARTEx_DisableFifoMode>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c74:	f7ff fc66 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	24000330 	.word	0x24000330
 8001c80:	40004800 	.word	0x40004800

08001c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0ba      	sub	sp, #232	@ 0xe8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	22c0      	movs	r2, #192	@ 0xc0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 fe96 	bl	800b9d6 <memset>
  if(uartHandle->Instance==USART3)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2b      	ldr	r2, [pc, #172]	@ (8001d5c <HAL_UART_MspInit+0xd8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d14e      	bne.n	8001d52 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cb4:	f04f 0202 	mov.w	r2, #2
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fe50 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cd6:	f7ff fc35 	bl	8001544 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_UART_MspInit+0xdc>)
 8001cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <HAL_UART_MspInit+0xdc>)
 8001ce2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_UART_MspInit+0xdc>)
 8001cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_UART_MspInit+0xdc>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_UART_MspInit+0xdc>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_UART_MspInit+0xdc>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d30:	2307      	movs	r3, #7
 8001d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <HAL_UART_MspInit+0xe0>)
 8001d3e:	f000 ff5d 	bl	8002bfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2027      	movs	r0, #39	@ 0x27
 8001d48:	f000 f9b1 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d4c:	2027      	movs	r0, #39	@ 0x27
 8001d4e:	f000 f9c8 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d52:	bf00      	nop
 8001d54:	37e8      	adds	r7, #232	@ 0xe8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40004800 	.word	0x40004800
 8001d60:	58024400 	.word	0x58024400
 8001d64:	58020c00 	.word	0x58020c00

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d6c:	f7fe fe7c 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	@ (8001da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	@ (8001da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	@ (8001db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d96:	f009 fe89 	bl	800baac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7ff f973 	bl	8001084 <main>
  bx  lr
 8001d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001da4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001da8:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001dac:	0800f450 	.word	0x0800f450
  ldr r2, =_sbss
 8001db0:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001db4:	24000514 	.word	0x24000514

08001db8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC3_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f000 f968 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dc8:	f003 fbfc 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_Init+0x68>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	4913      	ldr	r1, [pc, #76]	@ (8001e28 <HAL_Init+0x6c>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001de6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_Init+0x68>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <HAL_Init+0x6c>)
 8001df0:	5cd3      	ldrb	r3, [r2, r3]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e2c <HAL_Init+0x70>)
 8001dfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <HAL_Init+0x74>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e06:	2000      	movs	r0, #0
 8001e08:	f000 f814 	bl	8001e34 <HAL_InitTick>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e002      	b.n	8001e1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e16:	f7ff fc73 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	58024400 	.word	0x58024400
 8001e28:	0800efdc 	.word	0x0800efdc
 8001e2c:	24000004 	.word	0x24000004
 8001e30:	24000000 	.word	0x24000000

08001e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e3c:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_InitTick+0x60>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e021      	b.n	8001e8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_InitTick+0x64>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_InitTick+0x60>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f94d 	bl	80020fe <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00e      	b.n	8001e8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d80a      	bhi.n	8001e8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f917 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e80:	4a06      	ldr	r2, [pc, #24]	@ (8001e9c <HAL_InitTick+0x68>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	24000018 	.word	0x24000018
 8001e98:	24000000 	.word	0x24000000
 8001e9c:	24000014 	.word	0x24000014

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_IncTick+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x24>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <HAL_IncTick+0x24>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	24000018 	.word	0x24000018
 8001ec4:	240003c4 	.word	0x240003c4

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	240003c4 	.word	0x240003c4

08001ee0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ee4:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <HAL_GetREVID+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	5c001000 	.word	0x5c001000

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x40>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x40>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	05fa0000 	.word	0x05fa0000

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
         );
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f7ff ff8e 	bl	8001f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff29 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff40 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff90 	bl	8001fec <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5f 	bl	8001f98 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff33 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa4 	bl	8002054 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff fed2 	bl	8001ec8 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e2dc      	b.n	80026ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d008      	beq.n	800214e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2280      	movs	r2, #128	@ 0x80
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e2cd      	b.n	80026ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a76      	ldr	r2, [pc, #472]	@ (800232c <HAL_DMA_Abort+0x214>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04a      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a74      	ldr	r2, [pc, #464]	@ (8002330 <HAL_DMA_Abort+0x218>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d045      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a73      	ldr	r2, [pc, #460]	@ (8002334 <HAL_DMA_Abort+0x21c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d040      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a71      	ldr	r2, [pc, #452]	@ (8002338 <HAL_DMA_Abort+0x220>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d03b      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a70      	ldr	r2, [pc, #448]	@ (800233c <HAL_DMA_Abort+0x224>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d036      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6e      	ldr	r2, [pc, #440]	@ (8002340 <HAL_DMA_Abort+0x228>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d031      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6d      	ldr	r2, [pc, #436]	@ (8002344 <HAL_DMA_Abort+0x22c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d02c      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6b      	ldr	r2, [pc, #428]	@ (8002348 <HAL_DMA_Abort+0x230>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d027      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6a      	ldr	r2, [pc, #424]	@ (800234c <HAL_DMA_Abort+0x234>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a68      	ldr	r2, [pc, #416]	@ (8002350 <HAL_DMA_Abort+0x238>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a67      	ldr	r2, [pc, #412]	@ (8002354 <HAL_DMA_Abort+0x23c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a65      	ldr	r2, [pc, #404]	@ (8002358 <HAL_DMA_Abort+0x240>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a64      	ldr	r2, [pc, #400]	@ (800235c <HAL_DMA_Abort+0x244>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00e      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a62      	ldr	r2, [pc, #392]	@ (8002360 <HAL_DMA_Abort+0x248>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a61      	ldr	r2, [pc, #388]	@ (8002364 <HAL_DMA_Abort+0x24c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_DMA_Abort+0xd6>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002368 <HAL_DMA_Abort+0x250>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Abort+0xda>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_DMA_Abort+0xdc>
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 021e 	bic.w	r2, r2, #30
 8002206:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002216:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e00a      	b.n	8002236 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 020e 	bic.w	r2, r2, #14
 800222e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a3c      	ldr	r2, [pc, #240]	@ (800232c <HAL_DMA_Abort+0x214>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d072      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a3a      	ldr	r2, [pc, #232]	@ (8002330 <HAL_DMA_Abort+0x218>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d06d      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a39      	ldr	r2, [pc, #228]	@ (8002334 <HAL_DMA_Abort+0x21c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d068      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a37      	ldr	r2, [pc, #220]	@ (8002338 <HAL_DMA_Abort+0x220>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d063      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a36      	ldr	r2, [pc, #216]	@ (800233c <HAL_DMA_Abort+0x224>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d05e      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a34      	ldr	r2, [pc, #208]	@ (8002340 <HAL_DMA_Abort+0x228>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d059      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a33      	ldr	r2, [pc, #204]	@ (8002344 <HAL_DMA_Abort+0x22c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d054      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a31      	ldr	r2, [pc, #196]	@ (8002348 <HAL_DMA_Abort+0x230>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04f      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a30      	ldr	r2, [pc, #192]	@ (800234c <HAL_DMA_Abort+0x234>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04a      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2e      	ldr	r2, [pc, #184]	@ (8002350 <HAL_DMA_Abort+0x238>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d045      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2d      	ldr	r2, [pc, #180]	@ (8002354 <HAL_DMA_Abort+0x23c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d040      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <HAL_DMA_Abort+0x240>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d03b      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2a      	ldr	r2, [pc, #168]	@ (800235c <HAL_DMA_Abort+0x244>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d036      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	@ (8002360 <HAL_DMA_Abort+0x248>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a27      	ldr	r2, [pc, #156]	@ (8002364 <HAL_DMA_Abort+0x24c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d02c      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a25      	ldr	r2, [pc, #148]	@ (8002368 <HAL_DMA_Abort+0x250>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d027      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a24      	ldr	r2, [pc, #144]	@ (800236c <HAL_DMA_Abort+0x254>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a22      	ldr	r2, [pc, #136]	@ (8002370 <HAL_DMA_Abort+0x258>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01d      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a21      	ldr	r2, [pc, #132]	@ (8002374 <HAL_DMA_Abort+0x25c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_DMA_Abort+0x260>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1e      	ldr	r2, [pc, #120]	@ (800237c <HAL_DMA_Abort+0x264>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <HAL_DMA_Abort+0x268>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1b      	ldr	r2, [pc, #108]	@ (8002384 <HAL_DMA_Abort+0x26c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort+0x20e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a19      	ldr	r2, [pc, #100]	@ (8002388 <HAL_DMA_Abort+0x270>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d132      	bne.n	800238c <HAL_DMA_Abort+0x274>
 8002326:	2301      	movs	r3, #1
 8002328:	e031      	b.n	800238e <HAL_DMA_Abort+0x276>
 800232a:	bf00      	nop
 800232c:	40020010 	.word	0x40020010
 8002330:	40020028 	.word	0x40020028
 8002334:	40020040 	.word	0x40020040
 8002338:	40020058 	.word	0x40020058
 800233c:	40020070 	.word	0x40020070
 8002340:	40020088 	.word	0x40020088
 8002344:	400200a0 	.word	0x400200a0
 8002348:	400200b8 	.word	0x400200b8
 800234c:	40020410 	.word	0x40020410
 8002350:	40020428 	.word	0x40020428
 8002354:	40020440 	.word	0x40020440
 8002358:	40020458 	.word	0x40020458
 800235c:	40020470 	.word	0x40020470
 8002360:	40020488 	.word	0x40020488
 8002364:	400204a0 	.word	0x400204a0
 8002368:	400204b8 	.word	0x400204b8
 800236c:	58025408 	.word	0x58025408
 8002370:	5802541c 	.word	0x5802541c
 8002374:	58025430 	.word	0x58025430
 8002378:	58025444 	.word	0x58025444
 800237c:	58025458 	.word	0x58025458
 8002380:	5802546c 	.word	0x5802546c
 8002384:	58025480 	.word	0x58025480
 8002388:	58025494 	.word	0x58025494
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6d      	ldr	r2, [pc, #436]	@ (800255c <HAL_DMA_Abort+0x444>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d04a      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002560 <HAL_DMA_Abort+0x448>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d045      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002564 <HAL_DMA_Abort+0x44c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d040      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a68      	ldr	r2, [pc, #416]	@ (8002568 <HAL_DMA_Abort+0x450>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d03b      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a67      	ldr	r2, [pc, #412]	@ (800256c <HAL_DMA_Abort+0x454>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d036      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a65      	ldr	r2, [pc, #404]	@ (8002570 <HAL_DMA_Abort+0x458>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d031      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a64      	ldr	r2, [pc, #400]	@ (8002574 <HAL_DMA_Abort+0x45c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d02c      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a62      	ldr	r2, [pc, #392]	@ (8002578 <HAL_DMA_Abort+0x460>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d027      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a61      	ldr	r2, [pc, #388]	@ (800257c <HAL_DMA_Abort+0x464>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d022      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5f      	ldr	r2, [pc, #380]	@ (8002580 <HAL_DMA_Abort+0x468>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01d      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5e      	ldr	r2, [pc, #376]	@ (8002584 <HAL_DMA_Abort+0x46c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d018      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5c      	ldr	r2, [pc, #368]	@ (8002588 <HAL_DMA_Abort+0x470>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d013      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a5b      	ldr	r2, [pc, #364]	@ (800258c <HAL_DMA_Abort+0x474>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00e      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a59      	ldr	r2, [pc, #356]	@ (8002590 <HAL_DMA_Abort+0x478>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a58      	ldr	r2, [pc, #352]	@ (8002594 <HAL_DMA_Abort+0x47c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_DMA_Abort+0x32a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a56      	ldr	r2, [pc, #344]	@ (8002598 <HAL_DMA_Abort+0x480>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d108      	bne.n	8002454 <HAL_DMA_Abort+0x33c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e007      	b.n	8002464 <HAL_DMA_Abort+0x34c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002464:	e013      	b.n	800248e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002466:	f7ff fd2f 	bl	8001ec8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b05      	cmp	r3, #5
 8002472:	d90c      	bls.n	800248e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2203      	movs	r2, #3
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e12d      	b.n	80026ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e5      	bne.n	8002466 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2f      	ldr	r2, [pc, #188]	@ (800255c <HAL_DMA_Abort+0x444>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d04a      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002560 <HAL_DMA_Abort+0x448>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d045      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002564 <HAL_DMA_Abort+0x44c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d040      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002568 <HAL_DMA_Abort+0x450>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d03b      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a29      	ldr	r2, [pc, #164]	@ (800256c <HAL_DMA_Abort+0x454>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d036      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a27      	ldr	r2, [pc, #156]	@ (8002570 <HAL_DMA_Abort+0x458>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d031      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a26      	ldr	r2, [pc, #152]	@ (8002574 <HAL_DMA_Abort+0x45c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d02c      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a24      	ldr	r2, [pc, #144]	@ (8002578 <HAL_DMA_Abort+0x460>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d027      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a23      	ldr	r2, [pc, #140]	@ (800257c <HAL_DMA_Abort+0x464>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a21      	ldr	r2, [pc, #132]	@ (8002580 <HAL_DMA_Abort+0x468>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_Abort+0x422>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a20      	ldr	r2, [pc, #128]	@ (8002584 <HAL_DMA_Abort+0x46c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d018      	beq.n	800253a <HAL_DMA_Abort+0x422>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_DMA_Abort+0x470>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_DMA_Abort+0x422>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_DMA_Abort+0x474>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_DMA_Abort+0x422>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_DMA_Abort+0x478>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_DMA_Abort+0x422>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1a      	ldr	r2, [pc, #104]	@ (8002594 <HAL_DMA_Abort+0x47c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_DMA_Abort+0x422>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	@ (8002598 <HAL_DMA_Abort+0x480>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_DMA_Abort+0x426>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_DMA_Abort+0x428>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02b      	beq.n	800259c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	223f      	movs	r2, #63	@ 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	e02a      	b.n	80025b2 <HAL_DMA_Abort+0x49a>
 800255c:	40020010 	.word	0x40020010
 8002560:	40020028 	.word	0x40020028
 8002564:	40020040 	.word	0x40020040
 8002568:	40020058 	.word	0x40020058
 800256c:	40020070 	.word	0x40020070
 8002570:	40020088 	.word	0x40020088
 8002574:	400200a0 	.word	0x400200a0
 8002578:	400200b8 	.word	0x400200b8
 800257c:	40020410 	.word	0x40020410
 8002580:	40020428 	.word	0x40020428
 8002584:	40020440 	.word	0x40020440
 8002588:	40020458 	.word	0x40020458
 800258c:	40020470 	.word	0x40020470
 8002590:	40020488 	.word	0x40020488
 8002594:	400204a0 	.word	0x400204a0
 8002598:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2201      	movs	r2, #1
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a4f      	ldr	r2, [pc, #316]	@ (80026f4 <HAL_DMA_Abort+0x5dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d072      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4d      	ldr	r2, [pc, #308]	@ (80026f8 <HAL_DMA_Abort+0x5e0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d06d      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_DMA_Abort+0x5e4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d068      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <HAL_DMA_Abort+0x5e8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d063      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_DMA_Abort+0x5ec>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d05e      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a47      	ldr	r2, [pc, #284]	@ (8002708 <HAL_DMA_Abort+0x5f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d059      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a46      	ldr	r2, [pc, #280]	@ (800270c <HAL_DMA_Abort+0x5f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d054      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a44      	ldr	r2, [pc, #272]	@ (8002710 <HAL_DMA_Abort+0x5f8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04f      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a43      	ldr	r2, [pc, #268]	@ (8002714 <HAL_DMA_Abort+0x5fc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d04a      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a41      	ldr	r2, [pc, #260]	@ (8002718 <HAL_DMA_Abort+0x600>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d045      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a40      	ldr	r2, [pc, #256]	@ (800271c <HAL_DMA_Abort+0x604>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d040      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3e      	ldr	r2, [pc, #248]	@ (8002720 <HAL_DMA_Abort+0x608>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d03b      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3d      	ldr	r2, [pc, #244]	@ (8002724 <HAL_DMA_Abort+0x60c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d036      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3b      	ldr	r2, [pc, #236]	@ (8002728 <HAL_DMA_Abort+0x610>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d031      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3a      	ldr	r2, [pc, #232]	@ (800272c <HAL_DMA_Abort+0x614>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d02c      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a38      	ldr	r2, [pc, #224]	@ (8002730 <HAL_DMA_Abort+0x618>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d027      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a37      	ldr	r2, [pc, #220]	@ (8002734 <HAL_DMA_Abort+0x61c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a35      	ldr	r2, [pc, #212]	@ (8002738 <HAL_DMA_Abort+0x620>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01d      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a34      	ldr	r2, [pc, #208]	@ (800273c <HAL_DMA_Abort+0x624>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a32      	ldr	r2, [pc, #200]	@ (8002740 <HAL_DMA_Abort+0x628>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a31      	ldr	r2, [pc, #196]	@ (8002744 <HAL_DMA_Abort+0x62c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00e      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2f      	ldr	r2, [pc, #188]	@ (8002748 <HAL_DMA_Abort+0x630>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2e      	ldr	r2, [pc, #184]	@ (800274c <HAL_DMA_Abort+0x634>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_DMA_Abort+0x58a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2c      	ldr	r2, [pc, #176]	@ (8002750 <HAL_DMA_Abort+0x638>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Abort+0x58e>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_DMA_Abort+0x590>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80026b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40020010 	.word	0x40020010
 80026f8:	40020028 	.word	0x40020028
 80026fc:	40020040 	.word	0x40020040
 8002700:	40020058 	.word	0x40020058
 8002704:	40020070 	.word	0x40020070
 8002708:	40020088 	.word	0x40020088
 800270c:	400200a0 	.word	0x400200a0
 8002710:	400200b8 	.word	0x400200b8
 8002714:	40020410 	.word	0x40020410
 8002718:	40020428 	.word	0x40020428
 800271c:	40020440 	.word	0x40020440
 8002720:	40020458 	.word	0x40020458
 8002724:	40020470 	.word	0x40020470
 8002728:	40020488 	.word	0x40020488
 800272c:	400204a0 	.word	0x400204a0
 8002730:	400204b8 	.word	0x400204b8
 8002734:	58025408 	.word	0x58025408
 8002738:	5802541c 	.word	0x5802541c
 800273c:	58025430 	.word	0x58025430
 8002740:	58025444 	.word	0x58025444
 8002744:	58025458 	.word	0x58025458
 8002748:	5802546c 	.word	0x5802546c
 800274c:	58025480 	.word	0x58025480
 8002750:	58025494 	.word	0x58025494

08002754 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e237      	b.n	8002bd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d004      	beq.n	800277c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2280      	movs	r2, #128	@ 0x80
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e22c      	b.n	8002bd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5c      	ldr	r2, [pc, #368]	@ (80028f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04a      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5b      	ldr	r2, [pc, #364]	@ (80028f8 <HAL_DMA_Abort_IT+0x1a4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d045      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a59      	ldr	r2, [pc, #356]	@ (80028fc <HAL_DMA_Abort_IT+0x1a8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d040      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a58      	ldr	r2, [pc, #352]	@ (8002900 <HAL_DMA_Abort_IT+0x1ac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d03b      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a56      	ldr	r2, [pc, #344]	@ (8002904 <HAL_DMA_Abort_IT+0x1b0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d036      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a55      	ldr	r2, [pc, #340]	@ (8002908 <HAL_DMA_Abort_IT+0x1b4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d031      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a53      	ldr	r2, [pc, #332]	@ (800290c <HAL_DMA_Abort_IT+0x1b8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02c      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a52      	ldr	r2, [pc, #328]	@ (8002910 <HAL_DMA_Abort_IT+0x1bc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d027      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a50      	ldr	r2, [pc, #320]	@ (8002914 <HAL_DMA_Abort_IT+0x1c0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d022      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a4f      	ldr	r2, [pc, #316]	@ (8002918 <HAL_DMA_Abort_IT+0x1c4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d01d      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a4d      	ldr	r2, [pc, #308]	@ (800291c <HAL_DMA_Abort_IT+0x1c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d018      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002920 <HAL_DMA_Abort_IT+0x1cc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002924 <HAL_DMA_Abort_IT+0x1d0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00e      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a49      	ldr	r2, [pc, #292]	@ (8002928 <HAL_DMA_Abort_IT+0x1d4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a47      	ldr	r2, [pc, #284]	@ (800292c <HAL_DMA_Abort_IT+0x1d8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_DMA_Abort_IT+0xc8>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a46      	ldr	r2, [pc, #280]	@ (8002930 <HAL_DMA_Abort_IT+0x1dc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Abort_IT+0xcc>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_DMA_Abort_IT+0xce>
 8002820:	2300      	movs	r3, #0
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8086 	beq.w	8002934 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2204      	movs	r2, #4
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2f      	ldr	r2, [pc, #188]	@ (80028f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d04a      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2e      	ldr	r2, [pc, #184]	@ (80028f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d045      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2c      	ldr	r2, [pc, #176]	@ (80028fc <HAL_DMA_Abort_IT+0x1a8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d040      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2b      	ldr	r2, [pc, #172]	@ (8002900 <HAL_DMA_Abort_IT+0x1ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d03b      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a29      	ldr	r2, [pc, #164]	@ (8002904 <HAL_DMA_Abort_IT+0x1b0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d036      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a28      	ldr	r2, [pc, #160]	@ (8002908 <HAL_DMA_Abort_IT+0x1b4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d031      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a26      	ldr	r2, [pc, #152]	@ (800290c <HAL_DMA_Abort_IT+0x1b8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d02c      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a25      	ldr	r2, [pc, #148]	@ (8002910 <HAL_DMA_Abort_IT+0x1bc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d027      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a23      	ldr	r2, [pc, #140]	@ (8002914 <HAL_DMA_Abort_IT+0x1c0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d022      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_DMA_Abort_IT+0x1c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01d      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a20      	ldr	r2, [pc, #128]	@ (800291c <HAL_DMA_Abort_IT+0x1c8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d018      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <HAL_DMA_Abort_IT+0x1cc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <HAL_DMA_Abort_IT+0x1d0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00e      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <HAL_DMA_Abort_IT+0x1d4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_DMA_Abort_IT+0x1d8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x17c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <HAL_DMA_Abort_IT+0x1dc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <HAL_DMA_Abort_IT+0x18e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e178      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x480>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e16f      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x480>
 80028f4:	40020010 	.word	0x40020010
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020040 	.word	0x40020040
 8002900:	40020058 	.word	0x40020058
 8002904:	40020070 	.word	0x40020070
 8002908:	40020088 	.word	0x40020088
 800290c:	400200a0 	.word	0x400200a0
 8002910:	400200b8 	.word	0x400200b8
 8002914:	40020410 	.word	0x40020410
 8002918:	40020428 	.word	0x40020428
 800291c:	40020440 	.word	0x40020440
 8002920:	40020458 	.word	0x40020458
 8002924:	40020470 	.word	0x40020470
 8002928:	40020488 	.word	0x40020488
 800292c:	400204a0 	.word	0x400204a0
 8002930:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 020e 	bic.w	r2, r2, #14
 8002942:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6c      	ldr	r2, [pc, #432]	@ (8002afc <HAL_DMA_Abort_IT+0x3a8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d04a      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a6b      	ldr	r2, [pc, #428]	@ (8002b00 <HAL_DMA_Abort_IT+0x3ac>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d045      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a69      	ldr	r2, [pc, #420]	@ (8002b04 <HAL_DMA_Abort_IT+0x3b0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d040      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a68      	ldr	r2, [pc, #416]	@ (8002b08 <HAL_DMA_Abort_IT+0x3b4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d03b      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a66      	ldr	r2, [pc, #408]	@ (8002b0c <HAL_DMA_Abort_IT+0x3b8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d036      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a65      	ldr	r2, [pc, #404]	@ (8002b10 <HAL_DMA_Abort_IT+0x3bc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d031      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a63      	ldr	r2, [pc, #396]	@ (8002b14 <HAL_DMA_Abort_IT+0x3c0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02c      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a62      	ldr	r2, [pc, #392]	@ (8002b18 <HAL_DMA_Abort_IT+0x3c4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d027      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a60      	ldr	r2, [pc, #384]	@ (8002b1c <HAL_DMA_Abort_IT+0x3c8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d022      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b20 <HAL_DMA_Abort_IT+0x3cc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d01d      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_DMA_Abort_IT+0x3d0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d018      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b28 <HAL_DMA_Abort_IT+0x3d4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b2c <HAL_DMA_Abort_IT+0x3d8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a59      	ldr	r2, [pc, #356]	@ (8002b30 <HAL_DMA_Abort_IT+0x3dc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_DMA_Abort_IT+0x3e0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x290>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a56      	ldr	r2, [pc, #344]	@ (8002b38 <HAL_DMA_Abort_IT+0x3e4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d108      	bne.n	80029f6 <HAL_DMA_Abort_IT+0x2a2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e007      	b.n	8002a06 <HAL_DMA_Abort_IT+0x2b2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002afc <HAL_DMA_Abort_IT+0x3a8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d072      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3a      	ldr	r2, [pc, #232]	@ (8002b00 <HAL_DMA_Abort_IT+0x3ac>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d06d      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <HAL_DMA_Abort_IT+0x3b0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d068      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a37      	ldr	r2, [pc, #220]	@ (8002b08 <HAL_DMA_Abort_IT+0x3b4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d063      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a36      	ldr	r2, [pc, #216]	@ (8002b0c <HAL_DMA_Abort_IT+0x3b8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d05e      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a34      	ldr	r2, [pc, #208]	@ (8002b10 <HAL_DMA_Abort_IT+0x3bc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d059      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a33      	ldr	r2, [pc, #204]	@ (8002b14 <HAL_DMA_Abort_IT+0x3c0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d054      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a31      	ldr	r2, [pc, #196]	@ (8002b18 <HAL_DMA_Abort_IT+0x3c4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d04f      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a30      	ldr	r2, [pc, #192]	@ (8002b1c <HAL_DMA_Abort_IT+0x3c8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d04a      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2e      	ldr	r2, [pc, #184]	@ (8002b20 <HAL_DMA_Abort_IT+0x3cc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d045      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b24 <HAL_DMA_Abort_IT+0x3d0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d040      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2b      	ldr	r2, [pc, #172]	@ (8002b28 <HAL_DMA_Abort_IT+0x3d4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d03b      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2a      	ldr	r2, [pc, #168]	@ (8002b2c <HAL_DMA_Abort_IT+0x3d8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d036      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <HAL_DMA_Abort_IT+0x3dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <HAL_DMA_Abort_IT+0x3e0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02c      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a25      	ldr	r2, [pc, #148]	@ (8002b38 <HAL_DMA_Abort_IT+0x3e4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a24      	ldr	r2, [pc, #144]	@ (8002b3c <HAL_DMA_Abort_IT+0x3e8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_DMA_Abort_IT+0x3ec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a21      	ldr	r2, [pc, #132]	@ (8002b44 <HAL_DMA_Abort_IT+0x3f0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_DMA_Abort_IT+0x3f4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_DMA_Abort_IT+0x3f8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_DMA_Abort_IT+0x3fc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_DMA_Abort_IT+0x400>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x3a2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_DMA_Abort_IT+0x404>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d132      	bne.n	8002b5c <HAL_DMA_Abort_IT+0x408>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e031      	b.n	8002b5e <HAL_DMA_Abort_IT+0x40a>
 8002afa:	bf00      	nop
 8002afc:	40020010 	.word	0x40020010
 8002b00:	40020028 	.word	0x40020028
 8002b04:	40020040 	.word	0x40020040
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020088 	.word	0x40020088
 8002b14:	400200a0 	.word	0x400200a0
 8002b18:	400200b8 	.word	0x400200b8
 8002b1c:	40020410 	.word	0x40020410
 8002b20:	40020428 	.word	0x40020428
 8002b24:	40020440 	.word	0x40020440
 8002b28:	40020458 	.word	0x40020458
 8002b2c:	40020470 	.word	0x40020470
 8002b30:	40020488 	.word	0x40020488
 8002b34:	400204a0 	.word	0x400204a0
 8002b38:	400204b8 	.word	0x400204b8
 8002b3c:	58025408 	.word	0x58025408
 8002b40:	5802541c 	.word	0x5802541c
 8002b44:	58025430 	.word	0x58025430
 8002b48:	58025444 	.word	0x58025444
 8002b4c:	58025458 	.word	0x58025458
 8002b50:	5802546c 	.word	0x5802546c
 8002b54:	58025480 	.word	0x58025480
 8002b58:	58025494 	.word	0x58025494
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d028      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2201      	movs	r2, #1
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop

08002be0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bee:	b2db      	uxtb	r3, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c0a:	4b89      	ldr	r3, [pc, #548]	@ (8002e30 <HAL_GPIO_Init+0x234>)
 8002c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c0e:	e194      	b.n	8002f3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8186 	beq.w	8002f34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d005      	beq.n	8002c40 <HAL_GPIO_Init+0x44>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d130      	bne.n	8002ca2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c76:	2201      	movs	r2, #1
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	f003 0201 	and.w	r2, r3, #1
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d017      	beq.n	8002cde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d123      	bne.n	8002d32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	08da      	lsrs	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3208      	adds	r2, #8
 8002d2c:	69b9      	ldr	r1, [r7, #24]
 8002d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80e0 	beq.w	8002f34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d74:	4b2f      	ldr	r3, [pc, #188]	@ (8002e34 <HAL_GPIO_Init+0x238>)
 8002d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002e34 <HAL_GPIO_Init+0x238>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d84:	4b2b      	ldr	r3, [pc, #172]	@ (8002e34 <HAL_GPIO_Init+0x238>)
 8002d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d92:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_GPIO_Init+0x23c>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a20      	ldr	r2, [pc, #128]	@ (8002e3c <HAL_GPIO_Init+0x240>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d052      	beq.n	8002e64 <HAL_GPIO_Init+0x268>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e40 <HAL_GPIO_Init+0x244>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_GPIO_Init+0x22e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e44 <HAL_GPIO_Init+0x248>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02b      	beq.n	8002e26 <HAL_GPIO_Init+0x22a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e48 <HAL_GPIO_Init+0x24c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d025      	beq.n	8002e22 <HAL_GPIO_Init+0x226>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <HAL_GPIO_Init+0x250>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01f      	beq.n	8002e1e <HAL_GPIO_Init+0x222>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e50 <HAL_GPIO_Init+0x254>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_GPIO_Init+0x21e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e54 <HAL_GPIO_Init+0x258>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0x21a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a19      	ldr	r2, [pc, #100]	@ (8002e58 <HAL_GPIO_Init+0x25c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_GPIO_Init+0x216>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a18      	ldr	r2, [pc, #96]	@ (8002e5c <HAL_GPIO_Init+0x260>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_GPIO_Init+0x212>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <HAL_GPIO_Init+0x264>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_GPIO_Init+0x20e>
 8002e06:	2309      	movs	r3, #9
 8002e08:	e02d      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	e02b      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	e029      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e027      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e16:	2306      	movs	r3, #6
 8002e18:	e025      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	e023      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e021      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e01f      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e01d      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e01b      	b.n	8002e66 <HAL_GPIO_Init+0x26a>
 8002e2e:	bf00      	nop
 8002e30:	58000080 	.word	0x58000080
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58000400 	.word	0x58000400
 8002e3c:	58020000 	.word	0x58020000
 8002e40:	58020400 	.word	0x58020400
 8002e44:	58020800 	.word	0x58020800
 8002e48:	58020c00 	.word	0x58020c00
 8002e4c:	58021000 	.word	0x58021000
 8002e50:	58021400 	.word	0x58021400
 8002e54:	58021800 	.word	0x58021800
 8002e58:	58021c00 	.word	0x58021c00
 8002e5c:	58022000 	.word	0x58022000
 8002e60:	58022400 	.word	0x58022400
 8002e64:	2300      	movs	r3, #0
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e76:	4938      	ldr	r1, [pc, #224]	@ (8002f58 <HAL_GPIO_Init+0x35c>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f ae63 	bne.w	8002c10 <HAL_GPIO_Init+0x14>
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	3724      	adds	r7, #36	@ 0x24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	58000400 	.word	0x58000400

08002f5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002f64:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <HAL_HSEM_FastTake+0x2c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3320      	adds	r3, #32
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	4a07      	ldr	r2, [pc, #28]	@ (8002f8c <HAL_HSEM_FastTake+0x30>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d101      	bne.n	8002f78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	58026400 	.word	0x58026400
 8002f8c:	80000300 	.word	0x80000300

08002f90 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002f9a:	4906      	ldr	r1, [pc, #24]	@ (8002fb4 <HAL_HSEM_Release+0x24>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	58026400 	.word	0x58026400

08002fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e08b      	b.n	80030e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd ffd8 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	e006      	b.n	8003040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800303e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d108      	bne.n	800305a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	e007      	b.n	800306a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_I2C_Init+0x134>)
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003088:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69d9      	ldr	r1, [r3, #28]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	02008000 	.word	0x02008000

080030f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	461a      	mov	r2, r3
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
 8003100:	4613      	mov	r3, r2
 8003102:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	f040 80fd 	bne.w	800330c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_I2C_Master_Transmit+0x30>
 800311c:	2302      	movs	r3, #2
 800311e:	e0f6      	b.n	800330e <HAL_I2C_Master_Transmit+0x21e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003128:	f7fe fece 	bl	8001ec8 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2319      	movs	r3, #25
 8003134:	2201      	movs	r2, #1
 8003136:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f001 f8ed 	bl	800431a <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0e1      	b.n	800330e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2221      	movs	r2, #33	@ 0x21
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2210      	movs	r2, #16
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	893a      	ldrh	r2, [r7, #8]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2bff      	cmp	r3, #255	@ 0xff
 800317a:	d906      	bls.n	800318a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	@ 0xff
 8003180:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003182:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e007      	b.n	800319a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003194:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003198:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d024      	beq.n	80031ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3301      	adds	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	4b4e      	ldr	r3, [pc, #312]	@ (8003318 <HAL_I2C_Master_Transmit+0x228>)
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f001 fa5b 	bl	80046a0 <I2C_TransferConfig>
 80031ea:	e066      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	8979      	ldrh	r1, [r7, #10]
 80031f4:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <HAL_I2C_Master_Transmit+0x228>)
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f001 fa50 	bl	80046a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003200:	e05b      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f001 f8e0 	bl	80043cc <I2C_WaitOnTXISFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e07b      	b.n	800330e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d034      	beq.n	80032ba <HAL_I2C_Master_Transmit+0x1ca>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d130      	bne.n	80032ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	@ 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f001 f859 	bl	800431a <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e04d      	b.n	800330e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2bff      	cmp	r3, #255	@ 0xff
 800327a:	d90e      	bls.n	800329a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	22ff      	movs	r2, #255	@ 0xff
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	b2da      	uxtb	r2, r3
 8003288:	8979      	ldrh	r1, [r7, #10]
 800328a:	2300      	movs	r3, #0
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f001 fa04 	bl	80046a0 <I2C_TransferConfig>
 8003298:	e00f      	b.n	80032ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	2300      	movs	r3, #0
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f001 f9f3 	bl	80046a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d19e      	bne.n	8003202 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	6a39      	ldr	r1, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f001 f8c6 	bl	800445a <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e01a      	b.n	800330e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2220      	movs	r2, #32
 80032de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <HAL_I2C_Master_Transmit+0x22c>)
 80032ec:	400b      	ands	r3, r1
 80032ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	80002000 	.word	0x80002000
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	f040 80fd 	bne.w	8003542 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_I2C_Mem_Read+0x34>
 800334e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0f1      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_I2C_Mem_Read+0x4e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0ea      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003376:	f7fe fda7 	bl	8001ec8 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 ffc6 	bl	800431a <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0d5      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2222      	movs	r2, #34	@ 0x22
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033c0:	88f8      	ldrh	r0, [r7, #6]
 80033c2:	893a      	ldrh	r2, [r7, #8]
 80033c4:	8979      	ldrh	r1, [r7, #10]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4603      	mov	r3, r0
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fa6d 	bl	80038b0 <I2C_RequestMemoryRead>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0ad      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2bff      	cmp	r3, #255	@ 0xff
 80033f0:	d90e      	bls.n	8003410 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	22ff      	movs	r2, #255	@ 0xff
 80033f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	8979      	ldrh	r1, [r7, #10]
 8003400:	4b52      	ldr	r3, [pc, #328]	@ (800354c <HAL_I2C_Mem_Read+0x22c>)
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f001 f949 	bl	80046a0 <I2C_TransferConfig>
 800340e:	e00f      	b.n	8003430 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341e:	b2da      	uxtb	r2, r3
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	4b4a      	ldr	r3, [pc, #296]	@ (800354c <HAL_I2C_Mem_Read+0x22c>)
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f001 f938 	bl	80046a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	2200      	movs	r2, #0
 8003438:	2104      	movs	r1, #4
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 ff6d 	bl	800431a <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07c      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d034      	beq.n	80034f0 <HAL_I2C_Mem_Read+0x1d0>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d130      	bne.n	80034f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 ff3e 	bl	800431a <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e04d      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2bff      	cmp	r3, #255	@ 0xff
 80034b0:	d90e      	bls.n	80034d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	22ff      	movs	r2, #255	@ 0xff
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	8979      	ldrh	r1, [r7, #10]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f001 f8e9 	bl	80046a0 <I2C_TransferConfig>
 80034ce:	e00f      	b.n	80034f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	8979      	ldrh	r1, [r7, #10]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f001 f8d8 	bl	80046a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d19a      	bne.n	8003430 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 ffab 	bl	800445a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e01a      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2220      	movs	r2, #32
 8003514:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_I2C_Mem_Read+0x230>)
 8003522:	400b      	ands	r3, r1
 8003524:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	80002400 	.word	0x80002400
 8003550:	fe00e800 	.word	0xfe00e800

08003554 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	68f9      	ldr	r1, [r7, #12]
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
  }
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00f      	beq.n	80035ca <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00f      	beq.n	80035f4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035f2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00f      	beq.n	800361e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360c:	f043 0202 	orr.w	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800361c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 030b 	and.w	r3, r3, #11
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800362e:	68f9      	ldr	r1, [r7, #12]
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fd19 	bl	8004068 <I2C_ITError>
  }
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	70fb      	strb	r3, [r7, #3]
 8003672:	4613      	mov	r3, r2
 8003674:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <I2C_Slave_ISR_IT+0x24>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0e2      	b.n	80038a8 <I2C_Slave_ISR_IT+0x1ea>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036fe:	6939      	ldr	r1, [r7, #16]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fa09 	bl	8003b18 <I2C_ITSlaveCplt>
 8003706:	e0ca      	b.n	800389e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04b      	beq.n	80037aa <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003718:	2b00      	cmp	r3, #0
 800371a:	d046      	beq.n	80037aa <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d128      	bne.n	8003778 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b28      	cmp	r3, #40	@ 0x28
 8003730:	d108      	bne.n	8003744 <I2C_Slave_ISR_IT+0x86>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003738:	d104      	bne.n	8003744 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fc3f 	bl	8003fc0 <I2C_ITListenCplt>
 8003742:	e031      	b.n	80037a8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b29      	cmp	r3, #41	@ 0x29
 800374e:	d10e      	bne.n	800376e <I2C_Slave_ISR_IT+0xb0>
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003756:	d00a      	beq.n	800376e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2210      	movs	r2, #16
 800375e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fd98 	bl	8004296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f97a 	bl	8003a60 <I2C_ITSlaveSeqCplt>
 800376c:	e01c      	b.n	80037a8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003776:	e08f      	b.n	8003898 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2210      	movs	r2, #16
 800377e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <I2C_Slave_ISR_IT+0xdc>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003798:	d17e      	bne.n	8003898 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	4619      	mov	r1, r3
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fc61 	bl	8004068 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037a6:	e077      	b.n	8003898 <I2C_Slave_ISR_IT+0x1da>
 80037a8:	e076      	b.n	8003898 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02f      	beq.n	8003814 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02a      	beq.n	8003814 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d018      	beq.n	80037fa <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d14b      	bne.n	800389c <I2C_Slave_ISR_IT+0x1de>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800380a:	d047      	beq.n	800389c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f927 	bl	8003a60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003812:	e043      	b.n	800389c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003828:	6939      	ldr	r1, [r7, #16]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f894 	bl	8003958 <I2C_ITAddrCplt>
 8003830:	e035      	b.n	800389e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d030      	beq.n	800389e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02b      	beq.n	800389e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d018      	beq.n	8003882 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003880:	e00d      	b.n	800389e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003888:	d002      	beq.n	8003890 <I2C_Slave_ISR_IT+0x1d2>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f8e5 	bl	8003a60 <I2C_ITSlaveSeqCplt>
 8003896:	e002      	b.n	800389e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003898:	bf00      	nop
 800389a:	e000      	b.n	800389e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800389c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	8979      	ldrh	r1, [r7, #10]
 80038d0:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <I2C_RequestMemoryRead+0xa4>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fee2 	bl	80046a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fd73 	bl	80043cc <I2C_WaitOnTXISFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e02c      	b.n	800394a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038f6:	893b      	ldrh	r3, [r7, #8]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003900:	e015      	b.n	800392e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003902:	893b      	ldrh	r3, [r7, #8]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	b29b      	uxth	r3, r3
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fd59 	bl	80043cc <I2C_WaitOnTXISFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e012      	b.n	800394a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003924:	893b      	ldrh	r3, [r7, #8]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2200      	movs	r2, #0
 8003936:	2140      	movs	r1, #64	@ 0x40
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fcee 	bl	800431a <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	80002000 	.word	0x80002000

08003958 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800396e:	2b28      	cmp	r3, #40	@ 0x28
 8003970:	d16a      	bne.n	8003a48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b29b      	uxth	r3, r3
 800398c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003990:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800399e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80039ac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d138      	bne.n	8003a28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80039b6:	897b      	ldrh	r3, [r7, #10]
 80039b8:	09db      	lsrs	r3, r3, #7
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	89bb      	ldrh	r3, [r7, #12]
 80039be:	4053      	eors	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11c      	bne.n	8003a04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d13b      	bne.n	8003a58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2208      	movs	r2, #8
 80039ec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039f6:	89ba      	ldrh	r2, [r7, #12]
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fe32 	bl	8003666 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a02:	e029      	b.n	8003a58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003a04:	893b      	ldrh	r3, [r7, #8]
 8003a06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fe79 	bl	8004704 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a1a:	89ba      	ldrh	r2, [r7, #12]
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fe20 	bl	8003666 <HAL_I2C_AddrCallback>
}
 8003a26:	e017      	b.n	8003a58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fe69 	bl	8004704 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a3a:	89ba      	ldrh	r2, [r7, #12]
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fe10 	bl	8003666 <HAL_I2C_AddrCallback>
}
 8003a46:	e007      	b.n	8003a58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e00c      	b.n	8003aae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b29      	cmp	r3, #41	@ 0x29
 8003ab8:	d112      	bne.n	8003ae0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2228      	movs	r2, #40	@ 0x28
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2221      	movs	r2, #33	@ 0x21
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ac8:	2101      	movs	r1, #1
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fe1a 	bl	8004704 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fdb0 	bl	800363e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ade:	e017      	b.n	8003b10 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aea:	d111      	bne.n	8003b10 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2228      	movs	r2, #40	@ 0x28
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2222      	movs	r2, #34	@ 0x22
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003afa:	2102      	movs	r1, #2
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fe01 	bl	8004704 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fda1 	bl	8003652 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2220      	movs	r2, #32
 8003b42:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	2b21      	cmp	r3, #33	@ 0x21
 8003b48:	d002      	beq.n	8003b50 <I2C_ITSlaveCplt+0x38>
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	2b29      	cmp	r3, #41	@ 0x29
 8003b4e:	d108      	bne.n	8003b62 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b50:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fdd5 	bl	8004704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2221      	movs	r2, #33	@ 0x21
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b60:	e019      	b.n	8003b96 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	2b22      	cmp	r3, #34	@ 0x22
 8003b66:	d002      	beq.n	8003b6e <I2C_ITSlaveCplt+0x56>
 8003b68:	7afb      	ldrb	r3, [r7, #11]
 8003b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6c:	d108      	bne.n	8003b80 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b6e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fdc6 	bl	8004704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2222      	movs	r2, #34	@ 0x22
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b7e:	e00a      	b.n	8003b96 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	2b28      	cmp	r3, #40	@ 0x28
 8003b84:	d107      	bne.n	8003b96 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003b86:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fdba 	bl	8004704 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b7f      	ldr	r3, [pc, #508]	@ (8003db0 <I2C_ITSlaveCplt+0x298>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fb6d 	bl	8004296 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d07a      	beq.n	8003cbc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8111 	beq.w	8003e02 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a73      	ldr	r2, [pc, #460]	@ (8003db4 <I2C_ITSlaveCplt+0x29c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d059      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a71      	ldr	r2, [pc, #452]	@ (8003db8 <I2C_ITSlaveCplt+0x2a0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d053      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8003dbc <I2C_ITSlaveCplt+0x2a4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04d      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc0 <I2C_ITSlaveCplt+0x2a8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d047      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6b      	ldr	r2, [pc, #428]	@ (8003dc4 <I2C_ITSlaveCplt+0x2ac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d041      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a69      	ldr	r2, [pc, #420]	@ (8003dc8 <I2C_ITSlaveCplt+0x2b0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d03b      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a67      	ldr	r2, [pc, #412]	@ (8003dcc <I2C_ITSlaveCplt+0x2b4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d035      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a65      	ldr	r2, [pc, #404]	@ (8003dd0 <I2C_ITSlaveCplt+0x2b8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02f      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a63      	ldr	r2, [pc, #396]	@ (8003dd4 <I2C_ITSlaveCplt+0x2bc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d029      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a61      	ldr	r2, [pc, #388]	@ (8003dd8 <I2C_ITSlaveCplt+0x2c0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d023      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8003ddc <I2C_ITSlaveCplt+0x2c4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d01d      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5d      	ldr	r2, [pc, #372]	@ (8003de0 <I2C_ITSlaveCplt+0x2c8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d017      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <I2C_ITSlaveCplt+0x2cc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d011      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a59      	ldr	r2, [pc, #356]	@ (8003de8 <I2C_ITSlaveCplt+0x2d0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a57      	ldr	r2, [pc, #348]	@ (8003dec <I2C_ITSlaveCplt+0x2d4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d005      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x188>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a55      	ldr	r2, [pc, #340]	@ (8003df0 <I2C_ITSlaveCplt+0x2d8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d105      	bne.n	8003cac <I2C_ITSlaveCplt+0x194>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	e004      	b.n	8003cb6 <I2C_ITSlaveCplt+0x19e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003cba:	e0a2      	b.n	8003e02 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 809d 	beq.w	8003e02 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cd6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8090 	beq.w	8003e02 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a32      	ldr	r2, [pc, #200]	@ (8003db4 <I2C_ITSlaveCplt+0x29c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d059      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a30      	ldr	r2, [pc, #192]	@ (8003db8 <I2C_ITSlaveCplt+0x2a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d053      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2e      	ldr	r2, [pc, #184]	@ (8003dbc <I2C_ITSlaveCplt+0x2a4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d04d      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc0 <I2C_ITSlaveCplt+0x2a8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d047      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc4 <I2C_ITSlaveCplt+0x2ac>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d041      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a28      	ldr	r2, [pc, #160]	@ (8003dc8 <I2C_ITSlaveCplt+0x2b0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <I2C_ITSlaveCplt+0x2b4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d035      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a24      	ldr	r2, [pc, #144]	@ (8003dd0 <I2C_ITSlaveCplt+0x2b8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d02f      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a22      	ldr	r2, [pc, #136]	@ (8003dd4 <I2C_ITSlaveCplt+0x2bc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d029      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a20      	ldr	r2, [pc, #128]	@ (8003dd8 <I2C_ITSlaveCplt+0x2c0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d023      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	@ (8003ddc <I2C_ITSlaveCplt+0x2c4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <I2C_ITSlaveCplt+0x2c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d017      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <I2C_ITSlaveCplt+0x2cc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d011      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <I2C_ITSlaveCplt+0x2d0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <I2C_ITSlaveCplt+0x2d4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d005      	beq.n	8003da2 <I2C_ITSlaveCplt+0x28a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	@ (8003df0 <I2C_ITSlaveCplt+0x2d8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d128      	bne.n	8003df4 <I2C_ITSlaveCplt+0x2dc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	e027      	b.n	8003dfe <I2C_ITSlaveCplt+0x2e6>
 8003dae:	bf00      	nop
 8003db0:	fe00e800 	.word	0xfe00e800
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00c      	beq.n	8003e4e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5c:	f043 0204 	orr.w	r2, r3, #4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d049      	beq.n	8003f02 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d044      	beq.n	8003f02 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d128      	bne.n	8003ed4 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b28      	cmp	r3, #40	@ 0x28
 8003e8c:	d108      	bne.n	8003ea0 <I2C_ITSlaveCplt+0x388>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e94:	d104      	bne.n	8003ea0 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f891 	bl	8003fc0 <I2C_ITListenCplt>
 8003e9e:	e030      	b.n	8003f02 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b29      	cmp	r3, #41	@ 0x29
 8003eaa:	d10e      	bne.n	8003eca <I2C_ITSlaveCplt+0x3b2>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eb2:	d00a      	beq.n	8003eca <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f9ea 	bl	8004296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fdcc 	bl	8003a60 <I2C_ITSlaveSeqCplt>
 8003ec8:	e01b      	b.n	8003f02 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	61da      	str	r2, [r3, #28]
 8003ed2:	e016      	b.n	8003f02 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <I2C_ITSlaveCplt+0x3de>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ef4:	d105      	bne.n	8003f02 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	4619      	mov	r1, r3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f8b3 	bl	8004068 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f8a2 	bl	8004068 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b28      	cmp	r3, #40	@ 0x28
 8003f2e:	d141      	bne.n	8003fb4 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f844 	bl	8003fc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f38:	e03c      	b.n	8003fb4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f42:	d014      	beq.n	8003f6e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fd8b 	bl	8003a60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fbc <I2C_ITSlaveCplt+0x4a4>)
 8003f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fb8b 	bl	8003682 <HAL_I2C_ListenCpltCallback>
}
 8003f6c:	e022      	b.n	8003fb4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b22      	cmp	r3, #34	@ 0x22
 8003f78:	d10e      	bne.n	8003f98 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fb5e 	bl	8003652 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f96:	e00d      	b.n	8003fb4 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fb45 	bl	800363e <HAL_I2C_SlaveTxCpltCallback>
}
 8003fb4:	bf00      	nop
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	ffff0000 	.word	0xffff0000

08003fc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <I2C_ITListenCplt+0xa4>)
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d022      	beq.n	800403c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800403c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fb5f 	bl	8004704 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2210      	movs	r2, #16
 800404c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fb13 	bl	8003682 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	ffff0000 	.word	0xffff0000

08004068 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a6d      	ldr	r2, [pc, #436]	@ (800423c <I2C_ITError+0x1d4>)
 8004086:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b28      	cmp	r3, #40	@ 0x28
 800409e:	d005      	beq.n	80040ac <I2C_ITError+0x44>
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b29      	cmp	r3, #41	@ 0x29
 80040a4:	d002      	beq.n	80040ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80040aa:	d10b      	bne.n	80040c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040ac:	2103      	movs	r1, #3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb28 	bl	8004704 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2228      	movs	r2, #40	@ 0x28
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a60      	ldr	r2, [pc, #384]	@ (8004240 <I2C_ITError+0x1d8>)
 80040c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040c2:	e030      	b.n	8004126 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040c4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb1b 	bl	8004704 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8e1 	bl	8004296 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b60      	cmp	r3, #96	@ 0x60
 80040de:	d01f      	beq.n	8004120 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d114      	bne.n	8004120 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b10      	cmp	r3, #16
 8004102:	d109      	bne.n	8004118 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2210      	movs	r2, #16
 800410a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004110:	f043 0204 	orr.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2220      	movs	r2, #32
 800411e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d039      	beq.n	80041a8 <I2C_ITError+0x140>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b11      	cmp	r3, #17
 8004138:	d002      	beq.n	8004140 <I2C_ITError+0xd8>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b21      	cmp	r3, #33	@ 0x21
 800413e:	d133      	bne.n	80041a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800414a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800414e:	d107      	bne.n	8004160 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800415e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fd3b 	bl	8002be0 <HAL_DMA_GetState>
 800416a:	4603      	mov	r3, r0
 800416c:	2b01      	cmp	r3, #1
 800416e:	d017      	beq.n	80041a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <I2C_ITError+0x1dc>)
 8004176:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fae5 	bl	8002754 <HAL_DMA_Abort_IT>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d04d      	beq.n	800422c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800419a:	4610      	mov	r0, r2
 800419c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800419e:	e045      	b.n	800422c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f851 	bl	8004248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041a6:	e041      	b.n	800422c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d039      	beq.n	8004224 <I2C_ITError+0x1bc>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b12      	cmp	r3, #18
 80041b4:	d002      	beq.n	80041bc <I2C_ITError+0x154>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b22      	cmp	r3, #34	@ 0x22
 80041ba:	d133      	bne.n	8004224 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ca:	d107      	bne.n	80041dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe fcfd 	bl	8002be0 <HAL_DMA_GetState>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d017      	beq.n	800421c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	4a14      	ldr	r2, [pc, #80]	@ (8004244 <I2C_ITError+0x1dc>)
 80041f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe faa7 	bl	8002754 <HAL_DMA_Abort_IT>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004216:	4610      	mov	r0, r2
 8004218:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800421a:	e009      	b.n	8004230 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f813 	bl	8004248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004222:	e005      	b.n	8004230 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f80f 	bl	8004248 <I2C_TreatErrorCallback>
  }
}
 800422a:	e002      	b.n	8004232 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004230:	bf00      	nop
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	ffff0000 	.word	0xffff0000
 8004240:	080036bf 	.word	0x080036bf
 8004244:	080042df 	.word	0x080042df

08004248 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b60      	cmp	r3, #96	@ 0x60
 800425a:	d10e      	bne.n	800427a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fa19 	bl	80036aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004278:	e009      	b.n	800428e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fa04 	bl	8003696 <HAL_I2C_ErrorCallback>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d103      	bne.n	80042b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d007      	beq.n	80042d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	619a      	str	r2, [r3, #24]
  }
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	2200      	movs	r2, #0
 80042fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004308:	2200      	movs	r2, #0
 800430a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff ff9b 	bl	8004248 <I2C_TreatErrorCallback>
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432a:	e03b      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f8d5 	bl	80044e0 <I2C_IsErrorOccurred>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e041      	b.n	80043c4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d02d      	beq.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fd fdbe 	bl	8001ec8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <I2C_WaitOnFlagUntilTimeout+0x44>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d122      	bne.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	429a      	cmp	r2, r3
 800437a:	d113      	bne.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e00f      	b.n	80043c4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d0b4      	beq.n	800432c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d8:	e033      	b.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f87e 	bl	80044e0 <I2C_IsErrorOccurred>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e031      	b.n	8004452 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d025      	beq.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fd fd67 	bl	8001ec8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11a      	bne.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d013      	beq.n	8004442 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e007      	b.n	8004452 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d1c4      	bne.n	80043da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004466:	e02f      	b.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f837 	bl	80044e0 <I2C_IsErrorOccurred>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e02d      	b.n	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fd fd24 	bl	8001ec8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11a      	bne.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b20      	cmp	r3, #32
 800449e:	d013      	beq.n	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e007      	b.n	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d1c8      	bne.n	8004468 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d068      	beq.n	80045de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2210      	movs	r2, #16
 8004512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004514:	e049      	b.n	80045aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d045      	beq.n	80045aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7fd fcd3 	bl	8001ec8 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <I2C_IsErrorOccurred+0x54>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d13a      	bne.n	80045aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800453e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004556:	d121      	bne.n	800459c <I2C_IsErrorOccurred+0xbc>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455e:	d01d      	beq.n	800459c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b20      	cmp	r3, #32
 8004564:	d01a      	beq.n	800459c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004574:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004576:	f7fd fca7 	bl	8001ec8 <HAL_GetTick>
 800457a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800457c:	e00e      	b.n	800459c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800457e:	f7fd fca3 	bl	8001ec8 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b19      	cmp	r3, #25
 800458a:	d907      	bls.n	800459c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f043 0320 	orr.w	r3, r3, #32
 8004592:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800459a:	e006      	b.n	80045aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d1e9      	bne.n	800457e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d003      	beq.n	80045c0 <I2C_IsErrorOccurred+0xe0>
 80045b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0aa      	beq.n	8004516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2220      	movs	r2, #32
 80045ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800464c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fe1e 	bl	8004296 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <I2C_IsErrorOccurred+0x1bc>)
 8004666:	400b      	ands	r3, r1
 8004668:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	431a      	orrs	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800468e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	@ 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	fe00e800 	.word	0xfe00e800

080046a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	817b      	strh	r3, [r7, #10]
 80046ae:	4613      	mov	r3, r2
 80046b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b8:	7a7b      	ldrb	r3, [r7, #9]
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	0d5b      	lsrs	r3, r3, #21
 80046da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <I2C_TransferConfig+0x60>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	43db      	mvns	r3, r3
 80046e4:	ea02 0103 	and.w	r1, r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	03ff63ff 	.word	0x03ff63ff

08004704 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004714:	887b      	ldrh	r3, [r7, #2]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00f      	beq.n	800473e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004724:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004732:	2b28      	cmp	r3, #40	@ 0x28
 8004734:	d003      	beq.n	800473e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800473c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800474e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800475c:	2b28      	cmp	r3, #40	@ 0x28
 800475e:	d003      	beq.n	8004768 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004766:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004768:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da03      	bge.n	8004778 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004776:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	2b10      	cmp	r3, #16
 800477c:	d103      	bne.n	8004786 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004784:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004786:	887b      	ldrh	r3, [r7, #2]
 8004788:	2b20      	cmp	r3, #32
 800478a:	d103      	bne.n	8004794 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	2b40      	cmp	r3, #64	@ 0x40
 8004798:	d103      	bne.n	80047a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43da      	mvns	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d138      	bne.n	8004848 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e032      	b.n	800484a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	@ 0x24
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004812:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b20      	cmp	r3, #32
 800486a:	d139      	bne.n	80048e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004876:	2302      	movs	r3, #2
 8004878:	e033      	b.n	80048e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2224      	movs	r2, #36	@ 0x24
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80048f8:	4b29      	ldr	r3, [pc, #164]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	2b06      	cmp	r3, #6
 8004902:	d00a      	beq.n	800491a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004904:	4b26      	ldr	r3, [pc, #152]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d001      	beq.n	8004916 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e040      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e03e      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800491a:	4b21      	ldr	r3, [pc, #132]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004922:	491f      	ldr	r1, [pc, #124]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4313      	orrs	r3, r2
 8004928:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800492a:	f7fd facd 	bl	8001ec8 <HAL_GetTick>
 800492e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004930:	e009      	b.n	8004946 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004932:	f7fd fac9 	bl	8001ec8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004940:	d901      	bls.n	8004946 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e028      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004946:	4b16      	ldr	r3, [pc, #88]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004952:	d1ee      	bne.n	8004932 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b1e      	cmp	r3, #30
 8004958:	d008      	beq.n	800496c <HAL_PWREx_ConfigSupply+0x7c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b2e      	cmp	r3, #46	@ 0x2e
 800495e:	d005      	beq.n	800496c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b1d      	cmp	r3, #29
 8004964:	d002      	beq.n	800496c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b2d      	cmp	r3, #45	@ 0x2d
 800496a:	d114      	bne.n	8004996 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800496c:	f7fd faac 	bl	8001ec8 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004972:	e009      	b.n	8004988 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004974:	f7fd faa8 	bl	8001ec8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004982:	d901      	bls.n	8004988 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d1ee      	bne.n	8004974 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	58024800 	.word	0x58024800

080049a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08c      	sub	sp, #48	@ 0x30
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f000 bc48 	b.w	8005248 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8088 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c6:	4b99      	ldr	r3, [pc, #612]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049d0:	4b96      	ldr	r3, [pc, #600]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d007      	beq.n	80049ec <HAL_RCC_OscConfig+0x48>
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	2b18      	cmp	r3, #24
 80049e0:	d111      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62>
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	4b8f      	ldr	r3, [pc, #572]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d06d      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x130>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d169      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f000 bc21 	b.w	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCC_OscConfig+0x7a>
 8004a10:	4b86      	ldr	r3, [pc, #536]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a85      	ldr	r2, [pc, #532]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e02e      	b.n	8004a7c <HAL_RCC_OscConfig+0xd8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x9c>
 8004a26:	4b81      	ldr	r3, [pc, #516]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a80      	ldr	r2, [pc, #512]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b7e      	ldr	r3, [pc, #504]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a7d      	ldr	r2, [pc, #500]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e01d      	b.n	8004a7c <HAL_RCC_OscConfig+0xd8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCC_OscConfig+0xc0>
 8004a4a:	4b78      	ldr	r3, [pc, #480]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a77      	ldr	r2, [pc, #476]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b75      	ldr	r3, [pc, #468]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a74      	ldr	r2, [pc, #464]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e00b      	b.n	8004a7c <HAL_RCC_OscConfig+0xd8>
 8004a64:	4b71      	ldr	r3, [pc, #452]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a70      	ldr	r2, [pc, #448]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b6e      	ldr	r3, [pc, #440]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a6d      	ldr	r2, [pc, #436]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d013      	beq.n	8004aac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fd fa20 	bl	8001ec8 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a8c:	f7fd fa1c 	bl	8001ec8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	@ 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e3d4      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0xe8>
 8004aaa:	e014      	b.n	8004ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd fa0c 	bl	8001ec8 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fd fa08 	bl	8001ec8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	@ 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e3c0      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ac6:	4b59      	ldr	r3, [pc, #356]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x110>
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80ca 	beq.w	8004c78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae4:	4b51      	ldr	r3, [pc, #324]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aee:	4b4f      	ldr	r3, [pc, #316]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_RCC_OscConfig+0x166>
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	2b18      	cmp	r3, #24
 8004afe:	d156      	bne.n	8004bae <HAL_RCC_OscConfig+0x20a>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d151      	bne.n	8004bae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0a:	4b48      	ldr	r3, [pc, #288]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_RCC_OscConfig+0x17e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e392      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b22:	4b42      	ldr	r3, [pc, #264]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 0219 	bic.w	r2, r3, #25
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	493f      	ldr	r1, [pc, #252]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b34:	f7fd f9c8 	bl	8001ec8 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b3c:	f7fd f9c4 	bl	8001ec8 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e37c      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4e:	4b37      	ldr	r3, [pc, #220]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5a:	f7fd f9c1 	bl	8001ee0 <HAL_GetREVID>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d817      	bhi.n	8004b98 <HAL_RCC_OscConfig+0x1f4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d108      	bne.n	8004b82 <HAL_RCC_OscConfig+0x1de>
 8004b70:	4b2e      	ldr	r3, [pc, #184]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b78:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b80:	e07a      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b82:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	031b      	lsls	r3, r3, #12
 8004b90:	4926      	ldr	r1, [pc, #152]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b96:	e06f      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b24      	ldr	r3, [pc, #144]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	4921      	ldr	r1, [pc, #132]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bac:	e064      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d047      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0219 	bic.w	r2, r3, #25
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	491a      	ldr	r1, [pc, #104]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f97e 	bl	8001ec8 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fd f97a 	bl	8001ec8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e332      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be2:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	f7fd f977 	bl	8001ee0 <HAL_GetREVID>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d819      	bhi.n	8004c30 <HAL_RCC_OscConfig+0x28c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d108      	bne.n	8004c16 <HAL_RCC_OscConfig+0x272>
 8004c04:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c0c:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c12:	6053      	str	r3, [r2, #4]
 8004c14:	e030      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	031b      	lsls	r3, r3, #12
 8004c24:	4901      	ldr	r1, [pc, #4]	@ (8004c2c <HAL_RCC_OscConfig+0x288>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
 8004c2a:	e025      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	4b9a      	ldr	r3, [pc, #616]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	4997      	ldr	r1, [pc, #604]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	e018      	b.n	8004c78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c46:	4b95      	ldr	r3, [pc, #596]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a94      	ldr	r2, [pc, #592]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fd f939 	bl	8001ec8 <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fd f935 	bl	8001ec8 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e2ed      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c6c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a9 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c86:	4b85      	ldr	r3, [pc, #532]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c90:	4b82      	ldr	r3, [pc, #520]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d007      	beq.n	8004cac <HAL_RCC_OscConfig+0x308>
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b18      	cmp	r3, #24
 8004ca0:	d13a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x374>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d135      	bne.n	8004d18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cac:	4b7b      	ldr	r3, [pc, #492]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x320>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e2c1      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cc4:	f7fd f90c 	bl	8001ee0 <HAL_GetREVID>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d817      	bhi.n	8004d02 <HAL_RCC_OscConfig+0x35e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d108      	bne.n	8004cec <HAL_RCC_OscConfig+0x348>
 8004cda:	4b70      	ldr	r3, [pc, #448]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004ce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ce8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cea:	e075      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cec:	4b6b      	ldr	r3, [pc, #428]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	069b      	lsls	r3, r3, #26
 8004cfa:	4968      	ldr	r1, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d00:	e06a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d02:	4b66      	ldr	r3, [pc, #408]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	4962      	ldr	r1, [pc, #392]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d16:	e05f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d042      	beq.n	8004da6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d20:	4b5e      	ldr	r3, [pc, #376]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5d      	ldr	r2, [pc, #372]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fd f8cc 	bl	8001ec8 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d34:	f7fd f8c8 	bl	8001ec8 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e280      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d46:	4b55      	ldr	r3, [pc, #340]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d52:	f7fd f8c5 	bl	8001ee0 <HAL_GetREVID>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d817      	bhi.n	8004d90 <HAL_RCC_OscConfig+0x3ec>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d108      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3d6>
 8004d68:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d70:	4a4a      	ldr	r2, [pc, #296]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d76:	6053      	str	r3, [r2, #4]
 8004d78:	e02e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
 8004d7a:	4b48      	ldr	r3, [pc, #288]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	069b      	lsls	r3, r3, #26
 8004d88:	4944      	ldr	r1, [pc, #272]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
 8004d8e:	e023      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
 8004d90:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	493f      	ldr	r1, [pc, #252]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60cb      	str	r3, [r1, #12]
 8004da4:	e018      	b.n	8004dd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3c      	ldr	r2, [pc, #240]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd f889 	bl	8001ec8 <HAL_GetTick>
 8004db6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004dba:	f7fd f885 	bl	8001ec8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e23d      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dcc:	4b33      	ldr	r3, [pc, #204]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d036      	beq.n	8004e52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d019      	beq.n	8004e20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd f866 	bl	8001ec8 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fd f862 	bl	8001ec8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e21a      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e12:	4b22      	ldr	r3, [pc, #136]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x45c>
 8004e1e:	e018      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e20:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e24:	4a1d      	ldr	r2, [pc, #116]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd f84c 	bl	8001ec8 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e34:	f7fd f848 	bl	8001ec8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e200      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d039      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01c      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e72:	f7fd f829 	bl	8001ec8 <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e7a:	f7fd f825 	bl	8001ec8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e1dd      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x4d6>
 8004e98:	e01b      	b.n	8004ed2 <HAL_RCC_OscConfig+0x52e>
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea0:	4b9b      	ldr	r3, [pc, #620]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a9a      	ldr	r2, [pc, #616]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eac:	f7fd f80c 	bl	8001ec8 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb4:	f7fd f808 	bl	8001ec8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1c0      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec6:	4b92      	ldr	r3, [pc, #584]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8081 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8005114 <HAL_RCC_OscConfig+0x770>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a8b      	ldr	r2, [pc, #556]	@ (8005114 <HAL_RCC_OscConfig+0x770>)
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eec:	f7fc ffec 	bl	8001ec8 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7fc ffe8 	bl	8001ec8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	@ 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1a0      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f06:	4b83      	ldr	r3, [pc, #524]	@ (8005114 <HAL_RCC_OscConfig+0x770>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d106      	bne.n	8004f28 <HAL_RCC_OscConfig+0x584>
 8004f1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f26:	e02d      	b.n	8004f84 <HAL_RCC_OscConfig+0x5e0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x5a6>
 8004f30:	4b77      	ldr	r3, [pc, #476]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	4a76      	ldr	r2, [pc, #472]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3c:	4b74      	ldr	r3, [pc, #464]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a73      	ldr	r2, [pc, #460]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f42:	f023 0304 	bic.w	r3, r3, #4
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	e01c      	b.n	8004f84 <HAL_RCC_OscConfig+0x5e0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c8>
 8004f52:	4b6f      	ldr	r3, [pc, #444]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	4a6e      	ldr	r2, [pc, #440]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f62:	4a6b      	ldr	r2, [pc, #428]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCC_OscConfig+0x5e0>
 8004f6c:	4b68      	ldr	r3, [pc, #416]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	4a67      	ldr	r2, [pc, #412]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f78:	4b65      	ldr	r3, [pc, #404]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7c:	4a64      	ldr	r2, [pc, #400]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004f7e:	f023 0304 	bic.w	r3, r3, #4
 8004f82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fc ff9c 	bl	8001ec8 <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f94:	f7fc ff98 	bl	8001ec8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e14e      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004faa:	4b59      	ldr	r3, [pc, #356]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0ee      	beq.n	8004f94 <HAL_RCC_OscConfig+0x5f0>
 8004fb6:	e014      	b.n	8004fe2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc ff86 	bl	8001ec8 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fc ff82 	bl	8001ec8 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e138      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1ee      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 812d 	beq.w	8005246 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fec:	4b48      	ldr	r3, [pc, #288]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ff4:	2b18      	cmp	r3, #24
 8004ff6:	f000 80bd 	beq.w	8005174 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	f040 809e 	bne.w	8005140 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005004:	4b42      	ldr	r3, [pc, #264]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800500e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc ff5a 	bl	8001ec8 <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc ff56 	bl	8001ec8 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e10e      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005036:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800503a:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <HAL_RCC_OscConfig+0x774>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	430a      	orrs	r2, r1
 800504a:	4931      	ldr	r1, [pc, #196]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	3b01      	subs	r3, #1
 8005056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800505e:	3b01      	subs	r3, #1
 8005060:	025b      	lsls	r3, r3, #9
 8005062:	b29b      	uxth	r3, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506a:	3b01      	subs	r3, #1
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	3b01      	subs	r3, #1
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005080:	4923      	ldr	r1, [pc, #140]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005086:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005092:	4b1f      	ldr	r3, [pc, #124]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005096:	4b21      	ldr	r3, [pc, #132]	@ (800511c <HAL_RCC_OscConfig+0x778>)
 8005098:	4013      	ands	r3, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800509e:	00d2      	lsls	r2, r2, #3
 80050a0:	491b      	ldr	r1, [pc, #108]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	f023 020c 	bic.w	r2, r3, #12
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	4917      	ldr	r1, [pc, #92]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050b8:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	f023 0202 	bic.w	r2, r3, #2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c4:	4912      	ldr	r1, [pc, #72]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050ca:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a10      	ldr	r2, [pc, #64]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	4a0d      	ldr	r2, [pc, #52]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050ee:	4b08      	ldr	r3, [pc, #32]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	4a07      	ldr	r2, [pc, #28]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fa:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <HAL_RCC_OscConfig+0x76c>)
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fc fedf 	bl	8001ec8 <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510c:	e011      	b.n	8005132 <HAL_RCC_OscConfig+0x78e>
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	58024800 	.word	0x58024800
 8005118:	fffffc0c 	.word	0xfffffc0c
 800511c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005120:	f7fc fed2 	bl	8001ec8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e08a      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005132:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0x77c>
 800513e:	e082      	b.n	8005246 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005140:	4b43      	ldr	r3, [pc, #268]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a42      	ldr	r2, [pc, #264]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800514a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fc febc 	bl	8001ec8 <HAL_GetTick>
 8005150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fc feb8 	bl	8001ec8 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e070      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005166:	4b3a      	ldr	r3, [pc, #232]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x7b0>
 8005172:	e068      	b.n	8005246 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005174:	4b36      	ldr	r3, [pc, #216]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800517a:	4b35      	ldr	r3, [pc, #212]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	2b01      	cmp	r3, #1
 8005186:	d031      	beq.n	80051ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d12a      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d122      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d11a      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	0a5b      	lsrs	r3, r3, #9
 80051ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d111      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d108      	bne.n	80051ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e02b      	b.n	8005248 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051f0:	4b17      	ldr	r3, [pc, #92]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 80051f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	d01f      	beq.n	8005246 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	4a11      	ldr	r2, [pc, #68]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005212:	f7fc fe59 	bl	8001ec8 <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005218:	bf00      	nop
 800521a:	f7fc fe55 	bl	8001ec8 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	4293      	cmp	r3, r2
 8005224:	d0f9      	beq.n	800521a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005226:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <HAL_RCC_OscConfig+0x8b0>)
 800522c:	4013      	ands	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4906      	ldr	r1, [pc, #24]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005236:	4313      	orrs	r3, r2
 8005238:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	4a04      	ldr	r2, [pc, #16]	@ (8005250 <HAL_RCC_OscConfig+0x8ac>)
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3730      	adds	r7, #48	@ 0x30
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	58024400 	.word	0x58024400
 8005254:	ffff0007 	.word	0xffff0007

08005258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e19c      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b8a      	ldr	r3, [pc, #552]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d910      	bls.n	800529c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b87      	ldr	r3, [pc, #540]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	4985      	ldr	r1, [pc, #532]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b83      	ldr	r3, [pc, #524]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e184      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d010      	beq.n	80052ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	4b7b      	ldr	r3, [pc, #492]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d908      	bls.n	80052ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052b8:	4b78      	ldr	r3, [pc, #480]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	4975      	ldr	r1, [pc, #468]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	4b70      	ldr	r3, [pc, #448]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d908      	bls.n	80052f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052e6:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	496a      	ldr	r1, [pc, #424]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	4b64      	ldr	r3, [pc, #400]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005310:	429a      	cmp	r2, r3
 8005312:	d908      	bls.n	8005326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005314:	4b61      	ldr	r3, [pc, #388]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	495e      	ldr	r1, [pc, #376]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005322:	4313      	orrs	r3, r2
 8005324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	4b59      	ldr	r3, [pc, #356]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800533e:	429a      	cmp	r2, r3
 8005340:	d908      	bls.n	8005354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005342:	4b56      	ldr	r3, [pc, #344]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4953      	ldr	r1, [pc, #332]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005350:	4313      	orrs	r3, r2
 8005352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	4b4d      	ldr	r3, [pc, #308]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	429a      	cmp	r2, r3
 800536e:	d908      	bls.n	8005382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b4a      	ldr	r3, [pc, #296]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f023 020f 	bic.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4947      	ldr	r1, [pc, #284]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800537e:	4313      	orrs	r3, r2
 8005380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d055      	beq.n	800543a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800538e:	4b43      	ldr	r3, [pc, #268]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4940      	ldr	r1, [pc, #256]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800539c:	4313      	orrs	r3, r2
 800539e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a8:	4b3c      	ldr	r3, [pc, #240]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d121      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0f6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053c0:	4b36      	ldr	r3, [pc, #216]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d115      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0ea      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053d8:	4b30      	ldr	r3, [pc, #192]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0de      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e8:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0d6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053f8:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f023 0207 	bic.w	r2, r3, #7
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4925      	ldr	r1, [pc, #148]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540a:	f7fc fd5d 	bl	8001ec8 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005410:	e00a      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005412:	f7fc fd59 	bl	8001ec8 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e0be      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005428:	4b1c      	ldr	r3, [pc, #112]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	429a      	cmp	r2, r3
 8005438:	d1eb      	bne.n	8005412 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	4b14      	ldr	r3, [pc, #80]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	429a      	cmp	r2, r3
 8005454:	d208      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005456:	4b11      	ldr	r3, [pc, #68]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f023 020f 	bic.w	r2, r3, #15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	490e      	ldr	r1, [pc, #56]	@ (800549c <HAL_RCC_ClockConfig+0x244>)
 8005464:	4313      	orrs	r3, r2
 8005466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d214      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020f 	bic.w	r2, r3, #15
 800547e:	4906      	ldr	r1, [pc, #24]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e086      	b.n	80055a6 <HAL_RCC_ClockConfig+0x34e>
 8005498:	52002000 	.word	0x52002000
 800549c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	4b3f      	ldr	r3, [pc, #252]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d208      	bcs.n	80054ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054bc:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	4939      	ldr	r1, [pc, #228]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d208      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	492e      	ldr	r1, [pc, #184]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005514:	429a      	cmp	r2, r3
 8005516:	d208      	bcs.n	800552a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	4922      	ldr	r1, [pc, #136]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005526:	4313      	orrs	r3, r2
 8005528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d010      	beq.n	8005558 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69da      	ldr	r2, [r3, #28]
 800553a:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005542:	429a      	cmp	r2, r3
 8005544:	d208      	bcs.n	8005558 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005546:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4917      	ldr	r1, [pc, #92]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005554:	4313      	orrs	r3, r2
 8005556:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005558:	f000 f834 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 800555c:	4602      	mov	r2, r0
 800555e:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	4912      	ldr	r1, [pc, #72]	@ (80055b4 <HAL_RCC_ClockConfig+0x35c>)
 800556a:	5ccb      	ldrb	r3, [r1, r3]
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005576:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <HAL_RCC_ClockConfig+0x358>)
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	4a0d      	ldr	r2, [pc, #52]	@ (80055b4 <HAL_RCC_ClockConfig+0x35c>)
 8005580:	5cd3      	ldrb	r3, [r2, r3]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	4a0a      	ldr	r2, [pc, #40]	@ (80055b8 <HAL_RCC_ClockConfig+0x360>)
 800558e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <HAL_RCC_ClockConfig+0x364>)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005596:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <HAL_RCC_ClockConfig+0x368>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fc fc4a 	bl	8001e34 <HAL_InitTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	0800efdc 	.word	0x0800efdc
 80055b8:	24000004 	.word	0x24000004
 80055bc:	24000000 	.word	0x24000000
 80055c0:	24000014 	.word	0x24000014

080055c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	@ 0x24
 80055c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ca:	4bb3      	ldr	r3, [pc, #716]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055d2:	2b18      	cmp	r3, #24
 80055d4:	f200 8155 	bhi.w	8005882 <HAL_RCC_GetSysClockFreq+0x2be>
 80055d8:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005645 	.word	0x08005645
 80055e4:	08005883 	.word	0x08005883
 80055e8:	08005883 	.word	0x08005883
 80055ec:	08005883 	.word	0x08005883
 80055f0:	08005883 	.word	0x08005883
 80055f4:	08005883 	.word	0x08005883
 80055f8:	08005883 	.word	0x08005883
 80055fc:	08005883 	.word	0x08005883
 8005600:	0800566b 	.word	0x0800566b
 8005604:	08005883 	.word	0x08005883
 8005608:	08005883 	.word	0x08005883
 800560c:	08005883 	.word	0x08005883
 8005610:	08005883 	.word	0x08005883
 8005614:	08005883 	.word	0x08005883
 8005618:	08005883 	.word	0x08005883
 800561c:	08005883 	.word	0x08005883
 8005620:	08005671 	.word	0x08005671
 8005624:	08005883 	.word	0x08005883
 8005628:	08005883 	.word	0x08005883
 800562c:	08005883 	.word	0x08005883
 8005630:	08005883 	.word	0x08005883
 8005634:	08005883 	.word	0x08005883
 8005638:	08005883 	.word	0x08005883
 800563c:	08005883 	.word	0x08005883
 8005640:	08005677 	.word	0x08005677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005644:	4b94      	ldr	r3, [pc, #592]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005650:	4b91      	ldr	r3, [pc, #580]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	08db      	lsrs	r3, r3, #3
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	4a90      	ldr	r2, [pc, #576]	@ (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005662:	e111      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005664:	4b8d      	ldr	r3, [pc, #564]	@ (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005666:	61bb      	str	r3, [r7, #24]
      break;
 8005668:	e10e      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800566a:	4b8d      	ldr	r3, [pc, #564]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800566c:	61bb      	str	r3, [r7, #24]
      break;
 800566e:	e10b      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005670:	4b8c      	ldr	r3, [pc, #560]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005672:	61bb      	str	r3, [r7, #24]
      break;
 8005674:	e108      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005676:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005680:	4b85      	ldr	r3, [pc, #532]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800568a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800568c:	4b82      	ldr	r3, [pc, #520]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005696:	4b80      	ldr	r3, [pc, #512]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569a:	08db      	lsrs	r3, r3, #3
 800569c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80e1 	beq.w	800587c <HAL_RCC_GetSysClockFreq+0x2b8>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f000 8083 	beq.w	80057c8 <HAL_RCC_GetSysClockFreq+0x204>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f200 80a1 	bhi.w	800580c <HAL_RCC_GetSysClockFreq+0x248>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x114>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d056      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80056d6:	e099      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	4a6b      	ldr	r2, [pc, #428]	@ (800589c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b62      	ldr	r3, [pc, #392]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005722:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800573e:	e087      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a02 	vldr	s12, [r7, #8]
 8005766:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005782:	e065      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b40      	ldr	r3, [pc, #256]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057c6:	e043      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b2f      	ldr	r3, [pc, #188]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800580a:	e021      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b1e      	ldr	r3, [pc, #120]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005832:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800584e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005850:	4b11      	ldr	r3, [pc, #68]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800585a:	3301      	adds	r3, #1
 800585c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005868:	edd7 6a07 	vldr	s13, [r7, #28]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005874:	ee17 3a90 	vmov	r3, s15
 8005878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800587a:	e005      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
      break;
 8005880:	e002      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005882:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005884:	61bb      	str	r3, [r7, #24]
      break;
 8005886:	bf00      	nop
  }

  return sysclockfreq;
 8005888:	69bb      	ldr	r3, [r7, #24]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3724      	adds	r7, #36	@ 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	003d0900 	.word	0x003d0900
 80058a4:	017d7840 	.word	0x017d7840
 80058a8:	46000000 	.word	0x46000000
 80058ac:	4c742400 	.word	0x4c742400
 80058b0:	4a742400 	.word	0x4a742400
 80058b4:	4bbebc20 	.word	0x4bbebc20

080058b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058be:	f7ff fe81 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 80058c2:	4602      	mov	r2, r0
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_RCC_GetHCLKFreq+0x50>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	490f      	ldr	r1, [pc, #60]	@ (800590c <HAL_RCC_GetHCLKFreq+0x54>)
 80058d0:	5ccb      	ldrb	r3, [r1, r3]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	fa22 f303 	lsr.w	r3, r2, r3
 80058da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <HAL_RCC_GetHCLKFreq+0x50>)
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	4a09      	ldr	r2, [pc, #36]	@ (800590c <HAL_RCC_GetHCLKFreq+0x54>)
 80058e6:	5cd3      	ldrb	r3, [r2, r3]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_RCC_GetHCLKFreq+0x58>)
 80058f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058f6:	4a07      	ldr	r2, [pc, #28]	@ (8005914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058fc:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <HAL_RCC_GetHCLKFreq+0x58>)
 80058fe:	681b      	ldr	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58024400 	.word	0x58024400
 800590c:	0800efdc 	.word	0x0800efdc
 8005910:	24000004 	.word	0x24000004
 8005914:	24000000 	.word	0x24000000

08005918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800591c:	f7ff ffcc 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	4904      	ldr	r1, [pc, #16]	@ (8005940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005938:	4618      	mov	r0, r3
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	0800efdc 	.word	0x0800efdc

08005944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005948:	f7ff ffb6 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 800594c:	4602      	mov	r2, r0
 800594e:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	4904      	ldr	r1, [pc, #16]	@ (800596c <HAL_RCC_GetPCLK2Freq+0x28>)
 800595a:	5ccb      	ldrb	r3, [r1, r3]
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	58024400 	.word	0x58024400
 800596c:	0800efdc 	.word	0x0800efdc

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005974:	b0ca      	sub	sp, #296	@ 0x128
 8005976:	af00      	add	r7, sp, #0
 8005978:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005982:	2300      	movs	r3, #0
 8005984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005994:	2500      	movs	r5, #0
 8005996:	ea54 0305 	orrs.w	r3, r4, r5
 800599a:	d049      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059a6:	d02f      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059ac:	d828      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b2:	d01a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059b8:	d822      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c2:	d007      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059c4:	e01c      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c6:	4bb8      	ldr	r3, [pc, #736]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	4ab7      	ldr	r2, [pc, #732]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059d2:	e01a      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	3308      	adds	r3, #8
 80059da:	2102      	movs	r1, #2
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fc8f 	bl	8007300 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	3328      	adds	r3, #40	@ 0x28
 80059f0:	2102      	movs	r1, #2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 fd36 	bl	8007464 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a12:	4ba5      	ldr	r3, [pc, #660]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a20:	4aa1      	ldr	r2, [pc, #644]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	ea58 0309 	orrs.w	r3, r8, r9
 8005a44:	d047      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d82a      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005a6d 	.word	0x08005a6d
 8005a5c:	08005a7b 	.word	0x08005a7b
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005aaf 	.word	0x08005aaf
 8005a68:	08005aaf 	.word	0x08005aaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	4a8d      	ldr	r2, [pc, #564]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a78:	e01a      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fc3c 	bl	8007300 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e00f      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a94:	3328      	adds	r3, #40	@ 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fce3 	bl	8007464 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aac:	e000      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005abc:	f023 0107 	bic.w	r1, r3, #7
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	4a78      	ldr	r2, [pc, #480]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005acc:	e003      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005ae2:	f04f 0b00 	mov.w	fp, #0
 8005ae6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005aea:	d04c      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af6:	d030      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afc:	d829      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b00:	d02d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b04:	d825      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b06:	2b80      	cmp	r3, #128	@ 0x80
 8005b08:	d018      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b0a:	2b80      	cmp	r3, #128	@ 0x80
 8005b0c:	d821      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d007      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b16:	e01c      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b18:	4b63      	ldr	r3, [pc, #396]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	4a62      	ldr	r2, [pc, #392]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b24:	e01c      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fbe6 	bl	8007300 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e011      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2100      	movs	r1, #0
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fc8d 	bl	8007464 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b50:	e006      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b68:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b76:	4a4c      	ldr	r2, [pc, #304]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005b96:	2300      	movs	r3, #0
 8005b98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005b9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d053      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bb2:	d035      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bb8:	d82e      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bbe:	d031      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bc4:	d828      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bca:	d01a      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bd0:	d822      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bda:	d007      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005bdc:	e01c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bde:	4b32      	ldr	r3, [pc, #200]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	4a31      	ldr	r2, [pc, #196]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bea:	e01c      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fb83 	bl	8007300 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c00:	e011      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	3328      	adds	r3, #40	@ 0x28
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fc2a 	bl	8007464 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c44:	e003      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d056      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c7a:	d038      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c80:	d831      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c86:	d034      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c8c:	d82b      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c98:	d825      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ca4:	e01f      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ca6:	bf00      	nop
 8005ca8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4ba2      	ldr	r3, [pc, #648]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4aa1      	ldr	r2, [pc, #644]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fb1c 	bl	8007300 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cce:	e011      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	3328      	adds	r3, #40	@ 0x28
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fbc3 	bl	8007464 <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cec:	e002      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cfc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d0c:	4a8a      	ldr	r2, [pc, #552]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d03a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d42:	2b30      	cmp	r3, #48	@ 0x30
 8005d44:	d01f      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d46:	2b30      	cmp	r3, #48	@ 0x30
 8005d48:	d819      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d815      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d111      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5a:	4b77      	ldr	r3, [pc, #476]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a76      	ldr	r2, [pc, #472]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d66:	e011      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2102      	movs	r1, #2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fac5 	bl	8007300 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d84:	e002      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d94:	4b68      	ldr	r3, [pc, #416]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	4a65      	ldr	r2, [pc, #404]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d051      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ddc:	d035      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005dde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de2:	d82e      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005de4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005de8:	d031      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dee:	d828      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d01a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfa:	d822      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e06:	e01c      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b4b      	ldr	r3, [pc, #300]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e14:	e01c      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fa6e 	bl	8007300 <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e011      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	3328      	adds	r3, #40	@ 0x28
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fb15 	bl	8007464 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e40:	e006      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e48:	e002      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e58:	4b37      	ldr	r3, [pc, #220]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e66:	4a34      	ldr	r2, [pc, #208]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e90:	460b      	mov	r3, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	d056      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea0:	d033      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ea2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea6:	d82c      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eac:	d02f      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eb2:	d826      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005eb8:	d02b      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ebe:	d820      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d012      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eca:	d81a      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d022      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d115      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	3308      	adds	r3, #8
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 fa0e 	bl	8007300 <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005eea:	e015      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	3328      	adds	r3, #40	@ 0x28
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fab5 	bl	8007464 <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f00:	e00a      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e004      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f2e:	4a02      	ldr	r2, [pc, #8]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f34:	e006      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f36:	bf00      	nop
 8005f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f5a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d055      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f70:	d033      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f76:	d82c      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7c:	d02f      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d826      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f88:	d02b      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f8e:	d820      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f94:	d012      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f9a:	d81a      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d022      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa4:	d115      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	3308      	adds	r3, #8
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 f9a6 	bl	8007300 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fba:	e015      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	3328      	adds	r3, #40	@ 0x28
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fa4d 	bl	8007464 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fda:	bf00      	nop
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ff0:	4ba3      	ldr	r3, [pc, #652]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006000:	4a9f      	ldr	r2, [pc, #636]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006002:	430b      	orrs	r3, r1
 8006004:	6593      	str	r3, [r2, #88]	@ 0x58
 8006006:	e003      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800601c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800602a:	460b      	mov	r3, r1
 800602c:	4313      	orrs	r3, r2
 800602e:	d037      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800603a:	d00e      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800603c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006040:	d816      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d018      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800604a:	d111      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4b8c      	ldr	r3, [pc, #560]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	4a8b      	ldr	r2, [pc, #556]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006058:	e00f      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3308      	adds	r3, #8
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f001 f94c 	bl	8007300 <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006082:	4b7f      	ldr	r3, [pc, #508]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006090:	4a7b      	ldr	r2, [pc, #492]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6513      	str	r3, [r2, #80]	@ 0x50
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d039      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d81c      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80060ca:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	0800610d 	.word	0x0800610d
 80060d4:	080060e1 	.word	0x080060e1
 80060d8:	080060ef 	.word	0x080060ef
 80060dc:	0800610d 	.word	0x0800610d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4b67      	ldr	r3, [pc, #412]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	4a66      	ldr	r2, [pc, #408]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060ec:	e00f      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f2:	3308      	adds	r3, #8
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f902 	bl	8007300 <RCCEx_PLL2_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006102:	e004      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006116:	4b5a      	ldr	r3, [pc, #360]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	f023 0103 	bic.w	r1, r3, #3
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006124:	4a56      	ldr	r2, [pc, #344]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006126:	430b      	orrs	r3, r1
 8006128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006140:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800614a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	f000 809f 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006156:	4b4b      	ldr	r3, [pc, #300]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4a      	ldr	r2, [pc, #296]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006162:	f7fb feb1 	bl	8001ec8 <HAL_GetTick>
 8006166:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800616a:	e00b      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616c:	f7fb feac 	bl	8001ec8 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b64      	cmp	r3, #100	@ 0x64
 800617a:	d903      	bls.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006182:	e005      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006184:	4b3f      	ldr	r3, [pc, #252]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ed      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006194:	2b00      	cmp	r3, #0
 8006196:	d179      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006198:	4b39      	ldr	r3, [pc, #228]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061a4:	4053      	eors	r3, r2
 80061a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d015      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061ae:	4b34      	ldr	r3, [pc, #208]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ba:	4b31      	ldr	r3, [pc, #196]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061be:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061e6:	d118      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fb fe6e 	bl	8001ec8 <HAL_GetTick>
 80061ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f0:	e00d      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fb fe69 	bl	8001ec8 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800620c:	e005      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800620e:	4b1c      	ldr	r3, [pc, #112]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0eb      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800621a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621e:	2b00      	cmp	r3, #0
 8006220:	d129      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006232:	d10e      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006234:	4b12      	ldr	r3, [pc, #72]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006244:	091a      	lsrs	r2, r3, #4
 8006246:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006248:	4013      	ands	r3, r2
 800624a:	4a0d      	ldr	r2, [pc, #52]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624c:	430b      	orrs	r3, r1
 800624e:	6113      	str	r3, [r2, #16]
 8006250:	e005      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006252:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	4a0a      	ldr	r2, [pc, #40]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006258:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800625c:	6113      	str	r3, [r2, #16]
 800625e:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006260:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800626a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626e:	4a04      	ldr	r2, [pc, #16]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006270:	430b      	orrs	r3, r1
 8006272:	6713      	str	r3, [r2, #112]	@ 0x70
 8006274:	e00e      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800627e:	e009      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006280:	58024400 	.word	0x58024400
 8006284:	58024800 	.word	0x58024800
 8006288:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f002 0301 	and.w	r3, r2, #1
 80062a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a4:	2300      	movs	r3, #0
 80062a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f000 8089 	beq.w	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062bc:	2b28      	cmp	r3, #40	@ 0x28
 80062be:	d86b      	bhi.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080063a1 	.word	0x080063a1
 80062cc:	08006399 	.word	0x08006399
 80062d0:	08006399 	.word	0x08006399
 80062d4:	08006399 	.word	0x08006399
 80062d8:	08006399 	.word	0x08006399
 80062dc:	08006399 	.word	0x08006399
 80062e0:	08006399 	.word	0x08006399
 80062e4:	08006399 	.word	0x08006399
 80062e8:	0800636d 	.word	0x0800636d
 80062ec:	08006399 	.word	0x08006399
 80062f0:	08006399 	.word	0x08006399
 80062f4:	08006399 	.word	0x08006399
 80062f8:	08006399 	.word	0x08006399
 80062fc:	08006399 	.word	0x08006399
 8006300:	08006399 	.word	0x08006399
 8006304:	08006399 	.word	0x08006399
 8006308:	08006383 	.word	0x08006383
 800630c:	08006399 	.word	0x08006399
 8006310:	08006399 	.word	0x08006399
 8006314:	08006399 	.word	0x08006399
 8006318:	08006399 	.word	0x08006399
 800631c:	08006399 	.word	0x08006399
 8006320:	08006399 	.word	0x08006399
 8006324:	08006399 	.word	0x08006399
 8006328:	080063a1 	.word	0x080063a1
 800632c:	08006399 	.word	0x08006399
 8006330:	08006399 	.word	0x08006399
 8006334:	08006399 	.word	0x08006399
 8006338:	08006399 	.word	0x08006399
 800633c:	08006399 	.word	0x08006399
 8006340:	08006399 	.word	0x08006399
 8006344:	08006399 	.word	0x08006399
 8006348:	080063a1 	.word	0x080063a1
 800634c:	08006399 	.word	0x08006399
 8006350:	08006399 	.word	0x08006399
 8006354:	08006399 	.word	0x08006399
 8006358:	08006399 	.word	0x08006399
 800635c:	08006399 	.word	0x08006399
 8006360:	08006399 	.word	0x08006399
 8006364:	08006399 	.word	0x08006399
 8006368:	080063a1 	.word	0x080063a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	3308      	adds	r3, #8
 8006372:	2101      	movs	r1, #1
 8006374:	4618      	mov	r0, r3
 8006376:	f000 ffc3 	bl	8007300 <RCCEx_PLL2_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006380:	e00f      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	3328      	adds	r3, #40	@ 0x28
 8006388:	2101      	movs	r1, #1
 800638a:	4618      	mov	r0, r3
 800638c:	f001 f86a 	bl	8007464 <RCCEx_PLL3_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006396:	e004      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063aa:	4bbf      	ldr	r3, [pc, #764]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b8:	4abb      	ldr	r2, [pc, #748]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ba:	430b      	orrs	r3, r1
 80063bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80063be:	e003      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f002 0302 	and.w	r3, r2, #2
 80063d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063d8:	2300      	movs	r3, #0
 80063da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063e2:	460b      	mov	r3, r1
 80063e4:	4313      	orrs	r3, r2
 80063e6:	d041      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d824      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80063f2:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006445 	.word	0x08006445
 80063fc:	08006411 	.word	0x08006411
 8006400:	08006427 	.word	0x08006427
 8006404:	08006445 	.word	0x08006445
 8006408:	08006445 	.word	0x08006445
 800640c:	08006445 	.word	0x08006445
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	3308      	adds	r3, #8
 8006416:	2101      	movs	r1, #1
 8006418:	4618      	mov	r0, r3
 800641a:	f000 ff71 	bl	8007300 <RCCEx_PLL2_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006424:	e00f      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	3328      	adds	r3, #40	@ 0x28
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f818 	bl	8007464 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800644e:	4b96      	ldr	r3, [pc, #600]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f023 0107 	bic.w	r1, r3, #7
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800645c:	4a92      	ldr	r2, [pc, #584]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800645e:	430b      	orrs	r3, r1
 8006460:	6553      	str	r3, [r2, #84]	@ 0x54
 8006462:	e003      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f002 0304 	and.w	r3, r2, #4
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006482:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d044      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006494:	2b05      	cmp	r3, #5
 8006496:	d825      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006498:	a201      	add	r2, pc, #4	@ (adr r2, 80064a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064ed 	.word	0x080064ed
 80064a4:	080064b9 	.word	0x080064b9
 80064a8:	080064cf 	.word	0x080064cf
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	080064ed 	.word	0x080064ed
 80064b4:	080064ed 	.word	0x080064ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	3308      	adds	r3, #8
 80064be:	2101      	movs	r1, #1
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 ff1d 	bl	8007300 <RCCEx_PLL2_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064cc:	e00f      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	3328      	adds	r3, #40	@ 0x28
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ffc4 	bl	8007464 <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064e2:	e004      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80064ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f6:	4b6c      	ldr	r3, [pc, #432]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064fa:	f023 0107 	bic.w	r1, r3, #7
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006506:	4a68      	ldr	r2, [pc, #416]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6593      	str	r3, [r2, #88]	@ 0x58
 800650c:	e003      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f002 0320 	and.w	r3, r2, #32
 8006522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800652c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006530:	460b      	mov	r3, r1
 8006532:	4313      	orrs	r3, r2
 8006534:	d055      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006542:	d033      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006548:	d82c      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800654e:	d02f      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006554:	d826      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006556:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800655a:	d02b      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800655c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006560:	d820      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006566:	d012      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800656c:	d81a      	bhi.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d022      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006576:	d115      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	3308      	adds	r3, #8
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f000 febd 	bl	8007300 <RCCEx_PLL2_Config>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800658c:	e015      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	3328      	adds	r3, #40	@ 0x28
 8006594:	2102      	movs	r1, #2
 8006596:	4618      	mov	r0, r3
 8006598:	f000 ff64 	bl	8007464 <RCCEx_PLL3_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065a2:	e00a      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065aa:	e006      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065ac:	bf00      	nop
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065b0:	bf00      	nop
 80065b2:	e002      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065b4:	bf00      	nop
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065c2:	4b39      	ldr	r3, [pc, #228]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	4a35      	ldr	r2, [pc, #212]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4313      	orrs	r3, r2
 8006600:	d058      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800660a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800660e:	d033      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006610:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006614:	d82c      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d02f      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006620:	d826      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006622:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006626:	d02b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800662c:	d820      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800662e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006632:	d012      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006638:	d81a      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d022      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800663e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006642:	d115      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	3308      	adds	r3, #8
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fe57 	bl	8007300 <RCCEx_PLL2_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006658:	e015      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665e:	3328      	adds	r3, #40	@ 0x28
 8006660:	2102      	movs	r1, #2
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fefe 	bl	8007464 <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800666e:	e00a      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006676:	e006      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006678:	bf00      	nop
 800667a:	e004      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800667c:	bf00      	nop
 800667e:	e002      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006680:	bf00      	nop
 8006682:	e000      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10e      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800668e:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006692:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800669e:	4a02      	ldr	r2, [pc, #8]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80066a6:	bf00      	nop
 80066a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d055      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066e0:	d033      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80066e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066e6:	d82c      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ec:	d02f      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f2:	d826      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066f8:	d02b      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80066fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066fe:	d820      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006704:	d012      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800670a:	d81a      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d022      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006714:	d115      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3308      	adds	r3, #8
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fdee 	bl	8007300 <RCCEx_PLL2_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800672a:	e015      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	3328      	adds	r3, #40	@ 0x28
 8006732:	2102      	movs	r1, #2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fe95 	bl	8007464 <RCCEx_PLL3_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006740:	e00a      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006748:	e006      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800674a:	bf00      	nop
 800674c:	e004      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800674e:	bf00      	nop
 8006750:	e002      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006752:	bf00      	nop
 8006754:	e000      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006760:	4ba1      	ldr	r3, [pc, #644]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006764:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006770:	4a9d      	ldr	r2, [pc, #628]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006772:	430b      	orrs	r3, r1
 8006774:	6593      	str	r3, [r2, #88]	@ 0x58
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f002 0308 	and.w	r3, r2, #8
 800678c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006790:	2300      	movs	r3, #0
 8006792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006796:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d01e      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	3328      	adds	r3, #40	@ 0x28
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fe54 	bl	8007464 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067c8:	4b87      	ldr	r3, [pc, #540]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d8:	4a83      	ldr	r2, [pc, #524]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f002 0310 	and.w	r3, r2, #16
 80067ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d01e      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680a:	d10c      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006810:	3328      	adds	r3, #40	@ 0x28
 8006812:	2102      	movs	r1, #2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fe25 	bl	8007464 <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006826:	4b70      	ldr	r3, [pc, #448]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006836:	4a6c      	ldr	r2, [pc, #432]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006838:	430b      	orrs	r3, r1
 800683a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006852:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006856:	460b      	mov	r3, r1
 8006858:	4313      	orrs	r3, r2
 800685a:	d03e      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006868:	d022      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800686a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800686e:	d81b      	bhi.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006878:	d00b      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800687a:	e015      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	3308      	adds	r3, #8
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fd3b 	bl	8007300 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006890:	e00f      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3328      	adds	r3, #40	@ 0x28
 8006898:	2102      	movs	r1, #2
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fde2 	bl	8007464 <RCCEx_PLL3_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068a6:	e004      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ae:	e000      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80068b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068ba:	4b4b      	ldr	r3, [pc, #300]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068ca:	4a47      	ldr	r2, [pc, #284]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80068d0:	e003      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80068e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068e8:	2300      	movs	r3, #0
 80068ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006902:	d01f      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006904:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006908:	d818      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690e:	d003      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006910:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006914:	d007      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006916:	e011      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4b33      	ldr	r3, [pc, #204]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	4a32      	ldr	r2, [pc, #200]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006924:	e00f      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	3328      	adds	r3, #40	@ 0x28
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fd98 	bl	8007464 <RCCEx_PLL3_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694e:	4b26      	ldr	r3, [pc, #152]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695e:	4a22      	ldr	r2, [pc, #136]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006960:	430b      	orrs	r3, r1
 8006962:	6553      	str	r3, [r2, #84]	@ 0x54
 8006964:	e003      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800697a:	673b      	str	r3, [r7, #112]	@ 0x70
 800697c:	2300      	movs	r3, #0
 800697e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006980:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006984:	460b      	mov	r3, r1
 8006986:	4313      	orrs	r3, r2
 8006988:	d034      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006998:	d007      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800699a:	e011      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699c:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069a8:	e00e      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	3308      	adds	r3, #8
 80069b0:	2102      	movs	r1, #2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fca4 	bl	8007300 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069be:	e003      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069d0:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069de:	4a02      	ldr	r2, [pc, #8]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069e0:	430b      	orrs	r3, r1
 80069e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069e4:	e006      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80069e6:	bf00      	nop
 80069e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a02:	2300      	movs	r3, #0
 8006a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	d00c      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	3328      	adds	r3, #40	@ 0x28
 8006a16:	2102      	movs	r1, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fd23 	bl	8007464 <RCCEx_PLL3_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a38:	2300      	movs	r3, #0
 8006a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d038      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a52:	d018      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a58:	d811      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a5e:	d014      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a64:	d80b      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a6e:	d106      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a70:	4bc3      	ldr	r3, [pc, #780]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	4ac2      	ldr	r2, [pc, #776]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a7c:	e008      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a86:	bf00      	nop
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a98:	4bb9      	ldr	r3, [pc, #740]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aa8:	4ab5      	ldr	r2, [pc, #724]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	6553      	str	r3, [r2, #84]	@ 0x54
 8006aae:	e003      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ad4:	4baa      	ldr	r3, [pc, #680]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae2:	4aa7      	ldr	r2, [pc, #668]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006af4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af6:	2300      	movs	r3, #0
 8006af8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b04:	4b9e      	ldr	r3, [pc, #632]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b14:	4a9a      	ldr	r2, [pc, #616]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b28:	2300      	movs	r3, #0
 8006b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b30:	460b      	mov	r3, r1
 8006b32:	4313      	orrs	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b36:	4b92      	ldr	r3, [pc, #584]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b44:	4a8e      	ldr	r2, [pc, #568]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b58:	2300      	movs	r3, #0
 8006b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b60:	460b      	mov	r3, r1
 8006b62:	4313      	orrs	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b66:	4b86      	ldr	r3, [pc, #536]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	4a85      	ldr	r2, [pc, #532]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b70:	6113      	str	r3, [r2, #16]
 8006b72:	4b83      	ldr	r3, [pc, #524]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b74:	6919      	ldr	r1, [r3, #16]
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b7e:	4a80      	ldr	r2, [pc, #512]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b92:	2300      	movs	r3, #0
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ba0:	4b77      	ldr	r3, [pc, #476]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bae:	4a74      	ldr	r2, [pc, #464]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006be0:	4a67      	ldr	r2, [pc, #412]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	2100      	movs	r1, #0
 8006bf0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bf8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d011      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	3308      	adds	r3, #8
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fb78 	bl	8007300 <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6239      	str	r1, [r7, #32]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d011      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	3308      	adds	r3, #8
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fb58 	bl	8007300 <RCCEx_PLL2_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	2100      	movs	r1, #0
 8006c70:	61b9      	str	r1, [r7, #24]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d011      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	3308      	adds	r3, #8
 8006c88:	2102      	movs	r1, #2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fb38 	bl	8007300 <RCCEx_PLL2_Config>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6139      	str	r1, [r7, #16]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d011      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	3328      	adds	r3, #40	@ 0x28
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fbca 	bl	8007464 <RCCEx_PLL3_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	d011      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	3328      	adds	r3, #40	@ 0x28
 8006d08:	2101      	movs	r1, #1
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fbaa 	bl	8007464 <RCCEx_PLL3_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	6039      	str	r1, [r7, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d011      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d46:	3328      	adds	r3, #40	@ 0x28
 8006d48:	2102      	movs	r1, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fb8a 	bl	8007464 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d66:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d80:	58024400 	.word	0x58024400

08006d84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d88:	f7fe fd96 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	4904      	ldr	r1, [pc, #16]	@ (8006dac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d9a:	5ccb      	ldrb	r3, [r1, r3]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	58024400 	.word	0x58024400
 8006dac:	0800efdc 	.word	0x0800efdc

08006db0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	@ 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006db8:	4ba1      	ldr	r3, [pc, #644]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006dc2:	4b9f      	ldr	r3, [pc, #636]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc6:	0b1b      	lsrs	r3, r3, #12
 8006dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dce:	4b9c      	ldr	r3, [pc, #624]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006dda:	4b99      	ldr	r3, [pc, #612]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	08db      	lsrs	r3, r3, #3
 8006de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	fb02 f303 	mul.w	r3, r2, r3
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8111 	beq.w	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	f000 8083 	beq.w	8006f0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	f200 80a1 	bhi.w	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d056      	beq.n	8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e1a:	e099      	b.n	8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e1c:	4b88      	ldr	r3, [pc, #544]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d02d      	beq.n	8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e28:	4b85      	ldr	r3, [pc, #532]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	08db      	lsrs	r3, r3, #3
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	4a84      	ldr	r2, [pc, #528]	@ (8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
 8006e38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	ee07 3a90 	vmov	s15, r3
 8006e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e52:	4b7b      	ldr	r3, [pc, #492]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5a:	ee07 3a90 	vmov	s15, r3
 8006e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e82:	e087      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800704c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e96:	4b6a      	ldr	r3, [pc, #424]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eaa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec6:	e065      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eda:	4b59      	ldr	r3, [pc, #356]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f0a:	e043      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	4b48      	ldr	r3, [pc, #288]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f4e:	e021      	b.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b37      	ldr	r3, [pc, #220]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f94:	4b2a      	ldr	r3, [pc, #168]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f98:	0a5b      	lsrs	r3, r3, #9
 8006f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fba:	ee17 2a90 	vmov	r2, s15
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe8:	ee17 2a90 	vmov	r2, s15
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ff0:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800700a:	edd7 6a07 	vldr	s13, [r7, #28]
 800700e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007016:	ee17 2a90 	vmov	r2, s15
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800701e:	e008      	b.n	8007032 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	609a      	str	r2, [r3, #8]
}
 8007032:	bf00      	nop
 8007034:	3724      	adds	r7, #36	@ 0x24
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	58024400 	.word	0x58024400
 8007044:	03d09000 	.word	0x03d09000
 8007048:	46000000 	.word	0x46000000
 800704c:	4c742400 	.word	0x4c742400
 8007050:	4a742400 	.word	0x4a742400
 8007054:	4bbebc20 	.word	0x4bbebc20

08007058 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	@ 0x24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007060:	4ba1      	ldr	r3, [pc, #644]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800706a:	4b9f      	ldr	r3, [pc, #636]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	0d1b      	lsrs	r3, r3, #20
 8007070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007074:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007076:	4b9c      	ldr	r3, [pc, #624]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007082:	4b99      	ldr	r3, [pc, #612]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	08db      	lsrs	r3, r3, #3
 8007088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 8111 	beq.w	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	f000 8083 	beq.w	80071b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f200 80a1 	bhi.w	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d056      	beq.n	8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070c2:	e099      	b.n	80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070c4:	4b88      	ldr	r3, [pc, #544]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02d      	beq.n	800712c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d0:	4b85      	ldr	r3, [pc, #532]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	4a84      	ldr	r2, [pc, #528]	@ (80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	ee07 3a90 	vmov	s15, r3
 80070e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fa:	4b7b      	ldr	r3, [pc, #492]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710a:	ed97 6a03 	vldr	s12, [r7, #12]
 800710e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007126:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800712a:	e087      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b6a      	ldr	r3, [pc, #424]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007152:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800716e:	e065      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b59      	ldr	r3, [pc, #356]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a03 	vldr	s12, [r7, #12]
 8007196:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b2:	e043      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b48      	ldr	r3, [pc, #288]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f6:	e021      	b.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b37      	ldr	r3, [pc, #220]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800723c:	4b2a      	ldr	r3, [pc, #168]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	0a5b      	lsrs	r3, r3, #9
 8007242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007252:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007256:	edd7 6a07 	vldr	s13, [r7, #28]
 800725a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007262:	ee17 2a90 	vmov	r2, s15
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800726a:	4b1f      	ldr	r3, [pc, #124]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	0c1b      	lsrs	r3, r3, #16
 8007270:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007284:	edd7 6a07 	vldr	s13, [r7, #28]
 8007288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007290:	ee17 2a90 	vmov	r2, s15
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007298:	4b13      	ldr	r3, [pc, #76]	@ (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072be:	ee17 2a90 	vmov	r2, s15
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072c6:	e008      	b.n	80072da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	609a      	str	r2, [r3, #8]
}
 80072da:	bf00      	nop
 80072dc:	3724      	adds	r7, #36	@ 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	58024400 	.word	0x58024400
 80072ec:	03d09000 	.word	0x03d09000
 80072f0:	46000000 	.word	0x46000000
 80072f4:	4c742400 	.word	0x4c742400
 80072f8:	4a742400 	.word	0x4a742400
 80072fc:	4bbebc20 	.word	0x4bbebc20

08007300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800730e:	4b53      	ldr	r3, [pc, #332]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b03      	cmp	r3, #3
 8007318:	d101      	bne.n	800731e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e099      	b.n	8007452 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800731e:	4b4f      	ldr	r3, [pc, #316]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a4e      	ldr	r2, [pc, #312]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007324:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732a:	f7fa fdcd 	bl	8001ec8 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007330:	e008      	b.n	8007344 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007332:	f7fa fdc9 	bl	8001ec8 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e086      	b.n	8007452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007344:	4b45      	ldr	r3, [pc, #276]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f0      	bne.n	8007332 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007350:	4b42      	ldr	r3, [pc, #264]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	031b      	lsls	r3, r3, #12
 800735e:	493f      	ldr	r1, [pc, #252]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007360:	4313      	orrs	r3, r2
 8007362:	628b      	str	r3, [r1, #40]	@ 0x28
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	3b01      	subs	r3, #1
 800736a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	3b01      	subs	r3, #1
 8007374:	025b      	lsls	r3, r3, #9
 8007376:	b29b      	uxth	r3, r3
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	3b01      	subs	r3, #1
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	3b01      	subs	r3, #1
 800738e:	061b      	lsls	r3, r3, #24
 8007390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007394:	4931      	ldr	r1, [pc, #196]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800739a:	4b30      	ldr	r3, [pc, #192]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 800739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	492d      	ldr	r1, [pc, #180]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073ac:	4b2b      	ldr	r3, [pc, #172]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	f023 0220 	bic.w	r2, r3, #32
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	4928      	ldr	r1, [pc, #160]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073be:	4b27      	ldr	r3, [pc, #156]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c2:	4a26      	ldr	r2, [pc, #152]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073c4:	f023 0310 	bic.w	r3, r3, #16
 80073c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073ca:	4b24      	ldr	r3, [pc, #144]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ce:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <RCCEx_PLL2_Config+0x160>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	69d2      	ldr	r2, [r2, #28]
 80073d6:	00d2      	lsls	r2, r2, #3
 80073d8:	4920      	ldr	r1, [pc, #128]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073de:	4b1f      	ldr	r3, [pc, #124]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	4a1e      	ldr	r2, [pc, #120]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073e4:	f043 0310 	orr.w	r3, r3, #16
 80073e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073f0:	4b1a      	ldr	r3, [pc, #104]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	4a19      	ldr	r2, [pc, #100]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 80073f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073fc:	e00f      	b.n	800741e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d106      	bne.n	8007412 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007404:	4b15      	ldr	r3, [pc, #84]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	4a14      	ldr	r2, [pc, #80]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800740e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007410:	e005      	b.n	800741e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007412:	4b12      	ldr	r3, [pc, #72]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007416:	4a11      	ldr	r2, [pc, #68]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800741c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800741e:	4b0f      	ldr	r3, [pc, #60]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a0e      	ldr	r2, [pc, #56]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007424:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742a:	f7fa fd4d 	bl	8001ec8 <HAL_GetTick>
 800742e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007430:	e008      	b.n	8007444 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007432:	f7fa fd49 	bl	8001ec8 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e006      	b.n	8007452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <RCCEx_PLL2_Config+0x15c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0f0      	beq.n	8007432 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
 8007460:	ffff0007 	.word	0xffff0007

08007464 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007472:	4b53      	ldr	r3, [pc, #332]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d101      	bne.n	8007482 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e099      	b.n	80075b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007482:	4b4f      	ldr	r3, [pc, #316]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a4e      	ldr	r2, [pc, #312]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800748c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7fa fd1b 	bl	8001ec8 <HAL_GetTick>
 8007492:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007494:	e008      	b.n	80074a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007496:	f7fa fd17 	bl	8001ec8 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e086      	b.n	80075b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074a8:	4b45      	ldr	r3, [pc, #276]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f0      	bne.n	8007496 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074b4:	4b42      	ldr	r3, [pc, #264]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	051b      	lsls	r3, r3, #20
 80074c2:	493f      	ldr	r1, [pc, #252]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	025b      	lsls	r3, r3, #9
 80074da:	b29b      	uxth	r3, r3
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	061b      	lsls	r3, r3, #24
 80074f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074f8:	4931      	ldr	r1, [pc, #196]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074fe:	4b30      	ldr	r3, [pc, #192]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	492d      	ldr	r1, [pc, #180]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800750c:	4313      	orrs	r3, r2
 800750e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007510:	4b2b      	ldr	r3, [pc, #172]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	4928      	ldr	r1, [pc, #160]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800751e:	4313      	orrs	r3, r2
 8007520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007522:	4b27      	ldr	r3, [pc, #156]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007526:	4a26      	ldr	r2, [pc, #152]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800752c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800752e:	4b24      	ldr	r3, [pc, #144]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007532:	4b24      	ldr	r3, [pc, #144]	@ (80075c4 <RCCEx_PLL3_Config+0x160>)
 8007534:	4013      	ands	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	69d2      	ldr	r2, [r2, #28]
 800753a:	00d2      	lsls	r2, r2, #3
 800753c:	4920      	ldr	r1, [pc, #128]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007542:	4b1f      	ldr	r3, [pc, #124]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a1e      	ldr	r2, [pc, #120]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800754c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007554:	4b1a      	ldr	r3, [pc, #104]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	4a19      	ldr	r2, [pc, #100]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800755a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800755e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007560:	e00f      	b.n	8007582 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d106      	bne.n	8007576 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007568:	4b15      	ldr	r3, [pc, #84]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	4a14      	ldr	r2, [pc, #80]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800756e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007574:	e005      	b.n	8007582 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007576:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	4a11      	ldr	r2, [pc, #68]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 800757c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007582:	4b0f      	ldr	r3, [pc, #60]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a0e      	ldr	r2, [pc, #56]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 8007588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800758c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800758e:	f7fa fc9b 	bl	8001ec8 <HAL_GetTick>
 8007592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007594:	e008      	b.n	80075a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007596:	f7fa fc97 	bl	8001ec8 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e006      	b.n	80075b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <RCCEx_PLL3_Config+0x15c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0f0      	beq.n	8007596 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	58024400 	.word	0x58024400
 80075c4:	ffff0007 	.word	0xffff0007

080075c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e049      	b.n	800766e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fa fa72 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fe56 	bl	80082b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d001      	beq.n	8007690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e04c      	b.n	800772a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a26      	ldr	r2, [pc, #152]	@ (8007738 <HAL_TIM_Base_Start+0xc0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076aa:	d01d      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a22      	ldr	r2, [pc, #136]	@ (800773c <HAL_TIM_Base_Start+0xc4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a21      	ldr	r2, [pc, #132]	@ (8007740 <HAL_TIM_Base_Start+0xc8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007744 <HAL_TIM_Base_Start+0xcc>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007748 <HAL_TIM_Base_Start+0xd0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1c      	ldr	r2, [pc, #112]	@ (800774c <HAL_TIM_Base_Start+0xd4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIM_Base_Start+0x70>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007750 <HAL_TIM_Base_Start+0xd8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d115      	bne.n	8007714 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	4b19      	ldr	r3, [pc, #100]	@ (8007754 <HAL_TIM_Base_Start+0xdc>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b06      	cmp	r3, #6
 80076f8:	d015      	beq.n	8007726 <HAL_TIM_Base_Start+0xae>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007700:	d011      	beq.n	8007726 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0201 	orr.w	r2, r2, #1
 8007710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007712:	e008      	b.n	8007726 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e000      	b.n	8007728 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40000400 	.word	0x40000400
 8007740:	40000800 	.word	0x40000800
 8007744:	40000c00 	.word	0x40000c00
 8007748:	40010400 	.word	0x40010400
 800774c:	40001800 	.word	0x40001800
 8007750:	40014000 	.word	0x40014000
 8007754:	00010007 	.word	0x00010007

08007758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d001      	beq.n	8007770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e054      	b.n	800781a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a26      	ldr	r2, [pc, #152]	@ (8007828 <HAL_TIM_Base_Start_IT+0xd0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d022      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779a:	d01d      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a22      	ldr	r2, [pc, #136]	@ (800782c <HAL_TIM_Base_Start_IT+0xd4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d018      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a21      	ldr	r2, [pc, #132]	@ (8007830 <HAL_TIM_Base_Start_IT+0xd8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d013      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007834 <HAL_TIM_Base_Start_IT+0xdc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1e      	ldr	r2, [pc, #120]	@ (8007838 <HAL_TIM_Base_Start_IT+0xe0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d009      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1c      	ldr	r2, [pc, #112]	@ (800783c <HAL_TIM_Base_Start_IT+0xe4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x80>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <HAL_TIM_Base_Start_IT+0xe8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d115      	bne.n	8007804 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	4b19      	ldr	r3, [pc, #100]	@ (8007844 <HAL_TIM_Base_Start_IT+0xec>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b06      	cmp	r3, #6
 80077e8:	d015      	beq.n	8007816 <HAL_TIM_Base_Start_IT+0xbe>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f0:	d011      	beq.n	8007816 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007802:	e008      	b.n	8007816 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e000      	b.n	8007818 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40010000 	.word	0x40010000
 800782c:	40000400 	.word	0x40000400
 8007830:	40000800 	.word	0x40000800
 8007834:	40000c00 	.word	0x40000c00
 8007838:	40010400 	.word	0x40010400
 800783c:	40001800 	.word	0x40001800
 8007840:	40014000 	.word	0x40014000
 8007844:	00010007 	.word	0x00010007

08007848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e049      	b.n	80078ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fa f958 	bl	8001b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f000 fd16 	bl	80082b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <HAL_TIM_PWM_Start+0x24>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	bf14      	ite	ne
 8007914:	2301      	movne	r3, #1
 8007916:	2300      	moveq	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	e03c      	b.n	8007996 <HAL_TIM_PWM_Start+0x9e>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b04      	cmp	r3, #4
 8007920:	d109      	bne.n	8007936 <HAL_TIM_PWM_Start+0x3e>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b01      	cmp	r3, #1
 800792c:	bf14      	ite	ne
 800792e:	2301      	movne	r3, #1
 8007930:	2300      	moveq	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	e02f      	b.n	8007996 <HAL_TIM_PWM_Start+0x9e>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d109      	bne.n	8007950 <HAL_TIM_PWM_Start+0x58>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	bf14      	ite	ne
 8007948:	2301      	movne	r3, #1
 800794a:	2300      	moveq	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e022      	b.n	8007996 <HAL_TIM_PWM_Start+0x9e>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b0c      	cmp	r3, #12
 8007954:	d109      	bne.n	800796a <HAL_TIM_PWM_Start+0x72>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b01      	cmp	r3, #1
 8007960:	bf14      	ite	ne
 8007962:	2301      	movne	r3, #1
 8007964:	2300      	moveq	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	e015      	b.n	8007996 <HAL_TIM_PWM_Start+0x9e>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b10      	cmp	r3, #16
 800796e:	d109      	bne.n	8007984 <HAL_TIM_PWM_Start+0x8c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	bf14      	ite	ne
 800797c:	2301      	movne	r3, #1
 800797e:	2300      	moveq	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	e008      	b.n	8007996 <HAL_TIM_PWM_Start+0x9e>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	bf14      	ite	ne
 8007990:	2301      	movne	r3, #1
 8007992:	2300      	moveq	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e0a1      	b.n	8007ae2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <HAL_TIM_PWM_Start+0xb6>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079ac:	e023      	b.n	80079f6 <HAL_TIM_PWM_Start+0xfe>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d104      	bne.n	80079be <HAL_TIM_PWM_Start+0xc6>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079bc:	e01b      	b.n	80079f6 <HAL_TIM_PWM_Start+0xfe>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d104      	bne.n	80079ce <HAL_TIM_PWM_Start+0xd6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079cc:	e013      	b.n	80079f6 <HAL_TIM_PWM_Start+0xfe>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d104      	bne.n	80079de <HAL_TIM_PWM_Start+0xe6>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079dc:	e00b      	b.n	80079f6 <HAL_TIM_PWM_Start+0xfe>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_PWM_Start+0xf6>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079ec:	e003      	b.n	80079f6 <HAL_TIM_PWM_Start+0xfe>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2201      	movs	r2, #1
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 f874 	bl	8008aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a38      	ldr	r2, [pc, #224]	@ (8007aec <HAL_TIM_PWM_Start+0x1f4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <HAL_TIM_PWM_Start+0x13e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a37      	ldr	r2, [pc, #220]	@ (8007af0 <HAL_TIM_PWM_Start+0x1f8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00e      	beq.n	8007a36 <HAL_TIM_PWM_Start+0x13e>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a35      	ldr	r2, [pc, #212]	@ (8007af4 <HAL_TIM_PWM_Start+0x1fc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <HAL_TIM_PWM_Start+0x13e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a34      	ldr	r2, [pc, #208]	@ (8007af8 <HAL_TIM_PWM_Start+0x200>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <HAL_TIM_PWM_Start+0x13e>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a32      	ldr	r2, [pc, #200]	@ (8007afc <HAL_TIM_PWM_Start+0x204>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d101      	bne.n	8007a3a <HAL_TIM_PWM_Start+0x142>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <HAL_TIM_PWM_Start+0x144>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a25      	ldr	r2, [pc, #148]	@ (8007aec <HAL_TIM_PWM_Start+0x1f4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d022      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a62:	d01d      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a25      	ldr	r2, [pc, #148]	@ (8007b00 <HAL_TIM_PWM_Start+0x208>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d018      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a24      	ldr	r2, [pc, #144]	@ (8007b04 <HAL_TIM_PWM_Start+0x20c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d013      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a22      	ldr	r2, [pc, #136]	@ (8007b08 <HAL_TIM_PWM_Start+0x210>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00e      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1a      	ldr	r2, [pc, #104]	@ (8007af0 <HAL_TIM_PWM_Start+0x1f8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d009      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	@ (8007b0c <HAL_TIM_PWM_Start+0x214>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d004      	beq.n	8007aa0 <HAL_TIM_PWM_Start+0x1a8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a16      	ldr	r2, [pc, #88]	@ (8007af4 <HAL_TIM_PWM_Start+0x1fc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d115      	bne.n	8007acc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b10 <HAL_TIM_PWM_Start+0x218>)
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d015      	beq.n	8007ade <HAL_TIM_PWM_Start+0x1e6>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ab8:	d011      	beq.n	8007ade <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aca:	e008      	b.n	8007ade <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0201 	orr.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e000      	b.n	8007ae0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40010400 	.word	0x40010400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40001800 	.word	0x40001800
 8007b10:	00010007 	.word	0x00010007

08007b14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 ffe0 	bl	8008aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a3e      	ldr	r2, [pc, #248]	@ (8007c2c <HAL_TIM_PWM_Stop+0x118>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_TIM_PWM_Stop+0x4a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007c30 <HAL_TIM_PWM_Stop+0x11c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_TIM_PWM_Stop+0x4a>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a3b      	ldr	r2, [pc, #236]	@ (8007c34 <HAL_TIM_PWM_Stop+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_TIM_PWM_Stop+0x4a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8007c38 <HAL_TIM_PWM_Stop+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_TIM_PWM_Stop+0x4a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a38      	ldr	r2, [pc, #224]	@ (8007c3c <HAL_TIM_PWM_Stop+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d101      	bne.n	8007b62 <HAL_TIM_PWM_Stop+0x4e>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <HAL_TIM_PWM_Stop+0x50>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d017      	beq.n	8007b98 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6a1a      	ldr	r2, [r3, #32]
 8007b6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10f      	bne.n	8007b98 <HAL_TIM_PWM_Stop+0x84>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d107      	bne.n	8007b98 <HAL_TIM_PWM_Stop+0x84>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6a1a      	ldr	r2, [r3, #32]
 8007b9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10f      	bne.n	8007bc8 <HAL_TIM_PWM_Stop+0xb4>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1a      	ldr	r2, [r3, #32]
 8007bae:	f240 4344 	movw	r3, #1092	@ 0x444
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_PWM_Stop+0xb4>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <HAL_TIM_PWM_Stop+0xc4>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd6:	e023      	b.n	8007c20 <HAL_TIM_PWM_Stop+0x10c>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d104      	bne.n	8007be8 <HAL_TIM_PWM_Stop+0xd4>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be6:	e01b      	b.n	8007c20 <HAL_TIM_PWM_Stop+0x10c>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d104      	bne.n	8007bf8 <HAL_TIM_PWM_Stop+0xe4>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bf6:	e013      	b.n	8007c20 <HAL_TIM_PWM_Stop+0x10c>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b0c      	cmp	r3, #12
 8007bfc:	d104      	bne.n	8007c08 <HAL_TIM_PWM_Stop+0xf4>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c06:	e00b      	b.n	8007c20 <HAL_TIM_PWM_Stop+0x10c>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d104      	bne.n	8007c18 <HAL_TIM_PWM_Stop+0x104>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c16:	e003      	b.n	8007c20 <HAL_TIM_PWM_Stop+0x10c>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40010400 	.word	0x40010400
 8007c34:	40014000 	.word	0x40014000
 8007c38:	40014400 	.word	0x40014400
 8007c3c:	40014800 	.word	0x40014800

08007c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d020      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01b      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0202 	mvn.w	r2, #2
 8007c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 faf6 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007c90:	e005      	b.n	8007c9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fae8 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 faf9 	bl	8008290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d020      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01b      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0204 	mvn.w	r2, #4
 8007cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fad0 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007cdc:	e005      	b.n	8007cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fac2 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fad3 	bl	8008290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 0308 	and.w	r3, r3, #8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d020      	beq.n	8007d3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01b      	beq.n	8007d3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0208 	mvn.w	r2, #8
 8007d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2204      	movs	r2, #4
 8007d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 faaa 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa9c 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 faad 	bl	8008290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d020      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0310 	and.w	r3, r3, #16
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01b      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0210 	mvn.w	r2, #16
 8007d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa84 	bl	800827c <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa76 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa87 	bl	8008290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00c      	beq.n	8007dac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0201 	mvn.w	r2, #1
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7f9 fac6 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00c      	beq.n	8007dda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 ff47 	bl	8008c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00c      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 ff3f 	bl	8008c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa41 	bl	80082a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00c      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f06f 0220 	mvn.w	r2, #32
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ff07 	bl	8008c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e0ff      	b.n	800806e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b14      	cmp	r3, #20
 8007e7a:	f200 80f0 	bhi.w	800805e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	0800805f 	.word	0x0800805f
 8007e8c:	0800805f 	.word	0x0800805f
 8007e90:	0800805f 	.word	0x0800805f
 8007e94:	08007f19 	.word	0x08007f19
 8007e98:	0800805f 	.word	0x0800805f
 8007e9c:	0800805f 	.word	0x0800805f
 8007ea0:	0800805f 	.word	0x0800805f
 8007ea4:	08007f5b 	.word	0x08007f5b
 8007ea8:	0800805f 	.word	0x0800805f
 8007eac:	0800805f 	.word	0x0800805f
 8007eb0:	0800805f 	.word	0x0800805f
 8007eb4:	08007f9b 	.word	0x08007f9b
 8007eb8:	0800805f 	.word	0x0800805f
 8007ebc:	0800805f 	.word	0x0800805f
 8007ec0:	0800805f 	.word	0x0800805f
 8007ec4:	08007fdd 	.word	0x08007fdd
 8007ec8:	0800805f 	.word	0x0800805f
 8007ecc:	0800805f 	.word	0x0800805f
 8007ed0:	0800805f 	.word	0x0800805f
 8007ed4:	0800801d 	.word	0x0800801d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fa90 	bl	8008404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0208 	orr.w	r2, r2, #8
 8007ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0204 	bic.w	r2, r2, #4
 8007f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6999      	ldr	r1, [r3, #24]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	619a      	str	r2, [r3, #24]
      break;
 8007f16:	e0a5      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fb00 	bl	8008524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6999      	ldr	r1, [r3, #24]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	021a      	lsls	r2, r3, #8
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	619a      	str	r2, [r3, #24]
      break;
 8007f58:	e084      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fb69 	bl	8008638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0208 	orr.w	r2, r2, #8
 8007f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0204 	bic.w	r2, r2, #4
 8007f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69d9      	ldr	r1, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	61da      	str	r2, [r3, #28]
      break;
 8007f98:	e064      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fbd1 	bl	8008748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	021a      	lsls	r2, r3, #8
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	61da      	str	r2, [r3, #28]
      break;
 8007fda:	e043      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fc1a 	bl	800881c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0208 	orr.w	r2, r2, #8
 8007ff6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0204 	bic.w	r2, r2, #4
 8008006:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	691a      	ldr	r2, [r3, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800801a:	e023      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fc5e 	bl	80088e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008036:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008046:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	021a      	lsls	r2, r3, #8
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800805c:	e002      	b.n	8008064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
      break;
 8008062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800806c:	7dfb      	ldrb	r3, [r7, #23]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop

08008078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_TIM_ConfigClockSource+0x1c>
 8008090:	2302      	movs	r3, #2
 8008092:	e0dc      	b.n	800824e <HAL_TIM_ConfigClockSource+0x1d6>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008258 <HAL_TIM_ConfigClockSource+0x1e0>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a64      	ldr	r2, [pc, #400]	@ (800825c <HAL_TIM_ConfigClockSource+0x1e4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	f000 80a9 	beq.w	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 80080d0:	4a62      	ldr	r2, [pc, #392]	@ (800825c <HAL_TIM_ConfigClockSource+0x1e4>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	f200 80ae 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 80080d8:	4a61      	ldr	r2, [pc, #388]	@ (8008260 <HAL_TIM_ConfigClockSource+0x1e8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	f000 80a1 	beq.w	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 80080e0:	4a5f      	ldr	r2, [pc, #380]	@ (8008260 <HAL_TIM_ConfigClockSource+0x1e8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	f200 80a6 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e8:	4a5e      	ldr	r2, [pc, #376]	@ (8008264 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	f000 8099 	beq.w	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 80080f0:	4a5c      	ldr	r2, [pc, #368]	@ (8008264 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	f200 809e 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080fc:	f000 8091 	beq.w	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 8008100:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008104:	f200 8096 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800810c:	f000 8089 	beq.w	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 8008110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008114:	f200 808e 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800811c:	d03e      	beq.n	800819c <HAL_TIM_ConfigClockSource+0x124>
 800811e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008122:	f200 8087 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800812a:	f000 8086 	beq.w	800823a <HAL_TIM_ConfigClockSource+0x1c2>
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008132:	d87f      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008134:	2b70      	cmp	r3, #112	@ 0x70
 8008136:	d01a      	beq.n	800816e <HAL_TIM_ConfigClockSource+0xf6>
 8008138:	2b70      	cmp	r3, #112	@ 0x70
 800813a:	d87b      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 800813c:	2b60      	cmp	r3, #96	@ 0x60
 800813e:	d050      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x16a>
 8008140:	2b60      	cmp	r3, #96	@ 0x60
 8008142:	d877      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008144:	2b50      	cmp	r3, #80	@ 0x50
 8008146:	d03c      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0x14a>
 8008148:	2b50      	cmp	r3, #80	@ 0x50
 800814a:	d873      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 800814c:	2b40      	cmp	r3, #64	@ 0x40
 800814e:	d058      	beq.n	8008202 <HAL_TIM_ConfigClockSource+0x18a>
 8008150:	2b40      	cmp	r3, #64	@ 0x40
 8008152:	d86f      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008154:	2b30      	cmp	r3, #48	@ 0x30
 8008156:	d064      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 8008158:	2b30      	cmp	r3, #48	@ 0x30
 800815a:	d86b      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 800815c:	2b20      	cmp	r3, #32
 800815e:	d060      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 8008160:	2b20      	cmp	r3, #32
 8008162:	d867      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d05c      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 8008168:	2b10      	cmp	r3, #16
 800816a:	d05a      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x1aa>
 800816c:	e062      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800817e:	f000 fc95 	bl	8008aac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	609a      	str	r2, [r3, #8]
      break;
 800819a:	e04f      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081ac:	f000 fc7e 	bl	8008aac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081be:	609a      	str	r2, [r3, #8]
      break;
 80081c0:	e03c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ce:	461a      	mov	r2, r3
 80081d0:	f000 fbee 	bl	80089b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2150      	movs	r1, #80	@ 0x50
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fc48 	bl	8008a70 <TIM_ITRx_SetConfig>
      break;
 80081e0:	e02c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ee:	461a      	mov	r2, r3
 80081f0:	f000 fc0d 	bl	8008a0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2160      	movs	r1, #96	@ 0x60
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fc38 	bl	8008a70 <TIM_ITRx_SetConfig>
      break;
 8008200:	e01c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800820e:	461a      	mov	r2, r3
 8008210:	f000 fbce 	bl	80089b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2140      	movs	r1, #64	@ 0x40
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fc28 	bl	8008a70 <TIM_ITRx_SetConfig>
      break;
 8008220:	e00c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f000 fc1f 	bl	8008a70 <TIM_ITRx_SetConfig>
      break;
 8008232:	e003      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]
      break;
 8008238:	e000      	b.n	800823c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800823a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	ffceff88 	.word	0xffceff88
 800825c:	00100040 	.word	0x00100040
 8008260:	00100030 	.word	0x00100030
 8008264:	00100020 	.word	0x00100020

08008268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a46      	ldr	r2, [pc, #280]	@ (80083e4 <TIM_Base_SetConfig+0x12c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d013      	beq.n	80082f8 <TIM_Base_SetConfig+0x40>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d6:	d00f      	beq.n	80082f8 <TIM_Base_SetConfig+0x40>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a43      	ldr	r2, [pc, #268]	@ (80083e8 <TIM_Base_SetConfig+0x130>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00b      	beq.n	80082f8 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a42      	ldr	r2, [pc, #264]	@ (80083ec <TIM_Base_SetConfig+0x134>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d007      	beq.n	80082f8 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a41      	ldr	r2, [pc, #260]	@ (80083f0 <TIM_Base_SetConfig+0x138>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d003      	beq.n	80082f8 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a40      	ldr	r2, [pc, #256]	@ (80083f4 <TIM_Base_SetConfig+0x13c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d108      	bne.n	800830a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a35      	ldr	r2, [pc, #212]	@ (80083e4 <TIM_Base_SetConfig+0x12c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d01f      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008318:	d01b      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a32      	ldr	r2, [pc, #200]	@ (80083e8 <TIM_Base_SetConfig+0x130>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d017      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a31      	ldr	r2, [pc, #196]	@ (80083ec <TIM_Base_SetConfig+0x134>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a30      	ldr	r2, [pc, #192]	@ (80083f0 <TIM_Base_SetConfig+0x138>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00f      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a2f      	ldr	r2, [pc, #188]	@ (80083f4 <TIM_Base_SetConfig+0x13c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00b      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2e      	ldr	r2, [pc, #184]	@ (80083f8 <TIM_Base_SetConfig+0x140>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a2d      	ldr	r2, [pc, #180]	@ (80083fc <TIM_Base_SetConfig+0x144>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_Base_SetConfig+0x9a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2c      	ldr	r2, [pc, #176]	@ (8008400 <TIM_Base_SetConfig+0x148>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d108      	bne.n	8008364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a16      	ldr	r2, [pc, #88]	@ (80083e4 <TIM_Base_SetConfig+0x12c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00f      	beq.n	80083b0 <TIM_Base_SetConfig+0xf8>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a18      	ldr	r2, [pc, #96]	@ (80083f4 <TIM_Base_SetConfig+0x13c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00b      	beq.n	80083b0 <TIM_Base_SetConfig+0xf8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <TIM_Base_SetConfig+0x140>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d007      	beq.n	80083b0 <TIM_Base_SetConfig+0xf8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <TIM_Base_SetConfig+0x144>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_Base_SetConfig+0xf8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <TIM_Base_SetConfig+0x148>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d103      	bne.n	80083b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d105      	bne.n	80083d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f023 0201 	bic.w	r2, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	611a      	str	r2, [r3, #16]
  }
}
 80083d6:	bf00      	nop
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40010000 	.word	0x40010000
 80083e8:	40000400 	.word	0x40000400
 80083ec:	40000800 	.word	0x40000800
 80083f0:	40000c00 	.word	0x40000c00
 80083f4:	40010400 	.word	0x40010400
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40014400 	.word	0x40014400
 8008400:	40014800 	.word	0x40014800

08008404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f023 0201 	bic.w	r2, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4b37      	ldr	r3, [pc, #220]	@ (800850c <TIM_OC1_SetConfig+0x108>)
 8008430:	4013      	ands	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0303 	bic.w	r3, r3, #3
 800843a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f023 0302 	bic.w	r3, r3, #2
 800844c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a2d      	ldr	r2, [pc, #180]	@ (8008510 <TIM_OC1_SetConfig+0x10c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00f      	beq.n	8008480 <TIM_OC1_SetConfig+0x7c>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a2c      	ldr	r2, [pc, #176]	@ (8008514 <TIM_OC1_SetConfig+0x110>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00b      	beq.n	8008480 <TIM_OC1_SetConfig+0x7c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a2b      	ldr	r2, [pc, #172]	@ (8008518 <TIM_OC1_SetConfig+0x114>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d007      	beq.n	8008480 <TIM_OC1_SetConfig+0x7c>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a2a      	ldr	r2, [pc, #168]	@ (800851c <TIM_OC1_SetConfig+0x118>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d003      	beq.n	8008480 <TIM_OC1_SetConfig+0x7c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a29      	ldr	r2, [pc, #164]	@ (8008520 <TIM_OC1_SetConfig+0x11c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d10c      	bne.n	800849a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f023 0308 	bic.w	r3, r3, #8
 8008486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 0304 	bic.w	r3, r3, #4
 8008498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a1c      	ldr	r2, [pc, #112]	@ (8008510 <TIM_OC1_SetConfig+0x10c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00f      	beq.n	80084c2 <TIM_OC1_SetConfig+0xbe>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <TIM_OC1_SetConfig+0x110>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00b      	beq.n	80084c2 <TIM_OC1_SetConfig+0xbe>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008518 <TIM_OC1_SetConfig+0x114>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d007      	beq.n	80084c2 <TIM_OC1_SetConfig+0xbe>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a19      	ldr	r2, [pc, #100]	@ (800851c <TIM_OC1_SetConfig+0x118>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_OC1_SetConfig+0xbe>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a18      	ldr	r2, [pc, #96]	@ (8008520 <TIM_OC1_SetConfig+0x11c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d111      	bne.n	80084e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	621a      	str	r2, [r3, #32]
}
 8008500:	bf00      	nop
 8008502:	371c      	adds	r7, #28
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	fffeff8f 	.word	0xfffeff8f
 8008510:	40010000 	.word	0x40010000
 8008514:	40010400 	.word	0x40010400
 8008518:	40014000 	.word	0x40014000
 800851c:	40014400 	.word	0x40014400
 8008520:	40014800 	.word	0x40014800

08008524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f023 0210 	bic.w	r2, r3, #16
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4b34      	ldr	r3, [pc, #208]	@ (8008620 <TIM_OC2_SetConfig+0xfc>)
 8008550:	4013      	ands	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800855a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f023 0320 	bic.w	r3, r3, #32
 800856e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a29      	ldr	r2, [pc, #164]	@ (8008624 <TIM_OC2_SetConfig+0x100>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC2_SetConfig+0x68>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a28      	ldr	r2, [pc, #160]	@ (8008628 <TIM_OC2_SetConfig+0x104>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d10d      	bne.n	80085a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008624 <TIM_OC2_SetConfig+0x100>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00f      	beq.n	80085d0 <TIM_OC2_SetConfig+0xac>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a1d      	ldr	r2, [pc, #116]	@ (8008628 <TIM_OC2_SetConfig+0x104>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00b      	beq.n	80085d0 <TIM_OC2_SetConfig+0xac>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a1c      	ldr	r2, [pc, #112]	@ (800862c <TIM_OC2_SetConfig+0x108>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d007      	beq.n	80085d0 <TIM_OC2_SetConfig+0xac>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008630 <TIM_OC2_SetConfig+0x10c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC2_SetConfig+0xac>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008634 <TIM_OC2_SetConfig+0x110>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d113      	bne.n	80085f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	bf00      	nop
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	feff8fff 	.word	0xfeff8fff
 8008624:	40010000 	.word	0x40010000
 8008628:	40010400 	.word	0x40010400
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800

08008638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4b33      	ldr	r3, [pc, #204]	@ (8008730 <TIM_OC3_SetConfig+0xf8>)
 8008664:	4013      	ands	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a28      	ldr	r2, [pc, #160]	@ (8008734 <TIM_OC3_SetConfig+0xfc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d003      	beq.n	800869e <TIM_OC3_SetConfig+0x66>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a27      	ldr	r2, [pc, #156]	@ (8008738 <TIM_OC3_SetConfig+0x100>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d10d      	bne.n	80086ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008734 <TIM_OC3_SetConfig+0xfc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00f      	beq.n	80086e2 <TIM_OC3_SetConfig+0xaa>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008738 <TIM_OC3_SetConfig+0x100>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00b      	beq.n	80086e2 <TIM_OC3_SetConfig+0xaa>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a1b      	ldr	r2, [pc, #108]	@ (800873c <TIM_OC3_SetConfig+0x104>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d007      	beq.n	80086e2 <TIM_OC3_SetConfig+0xaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008740 <TIM_OC3_SetConfig+0x108>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d003      	beq.n	80086e2 <TIM_OC3_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a19      	ldr	r2, [pc, #100]	@ (8008744 <TIM_OC3_SetConfig+0x10c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d113      	bne.n	800870a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	621a      	str	r2, [r3, #32]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	fffeff8f 	.word	0xfffeff8f
 8008734:	40010000 	.word	0x40010000
 8008738:	40010400 	.word	0x40010400
 800873c:	40014000 	.word	0x40014000
 8008740:	40014400 	.word	0x40014400
 8008744:	40014800 	.word	0x40014800

08008748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4b24      	ldr	r3, [pc, #144]	@ (8008804 <TIM_OC4_SetConfig+0xbc>)
 8008774:	4013      	ands	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800877e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	031b      	lsls	r3, r3, #12
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a19      	ldr	r2, [pc, #100]	@ (8008808 <TIM_OC4_SetConfig+0xc0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00f      	beq.n	80087c8 <TIM_OC4_SetConfig+0x80>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <TIM_OC4_SetConfig+0xc4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00b      	beq.n	80087c8 <TIM_OC4_SetConfig+0x80>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <TIM_OC4_SetConfig+0xc8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d007      	beq.n	80087c8 <TIM_OC4_SetConfig+0x80>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a16      	ldr	r2, [pc, #88]	@ (8008814 <TIM_OC4_SetConfig+0xcc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_OC4_SetConfig+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a15      	ldr	r2, [pc, #84]	@ (8008818 <TIM_OC4_SetConfig+0xd0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d109      	bne.n	80087dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	019b      	lsls	r3, r3, #6
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	621a      	str	r2, [r3, #32]
}
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	feff8fff 	.word	0xfeff8fff
 8008808:	40010000 	.word	0x40010000
 800880c:	40010400 	.word	0x40010400
 8008810:	40014000 	.word	0x40014000
 8008814:	40014400 	.word	0x40014400
 8008818:	40014800 	.word	0x40014800

0800881c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4b21      	ldr	r3, [pc, #132]	@ (80088cc <TIM_OC5_SetConfig+0xb0>)
 8008848:	4013      	ands	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800885c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <TIM_OC5_SetConfig+0xb4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00f      	beq.n	8008892 <TIM_OC5_SetConfig+0x76>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a17      	ldr	r2, [pc, #92]	@ (80088d4 <TIM_OC5_SetConfig+0xb8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00b      	beq.n	8008892 <TIM_OC5_SetConfig+0x76>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a16      	ldr	r2, [pc, #88]	@ (80088d8 <TIM_OC5_SetConfig+0xbc>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d007      	beq.n	8008892 <TIM_OC5_SetConfig+0x76>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a15      	ldr	r2, [pc, #84]	@ (80088dc <TIM_OC5_SetConfig+0xc0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d003      	beq.n	8008892 <TIM_OC5_SetConfig+0x76>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a14      	ldr	r2, [pc, #80]	@ (80088e0 <TIM_OC5_SetConfig+0xc4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d109      	bne.n	80088a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	021b      	lsls	r3, r3, #8
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	621a      	str	r2, [r3, #32]
}
 80088c0:	bf00      	nop
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	fffeff8f 	.word	0xfffeff8f
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4b22      	ldr	r3, [pc, #136]	@ (8008998 <TIM_OC6_SetConfig+0xb4>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	021b      	lsls	r3, r3, #8
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	051b      	lsls	r3, r3, #20
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a19      	ldr	r2, [pc, #100]	@ (800899c <TIM_OC6_SetConfig+0xb8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00f      	beq.n	800895c <TIM_OC6_SetConfig+0x78>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a18      	ldr	r2, [pc, #96]	@ (80089a0 <TIM_OC6_SetConfig+0xbc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00b      	beq.n	800895c <TIM_OC6_SetConfig+0x78>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a17      	ldr	r2, [pc, #92]	@ (80089a4 <TIM_OC6_SetConfig+0xc0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d007      	beq.n	800895c <TIM_OC6_SetConfig+0x78>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a16      	ldr	r2, [pc, #88]	@ (80089a8 <TIM_OC6_SetConfig+0xc4>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d003      	beq.n	800895c <TIM_OC6_SetConfig+0x78>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a15      	ldr	r2, [pc, #84]	@ (80089ac <TIM_OC6_SetConfig+0xc8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d109      	bne.n	8008970 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	029b      	lsls	r3, r3, #10
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	feff8fff 	.word	0xfeff8fff
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40014000 	.word	0x40014000
 80089a8:	40014400 	.word	0x40014400
 80089ac:	40014800 	.word	0x40014800

080089b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f023 0201 	bic.w	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f023 030a 	bic.w	r3, r3, #10
 80089ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	621a      	str	r2, [r3, #32]
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b087      	sub	sp, #28
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f023 0210 	bic.w	r2, r3, #16
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	031b      	lsls	r3, r3, #12
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	621a      	str	r2, [r3, #32]
}
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4b09      	ldr	r3, [pc, #36]	@ (8008aa8 <TIM_ITRx_SetConfig+0x38>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	f043 0307 	orr.w	r3, r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	609a      	str	r2, [r3, #8]
}
 8008a9a:	bf00      	nop
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	ffcfff8f 	.word	0xffcfff8f

08008aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	021a      	lsls	r2, r3, #8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	609a      	str	r2, [r3, #8]
}
 8008ae0:	bf00      	nop
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f003 031f 	and.w	r3, r3, #31
 8008afe:	2201      	movs	r2, #1
 8008b00:	fa02 f303 	lsl.w	r3, r2, r3
 8008b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6a1a      	ldr	r2, [r3, #32]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	401a      	ands	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f003 031f 	and.w	r3, r3, #31
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	fa01 f303 	lsl.w	r3, r1, r3
 8008b24:	431a      	orrs	r2, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	621a      	str	r2, [r3, #32]
}
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e06d      	b.n	8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a30      	ldr	r2, [pc, #192]	@ (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d108      	bne.n	8008b96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a20      	ldr	r2, [pc, #128]	@ (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d022      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc2:	d01d      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a15      	ldr	r2, [pc, #84]	@ (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a16      	ldr	r2, [pc, #88]	@ (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a15      	ldr	r2, [pc, #84]	@ (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10c      	bne.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40010400 	.word	0x40010400
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40001800 	.word	0x40001800
 8008c50:	40014000 	.word	0x40014000

08008c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e042      	b.n	8008d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d106      	bne.n	8008cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7f8 ffe5 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2224      	movs	r2, #36	@ 0x24
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0201 	bic.w	r2, r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fac0 	bl	800a260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fd55 	bl	8009790 <UART_SetConfig>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e01b      	b.n	8008d28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fb3f 	bl	800a3a4 <UART_CheckIdleState>
 8008d26:	4603      	mov	r3, r0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	@ 0x28
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	d17b      	bne.n	8008e42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <HAL_UART_Transmit+0x26>
 8008d50:	88fb      	ldrh	r3, [r7, #6]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e074      	b.n	8008e44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2221      	movs	r2, #33	@ 0x21
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d6a:	f7f9 f8ad 	bl	8001ec8 <HAL_GetTick>
 8008d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	88fa      	ldrh	r2, [r7, #6]
 8008d74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	88fa      	ldrh	r2, [r7, #6]
 8008d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d88:	d108      	bne.n	8008d9c <HAL_UART_Transmit+0x6c>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d104      	bne.n	8008d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	61bb      	str	r3, [r7, #24]
 8008d9a:	e003      	b.n	8008da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008da4:	e030      	b.n	8008e08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2200      	movs	r2, #0
 8008dae:	2180      	movs	r1, #128	@ 0x80
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f001 fba1 	bl	800a4f8 <UART_WaitOnFlagUntilTimeout>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e03d      	b.n	8008e44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10b      	bne.n	8008de6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ddc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	3302      	adds	r3, #2
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	e007      	b.n	8008df6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	3301      	adds	r3, #1
 8008df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1c8      	bne.n	8008da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2140      	movs	r1, #64	@ 0x40
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f001 fb6a 	bl	800a4f8 <UART_WaitOnFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e006      	b.n	8008e44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e000      	b.n	8008e44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e42:	2302      	movs	r3, #2
  }
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	@ 0x28
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e62:	2b20      	cmp	r3, #32
 8008e64:	f040 80b5 	bne.w	8008fd2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_UART_Receive+0x28>
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e0ad      	b.n	8008fd4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2222      	movs	r2, #34	@ 0x22
 8008e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e8e:	f7f9 f81b 	bl	8001ec8 <HAL_GetTick>
 8008e92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	88fa      	ldrh	r2, [r7, #6]
 8008ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eac:	d10e      	bne.n	8008ecc <HAL_UART_Receive+0x80>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d105      	bne.n	8008ec2 <HAL_UART_Receive+0x76>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ec0:	e02d      	b.n	8008f1e <HAL_UART_Receive+0xd2>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	22ff      	movs	r2, #255	@ 0xff
 8008ec6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eca:	e028      	b.n	8008f1e <HAL_UART_Receive+0xd2>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10d      	bne.n	8008ef0 <HAL_UART_Receive+0xa4>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d104      	bne.n	8008ee6 <HAL_UART_Receive+0x9a>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	22ff      	movs	r2, #255	@ 0xff
 8008ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ee4:	e01b      	b.n	8008f1e <HAL_UART_Receive+0xd2>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	227f      	movs	r2, #127	@ 0x7f
 8008eea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008eee:	e016      	b.n	8008f1e <HAL_UART_Receive+0xd2>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ef8:	d10d      	bne.n	8008f16 <HAL_UART_Receive+0xca>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <HAL_UART_Receive+0xc0>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	227f      	movs	r2, #127	@ 0x7f
 8008f06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f0a:	e008      	b.n	8008f1e <HAL_UART_Receive+0xd2>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	223f      	movs	r2, #63	@ 0x3f
 8008f10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f14:	e003      	b.n	8008f1e <HAL_UART_Receive+0xd2>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f24:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f2e:	d108      	bne.n	8008f42 <HAL_UART_Receive+0xf6>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d104      	bne.n	8008f42 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	e003      	b.n	8008f4a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f4a:	e036      	b.n	8008fba <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2200      	movs	r2, #0
 8008f54:	2120      	movs	r1, #32
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f001 face 	bl	800a4f8 <UART_WaitOnFlagUntilTimeout>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d005      	beq.n	8008f6e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e032      	b.n	8008fd4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10c      	bne.n	8008f8e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	8a7b      	ldrh	r3, [r7, #18]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	3302      	adds	r3, #2
 8008f8a:	61bb      	str	r3, [r7, #24]
 8008f8c:	e00c      	b.n	8008fa8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	8a7b      	ldrh	r3, [r7, #18]
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1c2      	bne.n	8008f4c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e000      	b.n	8008fd4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008fd2:	2302      	movs	r3, #2
  }
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b0ba      	sub	sp, #232	@ 0xe8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009002:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009006:	f640 030f 	movw	r3, #2063	@ 0x80f
 800900a:	4013      	ands	r3, r2
 800900c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11b      	bne.n	8009050 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d015      	beq.n	8009050 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d009      	beq.n	8009050 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8377 	beq.w	8009734 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
      }
      return;
 800904e:	e371      	b.n	8009734 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 8123 	beq.w	80092a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800905a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800905e:	4b8d      	ldr	r3, [pc, #564]	@ (8009294 <HAL_UART_IRQHandler+0x2b8>)
 8009060:	4013      	ands	r3, r2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800906a:	4b8b      	ldr	r3, [pc, #556]	@ (8009298 <HAL_UART_IRQHandler+0x2bc>)
 800906c:	4013      	ands	r3, r2
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 8116 	beq.w	80092a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d011      	beq.n	80090a4 <HAL_UART_IRQHandler+0xc8>
 8009080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2201      	movs	r2, #1
 8009092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800909a:	f043 0201 	orr.w	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d011      	beq.n	80090d4 <HAL_UART_IRQHandler+0xf8>
 80090b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2202      	movs	r2, #2
 80090c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ca:	f043 0204 	orr.w	r2, r3, #4
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d011      	beq.n	8009104 <HAL_UART_IRQHandler+0x128>
 80090e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2204      	movs	r2, #4
 80090f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fa:	f043 0202 	orr.w	r2, r3, #2
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d017      	beq.n	8009140 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d105      	bne.n	8009128 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800911c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009120:	4b5c      	ldr	r3, [pc, #368]	@ (8009294 <HAL_UART_IRQHandler+0x2b8>)
 8009122:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2208      	movs	r2, #8
 800912e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009136:	f043 0208 	orr.w	r2, r3, #8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009148:	2b00      	cmp	r3, #0
 800914a:	d012      	beq.n	8009172 <HAL_UART_IRQHandler+0x196>
 800914c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00c      	beq.n	8009172 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009168:	f043 0220 	orr.w	r2, r3, #32
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 82dd 	beq.w	8009738 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800917e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d013      	beq.n	80091b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800918a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	d105      	bne.n	80091a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800919a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d003      	beq.n	80091b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c6:	2b40      	cmp	r3, #64	@ 0x40
 80091c8:	d005      	beq.n	80091d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d054      	beq.n	8009280 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 f9fc 	bl	800a5d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e6:	2b40      	cmp	r3, #64	@ 0x40
 80091e8:	d146      	bne.n	8009278 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009200:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009216:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800921a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800922e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1d9      	bne.n	80091ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800923c:	2b00      	cmp	r3, #0
 800923e:	d017      	beq.n	8009270 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009246:	4a15      	ldr	r2, [pc, #84]	@ (800929c <HAL_UART_IRQHandler+0x2c0>)
 8009248:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009250:	4618      	mov	r0, r3
 8009252:	f7f9 fa7f 	bl	8002754 <HAL_DMA_Abort_IT>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d019      	beq.n	8009290 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800926a:	4610      	mov	r0, r2
 800926c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800926e:	e00f      	b.n	8009290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fa77 	bl	8009764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009276:	e00b      	b.n	8009290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fa73 	bl	8009764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927e:	e007      	b.n	8009290 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fa6f 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800928e:	e253      	b.n	8009738 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009290:	bf00      	nop
    return;
 8009292:	e251      	b.n	8009738 <HAL_UART_IRQHandler+0x75c>
 8009294:	10000001 	.word	0x10000001
 8009298:	04000120 	.word	0x04000120
 800929c:	0800a6a1 	.word	0x0800a6a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	f040 81e7 	bne.w	8009678 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ae:	f003 0310 	and.w	r3, r3, #16
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 81e0 	beq.w	8009678 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 81d9 	beq.w	8009678 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2210      	movs	r2, #16
 80092cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092d8:	2b40      	cmp	r3, #64	@ 0x40
 80092da:	f040 8151 	bne.w	8009580 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a96      	ldr	r2, [pc, #600]	@ (8009540 <HAL_UART_IRQHandler+0x564>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d068      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a93      	ldr	r2, [pc, #588]	@ (8009544 <HAL_UART_IRQHandler+0x568>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d061      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a91      	ldr	r2, [pc, #580]	@ (8009548 <HAL_UART_IRQHandler+0x56c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d05a      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a8e      	ldr	r2, [pc, #568]	@ (800954c <HAL_UART_IRQHandler+0x570>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d053      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a8c      	ldr	r2, [pc, #560]	@ (8009550 <HAL_UART_IRQHandler+0x574>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d04c      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a89      	ldr	r2, [pc, #548]	@ (8009554 <HAL_UART_IRQHandler+0x578>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d045      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a87      	ldr	r2, [pc, #540]	@ (8009558 <HAL_UART_IRQHandler+0x57c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d03e      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a84      	ldr	r2, [pc, #528]	@ (800955c <HAL_UART_IRQHandler+0x580>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d037      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a82      	ldr	r2, [pc, #520]	@ (8009560 <HAL_UART_IRQHandler+0x584>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d030      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a7f      	ldr	r2, [pc, #508]	@ (8009564 <HAL_UART_IRQHandler+0x588>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d029      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a7d      	ldr	r2, [pc, #500]	@ (8009568 <HAL_UART_IRQHandler+0x58c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d022      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a7a      	ldr	r2, [pc, #488]	@ (800956c <HAL_UART_IRQHandler+0x590>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01b      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a78      	ldr	r2, [pc, #480]	@ (8009570 <HAL_UART_IRQHandler+0x594>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d014      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a75      	ldr	r2, [pc, #468]	@ (8009574 <HAL_UART_IRQHandler+0x598>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00d      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a73      	ldr	r2, [pc, #460]	@ (8009578 <HAL_UART_IRQHandler+0x59c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d006      	beq.n	80093be <HAL_UART_IRQHandler+0x3e2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a70      	ldr	r2, [pc, #448]	@ (800957c <HAL_UART_IRQHandler+0x5a0>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d106      	bne.n	80093cc <HAL_UART_IRQHandler+0x3f0>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	e005      	b.n	80093d8 <HAL_UART_IRQHandler+0x3fc>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 81ab 	beq.w	800973c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093f0:	429a      	cmp	r2, r3
 80093f2:	f080 81a3 	bcs.w	800973c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800940c:	f000 8087 	beq.w	800951e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800942c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800943a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800943e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009446:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1da      	bne.n	8009410 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800946a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800946c:	f023 0301 	bic.w	r3, r3, #1
 8009470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800947e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009482:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009486:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e1      	bne.n	800945a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e3      	bne.n	8009496 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ec:	f023 0310 	bic.w	r3, r3, #16
 80094f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009500:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009504:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800950c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e4      	bne.n	80094dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009518:	4618      	mov	r0, r3
 800951a:	f7f8 fdfd 	bl	8002118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2202      	movs	r2, #2
 8009522:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009530:	b29b      	uxth	r3, r3
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	b29b      	uxth	r3, r3
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f91d 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800953e:	e0fd      	b.n	800973c <HAL_UART_IRQHandler+0x760>
 8009540:	40020010 	.word	0x40020010
 8009544:	40020028 	.word	0x40020028
 8009548:	40020040 	.word	0x40020040
 800954c:	40020058 	.word	0x40020058
 8009550:	40020070 	.word	0x40020070
 8009554:	40020088 	.word	0x40020088
 8009558:	400200a0 	.word	0x400200a0
 800955c:	400200b8 	.word	0x400200b8
 8009560:	40020410 	.word	0x40020410
 8009564:	40020428 	.word	0x40020428
 8009568:	40020440 	.word	0x40020440
 800956c:	40020458 	.word	0x40020458
 8009570:	40020470 	.word	0x40020470
 8009574:	40020488 	.word	0x40020488
 8009578:	400204a0 	.word	0x400204a0
 800957c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800958c:	b29b      	uxth	r3, r3
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 80cf 	beq.w	8009740 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80095a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80ca 	beq.w	8009740 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e4      	bne.n	80095ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	623b      	str	r3, [r7, #32]
   return(result);
 80095f2:	6a3a      	ldr	r2, [r7, #32]
 80095f4:	4b55      	ldr	r3, [pc, #340]	@ (800974c <HAL_UART_IRQHandler+0x770>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3308      	adds	r3, #8
 8009602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009606:	633a      	str	r2, [r7, #48]	@ 0x30
 8009608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800960c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e3      	bne.n	80095e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	e853 3f00 	ldrex	r3, [r3]
 800963a:	60fb      	str	r3, [r7, #12]
   return(result);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0310 	bic.w	r3, r3, #16
 8009642:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	69b9      	ldr	r1, [r7, #24]
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	617b      	str	r3, [r7, #20]
   return(result);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e4      	bne.n	800962e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800966a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f881 	bl	8009778 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009676:	e063      	b.n	8009740 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800967c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00e      	beq.n	80096a2 <HAL_UART_IRQHandler+0x6c6>
 8009684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d008      	beq.n	80096a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f841 	bl	800a722 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096a0:	e051      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d014      	beq.n	80096d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d105      	bne.n	80096c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d008      	beq.n	80096d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d03a      	beq.n	8009744 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
    }
    return;
 80096d6:	e035      	b.n	8009744 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <HAL_UART_IRQHandler+0x71c>
 80096e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 ffeb 	bl	800a6cc <UART_EndTransmit_IT>
    return;
 80096f6:	e026      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <HAL_UART_IRQHandler+0x73c>
 8009704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009708:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 f81a 	bl	800a74a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009716:	e016      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800971c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <HAL_UART_IRQHandler+0x76a>
 8009724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009728:	2b00      	cmp	r3, #0
 800972a:	da0c      	bge.n	8009746 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 f802 	bl	800a736 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009732:	e008      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
      return;
 8009734:	bf00      	nop
 8009736:	e006      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
    return;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
      return;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
      return;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_UART_IRQHandler+0x76a>
    return;
 8009744:	bf00      	nop
  }
}
 8009746:	37e8      	adds	r7, #232	@ 0xe8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	effffffe 	.word	0xeffffffe

08009750 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009794:	b092      	sub	sp, #72	@ 0x48
 8009796:	af00      	add	r7, sp, #0
 8009798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	431a      	orrs	r2, r3
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4bbe      	ldr	r3, [pc, #760]	@ (8009ab8 <UART_SetConfig+0x328>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4ab3      	ldr	r2, [pc, #716]	@ (8009abc <UART_SetConfig+0x32c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097f8:	4313      	orrs	r3, r2
 80097fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	4baf      	ldr	r3, [pc, #700]	@ (8009ac0 <UART_SetConfig+0x330>)
 8009804:	4013      	ands	r3, r2
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	6812      	ldr	r2, [r2, #0]
 800980a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800980c:	430b      	orrs	r3, r1
 800980e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	f023 010f 	bic.w	r1, r3, #15
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4aa6      	ldr	r2, [pc, #664]	@ (8009ac4 <UART_SetConfig+0x334>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d177      	bne.n	8009920 <UART_SetConfig+0x190>
 8009830:	4ba5      	ldr	r3, [pc, #660]	@ (8009ac8 <UART_SetConfig+0x338>)
 8009832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009834:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009838:	2b28      	cmp	r3, #40	@ 0x28
 800983a:	d86d      	bhi.n	8009918 <UART_SetConfig+0x188>
 800983c:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <UART_SetConfig+0xb4>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	080098e9 	.word	0x080098e9
 8009848:	08009919 	.word	0x08009919
 800984c:	08009919 	.word	0x08009919
 8009850:	08009919 	.word	0x08009919
 8009854:	08009919 	.word	0x08009919
 8009858:	08009919 	.word	0x08009919
 800985c:	08009919 	.word	0x08009919
 8009860:	08009919 	.word	0x08009919
 8009864:	080098f1 	.word	0x080098f1
 8009868:	08009919 	.word	0x08009919
 800986c:	08009919 	.word	0x08009919
 8009870:	08009919 	.word	0x08009919
 8009874:	08009919 	.word	0x08009919
 8009878:	08009919 	.word	0x08009919
 800987c:	08009919 	.word	0x08009919
 8009880:	08009919 	.word	0x08009919
 8009884:	080098f9 	.word	0x080098f9
 8009888:	08009919 	.word	0x08009919
 800988c:	08009919 	.word	0x08009919
 8009890:	08009919 	.word	0x08009919
 8009894:	08009919 	.word	0x08009919
 8009898:	08009919 	.word	0x08009919
 800989c:	08009919 	.word	0x08009919
 80098a0:	08009919 	.word	0x08009919
 80098a4:	08009901 	.word	0x08009901
 80098a8:	08009919 	.word	0x08009919
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009919 	.word	0x08009919
 80098b4:	08009919 	.word	0x08009919
 80098b8:	08009919 	.word	0x08009919
 80098bc:	08009919 	.word	0x08009919
 80098c0:	08009919 	.word	0x08009919
 80098c4:	08009909 	.word	0x08009909
 80098c8:	08009919 	.word	0x08009919
 80098cc:	08009919 	.word	0x08009919
 80098d0:	08009919 	.word	0x08009919
 80098d4:	08009919 	.word	0x08009919
 80098d8:	08009919 	.word	0x08009919
 80098dc:	08009919 	.word	0x08009919
 80098e0:	08009919 	.word	0x08009919
 80098e4:	08009911 	.word	0x08009911
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e222      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e21e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80098f8:	2308      	movs	r3, #8
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e21a      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009900:	2310      	movs	r3, #16
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e216      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009908:	2320      	movs	r3, #32
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e212      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009910:	2340      	movs	r3, #64	@ 0x40
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e20e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009918:	2380      	movs	r3, #128	@ 0x80
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e20a      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a69      	ldr	r2, [pc, #420]	@ (8009acc <UART_SetConfig+0x33c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d130      	bne.n	800998c <UART_SetConfig+0x1fc>
 800992a:	4b67      	ldr	r3, [pc, #412]	@ (8009ac8 <UART_SetConfig+0x338>)
 800992c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800992e:	f003 0307 	and.w	r3, r3, #7
 8009932:	2b05      	cmp	r3, #5
 8009934:	d826      	bhi.n	8009984 <UART_SetConfig+0x1f4>
 8009936:	a201      	add	r2, pc, #4	@ (adr r2, 800993c <UART_SetConfig+0x1ac>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009955 	.word	0x08009955
 8009940:	0800995d 	.word	0x0800995d
 8009944:	08009965 	.word	0x08009965
 8009948:	0800996d 	.word	0x0800996d
 800994c:	08009975 	.word	0x08009975
 8009950:	0800997d 	.word	0x0800997d
 8009954:	2300      	movs	r3, #0
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e1ec      	b.n	8009d36 <UART_SetConfig+0x5a6>
 800995c:	2304      	movs	r3, #4
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e1e8      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e1e4      	b.n	8009d36 <UART_SetConfig+0x5a6>
 800996c:	2310      	movs	r3, #16
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e1e0      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009974:	2320      	movs	r3, #32
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e1dc      	b.n	8009d36 <UART_SetConfig+0x5a6>
 800997c:	2340      	movs	r3, #64	@ 0x40
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e1d8      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009984:	2380      	movs	r3, #128	@ 0x80
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e1d4      	b.n	8009d36 <UART_SetConfig+0x5a6>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a4f      	ldr	r2, [pc, #316]	@ (8009ad0 <UART_SetConfig+0x340>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d130      	bne.n	80099f8 <UART_SetConfig+0x268>
 8009996:	4b4c      	ldr	r3, [pc, #304]	@ (8009ac8 <UART_SetConfig+0x338>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	2b05      	cmp	r3, #5
 80099a0:	d826      	bhi.n	80099f0 <UART_SetConfig+0x260>
 80099a2:	a201      	add	r2, pc, #4	@ (adr r2, 80099a8 <UART_SetConfig+0x218>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099c9 	.word	0x080099c9
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	2300      	movs	r3, #0
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e1b6      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099c8:	2304      	movs	r3, #4
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e1b2      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099d0:	2308      	movs	r3, #8
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e1ae      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e1aa      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099e0:	2320      	movs	r3, #32
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e1a6      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099e8:	2340      	movs	r3, #64	@ 0x40
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e1a2      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099f0:	2380      	movs	r3, #128	@ 0x80
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e19e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a35      	ldr	r2, [pc, #212]	@ (8009ad4 <UART_SetConfig+0x344>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d130      	bne.n	8009a64 <UART_SetConfig+0x2d4>
 8009a02:	4b31      	ldr	r3, [pc, #196]	@ (8009ac8 <UART_SetConfig+0x338>)
 8009a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b05      	cmp	r3, #5
 8009a0c:	d826      	bhi.n	8009a5c <UART_SetConfig+0x2cc>
 8009a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a14 <UART_SetConfig+0x284>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a35 	.word	0x08009a35
 8009a1c:	08009a3d 	.word	0x08009a3d
 8009a20:	08009a45 	.word	0x08009a45
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a55 	.word	0x08009a55
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a32:	e180      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a34:	2304      	movs	r3, #4
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e17c      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e178      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a44:	2310      	movs	r3, #16
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e174      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a4c:	2320      	movs	r3, #32
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a52:	e170      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a54:	2340      	movs	r3, #64	@ 0x40
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5a:	e16c      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a5c:	2380      	movs	r3, #128	@ 0x80
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a62:	e168      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad8 <UART_SetConfig+0x348>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d142      	bne.n	8009af4 <UART_SetConfig+0x364>
 8009a6e:	4b16      	ldr	r3, [pc, #88]	@ (8009ac8 <UART_SetConfig+0x338>)
 8009a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b05      	cmp	r3, #5
 8009a78:	d838      	bhi.n	8009aec <UART_SetConfig+0x35c>
 8009a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a80 <UART_SetConfig+0x2f0>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009add 	.word	0x08009add
 8009a94:	08009ae5 	.word	0x08009ae5
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e14a      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e146      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e142      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e13e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009ab8:	cfff69f3 	.word	0xcfff69f3
 8009abc:	58000c00 	.word	0x58000c00
 8009ac0:	11fff4ff 	.word	0x11fff4ff
 8009ac4:	40011000 	.word	0x40011000
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	40004400 	.word	0x40004400
 8009ad0:	40004800 	.word	0x40004800
 8009ad4:	40004c00 	.word	0x40004c00
 8009ad8:	40005000 	.word	0x40005000
 8009adc:	2320      	movs	r3, #32
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e128      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009ae4:	2340      	movs	r3, #64	@ 0x40
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e124      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009aec:	2380      	movs	r3, #128	@ 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e120      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4acb      	ldr	r2, [pc, #812]	@ (8009e28 <UART_SetConfig+0x698>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d176      	bne.n	8009bec <UART_SetConfig+0x45c>
 8009afe:	4bcb      	ldr	r3, [pc, #812]	@ (8009e2c <UART_SetConfig+0x69c>)
 8009b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b06:	2b28      	cmp	r3, #40	@ 0x28
 8009b08:	d86c      	bhi.n	8009be4 <UART_SetConfig+0x454>
 8009b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b10 <UART_SetConfig+0x380>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009bb5 	.word	0x08009bb5
 8009b14:	08009be5 	.word	0x08009be5
 8009b18:	08009be5 	.word	0x08009be5
 8009b1c:	08009be5 	.word	0x08009be5
 8009b20:	08009be5 	.word	0x08009be5
 8009b24:	08009be5 	.word	0x08009be5
 8009b28:	08009be5 	.word	0x08009be5
 8009b2c:	08009be5 	.word	0x08009be5
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009be5 	.word	0x08009be5
 8009b38:	08009be5 	.word	0x08009be5
 8009b3c:	08009be5 	.word	0x08009be5
 8009b40:	08009be5 	.word	0x08009be5
 8009b44:	08009be5 	.word	0x08009be5
 8009b48:	08009be5 	.word	0x08009be5
 8009b4c:	08009be5 	.word	0x08009be5
 8009b50:	08009bc5 	.word	0x08009bc5
 8009b54:	08009be5 	.word	0x08009be5
 8009b58:	08009be5 	.word	0x08009be5
 8009b5c:	08009be5 	.word	0x08009be5
 8009b60:	08009be5 	.word	0x08009be5
 8009b64:	08009be5 	.word	0x08009be5
 8009b68:	08009be5 	.word	0x08009be5
 8009b6c:	08009be5 	.word	0x08009be5
 8009b70:	08009bcd 	.word	0x08009bcd
 8009b74:	08009be5 	.word	0x08009be5
 8009b78:	08009be5 	.word	0x08009be5
 8009b7c:	08009be5 	.word	0x08009be5
 8009b80:	08009be5 	.word	0x08009be5
 8009b84:	08009be5 	.word	0x08009be5
 8009b88:	08009be5 	.word	0x08009be5
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009bd5 	.word	0x08009bd5
 8009b94:	08009be5 	.word	0x08009be5
 8009b98:	08009be5 	.word	0x08009be5
 8009b9c:	08009be5 	.word	0x08009be5
 8009ba0:	08009be5 	.word	0x08009be5
 8009ba4:	08009be5 	.word	0x08009be5
 8009ba8:	08009be5 	.word	0x08009be5
 8009bac:	08009be5 	.word	0x08009be5
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e0bc      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e0b8      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e0b4      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e0b0      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bda:	e0ac      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009bdc:	2340      	movs	r3, #64	@ 0x40
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e0a8      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009be4:	2380      	movs	r3, #128	@ 0x80
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e0a4      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a8f      	ldr	r2, [pc, #572]	@ (8009e30 <UART_SetConfig+0x6a0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d130      	bne.n	8009c58 <UART_SetConfig+0x4c8>
 8009bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8009e2c <UART_SetConfig+0x69c>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d826      	bhi.n	8009c50 <UART_SetConfig+0x4c0>
 8009c02:	a201      	add	r2, pc, #4	@ (adr r2, 8009c08 <UART_SetConfig+0x478>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c29 	.word	0x08009c29
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c41 	.word	0x08009c41
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c26:	e086      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2e:	e082      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e07e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3e:	e07a      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c46:	e076      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c48:	2340      	movs	r3, #64	@ 0x40
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4e:	e072      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c50:	2380      	movs	r3, #128	@ 0x80
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c56:	e06e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a75      	ldr	r2, [pc, #468]	@ (8009e34 <UART_SetConfig+0x6a4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d130      	bne.n	8009cc4 <UART_SetConfig+0x534>
 8009c62:	4b72      	ldr	r3, [pc, #456]	@ (8009e2c <UART_SetConfig+0x69c>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d826      	bhi.n	8009cbc <UART_SetConfig+0x52c>
 8009c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <UART_SetConfig+0x4e4>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c92:	e050      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9a:	e04c      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca2:	e048      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009caa:	e044      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009cac:	2320      	movs	r3, #32
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb2:	e040      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009cb4:	2340      	movs	r3, #64	@ 0x40
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cba:	e03c      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009cbc:	2380      	movs	r3, #128	@ 0x80
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc2:	e038      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a5b      	ldr	r2, [pc, #364]	@ (8009e38 <UART_SetConfig+0x6a8>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d130      	bne.n	8009d30 <UART_SetConfig+0x5a0>
 8009cce:	4b57      	ldr	r3, [pc, #348]	@ (8009e2c <UART_SetConfig+0x69c>)
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	2b05      	cmp	r3, #5
 8009cd8:	d826      	bhi.n	8009d28 <UART_SetConfig+0x598>
 8009cda:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce0 <UART_SetConfig+0x550>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009cf9 	.word	0x08009cf9
 8009ce4:	08009d01 	.word	0x08009d01
 8009ce8:	08009d09 	.word	0x08009d09
 8009cec:	08009d11 	.word	0x08009d11
 8009cf0:	08009d19 	.word	0x08009d19
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e01a      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e016      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e012      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d16:	e00e      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1e:	e00a      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d20:	2340      	movs	r3, #64	@ 0x40
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d26:	e006      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d28:	2380      	movs	r3, #128	@ 0x80
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2e:	e002      	b.n	8009d36 <UART_SetConfig+0x5a6>
 8009d30:	2380      	movs	r3, #128	@ 0x80
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e38 <UART_SetConfig+0x6a8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	f040 80f8 	bne.w	8009f32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	dc46      	bgt.n	8009dd8 <UART_SetConfig+0x648>
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	f2c0 8082 	blt.w	8009e54 <UART_SetConfig+0x6c4>
 8009d50:	3b02      	subs	r3, #2
 8009d52:	2b1e      	cmp	r3, #30
 8009d54:	d87e      	bhi.n	8009e54 <UART_SetConfig+0x6c4>
 8009d56:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <UART_SetConfig+0x5cc>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009ddf 	.word	0x08009ddf
 8009d60:	08009e55 	.word	0x08009e55
 8009d64:	08009de7 	.word	0x08009de7
 8009d68:	08009e55 	.word	0x08009e55
 8009d6c:	08009e55 	.word	0x08009e55
 8009d70:	08009e55 	.word	0x08009e55
 8009d74:	08009df7 	.word	0x08009df7
 8009d78:	08009e55 	.word	0x08009e55
 8009d7c:	08009e55 	.word	0x08009e55
 8009d80:	08009e55 	.word	0x08009e55
 8009d84:	08009e55 	.word	0x08009e55
 8009d88:	08009e55 	.word	0x08009e55
 8009d8c:	08009e55 	.word	0x08009e55
 8009d90:	08009e55 	.word	0x08009e55
 8009d94:	08009e07 	.word	0x08009e07
 8009d98:	08009e55 	.word	0x08009e55
 8009d9c:	08009e55 	.word	0x08009e55
 8009da0:	08009e55 	.word	0x08009e55
 8009da4:	08009e55 	.word	0x08009e55
 8009da8:	08009e55 	.word	0x08009e55
 8009dac:	08009e55 	.word	0x08009e55
 8009db0:	08009e55 	.word	0x08009e55
 8009db4:	08009e55 	.word	0x08009e55
 8009db8:	08009e55 	.word	0x08009e55
 8009dbc:	08009e55 	.word	0x08009e55
 8009dc0:	08009e55 	.word	0x08009e55
 8009dc4:	08009e55 	.word	0x08009e55
 8009dc8:	08009e55 	.word	0x08009e55
 8009dcc:	08009e55 	.word	0x08009e55
 8009dd0:	08009e55 	.word	0x08009e55
 8009dd4:	08009e47 	.word	0x08009e47
 8009dd8:	2b40      	cmp	r3, #64	@ 0x40
 8009dda:	d037      	beq.n	8009e4c <UART_SetConfig+0x6bc>
 8009ddc:	e03a      	b.n	8009e54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009dde:	f7fc ffd1 	bl	8006d84 <HAL_RCCEx_GetD3PCLK1Freq>
 8009de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009de4:	e03c      	b.n	8009e60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fc ffe0 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df4:	e034      	b.n	8009e60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df6:	f107 0318 	add.w	r3, r7, #24
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fd f92c 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e04:	e02c      	b.n	8009e60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e06:	4b09      	ldr	r3, [pc, #36]	@ (8009e2c <UART_SetConfig+0x69c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d016      	beq.n	8009e40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e12:	4b06      	ldr	r3, [pc, #24]	@ (8009e2c <UART_SetConfig+0x69c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	08db      	lsrs	r3, r3, #3
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	4a07      	ldr	r2, [pc, #28]	@ (8009e3c <UART_SetConfig+0x6ac>)
 8009e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e24:	e01c      	b.n	8009e60 <UART_SetConfig+0x6d0>
 8009e26:	bf00      	nop
 8009e28:	40011400 	.word	0x40011400
 8009e2c:	58024400 	.word	0x58024400
 8009e30:	40007800 	.word	0x40007800
 8009e34:	40007c00 	.word	0x40007c00
 8009e38:	58000c00 	.word	0x58000c00
 8009e3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009e40:	4b9d      	ldr	r3, [pc, #628]	@ (800a0b8 <UART_SetConfig+0x928>)
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e44:	e00c      	b.n	8009e60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e46:	4b9d      	ldr	r3, [pc, #628]	@ (800a0bc <UART_SetConfig+0x92c>)
 8009e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4a:	e009      	b.n	8009e60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e52:	e005      	b.n	8009e60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 81de 	beq.w	800a224 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6c:	4a94      	ldr	r2, [pc, #592]	@ (800a0c0 <UART_SetConfig+0x930>)
 8009e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e72:	461a      	mov	r2, r3
 8009e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e7a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	4613      	mov	r3, r2
 8009e82:	005b      	lsls	r3, r3, #1
 8009e84:	4413      	add	r3, r2
 8009e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d305      	bcc.n	8009e98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e9e:	e1c1      	b.n	800a224 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	60bb      	str	r3, [r7, #8]
 8009ea6:	60fa      	str	r2, [r7, #12]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eac:	4a84      	ldr	r2, [pc, #528]	@ (800a0c0 <UART_SetConfig+0x930>)
 8009eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	607a      	str	r2, [r7, #4]
 8009eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ec2:	f7f6 fc21 	bl	8000708 <__aeabi_uldivmod>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	020b      	lsls	r3, r1, #8
 8009ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009edc:	0202      	lsls	r2, r0, #8
 8009ede:	6979      	ldr	r1, [r7, #20]
 8009ee0:	6849      	ldr	r1, [r1, #4]
 8009ee2:	0849      	lsrs	r1, r1, #1
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	4605      	mov	r5, r0
 8009eea:	eb12 0804 	adds.w	r8, r2, r4
 8009eee:	eb43 0905 	adc.w	r9, r3, r5
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	469a      	mov	sl, r3
 8009efa:	4693      	mov	fp, r2
 8009efc:	4652      	mov	r2, sl
 8009efe:	465b      	mov	r3, fp
 8009f00:	4640      	mov	r0, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	f7f6 fc00 	bl	8000708 <__aeabi_uldivmod>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f16:	d308      	bcc.n	8009f2a <UART_SetConfig+0x79a>
 8009f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1e:	d204      	bcs.n	8009f2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f26:	60da      	str	r2, [r3, #12]
 8009f28:	e17c      	b.n	800a224 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f30:	e178      	b.n	800a224 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f3a:	f040 80c5 	bne.w	800a0c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	dc48      	bgt.n	8009fd8 <UART_SetConfig+0x848>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	db7b      	blt.n	800a042 <UART_SetConfig+0x8b2>
 8009f4a:	2b20      	cmp	r3, #32
 8009f4c:	d879      	bhi.n	800a042 <UART_SetConfig+0x8b2>
 8009f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f54 <UART_SetConfig+0x7c4>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009fdf 	.word	0x08009fdf
 8009f58:	08009fe7 	.word	0x08009fe7
 8009f5c:	0800a043 	.word	0x0800a043
 8009f60:	0800a043 	.word	0x0800a043
 8009f64:	08009fef 	.word	0x08009fef
 8009f68:	0800a043 	.word	0x0800a043
 8009f6c:	0800a043 	.word	0x0800a043
 8009f70:	0800a043 	.word	0x0800a043
 8009f74:	08009fff 	.word	0x08009fff
 8009f78:	0800a043 	.word	0x0800a043
 8009f7c:	0800a043 	.word	0x0800a043
 8009f80:	0800a043 	.word	0x0800a043
 8009f84:	0800a043 	.word	0x0800a043
 8009f88:	0800a043 	.word	0x0800a043
 8009f8c:	0800a043 	.word	0x0800a043
 8009f90:	0800a043 	.word	0x0800a043
 8009f94:	0800a00f 	.word	0x0800a00f
 8009f98:	0800a043 	.word	0x0800a043
 8009f9c:	0800a043 	.word	0x0800a043
 8009fa0:	0800a043 	.word	0x0800a043
 8009fa4:	0800a043 	.word	0x0800a043
 8009fa8:	0800a043 	.word	0x0800a043
 8009fac:	0800a043 	.word	0x0800a043
 8009fb0:	0800a043 	.word	0x0800a043
 8009fb4:	0800a043 	.word	0x0800a043
 8009fb8:	0800a043 	.word	0x0800a043
 8009fbc:	0800a043 	.word	0x0800a043
 8009fc0:	0800a043 	.word	0x0800a043
 8009fc4:	0800a043 	.word	0x0800a043
 8009fc8:	0800a043 	.word	0x0800a043
 8009fcc:	0800a043 	.word	0x0800a043
 8009fd0:	0800a043 	.word	0x0800a043
 8009fd4:	0800a035 	.word	0x0800a035
 8009fd8:	2b40      	cmp	r3, #64	@ 0x40
 8009fda:	d02e      	beq.n	800a03a <UART_SetConfig+0x8aa>
 8009fdc:	e031      	b.n	800a042 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fde:	f7fb fc9b 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 8009fe2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fe4:	e033      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fe6:	f7fb fcad 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 8009fea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fec:	e02f      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fc fedc 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ffc:	e027      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ffe:	f107 0318 	add.w	r3, r7, #24
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd f828 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a00c:	e01f      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00e:	4b2d      	ldr	r3, [pc, #180]	@ (800a0c4 <UART_SetConfig+0x934>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d009      	beq.n	800a02e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a01a:	4b2a      	ldr	r3, [pc, #168]	@ (800a0c4 <UART_SetConfig+0x934>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	08db      	lsrs	r3, r3, #3
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	4a24      	ldr	r2, [pc, #144]	@ (800a0b8 <UART_SetConfig+0x928>)
 800a026:	fa22 f303 	lsr.w	r3, r2, r3
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a02c:	e00f      	b.n	800a04e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a02e:	4b22      	ldr	r3, [pc, #136]	@ (800a0b8 <UART_SetConfig+0x928>)
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a032:	e00c      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a034:	4b21      	ldr	r3, [pc, #132]	@ (800a0bc <UART_SetConfig+0x92c>)
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a038:	e009      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a040:	e005      	b.n	800a04e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a04c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 80e7 	beq.w	800a224 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05a:	4a19      	ldr	r2, [pc, #100]	@ (800a0c0 <UART_SetConfig+0x930>)
 800a05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a060:	461a      	mov	r2, r3
 800a062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a064:	fbb3 f3f2 	udiv	r3, r3, r2
 800a068:	005a      	lsls	r2, r3, #1
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	441a      	add	r2, r3
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07e:	2b0f      	cmp	r3, #15
 800a080:	d916      	bls.n	800a0b0 <UART_SetConfig+0x920>
 800a082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a088:	d212      	bcs.n	800a0b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f023 030f 	bic.w	r3, r3, #15
 800a092:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	085b      	lsrs	r3, r3, #1
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a0ac:	60da      	str	r2, [r3, #12]
 800a0ae:	e0b9      	b.n	800a224 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0b6:	e0b5      	b.n	800a224 <UART_SetConfig+0xa94>
 800a0b8:	03d09000 	.word	0x03d09000
 800a0bc:	003d0900 	.word	0x003d0900
 800a0c0:	0800efec 	.word	0x0800efec
 800a0c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	dc49      	bgt.n	800a164 <UART_SetConfig+0x9d4>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	db7c      	blt.n	800a1ce <UART_SetConfig+0xa3e>
 800a0d4:	2b20      	cmp	r3, #32
 800a0d6:	d87a      	bhi.n	800a1ce <UART_SetConfig+0xa3e>
 800a0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e0 <UART_SetConfig+0x950>)
 800a0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0de:	bf00      	nop
 800a0e0:	0800a16b 	.word	0x0800a16b
 800a0e4:	0800a173 	.word	0x0800a173
 800a0e8:	0800a1cf 	.word	0x0800a1cf
 800a0ec:	0800a1cf 	.word	0x0800a1cf
 800a0f0:	0800a17b 	.word	0x0800a17b
 800a0f4:	0800a1cf 	.word	0x0800a1cf
 800a0f8:	0800a1cf 	.word	0x0800a1cf
 800a0fc:	0800a1cf 	.word	0x0800a1cf
 800a100:	0800a18b 	.word	0x0800a18b
 800a104:	0800a1cf 	.word	0x0800a1cf
 800a108:	0800a1cf 	.word	0x0800a1cf
 800a10c:	0800a1cf 	.word	0x0800a1cf
 800a110:	0800a1cf 	.word	0x0800a1cf
 800a114:	0800a1cf 	.word	0x0800a1cf
 800a118:	0800a1cf 	.word	0x0800a1cf
 800a11c:	0800a1cf 	.word	0x0800a1cf
 800a120:	0800a19b 	.word	0x0800a19b
 800a124:	0800a1cf 	.word	0x0800a1cf
 800a128:	0800a1cf 	.word	0x0800a1cf
 800a12c:	0800a1cf 	.word	0x0800a1cf
 800a130:	0800a1cf 	.word	0x0800a1cf
 800a134:	0800a1cf 	.word	0x0800a1cf
 800a138:	0800a1cf 	.word	0x0800a1cf
 800a13c:	0800a1cf 	.word	0x0800a1cf
 800a140:	0800a1cf 	.word	0x0800a1cf
 800a144:	0800a1cf 	.word	0x0800a1cf
 800a148:	0800a1cf 	.word	0x0800a1cf
 800a14c:	0800a1cf 	.word	0x0800a1cf
 800a150:	0800a1cf 	.word	0x0800a1cf
 800a154:	0800a1cf 	.word	0x0800a1cf
 800a158:	0800a1cf 	.word	0x0800a1cf
 800a15c:	0800a1cf 	.word	0x0800a1cf
 800a160:	0800a1c1 	.word	0x0800a1c1
 800a164:	2b40      	cmp	r3, #64	@ 0x40
 800a166:	d02e      	beq.n	800a1c6 <UART_SetConfig+0xa36>
 800a168:	e031      	b.n	800a1ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a16a:	f7fb fbd5 	bl	8005918 <HAL_RCC_GetPCLK1Freq>
 800a16e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a170:	e033      	b.n	800a1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a172:	f7fb fbe7 	bl	8005944 <HAL_RCC_GetPCLK2Freq>
 800a176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a178:	e02f      	b.n	800a1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fc fe16 	bl	8006db0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a188:	e027      	b.n	800a1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a18a:	f107 0318 	add.w	r3, r7, #24
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fc ff62 	bl	8007058 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a198:	e01f      	b.n	800a1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a19a:	4b2d      	ldr	r3, [pc, #180]	@ (800a250 <UART_SetConfig+0xac0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0320 	and.w	r3, r3, #32
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d009      	beq.n	800a1ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a250 <UART_SetConfig+0xac0>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	08db      	lsrs	r3, r3, #3
 800a1ac:	f003 0303 	and.w	r3, r3, #3
 800a1b0:	4a28      	ldr	r2, [pc, #160]	@ (800a254 <UART_SetConfig+0xac4>)
 800a1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1b8:	e00f      	b.n	800a1da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a1ba:	4b26      	ldr	r3, [pc, #152]	@ (800a254 <UART_SetConfig+0xac4>)
 800a1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1be:	e00c      	b.n	800a1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1c0:	4b25      	ldr	r3, [pc, #148]	@ (800a258 <UART_SetConfig+0xac8>)
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c4:	e009      	b.n	800a1da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1cc:	e005      	b.n	800a1da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1d8:	bf00      	nop
    }

    if (pclk != 0U)
 800a1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d021      	beq.n	800a224 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800a25c <UART_SetConfig+0xacc>)
 800a1e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	085b      	lsrs	r3, r3, #1
 800a1f8:	441a      	add	r2, r3
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a202:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a206:	2b0f      	cmp	r3, #15
 800a208:	d909      	bls.n	800a21e <UART_SetConfig+0xa8e>
 800a20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a210:	d205      	bcs.n	800a21e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	b29a      	uxth	r2, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	60da      	str	r2, [r3, #12]
 800a21c:	e002      	b.n	800a224 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2201      	movs	r2, #1
 800a228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2201      	movs	r2, #1
 800a230:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2200      	movs	r2, #0
 800a238:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2200      	movs	r2, #0
 800a23e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a240:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a244:	4618      	mov	r0, r3
 800a246:	3748      	adds	r7, #72	@ 0x48
 800a248:	46bd      	mov	sp, r7
 800a24a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a24e:	bf00      	nop
 800a250:	58024400 	.word	0x58024400
 800a254:	03d09000 	.word	0x03d09000
 800a258:	003d0900 	.word	0x003d0900
 800a25c:	0800efec 	.word	0x0800efec

0800a260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26c:	f003 0308 	and.w	r3, r3, #8
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b0:	f003 0302 	and.w	r3, r3, #2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00a      	beq.n	800a2ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f4:	f003 0310 	and.w	r3, r3, #16
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01a      	beq.n	800a376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35e:	d10a      	bne.n	800a376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	430a      	orrs	r2, r1
 800a396:	605a      	str	r2, [r3, #4]
  }
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b098      	sub	sp, #96	@ 0x60
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3b4:	f7f7 fd88 	bl	8001ec8 <HAL_GetTick>
 800a3b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0308 	and.w	r3, r3, #8
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d12f      	bne.n	800a428 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f88e 	bl	800a4f8 <UART_WaitOnFlagUntilTimeout>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d022      	beq.n	800a428 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a400:	647b      	str	r3, [r7, #68]	@ 0x44
 800a402:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a408:	e841 2300 	strex	r3, r2, [r1]
 800a40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e6      	bne.n	800a3e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e063      	b.n	800a4f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b04      	cmp	r3, #4
 800a434:	d149      	bne.n	800a4ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a436:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a43e:	2200      	movs	r2, #0
 800a440:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f857 	bl	800a4f8 <UART_WaitOnFlagUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d03c      	beq.n	800a4ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	623b      	str	r3, [r7, #32]
   return(result);
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a46e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a470:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a47c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e6      	bne.n	800a450 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3308      	adds	r3, #8
 800a488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	60fb      	str	r3, [r7, #12]
   return(result);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f023 0301 	bic.w	r3, r3, #1
 800a498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4a2:	61fa      	str	r2, [r7, #28]
 800a4a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	69b9      	ldr	r1, [r7, #24]
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	617b      	str	r3, [r7, #20]
   return(result);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e5      	bne.n	800a482 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e012      	b.n	800a4f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3758      	adds	r7, #88	@ 0x58
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a508:	e04f      	b.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a510:	d04b      	beq.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a512:	f7f7 fcd9 	bl	8001ec8 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d302      	bcc.n	800a528 <UART_WaitOnFlagUntilTimeout+0x30>
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d101      	bne.n	800a52c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e04e      	b.n	800a5ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0304 	and.w	r3, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d037      	beq.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b80      	cmp	r3, #128	@ 0x80
 800a53e:	d034      	beq.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b40      	cmp	r3, #64	@ 0x40
 800a544:	d031      	beq.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	f003 0308 	and.w	r3, r3, #8
 800a550:	2b08      	cmp	r3, #8
 800a552:	d110      	bne.n	800a576 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2208      	movs	r2, #8
 800a55a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 f839 	bl	800a5d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2208      	movs	r2, #8
 800a566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e029      	b.n	800a5ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a584:	d111      	bne.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a58e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 f81f 	bl	800a5d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2220      	movs	r2, #32
 800a59a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e00f      	b.n	800a5ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69da      	ldr	r2, [r3, #28]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	bf0c      	ite	eq
 800a5ba:	2301      	moveq	r3, #1
 800a5bc:	2300      	movne	r3, #0
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d0a0      	beq.n	800a50a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b095      	sub	sp, #84	@ 0x54
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e6      	bne.n	800a5dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3308      	adds	r3, #8
 800a614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	4b1e      	ldr	r3, [pc, #120]	@ (800a69c <UART_EndRxTransfer+0xc8>)
 800a622:	4013      	ands	r3, r2
 800a624:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a62e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e5      	bne.n	800a60e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d118      	bne.n	800a67c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	e853 3f00 	ldrex	r3, [r3]
 800a656:	60bb      	str	r3, [r7, #8]
   return(result);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f023 0310 	bic.w	r3, r3, #16
 800a65e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6979      	ldr	r1, [r7, #20]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	613b      	str	r3, [r7, #16]
   return(result);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e6      	bne.n	800a64a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a690:	bf00      	nop
 800a692:	3754      	adds	r7, #84	@ 0x54
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	effffffe 	.word	0xeffffffe

0800a6a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7ff f850 	bl	8009764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e8:	61fb      	str	r3, [r7, #28]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	61bb      	str	r3, [r7, #24]
 800a6f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6979      	ldr	r1, [r7, #20]
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e6      	bne.n	800a6d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff f81b 	bl	8009750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a71a:	bf00      	nop
 800a71c:	3720      	adds	r7, #32
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a75e:	b480      	push	{r7}
 800a760:	b085      	sub	sp, #20
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d101      	bne.n	800a774 <HAL_UARTEx_DisableFifoMode+0x16>
 800a770:	2302      	movs	r3, #2
 800a772:	e027      	b.n	800a7c4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2224      	movs	r2, #36	@ 0x24
 800a780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0201 	bic.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a7a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e02d      	b.n	800a844 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2224      	movs	r2, #36	@ 0x24
 800a7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 0201 	bic.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f84f 	bl	800a8c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2220      	movs	r2, #32
 800a836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a860:	2302      	movs	r3, #2
 800a862:	e02d      	b.n	800a8c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	@ 0x24
 800a870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 0201 	bic.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f811 	bl	800a8c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d108      	bne.n	800a8ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8e8:	e031      	b.n	800a94e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8ea:	2310      	movs	r3, #16
 800a8ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8ee:	2310      	movs	r3, #16
 800a8f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	0e5b      	lsrs	r3, r3, #25
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 0307 	and.w	r3, r3, #7
 800a900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	0f5b      	lsrs	r3, r3, #29
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	7b3a      	ldrb	r2, [r7, #12]
 800a916:	4911      	ldr	r1, [pc, #68]	@ (800a95c <UARTEx_SetNbDataToProcess+0x94>)
 800a918:	5c8a      	ldrb	r2, [r1, r2]
 800a91a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a91e:	7b3a      	ldrb	r2, [r7, #12]
 800a920:	490f      	ldr	r1, [pc, #60]	@ (800a960 <UARTEx_SetNbDataToProcess+0x98>)
 800a922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a924:	fb93 f3f2 	sdiv	r3, r3, r2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	7b7a      	ldrb	r2, [r7, #13]
 800a934:	4909      	ldr	r1, [pc, #36]	@ (800a95c <UARTEx_SetNbDataToProcess+0x94>)
 800a936:	5c8a      	ldrb	r2, [r1, r2]
 800a938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a93c:	7b7a      	ldrb	r2, [r7, #13]
 800a93e:	4908      	ldr	r1, [pc, #32]	@ (800a960 <UARTEx_SetNbDataToProcess+0x98>)
 800a940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a942:	fb93 f3f2 	sdiv	r3, r3, r2
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a94e:	bf00      	nop
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	0800f004 	.word	0x0800f004
 800a960:	0800f00c 	.word	0x0800f00c

0800a964 <atoi>:
 800a964:	220a      	movs	r2, #10
 800a966:	2100      	movs	r1, #0
 800a968:	f000 b87c 	b.w	800aa64 <strtol>

0800a96c <_strtol_l.constprop.0>:
 800a96c:	2b24      	cmp	r3, #36	@ 0x24
 800a96e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a972:	4686      	mov	lr, r0
 800a974:	4690      	mov	r8, r2
 800a976:	d801      	bhi.n	800a97c <_strtol_l.constprop.0+0x10>
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d106      	bne.n	800a98a <_strtol_l.constprop.0+0x1e>
 800a97c:	f001 f890 	bl	800baa0 <__errno>
 800a980:	2316      	movs	r3, #22
 800a982:	6003      	str	r3, [r0, #0]
 800a984:	2000      	movs	r0, #0
 800a986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98a:	4834      	ldr	r0, [pc, #208]	@ (800aa5c <_strtol_l.constprop.0+0xf0>)
 800a98c:	460d      	mov	r5, r1
 800a98e:	462a      	mov	r2, r5
 800a990:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a994:	5d06      	ldrb	r6, [r0, r4]
 800a996:	f016 0608 	ands.w	r6, r6, #8
 800a99a:	d1f8      	bne.n	800a98e <_strtol_l.constprop.0+0x22>
 800a99c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a99e:	d12d      	bne.n	800a9fc <_strtol_l.constprop.0+0x90>
 800a9a0:	782c      	ldrb	r4, [r5, #0]
 800a9a2:	2601      	movs	r6, #1
 800a9a4:	1c95      	adds	r5, r2, #2
 800a9a6:	f033 0210 	bics.w	r2, r3, #16
 800a9aa:	d109      	bne.n	800a9c0 <_strtol_l.constprop.0+0x54>
 800a9ac:	2c30      	cmp	r4, #48	@ 0x30
 800a9ae:	d12a      	bne.n	800aa06 <_strtol_l.constprop.0+0x9a>
 800a9b0:	782a      	ldrb	r2, [r5, #0]
 800a9b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9b6:	2a58      	cmp	r2, #88	@ 0x58
 800a9b8:	d125      	bne.n	800aa06 <_strtol_l.constprop.0+0x9a>
 800a9ba:	786c      	ldrb	r4, [r5, #1]
 800a9bc:	2310      	movs	r3, #16
 800a9be:	3502      	adds	r5, #2
 800a9c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a9c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	fbbc f9f3 	udiv	r9, ip, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a9d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a9d8:	2f09      	cmp	r7, #9
 800a9da:	d81b      	bhi.n	800aa14 <_strtol_l.constprop.0+0xa8>
 800a9dc:	463c      	mov	r4, r7
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	dd27      	ble.n	800aa32 <_strtol_l.constprop.0+0xc6>
 800a9e2:	1c57      	adds	r7, r2, #1
 800a9e4:	d007      	beq.n	800a9f6 <_strtol_l.constprop.0+0x8a>
 800a9e6:	4581      	cmp	r9, r0
 800a9e8:	d320      	bcc.n	800aa2c <_strtol_l.constprop.0+0xc0>
 800a9ea:	d101      	bne.n	800a9f0 <_strtol_l.constprop.0+0x84>
 800a9ec:	45a2      	cmp	sl, r4
 800a9ee:	db1d      	blt.n	800aa2c <_strtol_l.constprop.0+0xc0>
 800a9f0:	fb00 4003 	mla	r0, r0, r3, r4
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9fa:	e7eb      	b.n	800a9d4 <_strtol_l.constprop.0+0x68>
 800a9fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a9fe:	bf04      	itt	eq
 800aa00:	782c      	ldrbeq	r4, [r5, #0]
 800aa02:	1c95      	addeq	r5, r2, #2
 800aa04:	e7cf      	b.n	800a9a6 <_strtol_l.constprop.0+0x3a>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1da      	bne.n	800a9c0 <_strtol_l.constprop.0+0x54>
 800aa0a:	2c30      	cmp	r4, #48	@ 0x30
 800aa0c:	bf0c      	ite	eq
 800aa0e:	2308      	moveq	r3, #8
 800aa10:	230a      	movne	r3, #10
 800aa12:	e7d5      	b.n	800a9c0 <_strtol_l.constprop.0+0x54>
 800aa14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa18:	2f19      	cmp	r7, #25
 800aa1a:	d801      	bhi.n	800aa20 <_strtol_l.constprop.0+0xb4>
 800aa1c:	3c37      	subs	r4, #55	@ 0x37
 800aa1e:	e7de      	b.n	800a9de <_strtol_l.constprop.0+0x72>
 800aa20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa24:	2f19      	cmp	r7, #25
 800aa26:	d804      	bhi.n	800aa32 <_strtol_l.constprop.0+0xc6>
 800aa28:	3c57      	subs	r4, #87	@ 0x57
 800aa2a:	e7d8      	b.n	800a9de <_strtol_l.constprop.0+0x72>
 800aa2c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa30:	e7e1      	b.n	800a9f6 <_strtol_l.constprop.0+0x8a>
 800aa32:	1c53      	adds	r3, r2, #1
 800aa34:	d108      	bne.n	800aa48 <_strtol_l.constprop.0+0xdc>
 800aa36:	2322      	movs	r3, #34	@ 0x22
 800aa38:	f8ce 3000 	str.w	r3, [lr]
 800aa3c:	4660      	mov	r0, ip
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	d0a0      	beq.n	800a986 <_strtol_l.constprop.0+0x1a>
 800aa44:	1e69      	subs	r1, r5, #1
 800aa46:	e006      	b.n	800aa56 <_strtol_l.constprop.0+0xea>
 800aa48:	b106      	cbz	r6, 800aa4c <_strtol_l.constprop.0+0xe0>
 800aa4a:	4240      	negs	r0, r0
 800aa4c:	f1b8 0f00 	cmp.w	r8, #0
 800aa50:	d099      	beq.n	800a986 <_strtol_l.constprop.0+0x1a>
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	d1f6      	bne.n	800aa44 <_strtol_l.constprop.0+0xd8>
 800aa56:	f8c8 1000 	str.w	r1, [r8]
 800aa5a:	e794      	b.n	800a986 <_strtol_l.constprop.0+0x1a>
 800aa5c:	0800f015 	.word	0x0800f015

0800aa60 <_strtol_r>:
 800aa60:	f7ff bf84 	b.w	800a96c <_strtol_l.constprop.0>

0800aa64 <strtol>:
 800aa64:	4613      	mov	r3, r2
 800aa66:	460a      	mov	r2, r1
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4802      	ldr	r0, [pc, #8]	@ (800aa74 <strtol+0x10>)
 800aa6c:	6800      	ldr	r0, [r0, #0]
 800aa6e:	f7ff bf7d 	b.w	800a96c <_strtol_l.constprop.0>
 800aa72:	bf00      	nop
 800aa74:	24000028 	.word	0x24000028

0800aa78 <__cvt>:
 800aa78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7a:	ed2d 8b02 	vpush	{d8}
 800aa7e:	eeb0 8b40 	vmov.f64	d8, d0
 800aa82:	b085      	sub	sp, #20
 800aa84:	4617      	mov	r7, r2
 800aa86:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800aa88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa8a:	ee18 2a90 	vmov	r2, s17
 800aa8e:	f025 0520 	bic.w	r5, r5, #32
 800aa92:	2a00      	cmp	r2, #0
 800aa94:	bfb6      	itet	lt
 800aa96:	222d      	movlt	r2, #45	@ 0x2d
 800aa98:	2200      	movge	r2, #0
 800aa9a:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa9e:	2d46      	cmp	r5, #70	@ 0x46
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	701a      	strb	r2, [r3, #0]
 800aaa4:	d004      	beq.n	800aab0 <__cvt+0x38>
 800aaa6:	2d45      	cmp	r5, #69	@ 0x45
 800aaa8:	d100      	bne.n	800aaac <__cvt+0x34>
 800aaaa:	3401      	adds	r4, #1
 800aaac:	2102      	movs	r1, #2
 800aaae:	e000      	b.n	800aab2 <__cvt+0x3a>
 800aab0:	2103      	movs	r1, #3
 800aab2:	ab03      	add	r3, sp, #12
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	ab02      	add	r3, sp, #8
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	4622      	mov	r2, r4
 800aabc:	4633      	mov	r3, r6
 800aabe:	eeb0 0b48 	vmov.f64	d0, d8
 800aac2:	f001 f8b9 	bl	800bc38 <_dtoa_r>
 800aac6:	2d47      	cmp	r5, #71	@ 0x47
 800aac8:	d114      	bne.n	800aaf4 <__cvt+0x7c>
 800aaca:	07fb      	lsls	r3, r7, #31
 800aacc:	d50a      	bpl.n	800aae4 <__cvt+0x6c>
 800aace:	1902      	adds	r2, r0, r4
 800aad0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad8:	bf08      	it	eq
 800aada:	9203      	streq	r2, [sp, #12]
 800aadc:	2130      	movs	r1, #48	@ 0x30
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d319      	bcc.n	800ab18 <__cvt+0xa0>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aae8:	1a1b      	subs	r3, r3, r0
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	b005      	add	sp, #20
 800aaee:	ecbd 8b02 	vpop	{d8}
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf4:	2d46      	cmp	r5, #70	@ 0x46
 800aaf6:	eb00 0204 	add.w	r2, r0, r4
 800aafa:	d1e9      	bne.n	800aad0 <__cvt+0x58>
 800aafc:	7803      	ldrb	r3, [r0, #0]
 800aafe:	2b30      	cmp	r3, #48	@ 0x30
 800ab00:	d107      	bne.n	800ab12 <__cvt+0x9a>
 800ab02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	bf1c      	itt	ne
 800ab0c:	f1c4 0401 	rsbne	r4, r4, #1
 800ab10:	6034      	strne	r4, [r6, #0]
 800ab12:	6833      	ldr	r3, [r6, #0]
 800ab14:	441a      	add	r2, r3
 800ab16:	e7db      	b.n	800aad0 <__cvt+0x58>
 800ab18:	1c5c      	adds	r4, r3, #1
 800ab1a:	9403      	str	r4, [sp, #12]
 800ab1c:	7019      	strb	r1, [r3, #0]
 800ab1e:	e7de      	b.n	800aade <__cvt+0x66>

0800ab20 <__exponent>:
 800ab20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab22:	2900      	cmp	r1, #0
 800ab24:	bfba      	itte	lt
 800ab26:	4249      	neglt	r1, r1
 800ab28:	232d      	movlt	r3, #45	@ 0x2d
 800ab2a:	232b      	movge	r3, #43	@ 0x2b
 800ab2c:	2909      	cmp	r1, #9
 800ab2e:	7002      	strb	r2, [r0, #0]
 800ab30:	7043      	strb	r3, [r0, #1]
 800ab32:	dd29      	ble.n	800ab88 <__exponent+0x68>
 800ab34:	f10d 0307 	add.w	r3, sp, #7
 800ab38:	461d      	mov	r5, r3
 800ab3a:	270a      	movs	r7, #10
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ab42:	fb07 1416 	mls	r4, r7, r6, r1
 800ab46:	3430      	adds	r4, #48	@ 0x30
 800ab48:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	2c63      	cmp	r4, #99	@ 0x63
 800ab50:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab54:	4631      	mov	r1, r6
 800ab56:	dcf1      	bgt.n	800ab3c <__exponent+0x1c>
 800ab58:	3130      	adds	r1, #48	@ 0x30
 800ab5a:	1e94      	subs	r4, r2, #2
 800ab5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab60:	1c41      	adds	r1, r0, #1
 800ab62:	4623      	mov	r3, r4
 800ab64:	42ab      	cmp	r3, r5
 800ab66:	d30a      	bcc.n	800ab7e <__exponent+0x5e>
 800ab68:	f10d 0309 	add.w	r3, sp, #9
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	42ac      	cmp	r4, r5
 800ab70:	bf88      	it	hi
 800ab72:	2300      	movhi	r3, #0
 800ab74:	3302      	adds	r3, #2
 800ab76:	4403      	add	r3, r0
 800ab78:	1a18      	subs	r0, r3, r0
 800ab7a:	b003      	add	sp, #12
 800ab7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab82:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab86:	e7ed      	b.n	800ab64 <__exponent+0x44>
 800ab88:	2330      	movs	r3, #48	@ 0x30
 800ab8a:	3130      	adds	r1, #48	@ 0x30
 800ab8c:	7083      	strb	r3, [r0, #2]
 800ab8e:	70c1      	strb	r1, [r0, #3]
 800ab90:	1d03      	adds	r3, r0, #4
 800ab92:	e7f1      	b.n	800ab78 <__exponent+0x58>
 800ab94:	0000      	movs	r0, r0
	...

0800ab98 <_printf_float>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	b08d      	sub	sp, #52	@ 0x34
 800ab9e:	460c      	mov	r4, r1
 800aba0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aba4:	4616      	mov	r6, r2
 800aba6:	461f      	mov	r7, r3
 800aba8:	4605      	mov	r5, r0
 800abaa:	f000 ff2f 	bl	800ba0c <_localeconv_r>
 800abae:	f8d0 b000 	ldr.w	fp, [r0]
 800abb2:	4658      	mov	r0, fp
 800abb4:	f7f5 fbe4 	bl	8000380 <strlen>
 800abb8:	2300      	movs	r3, #0
 800abba:	930a      	str	r3, [sp, #40]	@ 0x28
 800abbc:	f8d8 3000 	ldr.w	r3, [r8]
 800abc0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800abc4:	6822      	ldr	r2, [r4, #0]
 800abc6:	9005      	str	r0, [sp, #20]
 800abc8:	3307      	adds	r3, #7
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	f103 0108 	add.w	r1, r3, #8
 800abd2:	f8c8 1000 	str.w	r1, [r8]
 800abd6:	ed93 0b00 	vldr	d0, [r3]
 800abda:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ae38 <_printf_float+0x2a0>
 800abde:	eeb0 7bc0 	vabs.f64	d7, d0
 800abe2:	eeb4 7b46 	vcmp.f64	d7, d6
 800abe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800abee:	dd24      	ble.n	800ac3a <_printf_float+0xa2>
 800abf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800abf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf8:	d502      	bpl.n	800ac00 <_printf_float+0x68>
 800abfa:	232d      	movs	r3, #45	@ 0x2d
 800abfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac00:	498f      	ldr	r1, [pc, #572]	@ (800ae40 <_printf_float+0x2a8>)
 800ac02:	4b90      	ldr	r3, [pc, #576]	@ (800ae44 <_printf_float+0x2ac>)
 800ac04:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ac08:	bf94      	ite	ls
 800ac0a:	4688      	movls	r8, r1
 800ac0c:	4698      	movhi	r8, r3
 800ac0e:	f022 0204 	bic.w	r2, r2, #4
 800ac12:	2303      	movs	r3, #3
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	6022      	str	r2, [r4, #0]
 800ac18:	f04f 0a00 	mov.w	sl, #0
 800ac1c:	9700      	str	r7, [sp, #0]
 800ac1e:	4633      	mov	r3, r6
 800ac20:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ac22:	4621      	mov	r1, r4
 800ac24:	4628      	mov	r0, r5
 800ac26:	f000 f9d1 	bl	800afcc <_printf_common>
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	f040 8089 	bne.w	800ad42 <_printf_float+0x1aa>
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	b00d      	add	sp, #52	@ 0x34
 800ac36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac42:	d709      	bvc.n	800ac58 <_printf_float+0xc0>
 800ac44:	ee10 3a90 	vmov	r3, s1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bfbc      	itt	lt
 800ac4c:	232d      	movlt	r3, #45	@ 0x2d
 800ac4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac52:	497d      	ldr	r1, [pc, #500]	@ (800ae48 <_printf_float+0x2b0>)
 800ac54:	4b7d      	ldr	r3, [pc, #500]	@ (800ae4c <_printf_float+0x2b4>)
 800ac56:	e7d5      	b.n	800ac04 <_printf_float+0x6c>
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	1c59      	adds	r1, r3, #1
 800ac5c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ac60:	d139      	bne.n	800acd6 <_printf_float+0x13e>
 800ac62:	2306      	movs	r3, #6
 800ac64:	6063      	str	r3, [r4, #4]
 800ac66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	6022      	str	r2, [r4, #0]
 800ac6e:	9303      	str	r3, [sp, #12]
 800ac70:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ac76:	ab09      	add	r3, sp, #36	@ 0x24
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	6861      	ldr	r1, [r4, #4]
 800ac7c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac80:	4628      	mov	r0, r5
 800ac82:	f7ff fef9 	bl	800aa78 <__cvt>
 800ac86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	d129      	bne.n	800ace4 <_printf_float+0x14c>
 800ac90:	1cc8      	adds	r0, r1, #3
 800ac92:	db02      	blt.n	800ac9a <_printf_float+0x102>
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	4299      	cmp	r1, r3
 800ac98:	dd41      	ble.n	800ad1e <_printf_float+0x186>
 800ac9a:	f1a9 0902 	sub.w	r9, r9, #2
 800ac9e:	fa5f f989 	uxtb.w	r9, r9
 800aca2:	3901      	subs	r1, #1
 800aca4:	464a      	mov	r2, r9
 800aca6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800acaa:	9109      	str	r1, [sp, #36]	@ 0x24
 800acac:	f7ff ff38 	bl	800ab20 <__exponent>
 800acb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800acb2:	1813      	adds	r3, r2, r0
 800acb4:	2a01      	cmp	r2, #1
 800acb6:	4682      	mov	sl, r0
 800acb8:	6123      	str	r3, [r4, #16]
 800acba:	dc02      	bgt.n	800acc2 <_printf_float+0x12a>
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	07d2      	lsls	r2, r2, #31
 800acc0:	d501      	bpl.n	800acc6 <_printf_float+0x12e>
 800acc2:	3301      	adds	r3, #1
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0a6      	beq.n	800ac1c <_printf_float+0x84>
 800acce:	232d      	movs	r3, #45	@ 0x2d
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd4:	e7a2      	b.n	800ac1c <_printf_float+0x84>
 800acd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800acda:	d1c4      	bne.n	800ac66 <_printf_float+0xce>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1c2      	bne.n	800ac66 <_printf_float+0xce>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e7bf      	b.n	800ac64 <_printf_float+0xcc>
 800ace4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ace8:	d9db      	bls.n	800aca2 <_printf_float+0x10a>
 800acea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800acee:	d118      	bne.n	800ad22 <_printf_float+0x18a>
 800acf0:	2900      	cmp	r1, #0
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	dd0b      	ble.n	800ad0e <_printf_float+0x176>
 800acf6:	6121      	str	r1, [r4, #16]
 800acf8:	b913      	cbnz	r3, 800ad00 <_printf_float+0x168>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	07d0      	lsls	r0, r2, #31
 800acfe:	d502      	bpl.n	800ad06 <_printf_float+0x16e>
 800ad00:	3301      	adds	r3, #1
 800ad02:	440b      	add	r3, r1
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad08:	f04f 0a00 	mov.w	sl, #0
 800ad0c:	e7db      	b.n	800acc6 <_printf_float+0x12e>
 800ad0e:	b913      	cbnz	r3, 800ad16 <_printf_float+0x17e>
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	07d2      	lsls	r2, r2, #31
 800ad14:	d501      	bpl.n	800ad1a <_printf_float+0x182>
 800ad16:	3302      	adds	r3, #2
 800ad18:	e7f4      	b.n	800ad04 <_printf_float+0x16c>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e7f2      	b.n	800ad04 <_printf_float+0x16c>
 800ad1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ad22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad24:	4299      	cmp	r1, r3
 800ad26:	db05      	blt.n	800ad34 <_printf_float+0x19c>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	6121      	str	r1, [r4, #16]
 800ad2c:	07d8      	lsls	r0, r3, #31
 800ad2e:	d5ea      	bpl.n	800ad06 <_printf_float+0x16e>
 800ad30:	1c4b      	adds	r3, r1, #1
 800ad32:	e7e7      	b.n	800ad04 <_printf_float+0x16c>
 800ad34:	2900      	cmp	r1, #0
 800ad36:	bfd4      	ite	le
 800ad38:	f1c1 0202 	rsble	r2, r1, #2
 800ad3c:	2201      	movgt	r2, #1
 800ad3e:	4413      	add	r3, r2
 800ad40:	e7e0      	b.n	800ad04 <_printf_float+0x16c>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	055a      	lsls	r2, r3, #21
 800ad46:	d407      	bmi.n	800ad58 <_printf_float+0x1c0>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	4642      	mov	r2, r8
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	d12a      	bne.n	800adac <_printf_float+0x214>
 800ad56:	e76b      	b.n	800ac30 <_printf_float+0x98>
 800ad58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ad5c:	f240 80e0 	bls.w	800af20 <_printf_float+0x388>
 800ad60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ad64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6c:	d133      	bne.n	800add6 <_printf_float+0x23e>
 800ad6e:	4a38      	ldr	r2, [pc, #224]	@ (800ae50 <_printf_float+0x2b8>)
 800ad70:	2301      	movs	r3, #1
 800ad72:	4631      	mov	r1, r6
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b8      	blx	r7
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f43f af59 	beq.w	800ac30 <_printf_float+0x98>
 800ad7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad82:	4543      	cmp	r3, r8
 800ad84:	db02      	blt.n	800ad8c <_printf_float+0x1f4>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	07d8      	lsls	r0, r3, #31
 800ad8a:	d50f      	bpl.n	800adac <_printf_float+0x214>
 800ad8c:	9b05      	ldr	r3, [sp, #20]
 800ad8e:	465a      	mov	r2, fp
 800ad90:	4631      	mov	r1, r6
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	f43f af4a 	beq.w	800ac30 <_printf_float+0x98>
 800ad9c:	f04f 0900 	mov.w	r9, #0
 800ada0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ada4:	f104 0a1a 	add.w	sl, r4, #26
 800ada8:	45c8      	cmp	r8, r9
 800adaa:	dc09      	bgt.n	800adc0 <_printf_float+0x228>
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	079b      	lsls	r3, r3, #30
 800adb0:	f100 8107 	bmi.w	800afc2 <_printf_float+0x42a>
 800adb4:	68e0      	ldr	r0, [r4, #12]
 800adb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb8:	4298      	cmp	r0, r3
 800adba:	bfb8      	it	lt
 800adbc:	4618      	movlt	r0, r3
 800adbe:	e739      	b.n	800ac34 <_printf_float+0x9c>
 800adc0:	2301      	movs	r3, #1
 800adc2:	4652      	mov	r2, sl
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	47b8      	blx	r7
 800adca:	3001      	adds	r0, #1
 800adcc:	f43f af30 	beq.w	800ac30 <_printf_float+0x98>
 800add0:	f109 0901 	add.w	r9, r9, #1
 800add4:	e7e8      	b.n	800ada8 <_printf_float+0x210>
 800add6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	dc3b      	bgt.n	800ae54 <_printf_float+0x2bc>
 800addc:	4a1c      	ldr	r2, [pc, #112]	@ (800ae50 <_printf_float+0x2b8>)
 800adde:	2301      	movs	r3, #1
 800ade0:	4631      	mov	r1, r6
 800ade2:	4628      	mov	r0, r5
 800ade4:	47b8      	blx	r7
 800ade6:	3001      	adds	r0, #1
 800ade8:	f43f af22 	beq.w	800ac30 <_printf_float+0x98>
 800adec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800adf0:	ea59 0303 	orrs.w	r3, r9, r3
 800adf4:	d102      	bne.n	800adfc <_printf_float+0x264>
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	07d9      	lsls	r1, r3, #31
 800adfa:	d5d7      	bpl.n	800adac <_printf_float+0x214>
 800adfc:	9b05      	ldr	r3, [sp, #20]
 800adfe:	465a      	mov	r2, fp
 800ae00:	4631      	mov	r1, r6
 800ae02:	4628      	mov	r0, r5
 800ae04:	47b8      	blx	r7
 800ae06:	3001      	adds	r0, #1
 800ae08:	f43f af12 	beq.w	800ac30 <_printf_float+0x98>
 800ae0c:	f04f 0a00 	mov.w	sl, #0
 800ae10:	f104 0b1a 	add.w	fp, r4, #26
 800ae14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae16:	425b      	negs	r3, r3
 800ae18:	4553      	cmp	r3, sl
 800ae1a:	dc01      	bgt.n	800ae20 <_printf_float+0x288>
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	e794      	b.n	800ad4a <_printf_float+0x1b2>
 800ae20:	2301      	movs	r3, #1
 800ae22:	465a      	mov	r2, fp
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f af00 	beq.w	800ac30 <_printf_float+0x98>
 800ae30:	f10a 0a01 	add.w	sl, sl, #1
 800ae34:	e7ee      	b.n	800ae14 <_printf_float+0x27c>
 800ae36:	bf00      	nop
 800ae38:	ffffffff 	.word	0xffffffff
 800ae3c:	7fefffff 	.word	0x7fefffff
 800ae40:	0800f115 	.word	0x0800f115
 800ae44:	0800f119 	.word	0x0800f119
 800ae48:	0800f11d 	.word	0x0800f11d
 800ae4c:	0800f121 	.word	0x0800f121
 800ae50:	0800f125 	.word	0x0800f125
 800ae54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae5a:	4553      	cmp	r3, sl
 800ae5c:	bfa8      	it	ge
 800ae5e:	4653      	movge	r3, sl
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	4699      	mov	r9, r3
 800ae64:	dc37      	bgt.n	800aed6 <_printf_float+0x33e>
 800ae66:	2300      	movs	r3, #0
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae6e:	f104 021a 	add.w	r2, r4, #26
 800ae72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae74:	9907      	ldr	r1, [sp, #28]
 800ae76:	9306      	str	r3, [sp, #24]
 800ae78:	eba3 0309 	sub.w	r3, r3, r9
 800ae7c:	428b      	cmp	r3, r1
 800ae7e:	dc31      	bgt.n	800aee4 <_printf_float+0x34c>
 800ae80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae82:	459a      	cmp	sl, r3
 800ae84:	dc3b      	bgt.n	800aefe <_printf_float+0x366>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	07da      	lsls	r2, r3, #31
 800ae8a:	d438      	bmi.n	800aefe <_printf_float+0x366>
 800ae8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae8e:	ebaa 0903 	sub.w	r9, sl, r3
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	ebaa 0303 	sub.w	r3, sl, r3
 800ae98:	4599      	cmp	r9, r3
 800ae9a:	bfa8      	it	ge
 800ae9c:	4699      	movge	r9, r3
 800ae9e:	f1b9 0f00 	cmp.w	r9, #0
 800aea2:	dc34      	bgt.n	800af0e <_printf_float+0x376>
 800aea4:	f04f 0800 	mov.w	r8, #0
 800aea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aeac:	f104 0b1a 	add.w	fp, r4, #26
 800aeb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb2:	ebaa 0303 	sub.w	r3, sl, r3
 800aeb6:	eba3 0309 	sub.w	r3, r3, r9
 800aeba:	4543      	cmp	r3, r8
 800aebc:	f77f af76 	ble.w	800adac <_printf_float+0x214>
 800aec0:	2301      	movs	r3, #1
 800aec2:	465a      	mov	r2, fp
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b8      	blx	r7
 800aeca:	3001      	adds	r0, #1
 800aecc:	f43f aeb0 	beq.w	800ac30 <_printf_float+0x98>
 800aed0:	f108 0801 	add.w	r8, r8, #1
 800aed4:	e7ec      	b.n	800aeb0 <_printf_float+0x318>
 800aed6:	4642      	mov	r2, r8
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	d1c1      	bne.n	800ae66 <_printf_float+0x2ce>
 800aee2:	e6a5      	b.n	800ac30 <_printf_float+0x98>
 800aee4:	2301      	movs	r3, #1
 800aee6:	4631      	mov	r1, r6
 800aee8:	4628      	mov	r0, r5
 800aeea:	9206      	str	r2, [sp, #24]
 800aeec:	47b8      	blx	r7
 800aeee:	3001      	adds	r0, #1
 800aef0:	f43f ae9e 	beq.w	800ac30 <_printf_float+0x98>
 800aef4:	9b07      	ldr	r3, [sp, #28]
 800aef6:	9a06      	ldr	r2, [sp, #24]
 800aef8:	3301      	adds	r3, #1
 800aefa:	9307      	str	r3, [sp, #28]
 800aefc:	e7b9      	b.n	800ae72 <_printf_float+0x2da>
 800aefe:	9b05      	ldr	r3, [sp, #20]
 800af00:	465a      	mov	r2, fp
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	47b8      	blx	r7
 800af08:	3001      	adds	r0, #1
 800af0a:	d1bf      	bne.n	800ae8c <_printf_float+0x2f4>
 800af0c:	e690      	b.n	800ac30 <_printf_float+0x98>
 800af0e:	9a06      	ldr	r2, [sp, #24]
 800af10:	464b      	mov	r3, r9
 800af12:	4442      	add	r2, r8
 800af14:	4631      	mov	r1, r6
 800af16:	4628      	mov	r0, r5
 800af18:	47b8      	blx	r7
 800af1a:	3001      	adds	r0, #1
 800af1c:	d1c2      	bne.n	800aea4 <_printf_float+0x30c>
 800af1e:	e687      	b.n	800ac30 <_printf_float+0x98>
 800af20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800af24:	f1b9 0f01 	cmp.w	r9, #1
 800af28:	dc01      	bgt.n	800af2e <_printf_float+0x396>
 800af2a:	07db      	lsls	r3, r3, #31
 800af2c:	d536      	bpl.n	800af9c <_printf_float+0x404>
 800af2e:	2301      	movs	r3, #1
 800af30:	4642      	mov	r2, r8
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	f43f ae79 	beq.w	800ac30 <_printf_float+0x98>
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	465a      	mov	r2, fp
 800af42:	4631      	mov	r1, r6
 800af44:	4628      	mov	r0, r5
 800af46:	47b8      	blx	r7
 800af48:	3001      	adds	r0, #1
 800af4a:	f43f ae71 	beq.w	800ac30 <_printf_float+0x98>
 800af4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800af52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af5a:	f109 39ff 	add.w	r9, r9, #4294967295
 800af5e:	d018      	beq.n	800af92 <_printf_float+0x3fa>
 800af60:	464b      	mov	r3, r9
 800af62:	f108 0201 	add.w	r2, r8, #1
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	d10c      	bne.n	800af8a <_printf_float+0x3f2>
 800af70:	e65e      	b.n	800ac30 <_printf_float+0x98>
 800af72:	2301      	movs	r3, #1
 800af74:	465a      	mov	r2, fp
 800af76:	4631      	mov	r1, r6
 800af78:	4628      	mov	r0, r5
 800af7a:	47b8      	blx	r7
 800af7c:	3001      	adds	r0, #1
 800af7e:	f43f ae57 	beq.w	800ac30 <_printf_float+0x98>
 800af82:	f108 0801 	add.w	r8, r8, #1
 800af86:	45c8      	cmp	r8, r9
 800af88:	dbf3      	blt.n	800af72 <_printf_float+0x3da>
 800af8a:	4653      	mov	r3, sl
 800af8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af90:	e6dc      	b.n	800ad4c <_printf_float+0x1b4>
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	f104 0b1a 	add.w	fp, r4, #26
 800af9a:	e7f4      	b.n	800af86 <_printf_float+0x3ee>
 800af9c:	2301      	movs	r3, #1
 800af9e:	4642      	mov	r2, r8
 800afa0:	e7e1      	b.n	800af66 <_printf_float+0x3ce>
 800afa2:	2301      	movs	r3, #1
 800afa4:	464a      	mov	r2, r9
 800afa6:	4631      	mov	r1, r6
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b8      	blx	r7
 800afac:	3001      	adds	r0, #1
 800afae:	f43f ae3f 	beq.w	800ac30 <_printf_float+0x98>
 800afb2:	f108 0801 	add.w	r8, r8, #1
 800afb6:	68e3      	ldr	r3, [r4, #12]
 800afb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afba:	1a5b      	subs	r3, r3, r1
 800afbc:	4543      	cmp	r3, r8
 800afbe:	dcf0      	bgt.n	800afa2 <_printf_float+0x40a>
 800afc0:	e6f8      	b.n	800adb4 <_printf_float+0x21c>
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	f104 0919 	add.w	r9, r4, #25
 800afca:	e7f4      	b.n	800afb6 <_printf_float+0x41e>

0800afcc <_printf_common>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	4616      	mov	r6, r2
 800afd2:	4698      	mov	r8, r3
 800afd4:	688a      	ldr	r2, [r1, #8]
 800afd6:	690b      	ldr	r3, [r1, #16]
 800afd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afdc:	4293      	cmp	r3, r2
 800afde:	bfb8      	it	lt
 800afe0:	4613      	movlt	r3, r2
 800afe2:	6033      	str	r3, [r6, #0]
 800afe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afe8:	4607      	mov	r7, r0
 800afea:	460c      	mov	r4, r1
 800afec:	b10a      	cbz	r2, 800aff2 <_printf_common+0x26>
 800afee:	3301      	adds	r3, #1
 800aff0:	6033      	str	r3, [r6, #0]
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	0699      	lsls	r1, r3, #26
 800aff6:	bf42      	ittt	mi
 800aff8:	6833      	ldrmi	r3, [r6, #0]
 800affa:	3302      	addmi	r3, #2
 800affc:	6033      	strmi	r3, [r6, #0]
 800affe:	6825      	ldr	r5, [r4, #0]
 800b000:	f015 0506 	ands.w	r5, r5, #6
 800b004:	d106      	bne.n	800b014 <_printf_common+0x48>
 800b006:	f104 0a19 	add.w	sl, r4, #25
 800b00a:	68e3      	ldr	r3, [r4, #12]
 800b00c:	6832      	ldr	r2, [r6, #0]
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	42ab      	cmp	r3, r5
 800b012:	dc26      	bgt.n	800b062 <_printf_common+0x96>
 800b014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b018:	6822      	ldr	r2, [r4, #0]
 800b01a:	3b00      	subs	r3, #0
 800b01c:	bf18      	it	ne
 800b01e:	2301      	movne	r3, #1
 800b020:	0692      	lsls	r2, r2, #26
 800b022:	d42b      	bmi.n	800b07c <_printf_common+0xb0>
 800b024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b028:	4641      	mov	r1, r8
 800b02a:	4638      	mov	r0, r7
 800b02c:	47c8      	blx	r9
 800b02e:	3001      	adds	r0, #1
 800b030:	d01e      	beq.n	800b070 <_printf_common+0xa4>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	6922      	ldr	r2, [r4, #16]
 800b036:	f003 0306 	and.w	r3, r3, #6
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	bf02      	ittt	eq
 800b03e:	68e5      	ldreq	r5, [r4, #12]
 800b040:	6833      	ldreq	r3, [r6, #0]
 800b042:	1aed      	subeq	r5, r5, r3
 800b044:	68a3      	ldr	r3, [r4, #8]
 800b046:	bf0c      	ite	eq
 800b048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b04c:	2500      	movne	r5, #0
 800b04e:	4293      	cmp	r3, r2
 800b050:	bfc4      	itt	gt
 800b052:	1a9b      	subgt	r3, r3, r2
 800b054:	18ed      	addgt	r5, r5, r3
 800b056:	2600      	movs	r6, #0
 800b058:	341a      	adds	r4, #26
 800b05a:	42b5      	cmp	r5, r6
 800b05c:	d11a      	bne.n	800b094 <_printf_common+0xc8>
 800b05e:	2000      	movs	r0, #0
 800b060:	e008      	b.n	800b074 <_printf_common+0xa8>
 800b062:	2301      	movs	r3, #1
 800b064:	4652      	mov	r2, sl
 800b066:	4641      	mov	r1, r8
 800b068:	4638      	mov	r0, r7
 800b06a:	47c8      	blx	r9
 800b06c:	3001      	adds	r0, #1
 800b06e:	d103      	bne.n	800b078 <_printf_common+0xac>
 800b070:	f04f 30ff 	mov.w	r0, #4294967295
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	3501      	adds	r5, #1
 800b07a:	e7c6      	b.n	800b00a <_printf_common+0x3e>
 800b07c:	18e1      	adds	r1, r4, r3
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	2030      	movs	r0, #48	@ 0x30
 800b082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b086:	4422      	add	r2, r4
 800b088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b08c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b090:	3302      	adds	r3, #2
 800b092:	e7c7      	b.n	800b024 <_printf_common+0x58>
 800b094:	2301      	movs	r3, #1
 800b096:	4622      	mov	r2, r4
 800b098:	4641      	mov	r1, r8
 800b09a:	4638      	mov	r0, r7
 800b09c:	47c8      	blx	r9
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d0e6      	beq.n	800b070 <_printf_common+0xa4>
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	e7d9      	b.n	800b05a <_printf_common+0x8e>
	...

0800b0a8 <_printf_i>:
 800b0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	7e0f      	ldrb	r7, [r1, #24]
 800b0ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b0b0:	2f78      	cmp	r7, #120	@ 0x78
 800b0b2:	4691      	mov	r9, r2
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	469a      	mov	sl, r3
 800b0ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b0be:	d807      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0c0:	2f62      	cmp	r7, #98	@ 0x62
 800b0c2:	d80a      	bhi.n	800b0da <_printf_i+0x32>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	f000 80d2 	beq.w	800b26e <_printf_i+0x1c6>
 800b0ca:	2f58      	cmp	r7, #88	@ 0x58
 800b0cc:	f000 80b9 	beq.w	800b242 <_printf_i+0x19a>
 800b0d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0d8:	e03a      	b.n	800b150 <_printf_i+0xa8>
 800b0da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0de:	2b15      	cmp	r3, #21
 800b0e0:	d8f6      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0e8 <_printf_i+0x40>)
 800b0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b0d1 	.word	0x0800b0d1
 800b0f4:	0800b0d1 	.word	0x0800b0d1
 800b0f8:	0800b0d1 	.word	0x0800b0d1
 800b0fc:	0800b0d1 	.word	0x0800b0d1
 800b100:	0800b155 	.word	0x0800b155
 800b104:	0800b0d1 	.word	0x0800b0d1
 800b108:	0800b0d1 	.word	0x0800b0d1
 800b10c:	0800b0d1 	.word	0x0800b0d1
 800b110:	0800b0d1 	.word	0x0800b0d1
 800b114:	0800b255 	.word	0x0800b255
 800b118:	0800b17f 	.word	0x0800b17f
 800b11c:	0800b20f 	.word	0x0800b20f
 800b120:	0800b0d1 	.word	0x0800b0d1
 800b124:	0800b0d1 	.word	0x0800b0d1
 800b128:	0800b277 	.word	0x0800b277
 800b12c:	0800b0d1 	.word	0x0800b0d1
 800b130:	0800b17f 	.word	0x0800b17f
 800b134:	0800b0d1 	.word	0x0800b0d1
 800b138:	0800b0d1 	.word	0x0800b0d1
 800b13c:	0800b217 	.word	0x0800b217
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6032      	str	r2, [r6, #0]
 800b148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b14c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b150:	2301      	movs	r3, #1
 800b152:	e09d      	b.n	800b290 <_printf_i+0x1e8>
 800b154:	6833      	ldr	r3, [r6, #0]
 800b156:	6820      	ldr	r0, [r4, #0]
 800b158:	1d19      	adds	r1, r3, #4
 800b15a:	6031      	str	r1, [r6, #0]
 800b15c:	0606      	lsls	r6, r0, #24
 800b15e:	d501      	bpl.n	800b164 <_printf_i+0xbc>
 800b160:	681d      	ldr	r5, [r3, #0]
 800b162:	e003      	b.n	800b16c <_printf_i+0xc4>
 800b164:	0645      	lsls	r5, r0, #25
 800b166:	d5fb      	bpl.n	800b160 <_printf_i+0xb8>
 800b168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	da03      	bge.n	800b178 <_printf_i+0xd0>
 800b170:	232d      	movs	r3, #45	@ 0x2d
 800b172:	426d      	negs	r5, r5
 800b174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b178:	4859      	ldr	r0, [pc, #356]	@ (800b2e0 <_printf_i+0x238>)
 800b17a:	230a      	movs	r3, #10
 800b17c:	e011      	b.n	800b1a2 <_printf_i+0xfa>
 800b17e:	6821      	ldr	r1, [r4, #0]
 800b180:	6833      	ldr	r3, [r6, #0]
 800b182:	0608      	lsls	r0, r1, #24
 800b184:	f853 5b04 	ldr.w	r5, [r3], #4
 800b188:	d402      	bmi.n	800b190 <_printf_i+0xe8>
 800b18a:	0649      	lsls	r1, r1, #25
 800b18c:	bf48      	it	mi
 800b18e:	b2ad      	uxthmi	r5, r5
 800b190:	2f6f      	cmp	r7, #111	@ 0x6f
 800b192:	4853      	ldr	r0, [pc, #332]	@ (800b2e0 <_printf_i+0x238>)
 800b194:	6033      	str	r3, [r6, #0]
 800b196:	bf14      	ite	ne
 800b198:	230a      	movne	r3, #10
 800b19a:	2308      	moveq	r3, #8
 800b19c:	2100      	movs	r1, #0
 800b19e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b1a2:	6866      	ldr	r6, [r4, #4]
 800b1a4:	60a6      	str	r6, [r4, #8]
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	bfa2      	ittt	ge
 800b1aa:	6821      	ldrge	r1, [r4, #0]
 800b1ac:	f021 0104 	bicge.w	r1, r1, #4
 800b1b0:	6021      	strge	r1, [r4, #0]
 800b1b2:	b90d      	cbnz	r5, 800b1b8 <_printf_i+0x110>
 800b1b4:	2e00      	cmp	r6, #0
 800b1b6:	d04b      	beq.n	800b250 <_printf_i+0x1a8>
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b1be:	fb03 5711 	mls	r7, r3, r1, r5
 800b1c2:	5dc7      	ldrb	r7, [r0, r7]
 800b1c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b1c8:	462f      	mov	r7, r5
 800b1ca:	42bb      	cmp	r3, r7
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	d9f4      	bls.n	800b1ba <_printf_i+0x112>
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d10b      	bne.n	800b1ec <_printf_i+0x144>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	07df      	lsls	r7, r3, #31
 800b1d8:	d508      	bpl.n	800b1ec <_printf_i+0x144>
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	6861      	ldr	r1, [r4, #4]
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	bfde      	ittt	le
 800b1e2:	2330      	movle	r3, #48	@ 0x30
 800b1e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1ec:	1b92      	subs	r2, r2, r6
 800b1ee:	6122      	str	r2, [r4, #16]
 800b1f0:	f8cd a000 	str.w	sl, [sp]
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	aa03      	add	r2, sp, #12
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4640      	mov	r0, r8
 800b1fc:	f7ff fee6 	bl	800afcc <_printf_common>
 800b200:	3001      	adds	r0, #1
 800b202:	d14a      	bne.n	800b29a <_printf_i+0x1f2>
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	b004      	add	sp, #16
 800b20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	f043 0320 	orr.w	r3, r3, #32
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	4833      	ldr	r0, [pc, #204]	@ (800b2e4 <_printf_i+0x23c>)
 800b218:	2778      	movs	r7, #120	@ 0x78
 800b21a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	6831      	ldr	r1, [r6, #0]
 800b222:	061f      	lsls	r7, r3, #24
 800b224:	f851 5b04 	ldr.w	r5, [r1], #4
 800b228:	d402      	bmi.n	800b230 <_printf_i+0x188>
 800b22a:	065f      	lsls	r7, r3, #25
 800b22c:	bf48      	it	mi
 800b22e:	b2ad      	uxthmi	r5, r5
 800b230:	6031      	str	r1, [r6, #0]
 800b232:	07d9      	lsls	r1, r3, #31
 800b234:	bf44      	itt	mi
 800b236:	f043 0320 	orrmi.w	r3, r3, #32
 800b23a:	6023      	strmi	r3, [r4, #0]
 800b23c:	b11d      	cbz	r5, 800b246 <_printf_i+0x19e>
 800b23e:	2310      	movs	r3, #16
 800b240:	e7ac      	b.n	800b19c <_printf_i+0xf4>
 800b242:	4827      	ldr	r0, [pc, #156]	@ (800b2e0 <_printf_i+0x238>)
 800b244:	e7e9      	b.n	800b21a <_printf_i+0x172>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	f023 0320 	bic.w	r3, r3, #32
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	e7f6      	b.n	800b23e <_printf_i+0x196>
 800b250:	4616      	mov	r6, r2
 800b252:	e7bd      	b.n	800b1d0 <_printf_i+0x128>
 800b254:	6833      	ldr	r3, [r6, #0]
 800b256:	6825      	ldr	r5, [r4, #0]
 800b258:	6961      	ldr	r1, [r4, #20]
 800b25a:	1d18      	adds	r0, r3, #4
 800b25c:	6030      	str	r0, [r6, #0]
 800b25e:	062e      	lsls	r6, r5, #24
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	d501      	bpl.n	800b268 <_printf_i+0x1c0>
 800b264:	6019      	str	r1, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0x1c6>
 800b268:	0668      	lsls	r0, r5, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0x1bc>
 800b26c:	8019      	strh	r1, [r3, #0]
 800b26e:	2300      	movs	r3, #0
 800b270:	6123      	str	r3, [r4, #16]
 800b272:	4616      	mov	r6, r2
 800b274:	e7bc      	b.n	800b1f0 <_printf_i+0x148>
 800b276:	6833      	ldr	r3, [r6, #0]
 800b278:	1d1a      	adds	r2, r3, #4
 800b27a:	6032      	str	r2, [r6, #0]
 800b27c:	681e      	ldr	r6, [r3, #0]
 800b27e:	6862      	ldr	r2, [r4, #4]
 800b280:	2100      	movs	r1, #0
 800b282:	4630      	mov	r0, r6
 800b284:	f7f5 f82c 	bl	80002e0 <memchr>
 800b288:	b108      	cbz	r0, 800b28e <_printf_i+0x1e6>
 800b28a:	1b80      	subs	r0, r0, r6
 800b28c:	6060      	str	r0, [r4, #4]
 800b28e:	6863      	ldr	r3, [r4, #4]
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	2300      	movs	r3, #0
 800b294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b298:	e7aa      	b.n	800b1f0 <_printf_i+0x148>
 800b29a:	6923      	ldr	r3, [r4, #16]
 800b29c:	4632      	mov	r2, r6
 800b29e:	4649      	mov	r1, r9
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	47d0      	blx	sl
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d0ad      	beq.n	800b204 <_printf_i+0x15c>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	079b      	lsls	r3, r3, #30
 800b2ac:	d413      	bmi.n	800b2d6 <_printf_i+0x22e>
 800b2ae:	68e0      	ldr	r0, [r4, #12]
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	4298      	cmp	r0, r3
 800b2b4:	bfb8      	it	lt
 800b2b6:	4618      	movlt	r0, r3
 800b2b8:	e7a6      	b.n	800b208 <_printf_i+0x160>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	4632      	mov	r2, r6
 800b2be:	4649      	mov	r1, r9
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	47d0      	blx	sl
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d09d      	beq.n	800b204 <_printf_i+0x15c>
 800b2c8:	3501      	adds	r5, #1
 800b2ca:	68e3      	ldr	r3, [r4, #12]
 800b2cc:	9903      	ldr	r1, [sp, #12]
 800b2ce:	1a5b      	subs	r3, r3, r1
 800b2d0:	42ab      	cmp	r3, r5
 800b2d2:	dcf2      	bgt.n	800b2ba <_printf_i+0x212>
 800b2d4:	e7eb      	b.n	800b2ae <_printf_i+0x206>
 800b2d6:	2500      	movs	r5, #0
 800b2d8:	f104 0619 	add.w	r6, r4, #25
 800b2dc:	e7f5      	b.n	800b2ca <_printf_i+0x222>
 800b2de:	bf00      	nop
 800b2e0:	0800f127 	.word	0x0800f127
 800b2e4:	0800f138 	.word	0x0800f138

0800b2e8 <_scanf_float>:
 800b2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	b087      	sub	sp, #28
 800b2ee:	4617      	mov	r7, r2
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	688b      	ldr	r3, [r1, #8]
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b2fa:	bf81      	itttt	hi
 800b2fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b300:	eb03 0b05 	addhi.w	fp, r3, r5
 800b304:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b308:	608b      	strhi	r3, [r1, #8]
 800b30a:	680b      	ldr	r3, [r1, #0]
 800b30c:	460a      	mov	r2, r1
 800b30e:	f04f 0500 	mov.w	r5, #0
 800b312:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b316:	f842 3b1c 	str.w	r3, [r2], #28
 800b31a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b31e:	4680      	mov	r8, r0
 800b320:	460c      	mov	r4, r1
 800b322:	bf98      	it	ls
 800b324:	f04f 0b00 	movls.w	fp, #0
 800b328:	9201      	str	r2, [sp, #4]
 800b32a:	4616      	mov	r6, r2
 800b32c:	46aa      	mov	sl, r5
 800b32e:	46a9      	mov	r9, r5
 800b330:	9502      	str	r5, [sp, #8]
 800b332:	68a2      	ldr	r2, [r4, #8]
 800b334:	b152      	cbz	r2, 800b34c <_scanf_float+0x64>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b33c:	d864      	bhi.n	800b408 <_scanf_float+0x120>
 800b33e:	2b40      	cmp	r3, #64	@ 0x40
 800b340:	d83c      	bhi.n	800b3bc <_scanf_float+0xd4>
 800b342:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b346:	b2c8      	uxtb	r0, r1
 800b348:	280e      	cmp	r0, #14
 800b34a:	d93a      	bls.n	800b3c2 <_scanf_float+0xda>
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	d003      	beq.n	800b35a <_scanf_float+0x72>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b35e:	f1ba 0f01 	cmp.w	sl, #1
 800b362:	f200 8117 	bhi.w	800b594 <_scanf_float+0x2ac>
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	429e      	cmp	r6, r3
 800b36a:	f200 8108 	bhi.w	800b57e <_scanf_float+0x296>
 800b36e:	2001      	movs	r0, #1
 800b370:	b007      	add	sp, #28
 800b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b376:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b37a:	2a0d      	cmp	r2, #13
 800b37c:	d8e6      	bhi.n	800b34c <_scanf_float+0x64>
 800b37e:	a101      	add	r1, pc, #4	@ (adr r1, 800b384 <_scanf_float+0x9c>)
 800b380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b384:	0800b4cb 	.word	0x0800b4cb
 800b388:	0800b34d 	.word	0x0800b34d
 800b38c:	0800b34d 	.word	0x0800b34d
 800b390:	0800b34d 	.word	0x0800b34d
 800b394:	0800b52b 	.word	0x0800b52b
 800b398:	0800b503 	.word	0x0800b503
 800b39c:	0800b34d 	.word	0x0800b34d
 800b3a0:	0800b34d 	.word	0x0800b34d
 800b3a4:	0800b4d9 	.word	0x0800b4d9
 800b3a8:	0800b34d 	.word	0x0800b34d
 800b3ac:	0800b34d 	.word	0x0800b34d
 800b3b0:	0800b34d 	.word	0x0800b34d
 800b3b4:	0800b34d 	.word	0x0800b34d
 800b3b8:	0800b491 	.word	0x0800b491
 800b3bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b3c0:	e7db      	b.n	800b37a <_scanf_float+0x92>
 800b3c2:	290e      	cmp	r1, #14
 800b3c4:	d8c2      	bhi.n	800b34c <_scanf_float+0x64>
 800b3c6:	a001      	add	r0, pc, #4	@ (adr r0, 800b3cc <_scanf_float+0xe4>)
 800b3c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b3cc:	0800b481 	.word	0x0800b481
 800b3d0:	0800b34d 	.word	0x0800b34d
 800b3d4:	0800b481 	.word	0x0800b481
 800b3d8:	0800b517 	.word	0x0800b517
 800b3dc:	0800b34d 	.word	0x0800b34d
 800b3e0:	0800b429 	.word	0x0800b429
 800b3e4:	0800b467 	.word	0x0800b467
 800b3e8:	0800b467 	.word	0x0800b467
 800b3ec:	0800b467 	.word	0x0800b467
 800b3f0:	0800b467 	.word	0x0800b467
 800b3f4:	0800b467 	.word	0x0800b467
 800b3f8:	0800b467 	.word	0x0800b467
 800b3fc:	0800b467 	.word	0x0800b467
 800b400:	0800b467 	.word	0x0800b467
 800b404:	0800b467 	.word	0x0800b467
 800b408:	2b6e      	cmp	r3, #110	@ 0x6e
 800b40a:	d809      	bhi.n	800b420 <_scanf_float+0x138>
 800b40c:	2b60      	cmp	r3, #96	@ 0x60
 800b40e:	d8b2      	bhi.n	800b376 <_scanf_float+0x8e>
 800b410:	2b54      	cmp	r3, #84	@ 0x54
 800b412:	d07b      	beq.n	800b50c <_scanf_float+0x224>
 800b414:	2b59      	cmp	r3, #89	@ 0x59
 800b416:	d199      	bne.n	800b34c <_scanf_float+0x64>
 800b418:	2d07      	cmp	r5, #7
 800b41a:	d197      	bne.n	800b34c <_scanf_float+0x64>
 800b41c:	2508      	movs	r5, #8
 800b41e:	e02c      	b.n	800b47a <_scanf_float+0x192>
 800b420:	2b74      	cmp	r3, #116	@ 0x74
 800b422:	d073      	beq.n	800b50c <_scanf_float+0x224>
 800b424:	2b79      	cmp	r3, #121	@ 0x79
 800b426:	e7f6      	b.n	800b416 <_scanf_float+0x12e>
 800b428:	6821      	ldr	r1, [r4, #0]
 800b42a:	05c8      	lsls	r0, r1, #23
 800b42c:	d51b      	bpl.n	800b466 <_scanf_float+0x17e>
 800b42e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b432:	6021      	str	r1, [r4, #0]
 800b434:	f109 0901 	add.w	r9, r9, #1
 800b438:	f1bb 0f00 	cmp.w	fp, #0
 800b43c:	d003      	beq.n	800b446 <_scanf_float+0x15e>
 800b43e:	3201      	adds	r2, #1
 800b440:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b444:	60a2      	str	r2, [r4, #8]
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	3b01      	subs	r3, #1
 800b44a:	60a3      	str	r3, [r4, #8]
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	3301      	adds	r3, #1
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3b01      	subs	r3, #1
 800b456:	2b00      	cmp	r3, #0
 800b458:	607b      	str	r3, [r7, #4]
 800b45a:	f340 8087 	ble.w	800b56c <_scanf_float+0x284>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	e765      	b.n	800b332 <_scanf_float+0x4a>
 800b466:	eb1a 0105 	adds.w	r1, sl, r5
 800b46a:	f47f af6f 	bne.w	800b34c <_scanf_float+0x64>
 800b46e:	6822      	ldr	r2, [r4, #0]
 800b470:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b474:	6022      	str	r2, [r4, #0]
 800b476:	460d      	mov	r5, r1
 800b478:	468a      	mov	sl, r1
 800b47a:	f806 3b01 	strb.w	r3, [r6], #1
 800b47e:	e7e2      	b.n	800b446 <_scanf_float+0x15e>
 800b480:	6822      	ldr	r2, [r4, #0]
 800b482:	0610      	lsls	r0, r2, #24
 800b484:	f57f af62 	bpl.w	800b34c <_scanf_float+0x64>
 800b488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b48c:	6022      	str	r2, [r4, #0]
 800b48e:	e7f4      	b.n	800b47a <_scanf_float+0x192>
 800b490:	f1ba 0f00 	cmp.w	sl, #0
 800b494:	d10e      	bne.n	800b4b4 <_scanf_float+0x1cc>
 800b496:	f1b9 0f00 	cmp.w	r9, #0
 800b49a:	d10e      	bne.n	800b4ba <_scanf_float+0x1d2>
 800b49c:	6822      	ldr	r2, [r4, #0]
 800b49e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b4a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b4a6:	d108      	bne.n	800b4ba <_scanf_float+0x1d2>
 800b4a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4ac:	6022      	str	r2, [r4, #0]
 800b4ae:	f04f 0a01 	mov.w	sl, #1
 800b4b2:	e7e2      	b.n	800b47a <_scanf_float+0x192>
 800b4b4:	f1ba 0f02 	cmp.w	sl, #2
 800b4b8:	d055      	beq.n	800b566 <_scanf_float+0x27e>
 800b4ba:	2d01      	cmp	r5, #1
 800b4bc:	d002      	beq.n	800b4c4 <_scanf_float+0x1dc>
 800b4be:	2d04      	cmp	r5, #4
 800b4c0:	f47f af44 	bne.w	800b34c <_scanf_float+0x64>
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	b2ed      	uxtb	r5, r5
 800b4c8:	e7d7      	b.n	800b47a <_scanf_float+0x192>
 800b4ca:	f1ba 0f01 	cmp.w	sl, #1
 800b4ce:	f47f af3d 	bne.w	800b34c <_scanf_float+0x64>
 800b4d2:	f04f 0a02 	mov.w	sl, #2
 800b4d6:	e7d0      	b.n	800b47a <_scanf_float+0x192>
 800b4d8:	b97d      	cbnz	r5, 800b4fa <_scanf_float+0x212>
 800b4da:	f1b9 0f00 	cmp.w	r9, #0
 800b4de:	f47f af38 	bne.w	800b352 <_scanf_float+0x6a>
 800b4e2:	6822      	ldr	r2, [r4, #0]
 800b4e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b4e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b4ec:	f040 8101 	bne.w	800b6f2 <_scanf_float+0x40a>
 800b4f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4f4:	6022      	str	r2, [r4, #0]
 800b4f6:	2501      	movs	r5, #1
 800b4f8:	e7bf      	b.n	800b47a <_scanf_float+0x192>
 800b4fa:	2d03      	cmp	r5, #3
 800b4fc:	d0e2      	beq.n	800b4c4 <_scanf_float+0x1dc>
 800b4fe:	2d05      	cmp	r5, #5
 800b500:	e7de      	b.n	800b4c0 <_scanf_float+0x1d8>
 800b502:	2d02      	cmp	r5, #2
 800b504:	f47f af22 	bne.w	800b34c <_scanf_float+0x64>
 800b508:	2503      	movs	r5, #3
 800b50a:	e7b6      	b.n	800b47a <_scanf_float+0x192>
 800b50c:	2d06      	cmp	r5, #6
 800b50e:	f47f af1d 	bne.w	800b34c <_scanf_float+0x64>
 800b512:	2507      	movs	r5, #7
 800b514:	e7b1      	b.n	800b47a <_scanf_float+0x192>
 800b516:	6822      	ldr	r2, [r4, #0]
 800b518:	0591      	lsls	r1, r2, #22
 800b51a:	f57f af17 	bpl.w	800b34c <_scanf_float+0x64>
 800b51e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b522:	6022      	str	r2, [r4, #0]
 800b524:	f8cd 9008 	str.w	r9, [sp, #8]
 800b528:	e7a7      	b.n	800b47a <_scanf_float+0x192>
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b530:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b534:	d006      	beq.n	800b544 <_scanf_float+0x25c>
 800b536:	0550      	lsls	r0, r2, #21
 800b538:	f57f af08 	bpl.w	800b34c <_scanf_float+0x64>
 800b53c:	f1b9 0f00 	cmp.w	r9, #0
 800b540:	f000 80d7 	beq.w	800b6f2 <_scanf_float+0x40a>
 800b544:	0591      	lsls	r1, r2, #22
 800b546:	bf58      	it	pl
 800b548:	9902      	ldrpl	r1, [sp, #8]
 800b54a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b54e:	bf58      	it	pl
 800b550:	eba9 0101 	subpl.w	r1, r9, r1
 800b554:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b558:	bf58      	it	pl
 800b55a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b55e:	6022      	str	r2, [r4, #0]
 800b560:	f04f 0900 	mov.w	r9, #0
 800b564:	e789      	b.n	800b47a <_scanf_float+0x192>
 800b566:	f04f 0a03 	mov.w	sl, #3
 800b56a:	e786      	b.n	800b47a <_scanf_float+0x192>
 800b56c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b570:	4639      	mov	r1, r7
 800b572:	4640      	mov	r0, r8
 800b574:	4798      	blx	r3
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f aedb 	beq.w	800b332 <_scanf_float+0x4a>
 800b57c:	e6e6      	b.n	800b34c <_scanf_float+0x64>
 800b57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b586:	463a      	mov	r2, r7
 800b588:	4640      	mov	r0, r8
 800b58a:	4798      	blx	r3
 800b58c:	6923      	ldr	r3, [r4, #16]
 800b58e:	3b01      	subs	r3, #1
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	e6e8      	b.n	800b366 <_scanf_float+0x7e>
 800b594:	1e6b      	subs	r3, r5, #1
 800b596:	2b06      	cmp	r3, #6
 800b598:	d824      	bhi.n	800b5e4 <_scanf_float+0x2fc>
 800b59a:	2d02      	cmp	r5, #2
 800b59c:	d836      	bhi.n	800b60c <_scanf_float+0x324>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	429e      	cmp	r6, r3
 800b5a2:	f67f aee4 	bls.w	800b36e <_scanf_float+0x86>
 800b5a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5ae:	463a      	mov	r2, r7
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	4798      	blx	r3
 800b5b4:	6923      	ldr	r3, [r4, #16]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	6123      	str	r3, [r4, #16]
 800b5ba:	e7f0      	b.n	800b59e <_scanf_float+0x2b6>
 800b5bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b5c4:	463a      	mov	r2, r7
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	4798      	blx	r3
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	6123      	str	r3, [r4, #16]
 800b5d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5d4:	fa5f fa8a 	uxtb.w	sl, sl
 800b5d8:	f1ba 0f02 	cmp.w	sl, #2
 800b5dc:	d1ee      	bne.n	800b5bc <_scanf_float+0x2d4>
 800b5de:	3d03      	subs	r5, #3
 800b5e0:	b2ed      	uxtb	r5, r5
 800b5e2:	1b76      	subs	r6, r6, r5
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	05da      	lsls	r2, r3, #23
 800b5e8:	d530      	bpl.n	800b64c <_scanf_float+0x364>
 800b5ea:	055b      	lsls	r3, r3, #21
 800b5ec:	d511      	bpl.n	800b612 <_scanf_float+0x32a>
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	429e      	cmp	r6, r3
 800b5f2:	f67f aebc 	bls.w	800b36e <_scanf_float+0x86>
 800b5f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5fe:	463a      	mov	r2, r7
 800b600:	4640      	mov	r0, r8
 800b602:	4798      	blx	r3
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	3b01      	subs	r3, #1
 800b608:	6123      	str	r3, [r4, #16]
 800b60a:	e7f0      	b.n	800b5ee <_scanf_float+0x306>
 800b60c:	46aa      	mov	sl, r5
 800b60e:	46b3      	mov	fp, r6
 800b610:	e7de      	b.n	800b5d0 <_scanf_float+0x2e8>
 800b612:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b616:	6923      	ldr	r3, [r4, #16]
 800b618:	2965      	cmp	r1, #101	@ 0x65
 800b61a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b61e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b622:	6123      	str	r3, [r4, #16]
 800b624:	d00c      	beq.n	800b640 <_scanf_float+0x358>
 800b626:	2945      	cmp	r1, #69	@ 0x45
 800b628:	d00a      	beq.n	800b640 <_scanf_float+0x358>
 800b62a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b62e:	463a      	mov	r2, r7
 800b630:	4640      	mov	r0, r8
 800b632:	4798      	blx	r3
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	1eb5      	subs	r5, r6, #2
 800b63e:	6123      	str	r3, [r4, #16]
 800b640:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b644:	463a      	mov	r2, r7
 800b646:	4640      	mov	r0, r8
 800b648:	4798      	blx	r3
 800b64a:	462e      	mov	r6, r5
 800b64c:	6822      	ldr	r2, [r4, #0]
 800b64e:	f012 0210 	ands.w	r2, r2, #16
 800b652:	d001      	beq.n	800b658 <_scanf_float+0x370>
 800b654:	2000      	movs	r0, #0
 800b656:	e68b      	b.n	800b370 <_scanf_float+0x88>
 800b658:	7032      	strb	r2, [r6, #0]
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b664:	d11a      	bne.n	800b69c <_scanf_float+0x3b4>
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	454b      	cmp	r3, r9
 800b66a:	eba3 0209 	sub.w	r2, r3, r9
 800b66e:	d121      	bne.n	800b6b4 <_scanf_float+0x3cc>
 800b670:	9901      	ldr	r1, [sp, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	4640      	mov	r0, r8
 800b676:	f002 fb95 	bl	800dda4 <_strtod_r>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f011 0f02 	tst.w	r1, #2
 800b684:	f103 0204 	add.w	r2, r3, #4
 800b688:	d01f      	beq.n	800b6ca <_scanf_float+0x3e2>
 800b68a:	9903      	ldr	r1, [sp, #12]
 800b68c:	600a      	str	r2, [r1, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	ed83 0b00 	vstr	d0, [r3]
 800b694:	68e3      	ldr	r3, [r4, #12]
 800b696:	3301      	adds	r3, #1
 800b698:	60e3      	str	r3, [r4, #12]
 800b69a:	e7db      	b.n	800b654 <_scanf_float+0x36c>
 800b69c:	9b04      	ldr	r3, [sp, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d0e6      	beq.n	800b670 <_scanf_float+0x388>
 800b6a2:	9905      	ldr	r1, [sp, #20]
 800b6a4:	230a      	movs	r3, #10
 800b6a6:	3101      	adds	r1, #1
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	f7ff f9d9 	bl	800aa60 <_strtol_r>
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	9e05      	ldr	r6, [sp, #20]
 800b6b2:	1ac2      	subs	r2, r0, r3
 800b6b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b6b8:	429e      	cmp	r6, r3
 800b6ba:	bf28      	it	cs
 800b6bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b6c0:	490d      	ldr	r1, [pc, #52]	@ (800b6f8 <_scanf_float+0x410>)
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 f924 	bl	800b910 <siprintf>
 800b6c8:	e7d2      	b.n	800b670 <_scanf_float+0x388>
 800b6ca:	f011 0f04 	tst.w	r1, #4
 800b6ce:	9903      	ldr	r1, [sp, #12]
 800b6d0:	600a      	str	r2, [r1, #0]
 800b6d2:	d1dc      	bne.n	800b68e <_scanf_float+0x3a6>
 800b6d4:	eeb4 0b40 	vcmp.f64	d0, d0
 800b6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6dc:	681d      	ldr	r5, [r3, #0]
 800b6de:	d705      	bvc.n	800b6ec <_scanf_float+0x404>
 800b6e0:	4806      	ldr	r0, [pc, #24]	@ (800b6fc <_scanf_float+0x414>)
 800b6e2:	f000 fa19 	bl	800bb18 <nanf>
 800b6e6:	ed85 0a00 	vstr	s0, [r5]
 800b6ea:	e7d3      	b.n	800b694 <_scanf_float+0x3ac>
 800b6ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b6f0:	e7f9      	b.n	800b6e6 <_scanf_float+0x3fe>
 800b6f2:	f04f 0900 	mov.w	r9, #0
 800b6f6:	e630      	b.n	800b35a <_scanf_float+0x72>
 800b6f8:	0800f149 	.word	0x0800f149
 800b6fc:	0800f3dc 	.word	0x0800f3dc

0800b700 <std>:
 800b700:	2300      	movs	r3, #0
 800b702:	b510      	push	{r4, lr}
 800b704:	4604      	mov	r4, r0
 800b706:	e9c0 3300 	strd	r3, r3, [r0]
 800b70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b70e:	6083      	str	r3, [r0, #8]
 800b710:	8181      	strh	r1, [r0, #12]
 800b712:	6643      	str	r3, [r0, #100]	@ 0x64
 800b714:	81c2      	strh	r2, [r0, #14]
 800b716:	6183      	str	r3, [r0, #24]
 800b718:	4619      	mov	r1, r3
 800b71a:	2208      	movs	r2, #8
 800b71c:	305c      	adds	r0, #92	@ 0x5c
 800b71e:	f000 f95a 	bl	800b9d6 <memset>
 800b722:	4b0d      	ldr	r3, [pc, #52]	@ (800b758 <std+0x58>)
 800b724:	6263      	str	r3, [r4, #36]	@ 0x24
 800b726:	4b0d      	ldr	r3, [pc, #52]	@ (800b75c <std+0x5c>)
 800b728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b72a:	4b0d      	ldr	r3, [pc, #52]	@ (800b760 <std+0x60>)
 800b72c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b72e:	4b0d      	ldr	r3, [pc, #52]	@ (800b764 <std+0x64>)
 800b730:	6323      	str	r3, [r4, #48]	@ 0x30
 800b732:	4b0d      	ldr	r3, [pc, #52]	@ (800b768 <std+0x68>)
 800b734:	6224      	str	r4, [r4, #32]
 800b736:	429c      	cmp	r4, r3
 800b738:	d006      	beq.n	800b748 <std+0x48>
 800b73a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b73e:	4294      	cmp	r4, r2
 800b740:	d002      	beq.n	800b748 <std+0x48>
 800b742:	33d0      	adds	r3, #208	@ 0xd0
 800b744:	429c      	cmp	r4, r3
 800b746:	d105      	bne.n	800b754 <std+0x54>
 800b748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b750:	f000 b9d0 	b.w	800baf4 <__retarget_lock_init_recursive>
 800b754:	bd10      	pop	{r4, pc}
 800b756:	bf00      	nop
 800b758:	0800b951 	.word	0x0800b951
 800b75c:	0800b973 	.word	0x0800b973
 800b760:	0800b9ab 	.word	0x0800b9ab
 800b764:	0800b9cf 	.word	0x0800b9cf
 800b768:	240003c8 	.word	0x240003c8

0800b76c <stdio_exit_handler>:
 800b76c:	4a02      	ldr	r2, [pc, #8]	@ (800b778 <stdio_exit_handler+0xc>)
 800b76e:	4903      	ldr	r1, [pc, #12]	@ (800b77c <stdio_exit_handler+0x10>)
 800b770:	4803      	ldr	r0, [pc, #12]	@ (800b780 <stdio_exit_handler+0x14>)
 800b772:	f000 b869 	b.w	800b848 <_fwalk_sglue>
 800b776:	bf00      	nop
 800b778:	2400001c 	.word	0x2400001c
 800b77c:	0800e3ed 	.word	0x0800e3ed
 800b780:	2400002c 	.word	0x2400002c

0800b784 <cleanup_stdio>:
 800b784:	6841      	ldr	r1, [r0, #4]
 800b786:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b8 <cleanup_stdio+0x34>)
 800b788:	4299      	cmp	r1, r3
 800b78a:	b510      	push	{r4, lr}
 800b78c:	4604      	mov	r4, r0
 800b78e:	d001      	beq.n	800b794 <cleanup_stdio+0x10>
 800b790:	f002 fe2c 	bl	800e3ec <_fflush_r>
 800b794:	68a1      	ldr	r1, [r4, #8]
 800b796:	4b09      	ldr	r3, [pc, #36]	@ (800b7bc <cleanup_stdio+0x38>)
 800b798:	4299      	cmp	r1, r3
 800b79a:	d002      	beq.n	800b7a2 <cleanup_stdio+0x1e>
 800b79c:	4620      	mov	r0, r4
 800b79e:	f002 fe25 	bl	800e3ec <_fflush_r>
 800b7a2:	68e1      	ldr	r1, [r4, #12]
 800b7a4:	4b06      	ldr	r3, [pc, #24]	@ (800b7c0 <cleanup_stdio+0x3c>)
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	d004      	beq.n	800b7b4 <cleanup_stdio+0x30>
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b0:	f002 be1c 	b.w	800e3ec <_fflush_r>
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	bf00      	nop
 800b7b8:	240003c8 	.word	0x240003c8
 800b7bc:	24000430 	.word	0x24000430
 800b7c0:	24000498 	.word	0x24000498

0800b7c4 <global_stdio_init.part.0>:
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f4 <global_stdio_init.part.0+0x30>)
 800b7c8:	4c0b      	ldr	r4, [pc, #44]	@ (800b7f8 <global_stdio_init.part.0+0x34>)
 800b7ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b7fc <global_stdio_init.part.0+0x38>)
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2104      	movs	r1, #4
 800b7d4:	f7ff ff94 	bl	800b700 <std>
 800b7d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7dc:	2201      	movs	r2, #1
 800b7de:	2109      	movs	r1, #9
 800b7e0:	f7ff ff8e 	bl	800b700 <std>
 800b7e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ee:	2112      	movs	r1, #18
 800b7f0:	f7ff bf86 	b.w	800b700 <std>
 800b7f4:	24000500 	.word	0x24000500
 800b7f8:	240003c8 	.word	0x240003c8
 800b7fc:	0800b76d 	.word	0x0800b76d

0800b800 <__sfp_lock_acquire>:
 800b800:	4801      	ldr	r0, [pc, #4]	@ (800b808 <__sfp_lock_acquire+0x8>)
 800b802:	f000 b978 	b.w	800baf6 <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	24000509 	.word	0x24000509

0800b80c <__sfp_lock_release>:
 800b80c:	4801      	ldr	r0, [pc, #4]	@ (800b814 <__sfp_lock_release+0x8>)
 800b80e:	f000 b973 	b.w	800baf8 <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	24000509 	.word	0x24000509

0800b818 <__sinit>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	f7ff fff0 	bl	800b800 <__sfp_lock_acquire>
 800b820:	6a23      	ldr	r3, [r4, #32]
 800b822:	b11b      	cbz	r3, 800b82c <__sinit+0x14>
 800b824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b828:	f7ff bff0 	b.w	800b80c <__sfp_lock_release>
 800b82c:	4b04      	ldr	r3, [pc, #16]	@ (800b840 <__sinit+0x28>)
 800b82e:	6223      	str	r3, [r4, #32]
 800b830:	4b04      	ldr	r3, [pc, #16]	@ (800b844 <__sinit+0x2c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1f5      	bne.n	800b824 <__sinit+0xc>
 800b838:	f7ff ffc4 	bl	800b7c4 <global_stdio_init.part.0>
 800b83c:	e7f2      	b.n	800b824 <__sinit+0xc>
 800b83e:	bf00      	nop
 800b840:	0800b785 	.word	0x0800b785
 800b844:	24000500 	.word	0x24000500

0800b848 <_fwalk_sglue>:
 800b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84c:	4607      	mov	r7, r0
 800b84e:	4688      	mov	r8, r1
 800b850:	4614      	mov	r4, r2
 800b852:	2600      	movs	r6, #0
 800b854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b858:	f1b9 0901 	subs.w	r9, r9, #1
 800b85c:	d505      	bpl.n	800b86a <_fwalk_sglue+0x22>
 800b85e:	6824      	ldr	r4, [r4, #0]
 800b860:	2c00      	cmp	r4, #0
 800b862:	d1f7      	bne.n	800b854 <_fwalk_sglue+0xc>
 800b864:	4630      	mov	r0, r6
 800b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d907      	bls.n	800b880 <_fwalk_sglue+0x38>
 800b870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b874:	3301      	adds	r3, #1
 800b876:	d003      	beq.n	800b880 <_fwalk_sglue+0x38>
 800b878:	4629      	mov	r1, r5
 800b87a:	4638      	mov	r0, r7
 800b87c:	47c0      	blx	r8
 800b87e:	4306      	orrs	r6, r0
 800b880:	3568      	adds	r5, #104	@ 0x68
 800b882:	e7e9      	b.n	800b858 <_fwalk_sglue+0x10>

0800b884 <iprintf>:
 800b884:	b40f      	push	{r0, r1, r2, r3}
 800b886:	b507      	push	{r0, r1, r2, lr}
 800b888:	4906      	ldr	r1, [pc, #24]	@ (800b8a4 <iprintf+0x20>)
 800b88a:	ab04      	add	r3, sp, #16
 800b88c:	6808      	ldr	r0, [r1, #0]
 800b88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b892:	6881      	ldr	r1, [r0, #8]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	f002 fc0d 	bl	800e0b4 <_vfiprintf_r>
 800b89a:	b003      	add	sp, #12
 800b89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a0:	b004      	add	sp, #16
 800b8a2:	4770      	bx	lr
 800b8a4:	24000028 	.word	0x24000028

0800b8a8 <sniprintf>:
 800b8a8:	b40c      	push	{r2, r3}
 800b8aa:	b530      	push	{r4, r5, lr}
 800b8ac:	4b17      	ldr	r3, [pc, #92]	@ (800b90c <sniprintf+0x64>)
 800b8ae:	1e0c      	subs	r4, r1, #0
 800b8b0:	681d      	ldr	r5, [r3, #0]
 800b8b2:	b09d      	sub	sp, #116	@ 0x74
 800b8b4:	da08      	bge.n	800b8c8 <sniprintf+0x20>
 800b8b6:	238b      	movs	r3, #139	@ 0x8b
 800b8b8:	602b      	str	r3, [r5, #0]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b8be:	b01d      	add	sp, #116	@ 0x74
 800b8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8c4:	b002      	add	sp, #8
 800b8c6:	4770      	bx	lr
 800b8c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b8cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b8d0:	bf14      	ite	ne
 800b8d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b8d6:	4623      	moveq	r3, r4
 800b8d8:	9304      	str	r3, [sp, #16]
 800b8da:	9307      	str	r3, [sp, #28]
 800b8dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8e0:	9002      	str	r0, [sp, #8]
 800b8e2:	9006      	str	r0, [sp, #24]
 800b8e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b8e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b8ea:	ab21      	add	r3, sp, #132	@ 0x84
 800b8ec:	a902      	add	r1, sp, #8
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	f002 fab9 	bl	800de68 <_svfiprintf_r>
 800b8f6:	1c43      	adds	r3, r0, #1
 800b8f8:	bfbc      	itt	lt
 800b8fa:	238b      	movlt	r3, #139	@ 0x8b
 800b8fc:	602b      	strlt	r3, [r5, #0]
 800b8fe:	2c00      	cmp	r4, #0
 800b900:	d0dd      	beq.n	800b8be <sniprintf+0x16>
 800b902:	9b02      	ldr	r3, [sp, #8]
 800b904:	2200      	movs	r2, #0
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	e7d9      	b.n	800b8be <sniprintf+0x16>
 800b90a:	bf00      	nop
 800b90c:	24000028 	.word	0x24000028

0800b910 <siprintf>:
 800b910:	b40e      	push	{r1, r2, r3}
 800b912:	b500      	push	{lr}
 800b914:	b09c      	sub	sp, #112	@ 0x70
 800b916:	ab1d      	add	r3, sp, #116	@ 0x74
 800b918:	9002      	str	r0, [sp, #8]
 800b91a:	9006      	str	r0, [sp, #24]
 800b91c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <siprintf+0x38>)
 800b922:	9107      	str	r1, [sp, #28]
 800b924:	9104      	str	r1, [sp, #16]
 800b926:	4909      	ldr	r1, [pc, #36]	@ (800b94c <siprintf+0x3c>)
 800b928:	f853 2b04 	ldr.w	r2, [r3], #4
 800b92c:	9105      	str	r1, [sp, #20]
 800b92e:	6800      	ldr	r0, [r0, #0]
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	a902      	add	r1, sp, #8
 800b934:	f002 fa98 	bl	800de68 <_svfiprintf_r>
 800b938:	9b02      	ldr	r3, [sp, #8]
 800b93a:	2200      	movs	r2, #0
 800b93c:	701a      	strb	r2, [r3, #0]
 800b93e:	b01c      	add	sp, #112	@ 0x70
 800b940:	f85d eb04 	ldr.w	lr, [sp], #4
 800b944:	b003      	add	sp, #12
 800b946:	4770      	bx	lr
 800b948:	24000028 	.word	0x24000028
 800b94c:	ffff0208 	.word	0xffff0208

0800b950 <__sread>:
 800b950:	b510      	push	{r4, lr}
 800b952:	460c      	mov	r4, r1
 800b954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b958:	f000 f87e 	bl	800ba58 <_read_r>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	bfab      	itete	ge
 800b960:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b962:	89a3      	ldrhlt	r3, [r4, #12]
 800b964:	181b      	addge	r3, r3, r0
 800b966:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b96a:	bfac      	ite	ge
 800b96c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b96e:	81a3      	strhlt	r3, [r4, #12]
 800b970:	bd10      	pop	{r4, pc}

0800b972 <__swrite>:
 800b972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b976:	461f      	mov	r7, r3
 800b978:	898b      	ldrh	r3, [r1, #12]
 800b97a:	05db      	lsls	r3, r3, #23
 800b97c:	4605      	mov	r5, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	4616      	mov	r6, r2
 800b982:	d505      	bpl.n	800b990 <__swrite+0x1e>
 800b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b988:	2302      	movs	r3, #2
 800b98a:	2200      	movs	r2, #0
 800b98c:	f000 f852 	bl	800ba34 <_lseek_r>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b996:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	4632      	mov	r2, r6
 800b99e:	463b      	mov	r3, r7
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a6:	f000 b869 	b.w	800ba7c <_write_r>

0800b9aa <__sseek>:
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b2:	f000 f83f 	bl	800ba34 <_lseek_r>
 800b9b6:	1c43      	adds	r3, r0, #1
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	bf15      	itete	ne
 800b9bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9c6:	81a3      	strheq	r3, [r4, #12]
 800b9c8:	bf18      	it	ne
 800b9ca:	81a3      	strhne	r3, [r4, #12]
 800b9cc:	bd10      	pop	{r4, pc}

0800b9ce <__sclose>:
 800b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d2:	f000 b81f 	b.w	800ba14 <_close_r>

0800b9d6 <memset>:
 800b9d6:	4402      	add	r2, r0
 800b9d8:	4603      	mov	r3, r0
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d100      	bne.n	800b9e0 <memset+0xa>
 800b9de:	4770      	bx	lr
 800b9e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e4:	e7f9      	b.n	800b9da <memset+0x4>

0800b9e6 <strncmp>:
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	b16a      	cbz	r2, 800ba06 <strncmp+0x20>
 800b9ea:	3901      	subs	r1, #1
 800b9ec:	1884      	adds	r4, r0, r2
 800b9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d103      	bne.n	800ba02 <strncmp+0x1c>
 800b9fa:	42a0      	cmp	r0, r4
 800b9fc:	d001      	beq.n	800ba02 <strncmp+0x1c>
 800b9fe:	2a00      	cmp	r2, #0
 800ba00:	d1f5      	bne.n	800b9ee <strncmp+0x8>
 800ba02:	1ad0      	subs	r0, r2, r3
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	4610      	mov	r0, r2
 800ba08:	e7fc      	b.n	800ba04 <strncmp+0x1e>
	...

0800ba0c <_localeconv_r>:
 800ba0c:	4800      	ldr	r0, [pc, #0]	@ (800ba10 <_localeconv_r+0x4>)
 800ba0e:	4770      	bx	lr
 800ba10:	24000168 	.word	0x24000168

0800ba14 <_close_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d06      	ldr	r5, [pc, #24]	@ (800ba30 <_close_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f7f5 ff46 	bl	80018b0 <_close>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_close_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_close_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	24000504 	.word	0x24000504

0800ba34 <_lseek_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4d07      	ldr	r5, [pc, #28]	@ (800ba54 <_lseek_r+0x20>)
 800ba38:	4604      	mov	r4, r0
 800ba3a:	4608      	mov	r0, r1
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	602a      	str	r2, [r5, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	f7f5 ff5b 	bl	80018fe <_lseek>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_lseek_r+0x1e>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_lseek_r+0x1e>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	24000504 	.word	0x24000504

0800ba58 <_read_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	@ (800ba78 <_read_r+0x20>)
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4608      	mov	r0, r1
 800ba60:	4611      	mov	r1, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f5 fee9 	bl	800183e <_read>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_read_r+0x1e>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_read_r+0x1e>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	24000504 	.word	0x24000504

0800ba7c <_write_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d07      	ldr	r5, [pc, #28]	@ (800ba9c <_write_r+0x20>)
 800ba80:	4604      	mov	r4, r0
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	602a      	str	r2, [r5, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f7f5 fef4 	bl	8001878 <_write>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_write_r+0x1e>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_write_r+0x1e>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	24000504 	.word	0x24000504

0800baa0 <__errno>:
 800baa0:	4b01      	ldr	r3, [pc, #4]	@ (800baa8 <__errno+0x8>)
 800baa2:	6818      	ldr	r0, [r3, #0]
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	24000028 	.word	0x24000028

0800baac <__libc_init_array>:
 800baac:	b570      	push	{r4, r5, r6, lr}
 800baae:	4d0d      	ldr	r5, [pc, #52]	@ (800bae4 <__libc_init_array+0x38>)
 800bab0:	4c0d      	ldr	r4, [pc, #52]	@ (800bae8 <__libc_init_array+0x3c>)
 800bab2:	1b64      	subs	r4, r4, r5
 800bab4:	10a4      	asrs	r4, r4, #2
 800bab6:	2600      	movs	r6, #0
 800bab8:	42a6      	cmp	r6, r4
 800baba:	d109      	bne.n	800bad0 <__libc_init_array+0x24>
 800babc:	4d0b      	ldr	r5, [pc, #44]	@ (800baec <__libc_init_array+0x40>)
 800babe:	4c0c      	ldr	r4, [pc, #48]	@ (800baf0 <__libc_init_array+0x44>)
 800bac0:	f003 fa24 	bl	800ef0c <_init>
 800bac4:	1b64      	subs	r4, r4, r5
 800bac6:	10a4      	asrs	r4, r4, #2
 800bac8:	2600      	movs	r6, #0
 800baca:	42a6      	cmp	r6, r4
 800bacc:	d105      	bne.n	800bada <__libc_init_array+0x2e>
 800bace:	bd70      	pop	{r4, r5, r6, pc}
 800bad0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad4:	4798      	blx	r3
 800bad6:	3601      	adds	r6, #1
 800bad8:	e7ee      	b.n	800bab8 <__libc_init_array+0xc>
 800bada:	f855 3b04 	ldr.w	r3, [r5], #4
 800bade:	4798      	blx	r3
 800bae0:	3601      	adds	r6, #1
 800bae2:	e7f2      	b.n	800baca <__libc_init_array+0x1e>
 800bae4:	0800f448 	.word	0x0800f448
 800bae8:	0800f448 	.word	0x0800f448
 800baec:	0800f448 	.word	0x0800f448
 800baf0:	0800f44c 	.word	0x0800f44c

0800baf4 <__retarget_lock_init_recursive>:
 800baf4:	4770      	bx	lr

0800baf6 <__retarget_lock_acquire_recursive>:
 800baf6:	4770      	bx	lr

0800baf8 <__retarget_lock_release_recursive>:
 800baf8:	4770      	bx	lr

0800bafa <memcpy>:
 800bafa:	440a      	add	r2, r1
 800bafc:	4291      	cmp	r1, r2
 800bafe:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb02:	d100      	bne.n	800bb06 <memcpy+0xc>
 800bb04:	4770      	bx	lr
 800bb06:	b510      	push	{r4, lr}
 800bb08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb10:	4291      	cmp	r1, r2
 800bb12:	d1f9      	bne.n	800bb08 <memcpy+0xe>
 800bb14:	bd10      	pop	{r4, pc}
	...

0800bb18 <nanf>:
 800bb18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bb20 <nanf+0x8>
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	7fc00000 	.word	0x7fc00000

0800bb24 <quorem>:
 800bb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	6903      	ldr	r3, [r0, #16]
 800bb2a:	690c      	ldr	r4, [r1, #16]
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	4607      	mov	r7, r0
 800bb30:	db7e      	blt.n	800bc30 <quorem+0x10c>
 800bb32:	3c01      	subs	r4, #1
 800bb34:	f101 0814 	add.w	r8, r1, #20
 800bb38:	00a3      	lsls	r3, r4, #2
 800bb3a:	f100 0514 	add.w	r5, r0, #20
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	429a      	cmp	r2, r3
 800bb52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb56:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb5a:	d32e      	bcc.n	800bbba <quorem+0x96>
 800bb5c:	f04f 0a00 	mov.w	sl, #0
 800bb60:	46c4      	mov	ip, r8
 800bb62:	46ae      	mov	lr, r5
 800bb64:	46d3      	mov	fp, sl
 800bb66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb6a:	b298      	uxth	r0, r3
 800bb6c:	fb06 a000 	mla	r0, r6, r0, sl
 800bb70:	0c02      	lsrs	r2, r0, #16
 800bb72:	0c1b      	lsrs	r3, r3, #16
 800bb74:	fb06 2303 	mla	r3, r6, r3, r2
 800bb78:	f8de 2000 	ldr.w	r2, [lr]
 800bb7c:	b280      	uxth	r0, r0
 800bb7e:	b292      	uxth	r2, r2
 800bb80:	1a12      	subs	r2, r2, r0
 800bb82:	445a      	add	r2, fp
 800bb84:	f8de 0000 	ldr.w	r0, [lr]
 800bb88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb96:	b292      	uxth	r2, r2
 800bb98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb9c:	45e1      	cmp	r9, ip
 800bb9e:	f84e 2b04 	str.w	r2, [lr], #4
 800bba2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bba6:	d2de      	bcs.n	800bb66 <quorem+0x42>
 800bba8:	9b00      	ldr	r3, [sp, #0]
 800bbaa:	58eb      	ldr	r3, [r5, r3]
 800bbac:	b92b      	cbnz	r3, 800bbba <quorem+0x96>
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	d32f      	bcc.n	800bc18 <quorem+0xf4>
 800bbb8:	613c      	str	r4, [r7, #16]
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f001 f956 	bl	800ce6c <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	db25      	blt.n	800bc10 <quorem+0xec>
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbcc:	f8d1 c000 	ldr.w	ip, [r1]
 800bbd0:	fa1f fe82 	uxth.w	lr, r2
 800bbd4:	fa1f f38c 	uxth.w	r3, ip
 800bbd8:	eba3 030e 	sub.w	r3, r3, lr
 800bbdc:	4403      	add	r3, r0
 800bbde:	0c12      	lsrs	r2, r2, #16
 800bbe0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bbe4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbee:	45c1      	cmp	r9, r8
 800bbf0:	f841 3b04 	str.w	r3, [r1], #4
 800bbf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbf8:	d2e6      	bcs.n	800bbc8 <quorem+0xa4>
 800bbfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc02:	b922      	cbnz	r2, 800bc0e <quorem+0xea>
 800bc04:	3b04      	subs	r3, #4
 800bc06:	429d      	cmp	r5, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	d30b      	bcc.n	800bc24 <quorem+0x100>
 800bc0c:	613c      	str	r4, [r7, #16]
 800bc0e:	3601      	adds	r6, #1
 800bc10:	4630      	mov	r0, r6
 800bc12:	b003      	add	sp, #12
 800bc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc18:	6812      	ldr	r2, [r2, #0]
 800bc1a:	3b04      	subs	r3, #4
 800bc1c:	2a00      	cmp	r2, #0
 800bc1e:	d1cb      	bne.n	800bbb8 <quorem+0x94>
 800bc20:	3c01      	subs	r4, #1
 800bc22:	e7c6      	b.n	800bbb2 <quorem+0x8e>
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	3b04      	subs	r3, #4
 800bc28:	2a00      	cmp	r2, #0
 800bc2a:	d1ef      	bne.n	800bc0c <quorem+0xe8>
 800bc2c:	3c01      	subs	r4, #1
 800bc2e:	e7ea      	b.n	800bc06 <quorem+0xe2>
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7ee      	b.n	800bc12 <quorem+0xee>
 800bc34:	0000      	movs	r0, r0
	...

0800bc38 <_dtoa_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	ed2d 8b02 	vpush	{d8}
 800bc40:	69c7      	ldr	r7, [r0, #28]
 800bc42:	b091      	sub	sp, #68	@ 0x44
 800bc44:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc48:	ec55 4b10 	vmov	r4, r5, d0
 800bc4c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800bc4e:	9107      	str	r1, [sp, #28]
 800bc50:	4681      	mov	r9, r0
 800bc52:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc54:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc56:	b97f      	cbnz	r7, 800bc78 <_dtoa_r+0x40>
 800bc58:	2010      	movs	r0, #16
 800bc5a:	f000 fd8d 	bl	800c778 <malloc>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	f8c9 001c 	str.w	r0, [r9, #28]
 800bc64:	b920      	cbnz	r0, 800bc70 <_dtoa_r+0x38>
 800bc66:	4ba0      	ldr	r3, [pc, #640]	@ (800bee8 <_dtoa_r+0x2b0>)
 800bc68:	21ef      	movs	r1, #239	@ 0xef
 800bc6a:	48a0      	ldr	r0, [pc, #640]	@ (800beec <_dtoa_r+0x2b4>)
 800bc6c:	f002 fcac 	bl	800e5c8 <__assert_func>
 800bc70:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc74:	6007      	str	r7, [r0, #0]
 800bc76:	60c7      	str	r7, [r0, #12]
 800bc78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc7c:	6819      	ldr	r1, [r3, #0]
 800bc7e:	b159      	cbz	r1, 800bc98 <_dtoa_r+0x60>
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	604a      	str	r2, [r1, #4]
 800bc84:	2301      	movs	r3, #1
 800bc86:	4093      	lsls	r3, r2
 800bc88:	608b      	str	r3, [r1, #8]
 800bc8a:	4648      	mov	r0, r9
 800bc8c:	f000 fe6a 	bl	800c964 <_Bfree>
 800bc90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc94:	2200      	movs	r2, #0
 800bc96:	601a      	str	r2, [r3, #0]
 800bc98:	1e2b      	subs	r3, r5, #0
 800bc9a:	bfbb      	ittet	lt
 800bc9c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bca0:	9303      	strlt	r3, [sp, #12]
 800bca2:	2300      	movge	r3, #0
 800bca4:	2201      	movlt	r2, #1
 800bca6:	bfac      	ite	ge
 800bca8:	6033      	strge	r3, [r6, #0]
 800bcaa:	6032      	strlt	r2, [r6, #0]
 800bcac:	4b90      	ldr	r3, [pc, #576]	@ (800bef0 <_dtoa_r+0x2b8>)
 800bcae:	9e03      	ldr	r6, [sp, #12]
 800bcb0:	43b3      	bics	r3, r6
 800bcb2:	d110      	bne.n	800bcd6 <_dtoa_r+0x9e>
 800bcb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcb6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bcc0:	4323      	orrs	r3, r4
 800bcc2:	f000 84de 	beq.w	800c682 <_dtoa_r+0xa4a>
 800bcc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcc8:	4f8a      	ldr	r7, [pc, #552]	@ (800bef4 <_dtoa_r+0x2bc>)
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 84e0 	beq.w	800c690 <_dtoa_r+0xa58>
 800bcd0:	1cfb      	adds	r3, r7, #3
 800bcd2:	f000 bcdb 	b.w	800c68c <_dtoa_r+0xa54>
 800bcd6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bcda:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce2:	d10a      	bne.n	800bcfa <_dtoa_r+0xc2>
 800bce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bce6:	2301      	movs	r3, #1
 800bce8:	6013      	str	r3, [r2, #0]
 800bcea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcec:	b113      	cbz	r3, 800bcf4 <_dtoa_r+0xbc>
 800bcee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bcf0:	4b81      	ldr	r3, [pc, #516]	@ (800bef8 <_dtoa_r+0x2c0>)
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	4f81      	ldr	r7, [pc, #516]	@ (800befc <_dtoa_r+0x2c4>)
 800bcf6:	f000 bccb 	b.w	800c690 <_dtoa_r+0xa58>
 800bcfa:	aa0e      	add	r2, sp, #56	@ 0x38
 800bcfc:	a90f      	add	r1, sp, #60	@ 0x3c
 800bcfe:	4648      	mov	r0, r9
 800bd00:	eeb0 0b48 	vmov.f64	d0, d8
 800bd04:	f001 f9d2 	bl	800d0ac <__d2b>
 800bd08:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bd0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd0e:	9001      	str	r0, [sp, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d045      	beq.n	800bda0 <_dtoa_r+0x168>
 800bd14:	eeb0 7b48 	vmov.f64	d7, d8
 800bd18:	ee18 1a90 	vmov	r1, s17
 800bd1c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bd20:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bd24:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bd28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	ee07 1a90 	vmov	s15, r1
 800bd32:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bd36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bed0 <_dtoa_r+0x298>
 800bd3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd3e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bed8 <_dtoa_r+0x2a0>
 800bd42:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bd46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bee0 <_dtoa_r+0x2a8>
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bd52:	eeb0 7b46 	vmov.f64	d7, d6
 800bd56:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bd5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bd5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd66:	ee16 8a90 	vmov	r8, s13
 800bd6a:	d508      	bpl.n	800bd7e <_dtoa_r+0x146>
 800bd6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bd70:	eeb4 6b47 	vcmp.f64	d6, d7
 800bd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd78:	bf18      	it	ne
 800bd7a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bd7e:	f1b8 0f16 	cmp.w	r8, #22
 800bd82:	d82b      	bhi.n	800bddc <_dtoa_r+0x1a4>
 800bd84:	495e      	ldr	r1, [pc, #376]	@ (800bf00 <_dtoa_r+0x2c8>)
 800bd86:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bd8a:	ed91 7b00 	vldr	d7, [r1]
 800bd8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd96:	d501      	bpl.n	800bd9c <_dtoa_r+0x164>
 800bd98:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	e01e      	b.n	800bdde <_dtoa_r+0x1a6>
 800bda0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda2:	4413      	add	r3, r2
 800bda4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bda8:	2920      	cmp	r1, #32
 800bdaa:	bfc1      	itttt	gt
 800bdac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bdb0:	408e      	lslgt	r6, r1
 800bdb2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bdb6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bdba:	bfd6      	itet	le
 800bdbc:	f1c1 0120 	rsble	r1, r1, #32
 800bdc0:	4331      	orrgt	r1, r6
 800bdc2:	fa04 f101 	lslle.w	r1, r4, r1
 800bdc6:	ee07 1a90 	vmov	s15, r1
 800bdca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	ee17 1a90 	vmov	r1, s15
 800bdd4:	2501      	movs	r5, #1
 800bdd6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bdda:	e7a8      	b.n	800bd2e <_dtoa_r+0xf6>
 800bddc:	2101      	movs	r1, #1
 800bdde:	1ad2      	subs	r2, r2, r3
 800bde0:	1e53      	subs	r3, r2, #1
 800bde2:	9306      	str	r3, [sp, #24]
 800bde4:	bf45      	ittet	mi
 800bde6:	f1c2 0301 	rsbmi	r3, r2, #1
 800bdea:	9305      	strmi	r3, [sp, #20]
 800bdec:	2300      	movpl	r3, #0
 800bdee:	2300      	movmi	r3, #0
 800bdf0:	bf4c      	ite	mi
 800bdf2:	9306      	strmi	r3, [sp, #24]
 800bdf4:	9305      	strpl	r3, [sp, #20]
 800bdf6:	f1b8 0f00 	cmp.w	r8, #0
 800bdfa:	910c      	str	r1, [sp, #48]	@ 0x30
 800bdfc:	db18      	blt.n	800be30 <_dtoa_r+0x1f8>
 800bdfe:	9b06      	ldr	r3, [sp, #24]
 800be00:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800be04:	4443      	add	r3, r8
 800be06:	9306      	str	r3, [sp, #24]
 800be08:	2300      	movs	r3, #0
 800be0a:	9a07      	ldr	r2, [sp, #28]
 800be0c:	2a09      	cmp	r2, #9
 800be0e:	d849      	bhi.n	800bea4 <_dtoa_r+0x26c>
 800be10:	2a05      	cmp	r2, #5
 800be12:	bfc4      	itt	gt
 800be14:	3a04      	subgt	r2, #4
 800be16:	9207      	strgt	r2, [sp, #28]
 800be18:	9a07      	ldr	r2, [sp, #28]
 800be1a:	f1a2 0202 	sub.w	r2, r2, #2
 800be1e:	bfcc      	ite	gt
 800be20:	2400      	movgt	r4, #0
 800be22:	2401      	movle	r4, #1
 800be24:	2a03      	cmp	r2, #3
 800be26:	d848      	bhi.n	800beba <_dtoa_r+0x282>
 800be28:	e8df f002 	tbb	[pc, r2]
 800be2c:	3a2c2e0b 	.word	0x3a2c2e0b
 800be30:	9b05      	ldr	r3, [sp, #20]
 800be32:	2200      	movs	r2, #0
 800be34:	eba3 0308 	sub.w	r3, r3, r8
 800be38:	9305      	str	r3, [sp, #20]
 800be3a:	920a      	str	r2, [sp, #40]	@ 0x28
 800be3c:	f1c8 0300 	rsb	r3, r8, #0
 800be40:	e7e3      	b.n	800be0a <_dtoa_r+0x1d2>
 800be42:	2200      	movs	r2, #0
 800be44:	9208      	str	r2, [sp, #32]
 800be46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be48:	2a00      	cmp	r2, #0
 800be4a:	dc39      	bgt.n	800bec0 <_dtoa_r+0x288>
 800be4c:	f04f 0b01 	mov.w	fp, #1
 800be50:	46da      	mov	sl, fp
 800be52:	465a      	mov	r2, fp
 800be54:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800be58:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800be5c:	2100      	movs	r1, #0
 800be5e:	2004      	movs	r0, #4
 800be60:	f100 0614 	add.w	r6, r0, #20
 800be64:	4296      	cmp	r6, r2
 800be66:	d930      	bls.n	800beca <_dtoa_r+0x292>
 800be68:	6079      	str	r1, [r7, #4]
 800be6a:	4648      	mov	r0, r9
 800be6c:	9304      	str	r3, [sp, #16]
 800be6e:	f000 fd39 	bl	800c8e4 <_Balloc>
 800be72:	9b04      	ldr	r3, [sp, #16]
 800be74:	4607      	mov	r7, r0
 800be76:	2800      	cmp	r0, #0
 800be78:	d146      	bne.n	800bf08 <_dtoa_r+0x2d0>
 800be7a:	4b22      	ldr	r3, [pc, #136]	@ (800bf04 <_dtoa_r+0x2cc>)
 800be7c:	4602      	mov	r2, r0
 800be7e:	f240 11af 	movw	r1, #431	@ 0x1af
 800be82:	e6f2      	b.n	800bc6a <_dtoa_r+0x32>
 800be84:	2201      	movs	r2, #1
 800be86:	e7dd      	b.n	800be44 <_dtoa_r+0x20c>
 800be88:	2200      	movs	r2, #0
 800be8a:	9208      	str	r2, [sp, #32]
 800be8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be8e:	eb08 0b02 	add.w	fp, r8, r2
 800be92:	f10b 0a01 	add.w	sl, fp, #1
 800be96:	4652      	mov	r2, sl
 800be98:	2a01      	cmp	r2, #1
 800be9a:	bfb8      	it	lt
 800be9c:	2201      	movlt	r2, #1
 800be9e:	e7db      	b.n	800be58 <_dtoa_r+0x220>
 800bea0:	2201      	movs	r2, #1
 800bea2:	e7f2      	b.n	800be8a <_dtoa_r+0x252>
 800bea4:	2401      	movs	r4, #1
 800bea6:	2200      	movs	r2, #0
 800bea8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800beac:	f04f 3bff 	mov.w	fp, #4294967295
 800beb0:	2100      	movs	r1, #0
 800beb2:	46da      	mov	sl, fp
 800beb4:	2212      	movs	r2, #18
 800beb6:	9109      	str	r1, [sp, #36]	@ 0x24
 800beb8:	e7ce      	b.n	800be58 <_dtoa_r+0x220>
 800beba:	2201      	movs	r2, #1
 800bebc:	9208      	str	r2, [sp, #32]
 800bebe:	e7f5      	b.n	800beac <_dtoa_r+0x274>
 800bec0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800bec4:	46da      	mov	sl, fp
 800bec6:	465a      	mov	r2, fp
 800bec8:	e7c6      	b.n	800be58 <_dtoa_r+0x220>
 800beca:	3101      	adds	r1, #1
 800becc:	0040      	lsls	r0, r0, #1
 800bece:	e7c7      	b.n	800be60 <_dtoa_r+0x228>
 800bed0:	636f4361 	.word	0x636f4361
 800bed4:	3fd287a7 	.word	0x3fd287a7
 800bed8:	8b60c8b3 	.word	0x8b60c8b3
 800bedc:	3fc68a28 	.word	0x3fc68a28
 800bee0:	509f79fb 	.word	0x509f79fb
 800bee4:	3fd34413 	.word	0x3fd34413
 800bee8:	0800f15b 	.word	0x0800f15b
 800beec:	0800f172 	.word	0x0800f172
 800bef0:	7ff00000 	.word	0x7ff00000
 800bef4:	0800f157 	.word	0x0800f157
 800bef8:	0800f126 	.word	0x0800f126
 800befc:	0800f125 	.word	0x0800f125
 800bf00:	0800f268 	.word	0x0800f268
 800bf04:	0800f1ca 	.word	0x0800f1ca
 800bf08:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bf0c:	f1ba 0f0e 	cmp.w	sl, #14
 800bf10:	6010      	str	r0, [r2, #0]
 800bf12:	d86f      	bhi.n	800bff4 <_dtoa_r+0x3bc>
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	d06d      	beq.n	800bff4 <_dtoa_r+0x3bc>
 800bf18:	f1b8 0f00 	cmp.w	r8, #0
 800bf1c:	f340 80c2 	ble.w	800c0a4 <_dtoa_r+0x46c>
 800bf20:	4aca      	ldr	r2, [pc, #808]	@ (800c24c <_dtoa_r+0x614>)
 800bf22:	f008 010f 	and.w	r1, r8, #15
 800bf26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bf2a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bf2e:	ed92 7b00 	vldr	d7, [r2]
 800bf32:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bf36:	f000 80a9 	beq.w	800c08c <_dtoa_r+0x454>
 800bf3a:	4ac5      	ldr	r2, [pc, #788]	@ (800c250 <_dtoa_r+0x618>)
 800bf3c:	ed92 6b08 	vldr	d6, [r2, #32]
 800bf40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bf44:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bf48:	f001 010f 	and.w	r1, r1, #15
 800bf4c:	2203      	movs	r2, #3
 800bf4e:	48c0      	ldr	r0, [pc, #768]	@ (800c250 <_dtoa_r+0x618>)
 800bf50:	2900      	cmp	r1, #0
 800bf52:	f040 809d 	bne.w	800c090 <_dtoa_r+0x458>
 800bf56:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bf5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf68:	2900      	cmp	r1, #0
 800bf6a:	f000 80c1 	beq.w	800c0f0 <_dtoa_r+0x4b8>
 800bf6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bf72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7a:	f140 80b9 	bpl.w	800c0f0 <_dtoa_r+0x4b8>
 800bf7e:	f1ba 0f00 	cmp.w	sl, #0
 800bf82:	f000 80b5 	beq.w	800c0f0 <_dtoa_r+0x4b8>
 800bf86:	f1bb 0f00 	cmp.w	fp, #0
 800bf8a:	dd31      	ble.n	800bff0 <_dtoa_r+0x3b8>
 800bf8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bf90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf98:	f108 31ff 	add.w	r1, r8, #4294967295
 800bf9c:	9104      	str	r1, [sp, #16]
 800bf9e:	3201      	adds	r2, #1
 800bfa0:	465c      	mov	r4, fp
 800bfa2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bfa6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bfaa:	ee07 2a90 	vmov	s15, r2
 800bfae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bfb2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bfb6:	ee15 2a90 	vmov	r2, s11
 800bfba:	ec51 0b15 	vmov	r0, r1, d5
 800bfbe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	f040 8098 	bne.w	800c0f8 <_dtoa_r+0x4c0>
 800bfc8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bfcc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bfd0:	ec41 0b17 	vmov	d7, r0, r1
 800bfd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfdc:	f300 8261 	bgt.w	800c4a2 <_dtoa_r+0x86a>
 800bfe0:	eeb1 7b47 	vneg.f64	d7, d7
 800bfe4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfec:	f100 80f5 	bmi.w	800c1da <_dtoa_r+0x5a2>
 800bff0:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bff4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bff6:	2a00      	cmp	r2, #0
 800bff8:	f2c0 812c 	blt.w	800c254 <_dtoa_r+0x61c>
 800bffc:	f1b8 0f0e 	cmp.w	r8, #14
 800c000:	f300 8128 	bgt.w	800c254 <_dtoa_r+0x61c>
 800c004:	4b91      	ldr	r3, [pc, #580]	@ (800c24c <_dtoa_r+0x614>)
 800c006:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c00a:	ed93 6b00 	vldr	d6, [r3]
 800c00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c010:	2b00      	cmp	r3, #0
 800c012:	da03      	bge.n	800c01c <_dtoa_r+0x3e4>
 800c014:	f1ba 0f00 	cmp.w	sl, #0
 800c018:	f340 80d2 	ble.w	800c1c0 <_dtoa_r+0x588>
 800c01c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c020:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c024:	463e      	mov	r6, r7
 800c026:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c02a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c02e:	ee15 3a10 	vmov	r3, s10
 800c032:	3330      	adds	r3, #48	@ 0x30
 800c034:	f806 3b01 	strb.w	r3, [r6], #1
 800c038:	1bf3      	subs	r3, r6, r7
 800c03a:	459a      	cmp	sl, r3
 800c03c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c040:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c044:	f040 80f8 	bne.w	800c238 <_dtoa_r+0x600>
 800c048:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c04c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c054:	f300 80dd 	bgt.w	800c212 <_dtoa_r+0x5da>
 800c058:	eeb4 7b46 	vcmp.f64	d7, d6
 800c05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c060:	d104      	bne.n	800c06c <_dtoa_r+0x434>
 800c062:	ee15 3a10 	vmov	r3, s10
 800c066:	07db      	lsls	r3, r3, #31
 800c068:	f100 80d3 	bmi.w	800c212 <_dtoa_r+0x5da>
 800c06c:	9901      	ldr	r1, [sp, #4]
 800c06e:	4648      	mov	r0, r9
 800c070:	f000 fc78 	bl	800c964 <_Bfree>
 800c074:	2300      	movs	r3, #0
 800c076:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c078:	7033      	strb	r3, [r6, #0]
 800c07a:	f108 0301 	add.w	r3, r8, #1
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8304 	beq.w	800c690 <_dtoa_r+0xa58>
 800c088:	601e      	str	r6, [r3, #0]
 800c08a:	e301      	b.n	800c690 <_dtoa_r+0xa58>
 800c08c:	2202      	movs	r2, #2
 800c08e:	e75e      	b.n	800bf4e <_dtoa_r+0x316>
 800c090:	07cc      	lsls	r4, r1, #31
 800c092:	d504      	bpl.n	800c09e <_dtoa_r+0x466>
 800c094:	ed90 6b00 	vldr	d6, [r0]
 800c098:	3201      	adds	r2, #1
 800c09a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c09e:	1049      	asrs	r1, r1, #1
 800c0a0:	3008      	adds	r0, #8
 800c0a2:	e755      	b.n	800bf50 <_dtoa_r+0x318>
 800c0a4:	d022      	beq.n	800c0ec <_dtoa_r+0x4b4>
 800c0a6:	f1c8 0100 	rsb	r1, r8, #0
 800c0aa:	4a68      	ldr	r2, [pc, #416]	@ (800c24c <_dtoa_r+0x614>)
 800c0ac:	f001 000f 	and.w	r0, r1, #15
 800c0b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c0b4:	ed92 7b00 	vldr	d7, [r2]
 800c0b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c0bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0c0:	4863      	ldr	r0, [pc, #396]	@ (800c250 <_dtoa_r+0x618>)
 800c0c2:	1109      	asrs	r1, r1, #4
 800c0c4:	2400      	movs	r4, #0
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	b929      	cbnz	r1, 800c0d6 <_dtoa_r+0x49e>
 800c0ca:	2c00      	cmp	r4, #0
 800c0cc:	f43f af49 	beq.w	800bf62 <_dtoa_r+0x32a>
 800c0d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0d4:	e745      	b.n	800bf62 <_dtoa_r+0x32a>
 800c0d6:	07ce      	lsls	r6, r1, #31
 800c0d8:	d505      	bpl.n	800c0e6 <_dtoa_r+0x4ae>
 800c0da:	ed90 6b00 	vldr	d6, [r0]
 800c0de:	3201      	adds	r2, #1
 800c0e0:	2401      	movs	r4, #1
 800c0e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0e6:	1049      	asrs	r1, r1, #1
 800c0e8:	3008      	adds	r0, #8
 800c0ea:	e7ed      	b.n	800c0c8 <_dtoa_r+0x490>
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	e738      	b.n	800bf62 <_dtoa_r+0x32a>
 800c0f0:	f8cd 8010 	str.w	r8, [sp, #16]
 800c0f4:	4654      	mov	r4, sl
 800c0f6:	e754      	b.n	800bfa2 <_dtoa_r+0x36a>
 800c0f8:	4a54      	ldr	r2, [pc, #336]	@ (800c24c <_dtoa_r+0x614>)
 800c0fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c0fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c102:	9a08      	ldr	r2, [sp, #32]
 800c104:	ec41 0b17 	vmov	d7, r0, r1
 800c108:	443c      	add	r4, r7
 800c10a:	b34a      	cbz	r2, 800c160 <_dtoa_r+0x528>
 800c10c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c110:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c114:	463e      	mov	r6, r7
 800c116:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c11a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c11e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c122:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c126:	ee14 2a90 	vmov	r2, s9
 800c12a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c12e:	3230      	adds	r2, #48	@ 0x30
 800c130:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c134:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	f806 2b01 	strb.w	r2, [r6], #1
 800c140:	d438      	bmi.n	800c1b4 <_dtoa_r+0x57c>
 800c142:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c146:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14e:	d462      	bmi.n	800c216 <_dtoa_r+0x5de>
 800c150:	42a6      	cmp	r6, r4
 800c152:	f43f af4d 	beq.w	800bff0 <_dtoa_r+0x3b8>
 800c156:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c15a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c15e:	e7e0      	b.n	800c122 <_dtoa_r+0x4ea>
 800c160:	4621      	mov	r1, r4
 800c162:	463e      	mov	r6, r7
 800c164:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c168:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c16c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c170:	ee14 2a90 	vmov	r2, s9
 800c174:	3230      	adds	r2, #48	@ 0x30
 800c176:	f806 2b01 	strb.w	r2, [r6], #1
 800c17a:	42a6      	cmp	r6, r4
 800c17c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c180:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c184:	d119      	bne.n	800c1ba <_dtoa_r+0x582>
 800c186:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c18a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c18e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	dc3e      	bgt.n	800c216 <_dtoa_r+0x5de>
 800c198:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c19c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a4:	f57f af24 	bpl.w	800bff0 <_dtoa_r+0x3b8>
 800c1a8:	460e      	mov	r6, r1
 800c1aa:	3901      	subs	r1, #1
 800c1ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1b0:	2b30      	cmp	r3, #48	@ 0x30
 800c1b2:	d0f9      	beq.n	800c1a8 <_dtoa_r+0x570>
 800c1b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c1b8:	e758      	b.n	800c06c <_dtoa_r+0x434>
 800c1ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c1be:	e7d5      	b.n	800c16c <_dtoa_r+0x534>
 800c1c0:	d10b      	bne.n	800c1da <_dtoa_r+0x5a2>
 800c1c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c1c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c1ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d6:	f2c0 8161 	blt.w	800c49c <_dtoa_r+0x864>
 800c1da:	2400      	movs	r4, #0
 800c1dc:	4625      	mov	r5, r4
 800c1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e0:	43db      	mvns	r3, r3
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	463e      	mov	r6, r7
 800c1e6:	f04f 0800 	mov.w	r8, #0
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	4648      	mov	r0, r9
 800c1ee:	f000 fbb9 	bl	800c964 <_Bfree>
 800c1f2:	2d00      	cmp	r5, #0
 800c1f4:	d0de      	beq.n	800c1b4 <_dtoa_r+0x57c>
 800c1f6:	f1b8 0f00 	cmp.w	r8, #0
 800c1fa:	d005      	beq.n	800c208 <_dtoa_r+0x5d0>
 800c1fc:	45a8      	cmp	r8, r5
 800c1fe:	d003      	beq.n	800c208 <_dtoa_r+0x5d0>
 800c200:	4641      	mov	r1, r8
 800c202:	4648      	mov	r0, r9
 800c204:	f000 fbae 	bl	800c964 <_Bfree>
 800c208:	4629      	mov	r1, r5
 800c20a:	4648      	mov	r0, r9
 800c20c:	f000 fbaa 	bl	800c964 <_Bfree>
 800c210:	e7d0      	b.n	800c1b4 <_dtoa_r+0x57c>
 800c212:	f8cd 8010 	str.w	r8, [sp, #16]
 800c216:	4633      	mov	r3, r6
 800c218:	461e      	mov	r6, r3
 800c21a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c21e:	2a39      	cmp	r2, #57	@ 0x39
 800c220:	d106      	bne.n	800c230 <_dtoa_r+0x5f8>
 800c222:	429f      	cmp	r7, r3
 800c224:	d1f8      	bne.n	800c218 <_dtoa_r+0x5e0>
 800c226:	9a04      	ldr	r2, [sp, #16]
 800c228:	3201      	adds	r2, #1
 800c22a:	9204      	str	r2, [sp, #16]
 800c22c:	2230      	movs	r2, #48	@ 0x30
 800c22e:	703a      	strb	r2, [r7, #0]
 800c230:	781a      	ldrb	r2, [r3, #0]
 800c232:	3201      	adds	r2, #1
 800c234:	701a      	strb	r2, [r3, #0]
 800c236:	e7bd      	b.n	800c1b4 <_dtoa_r+0x57c>
 800c238:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c23c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c244:	f47f aeef 	bne.w	800c026 <_dtoa_r+0x3ee>
 800c248:	e710      	b.n	800c06c <_dtoa_r+0x434>
 800c24a:	bf00      	nop
 800c24c:	0800f268 	.word	0x0800f268
 800c250:	0800f240 	.word	0x0800f240
 800c254:	9908      	ldr	r1, [sp, #32]
 800c256:	2900      	cmp	r1, #0
 800c258:	f000 80e3 	beq.w	800c422 <_dtoa_r+0x7ea>
 800c25c:	9907      	ldr	r1, [sp, #28]
 800c25e:	2901      	cmp	r1, #1
 800c260:	f300 80c8 	bgt.w	800c3f4 <_dtoa_r+0x7bc>
 800c264:	2d00      	cmp	r5, #0
 800c266:	f000 80c1 	beq.w	800c3ec <_dtoa_r+0x7b4>
 800c26a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c26e:	9e05      	ldr	r6, [sp, #20]
 800c270:	461c      	mov	r4, r3
 800c272:	9304      	str	r3, [sp, #16]
 800c274:	9b05      	ldr	r3, [sp, #20]
 800c276:	4413      	add	r3, r2
 800c278:	9305      	str	r3, [sp, #20]
 800c27a:	9b06      	ldr	r3, [sp, #24]
 800c27c:	2101      	movs	r1, #1
 800c27e:	4413      	add	r3, r2
 800c280:	4648      	mov	r0, r9
 800c282:	9306      	str	r3, [sp, #24]
 800c284:	f000 fc6c 	bl	800cb60 <__i2b>
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	4605      	mov	r5, r0
 800c28c:	b166      	cbz	r6, 800c2a8 <_dtoa_r+0x670>
 800c28e:	9a06      	ldr	r2, [sp, #24]
 800c290:	2a00      	cmp	r2, #0
 800c292:	dd09      	ble.n	800c2a8 <_dtoa_r+0x670>
 800c294:	42b2      	cmp	r2, r6
 800c296:	9905      	ldr	r1, [sp, #20]
 800c298:	bfa8      	it	ge
 800c29a:	4632      	movge	r2, r6
 800c29c:	1a89      	subs	r1, r1, r2
 800c29e:	9105      	str	r1, [sp, #20]
 800c2a0:	9906      	ldr	r1, [sp, #24]
 800c2a2:	1ab6      	subs	r6, r6, r2
 800c2a4:	1a8a      	subs	r2, r1, r2
 800c2a6:	9206      	str	r2, [sp, #24]
 800c2a8:	b1fb      	cbz	r3, 800c2ea <_dtoa_r+0x6b2>
 800c2aa:	9a08      	ldr	r2, [sp, #32]
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	f000 80bc 	beq.w	800c42a <_dtoa_r+0x7f2>
 800c2b2:	b19c      	cbz	r4, 800c2dc <_dtoa_r+0x6a4>
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	4648      	mov	r0, r9
 800c2ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2bc:	f000 fd10 	bl	800cce0 <__pow5mult>
 800c2c0:	9a01      	ldr	r2, [sp, #4]
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	4648      	mov	r0, r9
 800c2c8:	f000 fc60 	bl	800cb8c <__multiply>
 800c2cc:	9901      	ldr	r1, [sp, #4]
 800c2ce:	9004      	str	r0, [sp, #16]
 800c2d0:	4648      	mov	r0, r9
 800c2d2:	f000 fb47 	bl	800c964 <_Bfree>
 800c2d6:	9a04      	ldr	r2, [sp, #16]
 800c2d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2da:	9201      	str	r2, [sp, #4]
 800c2dc:	1b1a      	subs	r2, r3, r4
 800c2de:	d004      	beq.n	800c2ea <_dtoa_r+0x6b2>
 800c2e0:	9901      	ldr	r1, [sp, #4]
 800c2e2:	4648      	mov	r0, r9
 800c2e4:	f000 fcfc 	bl	800cce0 <__pow5mult>
 800c2e8:	9001      	str	r0, [sp, #4]
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f000 fc37 	bl	800cb60 <__i2b>
 800c2f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 81d0 	beq.w	800c69c <_dtoa_r+0xa64>
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	4601      	mov	r1, r0
 800c300:	4648      	mov	r0, r9
 800c302:	f000 fced 	bl	800cce0 <__pow5mult>
 800c306:	9b07      	ldr	r3, [sp, #28]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	4604      	mov	r4, r0
 800c30c:	f300 8095 	bgt.w	800c43a <_dtoa_r+0x802>
 800c310:	9b02      	ldr	r3, [sp, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f040 808b 	bne.w	800c42e <_dtoa_r+0x7f6>
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c31e:	2a00      	cmp	r2, #0
 800c320:	f040 8087 	bne.w	800c432 <_dtoa_r+0x7fa>
 800c324:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c328:	0d12      	lsrs	r2, r2, #20
 800c32a:	0512      	lsls	r2, r2, #20
 800c32c:	2a00      	cmp	r2, #0
 800c32e:	f000 8082 	beq.w	800c436 <_dtoa_r+0x7fe>
 800c332:	9b05      	ldr	r3, [sp, #20]
 800c334:	3301      	adds	r3, #1
 800c336:	9305      	str	r3, [sp, #20]
 800c338:	9b06      	ldr	r3, [sp, #24]
 800c33a:	3301      	adds	r3, #1
 800c33c:	9306      	str	r3, [sp, #24]
 800c33e:	2301      	movs	r3, #1
 800c340:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 81af 	beq.w	800c6a8 <_dtoa_r+0xa70>
 800c34a:	6922      	ldr	r2, [r4, #16]
 800c34c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c350:	6910      	ldr	r0, [r2, #16]
 800c352:	f000 fbb9 	bl	800cac8 <__hi0bits>
 800c356:	f1c0 0020 	rsb	r0, r0, #32
 800c35a:	9b06      	ldr	r3, [sp, #24]
 800c35c:	4418      	add	r0, r3
 800c35e:	f010 001f 	ands.w	r0, r0, #31
 800c362:	d076      	beq.n	800c452 <_dtoa_r+0x81a>
 800c364:	f1c0 0220 	rsb	r2, r0, #32
 800c368:	2a04      	cmp	r2, #4
 800c36a:	dd69      	ble.n	800c440 <_dtoa_r+0x808>
 800c36c:	9b05      	ldr	r3, [sp, #20]
 800c36e:	f1c0 001c 	rsb	r0, r0, #28
 800c372:	4403      	add	r3, r0
 800c374:	9305      	str	r3, [sp, #20]
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	4406      	add	r6, r0
 800c37a:	4403      	add	r3, r0
 800c37c:	9306      	str	r3, [sp, #24]
 800c37e:	9b05      	ldr	r3, [sp, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	dd05      	ble.n	800c390 <_dtoa_r+0x758>
 800c384:	9901      	ldr	r1, [sp, #4]
 800c386:	461a      	mov	r2, r3
 800c388:	4648      	mov	r0, r9
 800c38a:	f000 fd03 	bl	800cd94 <__lshift>
 800c38e:	9001      	str	r0, [sp, #4]
 800c390:	9b06      	ldr	r3, [sp, #24]
 800c392:	2b00      	cmp	r3, #0
 800c394:	dd05      	ble.n	800c3a2 <_dtoa_r+0x76a>
 800c396:	4621      	mov	r1, r4
 800c398:	461a      	mov	r2, r3
 800c39a:	4648      	mov	r0, r9
 800c39c:	f000 fcfa 	bl	800cd94 <__lshift>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d056      	beq.n	800c456 <_dtoa_r+0x81e>
 800c3a8:	9801      	ldr	r0, [sp, #4]
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	f000 fd5e 	bl	800ce6c <__mcmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	da50      	bge.n	800c456 <_dtoa_r+0x81e>
 800c3b4:	f108 33ff 	add.w	r3, r8, #4294967295
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	9901      	ldr	r1, [sp, #4]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	220a      	movs	r2, #10
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f000 faf1 	bl	800c9a8 <__multadd>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	9001      	str	r0, [sp, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 816e 	beq.w	800c6ac <_dtoa_r+0xa74>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	220a      	movs	r2, #10
 800c3d6:	4648      	mov	r0, r9
 800c3d8:	f000 fae6 	bl	800c9a8 <__multadd>
 800c3dc:	f1bb 0f00 	cmp.w	fp, #0
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	dc64      	bgt.n	800c4ae <_dtoa_r+0x876>
 800c3e4:	9b07      	ldr	r3, [sp, #28]
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	dc3e      	bgt.n	800c468 <_dtoa_r+0x830>
 800c3ea:	e060      	b.n	800c4ae <_dtoa_r+0x876>
 800c3ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c3f2:	e73c      	b.n	800c26e <_dtoa_r+0x636>
 800c3f4:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c3f8:	42a3      	cmp	r3, r4
 800c3fa:	bfbf      	itttt	lt
 800c3fc:	1ae2      	sublt	r2, r4, r3
 800c3fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c400:	189b      	addlt	r3, r3, r2
 800c402:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800c404:	bfae      	itee	ge
 800c406:	1b1c      	subge	r4, r3, r4
 800c408:	4623      	movlt	r3, r4
 800c40a:	2400      	movlt	r4, #0
 800c40c:	f1ba 0f00 	cmp.w	sl, #0
 800c410:	bfb5      	itete	lt
 800c412:	9a05      	ldrlt	r2, [sp, #20]
 800c414:	9e05      	ldrge	r6, [sp, #20]
 800c416:	eba2 060a 	sublt.w	r6, r2, sl
 800c41a:	4652      	movge	r2, sl
 800c41c:	bfb8      	it	lt
 800c41e:	2200      	movlt	r2, #0
 800c420:	e727      	b.n	800c272 <_dtoa_r+0x63a>
 800c422:	9e05      	ldr	r6, [sp, #20]
 800c424:	9d08      	ldr	r5, [sp, #32]
 800c426:	461c      	mov	r4, r3
 800c428:	e730      	b.n	800c28c <_dtoa_r+0x654>
 800c42a:	461a      	mov	r2, r3
 800c42c:	e758      	b.n	800c2e0 <_dtoa_r+0x6a8>
 800c42e:	2300      	movs	r3, #0
 800c430:	e786      	b.n	800c340 <_dtoa_r+0x708>
 800c432:	9b02      	ldr	r3, [sp, #8]
 800c434:	e784      	b.n	800c340 <_dtoa_r+0x708>
 800c436:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c438:	e783      	b.n	800c342 <_dtoa_r+0x70a>
 800c43a:	2300      	movs	r3, #0
 800c43c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c43e:	e784      	b.n	800c34a <_dtoa_r+0x712>
 800c440:	d09d      	beq.n	800c37e <_dtoa_r+0x746>
 800c442:	9b05      	ldr	r3, [sp, #20]
 800c444:	321c      	adds	r2, #28
 800c446:	4413      	add	r3, r2
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	9b06      	ldr	r3, [sp, #24]
 800c44c:	4416      	add	r6, r2
 800c44e:	4413      	add	r3, r2
 800c450:	e794      	b.n	800c37c <_dtoa_r+0x744>
 800c452:	4602      	mov	r2, r0
 800c454:	e7f5      	b.n	800c442 <_dtoa_r+0x80a>
 800c456:	f1ba 0f00 	cmp.w	sl, #0
 800c45a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c45e:	46d3      	mov	fp, sl
 800c460:	dc21      	bgt.n	800c4a6 <_dtoa_r+0x86e>
 800c462:	9b07      	ldr	r3, [sp, #28]
 800c464:	2b02      	cmp	r3, #2
 800c466:	dd1e      	ble.n	800c4a6 <_dtoa_r+0x86e>
 800c468:	f1bb 0f00 	cmp.w	fp, #0
 800c46c:	f47f aeb7 	bne.w	800c1de <_dtoa_r+0x5a6>
 800c470:	4621      	mov	r1, r4
 800c472:	465b      	mov	r3, fp
 800c474:	2205      	movs	r2, #5
 800c476:	4648      	mov	r0, r9
 800c478:	f000 fa96 	bl	800c9a8 <__multadd>
 800c47c:	4601      	mov	r1, r0
 800c47e:	4604      	mov	r4, r0
 800c480:	9801      	ldr	r0, [sp, #4]
 800c482:	f000 fcf3 	bl	800ce6c <__mcmp>
 800c486:	2800      	cmp	r0, #0
 800c488:	f77f aea9 	ble.w	800c1de <_dtoa_r+0x5a6>
 800c48c:	463e      	mov	r6, r7
 800c48e:	2331      	movs	r3, #49	@ 0x31
 800c490:	f806 3b01 	strb.w	r3, [r6], #1
 800c494:	9b04      	ldr	r3, [sp, #16]
 800c496:	3301      	adds	r3, #1
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	e6a4      	b.n	800c1e6 <_dtoa_r+0x5ae>
 800c49c:	f8cd 8010 	str.w	r8, [sp, #16]
 800c4a0:	4654      	mov	r4, sl
 800c4a2:	4625      	mov	r5, r4
 800c4a4:	e7f2      	b.n	800c48c <_dtoa_r+0x854>
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 8103 	beq.w	800c6b4 <_dtoa_r+0xa7c>
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	dd05      	ble.n	800c4be <_dtoa_r+0x886>
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	4648      	mov	r0, r9
 800c4b8:	f000 fc6c 	bl	800cd94 <__lshift>
 800c4bc:	4605      	mov	r5, r0
 800c4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d058      	beq.n	800c576 <_dtoa_r+0x93e>
 800c4c4:	6869      	ldr	r1, [r5, #4]
 800c4c6:	4648      	mov	r0, r9
 800c4c8:	f000 fa0c 	bl	800c8e4 <_Balloc>
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	b928      	cbnz	r0, 800c4dc <_dtoa_r+0x8a4>
 800c4d0:	4b82      	ldr	r3, [pc, #520]	@ (800c6dc <_dtoa_r+0xaa4>)
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c4d8:	f7ff bbc7 	b.w	800bc6a <_dtoa_r+0x32>
 800c4dc:	692a      	ldr	r2, [r5, #16]
 800c4de:	3202      	adds	r2, #2
 800c4e0:	0092      	lsls	r2, r2, #2
 800c4e2:	f105 010c 	add.w	r1, r5, #12
 800c4e6:	300c      	adds	r0, #12
 800c4e8:	f7ff fb07 	bl	800bafa <memcpy>
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4648      	mov	r0, r9
 800c4f2:	f000 fc4f 	bl	800cd94 <__lshift>
 800c4f6:	1c7b      	adds	r3, r7, #1
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	eb07 030b 	add.w	r3, r7, fp
 800c4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c500:	9b02      	ldr	r3, [sp, #8]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	46a8      	mov	r8, r5
 800c508:	9308      	str	r3, [sp, #32]
 800c50a:	4605      	mov	r5, r0
 800c50c:	9b05      	ldr	r3, [sp, #20]
 800c50e:	9801      	ldr	r0, [sp, #4]
 800c510:	4621      	mov	r1, r4
 800c512:	f103 3bff 	add.w	fp, r3, #4294967295
 800c516:	f7ff fb05 	bl	800bb24 <quorem>
 800c51a:	4641      	mov	r1, r8
 800c51c:	9002      	str	r0, [sp, #8]
 800c51e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c522:	9801      	ldr	r0, [sp, #4]
 800c524:	f000 fca2 	bl	800ce6c <__mcmp>
 800c528:	462a      	mov	r2, r5
 800c52a:	9006      	str	r0, [sp, #24]
 800c52c:	4621      	mov	r1, r4
 800c52e:	4648      	mov	r0, r9
 800c530:	f000 fcb8 	bl	800cea4 <__mdiff>
 800c534:	68c2      	ldr	r2, [r0, #12]
 800c536:	4606      	mov	r6, r0
 800c538:	b9fa      	cbnz	r2, 800c57a <_dtoa_r+0x942>
 800c53a:	4601      	mov	r1, r0
 800c53c:	9801      	ldr	r0, [sp, #4]
 800c53e:	f000 fc95 	bl	800ce6c <__mcmp>
 800c542:	4602      	mov	r2, r0
 800c544:	4631      	mov	r1, r6
 800c546:	4648      	mov	r0, r9
 800c548:	920a      	str	r2, [sp, #40]	@ 0x28
 800c54a:	f000 fa0b 	bl	800c964 <_Bfree>
 800c54e:	9b07      	ldr	r3, [sp, #28]
 800c550:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c552:	9e05      	ldr	r6, [sp, #20]
 800c554:	ea43 0102 	orr.w	r1, r3, r2
 800c558:	9b08      	ldr	r3, [sp, #32]
 800c55a:	4319      	orrs	r1, r3
 800c55c:	d10f      	bne.n	800c57e <_dtoa_r+0x946>
 800c55e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c562:	d028      	beq.n	800c5b6 <_dtoa_r+0x97e>
 800c564:	9b06      	ldr	r3, [sp, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	dd02      	ble.n	800c570 <_dtoa_r+0x938>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c570:	f88b a000 	strb.w	sl, [fp]
 800c574:	e639      	b.n	800c1ea <_dtoa_r+0x5b2>
 800c576:	4628      	mov	r0, r5
 800c578:	e7bd      	b.n	800c4f6 <_dtoa_r+0x8be>
 800c57a:	2201      	movs	r2, #1
 800c57c:	e7e2      	b.n	800c544 <_dtoa_r+0x90c>
 800c57e:	9b06      	ldr	r3, [sp, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	db04      	blt.n	800c58e <_dtoa_r+0x956>
 800c584:	9907      	ldr	r1, [sp, #28]
 800c586:	430b      	orrs	r3, r1
 800c588:	9908      	ldr	r1, [sp, #32]
 800c58a:	430b      	orrs	r3, r1
 800c58c:	d120      	bne.n	800c5d0 <_dtoa_r+0x998>
 800c58e:	2a00      	cmp	r2, #0
 800c590:	ddee      	ble.n	800c570 <_dtoa_r+0x938>
 800c592:	9901      	ldr	r1, [sp, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	4648      	mov	r0, r9
 800c598:	f000 fbfc 	bl	800cd94 <__lshift>
 800c59c:	4621      	mov	r1, r4
 800c59e:	9001      	str	r0, [sp, #4]
 800c5a0:	f000 fc64 	bl	800ce6c <__mcmp>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	dc03      	bgt.n	800c5b0 <_dtoa_r+0x978>
 800c5a8:	d1e2      	bne.n	800c570 <_dtoa_r+0x938>
 800c5aa:	f01a 0f01 	tst.w	sl, #1
 800c5ae:	d0df      	beq.n	800c570 <_dtoa_r+0x938>
 800c5b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c5b4:	d1d9      	bne.n	800c56a <_dtoa_r+0x932>
 800c5b6:	2339      	movs	r3, #57	@ 0x39
 800c5b8:	f88b 3000 	strb.w	r3, [fp]
 800c5bc:	4633      	mov	r3, r6
 800c5be:	461e      	mov	r6, r3
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c5c6:	2a39      	cmp	r2, #57	@ 0x39
 800c5c8:	d053      	beq.n	800c672 <_dtoa_r+0xa3a>
 800c5ca:	3201      	adds	r2, #1
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	e60c      	b.n	800c1ea <_dtoa_r+0x5b2>
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	dd07      	ble.n	800c5e4 <_dtoa_r+0x9ac>
 800c5d4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c5d8:	d0ed      	beq.n	800c5b6 <_dtoa_r+0x97e>
 800c5da:	f10a 0301 	add.w	r3, sl, #1
 800c5de:	f88b 3000 	strb.w	r3, [fp]
 800c5e2:	e602      	b.n	800c1ea <_dtoa_r+0x5b2>
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	9a05      	ldr	r2, [sp, #20]
 800c5e8:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d029      	beq.n	800c646 <_dtoa_r+0xa0e>
 800c5f2:	9901      	ldr	r1, [sp, #4]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	220a      	movs	r2, #10
 800c5f8:	4648      	mov	r0, r9
 800c5fa:	f000 f9d5 	bl	800c9a8 <__multadd>
 800c5fe:	45a8      	cmp	r8, r5
 800c600:	9001      	str	r0, [sp, #4]
 800c602:	f04f 0300 	mov.w	r3, #0
 800c606:	f04f 020a 	mov.w	r2, #10
 800c60a:	4641      	mov	r1, r8
 800c60c:	4648      	mov	r0, r9
 800c60e:	d107      	bne.n	800c620 <_dtoa_r+0x9e8>
 800c610:	f000 f9ca 	bl	800c9a8 <__multadd>
 800c614:	4680      	mov	r8, r0
 800c616:	4605      	mov	r5, r0
 800c618:	9b05      	ldr	r3, [sp, #20]
 800c61a:	3301      	adds	r3, #1
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	e775      	b.n	800c50c <_dtoa_r+0x8d4>
 800c620:	f000 f9c2 	bl	800c9a8 <__multadd>
 800c624:	4629      	mov	r1, r5
 800c626:	4680      	mov	r8, r0
 800c628:	2300      	movs	r3, #0
 800c62a:	220a      	movs	r2, #10
 800c62c:	4648      	mov	r0, r9
 800c62e:	f000 f9bb 	bl	800c9a8 <__multadd>
 800c632:	4605      	mov	r5, r0
 800c634:	e7f0      	b.n	800c618 <_dtoa_r+0x9e0>
 800c636:	f1bb 0f00 	cmp.w	fp, #0
 800c63a:	bfcc      	ite	gt
 800c63c:	465e      	movgt	r6, fp
 800c63e:	2601      	movle	r6, #1
 800c640:	443e      	add	r6, r7
 800c642:	f04f 0800 	mov.w	r8, #0
 800c646:	9901      	ldr	r1, [sp, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	4648      	mov	r0, r9
 800c64c:	f000 fba2 	bl	800cd94 <__lshift>
 800c650:	4621      	mov	r1, r4
 800c652:	9001      	str	r0, [sp, #4]
 800c654:	f000 fc0a 	bl	800ce6c <__mcmp>
 800c658:	2800      	cmp	r0, #0
 800c65a:	dcaf      	bgt.n	800c5bc <_dtoa_r+0x984>
 800c65c:	d102      	bne.n	800c664 <_dtoa_r+0xa2c>
 800c65e:	f01a 0f01 	tst.w	sl, #1
 800c662:	d1ab      	bne.n	800c5bc <_dtoa_r+0x984>
 800c664:	4633      	mov	r3, r6
 800c666:	461e      	mov	r6, r3
 800c668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c66c:	2a30      	cmp	r2, #48	@ 0x30
 800c66e:	d0fa      	beq.n	800c666 <_dtoa_r+0xa2e>
 800c670:	e5bb      	b.n	800c1ea <_dtoa_r+0x5b2>
 800c672:	429f      	cmp	r7, r3
 800c674:	d1a3      	bne.n	800c5be <_dtoa_r+0x986>
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	3301      	adds	r3, #1
 800c67a:	9304      	str	r3, [sp, #16]
 800c67c:	2331      	movs	r3, #49	@ 0x31
 800c67e:	703b      	strb	r3, [r7, #0]
 800c680:	e5b3      	b.n	800c1ea <_dtoa_r+0x5b2>
 800c682:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c684:	4f16      	ldr	r7, [pc, #88]	@ (800c6e0 <_dtoa_r+0xaa8>)
 800c686:	b11b      	cbz	r3, 800c690 <_dtoa_r+0xa58>
 800c688:	f107 0308 	add.w	r3, r7, #8
 800c68c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	4638      	mov	r0, r7
 800c692:	b011      	add	sp, #68	@ 0x44
 800c694:	ecbd 8b02 	vpop	{d8}
 800c698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69c:	9b07      	ldr	r3, [sp, #28]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	f77f ae36 	ble.w	800c310 <_dtoa_r+0x6d8>
 800c6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6a8:	2001      	movs	r0, #1
 800c6aa:	e656      	b.n	800c35a <_dtoa_r+0x722>
 800c6ac:	f1bb 0f00 	cmp.w	fp, #0
 800c6b0:	f77f aed7 	ble.w	800c462 <_dtoa_r+0x82a>
 800c6b4:	463e      	mov	r6, r7
 800c6b6:	9801      	ldr	r0, [sp, #4]
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	f7ff fa33 	bl	800bb24 <quorem>
 800c6be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c6c2:	f806 ab01 	strb.w	sl, [r6], #1
 800c6c6:	1bf2      	subs	r2, r6, r7
 800c6c8:	4593      	cmp	fp, r2
 800c6ca:	ddb4      	ble.n	800c636 <_dtoa_r+0x9fe>
 800c6cc:	9901      	ldr	r1, [sp, #4]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	220a      	movs	r2, #10
 800c6d2:	4648      	mov	r0, r9
 800c6d4:	f000 f968 	bl	800c9a8 <__multadd>
 800c6d8:	9001      	str	r0, [sp, #4]
 800c6da:	e7ec      	b.n	800c6b6 <_dtoa_r+0xa7e>
 800c6dc:	0800f1ca 	.word	0x0800f1ca
 800c6e0:	0800f14e 	.word	0x0800f14e

0800c6e4 <_free_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	d041      	beq.n	800c770 <_free_r+0x8c>
 800c6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6f0:	1f0c      	subs	r4, r1, #4
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfb8      	it	lt
 800c6f6:	18e4      	addlt	r4, r4, r3
 800c6f8:	f000 f8e8 	bl	800c8cc <__malloc_lock>
 800c6fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c774 <_free_r+0x90>)
 800c6fe:	6813      	ldr	r3, [r2, #0]
 800c700:	b933      	cbnz	r3, 800c710 <_free_r+0x2c>
 800c702:	6063      	str	r3, [r4, #4]
 800c704:	6014      	str	r4, [r2, #0]
 800c706:	4628      	mov	r0, r5
 800c708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c70c:	f000 b8e4 	b.w	800c8d8 <__malloc_unlock>
 800c710:	42a3      	cmp	r3, r4
 800c712:	d908      	bls.n	800c726 <_free_r+0x42>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	1821      	adds	r1, r4, r0
 800c718:	428b      	cmp	r3, r1
 800c71a:	bf01      	itttt	eq
 800c71c:	6819      	ldreq	r1, [r3, #0]
 800c71e:	685b      	ldreq	r3, [r3, #4]
 800c720:	1809      	addeq	r1, r1, r0
 800c722:	6021      	streq	r1, [r4, #0]
 800c724:	e7ed      	b.n	800c702 <_free_r+0x1e>
 800c726:	461a      	mov	r2, r3
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	b10b      	cbz	r3, 800c730 <_free_r+0x4c>
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	d9fa      	bls.n	800c726 <_free_r+0x42>
 800c730:	6811      	ldr	r1, [r2, #0]
 800c732:	1850      	adds	r0, r2, r1
 800c734:	42a0      	cmp	r0, r4
 800c736:	d10b      	bne.n	800c750 <_free_r+0x6c>
 800c738:	6820      	ldr	r0, [r4, #0]
 800c73a:	4401      	add	r1, r0
 800c73c:	1850      	adds	r0, r2, r1
 800c73e:	4283      	cmp	r3, r0
 800c740:	6011      	str	r1, [r2, #0]
 800c742:	d1e0      	bne.n	800c706 <_free_r+0x22>
 800c744:	6818      	ldr	r0, [r3, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	6053      	str	r3, [r2, #4]
 800c74a:	4408      	add	r0, r1
 800c74c:	6010      	str	r0, [r2, #0]
 800c74e:	e7da      	b.n	800c706 <_free_r+0x22>
 800c750:	d902      	bls.n	800c758 <_free_r+0x74>
 800c752:	230c      	movs	r3, #12
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	e7d6      	b.n	800c706 <_free_r+0x22>
 800c758:	6820      	ldr	r0, [r4, #0]
 800c75a:	1821      	adds	r1, r4, r0
 800c75c:	428b      	cmp	r3, r1
 800c75e:	bf04      	itt	eq
 800c760:	6819      	ldreq	r1, [r3, #0]
 800c762:	685b      	ldreq	r3, [r3, #4]
 800c764:	6063      	str	r3, [r4, #4]
 800c766:	bf04      	itt	eq
 800c768:	1809      	addeq	r1, r1, r0
 800c76a:	6021      	streq	r1, [r4, #0]
 800c76c:	6054      	str	r4, [r2, #4]
 800c76e:	e7ca      	b.n	800c706 <_free_r+0x22>
 800c770:	bd38      	pop	{r3, r4, r5, pc}
 800c772:	bf00      	nop
 800c774:	24000510 	.word	0x24000510

0800c778 <malloc>:
 800c778:	4b02      	ldr	r3, [pc, #8]	@ (800c784 <malloc+0xc>)
 800c77a:	4601      	mov	r1, r0
 800c77c:	6818      	ldr	r0, [r3, #0]
 800c77e:	f000 b825 	b.w	800c7cc <_malloc_r>
 800c782:	bf00      	nop
 800c784:	24000028 	.word	0x24000028

0800c788 <sbrk_aligned>:
 800c788:	b570      	push	{r4, r5, r6, lr}
 800c78a:	4e0f      	ldr	r6, [pc, #60]	@ (800c7c8 <sbrk_aligned+0x40>)
 800c78c:	460c      	mov	r4, r1
 800c78e:	6831      	ldr	r1, [r6, #0]
 800c790:	4605      	mov	r5, r0
 800c792:	b911      	cbnz	r1, 800c79a <sbrk_aligned+0x12>
 800c794:	f001 ff00 	bl	800e598 <_sbrk_r>
 800c798:	6030      	str	r0, [r6, #0]
 800c79a:	4621      	mov	r1, r4
 800c79c:	4628      	mov	r0, r5
 800c79e:	f001 fefb 	bl	800e598 <_sbrk_r>
 800c7a2:	1c43      	adds	r3, r0, #1
 800c7a4:	d103      	bne.n	800c7ae <sbrk_aligned+0x26>
 800c7a6:	f04f 34ff 	mov.w	r4, #4294967295
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	bd70      	pop	{r4, r5, r6, pc}
 800c7ae:	1cc4      	adds	r4, r0, #3
 800c7b0:	f024 0403 	bic.w	r4, r4, #3
 800c7b4:	42a0      	cmp	r0, r4
 800c7b6:	d0f8      	beq.n	800c7aa <sbrk_aligned+0x22>
 800c7b8:	1a21      	subs	r1, r4, r0
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f001 feec 	bl	800e598 <_sbrk_r>
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	d1f2      	bne.n	800c7aa <sbrk_aligned+0x22>
 800c7c4:	e7ef      	b.n	800c7a6 <sbrk_aligned+0x1e>
 800c7c6:	bf00      	nop
 800c7c8:	2400050c 	.word	0x2400050c

0800c7cc <_malloc_r>:
 800c7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d0:	1ccd      	adds	r5, r1, #3
 800c7d2:	f025 0503 	bic.w	r5, r5, #3
 800c7d6:	3508      	adds	r5, #8
 800c7d8:	2d0c      	cmp	r5, #12
 800c7da:	bf38      	it	cc
 800c7dc:	250c      	movcc	r5, #12
 800c7de:	2d00      	cmp	r5, #0
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	db01      	blt.n	800c7e8 <_malloc_r+0x1c>
 800c7e4:	42a9      	cmp	r1, r5
 800c7e6:	d904      	bls.n	800c7f2 <_malloc_r+0x26>
 800c7e8:	230c      	movs	r3, #12
 800c7ea:	6033      	str	r3, [r6, #0]
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8c8 <_malloc_r+0xfc>
 800c7f6:	f000 f869 	bl	800c8cc <__malloc_lock>
 800c7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c7fe:	461c      	mov	r4, r3
 800c800:	bb44      	cbnz	r4, 800c854 <_malloc_r+0x88>
 800c802:	4629      	mov	r1, r5
 800c804:	4630      	mov	r0, r6
 800c806:	f7ff ffbf 	bl	800c788 <sbrk_aligned>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	4604      	mov	r4, r0
 800c80e:	d158      	bne.n	800c8c2 <_malloc_r+0xf6>
 800c810:	f8d8 4000 	ldr.w	r4, [r8]
 800c814:	4627      	mov	r7, r4
 800c816:	2f00      	cmp	r7, #0
 800c818:	d143      	bne.n	800c8a2 <_malloc_r+0xd6>
 800c81a:	2c00      	cmp	r4, #0
 800c81c:	d04b      	beq.n	800c8b6 <_malloc_r+0xea>
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	4639      	mov	r1, r7
 800c822:	4630      	mov	r0, r6
 800c824:	eb04 0903 	add.w	r9, r4, r3
 800c828:	f001 feb6 	bl	800e598 <_sbrk_r>
 800c82c:	4581      	cmp	r9, r0
 800c82e:	d142      	bne.n	800c8b6 <_malloc_r+0xea>
 800c830:	6821      	ldr	r1, [r4, #0]
 800c832:	1a6d      	subs	r5, r5, r1
 800c834:	4629      	mov	r1, r5
 800c836:	4630      	mov	r0, r6
 800c838:	f7ff ffa6 	bl	800c788 <sbrk_aligned>
 800c83c:	3001      	adds	r0, #1
 800c83e:	d03a      	beq.n	800c8b6 <_malloc_r+0xea>
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	442b      	add	r3, r5
 800c844:	6023      	str	r3, [r4, #0]
 800c846:	f8d8 3000 	ldr.w	r3, [r8]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	bb62      	cbnz	r2, 800c8a8 <_malloc_r+0xdc>
 800c84e:	f8c8 7000 	str.w	r7, [r8]
 800c852:	e00f      	b.n	800c874 <_malloc_r+0xa8>
 800c854:	6822      	ldr	r2, [r4, #0]
 800c856:	1b52      	subs	r2, r2, r5
 800c858:	d420      	bmi.n	800c89c <_malloc_r+0xd0>
 800c85a:	2a0b      	cmp	r2, #11
 800c85c:	d917      	bls.n	800c88e <_malloc_r+0xc2>
 800c85e:	1961      	adds	r1, r4, r5
 800c860:	42a3      	cmp	r3, r4
 800c862:	6025      	str	r5, [r4, #0]
 800c864:	bf18      	it	ne
 800c866:	6059      	strne	r1, [r3, #4]
 800c868:	6863      	ldr	r3, [r4, #4]
 800c86a:	bf08      	it	eq
 800c86c:	f8c8 1000 	streq.w	r1, [r8]
 800c870:	5162      	str	r2, [r4, r5]
 800c872:	604b      	str	r3, [r1, #4]
 800c874:	4630      	mov	r0, r6
 800c876:	f000 f82f 	bl	800c8d8 <__malloc_unlock>
 800c87a:	f104 000b 	add.w	r0, r4, #11
 800c87e:	1d23      	adds	r3, r4, #4
 800c880:	f020 0007 	bic.w	r0, r0, #7
 800c884:	1ac2      	subs	r2, r0, r3
 800c886:	bf1c      	itt	ne
 800c888:	1a1b      	subne	r3, r3, r0
 800c88a:	50a3      	strne	r3, [r4, r2]
 800c88c:	e7af      	b.n	800c7ee <_malloc_r+0x22>
 800c88e:	6862      	ldr	r2, [r4, #4]
 800c890:	42a3      	cmp	r3, r4
 800c892:	bf0c      	ite	eq
 800c894:	f8c8 2000 	streq.w	r2, [r8]
 800c898:	605a      	strne	r2, [r3, #4]
 800c89a:	e7eb      	b.n	800c874 <_malloc_r+0xa8>
 800c89c:	4623      	mov	r3, r4
 800c89e:	6864      	ldr	r4, [r4, #4]
 800c8a0:	e7ae      	b.n	800c800 <_malloc_r+0x34>
 800c8a2:	463c      	mov	r4, r7
 800c8a4:	687f      	ldr	r7, [r7, #4]
 800c8a6:	e7b6      	b.n	800c816 <_malloc_r+0x4a>
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	42a3      	cmp	r3, r4
 800c8ae:	d1fb      	bne.n	800c8a8 <_malloc_r+0xdc>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	6053      	str	r3, [r2, #4]
 800c8b4:	e7de      	b.n	800c874 <_malloc_r+0xa8>
 800c8b6:	230c      	movs	r3, #12
 800c8b8:	6033      	str	r3, [r6, #0]
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f000 f80c 	bl	800c8d8 <__malloc_unlock>
 800c8c0:	e794      	b.n	800c7ec <_malloc_r+0x20>
 800c8c2:	6005      	str	r5, [r0, #0]
 800c8c4:	e7d6      	b.n	800c874 <_malloc_r+0xa8>
 800c8c6:	bf00      	nop
 800c8c8:	24000510 	.word	0x24000510

0800c8cc <__malloc_lock>:
 800c8cc:	4801      	ldr	r0, [pc, #4]	@ (800c8d4 <__malloc_lock+0x8>)
 800c8ce:	f7ff b912 	b.w	800baf6 <__retarget_lock_acquire_recursive>
 800c8d2:	bf00      	nop
 800c8d4:	24000508 	.word	0x24000508

0800c8d8 <__malloc_unlock>:
 800c8d8:	4801      	ldr	r0, [pc, #4]	@ (800c8e0 <__malloc_unlock+0x8>)
 800c8da:	f7ff b90d 	b.w	800baf8 <__retarget_lock_release_recursive>
 800c8de:	bf00      	nop
 800c8e0:	24000508 	.word	0x24000508

0800c8e4 <_Balloc>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	69c6      	ldr	r6, [r0, #28]
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	b976      	cbnz	r6, 800c90c <_Balloc+0x28>
 800c8ee:	2010      	movs	r0, #16
 800c8f0:	f7ff ff42 	bl	800c778 <malloc>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	61e0      	str	r0, [r4, #28]
 800c8f8:	b920      	cbnz	r0, 800c904 <_Balloc+0x20>
 800c8fa:	4b18      	ldr	r3, [pc, #96]	@ (800c95c <_Balloc+0x78>)
 800c8fc:	4818      	ldr	r0, [pc, #96]	@ (800c960 <_Balloc+0x7c>)
 800c8fe:	216b      	movs	r1, #107	@ 0x6b
 800c900:	f001 fe62 	bl	800e5c8 <__assert_func>
 800c904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c908:	6006      	str	r6, [r0, #0]
 800c90a:	60c6      	str	r6, [r0, #12]
 800c90c:	69e6      	ldr	r6, [r4, #28]
 800c90e:	68f3      	ldr	r3, [r6, #12]
 800c910:	b183      	cbz	r3, 800c934 <_Balloc+0x50>
 800c912:	69e3      	ldr	r3, [r4, #28]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c91a:	b9b8      	cbnz	r0, 800c94c <_Balloc+0x68>
 800c91c:	2101      	movs	r1, #1
 800c91e:	fa01 f605 	lsl.w	r6, r1, r5
 800c922:	1d72      	adds	r2, r6, #5
 800c924:	0092      	lsls	r2, r2, #2
 800c926:	4620      	mov	r0, r4
 800c928:	f001 fe6c 	bl	800e604 <_calloc_r>
 800c92c:	b160      	cbz	r0, 800c948 <_Balloc+0x64>
 800c92e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c932:	e00e      	b.n	800c952 <_Balloc+0x6e>
 800c934:	2221      	movs	r2, #33	@ 0x21
 800c936:	2104      	movs	r1, #4
 800c938:	4620      	mov	r0, r4
 800c93a:	f001 fe63 	bl	800e604 <_calloc_r>
 800c93e:	69e3      	ldr	r3, [r4, #28]
 800c940:	60f0      	str	r0, [r6, #12]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1e4      	bne.n	800c912 <_Balloc+0x2e>
 800c948:	2000      	movs	r0, #0
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	6802      	ldr	r2, [r0, #0]
 800c94e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c952:	2300      	movs	r3, #0
 800c954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c958:	e7f7      	b.n	800c94a <_Balloc+0x66>
 800c95a:	bf00      	nop
 800c95c:	0800f15b 	.word	0x0800f15b
 800c960:	0800f1db 	.word	0x0800f1db

0800c964 <_Bfree>:
 800c964:	b570      	push	{r4, r5, r6, lr}
 800c966:	69c6      	ldr	r6, [r0, #28]
 800c968:	4605      	mov	r5, r0
 800c96a:	460c      	mov	r4, r1
 800c96c:	b976      	cbnz	r6, 800c98c <_Bfree+0x28>
 800c96e:	2010      	movs	r0, #16
 800c970:	f7ff ff02 	bl	800c778 <malloc>
 800c974:	4602      	mov	r2, r0
 800c976:	61e8      	str	r0, [r5, #28]
 800c978:	b920      	cbnz	r0, 800c984 <_Bfree+0x20>
 800c97a:	4b09      	ldr	r3, [pc, #36]	@ (800c9a0 <_Bfree+0x3c>)
 800c97c:	4809      	ldr	r0, [pc, #36]	@ (800c9a4 <_Bfree+0x40>)
 800c97e:	218f      	movs	r1, #143	@ 0x8f
 800c980:	f001 fe22 	bl	800e5c8 <__assert_func>
 800c984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c988:	6006      	str	r6, [r0, #0]
 800c98a:	60c6      	str	r6, [r0, #12]
 800c98c:	b13c      	cbz	r4, 800c99e <_Bfree+0x3a>
 800c98e:	69eb      	ldr	r3, [r5, #28]
 800c990:	6862      	ldr	r2, [r4, #4]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c998:	6021      	str	r1, [r4, #0]
 800c99a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	0800f15b 	.word	0x0800f15b
 800c9a4:	0800f1db 	.word	0x0800f1db

0800c9a8 <__multadd>:
 800c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ac:	690d      	ldr	r5, [r1, #16]
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	461e      	mov	r6, r3
 800c9b4:	f101 0c14 	add.w	ip, r1, #20
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	f8dc 3000 	ldr.w	r3, [ip]
 800c9be:	b299      	uxth	r1, r3
 800c9c0:	fb02 6101 	mla	r1, r2, r1, r6
 800c9c4:	0c1e      	lsrs	r6, r3, #16
 800c9c6:	0c0b      	lsrs	r3, r1, #16
 800c9c8:	fb02 3306 	mla	r3, r2, r6, r3
 800c9cc:	b289      	uxth	r1, r1
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9d4:	4285      	cmp	r5, r0
 800c9d6:	f84c 1b04 	str.w	r1, [ip], #4
 800c9da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9de:	dcec      	bgt.n	800c9ba <__multadd+0x12>
 800c9e0:	b30e      	cbz	r6, 800ca26 <__multadd+0x7e>
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	42ab      	cmp	r3, r5
 800c9e6:	dc19      	bgt.n	800ca1c <__multadd+0x74>
 800c9e8:	6861      	ldr	r1, [r4, #4]
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	3101      	adds	r1, #1
 800c9ee:	f7ff ff79 	bl	800c8e4 <_Balloc>
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	b928      	cbnz	r0, 800ca02 <__multadd+0x5a>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800ca2c <__multadd+0x84>)
 800c9fa:	480d      	ldr	r0, [pc, #52]	@ (800ca30 <__multadd+0x88>)
 800c9fc:	21ba      	movs	r1, #186	@ 0xba
 800c9fe:	f001 fde3 	bl	800e5c8 <__assert_func>
 800ca02:	6922      	ldr	r2, [r4, #16]
 800ca04:	3202      	adds	r2, #2
 800ca06:	f104 010c 	add.w	r1, r4, #12
 800ca0a:	0092      	lsls	r2, r2, #2
 800ca0c:	300c      	adds	r0, #12
 800ca0e:	f7ff f874 	bl	800bafa <memcpy>
 800ca12:	4621      	mov	r1, r4
 800ca14:	4638      	mov	r0, r7
 800ca16:	f7ff ffa5 	bl	800c964 <_Bfree>
 800ca1a:	4644      	mov	r4, r8
 800ca1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca20:	3501      	adds	r5, #1
 800ca22:	615e      	str	r6, [r3, #20]
 800ca24:	6125      	str	r5, [r4, #16]
 800ca26:	4620      	mov	r0, r4
 800ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca2c:	0800f1ca 	.word	0x0800f1ca
 800ca30:	0800f1db 	.word	0x0800f1db

0800ca34 <__s2b>:
 800ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca38:	460c      	mov	r4, r1
 800ca3a:	4615      	mov	r5, r2
 800ca3c:	461f      	mov	r7, r3
 800ca3e:	2209      	movs	r2, #9
 800ca40:	3308      	adds	r3, #8
 800ca42:	4606      	mov	r6, r0
 800ca44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca48:	2100      	movs	r1, #0
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	db09      	blt.n	800ca64 <__s2b+0x30>
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff ff47 	bl	800c8e4 <_Balloc>
 800ca56:	b940      	cbnz	r0, 800ca6a <__s2b+0x36>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	4b19      	ldr	r3, [pc, #100]	@ (800cac0 <__s2b+0x8c>)
 800ca5c:	4819      	ldr	r0, [pc, #100]	@ (800cac4 <__s2b+0x90>)
 800ca5e:	21d3      	movs	r1, #211	@ 0xd3
 800ca60:	f001 fdb2 	bl	800e5c8 <__assert_func>
 800ca64:	0052      	lsls	r2, r2, #1
 800ca66:	3101      	adds	r1, #1
 800ca68:	e7f0      	b.n	800ca4c <__s2b+0x18>
 800ca6a:	9b08      	ldr	r3, [sp, #32]
 800ca6c:	6143      	str	r3, [r0, #20]
 800ca6e:	2d09      	cmp	r5, #9
 800ca70:	f04f 0301 	mov.w	r3, #1
 800ca74:	6103      	str	r3, [r0, #16]
 800ca76:	dd16      	ble.n	800caa6 <__s2b+0x72>
 800ca78:	f104 0909 	add.w	r9, r4, #9
 800ca7c:	46c8      	mov	r8, r9
 800ca7e:	442c      	add	r4, r5
 800ca80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca84:	4601      	mov	r1, r0
 800ca86:	3b30      	subs	r3, #48	@ 0x30
 800ca88:	220a      	movs	r2, #10
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7ff ff8c 	bl	800c9a8 <__multadd>
 800ca90:	45a0      	cmp	r8, r4
 800ca92:	d1f5      	bne.n	800ca80 <__s2b+0x4c>
 800ca94:	f1a5 0408 	sub.w	r4, r5, #8
 800ca98:	444c      	add	r4, r9
 800ca9a:	1b2d      	subs	r5, r5, r4
 800ca9c:	1963      	adds	r3, r4, r5
 800ca9e:	42bb      	cmp	r3, r7
 800caa0:	db04      	blt.n	800caac <__s2b+0x78>
 800caa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caa6:	340a      	adds	r4, #10
 800caa8:	2509      	movs	r5, #9
 800caaa:	e7f6      	b.n	800ca9a <__s2b+0x66>
 800caac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cab0:	4601      	mov	r1, r0
 800cab2:	3b30      	subs	r3, #48	@ 0x30
 800cab4:	220a      	movs	r2, #10
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff ff76 	bl	800c9a8 <__multadd>
 800cabc:	e7ee      	b.n	800ca9c <__s2b+0x68>
 800cabe:	bf00      	nop
 800cac0:	0800f1ca 	.word	0x0800f1ca
 800cac4:	0800f1db 	.word	0x0800f1db

0800cac8 <__hi0bits>:
 800cac8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cacc:	4603      	mov	r3, r0
 800cace:	bf36      	itet	cc
 800cad0:	0403      	lslcc	r3, r0, #16
 800cad2:	2000      	movcs	r0, #0
 800cad4:	2010      	movcc	r0, #16
 800cad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cada:	bf3c      	itt	cc
 800cadc:	021b      	lslcc	r3, r3, #8
 800cade:	3008      	addcc	r0, #8
 800cae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cae4:	bf3c      	itt	cc
 800cae6:	011b      	lslcc	r3, r3, #4
 800cae8:	3004      	addcc	r0, #4
 800caea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caee:	bf3c      	itt	cc
 800caf0:	009b      	lslcc	r3, r3, #2
 800caf2:	3002      	addcc	r0, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	db05      	blt.n	800cb04 <__hi0bits+0x3c>
 800caf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cafc:	f100 0001 	add.w	r0, r0, #1
 800cb00:	bf08      	it	eq
 800cb02:	2020      	moveq	r0, #32
 800cb04:	4770      	bx	lr

0800cb06 <__lo0bits>:
 800cb06:	6803      	ldr	r3, [r0, #0]
 800cb08:	4602      	mov	r2, r0
 800cb0a:	f013 0007 	ands.w	r0, r3, #7
 800cb0e:	d00b      	beq.n	800cb28 <__lo0bits+0x22>
 800cb10:	07d9      	lsls	r1, r3, #31
 800cb12:	d421      	bmi.n	800cb58 <__lo0bits+0x52>
 800cb14:	0798      	lsls	r0, r3, #30
 800cb16:	bf49      	itett	mi
 800cb18:	085b      	lsrmi	r3, r3, #1
 800cb1a:	089b      	lsrpl	r3, r3, #2
 800cb1c:	2001      	movmi	r0, #1
 800cb1e:	6013      	strmi	r3, [r2, #0]
 800cb20:	bf5c      	itt	pl
 800cb22:	6013      	strpl	r3, [r2, #0]
 800cb24:	2002      	movpl	r0, #2
 800cb26:	4770      	bx	lr
 800cb28:	b299      	uxth	r1, r3
 800cb2a:	b909      	cbnz	r1, 800cb30 <__lo0bits+0x2a>
 800cb2c:	0c1b      	lsrs	r3, r3, #16
 800cb2e:	2010      	movs	r0, #16
 800cb30:	b2d9      	uxtb	r1, r3
 800cb32:	b909      	cbnz	r1, 800cb38 <__lo0bits+0x32>
 800cb34:	3008      	adds	r0, #8
 800cb36:	0a1b      	lsrs	r3, r3, #8
 800cb38:	0719      	lsls	r1, r3, #28
 800cb3a:	bf04      	itt	eq
 800cb3c:	091b      	lsreq	r3, r3, #4
 800cb3e:	3004      	addeq	r0, #4
 800cb40:	0799      	lsls	r1, r3, #30
 800cb42:	bf04      	itt	eq
 800cb44:	089b      	lsreq	r3, r3, #2
 800cb46:	3002      	addeq	r0, #2
 800cb48:	07d9      	lsls	r1, r3, #31
 800cb4a:	d403      	bmi.n	800cb54 <__lo0bits+0x4e>
 800cb4c:	085b      	lsrs	r3, r3, #1
 800cb4e:	f100 0001 	add.w	r0, r0, #1
 800cb52:	d003      	beq.n	800cb5c <__lo0bits+0x56>
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	4770      	bx	lr
 800cb58:	2000      	movs	r0, #0
 800cb5a:	4770      	bx	lr
 800cb5c:	2020      	movs	r0, #32
 800cb5e:	4770      	bx	lr

0800cb60 <__i2b>:
 800cb60:	b510      	push	{r4, lr}
 800cb62:	460c      	mov	r4, r1
 800cb64:	2101      	movs	r1, #1
 800cb66:	f7ff febd 	bl	800c8e4 <_Balloc>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	b928      	cbnz	r0, 800cb7a <__i2b+0x1a>
 800cb6e:	4b05      	ldr	r3, [pc, #20]	@ (800cb84 <__i2b+0x24>)
 800cb70:	4805      	ldr	r0, [pc, #20]	@ (800cb88 <__i2b+0x28>)
 800cb72:	f240 1145 	movw	r1, #325	@ 0x145
 800cb76:	f001 fd27 	bl	800e5c8 <__assert_func>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	6144      	str	r4, [r0, #20]
 800cb7e:	6103      	str	r3, [r0, #16]
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	bf00      	nop
 800cb84:	0800f1ca 	.word	0x0800f1ca
 800cb88:	0800f1db 	.word	0x0800f1db

0800cb8c <__multiply>:
 800cb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb90:	4614      	mov	r4, r2
 800cb92:	690a      	ldr	r2, [r1, #16]
 800cb94:	6923      	ldr	r3, [r4, #16]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	bfa8      	it	ge
 800cb9a:	4623      	movge	r3, r4
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	bfa4      	itt	ge
 800cba0:	460c      	movge	r4, r1
 800cba2:	461f      	movge	r7, r3
 800cba4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cba8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cbac:	68a3      	ldr	r3, [r4, #8]
 800cbae:	6861      	ldr	r1, [r4, #4]
 800cbb0:	eb0a 0609 	add.w	r6, sl, r9
 800cbb4:	42b3      	cmp	r3, r6
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	bfb8      	it	lt
 800cbba:	3101      	addlt	r1, #1
 800cbbc:	f7ff fe92 	bl	800c8e4 <_Balloc>
 800cbc0:	b930      	cbnz	r0, 800cbd0 <__multiply+0x44>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	4b44      	ldr	r3, [pc, #272]	@ (800ccd8 <__multiply+0x14c>)
 800cbc6:	4845      	ldr	r0, [pc, #276]	@ (800ccdc <__multiply+0x150>)
 800cbc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbcc:	f001 fcfc 	bl	800e5c8 <__assert_func>
 800cbd0:	f100 0514 	add.w	r5, r0, #20
 800cbd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbd8:	462b      	mov	r3, r5
 800cbda:	2200      	movs	r2, #0
 800cbdc:	4543      	cmp	r3, r8
 800cbde:	d321      	bcc.n	800cc24 <__multiply+0x98>
 800cbe0:	f107 0114 	add.w	r1, r7, #20
 800cbe4:	f104 0214 	add.w	r2, r4, #20
 800cbe8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbf0:	9302      	str	r3, [sp, #8]
 800cbf2:	1b13      	subs	r3, r2, r4
 800cbf4:	3b15      	subs	r3, #21
 800cbf6:	f023 0303 	bic.w	r3, r3, #3
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	f104 0715 	add.w	r7, r4, #21
 800cc00:	42ba      	cmp	r2, r7
 800cc02:	bf38      	it	cc
 800cc04:	2304      	movcc	r3, #4
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	9b02      	ldr	r3, [sp, #8]
 800cc0a:	9103      	str	r1, [sp, #12]
 800cc0c:	428b      	cmp	r3, r1
 800cc0e:	d80c      	bhi.n	800cc2a <__multiply+0x9e>
 800cc10:	2e00      	cmp	r6, #0
 800cc12:	dd03      	ble.n	800cc1c <__multiply+0x90>
 800cc14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d05b      	beq.n	800ccd4 <__multiply+0x148>
 800cc1c:	6106      	str	r6, [r0, #16]
 800cc1e:	b005      	add	sp, #20
 800cc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc24:	f843 2b04 	str.w	r2, [r3], #4
 800cc28:	e7d8      	b.n	800cbdc <__multiply+0x50>
 800cc2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc2e:	f1ba 0f00 	cmp.w	sl, #0
 800cc32:	d024      	beq.n	800cc7e <__multiply+0xf2>
 800cc34:	f104 0e14 	add.w	lr, r4, #20
 800cc38:	46a9      	mov	r9, r5
 800cc3a:	f04f 0c00 	mov.w	ip, #0
 800cc3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc42:	f8d9 3000 	ldr.w	r3, [r9]
 800cc46:	fa1f fb87 	uxth.w	fp, r7
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc54:	f8d9 7000 	ldr.w	r7, [r9]
 800cc58:	4463      	add	r3, ip
 800cc5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc6c:	4572      	cmp	r2, lr
 800cc6e:	f849 3b04 	str.w	r3, [r9], #4
 800cc72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc76:	d8e2      	bhi.n	800cc3e <__multiply+0xb2>
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	f845 c003 	str.w	ip, [r5, r3]
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc84:	3104      	adds	r1, #4
 800cc86:	f1b9 0f00 	cmp.w	r9, #0
 800cc8a:	d021      	beq.n	800ccd0 <__multiply+0x144>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	f104 0c14 	add.w	ip, r4, #20
 800cc92:	46ae      	mov	lr, r5
 800cc94:	f04f 0a00 	mov.w	sl, #0
 800cc98:	f8bc b000 	ldrh.w	fp, [ip]
 800cc9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cca0:	fb09 770b 	mla	r7, r9, fp, r7
 800cca4:	4457      	add	r7, sl
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ccac:	f84e 3b04 	str.w	r3, [lr], #4
 800ccb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ccb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccb8:	f8be 3000 	ldrh.w	r3, [lr]
 800ccbc:	fb09 330a 	mla	r3, r9, sl, r3
 800ccc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ccc4:	4562      	cmp	r2, ip
 800ccc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccca:	d8e5      	bhi.n	800cc98 <__multiply+0x10c>
 800cccc:	9f01      	ldr	r7, [sp, #4]
 800ccce:	51eb      	str	r3, [r5, r7]
 800ccd0:	3504      	adds	r5, #4
 800ccd2:	e799      	b.n	800cc08 <__multiply+0x7c>
 800ccd4:	3e01      	subs	r6, #1
 800ccd6:	e79b      	b.n	800cc10 <__multiply+0x84>
 800ccd8:	0800f1ca 	.word	0x0800f1ca
 800ccdc:	0800f1db 	.word	0x0800f1db

0800cce0 <__pow5mult>:
 800cce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce4:	4615      	mov	r5, r2
 800cce6:	f012 0203 	ands.w	r2, r2, #3
 800ccea:	4607      	mov	r7, r0
 800ccec:	460e      	mov	r6, r1
 800ccee:	d007      	beq.n	800cd00 <__pow5mult+0x20>
 800ccf0:	4c25      	ldr	r4, [pc, #148]	@ (800cd88 <__pow5mult+0xa8>)
 800ccf2:	3a01      	subs	r2, #1
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccfa:	f7ff fe55 	bl	800c9a8 <__multadd>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	10ad      	asrs	r5, r5, #2
 800cd02:	d03d      	beq.n	800cd80 <__pow5mult+0xa0>
 800cd04:	69fc      	ldr	r4, [r7, #28]
 800cd06:	b97c      	cbnz	r4, 800cd28 <__pow5mult+0x48>
 800cd08:	2010      	movs	r0, #16
 800cd0a:	f7ff fd35 	bl	800c778 <malloc>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	61f8      	str	r0, [r7, #28]
 800cd12:	b928      	cbnz	r0, 800cd20 <__pow5mult+0x40>
 800cd14:	4b1d      	ldr	r3, [pc, #116]	@ (800cd8c <__pow5mult+0xac>)
 800cd16:	481e      	ldr	r0, [pc, #120]	@ (800cd90 <__pow5mult+0xb0>)
 800cd18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd1c:	f001 fc54 	bl	800e5c8 <__assert_func>
 800cd20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd24:	6004      	str	r4, [r0, #0]
 800cd26:	60c4      	str	r4, [r0, #12]
 800cd28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd30:	b94c      	cbnz	r4, 800cd46 <__pow5mult+0x66>
 800cd32:	f240 2171 	movw	r1, #625	@ 0x271
 800cd36:	4638      	mov	r0, r7
 800cd38:	f7ff ff12 	bl	800cb60 <__i2b>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd42:	4604      	mov	r4, r0
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	f04f 0900 	mov.w	r9, #0
 800cd4a:	07eb      	lsls	r3, r5, #31
 800cd4c:	d50a      	bpl.n	800cd64 <__pow5mult+0x84>
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4622      	mov	r2, r4
 800cd52:	4638      	mov	r0, r7
 800cd54:	f7ff ff1a 	bl	800cb8c <__multiply>
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4680      	mov	r8, r0
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	f7ff fe01 	bl	800c964 <_Bfree>
 800cd62:	4646      	mov	r6, r8
 800cd64:	106d      	asrs	r5, r5, #1
 800cd66:	d00b      	beq.n	800cd80 <__pow5mult+0xa0>
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	b938      	cbnz	r0, 800cd7c <__pow5mult+0x9c>
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4621      	mov	r1, r4
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ff0b 	bl	800cb8c <__multiply>
 800cd76:	6020      	str	r0, [r4, #0]
 800cd78:	f8c0 9000 	str.w	r9, [r0]
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	e7e4      	b.n	800cd4a <__pow5mult+0x6a>
 800cd80:	4630      	mov	r0, r6
 800cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd86:	bf00      	nop
 800cd88:	0800f234 	.word	0x0800f234
 800cd8c:	0800f15b 	.word	0x0800f15b
 800cd90:	0800f1db 	.word	0x0800f1db

0800cd94 <__lshift>:
 800cd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd98:	460c      	mov	r4, r1
 800cd9a:	6849      	ldr	r1, [r1, #4]
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	4607      	mov	r7, r0
 800cda6:	4691      	mov	r9, r2
 800cda8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdac:	f108 0601 	add.w	r6, r8, #1
 800cdb0:	42b3      	cmp	r3, r6
 800cdb2:	db0b      	blt.n	800cdcc <__lshift+0x38>
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff fd95 	bl	800c8e4 <_Balloc>
 800cdba:	4605      	mov	r5, r0
 800cdbc:	b948      	cbnz	r0, 800cdd2 <__lshift+0x3e>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	4b28      	ldr	r3, [pc, #160]	@ (800ce64 <__lshift+0xd0>)
 800cdc2:	4829      	ldr	r0, [pc, #164]	@ (800ce68 <__lshift+0xd4>)
 800cdc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cdc8:	f001 fbfe 	bl	800e5c8 <__assert_func>
 800cdcc:	3101      	adds	r1, #1
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	e7ee      	b.n	800cdb0 <__lshift+0x1c>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	f100 0114 	add.w	r1, r0, #20
 800cdd8:	f100 0210 	add.w	r2, r0, #16
 800cddc:	4618      	mov	r0, r3
 800cdde:	4553      	cmp	r3, sl
 800cde0:	db33      	blt.n	800ce4a <__lshift+0xb6>
 800cde2:	6920      	ldr	r0, [r4, #16]
 800cde4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cde8:	f104 0314 	add.w	r3, r4, #20
 800cdec:	f019 091f 	ands.w	r9, r9, #31
 800cdf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdf8:	d02b      	beq.n	800ce52 <__lshift+0xbe>
 800cdfa:	f1c9 0e20 	rsb	lr, r9, #32
 800cdfe:	468a      	mov	sl, r1
 800ce00:	2200      	movs	r2, #0
 800ce02:	6818      	ldr	r0, [r3, #0]
 800ce04:	fa00 f009 	lsl.w	r0, r0, r9
 800ce08:	4310      	orrs	r0, r2
 800ce0a:	f84a 0b04 	str.w	r0, [sl], #4
 800ce0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce12:	459c      	cmp	ip, r3
 800ce14:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce18:	d8f3      	bhi.n	800ce02 <__lshift+0x6e>
 800ce1a:	ebac 0304 	sub.w	r3, ip, r4
 800ce1e:	3b15      	subs	r3, #21
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	3304      	adds	r3, #4
 800ce26:	f104 0015 	add.w	r0, r4, #21
 800ce2a:	4584      	cmp	ip, r0
 800ce2c:	bf38      	it	cc
 800ce2e:	2304      	movcc	r3, #4
 800ce30:	50ca      	str	r2, [r1, r3]
 800ce32:	b10a      	cbz	r2, 800ce38 <__lshift+0xa4>
 800ce34:	f108 0602 	add.w	r6, r8, #2
 800ce38:	3e01      	subs	r6, #1
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	612e      	str	r6, [r5, #16]
 800ce3e:	4621      	mov	r1, r4
 800ce40:	f7ff fd90 	bl	800c964 <_Bfree>
 800ce44:	4628      	mov	r0, r5
 800ce46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce4e:	3301      	adds	r3, #1
 800ce50:	e7c5      	b.n	800cdde <__lshift+0x4a>
 800ce52:	3904      	subs	r1, #4
 800ce54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce58:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce5c:	459c      	cmp	ip, r3
 800ce5e:	d8f9      	bhi.n	800ce54 <__lshift+0xc0>
 800ce60:	e7ea      	b.n	800ce38 <__lshift+0xa4>
 800ce62:	bf00      	nop
 800ce64:	0800f1ca 	.word	0x0800f1ca
 800ce68:	0800f1db 	.word	0x0800f1db

0800ce6c <__mcmp>:
 800ce6c:	690a      	ldr	r2, [r1, #16]
 800ce6e:	4603      	mov	r3, r0
 800ce70:	6900      	ldr	r0, [r0, #16]
 800ce72:	1a80      	subs	r0, r0, r2
 800ce74:	b530      	push	{r4, r5, lr}
 800ce76:	d10e      	bne.n	800ce96 <__mcmp+0x2a>
 800ce78:	3314      	adds	r3, #20
 800ce7a:	3114      	adds	r1, #20
 800ce7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce8c:	4295      	cmp	r5, r2
 800ce8e:	d003      	beq.n	800ce98 <__mcmp+0x2c>
 800ce90:	d205      	bcs.n	800ce9e <__mcmp+0x32>
 800ce92:	f04f 30ff 	mov.w	r0, #4294967295
 800ce96:	bd30      	pop	{r4, r5, pc}
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	d3f3      	bcc.n	800ce84 <__mcmp+0x18>
 800ce9c:	e7fb      	b.n	800ce96 <__mcmp+0x2a>
 800ce9e:	2001      	movs	r0, #1
 800cea0:	e7f9      	b.n	800ce96 <__mcmp+0x2a>
	...

0800cea4 <__mdiff>:
 800cea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	4689      	mov	r9, r1
 800ceaa:	4606      	mov	r6, r0
 800ceac:	4611      	mov	r1, r2
 800ceae:	4648      	mov	r0, r9
 800ceb0:	4614      	mov	r4, r2
 800ceb2:	f7ff ffdb 	bl	800ce6c <__mcmp>
 800ceb6:	1e05      	subs	r5, r0, #0
 800ceb8:	d112      	bne.n	800cee0 <__mdiff+0x3c>
 800ceba:	4629      	mov	r1, r5
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff fd11 	bl	800c8e4 <_Balloc>
 800cec2:	4602      	mov	r2, r0
 800cec4:	b928      	cbnz	r0, 800ced2 <__mdiff+0x2e>
 800cec6:	4b3f      	ldr	r3, [pc, #252]	@ (800cfc4 <__mdiff+0x120>)
 800cec8:	f240 2137 	movw	r1, #567	@ 0x237
 800cecc:	483e      	ldr	r0, [pc, #248]	@ (800cfc8 <__mdiff+0x124>)
 800cece:	f001 fb7b 	bl	800e5c8 <__assert_func>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ced8:	4610      	mov	r0, r2
 800ceda:	b003      	add	sp, #12
 800cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	bfbc      	itt	lt
 800cee2:	464b      	movlt	r3, r9
 800cee4:	46a1      	movlt	r9, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ceec:	bfba      	itte	lt
 800ceee:	461c      	movlt	r4, r3
 800cef0:	2501      	movlt	r5, #1
 800cef2:	2500      	movge	r5, #0
 800cef4:	f7ff fcf6 	bl	800c8e4 <_Balloc>
 800cef8:	4602      	mov	r2, r0
 800cefa:	b918      	cbnz	r0, 800cf04 <__mdiff+0x60>
 800cefc:	4b31      	ldr	r3, [pc, #196]	@ (800cfc4 <__mdiff+0x120>)
 800cefe:	f240 2145 	movw	r1, #581	@ 0x245
 800cf02:	e7e3      	b.n	800cecc <__mdiff+0x28>
 800cf04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf08:	6926      	ldr	r6, [r4, #16]
 800cf0a:	60c5      	str	r5, [r0, #12]
 800cf0c:	f109 0310 	add.w	r3, r9, #16
 800cf10:	f109 0514 	add.w	r5, r9, #20
 800cf14:	f104 0e14 	add.w	lr, r4, #20
 800cf18:	f100 0b14 	add.w	fp, r0, #20
 800cf1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	46d9      	mov	r9, fp
 800cf28:	f04f 0c00 	mov.w	ip, #0
 800cf2c:	9b01      	ldr	r3, [sp, #4]
 800cf2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	fa1f f38a 	uxth.w	r3, sl
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	b283      	uxth	r3, r0
 800cf40:	1acb      	subs	r3, r1, r3
 800cf42:	0c00      	lsrs	r0, r0, #16
 800cf44:	4463      	add	r3, ip
 800cf46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf54:	4576      	cmp	r6, lr
 800cf56:	f849 3b04 	str.w	r3, [r9], #4
 800cf5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf5e:	d8e5      	bhi.n	800cf2c <__mdiff+0x88>
 800cf60:	1b33      	subs	r3, r6, r4
 800cf62:	3b15      	subs	r3, #21
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3415      	adds	r4, #21
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	42a6      	cmp	r6, r4
 800cf6e:	bf38      	it	cc
 800cf70:	2304      	movcc	r3, #4
 800cf72:	441d      	add	r5, r3
 800cf74:	445b      	add	r3, fp
 800cf76:	461e      	mov	r6, r3
 800cf78:	462c      	mov	r4, r5
 800cf7a:	4544      	cmp	r4, r8
 800cf7c:	d30e      	bcc.n	800cf9c <__mdiff+0xf8>
 800cf7e:	f108 0103 	add.w	r1, r8, #3
 800cf82:	1b49      	subs	r1, r1, r5
 800cf84:	f021 0103 	bic.w	r1, r1, #3
 800cf88:	3d03      	subs	r5, #3
 800cf8a:	45a8      	cmp	r8, r5
 800cf8c:	bf38      	it	cc
 800cf8e:	2100      	movcc	r1, #0
 800cf90:	440b      	add	r3, r1
 800cf92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf96:	b191      	cbz	r1, 800cfbe <__mdiff+0x11a>
 800cf98:	6117      	str	r7, [r2, #16]
 800cf9a:	e79d      	b.n	800ced8 <__mdiff+0x34>
 800cf9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cfa0:	46e6      	mov	lr, ip
 800cfa2:	0c08      	lsrs	r0, r1, #16
 800cfa4:	fa1c fc81 	uxtah	ip, ip, r1
 800cfa8:	4471      	add	r1, lr
 800cfaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfae:	b289      	uxth	r1, r1
 800cfb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cfb4:	f846 1b04 	str.w	r1, [r6], #4
 800cfb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfbc:	e7dd      	b.n	800cf7a <__mdiff+0xd6>
 800cfbe:	3f01      	subs	r7, #1
 800cfc0:	e7e7      	b.n	800cf92 <__mdiff+0xee>
 800cfc2:	bf00      	nop
 800cfc4:	0800f1ca 	.word	0x0800f1ca
 800cfc8:	0800f1db 	.word	0x0800f1db

0800cfcc <__ulp>:
 800cfcc:	b082      	sub	sp, #8
 800cfce:	ed8d 0b00 	vstr	d0, [sp]
 800cfd2:	9a01      	ldr	r2, [sp, #4]
 800cfd4:	4b0f      	ldr	r3, [pc, #60]	@ (800d014 <__ulp+0x48>)
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dc08      	bgt.n	800cff2 <__ulp+0x26>
 800cfe0:	425b      	negs	r3, r3
 800cfe2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cfe6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cfea:	da04      	bge.n	800cff6 <__ulp+0x2a>
 800cfec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cff0:	4113      	asrs	r3, r2
 800cff2:	2200      	movs	r2, #0
 800cff4:	e008      	b.n	800d008 <__ulp+0x3c>
 800cff6:	f1a2 0314 	sub.w	r3, r2, #20
 800cffa:	2b1e      	cmp	r3, #30
 800cffc:	bfda      	itte	le
 800cffe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d002:	40da      	lsrle	r2, r3
 800d004:	2201      	movgt	r2, #1
 800d006:	2300      	movs	r3, #0
 800d008:	4619      	mov	r1, r3
 800d00a:	4610      	mov	r0, r2
 800d00c:	ec41 0b10 	vmov	d0, r0, r1
 800d010:	b002      	add	sp, #8
 800d012:	4770      	bx	lr
 800d014:	7ff00000 	.word	0x7ff00000

0800d018 <__b2d>:
 800d018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	6906      	ldr	r6, [r0, #16]
 800d01e:	f100 0814 	add.w	r8, r0, #20
 800d022:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d026:	1f37      	subs	r7, r6, #4
 800d028:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7ff fd4b 	bl	800cac8 <__hi0bits>
 800d032:	f1c0 0320 	rsb	r3, r0, #32
 800d036:	280a      	cmp	r0, #10
 800d038:	600b      	str	r3, [r1, #0]
 800d03a:	491b      	ldr	r1, [pc, #108]	@ (800d0a8 <__b2d+0x90>)
 800d03c:	dc15      	bgt.n	800d06a <__b2d+0x52>
 800d03e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d042:	fa22 f30c 	lsr.w	r3, r2, ip
 800d046:	45b8      	cmp	r8, r7
 800d048:	ea43 0501 	orr.w	r5, r3, r1
 800d04c:	bf34      	ite	cc
 800d04e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d052:	2300      	movcs	r3, #0
 800d054:	3015      	adds	r0, #21
 800d056:	fa02 f000 	lsl.w	r0, r2, r0
 800d05a:	fa23 f30c 	lsr.w	r3, r3, ip
 800d05e:	4303      	orrs	r3, r0
 800d060:	461c      	mov	r4, r3
 800d062:	ec45 4b10 	vmov	d0, r4, r5
 800d066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06a:	45b8      	cmp	r8, r7
 800d06c:	bf3a      	itte	cc
 800d06e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d072:	f1a6 0708 	subcc.w	r7, r6, #8
 800d076:	2300      	movcs	r3, #0
 800d078:	380b      	subs	r0, #11
 800d07a:	d012      	beq.n	800d0a2 <__b2d+0x8a>
 800d07c:	f1c0 0120 	rsb	r1, r0, #32
 800d080:	fa23 f401 	lsr.w	r4, r3, r1
 800d084:	4082      	lsls	r2, r0
 800d086:	4322      	orrs	r2, r4
 800d088:	4547      	cmp	r7, r8
 800d08a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d08e:	bf8c      	ite	hi
 800d090:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d094:	2200      	movls	r2, #0
 800d096:	4083      	lsls	r3, r0
 800d098:	40ca      	lsrs	r2, r1
 800d09a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	e7de      	b.n	800d060 <__b2d+0x48>
 800d0a2:	ea42 0501 	orr.w	r5, r2, r1
 800d0a6:	e7db      	b.n	800d060 <__b2d+0x48>
 800d0a8:	3ff00000 	.word	0x3ff00000

0800d0ac <__d2b>:
 800d0ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	ec59 8b10 	vmov	r8, r9, d0
 800d0b8:	4616      	mov	r6, r2
 800d0ba:	f7ff fc13 	bl	800c8e4 <_Balloc>
 800d0be:	4604      	mov	r4, r0
 800d0c0:	b930      	cbnz	r0, 800d0d0 <__d2b+0x24>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4b23      	ldr	r3, [pc, #140]	@ (800d154 <__d2b+0xa8>)
 800d0c6:	4824      	ldr	r0, [pc, #144]	@ (800d158 <__d2b+0xac>)
 800d0c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0cc:	f001 fa7c 	bl	800e5c8 <__assert_func>
 800d0d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0d8:	b10d      	cbz	r5, 800d0de <__d2b+0x32>
 800d0da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	f1b8 0300 	subs.w	r3, r8, #0
 800d0e4:	d023      	beq.n	800d12e <__d2b+0x82>
 800d0e6:	4668      	mov	r0, sp
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	f7ff fd0c 	bl	800cb06 <__lo0bits>
 800d0ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0f2:	b1d0      	cbz	r0, 800d12a <__d2b+0x7e>
 800d0f4:	f1c0 0320 	rsb	r3, r0, #32
 800d0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	40c2      	lsrs	r2, r0
 800d100:	6163      	str	r3, [r4, #20]
 800d102:	9201      	str	r2, [sp, #4]
 800d104:	9b01      	ldr	r3, [sp, #4]
 800d106:	61a3      	str	r3, [r4, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bf0c      	ite	eq
 800d10c:	2201      	moveq	r2, #1
 800d10e:	2202      	movne	r2, #2
 800d110:	6122      	str	r2, [r4, #16]
 800d112:	b1a5      	cbz	r5, 800d13e <__d2b+0x92>
 800d114:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d118:	4405      	add	r5, r0
 800d11a:	603d      	str	r5, [r7, #0]
 800d11c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d120:	6030      	str	r0, [r6, #0]
 800d122:	4620      	mov	r0, r4
 800d124:	b003      	add	sp, #12
 800d126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d12a:	6161      	str	r1, [r4, #20]
 800d12c:	e7ea      	b.n	800d104 <__d2b+0x58>
 800d12e:	a801      	add	r0, sp, #4
 800d130:	f7ff fce9 	bl	800cb06 <__lo0bits>
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	6163      	str	r3, [r4, #20]
 800d138:	3020      	adds	r0, #32
 800d13a:	2201      	movs	r2, #1
 800d13c:	e7e8      	b.n	800d110 <__d2b+0x64>
 800d13e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d142:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d146:	6038      	str	r0, [r7, #0]
 800d148:	6918      	ldr	r0, [r3, #16]
 800d14a:	f7ff fcbd 	bl	800cac8 <__hi0bits>
 800d14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d152:	e7e5      	b.n	800d120 <__d2b+0x74>
 800d154:	0800f1ca 	.word	0x0800f1ca
 800d158:	0800f1db 	.word	0x0800f1db

0800d15c <__ratio>:
 800d15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	4688      	mov	r8, r1
 800d162:	4669      	mov	r1, sp
 800d164:	4681      	mov	r9, r0
 800d166:	f7ff ff57 	bl	800d018 <__b2d>
 800d16a:	a901      	add	r1, sp, #4
 800d16c:	4640      	mov	r0, r8
 800d16e:	ec55 4b10 	vmov	r4, r5, d0
 800d172:	f7ff ff51 	bl	800d018 <__b2d>
 800d176:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d17a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d17e:	1ad2      	subs	r2, r2, r3
 800d180:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d184:	1a5b      	subs	r3, r3, r1
 800d186:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d18a:	ec57 6b10 	vmov	r6, r7, d0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	bfd6      	itet	le
 800d192:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d196:	462a      	movgt	r2, r5
 800d198:	463a      	movle	r2, r7
 800d19a:	46ab      	mov	fp, r5
 800d19c:	46a2      	mov	sl, r4
 800d19e:	bfce      	itee	gt
 800d1a0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d1a4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d1a8:	ee00 3a90 	vmovle	s1, r3
 800d1ac:	ec4b ab17 	vmov	d7, sl, fp
 800d1b0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d1b4:	b003      	add	sp, #12
 800d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1ba <__copybits>:
 800d1ba:	3901      	subs	r1, #1
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	1149      	asrs	r1, r1, #5
 800d1c0:	6914      	ldr	r4, [r2, #16]
 800d1c2:	3101      	adds	r1, #1
 800d1c4:	f102 0314 	add.w	r3, r2, #20
 800d1c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1d0:	1f05      	subs	r5, r0, #4
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	d30c      	bcc.n	800d1f0 <__copybits+0x36>
 800d1d6:	1aa3      	subs	r3, r4, r2
 800d1d8:	3b11      	subs	r3, #17
 800d1da:	f023 0303 	bic.w	r3, r3, #3
 800d1de:	3211      	adds	r2, #17
 800d1e0:	42a2      	cmp	r2, r4
 800d1e2:	bf88      	it	hi
 800d1e4:	2300      	movhi	r3, #0
 800d1e6:	4418      	add	r0, r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4288      	cmp	r0, r1
 800d1ec:	d305      	bcc.n	800d1fa <__copybits+0x40>
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1f8:	e7eb      	b.n	800d1d2 <__copybits+0x18>
 800d1fa:	f840 3b04 	str.w	r3, [r0], #4
 800d1fe:	e7f4      	b.n	800d1ea <__copybits+0x30>

0800d200 <__any_on>:
 800d200:	f100 0214 	add.w	r2, r0, #20
 800d204:	6900      	ldr	r0, [r0, #16]
 800d206:	114b      	asrs	r3, r1, #5
 800d208:	4298      	cmp	r0, r3
 800d20a:	b510      	push	{r4, lr}
 800d20c:	db11      	blt.n	800d232 <__any_on+0x32>
 800d20e:	dd0a      	ble.n	800d226 <__any_on+0x26>
 800d210:	f011 011f 	ands.w	r1, r1, #31
 800d214:	d007      	beq.n	800d226 <__any_on+0x26>
 800d216:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d21a:	fa24 f001 	lsr.w	r0, r4, r1
 800d21e:	fa00 f101 	lsl.w	r1, r0, r1
 800d222:	428c      	cmp	r4, r1
 800d224:	d10b      	bne.n	800d23e <__any_on+0x3e>
 800d226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d803      	bhi.n	800d236 <__any_on+0x36>
 800d22e:	2000      	movs	r0, #0
 800d230:	bd10      	pop	{r4, pc}
 800d232:	4603      	mov	r3, r0
 800d234:	e7f7      	b.n	800d226 <__any_on+0x26>
 800d236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d23a:	2900      	cmp	r1, #0
 800d23c:	d0f5      	beq.n	800d22a <__any_on+0x2a>
 800d23e:	2001      	movs	r0, #1
 800d240:	e7f6      	b.n	800d230 <__any_on+0x30>

0800d242 <sulp>:
 800d242:	b570      	push	{r4, r5, r6, lr}
 800d244:	4604      	mov	r4, r0
 800d246:	460d      	mov	r5, r1
 800d248:	4616      	mov	r6, r2
 800d24a:	ec45 4b10 	vmov	d0, r4, r5
 800d24e:	f7ff febd 	bl	800cfcc <__ulp>
 800d252:	b17e      	cbz	r6, 800d274 <sulp+0x32>
 800d254:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d258:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dd09      	ble.n	800d274 <sulp+0x32>
 800d260:	051b      	lsls	r3, r3, #20
 800d262:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d266:	2000      	movs	r0, #0
 800d268:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d26c:	ec41 0b17 	vmov	d7, r0, r1
 800d270:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d274:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d278 <_strtod_l>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	ed2d 8b0a 	vpush	{d8-d12}
 800d280:	b097      	sub	sp, #92	@ 0x5c
 800d282:	4688      	mov	r8, r1
 800d284:	920e      	str	r2, [sp, #56]	@ 0x38
 800d286:	2200      	movs	r2, #0
 800d288:	9212      	str	r2, [sp, #72]	@ 0x48
 800d28a:	9005      	str	r0, [sp, #20]
 800d28c:	f04f 0a00 	mov.w	sl, #0
 800d290:	f04f 0b00 	mov.w	fp, #0
 800d294:	460a      	mov	r2, r1
 800d296:	9211      	str	r2, [sp, #68]	@ 0x44
 800d298:	7811      	ldrb	r1, [r2, #0]
 800d29a:	292b      	cmp	r1, #43	@ 0x2b
 800d29c:	d04c      	beq.n	800d338 <_strtod_l+0xc0>
 800d29e:	d839      	bhi.n	800d314 <_strtod_l+0x9c>
 800d2a0:	290d      	cmp	r1, #13
 800d2a2:	d833      	bhi.n	800d30c <_strtod_l+0x94>
 800d2a4:	2908      	cmp	r1, #8
 800d2a6:	d833      	bhi.n	800d310 <_strtod_l+0x98>
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	d03c      	beq.n	800d326 <_strtod_l+0xae>
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	9208      	str	r2, [sp, #32]
 800d2b0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800d2b2:	782a      	ldrb	r2, [r5, #0]
 800d2b4:	2a30      	cmp	r2, #48	@ 0x30
 800d2b6:	f040 80b5 	bne.w	800d424 <_strtod_l+0x1ac>
 800d2ba:	786a      	ldrb	r2, [r5, #1]
 800d2bc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2c0:	2a58      	cmp	r2, #88	@ 0x58
 800d2c2:	d170      	bne.n	800d3a6 <_strtod_l+0x12e>
 800d2c4:	9302      	str	r3, [sp, #8]
 800d2c6:	9b08      	ldr	r3, [sp, #32]
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	ab12      	add	r3, sp, #72	@ 0x48
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	4a8b      	ldr	r2, [pc, #556]	@ (800d4fc <_strtod_l+0x284>)
 800d2d0:	9805      	ldr	r0, [sp, #20]
 800d2d2:	ab13      	add	r3, sp, #76	@ 0x4c
 800d2d4:	a911      	add	r1, sp, #68	@ 0x44
 800d2d6:	f001 fa11 	bl	800e6fc <__gethex>
 800d2da:	f010 060f 	ands.w	r6, r0, #15
 800d2de:	4604      	mov	r4, r0
 800d2e0:	d005      	beq.n	800d2ee <_strtod_l+0x76>
 800d2e2:	2e06      	cmp	r6, #6
 800d2e4:	d12a      	bne.n	800d33c <_strtod_l+0xc4>
 800d2e6:	3501      	adds	r5, #1
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	9511      	str	r5, [sp, #68]	@ 0x44
 800d2ec:	9308      	str	r3, [sp, #32]
 800d2ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f040 852f 	bne.w	800dd54 <_strtod_l+0xadc>
 800d2f6:	9b08      	ldr	r3, [sp, #32]
 800d2f8:	ec4b ab10 	vmov	d0, sl, fp
 800d2fc:	b1cb      	cbz	r3, 800d332 <_strtod_l+0xba>
 800d2fe:	eeb1 0b40 	vneg.f64	d0, d0
 800d302:	b017      	add	sp, #92	@ 0x5c
 800d304:	ecbd 8b0a 	vpop	{d8-d12}
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	2920      	cmp	r1, #32
 800d30e:	d1cd      	bne.n	800d2ac <_strtod_l+0x34>
 800d310:	3201      	adds	r2, #1
 800d312:	e7c0      	b.n	800d296 <_strtod_l+0x1e>
 800d314:	292d      	cmp	r1, #45	@ 0x2d
 800d316:	d1c9      	bne.n	800d2ac <_strtod_l+0x34>
 800d318:	2101      	movs	r1, #1
 800d31a:	9108      	str	r1, [sp, #32]
 800d31c:	1c51      	adds	r1, r2, #1
 800d31e:	9111      	str	r1, [sp, #68]	@ 0x44
 800d320:	7852      	ldrb	r2, [r2, #1]
 800d322:	2a00      	cmp	r2, #0
 800d324:	d1c4      	bne.n	800d2b0 <_strtod_l+0x38>
 800d326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d328:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f040 850f 	bne.w	800dd50 <_strtod_l+0xad8>
 800d332:	ec4b ab10 	vmov	d0, sl, fp
 800d336:	e7e4      	b.n	800d302 <_strtod_l+0x8a>
 800d338:	2100      	movs	r1, #0
 800d33a:	e7ee      	b.n	800d31a <_strtod_l+0xa2>
 800d33c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d33e:	b13a      	cbz	r2, 800d350 <_strtod_l+0xd8>
 800d340:	2135      	movs	r1, #53	@ 0x35
 800d342:	a814      	add	r0, sp, #80	@ 0x50
 800d344:	f7ff ff39 	bl	800d1ba <__copybits>
 800d348:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d34a:	9805      	ldr	r0, [sp, #20]
 800d34c:	f7ff fb0a 	bl	800c964 <_Bfree>
 800d350:	1e73      	subs	r3, r6, #1
 800d352:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d354:	2b04      	cmp	r3, #4
 800d356:	d806      	bhi.n	800d366 <_strtod_l+0xee>
 800d358:	e8df f003 	tbb	[pc, r3]
 800d35c:	201d0314 	.word	0x201d0314
 800d360:	14          	.byte	0x14
 800d361:	00          	.byte	0x00
 800d362:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800d366:	05e3      	lsls	r3, r4, #23
 800d368:	bf48      	it	mi
 800d36a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d36e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d372:	0d1b      	lsrs	r3, r3, #20
 800d374:	051b      	lsls	r3, r3, #20
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1b9      	bne.n	800d2ee <_strtod_l+0x76>
 800d37a:	f7fe fb91 	bl	800baa0 <__errno>
 800d37e:	2322      	movs	r3, #34	@ 0x22
 800d380:	6003      	str	r3, [r0, #0]
 800d382:	e7b4      	b.n	800d2ee <_strtod_l+0x76>
 800d384:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800d388:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d38c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d390:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d394:	e7e7      	b.n	800d366 <_strtod_l+0xee>
 800d396:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800d504 <_strtod_l+0x28c>
 800d39a:	e7e4      	b.n	800d366 <_strtod_l+0xee>
 800d39c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d3a0:	f04f 3aff 	mov.w	sl, #4294967295
 800d3a4:	e7df      	b.n	800d366 <_strtod_l+0xee>
 800d3a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	9211      	str	r2, [sp, #68]	@ 0x44
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	2b30      	cmp	r3, #48	@ 0x30
 800d3b0:	d0f9      	beq.n	800d3a6 <_strtod_l+0x12e>
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d09b      	beq.n	800d2ee <_strtod_l+0x76>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	2600      	movs	r6, #0
 800d3ba:	9307      	str	r3, [sp, #28]
 800d3bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3c0:	46b1      	mov	r9, r6
 800d3c2:	4635      	mov	r5, r6
 800d3c4:	220a      	movs	r2, #10
 800d3c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800d3c8:	7804      	ldrb	r4, [r0, #0]
 800d3ca:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800d3ce:	b2d9      	uxtb	r1, r3
 800d3d0:	2909      	cmp	r1, #9
 800d3d2:	d929      	bls.n	800d428 <_strtod_l+0x1b0>
 800d3d4:	494a      	ldr	r1, [pc, #296]	@ (800d500 <_strtod_l+0x288>)
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f7fe fb05 	bl	800b9e6 <strncmp>
 800d3dc:	b378      	cbz	r0, 800d43e <_strtod_l+0x1c6>
 800d3de:	2000      	movs	r0, #0
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	462b      	mov	r3, r5
 800d3e4:	4607      	mov	r7, r0
 800d3e6:	9006      	str	r0, [sp, #24]
 800d3e8:	2a65      	cmp	r2, #101	@ 0x65
 800d3ea:	d001      	beq.n	800d3f0 <_strtod_l+0x178>
 800d3ec:	2a45      	cmp	r2, #69	@ 0x45
 800d3ee:	d117      	bne.n	800d420 <_strtod_l+0x1a8>
 800d3f0:	b91b      	cbnz	r3, 800d3fa <_strtod_l+0x182>
 800d3f2:	9b07      	ldr	r3, [sp, #28]
 800d3f4:	4303      	orrs	r3, r0
 800d3f6:	d096      	beq.n	800d326 <_strtod_l+0xae>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800d3fe:	f108 0201 	add.w	r2, r8, #1
 800d402:	9211      	str	r2, [sp, #68]	@ 0x44
 800d404:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d408:	2a2b      	cmp	r2, #43	@ 0x2b
 800d40a:	d06b      	beq.n	800d4e4 <_strtod_l+0x26c>
 800d40c:	2a2d      	cmp	r2, #45	@ 0x2d
 800d40e:	d071      	beq.n	800d4f4 <_strtod_l+0x27c>
 800d410:	f04f 0e00 	mov.w	lr, #0
 800d414:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d418:	2c09      	cmp	r4, #9
 800d41a:	d979      	bls.n	800d510 <_strtod_l+0x298>
 800d41c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800d420:	2400      	movs	r4, #0
 800d422:	e094      	b.n	800d54e <_strtod_l+0x2d6>
 800d424:	2300      	movs	r3, #0
 800d426:	e7c7      	b.n	800d3b8 <_strtod_l+0x140>
 800d428:	2d08      	cmp	r5, #8
 800d42a:	f100 0001 	add.w	r0, r0, #1
 800d42e:	bfd4      	ite	le
 800d430:	fb02 3909 	mlale	r9, r2, r9, r3
 800d434:	fb02 3606 	mlagt	r6, r2, r6, r3
 800d438:	3501      	adds	r5, #1
 800d43a:	9011      	str	r0, [sp, #68]	@ 0x44
 800d43c:	e7c3      	b.n	800d3c6 <_strtod_l+0x14e>
 800d43e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d440:	1c5a      	adds	r2, r3, #1
 800d442:	9211      	str	r2, [sp, #68]	@ 0x44
 800d444:	785a      	ldrb	r2, [r3, #1]
 800d446:	b375      	cbz	r5, 800d4a6 <_strtod_l+0x22e>
 800d448:	4607      	mov	r7, r0
 800d44a:	462b      	mov	r3, r5
 800d44c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d450:	2909      	cmp	r1, #9
 800d452:	d913      	bls.n	800d47c <_strtod_l+0x204>
 800d454:	2101      	movs	r1, #1
 800d456:	9106      	str	r1, [sp, #24]
 800d458:	e7c6      	b.n	800d3e8 <_strtod_l+0x170>
 800d45a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	9211      	str	r2, [sp, #68]	@ 0x44
 800d460:	785a      	ldrb	r2, [r3, #1]
 800d462:	3001      	adds	r0, #1
 800d464:	2a30      	cmp	r2, #48	@ 0x30
 800d466:	d0f8      	beq.n	800d45a <_strtod_l+0x1e2>
 800d468:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	f200 8476 	bhi.w	800dd5e <_strtod_l+0xae6>
 800d472:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d474:	930a      	str	r3, [sp, #40]	@ 0x28
 800d476:	4607      	mov	r7, r0
 800d478:	2000      	movs	r0, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	3a30      	subs	r2, #48	@ 0x30
 800d47e:	f100 0101 	add.w	r1, r0, #1
 800d482:	d023      	beq.n	800d4cc <_strtod_l+0x254>
 800d484:	440f      	add	r7, r1
 800d486:	eb00 0c03 	add.w	ip, r0, r3
 800d48a:	4619      	mov	r1, r3
 800d48c:	240a      	movs	r4, #10
 800d48e:	4561      	cmp	r1, ip
 800d490:	d10b      	bne.n	800d4aa <_strtod_l+0x232>
 800d492:	1c5c      	adds	r4, r3, #1
 800d494:	4403      	add	r3, r0
 800d496:	2b08      	cmp	r3, #8
 800d498:	4404      	add	r4, r0
 800d49a:	dc11      	bgt.n	800d4c0 <_strtod_l+0x248>
 800d49c:	230a      	movs	r3, #10
 800d49e:	fb03 2909 	mla	r9, r3, r9, r2
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	e013      	b.n	800d4ce <_strtod_l+0x256>
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	e7dc      	b.n	800d464 <_strtod_l+0x1ec>
 800d4aa:	2908      	cmp	r1, #8
 800d4ac:	f101 0101 	add.w	r1, r1, #1
 800d4b0:	dc02      	bgt.n	800d4b8 <_strtod_l+0x240>
 800d4b2:	fb04 f909 	mul.w	r9, r4, r9
 800d4b6:	e7ea      	b.n	800d48e <_strtod_l+0x216>
 800d4b8:	2910      	cmp	r1, #16
 800d4ba:	bfd8      	it	le
 800d4bc:	4366      	mulle	r6, r4
 800d4be:	e7e6      	b.n	800d48e <_strtod_l+0x216>
 800d4c0:	2b0f      	cmp	r3, #15
 800d4c2:	dcee      	bgt.n	800d4a2 <_strtod_l+0x22a>
 800d4c4:	230a      	movs	r3, #10
 800d4c6:	fb03 2606 	mla	r6, r3, r6, r2
 800d4ca:	e7ea      	b.n	800d4a2 <_strtod_l+0x22a>
 800d4cc:	461c      	mov	r4, r3
 800d4ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4d4:	785a      	ldrb	r2, [r3, #1]
 800d4d6:	4608      	mov	r0, r1
 800d4d8:	4623      	mov	r3, r4
 800d4da:	e7b7      	b.n	800d44c <_strtod_l+0x1d4>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	2700      	movs	r7, #0
 800d4e0:	9306      	str	r3, [sp, #24]
 800d4e2:	e786      	b.n	800d3f2 <_strtod_l+0x17a>
 800d4e4:	f04f 0e00 	mov.w	lr, #0
 800d4e8:	f108 0202 	add.w	r2, r8, #2
 800d4ec:	9211      	str	r2, [sp, #68]	@ 0x44
 800d4ee:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d4f2:	e78f      	b.n	800d414 <_strtod_l+0x19c>
 800d4f4:	f04f 0e01 	mov.w	lr, #1
 800d4f8:	e7f6      	b.n	800d4e8 <_strtod_l+0x270>
 800d4fa:	bf00      	nop
 800d4fc:	0800f348 	.word	0x0800f348
 800d500:	0800f330 	.word	0x0800f330
 800d504:	7ff00000 	.word	0x7ff00000
 800d508:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d50a:	1c54      	adds	r4, r2, #1
 800d50c:	9411      	str	r4, [sp, #68]	@ 0x44
 800d50e:	7852      	ldrb	r2, [r2, #1]
 800d510:	2a30      	cmp	r2, #48	@ 0x30
 800d512:	d0f9      	beq.n	800d508 <_strtod_l+0x290>
 800d514:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800d518:	2c08      	cmp	r4, #8
 800d51a:	d881      	bhi.n	800d420 <_strtod_l+0x1a8>
 800d51c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800d520:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d522:	9209      	str	r2, [sp, #36]	@ 0x24
 800d524:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d526:	1c51      	adds	r1, r2, #1
 800d528:	9111      	str	r1, [sp, #68]	@ 0x44
 800d52a:	7852      	ldrb	r2, [r2, #1]
 800d52c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800d530:	2c09      	cmp	r4, #9
 800d532:	d938      	bls.n	800d5a6 <_strtod_l+0x32e>
 800d534:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800d536:	1b0c      	subs	r4, r1, r4
 800d538:	2c08      	cmp	r4, #8
 800d53a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800d53e:	dc02      	bgt.n	800d546 <_strtod_l+0x2ce>
 800d540:	4564      	cmp	r4, ip
 800d542:	bfa8      	it	ge
 800d544:	4664      	movge	r4, ip
 800d546:	f1be 0f00 	cmp.w	lr, #0
 800d54a:	d000      	beq.n	800d54e <_strtod_l+0x2d6>
 800d54c:	4264      	negs	r4, r4
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d14e      	bne.n	800d5f0 <_strtod_l+0x378>
 800d552:	9b07      	ldr	r3, [sp, #28]
 800d554:	4318      	orrs	r0, r3
 800d556:	f47f aeca 	bne.w	800d2ee <_strtod_l+0x76>
 800d55a:	9b06      	ldr	r3, [sp, #24]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f47f aee2 	bne.w	800d326 <_strtod_l+0xae>
 800d562:	2a69      	cmp	r2, #105	@ 0x69
 800d564:	d027      	beq.n	800d5b6 <_strtod_l+0x33e>
 800d566:	dc24      	bgt.n	800d5b2 <_strtod_l+0x33a>
 800d568:	2a49      	cmp	r2, #73	@ 0x49
 800d56a:	d024      	beq.n	800d5b6 <_strtod_l+0x33e>
 800d56c:	2a4e      	cmp	r2, #78	@ 0x4e
 800d56e:	f47f aeda 	bne.w	800d326 <_strtod_l+0xae>
 800d572:	4997      	ldr	r1, [pc, #604]	@ (800d7d0 <_strtod_l+0x558>)
 800d574:	a811      	add	r0, sp, #68	@ 0x44
 800d576:	f001 fae3 	bl	800eb40 <__match>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	f43f aed3 	beq.w	800d326 <_strtod_l+0xae>
 800d580:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b28      	cmp	r3, #40	@ 0x28
 800d586:	d12d      	bne.n	800d5e4 <_strtod_l+0x36c>
 800d588:	4992      	ldr	r1, [pc, #584]	@ (800d7d4 <_strtod_l+0x55c>)
 800d58a:	aa14      	add	r2, sp, #80	@ 0x50
 800d58c:	a811      	add	r0, sp, #68	@ 0x44
 800d58e:	f001 faeb 	bl	800eb68 <__hexnan>
 800d592:	2805      	cmp	r0, #5
 800d594:	d126      	bne.n	800d5e4 <_strtod_l+0x36c>
 800d596:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d598:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800d59c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d5a0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d5a4:	e6a3      	b.n	800d2ee <_strtod_l+0x76>
 800d5a6:	240a      	movs	r4, #10
 800d5a8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800d5ac:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800d5b0:	e7b8      	b.n	800d524 <_strtod_l+0x2ac>
 800d5b2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d5b4:	e7db      	b.n	800d56e <_strtod_l+0x2f6>
 800d5b6:	4988      	ldr	r1, [pc, #544]	@ (800d7d8 <_strtod_l+0x560>)
 800d5b8:	a811      	add	r0, sp, #68	@ 0x44
 800d5ba:	f001 fac1 	bl	800eb40 <__match>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	f43f aeb1 	beq.w	800d326 <_strtod_l+0xae>
 800d5c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5c6:	4985      	ldr	r1, [pc, #532]	@ (800d7dc <_strtod_l+0x564>)
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	a811      	add	r0, sp, #68	@ 0x44
 800d5cc:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5ce:	f001 fab7 	bl	800eb40 <__match>
 800d5d2:	b910      	cbnz	r0, 800d5da <_strtod_l+0x362>
 800d5d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5da:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800d7f0 <_strtod_l+0x578>
 800d5de:	f04f 0a00 	mov.w	sl, #0
 800d5e2:	e684      	b.n	800d2ee <_strtod_l+0x76>
 800d5e4:	487e      	ldr	r0, [pc, #504]	@ (800d7e0 <_strtod_l+0x568>)
 800d5e6:	f000 ffe7 	bl	800e5b8 <nan>
 800d5ea:	ec5b ab10 	vmov	sl, fp, d0
 800d5ee:	e67e      	b.n	800d2ee <_strtod_l+0x76>
 800d5f0:	ee07 9a90 	vmov	s15, r9
 800d5f4:	1be2      	subs	r2, r4, r7
 800d5f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	bf08      	it	eq
 800d5fe:	461d      	moveq	r5, r3
 800d600:	2b10      	cmp	r3, #16
 800d602:	9209      	str	r2, [sp, #36]	@ 0x24
 800d604:	461a      	mov	r2, r3
 800d606:	bfa8      	it	ge
 800d608:	2210      	movge	r2, #16
 800d60a:	2b09      	cmp	r3, #9
 800d60c:	ec5b ab17 	vmov	sl, fp, d7
 800d610:	dc15      	bgt.n	800d63e <_strtod_l+0x3c6>
 800d612:	1be1      	subs	r1, r4, r7
 800d614:	2900      	cmp	r1, #0
 800d616:	f43f ae6a 	beq.w	800d2ee <_strtod_l+0x76>
 800d61a:	eba4 0107 	sub.w	r1, r4, r7
 800d61e:	dd72      	ble.n	800d706 <_strtod_l+0x48e>
 800d620:	2916      	cmp	r1, #22
 800d622:	dc59      	bgt.n	800d6d8 <_strtod_l+0x460>
 800d624:	4b6f      	ldr	r3, [pc, #444]	@ (800d7e4 <_strtod_l+0x56c>)
 800d626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d62c:	ed93 7b00 	vldr	d7, [r3]
 800d630:	ec4b ab16 	vmov	d6, sl, fp
 800d634:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d638:	ec5b ab17 	vmov	sl, fp, d7
 800d63c:	e657      	b.n	800d2ee <_strtod_l+0x76>
 800d63e:	4969      	ldr	r1, [pc, #420]	@ (800d7e4 <_strtod_l+0x56c>)
 800d640:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d644:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800d648:	ee06 6a90 	vmov	s13, r6
 800d64c:	2b0f      	cmp	r3, #15
 800d64e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800d652:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d656:	ec5b ab16 	vmov	sl, fp, d6
 800d65a:	ddda      	ble.n	800d612 <_strtod_l+0x39a>
 800d65c:	1a9a      	subs	r2, r3, r2
 800d65e:	1be1      	subs	r1, r4, r7
 800d660:	440a      	add	r2, r1
 800d662:	2a00      	cmp	r2, #0
 800d664:	f340 8094 	ble.w	800d790 <_strtod_l+0x518>
 800d668:	f012 000f 	ands.w	r0, r2, #15
 800d66c:	d00a      	beq.n	800d684 <_strtod_l+0x40c>
 800d66e:	495d      	ldr	r1, [pc, #372]	@ (800d7e4 <_strtod_l+0x56c>)
 800d670:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d674:	ed91 7b00 	vldr	d7, [r1]
 800d678:	ec4b ab16 	vmov	d6, sl, fp
 800d67c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d680:	ec5b ab17 	vmov	sl, fp, d7
 800d684:	f032 020f 	bics.w	r2, r2, #15
 800d688:	d073      	beq.n	800d772 <_strtod_l+0x4fa>
 800d68a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800d68e:	dd47      	ble.n	800d720 <_strtod_l+0x4a8>
 800d690:	2400      	movs	r4, #0
 800d692:	4625      	mov	r5, r4
 800d694:	9407      	str	r4, [sp, #28]
 800d696:	4626      	mov	r6, r4
 800d698:	9a05      	ldr	r2, [sp, #20]
 800d69a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d7f0 <_strtod_l+0x578>
 800d69e:	2322      	movs	r3, #34	@ 0x22
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	f04f 0a00 	mov.w	sl, #0
 800d6a6:	9b07      	ldr	r3, [sp, #28]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f43f ae20 	beq.w	800d2ee <_strtod_l+0x76>
 800d6ae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d6b0:	9805      	ldr	r0, [sp, #20]
 800d6b2:	f7ff f957 	bl	800c964 <_Bfree>
 800d6b6:	9805      	ldr	r0, [sp, #20]
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	f7ff f953 	bl	800c964 <_Bfree>
 800d6be:	9805      	ldr	r0, [sp, #20]
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7ff f94f 	bl	800c964 <_Bfree>
 800d6c6:	9907      	ldr	r1, [sp, #28]
 800d6c8:	9805      	ldr	r0, [sp, #20]
 800d6ca:	f7ff f94b 	bl	800c964 <_Bfree>
 800d6ce:	9805      	ldr	r0, [sp, #20]
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	f7ff f947 	bl	800c964 <_Bfree>
 800d6d6:	e60a      	b.n	800d2ee <_strtod_l+0x76>
 800d6d8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800d6dc:	1be0      	subs	r0, r4, r7
 800d6de:	4281      	cmp	r1, r0
 800d6e0:	dbbc      	blt.n	800d65c <_strtod_l+0x3e4>
 800d6e2:	4a40      	ldr	r2, [pc, #256]	@ (800d7e4 <_strtod_l+0x56c>)
 800d6e4:	f1c3 030f 	rsb	r3, r3, #15
 800d6e8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d6ec:	ed91 7b00 	vldr	d7, [r1]
 800d6f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6f2:	ec4b ab16 	vmov	d6, sl, fp
 800d6f6:	1acb      	subs	r3, r1, r3
 800d6f8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d6fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d700:	ed92 6b00 	vldr	d6, [r2]
 800d704:	e796      	b.n	800d634 <_strtod_l+0x3bc>
 800d706:	3116      	adds	r1, #22
 800d708:	dba8      	blt.n	800d65c <_strtod_l+0x3e4>
 800d70a:	4b36      	ldr	r3, [pc, #216]	@ (800d7e4 <_strtod_l+0x56c>)
 800d70c:	1b3c      	subs	r4, r7, r4
 800d70e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d712:	ed94 7b00 	vldr	d7, [r4]
 800d716:	ec4b ab16 	vmov	d6, sl, fp
 800d71a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d71e:	e78b      	b.n	800d638 <_strtod_l+0x3c0>
 800d720:	2000      	movs	r0, #0
 800d722:	ec4b ab17 	vmov	d7, sl, fp
 800d726:	4e30      	ldr	r6, [pc, #192]	@ (800d7e8 <_strtod_l+0x570>)
 800d728:	1112      	asrs	r2, r2, #4
 800d72a:	4601      	mov	r1, r0
 800d72c:	2a01      	cmp	r2, #1
 800d72e:	dc23      	bgt.n	800d778 <_strtod_l+0x500>
 800d730:	b108      	cbz	r0, 800d736 <_strtod_l+0x4be>
 800d732:	ec5b ab17 	vmov	sl, fp, d7
 800d736:	4a2c      	ldr	r2, [pc, #176]	@ (800d7e8 <_strtod_l+0x570>)
 800d738:	482c      	ldr	r0, [pc, #176]	@ (800d7ec <_strtod_l+0x574>)
 800d73a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d73e:	ed92 7b00 	vldr	d7, [r2]
 800d742:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d746:	ec4b ab16 	vmov	d6, sl, fp
 800d74a:	4a29      	ldr	r2, [pc, #164]	@ (800d7f0 <_strtod_l+0x578>)
 800d74c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d750:	ee17 1a90 	vmov	r1, s15
 800d754:	400a      	ands	r2, r1
 800d756:	4282      	cmp	r2, r0
 800d758:	ec5b ab17 	vmov	sl, fp, d7
 800d75c:	d898      	bhi.n	800d690 <_strtod_l+0x418>
 800d75e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800d762:	4282      	cmp	r2, r0
 800d764:	bf86      	itte	hi
 800d766:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800d7f4 <_strtod_l+0x57c>
 800d76a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d76e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800d772:	2200      	movs	r2, #0
 800d774:	9206      	str	r2, [sp, #24]
 800d776:	e076      	b.n	800d866 <_strtod_l+0x5ee>
 800d778:	f012 0f01 	tst.w	r2, #1
 800d77c:	d004      	beq.n	800d788 <_strtod_l+0x510>
 800d77e:	ed96 6b00 	vldr	d6, [r6]
 800d782:	2001      	movs	r0, #1
 800d784:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d788:	3101      	adds	r1, #1
 800d78a:	1052      	asrs	r2, r2, #1
 800d78c:	3608      	adds	r6, #8
 800d78e:	e7cd      	b.n	800d72c <_strtod_l+0x4b4>
 800d790:	d0ef      	beq.n	800d772 <_strtod_l+0x4fa>
 800d792:	4252      	negs	r2, r2
 800d794:	f012 000f 	ands.w	r0, r2, #15
 800d798:	d00a      	beq.n	800d7b0 <_strtod_l+0x538>
 800d79a:	4912      	ldr	r1, [pc, #72]	@ (800d7e4 <_strtod_l+0x56c>)
 800d79c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d7a0:	ed91 7b00 	vldr	d7, [r1]
 800d7a4:	ec4b ab16 	vmov	d6, sl, fp
 800d7a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d7ac:	ec5b ab17 	vmov	sl, fp, d7
 800d7b0:	1112      	asrs	r2, r2, #4
 800d7b2:	d0de      	beq.n	800d772 <_strtod_l+0x4fa>
 800d7b4:	2a1f      	cmp	r2, #31
 800d7b6:	dd1f      	ble.n	800d7f8 <_strtod_l+0x580>
 800d7b8:	2400      	movs	r4, #0
 800d7ba:	4625      	mov	r5, r4
 800d7bc:	9407      	str	r4, [sp, #28]
 800d7be:	4626      	mov	r6, r4
 800d7c0:	9a05      	ldr	r2, [sp, #20]
 800d7c2:	2322      	movs	r3, #34	@ 0x22
 800d7c4:	f04f 0a00 	mov.w	sl, #0
 800d7c8:	f04f 0b00 	mov.w	fp, #0
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	e76a      	b.n	800d6a6 <_strtod_l+0x42e>
 800d7d0:	0800f122 	.word	0x0800f122
 800d7d4:	0800f334 	.word	0x0800f334
 800d7d8:	0800f11a 	.word	0x0800f11a
 800d7dc:	0800f151 	.word	0x0800f151
 800d7e0:	0800f3dc 	.word	0x0800f3dc
 800d7e4:	0800f268 	.word	0x0800f268
 800d7e8:	0800f240 	.word	0x0800f240
 800d7ec:	7ca00000 	.word	0x7ca00000
 800d7f0:	7ff00000 	.word	0x7ff00000
 800d7f4:	7fefffff 	.word	0x7fefffff
 800d7f8:	f012 0110 	ands.w	r1, r2, #16
 800d7fc:	bf18      	it	ne
 800d7fe:	216a      	movne	r1, #106	@ 0x6a
 800d800:	9106      	str	r1, [sp, #24]
 800d802:	ec4b ab17 	vmov	d7, sl, fp
 800d806:	49b0      	ldr	r1, [pc, #704]	@ (800dac8 <_strtod_l+0x850>)
 800d808:	2000      	movs	r0, #0
 800d80a:	07d6      	lsls	r6, r2, #31
 800d80c:	d504      	bpl.n	800d818 <_strtod_l+0x5a0>
 800d80e:	ed91 6b00 	vldr	d6, [r1]
 800d812:	2001      	movs	r0, #1
 800d814:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d818:	1052      	asrs	r2, r2, #1
 800d81a:	f101 0108 	add.w	r1, r1, #8
 800d81e:	d1f4      	bne.n	800d80a <_strtod_l+0x592>
 800d820:	b108      	cbz	r0, 800d826 <_strtod_l+0x5ae>
 800d822:	ec5b ab17 	vmov	sl, fp, d7
 800d826:	9a06      	ldr	r2, [sp, #24]
 800d828:	b1b2      	cbz	r2, 800d858 <_strtod_l+0x5e0>
 800d82a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800d82e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800d832:	2a00      	cmp	r2, #0
 800d834:	4658      	mov	r0, fp
 800d836:	dd0f      	ble.n	800d858 <_strtod_l+0x5e0>
 800d838:	2a1f      	cmp	r2, #31
 800d83a:	dd55      	ble.n	800d8e8 <_strtod_l+0x670>
 800d83c:	2a34      	cmp	r2, #52	@ 0x34
 800d83e:	bfde      	ittt	le
 800d840:	f04f 32ff 	movle.w	r2, #4294967295
 800d844:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800d848:	408a      	lslle	r2, r1
 800d84a:	f04f 0a00 	mov.w	sl, #0
 800d84e:	bfcc      	ite	gt
 800d850:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d854:	ea02 0b00 	andle.w	fp, r2, r0
 800d858:	ec4b ab17 	vmov	d7, sl, fp
 800d85c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d864:	d0a8      	beq.n	800d7b8 <_strtod_l+0x540>
 800d866:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d868:	9805      	ldr	r0, [sp, #20]
 800d86a:	f8cd 9000 	str.w	r9, [sp]
 800d86e:	462a      	mov	r2, r5
 800d870:	f7ff f8e0 	bl	800ca34 <__s2b>
 800d874:	9007      	str	r0, [sp, #28]
 800d876:	2800      	cmp	r0, #0
 800d878:	f43f af0a 	beq.w	800d690 <_strtod_l+0x418>
 800d87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d87e:	1b3f      	subs	r7, r7, r4
 800d880:	2b00      	cmp	r3, #0
 800d882:	bfb4      	ite	lt
 800d884:	463b      	movlt	r3, r7
 800d886:	2300      	movge	r3, #0
 800d888:	930a      	str	r3, [sp, #40]	@ 0x28
 800d88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d88c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800dab8 <_strtod_l+0x840>
 800d890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d894:	2400      	movs	r4, #0
 800d896:	930d      	str	r3, [sp, #52]	@ 0x34
 800d898:	4625      	mov	r5, r4
 800d89a:	9b07      	ldr	r3, [sp, #28]
 800d89c:	9805      	ldr	r0, [sp, #20]
 800d89e:	6859      	ldr	r1, [r3, #4]
 800d8a0:	f7ff f820 	bl	800c8e4 <_Balloc>
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	f43f aef6 	beq.w	800d698 <_strtod_l+0x420>
 800d8ac:	9b07      	ldr	r3, [sp, #28]
 800d8ae:	691a      	ldr	r2, [r3, #16]
 800d8b0:	ec4b ab19 	vmov	d9, sl, fp
 800d8b4:	3202      	adds	r2, #2
 800d8b6:	f103 010c 	add.w	r1, r3, #12
 800d8ba:	0092      	lsls	r2, r2, #2
 800d8bc:	300c      	adds	r0, #12
 800d8be:	f7fe f91c 	bl	800bafa <memcpy>
 800d8c2:	eeb0 0b49 	vmov.f64	d0, d9
 800d8c6:	9805      	ldr	r0, [sp, #20]
 800d8c8:	aa14      	add	r2, sp, #80	@ 0x50
 800d8ca:	a913      	add	r1, sp, #76	@ 0x4c
 800d8cc:	f7ff fbee 	bl	800d0ac <__d2b>
 800d8d0:	9012      	str	r0, [sp, #72]	@ 0x48
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	f43f aee0 	beq.w	800d698 <_strtod_l+0x420>
 800d8d8:	9805      	ldr	r0, [sp, #20]
 800d8da:	2101      	movs	r1, #1
 800d8dc:	f7ff f940 	bl	800cb60 <__i2b>
 800d8e0:	4605      	mov	r5, r0
 800d8e2:	b940      	cbnz	r0, 800d8f6 <_strtod_l+0x67e>
 800d8e4:	2500      	movs	r5, #0
 800d8e6:	e6d7      	b.n	800d698 <_strtod_l+0x420>
 800d8e8:	f04f 31ff 	mov.w	r1, #4294967295
 800d8ec:	fa01 f202 	lsl.w	r2, r1, r2
 800d8f0:	ea02 0a0a 	and.w	sl, r2, sl
 800d8f4:	e7b0      	b.n	800d858 <_strtod_l+0x5e0>
 800d8f6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800d8f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8fa:	2f00      	cmp	r7, #0
 800d8fc:	bfab      	itete	ge
 800d8fe:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800d900:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800d902:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800d906:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800d90a:	bfac      	ite	ge
 800d90c:	eb07 0903 	addge.w	r9, r7, r3
 800d910:	eba3 0807 	sublt.w	r8, r3, r7
 800d914:	9b06      	ldr	r3, [sp, #24]
 800d916:	1aff      	subs	r7, r7, r3
 800d918:	4417      	add	r7, r2
 800d91a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800d91e:	4a6b      	ldr	r2, [pc, #428]	@ (800dacc <_strtod_l+0x854>)
 800d920:	3f01      	subs	r7, #1
 800d922:	4297      	cmp	r7, r2
 800d924:	da51      	bge.n	800d9ca <_strtod_l+0x752>
 800d926:	1bd1      	subs	r1, r2, r7
 800d928:	291f      	cmp	r1, #31
 800d92a:	eba3 0301 	sub.w	r3, r3, r1
 800d92e:	f04f 0201 	mov.w	r2, #1
 800d932:	dc3e      	bgt.n	800d9b2 <_strtod_l+0x73a>
 800d934:	408a      	lsls	r2, r1
 800d936:	920c      	str	r2, [sp, #48]	@ 0x30
 800d938:	2200      	movs	r2, #0
 800d93a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d93c:	eb09 0703 	add.w	r7, r9, r3
 800d940:	4498      	add	r8, r3
 800d942:	9b06      	ldr	r3, [sp, #24]
 800d944:	45b9      	cmp	r9, r7
 800d946:	4498      	add	r8, r3
 800d948:	464b      	mov	r3, r9
 800d94a:	bfa8      	it	ge
 800d94c:	463b      	movge	r3, r7
 800d94e:	4543      	cmp	r3, r8
 800d950:	bfa8      	it	ge
 800d952:	4643      	movge	r3, r8
 800d954:	2b00      	cmp	r3, #0
 800d956:	bfc2      	ittt	gt
 800d958:	1aff      	subgt	r7, r7, r3
 800d95a:	eba8 0803 	subgt.w	r8, r8, r3
 800d95e:	eba9 0903 	subgt.w	r9, r9, r3
 800d962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d964:	2b00      	cmp	r3, #0
 800d966:	dd16      	ble.n	800d996 <_strtod_l+0x71e>
 800d968:	4629      	mov	r1, r5
 800d96a:	9805      	ldr	r0, [sp, #20]
 800d96c:	461a      	mov	r2, r3
 800d96e:	f7ff f9b7 	bl	800cce0 <__pow5mult>
 800d972:	4605      	mov	r5, r0
 800d974:	2800      	cmp	r0, #0
 800d976:	d0b5      	beq.n	800d8e4 <_strtod_l+0x66c>
 800d978:	4601      	mov	r1, r0
 800d97a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d97c:	9805      	ldr	r0, [sp, #20]
 800d97e:	f7ff f905 	bl	800cb8c <__multiply>
 800d982:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d984:	2800      	cmp	r0, #0
 800d986:	f43f ae87 	beq.w	800d698 <_strtod_l+0x420>
 800d98a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d98c:	9805      	ldr	r0, [sp, #20]
 800d98e:	f7fe ffe9 	bl	800c964 <_Bfree>
 800d992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d994:	9312      	str	r3, [sp, #72]	@ 0x48
 800d996:	2f00      	cmp	r7, #0
 800d998:	dc1b      	bgt.n	800d9d2 <_strtod_l+0x75a>
 800d99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd21      	ble.n	800d9e4 <_strtod_l+0x76c>
 800d9a0:	4631      	mov	r1, r6
 800d9a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9a4:	9805      	ldr	r0, [sp, #20]
 800d9a6:	f7ff f99b 	bl	800cce0 <__pow5mult>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	b9d0      	cbnz	r0, 800d9e4 <_strtod_l+0x76c>
 800d9ae:	2600      	movs	r6, #0
 800d9b0:	e672      	b.n	800d698 <_strtod_l+0x420>
 800d9b2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800d9b6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800d9ba:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800d9be:	37e2      	adds	r7, #226	@ 0xe2
 800d9c0:	fa02 f107 	lsl.w	r1, r2, r7
 800d9c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d9c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d9c8:	e7b8      	b.n	800d93c <_strtod_l+0x6c4>
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	e7f9      	b.n	800d9c6 <_strtod_l+0x74e>
 800d9d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d9d4:	9805      	ldr	r0, [sp, #20]
 800d9d6:	463a      	mov	r2, r7
 800d9d8:	f7ff f9dc 	bl	800cd94 <__lshift>
 800d9dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d1db      	bne.n	800d99a <_strtod_l+0x722>
 800d9e2:	e659      	b.n	800d698 <_strtod_l+0x420>
 800d9e4:	f1b8 0f00 	cmp.w	r8, #0
 800d9e8:	dd07      	ble.n	800d9fa <_strtod_l+0x782>
 800d9ea:	4631      	mov	r1, r6
 800d9ec:	9805      	ldr	r0, [sp, #20]
 800d9ee:	4642      	mov	r2, r8
 800d9f0:	f7ff f9d0 	bl	800cd94 <__lshift>
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d0d9      	beq.n	800d9ae <_strtod_l+0x736>
 800d9fa:	f1b9 0f00 	cmp.w	r9, #0
 800d9fe:	dd08      	ble.n	800da12 <_strtod_l+0x79a>
 800da00:	4629      	mov	r1, r5
 800da02:	9805      	ldr	r0, [sp, #20]
 800da04:	464a      	mov	r2, r9
 800da06:	f7ff f9c5 	bl	800cd94 <__lshift>
 800da0a:	4605      	mov	r5, r0
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f43f ae43 	beq.w	800d698 <_strtod_l+0x420>
 800da12:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800da14:	9805      	ldr	r0, [sp, #20]
 800da16:	4632      	mov	r2, r6
 800da18:	f7ff fa44 	bl	800cea4 <__mdiff>
 800da1c:	4604      	mov	r4, r0
 800da1e:	2800      	cmp	r0, #0
 800da20:	f43f ae3a 	beq.w	800d698 <_strtod_l+0x420>
 800da24:	2300      	movs	r3, #0
 800da26:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800da2a:	60c3      	str	r3, [r0, #12]
 800da2c:	4629      	mov	r1, r5
 800da2e:	f7ff fa1d 	bl	800ce6c <__mcmp>
 800da32:	2800      	cmp	r0, #0
 800da34:	da4e      	bge.n	800dad4 <_strtod_l+0x85c>
 800da36:	ea58 080a 	orrs.w	r8, r8, sl
 800da3a:	d174      	bne.n	800db26 <_strtod_l+0x8ae>
 800da3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da40:	2b00      	cmp	r3, #0
 800da42:	d170      	bne.n	800db26 <_strtod_l+0x8ae>
 800da44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da48:	0d1b      	lsrs	r3, r3, #20
 800da4a:	051b      	lsls	r3, r3, #20
 800da4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da50:	d969      	bls.n	800db26 <_strtod_l+0x8ae>
 800da52:	6963      	ldr	r3, [r4, #20]
 800da54:	b913      	cbnz	r3, 800da5c <_strtod_l+0x7e4>
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	dd64      	ble.n	800db26 <_strtod_l+0x8ae>
 800da5c:	4621      	mov	r1, r4
 800da5e:	2201      	movs	r2, #1
 800da60:	9805      	ldr	r0, [sp, #20]
 800da62:	f7ff f997 	bl	800cd94 <__lshift>
 800da66:	4629      	mov	r1, r5
 800da68:	4604      	mov	r4, r0
 800da6a:	f7ff f9ff 	bl	800ce6c <__mcmp>
 800da6e:	2800      	cmp	r0, #0
 800da70:	dd59      	ble.n	800db26 <_strtod_l+0x8ae>
 800da72:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da76:	9a06      	ldr	r2, [sp, #24]
 800da78:	0d1b      	lsrs	r3, r3, #20
 800da7a:	051b      	lsls	r3, r3, #20
 800da7c:	2a00      	cmp	r2, #0
 800da7e:	d070      	beq.n	800db62 <_strtod_l+0x8ea>
 800da80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da84:	d86d      	bhi.n	800db62 <_strtod_l+0x8ea>
 800da86:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800da8a:	f67f ae99 	bls.w	800d7c0 <_strtod_l+0x548>
 800da8e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800dac0 <_strtod_l+0x848>
 800da92:	ec4b ab16 	vmov	d6, sl, fp
 800da96:	4b0e      	ldr	r3, [pc, #56]	@ (800dad0 <_strtod_l+0x858>)
 800da98:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da9c:	ee17 2a90 	vmov	r2, s15
 800daa0:	4013      	ands	r3, r2
 800daa2:	ec5b ab17 	vmov	sl, fp, d7
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f47f ae01 	bne.w	800d6ae <_strtod_l+0x436>
 800daac:	9a05      	ldr	r2, [sp, #20]
 800daae:	2322      	movs	r3, #34	@ 0x22
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	e5fc      	b.n	800d6ae <_strtod_l+0x436>
 800dab4:	f3af 8000 	nop.w
 800dab8:	ffc00000 	.word	0xffc00000
 800dabc:	41dfffff 	.word	0x41dfffff
 800dac0:	00000000 	.word	0x00000000
 800dac4:	39500000 	.word	0x39500000
 800dac8:	0800f360 	.word	0x0800f360
 800dacc:	fffffc02 	.word	0xfffffc02
 800dad0:	7ff00000 	.word	0x7ff00000
 800dad4:	46d9      	mov	r9, fp
 800dad6:	d15d      	bne.n	800db94 <_strtod_l+0x91c>
 800dad8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dadc:	f1b8 0f00 	cmp.w	r8, #0
 800dae0:	d02a      	beq.n	800db38 <_strtod_l+0x8c0>
 800dae2:	4aab      	ldr	r2, [pc, #684]	@ (800dd90 <_strtod_l+0xb18>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d12a      	bne.n	800db3e <_strtod_l+0x8c6>
 800dae8:	9b06      	ldr	r3, [sp, #24]
 800daea:	4652      	mov	r2, sl
 800daec:	b1fb      	cbz	r3, 800db2e <_strtod_l+0x8b6>
 800daee:	4ba9      	ldr	r3, [pc, #676]	@ (800dd94 <_strtod_l+0xb1c>)
 800daf0:	ea0b 0303 	and.w	r3, fp, r3
 800daf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800daf8:	f04f 31ff 	mov.w	r1, #4294967295
 800dafc:	d81a      	bhi.n	800db34 <_strtod_l+0x8bc>
 800dafe:	0d1b      	lsrs	r3, r3, #20
 800db00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800db04:	fa01 f303 	lsl.w	r3, r1, r3
 800db08:	429a      	cmp	r2, r3
 800db0a:	d118      	bne.n	800db3e <_strtod_l+0x8c6>
 800db0c:	4ba2      	ldr	r3, [pc, #648]	@ (800dd98 <_strtod_l+0xb20>)
 800db0e:	4599      	cmp	r9, r3
 800db10:	d102      	bne.n	800db18 <_strtod_l+0x8a0>
 800db12:	3201      	adds	r2, #1
 800db14:	f43f adc0 	beq.w	800d698 <_strtod_l+0x420>
 800db18:	4b9e      	ldr	r3, [pc, #632]	@ (800dd94 <_strtod_l+0xb1c>)
 800db1a:	ea09 0303 	and.w	r3, r9, r3
 800db1e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800db22:	f04f 0a00 	mov.w	sl, #0
 800db26:	9b06      	ldr	r3, [sp, #24]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1b0      	bne.n	800da8e <_strtod_l+0x816>
 800db2c:	e5bf      	b.n	800d6ae <_strtod_l+0x436>
 800db2e:	f04f 33ff 	mov.w	r3, #4294967295
 800db32:	e7e9      	b.n	800db08 <_strtod_l+0x890>
 800db34:	460b      	mov	r3, r1
 800db36:	e7e7      	b.n	800db08 <_strtod_l+0x890>
 800db38:	ea53 030a 	orrs.w	r3, r3, sl
 800db3c:	d099      	beq.n	800da72 <_strtod_l+0x7fa>
 800db3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db40:	b1c3      	cbz	r3, 800db74 <_strtod_l+0x8fc>
 800db42:	ea13 0f09 	tst.w	r3, r9
 800db46:	d0ee      	beq.n	800db26 <_strtod_l+0x8ae>
 800db48:	9a06      	ldr	r2, [sp, #24]
 800db4a:	4650      	mov	r0, sl
 800db4c:	4659      	mov	r1, fp
 800db4e:	f1b8 0f00 	cmp.w	r8, #0
 800db52:	d013      	beq.n	800db7c <_strtod_l+0x904>
 800db54:	f7ff fb75 	bl	800d242 <sulp>
 800db58:	ee39 7b00 	vadd.f64	d7, d9, d0
 800db5c:	ec5b ab17 	vmov	sl, fp, d7
 800db60:	e7e1      	b.n	800db26 <_strtod_l+0x8ae>
 800db62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800db66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db6e:	f04f 3aff 	mov.w	sl, #4294967295
 800db72:	e7d8      	b.n	800db26 <_strtod_l+0x8ae>
 800db74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db76:	ea13 0f0a 	tst.w	r3, sl
 800db7a:	e7e4      	b.n	800db46 <_strtod_l+0x8ce>
 800db7c:	f7ff fb61 	bl	800d242 <sulp>
 800db80:	ee39 0b40 	vsub.f64	d0, d9, d0
 800db84:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800db88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8c:	ec5b ab10 	vmov	sl, fp, d0
 800db90:	d1c9      	bne.n	800db26 <_strtod_l+0x8ae>
 800db92:	e615      	b.n	800d7c0 <_strtod_l+0x548>
 800db94:	4629      	mov	r1, r5
 800db96:	4620      	mov	r0, r4
 800db98:	f7ff fae0 	bl	800d15c <__ratio>
 800db9c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800dba0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800dba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba8:	d85d      	bhi.n	800dc66 <_strtod_l+0x9ee>
 800dbaa:	f1b8 0f00 	cmp.w	r8, #0
 800dbae:	d164      	bne.n	800dc7a <_strtod_l+0xa02>
 800dbb0:	f1ba 0f00 	cmp.w	sl, #0
 800dbb4:	d14b      	bne.n	800dc4e <_strtod_l+0x9d6>
 800dbb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d160      	bne.n	800dc84 <_strtod_l+0xa0c>
 800dbc2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800dbc6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800dbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbce:	d401      	bmi.n	800dbd4 <_strtod_l+0x95c>
 800dbd0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dbd4:	eeb1 ab48 	vneg.f64	d10, d8
 800dbd8:	486e      	ldr	r0, [pc, #440]	@ (800dd94 <_strtod_l+0xb1c>)
 800dbda:	4970      	ldr	r1, [pc, #448]	@ (800dd9c <_strtod_l+0xb24>)
 800dbdc:	ea09 0700 	and.w	r7, r9, r0
 800dbe0:	428f      	cmp	r7, r1
 800dbe2:	ec53 2b1a 	vmov	r2, r3, d10
 800dbe6:	d17d      	bne.n	800dce4 <_strtod_l+0xa6c>
 800dbe8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800dbec:	ec4b ab1c 	vmov	d12, sl, fp
 800dbf0:	eeb0 0b4c 	vmov.f64	d0, d12
 800dbf4:	f7ff f9ea 	bl	800cfcc <__ulp>
 800dbf8:	4866      	ldr	r0, [pc, #408]	@ (800dd94 <_strtod_l+0xb1c>)
 800dbfa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800dbfe:	ee1c 3a90 	vmov	r3, s25
 800dc02:	4a67      	ldr	r2, [pc, #412]	@ (800dda0 <_strtod_l+0xb28>)
 800dc04:	ea03 0100 	and.w	r1, r3, r0
 800dc08:	4291      	cmp	r1, r2
 800dc0a:	ec5b ab1c 	vmov	sl, fp, d12
 800dc0e:	d93c      	bls.n	800dc8a <_strtod_l+0xa12>
 800dc10:	ee19 2a90 	vmov	r2, s19
 800dc14:	4b60      	ldr	r3, [pc, #384]	@ (800dd98 <_strtod_l+0xb20>)
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d104      	bne.n	800dc24 <_strtod_l+0x9ac>
 800dc1a:	ee19 3a10 	vmov	r3, s18
 800dc1e:	3301      	adds	r3, #1
 800dc20:	f43f ad3a 	beq.w	800d698 <_strtod_l+0x420>
 800dc24:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800dd98 <_strtod_l+0xb20>
 800dc28:	f04f 3aff 	mov.w	sl, #4294967295
 800dc2c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dc2e:	9805      	ldr	r0, [sp, #20]
 800dc30:	f7fe fe98 	bl	800c964 <_Bfree>
 800dc34:	9805      	ldr	r0, [sp, #20]
 800dc36:	4631      	mov	r1, r6
 800dc38:	f7fe fe94 	bl	800c964 <_Bfree>
 800dc3c:	9805      	ldr	r0, [sp, #20]
 800dc3e:	4629      	mov	r1, r5
 800dc40:	f7fe fe90 	bl	800c964 <_Bfree>
 800dc44:	9805      	ldr	r0, [sp, #20]
 800dc46:	4621      	mov	r1, r4
 800dc48:	f7fe fe8c 	bl	800c964 <_Bfree>
 800dc4c:	e625      	b.n	800d89a <_strtod_l+0x622>
 800dc4e:	f1ba 0f01 	cmp.w	sl, #1
 800dc52:	d103      	bne.n	800dc5c <_strtod_l+0x9e4>
 800dc54:	f1bb 0f00 	cmp.w	fp, #0
 800dc58:	f43f adb2 	beq.w	800d7c0 <_strtod_l+0x548>
 800dc5c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dc60:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800dc64:	e7b8      	b.n	800dbd8 <_strtod_l+0x960>
 800dc66:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800dc6a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800dc6e:	f1b8 0f00 	cmp.w	r8, #0
 800dc72:	d0af      	beq.n	800dbd4 <_strtod_l+0x95c>
 800dc74:	eeb0 ab48 	vmov.f64	d10, d8
 800dc78:	e7ae      	b.n	800dbd8 <_strtod_l+0x960>
 800dc7a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800dc7e:	eeb0 8b4a 	vmov.f64	d8, d10
 800dc82:	e7a9      	b.n	800dbd8 <_strtod_l+0x960>
 800dc84:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800dc88:	e7a6      	b.n	800dbd8 <_strtod_l+0x960>
 800dc8a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dc8e:	9b06      	ldr	r3, [sp, #24]
 800dc90:	46d9      	mov	r9, fp
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1ca      	bne.n	800dc2c <_strtod_l+0x9b4>
 800dc96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc9a:	0d1b      	lsrs	r3, r3, #20
 800dc9c:	051b      	lsls	r3, r3, #20
 800dc9e:	429f      	cmp	r7, r3
 800dca0:	d1c4      	bne.n	800dc2c <_strtod_l+0x9b4>
 800dca2:	ec51 0b18 	vmov	r0, r1, d8
 800dca6:	f7f2 fd47 	bl	8000738 <__aeabi_d2lz>
 800dcaa:	f7f2 fcff 	bl	80006ac <__aeabi_l2d>
 800dcae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800dcb2:	ec41 0b17 	vmov	d7, r0, r1
 800dcb6:	ea49 090a 	orr.w	r9, r9, sl
 800dcba:	ea59 0908 	orrs.w	r9, r9, r8
 800dcbe:	ee38 8b47 	vsub.f64	d8, d8, d7
 800dcc2:	d03c      	beq.n	800dd3e <_strtod_l+0xac6>
 800dcc4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800dd78 <_strtod_l+0xb00>
 800dcc8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd0:	f53f aced 	bmi.w	800d6ae <_strtod_l+0x436>
 800dcd4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800dd80 <_strtod_l+0xb08>
 800dcd8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce0:	dda4      	ble.n	800dc2c <_strtod_l+0x9b4>
 800dce2:	e4e4      	b.n	800d6ae <_strtod_l+0x436>
 800dce4:	9906      	ldr	r1, [sp, #24]
 800dce6:	b1e1      	cbz	r1, 800dd22 <_strtod_l+0xaaa>
 800dce8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800dcec:	d819      	bhi.n	800dd22 <_strtod_l+0xaaa>
 800dcee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800dcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf6:	d811      	bhi.n	800dd1c <_strtod_l+0xaa4>
 800dcf8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800dcfc:	ee18 3a10 	vmov	r3, s16
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	bf38      	it	cc
 800dd04:	2301      	movcc	r3, #1
 800dd06:	ee08 3a10 	vmov	s16, r3
 800dd0a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800dd0e:	f1b8 0f00 	cmp.w	r8, #0
 800dd12:	d111      	bne.n	800dd38 <_strtod_l+0xac0>
 800dd14:	eeb1 7b48 	vneg.f64	d7, d8
 800dd18:	ec53 2b17 	vmov	r2, r3, d7
 800dd1c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800dd20:	1bcb      	subs	r3, r1, r7
 800dd22:	eeb0 0b49 	vmov.f64	d0, d9
 800dd26:	ec43 2b1a 	vmov	d10, r2, r3
 800dd2a:	f7ff f94f 	bl	800cfcc <__ulp>
 800dd2e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800dd32:	ec5b ab19 	vmov	sl, fp, d9
 800dd36:	e7aa      	b.n	800dc8e <_strtod_l+0xa16>
 800dd38:	eeb0 7b48 	vmov.f64	d7, d8
 800dd3c:	e7ec      	b.n	800dd18 <_strtod_l+0xaa0>
 800dd3e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800dd88 <_strtod_l+0xb10>
 800dd42:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4a:	f57f af6f 	bpl.w	800dc2c <_strtod_l+0x9b4>
 800dd4e:	e4ae      	b.n	800d6ae <_strtod_l+0x436>
 800dd50:	2300      	movs	r3, #0
 800dd52:	9308      	str	r3, [sp, #32]
 800dd54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	f7ff bacc 	b.w	800d2f6 <_strtod_l+0x7e>
 800dd5e:	2a65      	cmp	r2, #101	@ 0x65
 800dd60:	f43f abbc 	beq.w	800d4dc <_strtod_l+0x264>
 800dd64:	2a45      	cmp	r2, #69	@ 0x45
 800dd66:	f43f abb9 	beq.w	800d4dc <_strtod_l+0x264>
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	9306      	str	r3, [sp, #24]
 800dd6e:	f7ff bbf0 	b.w	800d552 <_strtod_l+0x2da>
 800dd72:	bf00      	nop
 800dd74:	f3af 8000 	nop.w
 800dd78:	94a03595 	.word	0x94a03595
 800dd7c:	3fdfffff 	.word	0x3fdfffff
 800dd80:	35afe535 	.word	0x35afe535
 800dd84:	3fe00000 	.word	0x3fe00000
 800dd88:	94a03595 	.word	0x94a03595
 800dd8c:	3fcfffff 	.word	0x3fcfffff
 800dd90:	000fffff 	.word	0x000fffff
 800dd94:	7ff00000 	.word	0x7ff00000
 800dd98:	7fefffff 	.word	0x7fefffff
 800dd9c:	7fe00000 	.word	0x7fe00000
 800dda0:	7c9fffff 	.word	0x7c9fffff

0800dda4 <_strtod_r>:
 800dda4:	4b01      	ldr	r3, [pc, #4]	@ (800ddac <_strtod_r+0x8>)
 800dda6:	f7ff ba67 	b.w	800d278 <_strtod_l>
 800ddaa:	bf00      	nop
 800ddac:	24000078 	.word	0x24000078

0800ddb0 <__ssputs_r>:
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	688e      	ldr	r6, [r1, #8]
 800ddb6:	461f      	mov	r7, r3
 800ddb8:	42be      	cmp	r6, r7
 800ddba:	680b      	ldr	r3, [r1, #0]
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	4690      	mov	r8, r2
 800ddc2:	d82d      	bhi.n	800de20 <__ssputs_r+0x70>
 800ddc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddcc:	d026      	beq.n	800de1c <__ssputs_r+0x6c>
 800ddce:	6965      	ldr	r5, [r4, #20]
 800ddd0:	6909      	ldr	r1, [r1, #16]
 800ddd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddd6:	eba3 0901 	sub.w	r9, r3, r1
 800ddda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddde:	1c7b      	adds	r3, r7, #1
 800dde0:	444b      	add	r3, r9
 800dde2:	106d      	asrs	r5, r5, #1
 800dde4:	429d      	cmp	r5, r3
 800dde6:	bf38      	it	cc
 800dde8:	461d      	movcc	r5, r3
 800ddea:	0553      	lsls	r3, r2, #21
 800ddec:	d527      	bpl.n	800de3e <__ssputs_r+0x8e>
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7fe fcec 	bl	800c7cc <_malloc_r>
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	b360      	cbz	r0, 800de52 <__ssputs_r+0xa2>
 800ddf8:	6921      	ldr	r1, [r4, #16]
 800ddfa:	464a      	mov	r2, r9
 800ddfc:	f7fd fe7d 	bl	800bafa <memcpy>
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0a:	81a3      	strh	r3, [r4, #12]
 800de0c:	6126      	str	r6, [r4, #16]
 800de0e:	6165      	str	r5, [r4, #20]
 800de10:	444e      	add	r6, r9
 800de12:	eba5 0509 	sub.w	r5, r5, r9
 800de16:	6026      	str	r6, [r4, #0]
 800de18:	60a5      	str	r5, [r4, #8]
 800de1a:	463e      	mov	r6, r7
 800de1c:	42be      	cmp	r6, r7
 800de1e:	d900      	bls.n	800de22 <__ssputs_r+0x72>
 800de20:	463e      	mov	r6, r7
 800de22:	6820      	ldr	r0, [r4, #0]
 800de24:	4632      	mov	r2, r6
 800de26:	4641      	mov	r1, r8
 800de28:	f000 fb9c 	bl	800e564 <memmove>
 800de2c:	68a3      	ldr	r3, [r4, #8]
 800de2e:	1b9b      	subs	r3, r3, r6
 800de30:	60a3      	str	r3, [r4, #8]
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	4433      	add	r3, r6
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	2000      	movs	r0, #0
 800de3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de3e:	462a      	mov	r2, r5
 800de40:	f000 ff3f 	bl	800ecc2 <_realloc_r>
 800de44:	4606      	mov	r6, r0
 800de46:	2800      	cmp	r0, #0
 800de48:	d1e0      	bne.n	800de0c <__ssputs_r+0x5c>
 800de4a:	6921      	ldr	r1, [r4, #16]
 800de4c:	4650      	mov	r0, sl
 800de4e:	f7fe fc49 	bl	800c6e4 <_free_r>
 800de52:	230c      	movs	r3, #12
 800de54:	f8ca 3000 	str.w	r3, [sl]
 800de58:	89a3      	ldrh	r3, [r4, #12]
 800de5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de5e:	81a3      	strh	r3, [r4, #12]
 800de60:	f04f 30ff 	mov.w	r0, #4294967295
 800de64:	e7e9      	b.n	800de3a <__ssputs_r+0x8a>
	...

0800de68 <_svfiprintf_r>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	4698      	mov	r8, r3
 800de6e:	898b      	ldrh	r3, [r1, #12]
 800de70:	061b      	lsls	r3, r3, #24
 800de72:	b09d      	sub	sp, #116	@ 0x74
 800de74:	4607      	mov	r7, r0
 800de76:	460d      	mov	r5, r1
 800de78:	4614      	mov	r4, r2
 800de7a:	d510      	bpl.n	800de9e <_svfiprintf_r+0x36>
 800de7c:	690b      	ldr	r3, [r1, #16]
 800de7e:	b973      	cbnz	r3, 800de9e <_svfiprintf_r+0x36>
 800de80:	2140      	movs	r1, #64	@ 0x40
 800de82:	f7fe fca3 	bl	800c7cc <_malloc_r>
 800de86:	6028      	str	r0, [r5, #0]
 800de88:	6128      	str	r0, [r5, #16]
 800de8a:	b930      	cbnz	r0, 800de9a <_svfiprintf_r+0x32>
 800de8c:	230c      	movs	r3, #12
 800de8e:	603b      	str	r3, [r7, #0]
 800de90:	f04f 30ff 	mov.w	r0, #4294967295
 800de94:	b01d      	add	sp, #116	@ 0x74
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	2340      	movs	r3, #64	@ 0x40
 800de9c:	616b      	str	r3, [r5, #20]
 800de9e:	2300      	movs	r3, #0
 800dea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea2:	2320      	movs	r3, #32
 800dea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dea8:	f8cd 800c 	str.w	r8, [sp, #12]
 800deac:	2330      	movs	r3, #48	@ 0x30
 800deae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e04c <_svfiprintf_r+0x1e4>
 800deb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deb6:	f04f 0901 	mov.w	r9, #1
 800deba:	4623      	mov	r3, r4
 800debc:	469a      	mov	sl, r3
 800debe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dec2:	b10a      	cbz	r2, 800dec8 <_svfiprintf_r+0x60>
 800dec4:	2a25      	cmp	r2, #37	@ 0x25
 800dec6:	d1f9      	bne.n	800debc <_svfiprintf_r+0x54>
 800dec8:	ebba 0b04 	subs.w	fp, sl, r4
 800decc:	d00b      	beq.n	800dee6 <_svfiprintf_r+0x7e>
 800dece:	465b      	mov	r3, fp
 800ded0:	4622      	mov	r2, r4
 800ded2:	4629      	mov	r1, r5
 800ded4:	4638      	mov	r0, r7
 800ded6:	f7ff ff6b 	bl	800ddb0 <__ssputs_r>
 800deda:	3001      	adds	r0, #1
 800dedc:	f000 80a7 	beq.w	800e02e <_svfiprintf_r+0x1c6>
 800dee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee2:	445a      	add	r2, fp
 800dee4:	9209      	str	r2, [sp, #36]	@ 0x24
 800dee6:	f89a 3000 	ldrb.w	r3, [sl]
 800deea:	2b00      	cmp	r3, #0
 800deec:	f000 809f 	beq.w	800e02e <_svfiprintf_r+0x1c6>
 800def0:	2300      	movs	r3, #0
 800def2:	f04f 32ff 	mov.w	r2, #4294967295
 800def6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800defa:	f10a 0a01 	add.w	sl, sl, #1
 800defe:	9304      	str	r3, [sp, #16]
 800df00:	9307      	str	r3, [sp, #28]
 800df02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df06:	931a      	str	r3, [sp, #104]	@ 0x68
 800df08:	4654      	mov	r4, sl
 800df0a:	2205      	movs	r2, #5
 800df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df10:	484e      	ldr	r0, [pc, #312]	@ (800e04c <_svfiprintf_r+0x1e4>)
 800df12:	f7f2 f9e5 	bl	80002e0 <memchr>
 800df16:	9a04      	ldr	r2, [sp, #16]
 800df18:	b9d8      	cbnz	r0, 800df52 <_svfiprintf_r+0xea>
 800df1a:	06d0      	lsls	r0, r2, #27
 800df1c:	bf44      	itt	mi
 800df1e:	2320      	movmi	r3, #32
 800df20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df24:	0711      	lsls	r1, r2, #28
 800df26:	bf44      	itt	mi
 800df28:	232b      	movmi	r3, #43	@ 0x2b
 800df2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df2e:	f89a 3000 	ldrb.w	r3, [sl]
 800df32:	2b2a      	cmp	r3, #42	@ 0x2a
 800df34:	d015      	beq.n	800df62 <_svfiprintf_r+0xfa>
 800df36:	9a07      	ldr	r2, [sp, #28]
 800df38:	4654      	mov	r4, sl
 800df3a:	2000      	movs	r0, #0
 800df3c:	f04f 0c0a 	mov.w	ip, #10
 800df40:	4621      	mov	r1, r4
 800df42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df46:	3b30      	subs	r3, #48	@ 0x30
 800df48:	2b09      	cmp	r3, #9
 800df4a:	d94b      	bls.n	800dfe4 <_svfiprintf_r+0x17c>
 800df4c:	b1b0      	cbz	r0, 800df7c <_svfiprintf_r+0x114>
 800df4e:	9207      	str	r2, [sp, #28]
 800df50:	e014      	b.n	800df7c <_svfiprintf_r+0x114>
 800df52:	eba0 0308 	sub.w	r3, r0, r8
 800df56:	fa09 f303 	lsl.w	r3, r9, r3
 800df5a:	4313      	orrs	r3, r2
 800df5c:	9304      	str	r3, [sp, #16]
 800df5e:	46a2      	mov	sl, r4
 800df60:	e7d2      	b.n	800df08 <_svfiprintf_r+0xa0>
 800df62:	9b03      	ldr	r3, [sp, #12]
 800df64:	1d19      	adds	r1, r3, #4
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	9103      	str	r1, [sp, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfbb      	ittet	lt
 800df6e:	425b      	neglt	r3, r3
 800df70:	f042 0202 	orrlt.w	r2, r2, #2
 800df74:	9307      	strge	r3, [sp, #28]
 800df76:	9307      	strlt	r3, [sp, #28]
 800df78:	bfb8      	it	lt
 800df7a:	9204      	strlt	r2, [sp, #16]
 800df7c:	7823      	ldrb	r3, [r4, #0]
 800df7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800df80:	d10a      	bne.n	800df98 <_svfiprintf_r+0x130>
 800df82:	7863      	ldrb	r3, [r4, #1]
 800df84:	2b2a      	cmp	r3, #42	@ 0x2a
 800df86:	d132      	bne.n	800dfee <_svfiprintf_r+0x186>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	1d1a      	adds	r2, r3, #4
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	9203      	str	r2, [sp, #12]
 800df90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df94:	3402      	adds	r4, #2
 800df96:	9305      	str	r3, [sp, #20]
 800df98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e05c <_svfiprintf_r+0x1f4>
 800df9c:	7821      	ldrb	r1, [r4, #0]
 800df9e:	2203      	movs	r2, #3
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	f7f2 f99d 	bl	80002e0 <memchr>
 800dfa6:	b138      	cbz	r0, 800dfb8 <_svfiprintf_r+0x150>
 800dfa8:	9b04      	ldr	r3, [sp, #16]
 800dfaa:	eba0 000a 	sub.w	r0, r0, sl
 800dfae:	2240      	movs	r2, #64	@ 0x40
 800dfb0:	4082      	lsls	r2, r0
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	3401      	adds	r4, #1
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfbc:	4824      	ldr	r0, [pc, #144]	@ (800e050 <_svfiprintf_r+0x1e8>)
 800dfbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfc2:	2206      	movs	r2, #6
 800dfc4:	f7f2 f98c 	bl	80002e0 <memchr>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d036      	beq.n	800e03a <_svfiprintf_r+0x1d2>
 800dfcc:	4b21      	ldr	r3, [pc, #132]	@ (800e054 <_svfiprintf_r+0x1ec>)
 800dfce:	bb1b      	cbnz	r3, 800e018 <_svfiprintf_r+0x1b0>
 800dfd0:	9b03      	ldr	r3, [sp, #12]
 800dfd2:	3307      	adds	r3, #7
 800dfd4:	f023 0307 	bic.w	r3, r3, #7
 800dfd8:	3308      	adds	r3, #8
 800dfda:	9303      	str	r3, [sp, #12]
 800dfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfde:	4433      	add	r3, r6
 800dfe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe2:	e76a      	b.n	800deba <_svfiprintf_r+0x52>
 800dfe4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfe8:	460c      	mov	r4, r1
 800dfea:	2001      	movs	r0, #1
 800dfec:	e7a8      	b.n	800df40 <_svfiprintf_r+0xd8>
 800dfee:	2300      	movs	r3, #0
 800dff0:	3401      	adds	r4, #1
 800dff2:	9305      	str	r3, [sp, #20]
 800dff4:	4619      	mov	r1, r3
 800dff6:	f04f 0c0a 	mov.w	ip, #10
 800dffa:	4620      	mov	r0, r4
 800dffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e000:	3a30      	subs	r2, #48	@ 0x30
 800e002:	2a09      	cmp	r2, #9
 800e004:	d903      	bls.n	800e00e <_svfiprintf_r+0x1a6>
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0c6      	beq.n	800df98 <_svfiprintf_r+0x130>
 800e00a:	9105      	str	r1, [sp, #20]
 800e00c:	e7c4      	b.n	800df98 <_svfiprintf_r+0x130>
 800e00e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e012:	4604      	mov	r4, r0
 800e014:	2301      	movs	r3, #1
 800e016:	e7f0      	b.n	800dffa <_svfiprintf_r+0x192>
 800e018:	ab03      	add	r3, sp, #12
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	462a      	mov	r2, r5
 800e01e:	4b0e      	ldr	r3, [pc, #56]	@ (800e058 <_svfiprintf_r+0x1f0>)
 800e020:	a904      	add	r1, sp, #16
 800e022:	4638      	mov	r0, r7
 800e024:	f7fc fdb8 	bl	800ab98 <_printf_float>
 800e028:	1c42      	adds	r2, r0, #1
 800e02a:	4606      	mov	r6, r0
 800e02c:	d1d6      	bne.n	800dfdc <_svfiprintf_r+0x174>
 800e02e:	89ab      	ldrh	r3, [r5, #12]
 800e030:	065b      	lsls	r3, r3, #25
 800e032:	f53f af2d 	bmi.w	800de90 <_svfiprintf_r+0x28>
 800e036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e038:	e72c      	b.n	800de94 <_svfiprintf_r+0x2c>
 800e03a:	ab03      	add	r3, sp, #12
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	462a      	mov	r2, r5
 800e040:	4b05      	ldr	r3, [pc, #20]	@ (800e058 <_svfiprintf_r+0x1f0>)
 800e042:	a904      	add	r1, sp, #16
 800e044:	4638      	mov	r0, r7
 800e046:	f7fd f82f 	bl	800b0a8 <_printf_i>
 800e04a:	e7ed      	b.n	800e028 <_svfiprintf_r+0x1c0>
 800e04c:	0800f388 	.word	0x0800f388
 800e050:	0800f392 	.word	0x0800f392
 800e054:	0800ab99 	.word	0x0800ab99
 800e058:	0800ddb1 	.word	0x0800ddb1
 800e05c:	0800f38e 	.word	0x0800f38e

0800e060 <__sfputc_r>:
 800e060:	6893      	ldr	r3, [r2, #8]
 800e062:	3b01      	subs	r3, #1
 800e064:	2b00      	cmp	r3, #0
 800e066:	b410      	push	{r4}
 800e068:	6093      	str	r3, [r2, #8]
 800e06a:	da08      	bge.n	800e07e <__sfputc_r+0x1e>
 800e06c:	6994      	ldr	r4, [r2, #24]
 800e06e:	42a3      	cmp	r3, r4
 800e070:	db01      	blt.n	800e076 <__sfputc_r+0x16>
 800e072:	290a      	cmp	r1, #10
 800e074:	d103      	bne.n	800e07e <__sfputc_r+0x1e>
 800e076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e07a:	f000 b9df 	b.w	800e43c <__swbuf_r>
 800e07e:	6813      	ldr	r3, [r2, #0]
 800e080:	1c58      	adds	r0, r3, #1
 800e082:	6010      	str	r0, [r2, #0]
 800e084:	7019      	strb	r1, [r3, #0]
 800e086:	4608      	mov	r0, r1
 800e088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <__sfputs_r>:
 800e08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e090:	4606      	mov	r6, r0
 800e092:	460f      	mov	r7, r1
 800e094:	4614      	mov	r4, r2
 800e096:	18d5      	adds	r5, r2, r3
 800e098:	42ac      	cmp	r4, r5
 800e09a:	d101      	bne.n	800e0a0 <__sfputs_r+0x12>
 800e09c:	2000      	movs	r0, #0
 800e09e:	e007      	b.n	800e0b0 <__sfputs_r+0x22>
 800e0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a4:	463a      	mov	r2, r7
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f7ff ffda 	bl	800e060 <__sfputc_r>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d1f3      	bne.n	800e098 <__sfputs_r+0xa>
 800e0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0b4 <_vfiprintf_r>:
 800e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	b09d      	sub	sp, #116	@ 0x74
 800e0bc:	4614      	mov	r4, r2
 800e0be:	4698      	mov	r8, r3
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	b118      	cbz	r0, 800e0cc <_vfiprintf_r+0x18>
 800e0c4:	6a03      	ldr	r3, [r0, #32]
 800e0c6:	b90b      	cbnz	r3, 800e0cc <_vfiprintf_r+0x18>
 800e0c8:	f7fd fba6 	bl	800b818 <__sinit>
 800e0cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0ce:	07d9      	lsls	r1, r3, #31
 800e0d0:	d405      	bmi.n	800e0de <_vfiprintf_r+0x2a>
 800e0d2:	89ab      	ldrh	r3, [r5, #12]
 800e0d4:	059a      	lsls	r2, r3, #22
 800e0d6:	d402      	bmi.n	800e0de <_vfiprintf_r+0x2a>
 800e0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0da:	f7fd fd0c 	bl	800baf6 <__retarget_lock_acquire_recursive>
 800e0de:	89ab      	ldrh	r3, [r5, #12]
 800e0e0:	071b      	lsls	r3, r3, #28
 800e0e2:	d501      	bpl.n	800e0e8 <_vfiprintf_r+0x34>
 800e0e4:	692b      	ldr	r3, [r5, #16]
 800e0e6:	b99b      	cbnz	r3, 800e110 <_vfiprintf_r+0x5c>
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f000 f9e4 	bl	800e4b8 <__swsetup_r>
 800e0f0:	b170      	cbz	r0, 800e110 <_vfiprintf_r+0x5c>
 800e0f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0f4:	07dc      	lsls	r4, r3, #31
 800e0f6:	d504      	bpl.n	800e102 <_vfiprintf_r+0x4e>
 800e0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fc:	b01d      	add	sp, #116	@ 0x74
 800e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e102:	89ab      	ldrh	r3, [r5, #12]
 800e104:	0598      	lsls	r0, r3, #22
 800e106:	d4f7      	bmi.n	800e0f8 <_vfiprintf_r+0x44>
 800e108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e10a:	f7fd fcf5 	bl	800baf8 <__retarget_lock_release_recursive>
 800e10e:	e7f3      	b.n	800e0f8 <_vfiprintf_r+0x44>
 800e110:	2300      	movs	r3, #0
 800e112:	9309      	str	r3, [sp, #36]	@ 0x24
 800e114:	2320      	movs	r3, #32
 800e116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e11e:	2330      	movs	r3, #48	@ 0x30
 800e120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2d0 <_vfiprintf_r+0x21c>
 800e124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e128:	f04f 0901 	mov.w	r9, #1
 800e12c:	4623      	mov	r3, r4
 800e12e:	469a      	mov	sl, r3
 800e130:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e134:	b10a      	cbz	r2, 800e13a <_vfiprintf_r+0x86>
 800e136:	2a25      	cmp	r2, #37	@ 0x25
 800e138:	d1f9      	bne.n	800e12e <_vfiprintf_r+0x7a>
 800e13a:	ebba 0b04 	subs.w	fp, sl, r4
 800e13e:	d00b      	beq.n	800e158 <_vfiprintf_r+0xa4>
 800e140:	465b      	mov	r3, fp
 800e142:	4622      	mov	r2, r4
 800e144:	4629      	mov	r1, r5
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff ffa1 	bl	800e08e <__sfputs_r>
 800e14c:	3001      	adds	r0, #1
 800e14e:	f000 80a7 	beq.w	800e2a0 <_vfiprintf_r+0x1ec>
 800e152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e154:	445a      	add	r2, fp
 800e156:	9209      	str	r2, [sp, #36]	@ 0x24
 800e158:	f89a 3000 	ldrb.w	r3, [sl]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 809f 	beq.w	800e2a0 <_vfiprintf_r+0x1ec>
 800e162:	2300      	movs	r3, #0
 800e164:	f04f 32ff 	mov.w	r2, #4294967295
 800e168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16c:	f10a 0a01 	add.w	sl, sl, #1
 800e170:	9304      	str	r3, [sp, #16]
 800e172:	9307      	str	r3, [sp, #28]
 800e174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e178:	931a      	str	r3, [sp, #104]	@ 0x68
 800e17a:	4654      	mov	r4, sl
 800e17c:	2205      	movs	r2, #5
 800e17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e182:	4853      	ldr	r0, [pc, #332]	@ (800e2d0 <_vfiprintf_r+0x21c>)
 800e184:	f7f2 f8ac 	bl	80002e0 <memchr>
 800e188:	9a04      	ldr	r2, [sp, #16]
 800e18a:	b9d8      	cbnz	r0, 800e1c4 <_vfiprintf_r+0x110>
 800e18c:	06d1      	lsls	r1, r2, #27
 800e18e:	bf44      	itt	mi
 800e190:	2320      	movmi	r3, #32
 800e192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e196:	0713      	lsls	r3, r2, #28
 800e198:	bf44      	itt	mi
 800e19a:	232b      	movmi	r3, #43	@ 0x2b
 800e19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1a6:	d015      	beq.n	800e1d4 <_vfiprintf_r+0x120>
 800e1a8:	9a07      	ldr	r2, [sp, #28]
 800e1aa:	4654      	mov	r4, sl
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	f04f 0c0a 	mov.w	ip, #10
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b8:	3b30      	subs	r3, #48	@ 0x30
 800e1ba:	2b09      	cmp	r3, #9
 800e1bc:	d94b      	bls.n	800e256 <_vfiprintf_r+0x1a2>
 800e1be:	b1b0      	cbz	r0, 800e1ee <_vfiprintf_r+0x13a>
 800e1c0:	9207      	str	r2, [sp, #28]
 800e1c2:	e014      	b.n	800e1ee <_vfiprintf_r+0x13a>
 800e1c4:	eba0 0308 	sub.w	r3, r0, r8
 800e1c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	9304      	str	r3, [sp, #16]
 800e1d0:	46a2      	mov	sl, r4
 800e1d2:	e7d2      	b.n	800e17a <_vfiprintf_r+0xc6>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	1d19      	adds	r1, r3, #4
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	9103      	str	r1, [sp, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bfbb      	ittet	lt
 800e1e0:	425b      	neglt	r3, r3
 800e1e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e6:	9307      	strge	r3, [sp, #28]
 800e1e8:	9307      	strlt	r3, [sp, #28]
 800e1ea:	bfb8      	it	lt
 800e1ec:	9204      	strlt	r2, [sp, #16]
 800e1ee:	7823      	ldrb	r3, [r4, #0]
 800e1f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1f2:	d10a      	bne.n	800e20a <_vfiprintf_r+0x156>
 800e1f4:	7863      	ldrb	r3, [r4, #1]
 800e1f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1f8:	d132      	bne.n	800e260 <_vfiprintf_r+0x1ac>
 800e1fa:	9b03      	ldr	r3, [sp, #12]
 800e1fc:	1d1a      	adds	r2, r3, #4
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	9203      	str	r2, [sp, #12]
 800e202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e206:	3402      	adds	r4, #2
 800e208:	9305      	str	r3, [sp, #20]
 800e20a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2e0 <_vfiprintf_r+0x22c>
 800e20e:	7821      	ldrb	r1, [r4, #0]
 800e210:	2203      	movs	r2, #3
 800e212:	4650      	mov	r0, sl
 800e214:	f7f2 f864 	bl	80002e0 <memchr>
 800e218:	b138      	cbz	r0, 800e22a <_vfiprintf_r+0x176>
 800e21a:	9b04      	ldr	r3, [sp, #16]
 800e21c:	eba0 000a 	sub.w	r0, r0, sl
 800e220:	2240      	movs	r2, #64	@ 0x40
 800e222:	4082      	lsls	r2, r0
 800e224:	4313      	orrs	r3, r2
 800e226:	3401      	adds	r4, #1
 800e228:	9304      	str	r3, [sp, #16]
 800e22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22e:	4829      	ldr	r0, [pc, #164]	@ (800e2d4 <_vfiprintf_r+0x220>)
 800e230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e234:	2206      	movs	r2, #6
 800e236:	f7f2 f853 	bl	80002e0 <memchr>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d03f      	beq.n	800e2be <_vfiprintf_r+0x20a>
 800e23e:	4b26      	ldr	r3, [pc, #152]	@ (800e2d8 <_vfiprintf_r+0x224>)
 800e240:	bb1b      	cbnz	r3, 800e28a <_vfiprintf_r+0x1d6>
 800e242:	9b03      	ldr	r3, [sp, #12]
 800e244:	3307      	adds	r3, #7
 800e246:	f023 0307 	bic.w	r3, r3, #7
 800e24a:	3308      	adds	r3, #8
 800e24c:	9303      	str	r3, [sp, #12]
 800e24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e250:	443b      	add	r3, r7
 800e252:	9309      	str	r3, [sp, #36]	@ 0x24
 800e254:	e76a      	b.n	800e12c <_vfiprintf_r+0x78>
 800e256:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25a:	460c      	mov	r4, r1
 800e25c:	2001      	movs	r0, #1
 800e25e:	e7a8      	b.n	800e1b2 <_vfiprintf_r+0xfe>
 800e260:	2300      	movs	r3, #0
 800e262:	3401      	adds	r4, #1
 800e264:	9305      	str	r3, [sp, #20]
 800e266:	4619      	mov	r1, r3
 800e268:	f04f 0c0a 	mov.w	ip, #10
 800e26c:	4620      	mov	r0, r4
 800e26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e272:	3a30      	subs	r2, #48	@ 0x30
 800e274:	2a09      	cmp	r2, #9
 800e276:	d903      	bls.n	800e280 <_vfiprintf_r+0x1cc>
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d0c6      	beq.n	800e20a <_vfiprintf_r+0x156>
 800e27c:	9105      	str	r1, [sp, #20]
 800e27e:	e7c4      	b.n	800e20a <_vfiprintf_r+0x156>
 800e280:	fb0c 2101 	mla	r1, ip, r1, r2
 800e284:	4604      	mov	r4, r0
 800e286:	2301      	movs	r3, #1
 800e288:	e7f0      	b.n	800e26c <_vfiprintf_r+0x1b8>
 800e28a:	ab03      	add	r3, sp, #12
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	462a      	mov	r2, r5
 800e290:	4b12      	ldr	r3, [pc, #72]	@ (800e2dc <_vfiprintf_r+0x228>)
 800e292:	a904      	add	r1, sp, #16
 800e294:	4630      	mov	r0, r6
 800e296:	f7fc fc7f 	bl	800ab98 <_printf_float>
 800e29a:	4607      	mov	r7, r0
 800e29c:	1c78      	adds	r0, r7, #1
 800e29e:	d1d6      	bne.n	800e24e <_vfiprintf_r+0x19a>
 800e2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2a2:	07d9      	lsls	r1, r3, #31
 800e2a4:	d405      	bmi.n	800e2b2 <_vfiprintf_r+0x1fe>
 800e2a6:	89ab      	ldrh	r3, [r5, #12]
 800e2a8:	059a      	lsls	r2, r3, #22
 800e2aa:	d402      	bmi.n	800e2b2 <_vfiprintf_r+0x1fe>
 800e2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2ae:	f7fd fc23 	bl	800baf8 <__retarget_lock_release_recursive>
 800e2b2:	89ab      	ldrh	r3, [r5, #12]
 800e2b4:	065b      	lsls	r3, r3, #25
 800e2b6:	f53f af1f 	bmi.w	800e0f8 <_vfiprintf_r+0x44>
 800e2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2bc:	e71e      	b.n	800e0fc <_vfiprintf_r+0x48>
 800e2be:	ab03      	add	r3, sp, #12
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	462a      	mov	r2, r5
 800e2c4:	4b05      	ldr	r3, [pc, #20]	@ (800e2dc <_vfiprintf_r+0x228>)
 800e2c6:	a904      	add	r1, sp, #16
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7fc feed 	bl	800b0a8 <_printf_i>
 800e2ce:	e7e4      	b.n	800e29a <_vfiprintf_r+0x1e6>
 800e2d0:	0800f388 	.word	0x0800f388
 800e2d4:	0800f392 	.word	0x0800f392
 800e2d8:	0800ab99 	.word	0x0800ab99
 800e2dc:	0800e08f 	.word	0x0800e08f
 800e2e0:	0800f38e 	.word	0x0800f38e

0800e2e4 <__sflush_r>:
 800e2e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	0716      	lsls	r6, r2, #28
 800e2ee:	4605      	mov	r5, r0
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	d454      	bmi.n	800e39e <__sflush_r+0xba>
 800e2f4:	684b      	ldr	r3, [r1, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	dc02      	bgt.n	800e300 <__sflush_r+0x1c>
 800e2fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dd48      	ble.n	800e392 <__sflush_r+0xae>
 800e300:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e302:	2e00      	cmp	r6, #0
 800e304:	d045      	beq.n	800e392 <__sflush_r+0xae>
 800e306:	2300      	movs	r3, #0
 800e308:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e30c:	682f      	ldr	r7, [r5, #0]
 800e30e:	6a21      	ldr	r1, [r4, #32]
 800e310:	602b      	str	r3, [r5, #0]
 800e312:	d030      	beq.n	800e376 <__sflush_r+0x92>
 800e314:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	0759      	lsls	r1, r3, #29
 800e31a:	d505      	bpl.n	800e328 <__sflush_r+0x44>
 800e31c:	6863      	ldr	r3, [r4, #4]
 800e31e:	1ad2      	subs	r2, r2, r3
 800e320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e322:	b10b      	cbz	r3, 800e328 <__sflush_r+0x44>
 800e324:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e326:	1ad2      	subs	r2, r2, r3
 800e328:	2300      	movs	r3, #0
 800e32a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e32c:	6a21      	ldr	r1, [r4, #32]
 800e32e:	4628      	mov	r0, r5
 800e330:	47b0      	blx	r6
 800e332:	1c43      	adds	r3, r0, #1
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	d106      	bne.n	800e346 <__sflush_r+0x62>
 800e338:	6829      	ldr	r1, [r5, #0]
 800e33a:	291d      	cmp	r1, #29
 800e33c:	d82b      	bhi.n	800e396 <__sflush_r+0xb2>
 800e33e:	4a2a      	ldr	r2, [pc, #168]	@ (800e3e8 <__sflush_r+0x104>)
 800e340:	410a      	asrs	r2, r1
 800e342:	07d6      	lsls	r6, r2, #31
 800e344:	d427      	bmi.n	800e396 <__sflush_r+0xb2>
 800e346:	2200      	movs	r2, #0
 800e348:	6062      	str	r2, [r4, #4]
 800e34a:	04d9      	lsls	r1, r3, #19
 800e34c:	6922      	ldr	r2, [r4, #16]
 800e34e:	6022      	str	r2, [r4, #0]
 800e350:	d504      	bpl.n	800e35c <__sflush_r+0x78>
 800e352:	1c42      	adds	r2, r0, #1
 800e354:	d101      	bne.n	800e35a <__sflush_r+0x76>
 800e356:	682b      	ldr	r3, [r5, #0]
 800e358:	b903      	cbnz	r3, 800e35c <__sflush_r+0x78>
 800e35a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e35c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e35e:	602f      	str	r7, [r5, #0]
 800e360:	b1b9      	cbz	r1, 800e392 <__sflush_r+0xae>
 800e362:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e366:	4299      	cmp	r1, r3
 800e368:	d002      	beq.n	800e370 <__sflush_r+0x8c>
 800e36a:	4628      	mov	r0, r5
 800e36c:	f7fe f9ba 	bl	800c6e4 <_free_r>
 800e370:	2300      	movs	r3, #0
 800e372:	6363      	str	r3, [r4, #52]	@ 0x34
 800e374:	e00d      	b.n	800e392 <__sflush_r+0xae>
 800e376:	2301      	movs	r3, #1
 800e378:	4628      	mov	r0, r5
 800e37a:	47b0      	blx	r6
 800e37c:	4602      	mov	r2, r0
 800e37e:	1c50      	adds	r0, r2, #1
 800e380:	d1c9      	bne.n	800e316 <__sflush_r+0x32>
 800e382:	682b      	ldr	r3, [r5, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0c6      	beq.n	800e316 <__sflush_r+0x32>
 800e388:	2b1d      	cmp	r3, #29
 800e38a:	d001      	beq.n	800e390 <__sflush_r+0xac>
 800e38c:	2b16      	cmp	r3, #22
 800e38e:	d11e      	bne.n	800e3ce <__sflush_r+0xea>
 800e390:	602f      	str	r7, [r5, #0]
 800e392:	2000      	movs	r0, #0
 800e394:	e022      	b.n	800e3dc <__sflush_r+0xf8>
 800e396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e39a:	b21b      	sxth	r3, r3
 800e39c:	e01b      	b.n	800e3d6 <__sflush_r+0xf2>
 800e39e:	690f      	ldr	r7, [r1, #16]
 800e3a0:	2f00      	cmp	r7, #0
 800e3a2:	d0f6      	beq.n	800e392 <__sflush_r+0xae>
 800e3a4:	0793      	lsls	r3, r2, #30
 800e3a6:	680e      	ldr	r6, [r1, #0]
 800e3a8:	bf08      	it	eq
 800e3aa:	694b      	ldreq	r3, [r1, #20]
 800e3ac:	600f      	str	r7, [r1, #0]
 800e3ae:	bf18      	it	ne
 800e3b0:	2300      	movne	r3, #0
 800e3b2:	eba6 0807 	sub.w	r8, r6, r7
 800e3b6:	608b      	str	r3, [r1, #8]
 800e3b8:	f1b8 0f00 	cmp.w	r8, #0
 800e3bc:	dde9      	ble.n	800e392 <__sflush_r+0xae>
 800e3be:	6a21      	ldr	r1, [r4, #32]
 800e3c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3c2:	4643      	mov	r3, r8
 800e3c4:	463a      	mov	r2, r7
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	47b0      	blx	r6
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	dc08      	bgt.n	800e3e0 <__sflush_r+0xfc>
 800e3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3d6:	81a3      	strh	r3, [r4, #12]
 800e3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e0:	4407      	add	r7, r0
 800e3e2:	eba8 0800 	sub.w	r8, r8, r0
 800e3e6:	e7e7      	b.n	800e3b8 <__sflush_r+0xd4>
 800e3e8:	dfbffffe 	.word	0xdfbffffe

0800e3ec <_fflush_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	690b      	ldr	r3, [r1, #16]
 800e3f0:	4605      	mov	r5, r0
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	b913      	cbnz	r3, 800e3fc <_fflush_r+0x10>
 800e3f6:	2500      	movs	r5, #0
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	bd38      	pop	{r3, r4, r5, pc}
 800e3fc:	b118      	cbz	r0, 800e406 <_fflush_r+0x1a>
 800e3fe:	6a03      	ldr	r3, [r0, #32]
 800e400:	b90b      	cbnz	r3, 800e406 <_fflush_r+0x1a>
 800e402:	f7fd fa09 	bl	800b818 <__sinit>
 800e406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d0f3      	beq.n	800e3f6 <_fflush_r+0xa>
 800e40e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e410:	07d0      	lsls	r0, r2, #31
 800e412:	d404      	bmi.n	800e41e <_fflush_r+0x32>
 800e414:	0599      	lsls	r1, r3, #22
 800e416:	d402      	bmi.n	800e41e <_fflush_r+0x32>
 800e418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e41a:	f7fd fb6c 	bl	800baf6 <__retarget_lock_acquire_recursive>
 800e41e:	4628      	mov	r0, r5
 800e420:	4621      	mov	r1, r4
 800e422:	f7ff ff5f 	bl	800e2e4 <__sflush_r>
 800e426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e428:	07da      	lsls	r2, r3, #31
 800e42a:	4605      	mov	r5, r0
 800e42c:	d4e4      	bmi.n	800e3f8 <_fflush_r+0xc>
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	059b      	lsls	r3, r3, #22
 800e432:	d4e1      	bmi.n	800e3f8 <_fflush_r+0xc>
 800e434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e436:	f7fd fb5f 	bl	800baf8 <__retarget_lock_release_recursive>
 800e43a:	e7dd      	b.n	800e3f8 <_fflush_r+0xc>

0800e43c <__swbuf_r>:
 800e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e43e:	460e      	mov	r6, r1
 800e440:	4614      	mov	r4, r2
 800e442:	4605      	mov	r5, r0
 800e444:	b118      	cbz	r0, 800e44e <__swbuf_r+0x12>
 800e446:	6a03      	ldr	r3, [r0, #32]
 800e448:	b90b      	cbnz	r3, 800e44e <__swbuf_r+0x12>
 800e44a:	f7fd f9e5 	bl	800b818 <__sinit>
 800e44e:	69a3      	ldr	r3, [r4, #24]
 800e450:	60a3      	str	r3, [r4, #8]
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	071a      	lsls	r2, r3, #28
 800e456:	d501      	bpl.n	800e45c <__swbuf_r+0x20>
 800e458:	6923      	ldr	r3, [r4, #16]
 800e45a:	b943      	cbnz	r3, 800e46e <__swbuf_r+0x32>
 800e45c:	4621      	mov	r1, r4
 800e45e:	4628      	mov	r0, r5
 800e460:	f000 f82a 	bl	800e4b8 <__swsetup_r>
 800e464:	b118      	cbz	r0, 800e46e <__swbuf_r+0x32>
 800e466:	f04f 37ff 	mov.w	r7, #4294967295
 800e46a:	4638      	mov	r0, r7
 800e46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	6922      	ldr	r2, [r4, #16]
 800e472:	1a98      	subs	r0, r3, r2
 800e474:	6963      	ldr	r3, [r4, #20]
 800e476:	b2f6      	uxtb	r6, r6
 800e478:	4283      	cmp	r3, r0
 800e47a:	4637      	mov	r7, r6
 800e47c:	dc05      	bgt.n	800e48a <__swbuf_r+0x4e>
 800e47e:	4621      	mov	r1, r4
 800e480:	4628      	mov	r0, r5
 800e482:	f7ff ffb3 	bl	800e3ec <_fflush_r>
 800e486:	2800      	cmp	r0, #0
 800e488:	d1ed      	bne.n	800e466 <__swbuf_r+0x2a>
 800e48a:	68a3      	ldr	r3, [r4, #8]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	60a3      	str	r3, [r4, #8]
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	6022      	str	r2, [r4, #0]
 800e496:	701e      	strb	r6, [r3, #0]
 800e498:	6962      	ldr	r2, [r4, #20]
 800e49a:	1c43      	adds	r3, r0, #1
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d004      	beq.n	800e4aa <__swbuf_r+0x6e>
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	07db      	lsls	r3, r3, #31
 800e4a4:	d5e1      	bpl.n	800e46a <__swbuf_r+0x2e>
 800e4a6:	2e0a      	cmp	r6, #10
 800e4a8:	d1df      	bne.n	800e46a <__swbuf_r+0x2e>
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f7ff ff9d 	bl	800e3ec <_fflush_r>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	d0d9      	beq.n	800e46a <__swbuf_r+0x2e>
 800e4b6:	e7d6      	b.n	800e466 <__swbuf_r+0x2a>

0800e4b8 <__swsetup_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4b29      	ldr	r3, [pc, #164]	@ (800e560 <__swsetup_r+0xa8>)
 800e4bc:	4605      	mov	r5, r0
 800e4be:	6818      	ldr	r0, [r3, #0]
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	b118      	cbz	r0, 800e4cc <__swsetup_r+0x14>
 800e4c4:	6a03      	ldr	r3, [r0, #32]
 800e4c6:	b90b      	cbnz	r3, 800e4cc <__swsetup_r+0x14>
 800e4c8:	f7fd f9a6 	bl	800b818 <__sinit>
 800e4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d0:	0719      	lsls	r1, r3, #28
 800e4d2:	d422      	bmi.n	800e51a <__swsetup_r+0x62>
 800e4d4:	06da      	lsls	r2, r3, #27
 800e4d6:	d407      	bmi.n	800e4e8 <__swsetup_r+0x30>
 800e4d8:	2209      	movs	r2, #9
 800e4da:	602a      	str	r2, [r5, #0]
 800e4dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4e0:	81a3      	strh	r3, [r4, #12]
 800e4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e6:	e033      	b.n	800e550 <__swsetup_r+0x98>
 800e4e8:	0758      	lsls	r0, r3, #29
 800e4ea:	d512      	bpl.n	800e512 <__swsetup_r+0x5a>
 800e4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ee:	b141      	cbz	r1, 800e502 <__swsetup_r+0x4a>
 800e4f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4f4:	4299      	cmp	r1, r3
 800e4f6:	d002      	beq.n	800e4fe <__swsetup_r+0x46>
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f7fe f8f3 	bl	800c6e4 <_free_r>
 800e4fe:	2300      	movs	r3, #0
 800e500:	6363      	str	r3, [r4, #52]	@ 0x34
 800e502:	89a3      	ldrh	r3, [r4, #12]
 800e504:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e508:	81a3      	strh	r3, [r4, #12]
 800e50a:	2300      	movs	r3, #0
 800e50c:	6063      	str	r3, [r4, #4]
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	89a3      	ldrh	r3, [r4, #12]
 800e514:	f043 0308 	orr.w	r3, r3, #8
 800e518:	81a3      	strh	r3, [r4, #12]
 800e51a:	6923      	ldr	r3, [r4, #16]
 800e51c:	b94b      	cbnz	r3, 800e532 <__swsetup_r+0x7a>
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e528:	d003      	beq.n	800e532 <__swsetup_r+0x7a>
 800e52a:	4621      	mov	r1, r4
 800e52c:	4628      	mov	r0, r5
 800e52e:	f000 fc3b 	bl	800eda8 <__smakebuf_r>
 800e532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e536:	f013 0201 	ands.w	r2, r3, #1
 800e53a:	d00a      	beq.n	800e552 <__swsetup_r+0x9a>
 800e53c:	2200      	movs	r2, #0
 800e53e:	60a2      	str	r2, [r4, #8]
 800e540:	6962      	ldr	r2, [r4, #20]
 800e542:	4252      	negs	r2, r2
 800e544:	61a2      	str	r2, [r4, #24]
 800e546:	6922      	ldr	r2, [r4, #16]
 800e548:	b942      	cbnz	r2, 800e55c <__swsetup_r+0xa4>
 800e54a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e54e:	d1c5      	bne.n	800e4dc <__swsetup_r+0x24>
 800e550:	bd38      	pop	{r3, r4, r5, pc}
 800e552:	0799      	lsls	r1, r3, #30
 800e554:	bf58      	it	pl
 800e556:	6962      	ldrpl	r2, [r4, #20]
 800e558:	60a2      	str	r2, [r4, #8]
 800e55a:	e7f4      	b.n	800e546 <__swsetup_r+0x8e>
 800e55c:	2000      	movs	r0, #0
 800e55e:	e7f7      	b.n	800e550 <__swsetup_r+0x98>
 800e560:	24000028 	.word	0x24000028

0800e564 <memmove>:
 800e564:	4288      	cmp	r0, r1
 800e566:	b510      	push	{r4, lr}
 800e568:	eb01 0402 	add.w	r4, r1, r2
 800e56c:	d902      	bls.n	800e574 <memmove+0x10>
 800e56e:	4284      	cmp	r4, r0
 800e570:	4623      	mov	r3, r4
 800e572:	d807      	bhi.n	800e584 <memmove+0x20>
 800e574:	1e43      	subs	r3, r0, #1
 800e576:	42a1      	cmp	r1, r4
 800e578:	d008      	beq.n	800e58c <memmove+0x28>
 800e57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e582:	e7f8      	b.n	800e576 <memmove+0x12>
 800e584:	4402      	add	r2, r0
 800e586:	4601      	mov	r1, r0
 800e588:	428a      	cmp	r2, r1
 800e58a:	d100      	bne.n	800e58e <memmove+0x2a>
 800e58c:	bd10      	pop	{r4, pc}
 800e58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e596:	e7f7      	b.n	800e588 <memmove+0x24>

0800e598 <_sbrk_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4d06      	ldr	r5, [pc, #24]	@ (800e5b4 <_sbrk_r+0x1c>)
 800e59c:	2300      	movs	r3, #0
 800e59e:	4604      	mov	r4, r0
 800e5a0:	4608      	mov	r0, r1
 800e5a2:	602b      	str	r3, [r5, #0]
 800e5a4:	f7f3 f9b8 	bl	8001918 <_sbrk>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d102      	bne.n	800e5b2 <_sbrk_r+0x1a>
 800e5ac:	682b      	ldr	r3, [r5, #0]
 800e5ae:	b103      	cbz	r3, 800e5b2 <_sbrk_r+0x1a>
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}
 800e5b4:	24000504 	.word	0x24000504

0800e5b8 <nan>:
 800e5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e5c0 <nan+0x8>
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	00000000 	.word	0x00000000
 800e5c4:	7ff80000 	.word	0x7ff80000

0800e5c8 <__assert_func>:
 800e5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5ca:	4614      	mov	r4, r2
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	4b09      	ldr	r3, [pc, #36]	@ (800e5f4 <__assert_func+0x2c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	68d8      	ldr	r0, [r3, #12]
 800e5d6:	b954      	cbnz	r4, 800e5ee <__assert_func+0x26>
 800e5d8:	4b07      	ldr	r3, [pc, #28]	@ (800e5f8 <__assert_func+0x30>)
 800e5da:	461c      	mov	r4, r3
 800e5dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5e0:	9100      	str	r1, [sp, #0]
 800e5e2:	462b      	mov	r3, r5
 800e5e4:	4905      	ldr	r1, [pc, #20]	@ (800e5fc <__assert_func+0x34>)
 800e5e6:	f000 fba7 	bl	800ed38 <fiprintf>
 800e5ea:	f000 fc3b 	bl	800ee64 <abort>
 800e5ee:	4b04      	ldr	r3, [pc, #16]	@ (800e600 <__assert_func+0x38>)
 800e5f0:	e7f4      	b.n	800e5dc <__assert_func+0x14>
 800e5f2:	bf00      	nop
 800e5f4:	24000028 	.word	0x24000028
 800e5f8:	0800f3dc 	.word	0x0800f3dc
 800e5fc:	0800f3ae 	.word	0x0800f3ae
 800e600:	0800f3a1 	.word	0x0800f3a1

0800e604 <_calloc_r>:
 800e604:	b570      	push	{r4, r5, r6, lr}
 800e606:	fba1 5402 	umull	r5, r4, r1, r2
 800e60a:	b93c      	cbnz	r4, 800e61c <_calloc_r+0x18>
 800e60c:	4629      	mov	r1, r5
 800e60e:	f7fe f8dd 	bl	800c7cc <_malloc_r>
 800e612:	4606      	mov	r6, r0
 800e614:	b928      	cbnz	r0, 800e622 <_calloc_r+0x1e>
 800e616:	2600      	movs	r6, #0
 800e618:	4630      	mov	r0, r6
 800e61a:	bd70      	pop	{r4, r5, r6, pc}
 800e61c:	220c      	movs	r2, #12
 800e61e:	6002      	str	r2, [r0, #0]
 800e620:	e7f9      	b.n	800e616 <_calloc_r+0x12>
 800e622:	462a      	mov	r2, r5
 800e624:	4621      	mov	r1, r4
 800e626:	f7fd f9d6 	bl	800b9d6 <memset>
 800e62a:	e7f5      	b.n	800e618 <_calloc_r+0x14>

0800e62c <rshift>:
 800e62c:	6903      	ldr	r3, [r0, #16]
 800e62e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e63a:	f100 0414 	add.w	r4, r0, #20
 800e63e:	dd45      	ble.n	800e6cc <rshift+0xa0>
 800e640:	f011 011f 	ands.w	r1, r1, #31
 800e644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e64c:	d10c      	bne.n	800e668 <rshift+0x3c>
 800e64e:	f100 0710 	add.w	r7, r0, #16
 800e652:	4629      	mov	r1, r5
 800e654:	42b1      	cmp	r1, r6
 800e656:	d334      	bcc.n	800e6c2 <rshift+0x96>
 800e658:	1a9b      	subs	r3, r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	1eea      	subs	r2, r5, #3
 800e65e:	4296      	cmp	r6, r2
 800e660:	bf38      	it	cc
 800e662:	2300      	movcc	r3, #0
 800e664:	4423      	add	r3, r4
 800e666:	e015      	b.n	800e694 <rshift+0x68>
 800e668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e66c:	f1c1 0820 	rsb	r8, r1, #32
 800e670:	40cf      	lsrs	r7, r1
 800e672:	f105 0e04 	add.w	lr, r5, #4
 800e676:	46a1      	mov	r9, r4
 800e678:	4576      	cmp	r6, lr
 800e67a:	46f4      	mov	ip, lr
 800e67c:	d815      	bhi.n	800e6aa <rshift+0x7e>
 800e67e:	1a9a      	subs	r2, r3, r2
 800e680:	0092      	lsls	r2, r2, #2
 800e682:	3a04      	subs	r2, #4
 800e684:	3501      	adds	r5, #1
 800e686:	42ae      	cmp	r6, r5
 800e688:	bf38      	it	cc
 800e68a:	2200      	movcc	r2, #0
 800e68c:	18a3      	adds	r3, r4, r2
 800e68e:	50a7      	str	r7, [r4, r2]
 800e690:	b107      	cbz	r7, 800e694 <rshift+0x68>
 800e692:	3304      	adds	r3, #4
 800e694:	1b1a      	subs	r2, r3, r4
 800e696:	42a3      	cmp	r3, r4
 800e698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e69c:	bf08      	it	eq
 800e69e:	2300      	moveq	r3, #0
 800e6a0:	6102      	str	r2, [r0, #16]
 800e6a2:	bf08      	it	eq
 800e6a4:	6143      	streq	r3, [r0, #20]
 800e6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6aa:	f8dc c000 	ldr.w	ip, [ip]
 800e6ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6b2:	ea4c 0707 	orr.w	r7, ip, r7
 800e6b6:	f849 7b04 	str.w	r7, [r9], #4
 800e6ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6be:	40cf      	lsrs	r7, r1
 800e6c0:	e7da      	b.n	800e678 <rshift+0x4c>
 800e6c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6ca:	e7c3      	b.n	800e654 <rshift+0x28>
 800e6cc:	4623      	mov	r3, r4
 800e6ce:	e7e1      	b.n	800e694 <rshift+0x68>

0800e6d0 <__hexdig_fun>:
 800e6d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e6d4:	2b09      	cmp	r3, #9
 800e6d6:	d802      	bhi.n	800e6de <__hexdig_fun+0xe>
 800e6d8:	3820      	subs	r0, #32
 800e6da:	b2c0      	uxtb	r0, r0
 800e6dc:	4770      	bx	lr
 800e6de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e6e2:	2b05      	cmp	r3, #5
 800e6e4:	d801      	bhi.n	800e6ea <__hexdig_fun+0x1a>
 800e6e6:	3847      	subs	r0, #71	@ 0x47
 800e6e8:	e7f7      	b.n	800e6da <__hexdig_fun+0xa>
 800e6ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e6ee:	2b05      	cmp	r3, #5
 800e6f0:	d801      	bhi.n	800e6f6 <__hexdig_fun+0x26>
 800e6f2:	3827      	subs	r0, #39	@ 0x27
 800e6f4:	e7f1      	b.n	800e6da <__hexdig_fun+0xa>
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	4770      	bx	lr
	...

0800e6fc <__gethex>:
 800e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	b085      	sub	sp, #20
 800e702:	468a      	mov	sl, r1
 800e704:	9302      	str	r3, [sp, #8]
 800e706:	680b      	ldr	r3, [r1, #0]
 800e708:	9001      	str	r0, [sp, #4]
 800e70a:	4690      	mov	r8, r2
 800e70c:	1c9c      	adds	r4, r3, #2
 800e70e:	46a1      	mov	r9, r4
 800e710:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e714:	2830      	cmp	r0, #48	@ 0x30
 800e716:	d0fa      	beq.n	800e70e <__gethex+0x12>
 800e718:	eba9 0303 	sub.w	r3, r9, r3
 800e71c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e720:	f7ff ffd6 	bl	800e6d0 <__hexdig_fun>
 800e724:	4605      	mov	r5, r0
 800e726:	2800      	cmp	r0, #0
 800e728:	d168      	bne.n	800e7fc <__gethex+0x100>
 800e72a:	49a0      	ldr	r1, [pc, #640]	@ (800e9ac <__gethex+0x2b0>)
 800e72c:	2201      	movs	r2, #1
 800e72e:	4648      	mov	r0, r9
 800e730:	f7fd f959 	bl	800b9e6 <strncmp>
 800e734:	4607      	mov	r7, r0
 800e736:	2800      	cmp	r0, #0
 800e738:	d167      	bne.n	800e80a <__gethex+0x10e>
 800e73a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e73e:	4626      	mov	r6, r4
 800e740:	f7ff ffc6 	bl	800e6d0 <__hexdig_fun>
 800e744:	2800      	cmp	r0, #0
 800e746:	d062      	beq.n	800e80e <__gethex+0x112>
 800e748:	4623      	mov	r3, r4
 800e74a:	7818      	ldrb	r0, [r3, #0]
 800e74c:	2830      	cmp	r0, #48	@ 0x30
 800e74e:	4699      	mov	r9, r3
 800e750:	f103 0301 	add.w	r3, r3, #1
 800e754:	d0f9      	beq.n	800e74a <__gethex+0x4e>
 800e756:	f7ff ffbb 	bl	800e6d0 <__hexdig_fun>
 800e75a:	fab0 f580 	clz	r5, r0
 800e75e:	096d      	lsrs	r5, r5, #5
 800e760:	f04f 0b01 	mov.w	fp, #1
 800e764:	464a      	mov	r2, r9
 800e766:	4616      	mov	r6, r2
 800e768:	3201      	adds	r2, #1
 800e76a:	7830      	ldrb	r0, [r6, #0]
 800e76c:	f7ff ffb0 	bl	800e6d0 <__hexdig_fun>
 800e770:	2800      	cmp	r0, #0
 800e772:	d1f8      	bne.n	800e766 <__gethex+0x6a>
 800e774:	498d      	ldr	r1, [pc, #564]	@ (800e9ac <__gethex+0x2b0>)
 800e776:	2201      	movs	r2, #1
 800e778:	4630      	mov	r0, r6
 800e77a:	f7fd f934 	bl	800b9e6 <strncmp>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d13f      	bne.n	800e802 <__gethex+0x106>
 800e782:	b944      	cbnz	r4, 800e796 <__gethex+0x9a>
 800e784:	1c74      	adds	r4, r6, #1
 800e786:	4622      	mov	r2, r4
 800e788:	4616      	mov	r6, r2
 800e78a:	3201      	adds	r2, #1
 800e78c:	7830      	ldrb	r0, [r6, #0]
 800e78e:	f7ff ff9f 	bl	800e6d0 <__hexdig_fun>
 800e792:	2800      	cmp	r0, #0
 800e794:	d1f8      	bne.n	800e788 <__gethex+0x8c>
 800e796:	1ba4      	subs	r4, r4, r6
 800e798:	00a7      	lsls	r7, r4, #2
 800e79a:	7833      	ldrb	r3, [r6, #0]
 800e79c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e7a0:	2b50      	cmp	r3, #80	@ 0x50
 800e7a2:	d13e      	bne.n	800e822 <__gethex+0x126>
 800e7a4:	7873      	ldrb	r3, [r6, #1]
 800e7a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e7a8:	d033      	beq.n	800e812 <__gethex+0x116>
 800e7aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800e7ac:	d034      	beq.n	800e818 <__gethex+0x11c>
 800e7ae:	1c71      	adds	r1, r6, #1
 800e7b0:	2400      	movs	r4, #0
 800e7b2:	7808      	ldrb	r0, [r1, #0]
 800e7b4:	f7ff ff8c 	bl	800e6d0 <__hexdig_fun>
 800e7b8:	1e43      	subs	r3, r0, #1
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	2b18      	cmp	r3, #24
 800e7be:	d830      	bhi.n	800e822 <__gethex+0x126>
 800e7c0:	f1a0 0210 	sub.w	r2, r0, #16
 800e7c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7c8:	f7ff ff82 	bl	800e6d0 <__hexdig_fun>
 800e7cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7d0:	fa5f fc8c 	uxtb.w	ip, ip
 800e7d4:	f1bc 0f18 	cmp.w	ip, #24
 800e7d8:	f04f 030a 	mov.w	r3, #10
 800e7dc:	d91e      	bls.n	800e81c <__gethex+0x120>
 800e7de:	b104      	cbz	r4, 800e7e2 <__gethex+0xe6>
 800e7e0:	4252      	negs	r2, r2
 800e7e2:	4417      	add	r7, r2
 800e7e4:	f8ca 1000 	str.w	r1, [sl]
 800e7e8:	b1ed      	cbz	r5, 800e826 <__gethex+0x12a>
 800e7ea:	f1bb 0f00 	cmp.w	fp, #0
 800e7ee:	bf0c      	ite	eq
 800e7f0:	2506      	moveq	r5, #6
 800e7f2:	2500      	movne	r5, #0
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	b005      	add	sp, #20
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	2500      	movs	r5, #0
 800e7fe:	462c      	mov	r4, r5
 800e800:	e7b0      	b.n	800e764 <__gethex+0x68>
 800e802:	2c00      	cmp	r4, #0
 800e804:	d1c7      	bne.n	800e796 <__gethex+0x9a>
 800e806:	4627      	mov	r7, r4
 800e808:	e7c7      	b.n	800e79a <__gethex+0x9e>
 800e80a:	464e      	mov	r6, r9
 800e80c:	462f      	mov	r7, r5
 800e80e:	2501      	movs	r5, #1
 800e810:	e7c3      	b.n	800e79a <__gethex+0x9e>
 800e812:	2400      	movs	r4, #0
 800e814:	1cb1      	adds	r1, r6, #2
 800e816:	e7cc      	b.n	800e7b2 <__gethex+0xb6>
 800e818:	2401      	movs	r4, #1
 800e81a:	e7fb      	b.n	800e814 <__gethex+0x118>
 800e81c:	fb03 0002 	mla	r0, r3, r2, r0
 800e820:	e7ce      	b.n	800e7c0 <__gethex+0xc4>
 800e822:	4631      	mov	r1, r6
 800e824:	e7de      	b.n	800e7e4 <__gethex+0xe8>
 800e826:	eba6 0309 	sub.w	r3, r6, r9
 800e82a:	3b01      	subs	r3, #1
 800e82c:	4629      	mov	r1, r5
 800e82e:	2b07      	cmp	r3, #7
 800e830:	dc0a      	bgt.n	800e848 <__gethex+0x14c>
 800e832:	9801      	ldr	r0, [sp, #4]
 800e834:	f7fe f856 	bl	800c8e4 <_Balloc>
 800e838:	4604      	mov	r4, r0
 800e83a:	b940      	cbnz	r0, 800e84e <__gethex+0x152>
 800e83c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9b0 <__gethex+0x2b4>)
 800e83e:	4602      	mov	r2, r0
 800e840:	21e4      	movs	r1, #228	@ 0xe4
 800e842:	485c      	ldr	r0, [pc, #368]	@ (800e9b4 <__gethex+0x2b8>)
 800e844:	f7ff fec0 	bl	800e5c8 <__assert_func>
 800e848:	3101      	adds	r1, #1
 800e84a:	105b      	asrs	r3, r3, #1
 800e84c:	e7ef      	b.n	800e82e <__gethex+0x132>
 800e84e:	f100 0a14 	add.w	sl, r0, #20
 800e852:	2300      	movs	r3, #0
 800e854:	4655      	mov	r5, sl
 800e856:	469b      	mov	fp, r3
 800e858:	45b1      	cmp	r9, r6
 800e85a:	d337      	bcc.n	800e8cc <__gethex+0x1d0>
 800e85c:	f845 bb04 	str.w	fp, [r5], #4
 800e860:	eba5 050a 	sub.w	r5, r5, sl
 800e864:	10ad      	asrs	r5, r5, #2
 800e866:	6125      	str	r5, [r4, #16]
 800e868:	4658      	mov	r0, fp
 800e86a:	f7fe f92d 	bl	800cac8 <__hi0bits>
 800e86e:	016d      	lsls	r5, r5, #5
 800e870:	f8d8 6000 	ldr.w	r6, [r8]
 800e874:	1a2d      	subs	r5, r5, r0
 800e876:	42b5      	cmp	r5, r6
 800e878:	dd54      	ble.n	800e924 <__gethex+0x228>
 800e87a:	1bad      	subs	r5, r5, r6
 800e87c:	4629      	mov	r1, r5
 800e87e:	4620      	mov	r0, r4
 800e880:	f7fe fcbe 	bl	800d200 <__any_on>
 800e884:	4681      	mov	r9, r0
 800e886:	b178      	cbz	r0, 800e8a8 <__gethex+0x1ac>
 800e888:	1e6b      	subs	r3, r5, #1
 800e88a:	1159      	asrs	r1, r3, #5
 800e88c:	f003 021f 	and.w	r2, r3, #31
 800e890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e894:	f04f 0901 	mov.w	r9, #1
 800e898:	fa09 f202 	lsl.w	r2, r9, r2
 800e89c:	420a      	tst	r2, r1
 800e89e:	d003      	beq.n	800e8a8 <__gethex+0x1ac>
 800e8a0:	454b      	cmp	r3, r9
 800e8a2:	dc36      	bgt.n	800e912 <__gethex+0x216>
 800e8a4:	f04f 0902 	mov.w	r9, #2
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f7ff febe 	bl	800e62c <rshift>
 800e8b0:	442f      	add	r7, r5
 800e8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8b6:	42bb      	cmp	r3, r7
 800e8b8:	da42      	bge.n	800e940 <__gethex+0x244>
 800e8ba:	9801      	ldr	r0, [sp, #4]
 800e8bc:	4621      	mov	r1, r4
 800e8be:	f7fe f851 	bl	800c964 <_Bfree>
 800e8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	6013      	str	r3, [r2, #0]
 800e8c8:	25a3      	movs	r5, #163	@ 0xa3
 800e8ca:	e793      	b.n	800e7f4 <__gethex+0xf8>
 800e8cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e8d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e8d2:	d012      	beq.n	800e8fa <__gethex+0x1fe>
 800e8d4:	2b20      	cmp	r3, #32
 800e8d6:	d104      	bne.n	800e8e2 <__gethex+0x1e6>
 800e8d8:	f845 bb04 	str.w	fp, [r5], #4
 800e8dc:	f04f 0b00 	mov.w	fp, #0
 800e8e0:	465b      	mov	r3, fp
 800e8e2:	7830      	ldrb	r0, [r6, #0]
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	f7ff fef3 	bl	800e6d0 <__hexdig_fun>
 800e8ea:	9b03      	ldr	r3, [sp, #12]
 800e8ec:	f000 000f 	and.w	r0, r0, #15
 800e8f0:	4098      	lsls	r0, r3
 800e8f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	e7ae      	b.n	800e858 <__gethex+0x15c>
 800e8fa:	45b1      	cmp	r9, r6
 800e8fc:	d8ea      	bhi.n	800e8d4 <__gethex+0x1d8>
 800e8fe:	492b      	ldr	r1, [pc, #172]	@ (800e9ac <__gethex+0x2b0>)
 800e900:	9303      	str	r3, [sp, #12]
 800e902:	2201      	movs	r2, #1
 800e904:	4630      	mov	r0, r6
 800e906:	f7fd f86e 	bl	800b9e6 <strncmp>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d1e1      	bne.n	800e8d4 <__gethex+0x1d8>
 800e910:	e7a2      	b.n	800e858 <__gethex+0x15c>
 800e912:	1ea9      	subs	r1, r5, #2
 800e914:	4620      	mov	r0, r4
 800e916:	f7fe fc73 	bl	800d200 <__any_on>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d0c2      	beq.n	800e8a4 <__gethex+0x1a8>
 800e91e:	f04f 0903 	mov.w	r9, #3
 800e922:	e7c1      	b.n	800e8a8 <__gethex+0x1ac>
 800e924:	da09      	bge.n	800e93a <__gethex+0x23e>
 800e926:	1b75      	subs	r5, r6, r5
 800e928:	4621      	mov	r1, r4
 800e92a:	9801      	ldr	r0, [sp, #4]
 800e92c:	462a      	mov	r2, r5
 800e92e:	f7fe fa31 	bl	800cd94 <__lshift>
 800e932:	1b7f      	subs	r7, r7, r5
 800e934:	4604      	mov	r4, r0
 800e936:	f100 0a14 	add.w	sl, r0, #20
 800e93a:	f04f 0900 	mov.w	r9, #0
 800e93e:	e7b8      	b.n	800e8b2 <__gethex+0x1b6>
 800e940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e944:	42bd      	cmp	r5, r7
 800e946:	dd6f      	ble.n	800ea28 <__gethex+0x32c>
 800e948:	1bed      	subs	r5, r5, r7
 800e94a:	42ae      	cmp	r6, r5
 800e94c:	dc34      	bgt.n	800e9b8 <__gethex+0x2bc>
 800e94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d022      	beq.n	800e99c <__gethex+0x2a0>
 800e956:	2b03      	cmp	r3, #3
 800e958:	d024      	beq.n	800e9a4 <__gethex+0x2a8>
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d115      	bne.n	800e98a <__gethex+0x28e>
 800e95e:	42ae      	cmp	r6, r5
 800e960:	d113      	bne.n	800e98a <__gethex+0x28e>
 800e962:	2e01      	cmp	r6, #1
 800e964:	d10b      	bne.n	800e97e <__gethex+0x282>
 800e966:	9a02      	ldr	r2, [sp, #8]
 800e968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e96c:	6013      	str	r3, [r2, #0]
 800e96e:	2301      	movs	r3, #1
 800e970:	6123      	str	r3, [r4, #16]
 800e972:	f8ca 3000 	str.w	r3, [sl]
 800e976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e978:	2562      	movs	r5, #98	@ 0x62
 800e97a:	601c      	str	r4, [r3, #0]
 800e97c:	e73a      	b.n	800e7f4 <__gethex+0xf8>
 800e97e:	1e71      	subs	r1, r6, #1
 800e980:	4620      	mov	r0, r4
 800e982:	f7fe fc3d 	bl	800d200 <__any_on>
 800e986:	2800      	cmp	r0, #0
 800e988:	d1ed      	bne.n	800e966 <__gethex+0x26a>
 800e98a:	9801      	ldr	r0, [sp, #4]
 800e98c:	4621      	mov	r1, r4
 800e98e:	f7fd ffe9 	bl	800c964 <_Bfree>
 800e992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e994:	2300      	movs	r3, #0
 800e996:	6013      	str	r3, [r2, #0]
 800e998:	2550      	movs	r5, #80	@ 0x50
 800e99a:	e72b      	b.n	800e7f4 <__gethex+0xf8>
 800e99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1f3      	bne.n	800e98a <__gethex+0x28e>
 800e9a2:	e7e0      	b.n	800e966 <__gethex+0x26a>
 800e9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1dd      	bne.n	800e966 <__gethex+0x26a>
 800e9aa:	e7ee      	b.n	800e98a <__gethex+0x28e>
 800e9ac:	0800f330 	.word	0x0800f330
 800e9b0:	0800f1ca 	.word	0x0800f1ca
 800e9b4:	0800f3dd 	.word	0x0800f3dd
 800e9b8:	1e6f      	subs	r7, r5, #1
 800e9ba:	f1b9 0f00 	cmp.w	r9, #0
 800e9be:	d130      	bne.n	800ea22 <__gethex+0x326>
 800e9c0:	b127      	cbz	r7, 800e9cc <__gethex+0x2d0>
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f7fe fc1b 	bl	800d200 <__any_on>
 800e9ca:	4681      	mov	r9, r0
 800e9cc:	117a      	asrs	r2, r7, #5
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e9d4:	f007 071f 	and.w	r7, r7, #31
 800e9d8:	40bb      	lsls	r3, r7
 800e9da:	4213      	tst	r3, r2
 800e9dc:	4629      	mov	r1, r5
 800e9de:	4620      	mov	r0, r4
 800e9e0:	bf18      	it	ne
 800e9e2:	f049 0902 	orrne.w	r9, r9, #2
 800e9e6:	f7ff fe21 	bl	800e62c <rshift>
 800e9ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e9ee:	1b76      	subs	r6, r6, r5
 800e9f0:	2502      	movs	r5, #2
 800e9f2:	f1b9 0f00 	cmp.w	r9, #0
 800e9f6:	d047      	beq.n	800ea88 <__gethex+0x38c>
 800e9f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d015      	beq.n	800ea2c <__gethex+0x330>
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d017      	beq.n	800ea34 <__gethex+0x338>
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d109      	bne.n	800ea1c <__gethex+0x320>
 800ea08:	f019 0f02 	tst.w	r9, #2
 800ea0c:	d006      	beq.n	800ea1c <__gethex+0x320>
 800ea0e:	f8da 3000 	ldr.w	r3, [sl]
 800ea12:	ea49 0903 	orr.w	r9, r9, r3
 800ea16:	f019 0f01 	tst.w	r9, #1
 800ea1a:	d10e      	bne.n	800ea3a <__gethex+0x33e>
 800ea1c:	f045 0510 	orr.w	r5, r5, #16
 800ea20:	e032      	b.n	800ea88 <__gethex+0x38c>
 800ea22:	f04f 0901 	mov.w	r9, #1
 800ea26:	e7d1      	b.n	800e9cc <__gethex+0x2d0>
 800ea28:	2501      	movs	r5, #1
 800ea2a:	e7e2      	b.n	800e9f2 <__gethex+0x2f6>
 800ea2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea2e:	f1c3 0301 	rsb	r3, r3, #1
 800ea32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0f0      	beq.n	800ea1c <__gethex+0x320>
 800ea3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea3e:	f104 0314 	add.w	r3, r4, #20
 800ea42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea4a:	f04f 0c00 	mov.w	ip, #0
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea58:	d01b      	beq.n	800ea92 <__gethex+0x396>
 800ea5a:	3201      	adds	r2, #1
 800ea5c:	6002      	str	r2, [r0, #0]
 800ea5e:	2d02      	cmp	r5, #2
 800ea60:	f104 0314 	add.w	r3, r4, #20
 800ea64:	d13c      	bne.n	800eae0 <__gethex+0x3e4>
 800ea66:	f8d8 2000 	ldr.w	r2, [r8]
 800ea6a:	3a01      	subs	r2, #1
 800ea6c:	42b2      	cmp	r2, r6
 800ea6e:	d109      	bne.n	800ea84 <__gethex+0x388>
 800ea70:	1171      	asrs	r1, r6, #5
 800ea72:	2201      	movs	r2, #1
 800ea74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea78:	f006 061f 	and.w	r6, r6, #31
 800ea7c:	fa02 f606 	lsl.w	r6, r2, r6
 800ea80:	421e      	tst	r6, r3
 800ea82:	d13a      	bne.n	800eafa <__gethex+0x3fe>
 800ea84:	f045 0520 	orr.w	r5, r5, #32
 800ea88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea8a:	601c      	str	r4, [r3, #0]
 800ea8c:	9b02      	ldr	r3, [sp, #8]
 800ea8e:	601f      	str	r7, [r3, #0]
 800ea90:	e6b0      	b.n	800e7f4 <__gethex+0xf8>
 800ea92:	4299      	cmp	r1, r3
 800ea94:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea98:	d8d9      	bhi.n	800ea4e <__gethex+0x352>
 800ea9a:	68a3      	ldr	r3, [r4, #8]
 800ea9c:	459b      	cmp	fp, r3
 800ea9e:	db17      	blt.n	800ead0 <__gethex+0x3d4>
 800eaa0:	6861      	ldr	r1, [r4, #4]
 800eaa2:	9801      	ldr	r0, [sp, #4]
 800eaa4:	3101      	adds	r1, #1
 800eaa6:	f7fd ff1d 	bl	800c8e4 <_Balloc>
 800eaaa:	4681      	mov	r9, r0
 800eaac:	b918      	cbnz	r0, 800eab6 <__gethex+0x3ba>
 800eaae:	4b1a      	ldr	r3, [pc, #104]	@ (800eb18 <__gethex+0x41c>)
 800eab0:	4602      	mov	r2, r0
 800eab2:	2184      	movs	r1, #132	@ 0x84
 800eab4:	e6c5      	b.n	800e842 <__gethex+0x146>
 800eab6:	6922      	ldr	r2, [r4, #16]
 800eab8:	3202      	adds	r2, #2
 800eaba:	f104 010c 	add.w	r1, r4, #12
 800eabe:	0092      	lsls	r2, r2, #2
 800eac0:	300c      	adds	r0, #12
 800eac2:	f7fd f81a 	bl	800bafa <memcpy>
 800eac6:	4621      	mov	r1, r4
 800eac8:	9801      	ldr	r0, [sp, #4]
 800eaca:	f7fd ff4b 	bl	800c964 <_Bfree>
 800eace:	464c      	mov	r4, r9
 800ead0:	6923      	ldr	r3, [r4, #16]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ead8:	6122      	str	r2, [r4, #16]
 800eada:	2201      	movs	r2, #1
 800eadc:	615a      	str	r2, [r3, #20]
 800eade:	e7be      	b.n	800ea5e <__gethex+0x362>
 800eae0:	6922      	ldr	r2, [r4, #16]
 800eae2:	455a      	cmp	r2, fp
 800eae4:	dd0b      	ble.n	800eafe <__gethex+0x402>
 800eae6:	2101      	movs	r1, #1
 800eae8:	4620      	mov	r0, r4
 800eaea:	f7ff fd9f 	bl	800e62c <rshift>
 800eaee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaf2:	3701      	adds	r7, #1
 800eaf4:	42bb      	cmp	r3, r7
 800eaf6:	f6ff aee0 	blt.w	800e8ba <__gethex+0x1be>
 800eafa:	2501      	movs	r5, #1
 800eafc:	e7c2      	b.n	800ea84 <__gethex+0x388>
 800eafe:	f016 061f 	ands.w	r6, r6, #31
 800eb02:	d0fa      	beq.n	800eafa <__gethex+0x3fe>
 800eb04:	4453      	add	r3, sl
 800eb06:	f1c6 0620 	rsb	r6, r6, #32
 800eb0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb0e:	f7fd ffdb 	bl	800cac8 <__hi0bits>
 800eb12:	42b0      	cmp	r0, r6
 800eb14:	dbe7      	blt.n	800eae6 <__gethex+0x3ea>
 800eb16:	e7f0      	b.n	800eafa <__gethex+0x3fe>
 800eb18:	0800f1ca 	.word	0x0800f1ca

0800eb1c <L_shift>:
 800eb1c:	f1c2 0208 	rsb	r2, r2, #8
 800eb20:	0092      	lsls	r2, r2, #2
 800eb22:	b570      	push	{r4, r5, r6, lr}
 800eb24:	f1c2 0620 	rsb	r6, r2, #32
 800eb28:	6843      	ldr	r3, [r0, #4]
 800eb2a:	6804      	ldr	r4, [r0, #0]
 800eb2c:	fa03 f506 	lsl.w	r5, r3, r6
 800eb30:	432c      	orrs	r4, r5
 800eb32:	40d3      	lsrs	r3, r2
 800eb34:	6004      	str	r4, [r0, #0]
 800eb36:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb3a:	4288      	cmp	r0, r1
 800eb3c:	d3f4      	bcc.n	800eb28 <L_shift+0xc>
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}

0800eb40 <__match>:
 800eb40:	b530      	push	{r4, r5, lr}
 800eb42:	6803      	ldr	r3, [r0, #0]
 800eb44:	3301      	adds	r3, #1
 800eb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb4a:	b914      	cbnz	r4, 800eb52 <__match+0x12>
 800eb4c:	6003      	str	r3, [r0, #0]
 800eb4e:	2001      	movs	r0, #1
 800eb50:	bd30      	pop	{r4, r5, pc}
 800eb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eb5a:	2d19      	cmp	r5, #25
 800eb5c:	bf98      	it	ls
 800eb5e:	3220      	addls	r2, #32
 800eb60:	42a2      	cmp	r2, r4
 800eb62:	d0f0      	beq.n	800eb46 <__match+0x6>
 800eb64:	2000      	movs	r0, #0
 800eb66:	e7f3      	b.n	800eb50 <__match+0x10>

0800eb68 <__hexnan>:
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	680b      	ldr	r3, [r1, #0]
 800eb6e:	6801      	ldr	r1, [r0, #0]
 800eb70:	115e      	asrs	r6, r3, #5
 800eb72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb76:	f013 031f 	ands.w	r3, r3, #31
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	bf18      	it	ne
 800eb7e:	3604      	addne	r6, #4
 800eb80:	2500      	movs	r5, #0
 800eb82:	1f37      	subs	r7, r6, #4
 800eb84:	4682      	mov	sl, r0
 800eb86:	4690      	mov	r8, r2
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb8e:	46b9      	mov	r9, r7
 800eb90:	463c      	mov	r4, r7
 800eb92:	9502      	str	r5, [sp, #8]
 800eb94:	46ab      	mov	fp, r5
 800eb96:	784a      	ldrb	r2, [r1, #1]
 800eb98:	1c4b      	adds	r3, r1, #1
 800eb9a:	9303      	str	r3, [sp, #12]
 800eb9c:	b342      	cbz	r2, 800ebf0 <__hexnan+0x88>
 800eb9e:	4610      	mov	r0, r2
 800eba0:	9105      	str	r1, [sp, #20]
 800eba2:	9204      	str	r2, [sp, #16]
 800eba4:	f7ff fd94 	bl	800e6d0 <__hexdig_fun>
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	d151      	bne.n	800ec50 <__hexnan+0xe8>
 800ebac:	9a04      	ldr	r2, [sp, #16]
 800ebae:	9905      	ldr	r1, [sp, #20]
 800ebb0:	2a20      	cmp	r2, #32
 800ebb2:	d818      	bhi.n	800ebe6 <__hexnan+0x7e>
 800ebb4:	9b02      	ldr	r3, [sp, #8]
 800ebb6:	459b      	cmp	fp, r3
 800ebb8:	dd13      	ble.n	800ebe2 <__hexnan+0x7a>
 800ebba:	454c      	cmp	r4, r9
 800ebbc:	d206      	bcs.n	800ebcc <__hexnan+0x64>
 800ebbe:	2d07      	cmp	r5, #7
 800ebc0:	dc04      	bgt.n	800ebcc <__hexnan+0x64>
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7ff ffa8 	bl	800eb1c <L_shift>
 800ebcc:	4544      	cmp	r4, r8
 800ebce:	d952      	bls.n	800ec76 <__hexnan+0x10e>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f1a4 0904 	sub.w	r9, r4, #4
 800ebd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebda:	f8cd b008 	str.w	fp, [sp, #8]
 800ebde:	464c      	mov	r4, r9
 800ebe0:	461d      	mov	r5, r3
 800ebe2:	9903      	ldr	r1, [sp, #12]
 800ebe4:	e7d7      	b.n	800eb96 <__hexnan+0x2e>
 800ebe6:	2a29      	cmp	r2, #41	@ 0x29
 800ebe8:	d157      	bne.n	800ec9a <__hexnan+0x132>
 800ebea:	3102      	adds	r1, #2
 800ebec:	f8ca 1000 	str.w	r1, [sl]
 800ebf0:	f1bb 0f00 	cmp.w	fp, #0
 800ebf4:	d051      	beq.n	800ec9a <__hexnan+0x132>
 800ebf6:	454c      	cmp	r4, r9
 800ebf8:	d206      	bcs.n	800ec08 <__hexnan+0xa0>
 800ebfa:	2d07      	cmp	r5, #7
 800ebfc:	dc04      	bgt.n	800ec08 <__hexnan+0xa0>
 800ebfe:	462a      	mov	r2, r5
 800ec00:	4649      	mov	r1, r9
 800ec02:	4620      	mov	r0, r4
 800ec04:	f7ff ff8a 	bl	800eb1c <L_shift>
 800ec08:	4544      	cmp	r4, r8
 800ec0a:	d936      	bls.n	800ec7a <__hexnan+0x112>
 800ec0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ec10:	4623      	mov	r3, r4
 800ec12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec1a:	429f      	cmp	r7, r3
 800ec1c:	d2f9      	bcs.n	800ec12 <__hexnan+0xaa>
 800ec1e:	1b3b      	subs	r3, r7, r4
 800ec20:	f023 0303 	bic.w	r3, r3, #3
 800ec24:	3304      	adds	r3, #4
 800ec26:	3401      	adds	r4, #1
 800ec28:	3e03      	subs	r6, #3
 800ec2a:	42b4      	cmp	r4, r6
 800ec2c:	bf88      	it	hi
 800ec2e:	2304      	movhi	r3, #4
 800ec30:	4443      	add	r3, r8
 800ec32:	2200      	movs	r2, #0
 800ec34:	f843 2b04 	str.w	r2, [r3], #4
 800ec38:	429f      	cmp	r7, r3
 800ec3a:	d2fb      	bcs.n	800ec34 <__hexnan+0xcc>
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	b91b      	cbnz	r3, 800ec48 <__hexnan+0xe0>
 800ec40:	4547      	cmp	r7, r8
 800ec42:	d128      	bne.n	800ec96 <__hexnan+0x12e>
 800ec44:	2301      	movs	r3, #1
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	2005      	movs	r0, #5
 800ec4a:	b007      	add	sp, #28
 800ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	3501      	adds	r5, #1
 800ec52:	2d08      	cmp	r5, #8
 800ec54:	f10b 0b01 	add.w	fp, fp, #1
 800ec58:	dd06      	ble.n	800ec68 <__hexnan+0x100>
 800ec5a:	4544      	cmp	r4, r8
 800ec5c:	d9c1      	bls.n	800ebe2 <__hexnan+0x7a>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec64:	2501      	movs	r5, #1
 800ec66:	3c04      	subs	r4, #4
 800ec68:	6822      	ldr	r2, [r4, #0]
 800ec6a:	f000 000f 	and.w	r0, r0, #15
 800ec6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec72:	6020      	str	r0, [r4, #0]
 800ec74:	e7b5      	b.n	800ebe2 <__hexnan+0x7a>
 800ec76:	2508      	movs	r5, #8
 800ec78:	e7b3      	b.n	800ebe2 <__hexnan+0x7a>
 800ec7a:	9b01      	ldr	r3, [sp, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0dd      	beq.n	800ec3c <__hexnan+0xd4>
 800ec80:	f1c3 0320 	rsb	r3, r3, #32
 800ec84:	f04f 32ff 	mov.w	r2, #4294967295
 800ec88:	40da      	lsrs	r2, r3
 800ec8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ec8e:	4013      	ands	r3, r2
 800ec90:	f846 3c04 	str.w	r3, [r6, #-4]
 800ec94:	e7d2      	b.n	800ec3c <__hexnan+0xd4>
 800ec96:	3f04      	subs	r7, #4
 800ec98:	e7d0      	b.n	800ec3c <__hexnan+0xd4>
 800ec9a:	2004      	movs	r0, #4
 800ec9c:	e7d5      	b.n	800ec4a <__hexnan+0xe2>

0800ec9e <__ascii_mbtowc>:
 800ec9e:	b082      	sub	sp, #8
 800eca0:	b901      	cbnz	r1, 800eca4 <__ascii_mbtowc+0x6>
 800eca2:	a901      	add	r1, sp, #4
 800eca4:	b142      	cbz	r2, 800ecb8 <__ascii_mbtowc+0x1a>
 800eca6:	b14b      	cbz	r3, 800ecbc <__ascii_mbtowc+0x1e>
 800eca8:	7813      	ldrb	r3, [r2, #0]
 800ecaa:	600b      	str	r3, [r1, #0]
 800ecac:	7812      	ldrb	r2, [r2, #0]
 800ecae:	1e10      	subs	r0, r2, #0
 800ecb0:	bf18      	it	ne
 800ecb2:	2001      	movne	r0, #1
 800ecb4:	b002      	add	sp, #8
 800ecb6:	4770      	bx	lr
 800ecb8:	4610      	mov	r0, r2
 800ecba:	e7fb      	b.n	800ecb4 <__ascii_mbtowc+0x16>
 800ecbc:	f06f 0001 	mvn.w	r0, #1
 800ecc0:	e7f8      	b.n	800ecb4 <__ascii_mbtowc+0x16>

0800ecc2 <_realloc_r>:
 800ecc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc6:	4680      	mov	r8, r0
 800ecc8:	4615      	mov	r5, r2
 800ecca:	460c      	mov	r4, r1
 800eccc:	b921      	cbnz	r1, 800ecd8 <_realloc_r+0x16>
 800ecce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd2:	4611      	mov	r1, r2
 800ecd4:	f7fd bd7a 	b.w	800c7cc <_malloc_r>
 800ecd8:	b92a      	cbnz	r2, 800ece6 <_realloc_r+0x24>
 800ecda:	f7fd fd03 	bl	800c6e4 <_free_r>
 800ecde:	2400      	movs	r4, #0
 800ece0:	4620      	mov	r0, r4
 800ece2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece6:	f000 f8c4 	bl	800ee72 <_malloc_usable_size_r>
 800ecea:	4285      	cmp	r5, r0
 800ecec:	4606      	mov	r6, r0
 800ecee:	d802      	bhi.n	800ecf6 <_realloc_r+0x34>
 800ecf0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ecf4:	d8f4      	bhi.n	800ece0 <_realloc_r+0x1e>
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	4640      	mov	r0, r8
 800ecfa:	f7fd fd67 	bl	800c7cc <_malloc_r>
 800ecfe:	4607      	mov	r7, r0
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d0ec      	beq.n	800ecde <_realloc_r+0x1c>
 800ed04:	42b5      	cmp	r5, r6
 800ed06:	462a      	mov	r2, r5
 800ed08:	4621      	mov	r1, r4
 800ed0a:	bf28      	it	cs
 800ed0c:	4632      	movcs	r2, r6
 800ed0e:	f7fc fef4 	bl	800bafa <memcpy>
 800ed12:	4621      	mov	r1, r4
 800ed14:	4640      	mov	r0, r8
 800ed16:	f7fd fce5 	bl	800c6e4 <_free_r>
 800ed1a:	463c      	mov	r4, r7
 800ed1c:	e7e0      	b.n	800ece0 <_realloc_r+0x1e>

0800ed1e <__ascii_wctomb>:
 800ed1e:	4603      	mov	r3, r0
 800ed20:	4608      	mov	r0, r1
 800ed22:	b141      	cbz	r1, 800ed36 <__ascii_wctomb+0x18>
 800ed24:	2aff      	cmp	r2, #255	@ 0xff
 800ed26:	d904      	bls.n	800ed32 <__ascii_wctomb+0x14>
 800ed28:	228a      	movs	r2, #138	@ 0x8a
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed30:	4770      	bx	lr
 800ed32:	700a      	strb	r2, [r1, #0]
 800ed34:	2001      	movs	r0, #1
 800ed36:	4770      	bx	lr

0800ed38 <fiprintf>:
 800ed38:	b40e      	push	{r1, r2, r3}
 800ed3a:	b503      	push	{r0, r1, lr}
 800ed3c:	4601      	mov	r1, r0
 800ed3e:	ab03      	add	r3, sp, #12
 800ed40:	4805      	ldr	r0, [pc, #20]	@ (800ed58 <fiprintf+0x20>)
 800ed42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed46:	6800      	ldr	r0, [r0, #0]
 800ed48:	9301      	str	r3, [sp, #4]
 800ed4a:	f7ff f9b3 	bl	800e0b4 <_vfiprintf_r>
 800ed4e:	b002      	add	sp, #8
 800ed50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed54:	b003      	add	sp, #12
 800ed56:	4770      	bx	lr
 800ed58:	24000028 	.word	0x24000028

0800ed5c <__swhatbuf_r>:
 800ed5c:	b570      	push	{r4, r5, r6, lr}
 800ed5e:	460c      	mov	r4, r1
 800ed60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed64:	2900      	cmp	r1, #0
 800ed66:	b096      	sub	sp, #88	@ 0x58
 800ed68:	4615      	mov	r5, r2
 800ed6a:	461e      	mov	r6, r3
 800ed6c:	da0d      	bge.n	800ed8a <__swhatbuf_r+0x2e>
 800ed6e:	89a3      	ldrh	r3, [r4, #12]
 800ed70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed74:	f04f 0100 	mov.w	r1, #0
 800ed78:	bf14      	ite	ne
 800ed7a:	2340      	movne	r3, #64	@ 0x40
 800ed7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed80:	2000      	movs	r0, #0
 800ed82:	6031      	str	r1, [r6, #0]
 800ed84:	602b      	str	r3, [r5, #0]
 800ed86:	b016      	add	sp, #88	@ 0x58
 800ed88:	bd70      	pop	{r4, r5, r6, pc}
 800ed8a:	466a      	mov	r2, sp
 800ed8c:	f000 f848 	bl	800ee20 <_fstat_r>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	dbec      	blt.n	800ed6e <__swhatbuf_r+0x12>
 800ed94:	9901      	ldr	r1, [sp, #4]
 800ed96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed9e:	4259      	negs	r1, r3
 800eda0:	4159      	adcs	r1, r3
 800eda2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eda6:	e7eb      	b.n	800ed80 <__swhatbuf_r+0x24>

0800eda8 <__smakebuf_r>:
 800eda8:	898b      	ldrh	r3, [r1, #12]
 800edaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edac:	079d      	lsls	r5, r3, #30
 800edae:	4606      	mov	r6, r0
 800edb0:	460c      	mov	r4, r1
 800edb2:	d507      	bpl.n	800edc4 <__smakebuf_r+0x1c>
 800edb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	6123      	str	r3, [r4, #16]
 800edbc:	2301      	movs	r3, #1
 800edbe:	6163      	str	r3, [r4, #20]
 800edc0:	b003      	add	sp, #12
 800edc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edc4:	ab01      	add	r3, sp, #4
 800edc6:	466a      	mov	r2, sp
 800edc8:	f7ff ffc8 	bl	800ed5c <__swhatbuf_r>
 800edcc:	9f00      	ldr	r7, [sp, #0]
 800edce:	4605      	mov	r5, r0
 800edd0:	4639      	mov	r1, r7
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7fd fcfa 	bl	800c7cc <_malloc_r>
 800edd8:	b948      	cbnz	r0, 800edee <__smakebuf_r+0x46>
 800edda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edde:	059a      	lsls	r2, r3, #22
 800ede0:	d4ee      	bmi.n	800edc0 <__smakebuf_r+0x18>
 800ede2:	f023 0303 	bic.w	r3, r3, #3
 800ede6:	f043 0302 	orr.w	r3, r3, #2
 800edea:	81a3      	strh	r3, [r4, #12]
 800edec:	e7e2      	b.n	800edb4 <__smakebuf_r+0xc>
 800edee:	89a3      	ldrh	r3, [r4, #12]
 800edf0:	6020      	str	r0, [r4, #0]
 800edf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edf6:	81a3      	strh	r3, [r4, #12]
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edfe:	b15b      	cbz	r3, 800ee18 <__smakebuf_r+0x70>
 800ee00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee04:	4630      	mov	r0, r6
 800ee06:	f000 f81d 	bl	800ee44 <_isatty_r>
 800ee0a:	b128      	cbz	r0, 800ee18 <__smakebuf_r+0x70>
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	f023 0303 	bic.w	r3, r3, #3
 800ee12:	f043 0301 	orr.w	r3, r3, #1
 800ee16:	81a3      	strh	r3, [r4, #12]
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	431d      	orrs	r5, r3
 800ee1c:	81a5      	strh	r5, [r4, #12]
 800ee1e:	e7cf      	b.n	800edc0 <__smakebuf_r+0x18>

0800ee20 <_fstat_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4d07      	ldr	r5, [pc, #28]	@ (800ee40 <_fstat_r+0x20>)
 800ee24:	2300      	movs	r3, #0
 800ee26:	4604      	mov	r4, r0
 800ee28:	4608      	mov	r0, r1
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	602b      	str	r3, [r5, #0]
 800ee2e:	f7f2 fd4b 	bl	80018c8 <_fstat>
 800ee32:	1c43      	adds	r3, r0, #1
 800ee34:	d102      	bne.n	800ee3c <_fstat_r+0x1c>
 800ee36:	682b      	ldr	r3, [r5, #0]
 800ee38:	b103      	cbz	r3, 800ee3c <_fstat_r+0x1c>
 800ee3a:	6023      	str	r3, [r4, #0]
 800ee3c:	bd38      	pop	{r3, r4, r5, pc}
 800ee3e:	bf00      	nop
 800ee40:	24000504 	.word	0x24000504

0800ee44 <_isatty_r>:
 800ee44:	b538      	push	{r3, r4, r5, lr}
 800ee46:	4d06      	ldr	r5, [pc, #24]	@ (800ee60 <_isatty_r+0x1c>)
 800ee48:	2300      	movs	r3, #0
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	4608      	mov	r0, r1
 800ee4e:	602b      	str	r3, [r5, #0]
 800ee50:	f7f2 fd4a 	bl	80018e8 <_isatty>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_isatty_r+0x1a>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_isatty_r+0x1a>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	24000504 	.word	0x24000504

0800ee64 <abort>:
 800ee64:	b508      	push	{r3, lr}
 800ee66:	2006      	movs	r0, #6
 800ee68:	f000 f834 	bl	800eed4 <raise>
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	f7f2 fcdb 	bl	8001828 <_exit>

0800ee72 <_malloc_usable_size_r>:
 800ee72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee76:	1f18      	subs	r0, r3, #4
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bfbc      	itt	lt
 800ee7c:	580b      	ldrlt	r3, [r1, r0]
 800ee7e:	18c0      	addlt	r0, r0, r3
 800ee80:	4770      	bx	lr

0800ee82 <_raise_r>:
 800ee82:	291f      	cmp	r1, #31
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4605      	mov	r5, r0
 800ee88:	460c      	mov	r4, r1
 800ee8a:	d904      	bls.n	800ee96 <_raise_r+0x14>
 800ee8c:	2316      	movs	r3, #22
 800ee8e:	6003      	str	r3, [r0, #0]
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	bd38      	pop	{r3, r4, r5, pc}
 800ee96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee98:	b112      	cbz	r2, 800eea0 <_raise_r+0x1e>
 800ee9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee9e:	b94b      	cbnz	r3, 800eeb4 <_raise_r+0x32>
 800eea0:	4628      	mov	r0, r5
 800eea2:	f000 f831 	bl	800ef08 <_getpid_r>
 800eea6:	4622      	mov	r2, r4
 800eea8:	4601      	mov	r1, r0
 800eeaa:	4628      	mov	r0, r5
 800eeac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeb0:	f000 b818 	b.w	800eee4 <_kill_r>
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d00a      	beq.n	800eece <_raise_r+0x4c>
 800eeb8:	1c59      	adds	r1, r3, #1
 800eeba:	d103      	bne.n	800eec4 <_raise_r+0x42>
 800eebc:	2316      	movs	r3, #22
 800eebe:	6003      	str	r3, [r0, #0]
 800eec0:	2001      	movs	r0, #1
 800eec2:	e7e7      	b.n	800ee94 <_raise_r+0x12>
 800eec4:	2100      	movs	r1, #0
 800eec6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eeca:	4620      	mov	r0, r4
 800eecc:	4798      	blx	r3
 800eece:	2000      	movs	r0, #0
 800eed0:	e7e0      	b.n	800ee94 <_raise_r+0x12>
	...

0800eed4 <raise>:
 800eed4:	4b02      	ldr	r3, [pc, #8]	@ (800eee0 <raise+0xc>)
 800eed6:	4601      	mov	r1, r0
 800eed8:	6818      	ldr	r0, [r3, #0]
 800eeda:	f7ff bfd2 	b.w	800ee82 <_raise_r>
 800eede:	bf00      	nop
 800eee0:	24000028 	.word	0x24000028

0800eee4 <_kill_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d07      	ldr	r5, [pc, #28]	@ (800ef04 <_kill_r+0x20>)
 800eee8:	2300      	movs	r3, #0
 800eeea:	4604      	mov	r4, r0
 800eeec:	4608      	mov	r0, r1
 800eeee:	4611      	mov	r1, r2
 800eef0:	602b      	str	r3, [r5, #0]
 800eef2:	f7f2 fc89 	bl	8001808 <_kill>
 800eef6:	1c43      	adds	r3, r0, #1
 800eef8:	d102      	bne.n	800ef00 <_kill_r+0x1c>
 800eefa:	682b      	ldr	r3, [r5, #0]
 800eefc:	b103      	cbz	r3, 800ef00 <_kill_r+0x1c>
 800eefe:	6023      	str	r3, [r4, #0]
 800ef00:	bd38      	pop	{r3, r4, r5, pc}
 800ef02:	bf00      	nop
 800ef04:	24000504 	.word	0x24000504

0800ef08 <_getpid_r>:
 800ef08:	f7f2 bc76 	b.w	80017f8 <_getpid>

0800ef0c <_init>:
 800ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0e:	bf00      	nop
 800ef10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef12:	bc08      	pop	{r3}
 800ef14:	469e      	mov	lr, r3
 800ef16:	4770      	bx	lr

0800ef18 <_fini>:
 800ef18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1a:	bf00      	nop
 800ef1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef1e:	bc08      	pop	{r3}
 800ef20:	469e      	mov	lr, r3
 800ef22:	4770      	bx	lr
