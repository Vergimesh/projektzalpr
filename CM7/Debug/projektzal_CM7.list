
projektzal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d774  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800da18  0800da18  0000ea18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de98  0800de98  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800de98  0800de98  0000ee98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dea0  0800dea0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dea0  0800dea0  0000eea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dea4  0800dea4  0000eea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800dea8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  240001d8  0800e080  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400047c  0800e080  0000f47c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceeb  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361d  00000000  00000000  0002c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0002f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ec  00000000  00000000  00030cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003caab  00000000  00000000  00031dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002155d  00000000  00000000  0006e857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a008  00000000  00000000  0008fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f00  00000000  00000000  00219e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00220d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d9fc 	.word	0x0800d9fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800d9fc 	.word	0x0800d9fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <BMP280_Init>:
// File: bmp2.c
#include "bmp2.h"

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Configuration for control measurement register
    config[0] = 0xF4; // Address of control register
 8000b9c:	23f4      	movs	r3, #244	@ 0xf4
 8000b9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x27; // Normal mode, oversampling x1 for temperature
 8000ba0:	2327      	movs	r3, #39	@ 0x27
 8000ba2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	21ec      	movs	r1, #236	@ 0xec
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f001 ffea 	bl	8002b8c <HAL_I2C_Master_Transmit>

    // Configuration for configuration register
    config[0] = 0xF5; // Address of configuration register
 8000bb8:	23f5      	movs	r3, #245	@ 0xf5
 8000bba:	733b      	strb	r3, [r7, #12]
    config[1] = 0xA0; // Filter x4, standby time 1000 ms
 8000bbc:	23a0      	movs	r3, #160	@ 0xa0
 8000bbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	21ec      	movs	r1, #236	@ 0xec
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f001 ffdc 	bl	8002b8c <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    uint8_t calib_raw[24];

    // Read 24 bytes of calibration data starting at register 0x88
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0x88, 1, calib_raw, 24, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2318      	movs	r3, #24
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	21ec      	movs	r1, #236	@ 0xec
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 f8dd 	bl	8002dbc <HAL_I2C_Mem_Read>

    // Parse calibration data
    calib_data->dig_T1 = (uint16_t)(calib_raw[1] << 8 | calib_raw[0]);
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)(calib_raw[3] << 8 | calib_raw[2]);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)(calib_raw[5] << 8 | calib_raw[4]);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	809a      	strh	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    uint8_t temp_raw[3];
    int32_t temp_adc;
    float var1, var2, temperature;

    // Read 3 bytes of temperature data starting from register 0xFA
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0xFA, 1, temp_raw, 3, HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	22fa      	movs	r2, #250	@ 0xfa
 8000c66:	21ec      	movs	r1, #236	@ 0xec
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 f8a7 	bl	8002dbc <HAL_I2C_Mem_Read>

    // Combine bytes into 20-bit raw temperature value
    temp_adc = ((int32_t)(temp_raw[0] << 12)) | ((int32_t)(temp_raw[1] << 4)) | ((temp_raw[2] >> 4));
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	031a      	lsls	r2, r3, #12
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]

    // Compensate temperature using calibration data
    var1 = (((float)temp_adc) / 16384.0 - ((float)calib_data->dig_T1) / 1024.0) * ((float)calib_data->dig_T2);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c90:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d80 <BMP280_ReadTemperature+0x138>
 8000c94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ca8:	ed9f 4b37 	vldr	d4, [pc, #220]	@ 8000d88 <BMP280_ReadTemperature+0x140>
 8000cac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
    var2 = ((((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0) * (((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0)) * ((float)calib_data->dig_T3);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000ce4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf8:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000cfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 4b1f 	vldr	d4, [pc, #124]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000d16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d2a:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000d2e:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
    temperature = (var1 + var2) / 5120.0;
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <BMP280_ReadTemperature+0x158>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40d00000 	.word	0x40d00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40900000 	.word	0x40900000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	41000000 	.word	0x41000000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40c00000 	.word	0x40c00000
 8000da0:	45a00000 	.word	0x45a00000

08000da4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <MX_GPIO_Init+0x15c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e50:	2332      	movs	r3, #50	@ 0x32
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0x160>)
 8000e6c:	f001 fc14 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e70:	2386      	movs	r3, #134	@ 0x86
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000e8c:	f001 fc04 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x168>)
 8000eae:	f001 fbf3 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x164>)
 8000ed0:	f001 fbe2 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x16c>)
 8000ef2:	f001 fbd1 	bl	8002698 <HAL_GPIO_Init>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <MX_I2C1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f20:	4a1b      	ldr	r2, [pc, #108]	@ (8000f90 <MX_I2C1_Init+0x7c>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f50:	f001 fd80 	bl	8002a54 <HAL_I2C_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5a:	f000 f981 	bl	8001260 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f62:	f003 f97b 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f6c:	f000 f978 	bl	8001260 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_I2C1_Init+0x74>)
 8000f74:	f003 f9bd 	bl	80042f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f96f 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240001f4 	.word	0x240001f4
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	00707cbb 	.word	0x00707cbb

08000f94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	@ 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22c0      	movs	r2, #192	@ 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f009 fa0c 	bl	800a3d2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001078 <HAL_I2C_MspInit+0xe4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d155      	bne.n	8001070 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc4:	f04f 0208 	mov.w	r2, #8
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fa16 	bl	800540c <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f000 f93b 	bl	8001260 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <HAL_I2C_MspInit+0xec>)
 800102e:	f001 fb33 	bl	8002698 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_I2C_MspInit+0xe8>)
 8001044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	201f      	movs	r0, #31
 8001056:	f000 fd78 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800105a:	201f      	movs	r0, #31
 800105c:	f000 fd8f 	bl	8001b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2020      	movs	r0, #32
 8001066:	f000 fd70 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800106a:	2020      	movs	r0, #32
 800106c:	f000 fd87 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	37e8      	adds	r7, #232	@ 0xe8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	58024400 	.word	0x58024400
 8001080:	58020400 	.word	0x58020400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	@ 0x50
 8001088:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800108a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108e:	647b      	str	r3, [r7, #68]	@ 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001090:	bf00      	nop
 8001092:	4b3a      	ldr	r3, [pc, #232]	@ (800117c <main+0xf8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <main+0x24>
 800109e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dcf4      	bgt.n	8001092 <main+0xe>
  if ( timeout < 0 )
 80010a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <main+0x2e>
  {
  Error_Handler();
 80010ae:	f000 f8d7 	bl	8001260 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fbad 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f869 	bl	800118c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80010ba:	4b30      	ldr	r3, [pc, #192]	@ (800117c <main+0xf8>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a2e      	ldr	r2, [pc, #184]	@ (800117c <main+0xf8>)
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <main+0xf8>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 fc8d 	bl	80029f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2000      	movs	r0, #0
 80010e2:	f001 fca3 	bl	8002a2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80010e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80010ec:	bf00      	nop
 80010ee:	4b23      	ldr	r3, [pc, #140]	@ (800117c <main+0xf8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <main+0x80>
 80010fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8001100:	2b00      	cmp	r3, #0
 8001102:	dcf4      	bgt.n	80010ee <main+0x6a>
if ( timeout < 0 )
 8001104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001106:	2b00      	cmp	r3, #0
 8001108:	da01      	bge.n	800110e <main+0x8a>
{
Error_Handler();
 800110a:	f000 f8a9 	bl	8001260 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f7ff fe49 	bl	8000da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001112:	f7ff feff 	bl	8000f14 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001116:	f000 f9ff 	bl	8001518 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800111a:	f000 fa91 	bl	8001640 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1);
 800111e:	4818      	ldr	r0, [pc, #96]	@ (8001180 <main+0xfc>)
 8001120:	f7ff fd38 	bl	8000b94 <BMP280_Init>

  BMP280_CalibrationData calib_data;
  BMP280_ReadCalibrationData(&hi2c1, &calib_data);
 8001124:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001128:	4619      	mov	r1, r3
 800112a:	4815      	ldr	r0, [pc, #84]	@ (8001180 <main+0xfc>)
 800112c:	f7ff fd56 	bl	8000bdc <BMP280_ReadCalibrationData>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  temperature = BMP280_ReadTemperature(&hi2c1, &calib_data);
 8001130:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001134:	4619      	mov	r1, r3
 8001136:	4812      	ldr	r0, [pc, #72]	@ (8001180 <main+0xfc>)
 8001138:	f7ff fd86 	bl	8000c48 <BMP280_ReadTemperature>
 800113c:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	        snprintf(uart_msg, sizeof(uart_msg), "Temperature: %.2f C\r\n", temperature);
 8001140:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001144:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	ed8d 7b00 	vstr	d7, [sp]
 800114e:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <main+0x100>)
 8001150:	2132      	movs	r1, #50	@ 0x32
 8001152:	4618      	mov	r0, r3
 8001154:	f009 f8a6 	bl	800a2a4 <sniprintf>
	        HAL_UART_Transmit(&huart3, (uint8_t *)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f910 	bl	8000380 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	b29a      	uxth	r2, r3
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <main+0x104>)
 800116c:	f006 fc42 	bl	80079f4 <HAL_UART_Transmit>
	        HAL_Delay(1000); // Delay 1 second
 8001170:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001174:	f000 fbde 	bl	8001934 <HAL_Delay>
  {
 8001178:	bf00      	nop
 800117a:	e7d9      	b.n	8001130 <main+0xac>
 800117c:	58024400 	.word	0x58024400
 8001180:	240001f4 	.word	0x240001f4
 8001184:	0800da18 	.word	0x0800da18
 8001188:	24000298 	.word	0x24000298

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09c      	sub	sp, #112	@ 0x70
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	224c      	movs	r2, #76	@ 0x4c
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f009 f919 	bl	800a3d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f009 f913 	bl	800a3d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011ac:	2004      	movs	r0, #4
 80011ae:	f003 f8ed 	bl	800438c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <SystemClock_Config+0xcc>)
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	4a27      	ldr	r2, [pc, #156]	@ (8001258 <SystemClock_Config+0xcc>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <SystemClock_Config+0xcc>)
 80011c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <SystemClock_Config+0xd0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011d4:	4a21      	ldr	r2, [pc, #132]	@ (800125c <SystemClock_Config+0xd0>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <SystemClock_Config+0xd0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e8:	bf00      	nop
 80011ea:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <SystemClock_Config+0xd0>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f6:	d1f8      	bne.n	80011ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120c:	4618      	mov	r0, r3
 800120e:	f003 f917 	bl	8004440 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001218:	f000 f822 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	233f      	movs	r3, #63	@ 0x3f
 800121e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001230:	2340      	movs	r3, #64	@ 0x40
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fd57 	bl	8004cf4 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800124c:	f000 f808 	bl	8001260 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3770      	adds	r7, #112	@ 0x70
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	58000400 	.word	0x58000400
 800125c:	58024800 	.word	0x58024800

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <Error_Handler+0x8>

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_MspInit+0x30>)
 8001274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001278:	4a08      	ldr	r2, [pc, #32]	@ (800129c <HAL_MspInit+0x30>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_MspInit+0x30>)
 8001284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	58024400 	.word	0x58024400

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 fafd 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <TIM1_BRK_IRQHandler+0x10>)
 8001306:	f005 ff04 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400024c 	.word	0x2400024c

08001314 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <TIM1_UP_IRQHandler+0x10>)
 800131a:	f005 fefa 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400024c 	.word	0x2400024c

08001328 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <TIM1_TRG_COM_IRQHandler+0x10>)
 800132e:	f005 fef0 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2400024c 	.word	0x2400024c

0800133c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <TIM1_CC_IRQHandler+0x10>)
 8001342:	f005 fee6 	bl	8007112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2400024c 	.word	0x2400024c

08001350 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <I2C1_EV_IRQHandler+0x10>)
 8001356:	f001 fe4b 	bl	8002ff0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	240001f4 	.word	0x240001f4

08001364 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <I2C1_ER_IRQHandler+0x10>)
 800136a:	f001 fe5b 	bl	8003024 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	240001f4 	.word	0x240001f4

08001378 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <USART3_IRQHandler+0x10>)
 800137e:	f006 fbc7 	bl	8007b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	24000298 	.word	0x24000298

0800138c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return 1;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_kill>:

int _kill(int pid, int sig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013a6:	f009 f867 	bl	800a478 <__errno>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2216      	movs	r2, #22
 80013ae:	601a      	str	r2, [r3, #0]
  return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_exit>:

void _exit (int status)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffe7 	bl	800139c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ce:	bf00      	nop
 80013d0:	e7fd      	b.n	80013ce <_exit+0x12>

080013d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e00a      	b.n	80013fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e4:	f3af 8000 	nop.w
 80013e8:	4601      	mov	r1, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	b2ca      	uxtb	r2, r1
 80013f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbf0      	blt.n	80013e4 <_read+0x12>
  }

  return len;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e009      	b.n	8001432 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	60ba      	str	r2, [r7, #8]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbf1      	blt.n	800141e <_write+0x12>
  }
  return len;
 800143a:	687b      	ldr	r3, [r7, #4]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_close>:

int _close(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800146c:	605a      	str	r2, [r3, #4]
  return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_isatty>:

int _isatty(int file)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f008 ffcc 	bl	800a478 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24080000 	.word	0x24080000
 800150c:	00000400 	.word	0x00000400
 8001510:	24000248 	.word	0x24000248
 8001514:	24000480 	.word	0x24000480

08001518 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 8001538:	4a20      	ldr	r2, [pc, #128]	@ (80015bc <MX_TIM1_Init+0xa4>)
 800153a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 800153e:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001542:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 800154c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001550:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001564:	4814      	ldr	r0, [pc, #80]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 8001566:	f005 fd7d 	bl	8007064 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001570:	f7ff fe76 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 8001582:	f005 fecd 	bl	8007320 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800158c:	f7ff fe68 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <MX_TIM1_Init+0xa0>)
 80015a2:	f006 f92b 	bl	80077fc <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015ac:	f7ff fe58 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2400024c 	.word	0x2400024c
 80015bc:	40010000 	.word	0x40010000

080015c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001638 <HAL_TIM_Base_MspInit+0x78>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12e      	bne.n	8001630 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_TIM_Base_MspInit+0x7c>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d8:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_TIM_Base_MspInit+0x7c>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_TIM_Base_MspInit+0x7c>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2018      	movs	r0, #24
 80015f6:	f000 faa8 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80015fa:	2018      	movs	r0, #24
 80015fc:	f000 fabf 	bl	8001b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2019      	movs	r0, #25
 8001606:	f000 faa0 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800160a:	2019      	movs	r0, #25
 800160c:	f000 fab7 	bl	8001b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	201a      	movs	r0, #26
 8001616:	f000 fa98 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800161a:	201a      	movs	r0, #26
 800161c:	f000 faaf 	bl	8001b7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	201b      	movs	r0, #27
 8001626:	f000 fa90 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800162a:	201b      	movs	r0, #27
 800162c:	f000 faa7 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40010000 	.word	0x40010000
 800163c:	58024400 	.word	0x58024400

08001640 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001646:	4a23      	ldr	r2, [pc, #140]	@ (80016d4 <MX_USART3_UART_Init+0x94>)
 8001648:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800164a:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001688:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 800168a:	f006 f963 	bl	8007954 <HAL_UART_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001694:	f7ff fde4 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 800169c:	f007 fe32 	bl	8009304 <HAL_UARTEx_SetTxFifoThreshold>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016a6:	f7ff fddb 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 80016ae:	f007 fe67 	bl	8009380 <HAL_UARTEx_SetRxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f7ff fdd2 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_USART3_UART_Init+0x90>)
 80016be:	f007 fde8 	bl	8009292 <HAL_UARTEx_DisableFifoMode>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f7ff fdca 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	24000298 	.word	0x24000298
 80016d4:	40004800 	.word	0x40004800

080016d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0ba      	sub	sp, #232	@ 0xe8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	22c0      	movs	r2, #192	@ 0xc0
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f008 fe6a 	bl	800a3d2 <memset>
  if(uartHandle->Instance==USART3)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2b      	ldr	r2, [pc, #172]	@ (80017b0 <HAL_UART_MspInit+0xd8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d14e      	bne.n	80017a6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001708:	f04f 0202 	mov.w	r2, #2
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fe74 	bl	800540c <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800172a:	f7ff fd99 	bl	8001260 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <HAL_UART_MspInit+0xdc>)
 8001730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001734:	4a1f      	ldr	r2, [pc, #124]	@ (80017b4 <HAL_UART_MspInit+0xdc>)
 8001736:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800173a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <HAL_UART_MspInit+0xdc>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_UART_MspInit+0xdc>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001752:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <HAL_UART_MspInit+0xdc>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_UART_MspInit+0xdc>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001784:	2307      	movs	r3, #7
 8001786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800178e:	4619      	mov	r1, r3
 8001790:	4809      	ldr	r0, [pc, #36]	@ (80017b8 <HAL_UART_MspInit+0xe0>)
 8001792:	f000 ff81 	bl	8002698 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2027      	movs	r0, #39	@ 0x27
 800179c:	f000 f9d5 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a0:	2027      	movs	r0, #39	@ 0x27
 80017a2:	f000 f9ec 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017a6:	bf00      	nop
 80017a8:	37e8      	adds	r7, #232	@ 0xe8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40004800 	.word	0x40004800
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020c00 	.word	0x58020c00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c0:	f7ff f952 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f008 fe4b 	bl	800a484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fc49 	bl	8001084 <main>
  bx  lr
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017fc:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001800:	0800dea8 	.word	0x0800dea8
  ldr r2, =_sbss
 8001804:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001808:	2400047c 	.word	0x2400047c

0800180c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC3_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001816:	2003      	movs	r0, #3
 8001818:	f000 f98c 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800181c:	f003 fc20 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_Init+0x68>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	4913      	ldr	r1, [pc, #76]	@ (800187c <HAL_Init+0x6c>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <HAL_Init+0x6c>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_Init+0x70>)
 8001852:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001854:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <HAL_Init+0x74>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f814 	bl	8001888 <HAL_InitTick>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e002      	b.n	8001870 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800186a:	f7ff fcff 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	58024400 	.word	0x58024400
 800187c:	0800da30 	.word	0x0800da30
 8001880:	24000004 	.word	0x24000004
 8001884:	24000000 	.word	0x24000000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e021      	b.n	80018e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <HAL_InitTick+0x64>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_InitTick+0x60>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f971 	bl	8001b9a <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f93b 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x68>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2400000c 	.word	0x2400000c
 80018ec:	24000000 	.word	0x24000000
 80018f0:	24000008 	.word	0x24000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2400000c 	.word	0x2400000c
 8001918:	2400032c 	.word	0x2400032c

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2400032c 	.word	0x2400032c

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2400000c 	.word	0x2400000c

0800197c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_GetREVID+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0c1b      	lsrs	r3, r3, #16
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	5c001000 	.word	0x5c001000

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	05fa0000 	.word	0x05fa0000

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	@ (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db0a      	blt.n	8001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	490c      	ldr	r1, [pc, #48]	@ (8001a80 <__NVIC_SetPriority+0x4c>)
 8001a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	440b      	add	r3, r1
 8001a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a5c:	e00a      	b.n	8001a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4908      	ldr	r1, [pc, #32]	@ (8001a84 <__NVIC_SetPriority+0x50>)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	0112      	lsls	r2, r2, #4
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	440b      	add	r3, r1
 8001a72:	761a      	strb	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f1c3 0307 	rsb	r3, r3, #7
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	bf28      	it	cs
 8001aa6:	2304      	movcs	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3304      	adds	r3, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d902      	bls.n	8001ab8 <NVIC_EncodePriority+0x30>
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3b03      	subs	r3, #3
 8001ab6:	e000      	b.n	8001aba <NVIC_EncodePriority+0x32>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	4313      	orrs	r3, r2
         );
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3724      	adds	r7, #36	@ 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff8e 	bl	8001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff29 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff40 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff90 	bl	8001a88 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5f 	bl	8001a34 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff33 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa4 	bl	8001af0 <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff feae 	bl	800191c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e2dc      	b.n	8002186 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d008      	beq.n	8001bea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e2cd      	b.n	8002186 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a76      	ldr	r2, [pc, #472]	@ (8001dc8 <HAL_DMA_Abort+0x214>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d04a      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a74      	ldr	r2, [pc, #464]	@ (8001dcc <HAL_DMA_Abort+0x218>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d045      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a73      	ldr	r2, [pc, #460]	@ (8001dd0 <HAL_DMA_Abort+0x21c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d040      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a71      	ldr	r2, [pc, #452]	@ (8001dd4 <HAL_DMA_Abort+0x220>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d03b      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a70      	ldr	r2, [pc, #448]	@ (8001dd8 <HAL_DMA_Abort+0x224>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d036      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6e      	ldr	r2, [pc, #440]	@ (8001ddc <HAL_DMA_Abort+0x228>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d031      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6d      	ldr	r2, [pc, #436]	@ (8001de0 <HAL_DMA_Abort+0x22c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d02c      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6b      	ldr	r2, [pc, #428]	@ (8001de4 <HAL_DMA_Abort+0x230>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d027      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8001de8 <HAL_DMA_Abort+0x234>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a68      	ldr	r2, [pc, #416]	@ (8001dec <HAL_DMA_Abort+0x238>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01d      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a67      	ldr	r2, [pc, #412]	@ (8001df0 <HAL_DMA_Abort+0x23c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a65      	ldr	r2, [pc, #404]	@ (8001df4 <HAL_DMA_Abort+0x240>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a64      	ldr	r2, [pc, #400]	@ (8001df8 <HAL_DMA_Abort+0x244>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a62      	ldr	r2, [pc, #392]	@ (8001dfc <HAL_DMA_Abort+0x248>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a61      	ldr	r2, [pc, #388]	@ (8001e00 <HAL_DMA_Abort+0x24c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_DMA_Abort+0xd6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5f      	ldr	r2, [pc, #380]	@ (8001e04 <HAL_DMA_Abort+0x250>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Abort+0xda>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Abort+0xdc>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 021e 	bic.w	r2, r2, #30
 8001ca2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e00a      	b.n	8001cd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 020e 	bic.w	r2, r2, #14
 8001cca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc8 <HAL_DMA_Abort+0x214>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d072      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dcc <HAL_DMA_Abort+0x218>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d06d      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a39      	ldr	r2, [pc, #228]	@ (8001dd0 <HAL_DMA_Abort+0x21c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d068      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a37      	ldr	r2, [pc, #220]	@ (8001dd4 <HAL_DMA_Abort+0x220>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d063      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a36      	ldr	r2, [pc, #216]	@ (8001dd8 <HAL_DMA_Abort+0x224>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d05e      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a34      	ldr	r2, [pc, #208]	@ (8001ddc <HAL_DMA_Abort+0x228>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d059      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a33      	ldr	r2, [pc, #204]	@ (8001de0 <HAL_DMA_Abort+0x22c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d054      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a31      	ldr	r2, [pc, #196]	@ (8001de4 <HAL_DMA_Abort+0x230>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d04f      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a30      	ldr	r2, [pc, #192]	@ (8001de8 <HAL_DMA_Abort+0x234>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d04a      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2e      	ldr	r2, [pc, #184]	@ (8001dec <HAL_DMA_Abort+0x238>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d045      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001df0 <HAL_DMA_Abort+0x23c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d040      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2b      	ldr	r2, [pc, #172]	@ (8001df4 <HAL_DMA_Abort+0x240>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d03b      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001df8 <HAL_DMA_Abort+0x244>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d036      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a28      	ldr	r2, [pc, #160]	@ (8001dfc <HAL_DMA_Abort+0x248>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d031      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_DMA_Abort+0x24c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d02c      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	@ (8001e04 <HAL_DMA_Abort+0x250>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d027      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <HAL_DMA_Abort+0x254>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d022      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <HAL_DMA_Abort+0x258>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01d      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <HAL_DMA_Abort+0x25c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d018      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1f      	ldr	r2, [pc, #124]	@ (8001e14 <HAL_DMA_Abort+0x260>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e18 <HAL_DMA_Abort+0x264>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00e      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <HAL_DMA_Abort+0x268>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d009      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <HAL_DMA_Abort+0x26c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d004      	beq.n	8001dc2 <HAL_DMA_Abort+0x20e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_DMA_Abort+0x270>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d132      	bne.n	8001e28 <HAL_DMA_Abort+0x274>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e031      	b.n	8001e2a <HAL_DMA_Abort+0x276>
 8001dc6:	bf00      	nop
 8001dc8:	40020010 	.word	0x40020010
 8001dcc:	40020028 	.word	0x40020028
 8001dd0:	40020040 	.word	0x40020040
 8001dd4:	40020058 	.word	0x40020058
 8001dd8:	40020070 	.word	0x40020070
 8001ddc:	40020088 	.word	0x40020088
 8001de0:	400200a0 	.word	0x400200a0
 8001de4:	400200b8 	.word	0x400200b8
 8001de8:	40020410 	.word	0x40020410
 8001dec:	40020428 	.word	0x40020428
 8001df0:	40020440 	.word	0x40020440
 8001df4:	40020458 	.word	0x40020458
 8001df8:	40020470 	.word	0x40020470
 8001dfc:	40020488 	.word	0x40020488
 8001e00:	400204a0 	.word	0x400204a0
 8001e04:	400204b8 	.word	0x400204b8
 8001e08:	58025408 	.word	0x58025408
 8001e0c:	5802541c 	.word	0x5802541c
 8001e10:	58025430 	.word	0x58025430
 8001e14:	58025444 	.word	0x58025444
 8001e18:	58025458 	.word	0x58025458
 8001e1c:	5802546c 	.word	0x5802546c
 8001e20:	58025480 	.word	0x58025480
 8001e24:	58025494 	.word	0x58025494
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6d      	ldr	r2, [pc, #436]	@ (8001ff8 <HAL_DMA_Abort+0x444>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04a      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ffc <HAL_DMA_Abort+0x448>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d045      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6a      	ldr	r2, [pc, #424]	@ (8002000 <HAL_DMA_Abort+0x44c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d040      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a68      	ldr	r2, [pc, #416]	@ (8002004 <HAL_DMA_Abort+0x450>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d03b      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a67      	ldr	r2, [pc, #412]	@ (8002008 <HAL_DMA_Abort+0x454>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d036      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	@ (800200c <HAL_DMA_Abort+0x458>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d031      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a64      	ldr	r2, [pc, #400]	@ (8002010 <HAL_DMA_Abort+0x45c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d02c      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a62      	ldr	r2, [pc, #392]	@ (8002014 <HAL_DMA_Abort+0x460>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d027      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a61      	ldr	r2, [pc, #388]	@ (8002018 <HAL_DMA_Abort+0x464>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5f      	ldr	r2, [pc, #380]	@ (800201c <HAL_DMA_Abort+0x468>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8002020 <HAL_DMA_Abort+0x46c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d018      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8002024 <HAL_DMA_Abort+0x470>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <HAL_DMA_Abort+0x474>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00e      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a59      	ldr	r2, [pc, #356]	@ (800202c <HAL_DMA_Abort+0x478>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d009      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a58      	ldr	r2, [pc, #352]	@ (8002030 <HAL_DMA_Abort+0x47c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_DMA_Abort+0x32a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <HAL_DMA_Abort+0x480>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <HAL_DMA_Abort+0x33c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e007      	b.n	8001f00 <HAL_DMA_Abort+0x34c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f00:	e013      	b.n	8001f2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f02:	f7ff fd0b 	bl	800191c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d90c      	bls.n	8001f2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e12d      	b.n	8002186 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1e5      	bne.n	8001f02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff8 <HAL_DMA_Abort+0x444>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d04a      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2d      	ldr	r2, [pc, #180]	@ (8001ffc <HAL_DMA_Abort+0x448>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d045      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002000 <HAL_DMA_Abort+0x44c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d040      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2a      	ldr	r2, [pc, #168]	@ (8002004 <HAL_DMA_Abort+0x450>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d03b      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a29      	ldr	r2, [pc, #164]	@ (8002008 <HAL_DMA_Abort+0x454>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d036      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a27      	ldr	r2, [pc, #156]	@ (800200c <HAL_DMA_Abort+0x458>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d031      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a26      	ldr	r2, [pc, #152]	@ (8002010 <HAL_DMA_Abort+0x45c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d02c      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <HAL_DMA_Abort+0x460>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d027      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <HAL_DMA_Abort+0x464>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a21      	ldr	r2, [pc, #132]	@ (800201c <HAL_DMA_Abort+0x468>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a20      	ldr	r2, [pc, #128]	@ (8002020 <HAL_DMA_Abort+0x46c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d018      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <HAL_DMA_Abort+0x470>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_DMA_Abort+0x474>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800202c <HAL_DMA_Abort+0x478>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002030 <HAL_DMA_Abort+0x47c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Abort+0x422>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <HAL_DMA_Abort+0x480>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Abort+0x426>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_DMA_Abort+0x428>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d02b      	beq.n	8002038 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	223f      	movs	r2, #63	@ 0x3f
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	e02a      	b.n	800204e <HAL_DMA_Abort+0x49a>
 8001ff8:	40020010 	.word	0x40020010
 8001ffc:	40020028 	.word	0x40020028
 8002000:	40020040 	.word	0x40020040
 8002004:	40020058 	.word	0x40020058
 8002008:	40020070 	.word	0x40020070
 800200c:	40020088 	.word	0x40020088
 8002010:	400200a0 	.word	0x400200a0
 8002014:	400200b8 	.word	0x400200b8
 8002018:	40020410 	.word	0x40020410
 800201c:	40020428 	.word	0x40020428
 8002020:	40020440 	.word	0x40020440
 8002024:	40020458 	.word	0x40020458
 8002028:	40020470 	.word	0x40020470
 800202c:	40020488 	.word	0x40020488
 8002030:	400204a0 	.word	0x400204a0
 8002034:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2201      	movs	r2, #1
 8002048:	409a      	lsls	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <HAL_DMA_Abort+0x5dc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d072      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4d      	ldr	r2, [pc, #308]	@ (8002194 <HAL_DMA_Abort+0x5e0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d06d      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a4c      	ldr	r2, [pc, #304]	@ (8002198 <HAL_DMA_Abort+0x5e4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d068      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4a      	ldr	r2, [pc, #296]	@ (800219c <HAL_DMA_Abort+0x5e8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d063      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a49      	ldr	r2, [pc, #292]	@ (80021a0 <HAL_DMA_Abort+0x5ec>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a47      	ldr	r2, [pc, #284]	@ (80021a4 <HAL_DMA_Abort+0x5f0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d059      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a46      	ldr	r2, [pc, #280]	@ (80021a8 <HAL_DMA_Abort+0x5f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d054      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a44      	ldr	r2, [pc, #272]	@ (80021ac <HAL_DMA_Abort+0x5f8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04f      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a43      	ldr	r2, [pc, #268]	@ (80021b0 <HAL_DMA_Abort+0x5fc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d04a      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a41      	ldr	r2, [pc, #260]	@ (80021b4 <HAL_DMA_Abort+0x600>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d045      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a40      	ldr	r2, [pc, #256]	@ (80021b8 <HAL_DMA_Abort+0x604>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d040      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <HAL_DMA_Abort+0x608>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d03b      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	@ (80021c0 <HAL_DMA_Abort+0x60c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d036      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a3b      	ldr	r2, [pc, #236]	@ (80021c4 <HAL_DMA_Abort+0x610>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3a      	ldr	r2, [pc, #232]	@ (80021c8 <HAL_DMA_Abort+0x614>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02c      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HAL_DMA_Abort+0x618>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d027      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a37      	ldr	r2, [pc, #220]	@ (80021d0 <HAL_DMA_Abort+0x61c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d022      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a35      	ldr	r2, [pc, #212]	@ (80021d4 <HAL_DMA_Abort+0x620>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a34      	ldr	r2, [pc, #208]	@ (80021d8 <HAL_DMA_Abort+0x624>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d018      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <HAL_DMA_Abort+0x628>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a31      	ldr	r2, [pc, #196]	@ (80021e0 <HAL_DMA_Abort+0x62c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2f      	ldr	r2, [pc, #188]	@ (80021e4 <HAL_DMA_Abort+0x630>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2e      	ldr	r2, [pc, #184]	@ (80021e8 <HAL_DMA_Abort+0x634>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort+0x58a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2c      	ldr	r2, [pc, #176]	@ (80021ec <HAL_DMA_Abort+0x638>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_DMA_Abort+0x58e>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_DMA_Abort+0x590>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002150:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002168:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002172:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40020010 	.word	0x40020010
 8002194:	40020028 	.word	0x40020028
 8002198:	40020040 	.word	0x40020040
 800219c:	40020058 	.word	0x40020058
 80021a0:	40020070 	.word	0x40020070
 80021a4:	40020088 	.word	0x40020088
 80021a8:	400200a0 	.word	0x400200a0
 80021ac:	400200b8 	.word	0x400200b8
 80021b0:	40020410 	.word	0x40020410
 80021b4:	40020428 	.word	0x40020428
 80021b8:	40020440 	.word	0x40020440
 80021bc:	40020458 	.word	0x40020458
 80021c0:	40020470 	.word	0x40020470
 80021c4:	40020488 	.word	0x40020488
 80021c8:	400204a0 	.word	0x400204a0
 80021cc:	400204b8 	.word	0x400204b8
 80021d0:	58025408 	.word	0x58025408
 80021d4:	5802541c 	.word	0x5802541c
 80021d8:	58025430 	.word	0x58025430
 80021dc:	58025444 	.word	0x58025444
 80021e0:	58025458 	.word	0x58025458
 80021e4:	5802546c 	.word	0x5802546c
 80021e8:	58025480 	.word	0x58025480
 80021ec:	58025494 	.word	0x58025494

080021f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e237      	b.n	8002672 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e22c      	b.n	8002672 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a5c      	ldr	r2, [pc, #368]	@ (8002390 <HAL_DMA_Abort_IT+0x1a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d04a      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a5b      	ldr	r2, [pc, #364]	@ (8002394 <HAL_DMA_Abort_IT+0x1a4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d045      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a59      	ldr	r2, [pc, #356]	@ (8002398 <HAL_DMA_Abort_IT+0x1a8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d040      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a58      	ldr	r2, [pc, #352]	@ (800239c <HAL_DMA_Abort_IT+0x1ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d03b      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_DMA_Abort_IT+0x1b0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d036      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a55      	ldr	r2, [pc, #340]	@ (80023a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d031      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a53      	ldr	r2, [pc, #332]	@ (80023a8 <HAL_DMA_Abort_IT+0x1b8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02c      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a52      	ldr	r2, [pc, #328]	@ (80023ac <HAL_DMA_Abort_IT+0x1bc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d027      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a50      	ldr	r2, [pc, #320]	@ (80023b0 <HAL_DMA_Abort_IT+0x1c0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d022      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4f      	ldr	r2, [pc, #316]	@ (80023b4 <HAL_DMA_Abort_IT+0x1c4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d01d      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a4d      	ldr	r2, [pc, #308]	@ (80023b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d018      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a4c      	ldr	r2, [pc, #304]	@ (80023bc <HAL_DMA_Abort_IT+0x1cc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a4a      	ldr	r2, [pc, #296]	@ (80023c0 <HAL_DMA_Abort_IT+0x1d0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00e      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a49      	ldr	r2, [pc, #292]	@ (80023c4 <HAL_DMA_Abort_IT+0x1d4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a47      	ldr	r2, [pc, #284]	@ (80023c8 <HAL_DMA_Abort_IT+0x1d8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_DMA_Abort_IT+0xc8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a46      	ldr	r2, [pc, #280]	@ (80023cc <HAL_DMA_Abort_IT+0x1dc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_DMA_Abort_IT+0xcc>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_DMA_Abort_IT+0xce>
 80022bc:	2300      	movs	r3, #0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8086 	beq.w	80023d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2204      	movs	r2, #4
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002390 <HAL_DMA_Abort_IT+0x1a0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d04a      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2e      	ldr	r2, [pc, #184]	@ (8002394 <HAL_DMA_Abort_IT+0x1a4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d045      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002398 <HAL_DMA_Abort_IT+0x1a8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d040      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2b      	ldr	r2, [pc, #172]	@ (800239c <HAL_DMA_Abort_IT+0x1ac>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d03b      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a29      	ldr	r2, [pc, #164]	@ (80023a0 <HAL_DMA_Abort_IT+0x1b0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d036      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a28      	ldr	r2, [pc, #160]	@ (80023a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d031      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <HAL_DMA_Abort_IT+0x1b8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d02c      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a25      	ldr	r2, [pc, #148]	@ (80023ac <HAL_DMA_Abort_IT+0x1bc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d027      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <HAL_DMA_Abort_IT+0x1c0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d022      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a22      	ldr	r2, [pc, #136]	@ (80023b4 <HAL_DMA_Abort_IT+0x1c4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d01d      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a20      	ldr	r2, [pc, #128]	@ (80023b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d018      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <HAL_DMA_Abort_IT+0x1cc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_DMA_Abort_IT+0x1d0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00e      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1c      	ldr	r2, [pc, #112]	@ (80023c4 <HAL_DMA_Abort_IT+0x1d4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	@ (80023c8 <HAL_DMA_Abort_IT+0x1d8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <HAL_DMA_Abort_IT+0x17c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_DMA_Abort_IT+0x1dc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d108      	bne.n	800237e <HAL_DMA_Abort_IT+0x18e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e178      	b.n	8002670 <HAL_DMA_Abort_IT+0x480>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e16f      	b.n	8002670 <HAL_DMA_Abort_IT+0x480>
 8002390:	40020010 	.word	0x40020010
 8002394:	40020028 	.word	0x40020028
 8002398:	40020040 	.word	0x40020040
 800239c:	40020058 	.word	0x40020058
 80023a0:	40020070 	.word	0x40020070
 80023a4:	40020088 	.word	0x40020088
 80023a8:	400200a0 	.word	0x400200a0
 80023ac:	400200b8 	.word	0x400200b8
 80023b0:	40020410 	.word	0x40020410
 80023b4:	40020428 	.word	0x40020428
 80023b8:	40020440 	.word	0x40020440
 80023bc:	40020458 	.word	0x40020458
 80023c0:	40020470 	.word	0x40020470
 80023c4:	40020488 	.word	0x40020488
 80023c8:	400204a0 	.word	0x400204a0
 80023cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020e 	bic.w	r2, r2, #14
 80023de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002598 <HAL_DMA_Abort_IT+0x3a8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d04a      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6b      	ldr	r2, [pc, #428]	@ (800259c <HAL_DMA_Abort_IT+0x3ac>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d045      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a69      	ldr	r2, [pc, #420]	@ (80025a0 <HAL_DMA_Abort_IT+0x3b0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d040      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a68      	ldr	r2, [pc, #416]	@ (80025a4 <HAL_DMA_Abort_IT+0x3b4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d03b      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a66      	ldr	r2, [pc, #408]	@ (80025a8 <HAL_DMA_Abort_IT+0x3b8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d036      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a65      	ldr	r2, [pc, #404]	@ (80025ac <HAL_DMA_Abort_IT+0x3bc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d031      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a63      	ldr	r2, [pc, #396]	@ (80025b0 <HAL_DMA_Abort_IT+0x3c0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02c      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a62      	ldr	r2, [pc, #392]	@ (80025b4 <HAL_DMA_Abort_IT+0x3c4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d027      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a60      	ldr	r2, [pc, #384]	@ (80025b8 <HAL_DMA_Abort_IT+0x3c8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d022      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5f      	ldr	r2, [pc, #380]	@ (80025bc <HAL_DMA_Abort_IT+0x3cc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d01d      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5d      	ldr	r2, [pc, #372]	@ (80025c0 <HAL_DMA_Abort_IT+0x3d0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d018      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5c      	ldr	r2, [pc, #368]	@ (80025c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5a      	ldr	r2, [pc, #360]	@ (80025c8 <HAL_DMA_Abort_IT+0x3d8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00e      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a59      	ldr	r2, [pc, #356]	@ (80025cc <HAL_DMA_Abort_IT+0x3dc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_DMA_Abort_IT+0x290>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a56      	ldr	r2, [pc, #344]	@ (80025d4 <HAL_DMA_Abort_IT+0x3e4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d108      	bne.n	8002492 <HAL_DMA_Abort_IT+0x2a2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e007      	b.n	80024a2 <HAL_DMA_Abort_IT+0x2b2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002598 <HAL_DMA_Abort_IT+0x3a8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d072      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3a      	ldr	r2, [pc, #232]	@ (800259c <HAL_DMA_Abort_IT+0x3ac>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d06d      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a39      	ldr	r2, [pc, #228]	@ (80025a0 <HAL_DMA_Abort_IT+0x3b0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d068      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a37      	ldr	r2, [pc, #220]	@ (80025a4 <HAL_DMA_Abort_IT+0x3b4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d063      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a36      	ldr	r2, [pc, #216]	@ (80025a8 <HAL_DMA_Abort_IT+0x3b8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d05e      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a34      	ldr	r2, [pc, #208]	@ (80025ac <HAL_DMA_Abort_IT+0x3bc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d059      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a33      	ldr	r2, [pc, #204]	@ (80025b0 <HAL_DMA_Abort_IT+0x3c0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d054      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a31      	ldr	r2, [pc, #196]	@ (80025b4 <HAL_DMA_Abort_IT+0x3c4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04f      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a30      	ldr	r2, [pc, #192]	@ (80025b8 <HAL_DMA_Abort_IT+0x3c8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d04a      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2e      	ldr	r2, [pc, #184]	@ (80025bc <HAL_DMA_Abort_IT+0x3cc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d045      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2d      	ldr	r2, [pc, #180]	@ (80025c0 <HAL_DMA_Abort_IT+0x3d0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d040      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2b      	ldr	r2, [pc, #172]	@ (80025c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d03b      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2a      	ldr	r2, [pc, #168]	@ (80025c8 <HAL_DMA_Abort_IT+0x3d8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d036      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <HAL_DMA_Abort_IT+0x3dc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a27      	ldr	r2, [pc, #156]	@ (80025d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d02c      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a25      	ldr	r2, [pc, #148]	@ (80025d4 <HAL_DMA_Abort_IT+0x3e4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d027      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a24      	ldr	r2, [pc, #144]	@ (80025d8 <HAL_DMA_Abort_IT+0x3e8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <HAL_DMA_Abort_IT+0x3ec>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <HAL_DMA_Abort_IT+0x3f0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d018      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1f      	ldr	r2, [pc, #124]	@ (80025e4 <HAL_DMA_Abort_IT+0x3f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	@ (80025e8 <HAL_DMA_Abort_IT+0x3f8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1c      	ldr	r2, [pc, #112]	@ (80025ec <HAL_DMA_Abort_IT+0x3fc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d009      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1b      	ldr	r2, [pc, #108]	@ (80025f0 <HAL_DMA_Abort_IT+0x400>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort_IT+0x3a2>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a19      	ldr	r2, [pc, #100]	@ (80025f4 <HAL_DMA_Abort_IT+0x404>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d132      	bne.n	80025f8 <HAL_DMA_Abort_IT+0x408>
 8002592:	2301      	movs	r3, #1
 8002594:	e031      	b.n	80025fa <HAL_DMA_Abort_IT+0x40a>
 8002596:	bf00      	nop
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8
 80025d8:	58025408 	.word	0x58025408
 80025dc:	5802541c 	.word	0x5802541c
 80025e0:	58025430 	.word	0x58025430
 80025e4:	58025444 	.word	0x58025444
 80025e8:	58025458 	.word	0x58025458
 80025ec:	5802546c 	.word	0x5802546c
 80025f0:	58025480 	.word	0x58025480
 80025f4:	58025494 	.word	0x58025494
 80025f8:	2300      	movs	r3, #0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800262c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002644:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800264e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop

0800267c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800268a:	b2db      	uxtb	r3, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026a6:	4b89      	ldr	r3, [pc, #548]	@ (80028cc <HAL_GPIO_Init+0x234>)
 80026a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026aa:	e194      	b.n	80029d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8186 	beq.w	80029d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x44>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002712:	2201      	movs	r2, #1
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0201 	and.w	r2, r3, #1
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b03      	cmp	r3, #3
 8002748:	d017      	beq.n	800277a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	69b9      	ldr	r1, [r7, #24]
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80e0 	beq.w	80029d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HAL_GPIO_Init+0x238>)
 8002812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002816:	4a2e      	ldr	r2, [pc, #184]	@ (80028d0 <HAL_GPIO_Init+0x238>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002820:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_GPIO_Init+0x238>)
 8002822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a29      	ldr	r2, [pc, #164]	@ (80028d4 <HAL_GPIO_Init+0x23c>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a20      	ldr	r2, [pc, #128]	@ (80028d8 <HAL_GPIO_Init+0x240>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d052      	beq.n	8002900 <HAL_GPIO_Init+0x268>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_GPIO_Init+0x244>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d031      	beq.n	80028c6 <HAL_GPIO_Init+0x22e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_GPIO_Init+0x248>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_Init+0x22a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <HAL_GPIO_Init+0x24c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x226>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1c      	ldr	r2, [pc, #112]	@ (80028e8 <HAL_GPIO_Init+0x250>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x222>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_GPIO_Init+0x254>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x21e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1a      	ldr	r2, [pc, #104]	@ (80028f0 <HAL_GPIO_Init+0x258>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x21a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <HAL_GPIO_Init+0x25c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x216>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a18      	ldr	r2, [pc, #96]	@ (80028f8 <HAL_GPIO_Init+0x260>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x212>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <HAL_GPIO_Init+0x264>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x20e>
 80028a2:	2309      	movs	r3, #9
 80028a4:	e02d      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028a6:	230a      	movs	r3, #10
 80028a8:	e02b      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028aa:	2308      	movs	r3, #8
 80028ac:	e029      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e027      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028b2:	2306      	movs	r3, #6
 80028b4:	e025      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e023      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e021      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028be:	2303      	movs	r3, #3
 80028c0:	e01f      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e01d      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01b      	b.n	8002902 <HAL_GPIO_Init+0x26a>
 80028ca:	bf00      	nop
 80028cc:	58000080 	.word	0x58000080
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58000400 	.word	0x58000400
 80028d8:	58020000 	.word	0x58020000
 80028dc:	58020400 	.word	0x58020400
 80028e0:	58020800 	.word	0x58020800
 80028e4:	58020c00 	.word	0x58020c00
 80028e8:	58021000 	.word	0x58021000
 80028ec:	58021400 	.word	0x58021400
 80028f0:	58021800 	.word	0x58021800
 80028f4:	58021c00 	.word	0x58021c00
 80028f8:	58022000 	.word	0x58022000
 80028fc:	58022400 	.word	0x58022400
 8002900:	2300      	movs	r3, #0
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	4093      	lsls	r3, r2
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002912:	4938      	ldr	r1, [pc, #224]	@ (80029f4 <HAL_GPIO_Init+0x35c>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	3301      	adds	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f ae63 	bne.w	80026ac <HAL_GPIO_Init+0x14>
  }
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3724      	adds	r7, #36	@ 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58000400 	.word	0x58000400

080029f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002a00:	4a08      	ldr	r2, [pc, #32]	@ (8002a24 <HAL_HSEM_FastTake+0x2c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3320      	adds	r3, #32
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <HAL_HSEM_FastTake+0x30>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	58026400 	.word	0x58026400
 8002a28:	80000300 	.word	0x80000300

08002a2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002a36:	4906      	ldr	r1, [pc, #24]	@ (8002a50 <HAL_HSEM_Release+0x24>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	58026400 	.word	0x58026400

08002a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e08b      	b.n	8002b7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe fa8a 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	@ 0x24
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ab4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e006      	b.n	8002adc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ada:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d108      	bne.n	8002af6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	e007      	b.n	8002b06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_I2C_Init+0x134>)
 8002b12:	430b      	orrs	r3, r1
 8002b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69d9      	ldr	r1, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	02008000 	.word	0x02008000

08002b8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	817b      	strh	r3, [r7, #10]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	f040 80fd 	bne.w	8002da8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2C_Master_Transmit+0x30>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e0f6      	b.n	8002daa <HAL_I2C_Master_Transmit+0x21e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bc4:	f7fe feaa 	bl	800191c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2319      	movs	r3, #25
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f001 f8ed 	bl	8003db6 <I2C_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0e1      	b.n	8002daa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2221      	movs	r2, #33	@ 0x21
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	893a      	ldrh	r2, [r7, #8]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2bff      	cmp	r3, #255	@ 0xff
 8002c16:	d906      	bls.n	8002c26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	22ff      	movs	r2, #255	@ 0xff
 8002c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e007      	b.n	8002c36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d024      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002db4 <HAL_I2C_Master_Transmit+0x228>)
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f001 fa5b 	bl	800413c <I2C_TransferConfig>
 8002c86:	e066      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	4b48      	ldr	r3, [pc, #288]	@ (8002db4 <HAL_I2C_Master_Transmit+0x228>)
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f001 fa50 	bl	800413c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c9c:	e05b      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f001 f8e0 	bl	8003e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07b      	b.n	8002daa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d034      	beq.n	8002d56 <HAL_I2C_Master_Transmit+0x1ca>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d130      	bne.n	8002d56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	@ 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f001 f859 	bl	8003db6 <I2C_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e04d      	b.n	8002daa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2bff      	cmp	r3, #255	@ 0xff
 8002d16:	d90e      	bls.n	8002d36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	22ff      	movs	r2, #255	@ 0xff
 8002d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	8979      	ldrh	r1, [r7, #10]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f001 fa04 	bl	800413c <I2C_TransferConfig>
 8002d34:	e00f      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	8979      	ldrh	r1, [r7, #10]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f001 f9f3 	bl	800413c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d19e      	bne.n	8002c9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	6a39      	ldr	r1, [r7, #32]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f001 f8c6 	bl	8003ef6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e01a      	b.n	8002daa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <HAL_I2C_Master_Transmit+0x22c>)
 8002d88:	400b      	ands	r3, r1
 8002d8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	80002000 	.word	0x80002000
 8002db8:	fe00e800 	.word	0xfe00e800

08002dbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	f040 80fd 	bne.w	8002fde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_I2C_Mem_Read+0x34>
 8002dea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0f1      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Mem_Read+0x4e>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0ea      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e12:	f7fe fd83 	bl	800191c <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2319      	movs	r3, #25
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 ffc6 	bl	8003db6 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0d5      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2222      	movs	r2, #34	@ 0x22
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2240      	movs	r2, #64	@ 0x40
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e5c:	88f8      	ldrh	r0, [r7, #6]
 8002e5e:	893a      	ldrh	r2, [r7, #8]
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fa6d 	bl	800334c <I2C_RequestMemoryRead>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0ad      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2bff      	cmp	r3, #255	@ 0xff
 8002e8c:	d90e      	bls.n	8002eac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	22ff      	movs	r2, #255	@ 0xff
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	8979      	ldrh	r1, [r7, #10]
 8002e9c:	4b52      	ldr	r3, [pc, #328]	@ (8002fe8 <HAL_I2C_Mem_Read+0x22c>)
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f001 f949 	bl	800413c <I2C_TransferConfig>
 8002eaa:	e00f      	b.n	8002ecc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_I2C_Mem_Read+0x22c>)
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f001 f938 	bl	800413c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 ff6d 	bl	8003db6 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07c      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d034      	beq.n	8002f8c <HAL_I2C_Mem_Read+0x1d0>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d130      	bne.n	8002f8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	@ 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 ff3e 	bl	8003db6 <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04d      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2bff      	cmp	r3, #255	@ 0xff
 8002f4c:	d90e      	bls.n	8002f6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	22ff      	movs	r2, #255	@ 0xff
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f001 f8e9 	bl	800413c <I2C_TransferConfig>
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f001 f8d8 	bl	800413c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d19a      	bne.n	8002ecc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 ffab 	bl	8003ef6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e01a      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_I2C_Mem_Read+0x230>)
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	80002400 	.word	0x80002400
 8002fec:	fe00e800 	.word	0xfe00e800

08002ff0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
  }
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00f      	beq.n	8003066 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003064:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00f      	beq.n	8003090 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800308e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00f      	beq.n	80030ba <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a8:	f043 0202 	orr.w	r2, r3, #2
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 030b 	and.w	r3, r3, #11
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fd19 	bl	8003b04 <I2C_ITError>
  }
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	70fb      	strb	r3, [r7, #3]
 800310e:	4613      	mov	r3, r2
 8003110:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <I2C_Slave_ISR_IT+0x24>
 800317a:	2302      	movs	r3, #2
 800317c:	e0e2      	b.n	8003344 <I2C_Slave_ISR_IT+0x1ea>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fa09 	bl	80035b4 <I2C_ITSlaveCplt>
 80031a2:	e0ca      	b.n	800333a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d04b      	beq.n	8003246 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d046      	beq.n	8003246 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d128      	bne.n	8003214 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b28      	cmp	r3, #40	@ 0x28
 80031cc:	d108      	bne.n	80031e0 <I2C_Slave_ISR_IT+0x86>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031d4:	d104      	bne.n	80031e0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031d6:	6939      	ldr	r1, [r7, #16]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fc3f 	bl	8003a5c <I2C_ITListenCplt>
 80031de:	e031      	b.n	8003244 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b29      	cmp	r3, #41	@ 0x29
 80031ea:	d10e      	bne.n	800320a <I2C_Slave_ISR_IT+0xb0>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031f2:	d00a      	beq.n	800320a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fd98 	bl	8003d32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f97a 	bl	80034fc <I2C_ITSlaveSeqCplt>
 8003208:	e01c      	b.n	8003244 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003212:	e08f      	b.n	8003334 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2210      	movs	r2, #16
 800321a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <I2C_Slave_ISR_IT+0xdc>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003234:	d17e      	bne.n	8003334 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	4619      	mov	r1, r3
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fc61 	bl	8003b04 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003242:	e077      	b.n	8003334 <I2C_Slave_ISR_IT+0x1da>
 8003244:	e076      	b.n	8003334 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02f      	beq.n	80032b0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003256:	2b00      	cmp	r3, #0
 8003258:	d02a      	beq.n	80032b0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d14b      	bne.n	8003338 <I2C_Slave_ISR_IT+0x1de>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a6:	d047      	beq.n	8003338 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f927 	bl	80034fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80032ae:	e043      	b.n	8003338 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80032c4:	6939      	ldr	r1, [r7, #16]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f894 	bl	80033f4 <I2C_ITAddrCplt>
 80032cc:	e035      	b.n	800333a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d030      	beq.n	800333a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02b      	beq.n	800333a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d018      	beq.n	800331e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800331c:	e00d      	b.n	800333a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003324:	d002      	beq.n	800332c <I2C_Slave_ISR_IT+0x1d2>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f8e5 	bl	80034fc <I2C_ITSlaveSeqCplt>
 8003332:	e002      	b.n	800333a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003338:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	8979      	ldrh	r1, [r7, #10]
 800336c:	4b20      	ldr	r3, [pc, #128]	@ (80033f0 <I2C_RequestMemoryRead+0xa4>)
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fee2 	bl	800413c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	69b9      	ldr	r1, [r7, #24]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fd73 	bl	8003e68 <I2C_WaitOnTXISFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e02c      	b.n	80033e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d105      	bne.n	800339e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003392:	893b      	ldrh	r3, [r7, #8]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	629a      	str	r2, [r3, #40]	@ 0x28
 800339c:	e015      	b.n	80033ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800339e:	893b      	ldrh	r3, [r7, #8]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fd59 	bl	8003e68 <I2C_WaitOnTXISFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e012      	b.n	80033e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2140      	movs	r1, #64	@ 0x40
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fcee 	bl	8003db6 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	80002000 	.word	0x80002000

080033f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800340a:	2b28      	cmp	r3, #40	@ 0x28
 800340c:	d16a      	bne.n	80034e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b29b      	uxth	r3, r3
 8003428:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800342c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003448:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d138      	bne.n	80034c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	b29a      	uxth	r2, r3
 8003458:	89bb      	ldrh	r3, [r7, #12]
 800345a:	4053      	eors	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	f003 0306 	and.w	r3, r3, #6
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11c      	bne.n	80034a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003478:	2b02      	cmp	r3, #2
 800347a:	d13b      	bne.n	80034f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2208      	movs	r2, #8
 8003488:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003492:	89ba      	ldrh	r2, [r7, #12]
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fe32 	bl	8003102 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800349e:	e029      	b.n	80034f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fe79 	bl	80041a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034b6:	89ba      	ldrh	r2, [r7, #12]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fe20 	bl	8003102 <HAL_I2C_AddrCallback>
}
 80034c2:	e017      	b.n	80034f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fe69 	bl	80041a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034d6:	89ba      	ldrh	r2, [r7, #12]
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fe10 	bl	8003102 <HAL_I2C_AddrCallback>
}
 80034e2:	e007      	b.n	80034f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e00c      	b.n	800354a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003548:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b29      	cmp	r3, #41	@ 0x29
 8003554:	d112      	bne.n	800357c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2228      	movs	r2, #40	@ 0x28
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2221      	movs	r2, #33	@ 0x21
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003564:	2101      	movs	r1, #1
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fe1a 	bl	80041a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fdb0 	bl	80030da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800357a:	e017      	b.n	80035ac <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b2a      	cmp	r3, #42	@ 0x2a
 8003586:	d111      	bne.n	80035ac <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2228      	movs	r2, #40	@ 0x28
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2222      	movs	r2, #34	@ 0x22
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003596:	2102      	movs	r1, #2
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fe01 	bl	80041a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fda1 	bl	80030ee <HAL_I2C_SlaveRxCpltCallback>
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2220      	movs	r2, #32
 80035de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	2b21      	cmp	r3, #33	@ 0x21
 80035e4:	d002      	beq.n	80035ec <I2C_ITSlaveCplt+0x38>
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	2b29      	cmp	r3, #41	@ 0x29
 80035ea:	d108      	bne.n	80035fe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80035ec:	f248 0101 	movw	r1, #32769	@ 0x8001
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fdd5 	bl	80041a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2221      	movs	r2, #33	@ 0x21
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80035fc:	e019      	b.n	8003632 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	2b22      	cmp	r3, #34	@ 0x22
 8003602:	d002      	beq.n	800360a <I2C_ITSlaveCplt+0x56>
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	2b2a      	cmp	r3, #42	@ 0x2a
 8003608:	d108      	bne.n	800361c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800360a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fdc6 	bl	80041a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2222      	movs	r2, #34	@ 0x22
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
 800361a:	e00a      	b.n	8003632 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	2b28      	cmp	r3, #40	@ 0x28
 8003620:	d107      	bne.n	8003632 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003622:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fdba 	bl	80041a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003640:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b7f      	ldr	r3, [pc, #508]	@ (800384c <I2C_ITSlaveCplt+0x298>)
 800364e:	400b      	ands	r3, r1
 8003650:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb6d 	bl	8003d32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d07a      	beq.n	8003758 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003670:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8111 	beq.w	800389e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a73      	ldr	r2, [pc, #460]	@ (8003850 <I2C_ITSlaveCplt+0x29c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d059      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a71      	ldr	r2, [pc, #452]	@ (8003854 <I2C_ITSlaveCplt+0x2a0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d053      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6f      	ldr	r2, [pc, #444]	@ (8003858 <I2C_ITSlaveCplt+0x2a4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04d      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6d      	ldr	r2, [pc, #436]	@ (800385c <I2C_ITSlaveCplt+0x2a8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d047      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6b      	ldr	r2, [pc, #428]	@ (8003860 <I2C_ITSlaveCplt+0x2ac>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d041      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a69      	ldr	r2, [pc, #420]	@ (8003864 <I2C_ITSlaveCplt+0x2b0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d03b      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a67      	ldr	r2, [pc, #412]	@ (8003868 <I2C_ITSlaveCplt+0x2b4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d035      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a65      	ldr	r2, [pc, #404]	@ (800386c <I2C_ITSlaveCplt+0x2b8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d02f      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a63      	ldr	r2, [pc, #396]	@ (8003870 <I2C_ITSlaveCplt+0x2bc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d029      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a61      	ldr	r2, [pc, #388]	@ (8003874 <I2C_ITSlaveCplt+0x2c0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d023      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003878 <I2C_ITSlaveCplt+0x2c4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01d      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5d      	ldr	r2, [pc, #372]	@ (800387c <I2C_ITSlaveCplt+0x2c8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d017      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5b      	ldr	r2, [pc, #364]	@ (8003880 <I2C_ITSlaveCplt+0x2cc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d011      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a59      	ldr	r2, [pc, #356]	@ (8003884 <I2C_ITSlaveCplt+0x2d0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a57      	ldr	r2, [pc, #348]	@ (8003888 <I2C_ITSlaveCplt+0x2d4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d005      	beq.n	800373c <I2C_ITSlaveCplt+0x188>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a55      	ldr	r2, [pc, #340]	@ (800388c <I2C_ITSlaveCplt+0x2d8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d105      	bne.n	8003748 <I2C_ITSlaveCplt+0x194>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	b29b      	uxth	r3, r3
 8003746:	e004      	b.n	8003752 <I2C_ITSlaveCplt+0x19e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b29b      	uxth	r3, r3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003756:	e0a2      	b.n	800389e <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 809d 	beq.w	800389e <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003772:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8090 	beq.w	800389e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a32      	ldr	r2, [pc, #200]	@ (8003850 <I2C_ITSlaveCplt+0x29c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d059      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a30      	ldr	r2, [pc, #192]	@ (8003854 <I2C_ITSlaveCplt+0x2a0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d053      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2e      	ldr	r2, [pc, #184]	@ (8003858 <I2C_ITSlaveCplt+0x2a4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04d      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2c      	ldr	r2, [pc, #176]	@ (800385c <I2C_ITSlaveCplt+0x2a8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d047      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003860 <I2C_ITSlaveCplt+0x2ac>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d041      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a28      	ldr	r2, [pc, #160]	@ (8003864 <I2C_ITSlaveCplt+0x2b0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d03b      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a26      	ldr	r2, [pc, #152]	@ (8003868 <I2C_ITSlaveCplt+0x2b4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d035      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a24      	ldr	r2, [pc, #144]	@ (800386c <I2C_ITSlaveCplt+0x2b8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02f      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a22      	ldr	r2, [pc, #136]	@ (8003870 <I2C_ITSlaveCplt+0x2bc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d029      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a20      	ldr	r2, [pc, #128]	@ (8003874 <I2C_ITSlaveCplt+0x2c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d023      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <I2C_ITSlaveCplt+0x2c4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01d      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <I2C_ITSlaveCplt+0x2c8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d017      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1a      	ldr	r2, [pc, #104]	@ (8003880 <I2C_ITSlaveCplt+0x2cc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d011      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <I2C_ITSlaveCplt+0x2d0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00b      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <I2C_ITSlaveCplt+0x2d4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d005      	beq.n	800383e <I2C_ITSlaveCplt+0x28a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a14      	ldr	r2, [pc, #80]	@ (800388c <I2C_ITSlaveCplt+0x2d8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d128      	bne.n	8003890 <I2C_ITSlaveCplt+0x2dc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b29b      	uxth	r3, r3
 8003848:	e027      	b.n	800389a <I2C_ITSlaveCplt+0x2e6>
 800384a:	bf00      	nop
 800384c:	fe00e800 	.word	0xfe00e800
 8003850:	40020010 	.word	0x40020010
 8003854:	40020028 	.word	0x40020028
 8003858:	40020040 	.word	0x40020040
 800385c:	40020058 	.word	0x40020058
 8003860:	40020070 	.word	0x40020070
 8003864:	40020088 	.word	0x40020088
 8003868:	400200a0 	.word	0x400200a0
 800386c:	400200b8 	.word	0x400200b8
 8003870:	40020410 	.word	0x40020410
 8003874:	40020428 	.word	0x40020428
 8003878:	40020440 	.word	0x40020440
 800387c:	40020458 	.word	0x40020458
 8003880:	40020470 	.word	0x40020470
 8003884:	40020488 	.word	0x40020488
 8003888:	400204a0 	.word	0x400204a0
 800388c:	400204b8 	.word	0x400204b8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	b29b      	uxth	r3, r3
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0304 	bic.w	r3, r3, #4
 80038ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d049      	beq.n	800399e <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003910:	2b00      	cmp	r3, #0
 8003912:	d044      	beq.n	800399e <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d128      	bne.n	8003970 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b28      	cmp	r3, #40	@ 0x28
 8003928:	d108      	bne.n	800393c <I2C_ITSlaveCplt+0x388>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003930:	d104      	bne.n	800393c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f891 	bl	8003a5c <I2C_ITListenCplt>
 800393a:	e030      	b.n	800399e <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b29      	cmp	r3, #41	@ 0x29
 8003946:	d10e      	bne.n	8003966 <I2C_ITSlaveCplt+0x3b2>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800394e:	d00a      	beq.n	8003966 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2210      	movs	r2, #16
 8003956:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f9ea 	bl	8003d32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fdcc 	bl	80034fc <I2C_ITSlaveSeqCplt>
 8003964:	e01b      	b.n	800399e <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	61da      	str	r2, [r3, #28]
 800396e:	e016      	b.n	800399e <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <I2C_ITSlaveCplt+0x3de>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003990:	d105      	bne.n	800399e <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8b3 	bl	8003b04 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d010      	beq.n	80039d6 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8a2 	bl	8003b04 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b28      	cmp	r3, #40	@ 0x28
 80039ca:	d141      	bne.n	8003a50 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f844 	bl	8003a5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039d4:	e03c      	b.n	8003a50 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039de:	d014      	beq.n	8003a0a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fd8b 	bl	80034fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <I2C_ITSlaveCplt+0x4a4>)
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fb8b 	bl	800311e <HAL_I2C_ListenCpltCallback>
}
 8003a08:	e022      	b.n	8003a50 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b22      	cmp	r3, #34	@ 0x22
 8003a14:	d10e      	bne.n	8003a34 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fb5e 	bl	80030ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003a32:	e00d      	b.n	8003a50 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fb45 	bl	80030da <HAL_I2C_SlaveTxCpltCallback>
}
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	ffff0000 	.word	0xffff0000

08003a5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a25      	ldr	r2, [pc, #148]	@ (8003b00 <I2C_ITListenCplt+0xa4>)
 8003a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d022      	beq.n	8003ad8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ad8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fb5f 	bl	80041a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fb13 	bl	800311e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	ffff0000 	.word	0xffff0000

08003b04 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b14:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd8 <I2C_ITError+0x1d4>)
 8003b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b28      	cmp	r3, #40	@ 0x28
 8003b3a:	d005      	beq.n	8003b48 <I2C_ITError+0x44>
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b29      	cmp	r3, #41	@ 0x29
 8003b40:	d002      	beq.n	8003b48 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b46:	d10b      	bne.n	8003b60 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b48:	2103      	movs	r1, #3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fb28 	bl	80041a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2228      	movs	r2, #40	@ 0x28
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a60      	ldr	r2, [pc, #384]	@ (8003cdc <I2C_ITError+0x1d8>)
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b5e:	e030      	b.n	8003bc2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b60:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fb1b 	bl	80041a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8e1 	bl	8003d32 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b60      	cmp	r3, #96	@ 0x60
 8003b7a:	d01f      	beq.n	8003bbc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d114      	bne.n	8003bbc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d109      	bne.n	8003bb4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d039      	beq.n	8003c44 <I2C_ITError+0x140>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b11      	cmp	r3, #17
 8003bd4:	d002      	beq.n	8003bdc <I2C_ITError+0xd8>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b21      	cmp	r3, #33	@ 0x21
 8003bda:	d133      	bne.n	8003c44 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bea:	d107      	bne.n	8003bfc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bfa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fd3b 	bl	800267c <HAL_DMA_GetState>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d017      	beq.n	8003c3c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	4a33      	ldr	r2, [pc, #204]	@ (8003ce0 <I2C_ITError+0x1dc>)
 8003c12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fae5 	bl	80021f0 <HAL_DMA_Abort_IT>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d04d      	beq.n	8003cc8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c36:	4610      	mov	r0, r2
 8003c38:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c3a:	e045      	b.n	8003cc8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f851 	bl	8003ce4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c42:	e041      	b.n	8003cc8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d039      	beq.n	8003cc0 <I2C_ITError+0x1bc>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b12      	cmp	r3, #18
 8003c50:	d002      	beq.n	8003c58 <I2C_ITError+0x154>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b22      	cmp	r3, #34	@ 0x22
 8003c56:	d133      	bne.n	8003cc0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c66:	d107      	bne.n	8003c78 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fe fcfd 	bl	800267c <HAL_DMA_GetState>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d017      	beq.n	8003cb8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <I2C_ITError+0x1dc>)
 8003c8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe faa7 	bl	80021f0 <HAL_DMA_Abort_IT>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d011      	beq.n	8003ccc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cb6:	e009      	b.n	8003ccc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f813 	bl	8003ce4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cbe:	e005      	b.n	8003ccc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f80f 	bl	8003ce4 <I2C_TreatErrorCallback>
  }
}
 8003cc6:	e002      	b.n	8003cce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ccc:	bf00      	nop
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	ffff0000 	.word	0xffff0000
 8003cdc:	0800315b 	.word	0x0800315b
 8003ce0:	08003d7b 	.word	0x08003d7b

08003ce4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b60      	cmp	r3, #96	@ 0x60
 8003cf6:	d10e      	bne.n	8003d16 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fa19 	bl	8003146 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d14:	e009      	b.n	8003d2a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fa04 	bl	8003132 <HAL_I2C_ErrorCallback>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d103      	bne.n	8003d50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d007      	beq.n	8003d6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	619a      	str	r2, [r3, #24]
  }
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d94:	2200      	movs	r2, #0
 8003d96:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	2200      	movs	r2, #0
 8003da6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff ff9b 	bl	8003ce4 <I2C_TreatErrorCallback>
}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc6:	e03b      	b.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	6839      	ldr	r1, [r7, #0]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f8d5 	bl	8003f7c <I2C_IsErrorOccurred>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e041      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d02d      	beq.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fd fd9a 	bl	800191c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x44>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d122      	bne.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d113      	bne.n	8003e40 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e00f      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d0b4      	beq.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e74:	e033      	b.n	8003ede <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f87e 	bl	8003f7c <I2C_IsErrorOccurred>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e031      	b.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d025      	beq.n	8003ede <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fd fd43 	bl	800191c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11a      	bne.n	8003ede <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d013      	beq.n	8003ede <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e007      	b.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d1c4      	bne.n	8003e76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f02:	e02f      	b.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f837 	bl	8003f7c <I2C_IsErrorOccurred>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e02d      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fd fd00 	bl	800191c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11a      	bne.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d013      	beq.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e007      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d1c8      	bne.n	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d068      	beq.n	800407a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2210      	movs	r2, #16
 8003fae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fb0:	e049      	b.n	8004046 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d045      	beq.n	8004046 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fd fcaf 	bl	800191c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_IsErrorOccurred+0x54>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d13a      	bne.n	8004046 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff2:	d121      	bne.n	8004038 <I2C_IsErrorOccurred+0xbc>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffa:	d01d      	beq.n	8004038 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d01a      	beq.n	8004038 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004010:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004012:	f7fd fc83 	bl	800191c <HAL_GetTick>
 8004016:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004018:	e00e      	b.n	8004038 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800401a:	f7fd fc7f 	bl	800191c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b19      	cmp	r3, #25
 8004026:	d907      	bls.n	8004038 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f043 0320 	orr.w	r3, r3, #32
 800402e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004036:	e006      	b.n	8004046 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d1e9      	bne.n	800401a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d003      	beq.n	800405c <I2C_IsErrorOccurred+0xe0>
 8004054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0aa      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800405c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2220      	movs	r2, #32
 800406a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800409c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f043 0308 	orr.w	r3, r3, #8
 80040b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fe1e 	bl	8003d32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <I2C_IsErrorOccurred+0x1bc>)
 8004102:	400b      	ands	r3, r1
 8004104:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800412a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800412e:	4618      	mov	r0, r3
 8004130:	3728      	adds	r7, #40	@ 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	fe00e800 	.word	0xfe00e800

0800413c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	817b      	strh	r3, [r7, #10]
 800414a:	4613      	mov	r3, r2
 800414c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004154:	7a7b      	ldrb	r3, [r7, #9]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	4313      	orrs	r3, r2
 8004166:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800416a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	0d5b      	lsrs	r3, r3, #21
 8004176:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800417a:	4b08      	ldr	r3, [pc, #32]	@ (800419c <I2C_TransferConfig+0x60>)
 800417c:	430b      	orrs	r3, r1
 800417e:	43db      	mvns	r3, r3
 8004180:	ea02 0103 	and.w	r1, r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	03ff63ff 	.word	0x03ff63ff

080041a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00f      	beq.n	80041da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80041c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041ce:	2b28      	cmp	r3, #40	@ 0x28
 80041d0:	d003      	beq.n	80041da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80041d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00f      	beq.n	8004204 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80041ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041f8:	2b28      	cmp	r3, #40	@ 0x28
 80041fa:	d003      	beq.n	8004204 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004202:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004204:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004208:	2b00      	cmp	r3, #0
 800420a:	da03      	bge.n	8004214 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004212:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004214:	887b      	ldrh	r3, [r7, #2]
 8004216:	2b10      	cmp	r3, #16
 8004218:	d103      	bne.n	8004222 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004220:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004222:	887b      	ldrh	r3, [r7, #2]
 8004224:	2b20      	cmp	r3, #32
 8004226:	d103      	bne.n	8004230 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f043 0320 	orr.w	r3, r3, #32
 800422e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	2b40      	cmp	r3, #64	@ 0x40
 8004234:	d103      	bne.n	800423e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800423c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43da      	mvns	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	d138      	bne.n	80042e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800427c:	2302      	movs	r3, #2
 800427e:	e032      	b.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	@ 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b20      	cmp	r3, #32
 8004306:	d139      	bne.n	800437c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004312:	2302      	movs	r3, #2
 8004314:	e033      	b.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2224      	movs	r2, #36	@ 0x24
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004394:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_PWREx_ConfigSupply+0xb0>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	2b06      	cmp	r3, #6
 800439e:	d00a      	beq.n	80043b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043a0:	4b26      	ldr	r3, [pc, #152]	@ (800443c <HAL_PWREx_ConfigSupply+0xb0>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d001      	beq.n	80043b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e040      	b.n	8004434 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e03e      	b.n	8004434 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043b6:	4b21      	ldr	r3, [pc, #132]	@ (800443c <HAL_PWREx_ConfigSupply+0xb0>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80043be:	491f      	ldr	r1, [pc, #124]	@ (800443c <HAL_PWREx_ConfigSupply+0xb0>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043c6:	f7fd faa9 	bl	800191c <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043cc:	e009      	b.n	80043e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043ce:	f7fd faa5 	bl	800191c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043dc:	d901      	bls.n	80043e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e028      	b.n	8004434 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043e2:	4b16      	ldr	r3, [pc, #88]	@ (800443c <HAL_PWREx_ConfigSupply+0xb0>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ee:	d1ee      	bne.n	80043ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b1e      	cmp	r3, #30
 80043f4:	d008      	beq.n	8004408 <HAL_PWREx_ConfigSupply+0x7c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80043fa:	d005      	beq.n	8004408 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b1d      	cmp	r3, #29
 8004400:	d002      	beq.n	8004408 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b2d      	cmp	r3, #45	@ 0x2d
 8004406:	d114      	bne.n	8004432 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004408:	f7fd fa88 	bl	800191c <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800440e:	e009      	b.n	8004424 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004410:	f7fd fa84 	bl	800191c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800441e:	d901      	bls.n	8004424 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_PWREx_ConfigSupply+0xb0>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004430:	d1ee      	bne.n	8004410 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	58024800 	.word	0x58024800

08004440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	@ 0x30
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f000 bc48 	b.w	8004ce4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8088 	beq.w	8004572 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004462:	4b99      	ldr	r3, [pc, #612]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800446a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800446c:	4b96      	ldr	r3, [pc, #600]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	2b10      	cmp	r3, #16
 8004476:	d007      	beq.n	8004488 <HAL_RCC_OscConfig+0x48>
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	2b18      	cmp	r3, #24
 800447c:	d111      	bne.n	80044a2 <HAL_RCC_OscConfig+0x62>
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	4b8f      	ldr	r3, [pc, #572]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d06d      	beq.n	8004570 <HAL_RCC_OscConfig+0x130>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d169      	bne.n	8004570 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f000 bc21 	b.w	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x7a>
 80044ac:	4b86      	ldr	r3, [pc, #536]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a85      	ldr	r2, [pc, #532]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e02e      	b.n	8004518 <HAL_RCC_OscConfig+0xd8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x9c>
 80044c2:	4b81      	ldr	r3, [pc, #516]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a80      	ldr	r2, [pc, #512]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b7e      	ldr	r3, [pc, #504]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7d      	ldr	r2, [pc, #500]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e01d      	b.n	8004518 <HAL_RCC_OscConfig+0xd8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0xc0>
 80044e6:	4b78      	ldr	r3, [pc, #480]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a77      	ldr	r2, [pc, #476]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b75      	ldr	r3, [pc, #468]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a74      	ldr	r2, [pc, #464]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xd8>
 8004500:	4b71      	ldr	r3, [pc, #452]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a70      	ldr	r2, [pc, #448]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b6e      	ldr	r3, [pc, #440]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6d      	ldr	r2, [pc, #436]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd f9fc 	bl	800191c <HAL_GetTick>
 8004524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd f9f8 	bl	800191c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	@ 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e3d4      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800453a:	4b63      	ldr	r3, [pc, #396]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xe8>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd f9e8 	bl	800191c <HAL_GetTick>
 800454c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd f9e4 	bl	800191c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e3c0      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004562:	4b59      	ldr	r3, [pc, #356]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x110>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80ca 	beq.w	8004714 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004580:	4b51      	ldr	r3, [pc, #324]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004588:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800458a:	4b4f      	ldr	r3, [pc, #316]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <HAL_RCC_OscConfig+0x166>
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b18      	cmp	r3, #24
 800459a:	d156      	bne.n	800464a <HAL_RCC_OscConfig+0x20a>
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d151      	bne.n	800464a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a6:	4b48      	ldr	r3, [pc, #288]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x17e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e392      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045be:	4b42      	ldr	r3, [pc, #264]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 0219 	bic.w	r2, r3, #25
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	493f      	ldr	r1, [pc, #252]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd f9a4 	bl	800191c <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d8:	f7fd f9a0 	bl	800191c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e37c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ea:	4b37      	ldr	r3, [pc, #220]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f6:	f7fd f9c1 	bl	800197c <HAL_GetREVID>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004600:	4293      	cmp	r3, r2
 8004602:	d817      	bhi.n	8004634 <HAL_RCC_OscConfig+0x1f4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	d108      	bne.n	800461e <HAL_RCC_OscConfig+0x1de>
 800460c:	4b2e      	ldr	r3, [pc, #184]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004614:	4a2c      	ldr	r2, [pc, #176]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800461a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800461c:	e07a      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b2a      	ldr	r3, [pc, #168]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	031b      	lsls	r3, r3, #12
 800462c:	4926      	ldr	r1, [pc, #152]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004632:	e06f      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	061b      	lsls	r3, r3, #24
 8004642:	4921      	ldr	r1, [pc, #132]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004648:	e064      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d047      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004652:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0219 	bic.w	r2, r3, #25
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	491a      	ldr	r1, [pc, #104]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fd f95a 	bl	800191c <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466c:	f7fd f956 	bl	800191c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e332      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800467e:	4b12      	ldr	r3, [pc, #72]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	f7fd f977 	bl	800197c <HAL_GetREVID>
 800468e:	4603      	mov	r3, r0
 8004690:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004694:	4293      	cmp	r3, r2
 8004696:	d819      	bhi.n	80046cc <HAL_RCC_OscConfig+0x28c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d108      	bne.n	80046b2 <HAL_RCC_OscConfig+0x272>
 80046a0:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046a8:	4a07      	ldr	r2, [pc, #28]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ae:	6053      	str	r3, [r2, #4]
 80046b0:	e030      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	031b      	lsls	r3, r3, #12
 80046c0:	4901      	ldr	r1, [pc, #4]	@ (80046c8 <HAL_RCC_OscConfig+0x288>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
 80046c6:	e025      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
 80046c8:	58024400 	.word	0x58024400
 80046cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	4997      	ldr	r1, [pc, #604]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	e018      	b.n	8004714 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b95      	ldr	r3, [pc, #596]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a94      	ldr	r2, [pc, #592]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fd f915 	bl	800191c <HAL_GetTick>
 80046f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fd f911 	bl	800191c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e2ed      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004708:	4b8b      	ldr	r3, [pc, #556]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80a9 	beq.w	8004874 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	4b85      	ldr	r3, [pc, #532]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800472a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800472c:	4b82      	ldr	r3, [pc, #520]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d007      	beq.n	8004748 <HAL_RCC_OscConfig+0x308>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b18      	cmp	r3, #24
 800473c:	d13a      	bne.n	80047b4 <HAL_RCC_OscConfig+0x374>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d135      	bne.n	80047b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004748:	4b7b      	ldr	r3, [pc, #492]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_OscConfig+0x320>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b80      	cmp	r3, #128	@ 0x80
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e2c1      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004760:	f7fd f90c 	bl	800197c <HAL_GetREVID>
 8004764:	4603      	mov	r3, r0
 8004766:	f241 0203 	movw	r2, #4099	@ 0x1003
 800476a:	4293      	cmp	r3, r2
 800476c:	d817      	bhi.n	800479e <HAL_RCC_OscConfig+0x35e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d108      	bne.n	8004788 <HAL_RCC_OscConfig+0x348>
 8004776:	4b70      	ldr	r3, [pc, #448]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800477e:	4a6e      	ldr	r2, [pc, #440]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004784:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004786:	e075      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004788:	4b6b      	ldr	r3, [pc, #428]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	069b      	lsls	r3, r3, #26
 8004796:	4968      	ldr	r1, [pc, #416]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800479c:	e06a      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800479e:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	4962      	ldr	r1, [pc, #392]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047b2:	e05f      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d042      	beq.n	8004842 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fd f8a8 	bl	800191c <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047d0:	f7fd f8a4 	bl	800191c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e280      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047e2:	4b55      	ldr	r3, [pc, #340]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ee:	f7fd f8c5 	bl	800197c <HAL_GetREVID>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d817      	bhi.n	800482c <HAL_RCC_OscConfig+0x3ec>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d108      	bne.n	8004816 <HAL_RCC_OscConfig+0x3d6>
 8004804:	4b4c      	ldr	r3, [pc, #304]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800480c:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004812:	6053      	str	r3, [r2, #4]
 8004814:	e02e      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
 8004816:	4b48      	ldr	r3, [pc, #288]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	069b      	lsls	r3, r3, #26
 8004824:	4944      	ldr	r1, [pc, #272]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
 800482a:	e023      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
 800482c:	4b42      	ldr	r3, [pc, #264]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	493f      	ldr	r1, [pc, #252]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
 8004840:	e018      	b.n	8004874 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004842:	4b3d      	ldr	r3, [pc, #244]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3c      	ldr	r2, [pc, #240]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800484c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd f865 	bl	800191c <HAL_GetTick>
 8004852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004856:	f7fd f861 	bl	800191c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e23d      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004868:	4b33      	ldr	r3, [pc, #204]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d036      	beq.n	80048ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d019      	beq.n	80048bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004888:	4b2b      	ldr	r3, [pc, #172]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488c:	4a2a      	ldr	r2, [pc, #168]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd f842 	bl	800191c <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fd f83e 	bl	800191c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e21a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048ae:	4b22      	ldr	r3, [pc, #136]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x45c>
 80048ba:	e018      	b.n	80048ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd f828 	bl	800191c <HAL_GetTick>
 80048cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd f824 	bl	800191c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e200      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048e2:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d039      	beq.n	800496e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01c      	beq.n	800493c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0c      	ldr	r2, [pc, #48]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004908:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800490c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800490e:	f7fd f805 	bl	800191c <HAL_GetTick>
 8004912:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004916:	f7fd f801 	bl	800191c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e1dd      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004928:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x4d6>
 8004934:	e01b      	b.n	800496e <HAL_RCC_OscConfig+0x52e>
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493c:	4b9b      	ldr	r3, [pc, #620]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a9a      	ldr	r2, [pc, #616]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004946:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004948:	f7fc ffe8 	bl	800191c <HAL_GetTick>
 800494c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004950:	f7fc ffe4 	bl	800191c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e1c0      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004962:	4b92      	ldr	r3, [pc, #584]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8081 	beq.w	8004a7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800497c:	4b8c      	ldr	r3, [pc, #560]	@ (8004bb0 <HAL_RCC_OscConfig+0x770>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a8b      	ldr	r2, [pc, #556]	@ (8004bb0 <HAL_RCC_OscConfig+0x770>)
 8004982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004988:	f7fc ffc8 	bl	800191c <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fc ffc4 	bl	800191c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	@ 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e1a0      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049a2:	4b83      	ldr	r3, [pc, #524]	@ (8004bb0 <HAL_RCC_OscConfig+0x770>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x584>
 80049b6:	4b7d      	ldr	r3, [pc, #500]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	4a7c      	ldr	r2, [pc, #496]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c2:	e02d      	b.n	8004a20 <HAL_RCC_OscConfig+0x5e0>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x5a6>
 80049cc:	4b77      	ldr	r3, [pc, #476]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d0:	4a76      	ldr	r2, [pc, #472]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d8:	4b74      	ldr	r3, [pc, #464]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	4a73      	ldr	r2, [pc, #460]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e4:	e01c      	b.n	8004a20 <HAL_RCC_OscConfig+0x5e0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5c8>
 80049ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	4a6e      	ldr	r2, [pc, #440]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fa:	4b6c      	ldr	r3, [pc, #432]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fe:	4a6b      	ldr	r2, [pc, #428]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0x5e0>
 8004a08:	4b68      	ldr	r3, [pc, #416]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	4a67      	ldr	r2, [pc, #412]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a14:	4b65      	ldr	r3, [pc, #404]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a18:	4a64      	ldr	r2, [pc, #400]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a1a:	f023 0304 	bic.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fc ff78 	bl	800191c <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fc ff74 	bl	800191c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e14e      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a46:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ee      	beq.n	8004a30 <HAL_RCC_OscConfig+0x5f0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc ff62 	bl	800191c <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fc ff5e 	bl	800191c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e138      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a72:	4b4e      	ldr	r3, [pc, #312]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ee      	bne.n	8004a5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 812d 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a88:	4b48      	ldr	r3, [pc, #288]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a90:	2b18      	cmp	r3, #24
 8004a92:	f000 80bd 	beq.w	8004c10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	f040 809e 	bne.w	8004bdc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b42      	ldr	r3, [pc, #264]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fc ff36 	bl	800191c <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fc ff32 	bl	800191c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e10e      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ad6:	4b37      	ldr	r3, [pc, #220]	@ (8004bb4 <HAL_RCC_OscConfig+0x774>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	4931      	ldr	r1, [pc, #196]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	628b      	str	r3, [r1, #40]	@ 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afa:	3b01      	subs	r3, #1
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	3b01      	subs	r3, #1
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b1c:	4923      	ldr	r1, [pc, #140]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b22:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	4a21      	ldr	r2, [pc, #132]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b32:	4b21      	ldr	r3, [pc, #132]	@ (8004bb8 <HAL_RCC_OscConfig+0x778>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b3a:	00d2      	lsls	r2, r2, #3
 8004b3c:	491b      	ldr	r1, [pc, #108]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b42:	4b1a      	ldr	r3, [pc, #104]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	f023 020c 	bic.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	4917      	ldr	r1, [pc, #92]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b54:	4b15      	ldr	r3, [pc, #84]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	f023 0202 	bic.w	r2, r3, #2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	4912      	ldr	r1, [pc, #72]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b66:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a10      	ldr	r2, [pc, #64]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b72:	4b0e      	ldr	r3, [pc, #56]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	4a0d      	ldr	r2, [pc, #52]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b82:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b8a:	4b08      	ldr	r3, [pc, #32]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	4a07      	ldr	r2, [pc, #28]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b96:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <HAL_RCC_OscConfig+0x76c>)
 8004b9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fc febb 	bl	800191c <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba8:	e011      	b.n	8004bce <HAL_RCC_OscConfig+0x78e>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	58024800 	.word	0x58024800
 8004bb4:	fffffc0c 	.word	0xfffffc0c
 8004bb8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fc feae 	bl	800191c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e08a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bce:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x77c>
 8004bda:	e082      	b.n	8004ce2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a42      	ldr	r2, [pc, #264]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fc fe98 	bl	800191c <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fc fe94 	bl	800191c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e070      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c02:	4b3a      	ldr	r3, [pc, #232]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x7b0>
 8004c0e:	e068      	b.n	8004ce2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c10:	4b36      	ldr	r3, [pc, #216]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c16:	4b35      	ldr	r3, [pc, #212]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d031      	beq.n	8004c88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0203 	and.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d12a      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d122      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d11a      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0a5b      	lsrs	r3, r3, #9
 8004c56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d111      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d108      	bne.n	8004c88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0e1b      	lsrs	r3, r3, #24
 8004c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e02b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c8c:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c90:	08db      	lsrs	r3, r3, #3
 8004c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d01f      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ca2:	4b12      	ldr	r3, [pc, #72]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	4a11      	ldr	r2, [pc, #68]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cae:	f7fc fe35 	bl	800191c <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004cb4:	bf00      	nop
 8004cb6:	f7fc fe31 	bl	800191c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d0f9      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <HAL_RCC_OscConfig+0x8b0>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4906      	ldr	r1, [pc, #24]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cd6:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4a04      	ldr	r2, [pc, #16]	@ (8004cec <HAL_RCC_OscConfig+0x8ac>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3730      	adds	r7, #48	@ 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	ffff0007 	.word	0xffff0007

08004cf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e19c      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d08:	4b8a      	ldr	r3, [pc, #552]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d910      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d16:	4b87      	ldr	r3, [pc, #540]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 020f 	bic.w	r2, r3, #15
 8004d1e:	4985      	ldr	r1, [pc, #532]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b83      	ldr	r3, [pc, #524]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e184      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d010      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	4b7b      	ldr	r3, [pc, #492]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d908      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d54:	4b78      	ldr	r3, [pc, #480]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	4975      	ldr	r1, [pc, #468]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d010      	beq.n	8004d94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	4b70      	ldr	r3, [pc, #448]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d908      	bls.n	8004d94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d82:	4b6d      	ldr	r3, [pc, #436]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	496a      	ldr	r1, [pc, #424]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	4b64      	ldr	r3, [pc, #400]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d908      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004db0:	4b61      	ldr	r3, [pc, #388]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	495e      	ldr	r1, [pc, #376]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d010      	beq.n	8004df0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69da      	ldr	r2, [r3, #28]
 8004dd2:	4b59      	ldr	r3, [pc, #356]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d908      	bls.n	8004df0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dde:	4b56      	ldr	r3, [pc, #344]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4953      	ldr	r1, [pc, #332]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d010      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	4b4d      	ldr	r3, [pc, #308]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d908      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f023 020f 	bic.w	r2, r3, #15
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4947      	ldr	r1, [pc, #284]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d055      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e2a:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4940      	ldr	r1, [pc, #256]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d107      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e44:	4b3c      	ldr	r3, [pc, #240]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d121      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0f6      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e5c:	4b36      	ldr	r3, [pc, #216]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d115      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0ea      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e74:	4b30      	ldr	r3, [pc, #192]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0de      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e84:	4b2c      	ldr	r3, [pc, #176]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0d6      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e94:	4b28      	ldr	r3, [pc, #160]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f023 0207 	bic.w	r2, r3, #7
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4925      	ldr	r1, [pc, #148]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc fd39 	bl	800191c <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eae:	f7fc fd35 	bl	800191c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e0be      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d1eb      	bne.n	8004eae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	4b14      	ldr	r3, [pc, #80]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d208      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef2:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f023 020f 	bic.w	r2, r3, #15
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	490e      	ldr	r1, [pc, #56]	@ (8004f38 <HAL_RCC_ClockConfig+0x244>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f04:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d214      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b08      	ldr	r3, [pc, #32]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 020f 	bic.w	r2, r3, #15
 8004f1a:	4906      	ldr	r1, [pc, #24]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <HAL_RCC_ClockConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e086      	b.n	8005042 <HAL_RCC_ClockConfig+0x34e>
 8004f34:	52002000 	.word	0x52002000
 8004f38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d208      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f58:	4b3c      	ldr	r3, [pc, #240]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	4939      	ldr	r1, [pc, #228]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	4b34      	ldr	r3, [pc, #208]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d208      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f86:	4b31      	ldr	r3, [pc, #196]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	492e      	ldr	r1, [pc, #184]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d010      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	4b28      	ldr	r3, [pc, #160]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d208      	bcs.n	8004fc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fb4:	4b25      	ldr	r3, [pc, #148]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	4922      	ldr	r1, [pc, #136]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d208      	bcs.n	8004ff4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4917      	ldr	r1, [pc, #92]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ff4:	f000 f834 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b14      	ldr	r3, [pc, #80]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	4912      	ldr	r1, [pc, #72]	@ (8005050 <HAL_RCC_ClockConfig+0x35c>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005012:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <HAL_RCC_ClockConfig+0x358>)
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	4a0d      	ldr	r2, [pc, #52]	@ (8005050 <HAL_RCC_ClockConfig+0x35c>)
 800501c:	5cd3      	ldrb	r3, [r2, r3]
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
 8005028:	4a0a      	ldr	r2, [pc, #40]	@ (8005054 <HAL_RCC_ClockConfig+0x360>)
 800502a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800502c:	4a0a      	ldr	r2, [pc, #40]	@ (8005058 <HAL_RCC_ClockConfig+0x364>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005032:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <HAL_RCC_ClockConfig+0x368>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fc fc26 	bl	8001888 <HAL_InitTick>
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	58024400 	.word	0x58024400
 8005050:	0800da30 	.word	0x0800da30
 8005054:	24000004 	.word	0x24000004
 8005058:	24000000 	.word	0x24000000
 800505c:	24000008 	.word	0x24000008

08005060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	@ 0x24
 8005064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005066:	4bb3      	ldr	r3, [pc, #716]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800506e:	2b18      	cmp	r3, #24
 8005070:	f200 8155 	bhi.w	800531e <HAL_RCC_GetSysClockFreq+0x2be>
 8005074:	a201      	add	r2, pc, #4	@ (adr r2, 800507c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050e1 	.word	0x080050e1
 8005080:	0800531f 	.word	0x0800531f
 8005084:	0800531f 	.word	0x0800531f
 8005088:	0800531f 	.word	0x0800531f
 800508c:	0800531f 	.word	0x0800531f
 8005090:	0800531f 	.word	0x0800531f
 8005094:	0800531f 	.word	0x0800531f
 8005098:	0800531f 	.word	0x0800531f
 800509c:	08005107 	.word	0x08005107
 80050a0:	0800531f 	.word	0x0800531f
 80050a4:	0800531f 	.word	0x0800531f
 80050a8:	0800531f 	.word	0x0800531f
 80050ac:	0800531f 	.word	0x0800531f
 80050b0:	0800531f 	.word	0x0800531f
 80050b4:	0800531f 	.word	0x0800531f
 80050b8:	0800531f 	.word	0x0800531f
 80050bc:	0800510d 	.word	0x0800510d
 80050c0:	0800531f 	.word	0x0800531f
 80050c4:	0800531f 	.word	0x0800531f
 80050c8:	0800531f 	.word	0x0800531f
 80050cc:	0800531f 	.word	0x0800531f
 80050d0:	0800531f 	.word	0x0800531f
 80050d4:	0800531f 	.word	0x0800531f
 80050d8:	0800531f 	.word	0x0800531f
 80050dc:	08005113 	.word	0x08005113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e0:	4b94      	ldr	r3, [pc, #592]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050ec:	4b91      	ldr	r3, [pc, #580]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	4a90      	ldr	r2, [pc, #576]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050fe:	e111      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005100:	4b8d      	ldr	r3, [pc, #564]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005102:	61bb      	str	r3, [r7, #24]
      break;
 8005104:	e10e      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005106:	4b8d      	ldr	r3, [pc, #564]	@ (800533c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005108:	61bb      	str	r3, [r7, #24]
      break;
 800510a:	e10b      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800510c:	4b8c      	ldr	r3, [pc, #560]	@ (8005340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800510e:	61bb      	str	r3, [r7, #24]
      break;
 8005110:	e108      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005112:	4b88      	ldr	r3, [pc, #544]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800511c:	4b85      	ldr	r3, [pc, #532]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005128:	4b82      	ldr	r3, [pc, #520]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005132:	4b80      	ldr	r3, [pc, #512]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80e1 	beq.w	8005318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b02      	cmp	r3, #2
 800515a:	f000 8083 	beq.w	8005264 <HAL_RCC_GetSysClockFreq+0x204>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b02      	cmp	r3, #2
 8005162:	f200 80a1 	bhi.w	80052a8 <HAL_RCC_GetSysClockFreq+0x248>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x114>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d056      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005172:	e099      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005174:	4b6f      	ldr	r3, [pc, #444]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d02d      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005180:	4b6c      	ldr	r3, [pc, #432]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	4a6b      	ldr	r2, [pc, #428]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b62      	ldr	r3, [pc, #392]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80051be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051da:	e087      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005348 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b51      	ldr	r3, [pc, #324]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005202:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800521e:	e065      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800534c <HAL_RCC_GetSysClockFreq+0x2ec>
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b40      	ldr	r3, [pc, #256]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a02 	vldr	s12, [r7, #8]
 8005246:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005262:	e043      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b2f      	ldr	r3, [pc, #188]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a02 	vldr	s12, [r7, #8]
 800528a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052a6:	e021      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800534c <HAL_RCC_GetSysClockFreq+0x2ec>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052ec:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	0a5b      	lsrs	r3, r3, #9
 80052f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f6:	3301      	adds	r3, #1
 80052f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005304:	edd7 6a07 	vldr	s13, [r7, #28]
 8005308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800530c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005310:	ee17 3a90 	vmov	r3, s15
 8005314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005316:	e005      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
      break;
 800531c:	e002      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800531e:	4b07      	ldr	r3, [pc, #28]	@ (800533c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005320:	61bb      	str	r3, [r7, #24]
      break;
 8005322:	bf00      	nop
  }

  return sysclockfreq;
 8005324:	69bb      	ldr	r3, [r7, #24]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	@ 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	58024400 	.word	0x58024400
 8005338:	03d09000 	.word	0x03d09000
 800533c:	003d0900 	.word	0x003d0900
 8005340:	017d7840 	.word	0x017d7840
 8005344:	46000000 	.word	0x46000000
 8005348:	4c742400 	.word	0x4c742400
 800534c:	4a742400 	.word	0x4a742400
 8005350:	4bbebc20 	.word	0x4bbebc20

08005354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800535a:	f7ff fe81 	bl	8005060 <HAL_RCC_GetSysClockFreq>
 800535e:	4602      	mov	r2, r0
 8005360:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	490f      	ldr	r1, [pc, #60]	@ (80053a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800536c:	5ccb      	ldrb	r3, [r1, r3]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005378:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	fa22 f303 	lsr.w	r3, r2, r3
 800538e:	4a07      	ldr	r2, [pc, #28]	@ (80053ac <HAL_RCC_GetHCLKFreq+0x58>)
 8005390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005392:	4a07      	ldr	r2, [pc, #28]	@ (80053b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005398:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <HAL_RCC_GetHCLKFreq+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	58024400 	.word	0x58024400
 80053a8:	0800da30 	.word	0x0800da30
 80053ac:	24000004 	.word	0x24000004
 80053b0:	24000000 	.word	0x24000000

080053b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80053b8:	f7ff ffcc 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4904      	ldr	r1, [pc, #16]	@ (80053dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	58024400 	.word	0x58024400
 80053dc:	0800da30 	.word	0x0800da30

080053e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80053e4:	f7ff ffb6 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4904      	ldr	r1, [pc, #16]	@ (8005408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	58024400 	.word	0x58024400
 8005408:	0800da30 	.word	0x0800da30

0800540c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800540c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005410:	b0ca      	sub	sp, #296	@ 0x128
 8005412:	af00      	add	r7, sp, #0
 8005414:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005430:	2500      	movs	r5, #0
 8005432:	ea54 0305 	orrs.w	r3, r4, r5
 8005436:	d049      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800543e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005442:	d02f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005444:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005448:	d828      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800544a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800544e:	d01a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005450:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005454:	d822      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800545a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800545e:	d007      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005460:	e01c      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005462:	4bb8      	ldr	r3, [pc, #736]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	4ab7      	ldr	r2, [pc, #732]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800546e:	e01a      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	3308      	adds	r3, #8
 8005476:	2102      	movs	r1, #2
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fc8f 	bl	8006d9c <RCCEx_PLL2_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005484:	e00f      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	3328      	adds	r3, #40	@ 0x28
 800548c:	2102      	movs	r1, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f001 fd36 	bl	8006f00 <RCCEx_PLL3_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800549a:	e004      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054ae:	4ba5      	ldr	r3, [pc, #660]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054bc:	4aa1      	ldr	r2, [pc, #644]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054be:	430b      	orrs	r3, r1
 80054c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80054c2:	e003      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80054d8:	f04f 0900 	mov.w	r9, #0
 80054dc:	ea58 0309 	orrs.w	r3, r8, r9
 80054e0:	d047      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d82a      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054ec:	a201      	add	r2, pc, #4	@ (adr r2, 80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005509 	.word	0x08005509
 80054f8:	08005517 	.word	0x08005517
 80054fc:	0800552d 	.word	0x0800552d
 8005500:	0800554b 	.word	0x0800554b
 8005504:	0800554b 	.word	0x0800554b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005508:	4b8e      	ldr	r3, [pc, #568]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550c:	4a8d      	ldr	r2, [pc, #564]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800550e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005514:	e01a      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	3308      	adds	r3, #8
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f001 fc3c 	bl	8006d9c <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800552a:	e00f      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005530:	3328      	adds	r3, #40	@ 0x28
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f001 fce3 	bl	8006f00 <RCCEx_PLL3_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005540:	e004      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005548:	e000      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800554a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005554:	4b7b      	ldr	r3, [pc, #492]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005558:	f023 0107 	bic.w	r1, r3, #7
 800555c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005562:	4a78      	ldr	r2, [pc, #480]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005564:	430b      	orrs	r3, r1
 8005566:	6513      	str	r3, [r2, #80]	@ 0x50
 8005568:	e003      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800556e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800557e:	f04f 0b00 	mov.w	fp, #0
 8005582:	ea5a 030b 	orrs.w	r3, sl, fp
 8005586:	d04c      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005592:	d030      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005598:	d829      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800559a:	2bc0      	cmp	r3, #192	@ 0xc0
 800559c:	d02d      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800559e:	2bc0      	cmp	r3, #192	@ 0xc0
 80055a0:	d825      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055a2:	2b80      	cmp	r3, #128	@ 0x80
 80055a4:	d018      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80055a6:	2b80      	cmp	r3, #128	@ 0x80
 80055a8:	d821      	bhi.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055ae:	2b40      	cmp	r3, #64	@ 0x40
 80055b0:	d007      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80055b2:	e01c      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b4:	4b63      	ldr	r3, [pc, #396]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	4a62      	ldr	r2, [pc, #392]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055c0:	e01c      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	3308      	adds	r3, #8
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fbe6 	bl	8006d9c <RCCEx_PLL2_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055d6:	e011      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	3328      	adds	r3, #40	@ 0x28
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fc8d 	bl	8006f00 <RCCEx_PLL3_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80055ec:	e006      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055f4:	e002      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80055fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005604:	4b4f      	ldr	r3, [pc, #316]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005608:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005612:	4a4c      	ldr	r2, [pc, #304]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005614:	430b      	orrs	r3, r1
 8005616:	6513      	str	r3, [r2, #80]	@ 0x50
 8005618:	e003      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800561e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800562e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005632:	2300      	movs	r3, #0
 8005634:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005638:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800563c:	460b      	mov	r3, r1
 800563e:	4313      	orrs	r3, r2
 8005640:	d053      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800564a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800564e:	d035      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005650:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005654:	d82e      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005656:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800565a:	d031      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800565c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005660:	d828      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005666:	d01a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800566c:	d822      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005676:	d007      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005678:	e01c      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800567a:	4b32      	ldr	r3, [pc, #200]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	4a31      	ldr	r2, [pc, #196]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005686:	e01c      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	3308      	adds	r3, #8
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fb83 	bl	8006d9c <RCCEx_PLL2_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800569c:	e011      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	3328      	adds	r3, #40	@ 0x28
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fc2a 	bl	8006f00 <RCCEx_PLL3_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b2:	e006      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ba:	e002      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056bc:	bf00      	nop
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80056c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80056ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056da:	4a1a      	ldr	r2, [pc, #104]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056dc:	430b      	orrs	r3, r1
 80056de:	6593      	str	r3, [r2, #88]	@ 0x58
 80056e0:	e003      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80056f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80056fa:	2300      	movs	r3, #0
 80056fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005700:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005704:	460b      	mov	r3, r1
 8005706:	4313      	orrs	r3, r2
 8005708:	d056      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005716:	d038      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800571c:	d831      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800571e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005722:	d034      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005724:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005728:	d82b      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800572a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800572e:	d01d      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005734:	d825      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800573a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005740:	e01f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005742:	bf00      	nop
 8005744:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005748:	4ba2      	ldr	r3, [pc, #648]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	4aa1      	ldr	r2, [pc, #644]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800574e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005754:	e01c      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	3308      	adds	r3, #8
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f001 fb1c 	bl	8006d9c <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800576a:	e011      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	3328      	adds	r3, #40	@ 0x28
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fbc3 	bl	8006f00 <RCCEx_PLL3_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005780:	e006      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005788:	e002      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800578a:	bf00      	nop
 800578c:	e000      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800578e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005798:	4b8e      	ldr	r3, [pc, #568]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057a8:	4a8a      	ldr	r2, [pc, #552]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80057ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80057d2:	460b      	mov	r3, r1
 80057d4:	4313      	orrs	r3, r2
 80057d6:	d03a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057de:	2b30      	cmp	r3, #48	@ 0x30
 80057e0:	d01f      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80057e2:	2b30      	cmp	r3, #48	@ 0x30
 80057e4:	d819      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d00c      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d815      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d019      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80057f2:	2b10      	cmp	r3, #16
 80057f4:	d111      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f6:	4b77      	ldr	r3, [pc, #476]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	4a76      	ldr	r2, [pc, #472]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005802:	e011      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3308      	adds	r3, #8
 800580a:	2102      	movs	r1, #2
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fac5 	bl	8006d9c <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005818:	e006      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005820:	e002      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005822:	bf00      	nop
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005830:	4b68      	ldr	r3, [pc, #416]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005834:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583e:	4a65      	ldr	r2, [pc, #404]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005840:	430b      	orrs	r3, r1
 8005842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005844:	e003      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800585a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005864:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005868:	460b      	mov	r3, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	d051      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005878:	d035      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800587a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800587e:	d82e      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005884:	d031      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005886:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800588a:	d828      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005890:	d01a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005896:	d822      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a0:	d007      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80058a2:	e01c      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b4b      	ldr	r3, [pc, #300]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	4a4a      	ldr	r2, [pc, #296]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058b0:	e01c      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fa6e 	bl	8006d9c <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	3328      	adds	r3, #40	@ 0x28
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fb15 	bl	8006f00 <RCCEx_PLL3_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058f4:	4b37      	ldr	r3, [pc, #220]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005902:	4a34      	ldr	r2, [pc, #208]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005904:	430b      	orrs	r3, r1
 8005906:	6513      	str	r3, [r2, #80]	@ 0x50
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800591e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005928:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d056      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800593c:	d033      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800593e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005942:	d82c      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005944:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005948:	d02f      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800594a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800594e:	d826      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005954:	d02b      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005956:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800595a:	d820      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800595c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005960:	d012      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005966:	d81a      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d022      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005970:	d115      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	3308      	adds	r3, #8
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f001 fa0e 	bl	8006d9c <RCCEx_PLL2_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005986:	e015      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	3328      	adds	r3, #40	@ 0x28
 800598e:	2101      	movs	r1, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fab5 	bl	8006f00 <RCCEx_PLL3_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800599c:	e00a      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059a4:	e006      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059a6:	bf00      	nop
 80059a8:	e004      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059aa:	bf00      	nop
 80059ac:	e002      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059ae:	bf00      	nop
 80059b0:	e000      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10d      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059bc:	4b05      	ldr	r3, [pc, #20]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80059c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ca:	4a02      	ldr	r2, [pc, #8]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80059d2:	bf00      	nop
 80059d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80059ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d055      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a0c:	d033      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a12:	d82c      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a18:	d02f      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1e:	d826      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a24:	d02b      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a2a:	d820      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a30:	d012      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a36:	d81a      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d022      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a40:	d115      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	3308      	adds	r3, #8
 8005a48:	2101      	movs	r1, #1
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 f9a6 	bl	8006d9c <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a56:	e015      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	3328      	adds	r3, #40	@ 0x28
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 fa4d 	bl	8006f00 <RCCEx_PLL3_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a74:	e006      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a76:	bf00      	nop
 8005a78:	e004      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a7a:	bf00      	nop
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a7e:	bf00      	nop
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a8c:	4ba3      	ldr	r3, [pc, #652]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a9c:	4a9f      	ldr	r2, [pc, #636]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aa2:	e003      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d037      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad6:	d00e      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005adc:	d816      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae6:	d111      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	4a8b      	ldr	r2, [pc, #556]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005af4:	e00f      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	3308      	adds	r3, #8
 8005afc:	2101      	movs	r1, #1
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f94c 	bl	8006d9c <RCCEx_PLL2_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b0a:	e004      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b12:	e000      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	4a7b      	ldr	r2, [pc, #492]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b32:	e003      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	d039      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d81c      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005ba9 	.word	0x08005ba9
 8005b70:	08005b7d 	.word	0x08005b7d
 8005b74:	08005b8b 	.word	0x08005b8b
 8005b78:	08005ba9 	.word	0x08005ba9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b67      	ldr	r3, [pc, #412]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	4a66      	ldr	r2, [pc, #408]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2102      	movs	r1, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f902 	bl	8006d9c <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bb2:	4b5a      	ldr	r3, [pc, #360]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb6:	f023 0103 	bic.w	r1, r3, #3
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc0:	4a56      	ldr	r2, [pc, #344]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005be6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f000 809f 	beq.w	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bfe:	f7fb fe8d 	bl	800191c <HAL_GetTick>
 8005c02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c06:	e00b      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c08:	f7fb fe88 	bl	800191c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b64      	cmp	r3, #100	@ 0x64
 8005c16:	d903      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c1e:	e005      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c20:	4b3f      	ldr	r3, [pc, #252]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ed      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d179      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c34:	4b39      	ldr	r3, [pc, #228]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c40:	4053      	eors	r3, r2
 8005c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d015      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c4a:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c56:	4b31      	ldr	r3, [pc, #196]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5a:	4a30      	ldr	r2, [pc, #192]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c62:	4b2e      	ldr	r3, [pc, #184]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c66:	4a2d      	ldr	r2, [pc, #180]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c82:	d118      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fb fe4a 	bl	800191c <HAL_GetTick>
 8005c88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c8c:	e00d      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8e:	f7fb fe45 	bl	800191c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d903      	bls.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005caa:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0eb      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d129      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cce:	d10e      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005cd0:	4b12      	ldr	r3, [pc, #72]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ce0:	091a      	lsrs	r2, r3, #4
 8005ce2:	4b10      	ldr	r3, [pc, #64]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6113      	str	r3, [r2, #16]
 8005cec:	e005      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cf8:	6113      	str	r3, [r2, #16]
 8005cfa:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0a:	4a04      	ldr	r2, [pc, #16]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d10:	e00e      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005d1a:	e009      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	58024800 	.word	0x58024800
 8005d24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f002 0301 	and.w	r3, r2, #1
 8005d3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f000 8089 	beq.w	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d58:	2b28      	cmp	r3, #40	@ 0x28
 8005d5a:	d86b      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005e3d 	.word	0x08005e3d
 8005d68:	08005e35 	.word	0x08005e35
 8005d6c:	08005e35 	.word	0x08005e35
 8005d70:	08005e35 	.word	0x08005e35
 8005d74:	08005e35 	.word	0x08005e35
 8005d78:	08005e35 	.word	0x08005e35
 8005d7c:	08005e35 	.word	0x08005e35
 8005d80:	08005e35 	.word	0x08005e35
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e35 	.word	0x08005e35
 8005d8c:	08005e35 	.word	0x08005e35
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e35 	.word	0x08005e35
 8005d9c:	08005e35 	.word	0x08005e35
 8005da0:	08005e35 	.word	0x08005e35
 8005da4:	08005e1f 	.word	0x08005e1f
 8005da8:	08005e35 	.word	0x08005e35
 8005dac:	08005e35 	.word	0x08005e35
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e35 	.word	0x08005e35
 8005db8:	08005e35 	.word	0x08005e35
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e3d 	.word	0x08005e3d
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005e35 	.word	0x08005e35
 8005dd8:	08005e35 	.word	0x08005e35
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005e3d 	.word	0x08005e3d
 8005de8:	08005e35 	.word	0x08005e35
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e35 	.word	0x08005e35
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e35 	.word	0x08005e35
 8005e04:	08005e3d 	.word	0x08005e3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ffc3 	bl	8006d9c <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e00f      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	3328      	adds	r3, #40	@ 0x28
 8005e24:	2101      	movs	r1, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f86a 	bl	8006f00 <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e32:	e004      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e46:	4bbf      	ldr	r3, [pc, #764]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e54:	4abb      	ldr	r2, [pc, #748]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e56:	430b      	orrs	r3, r1
 8005e58:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e5a:	e003      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f002 0302 	and.w	r3, r2, #2
 8005e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4313      	orrs	r3, r2
 8005e82:	d041      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d824      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ee1 	.word	0x08005ee1
 8005e98:	08005ead 	.word	0x08005ead
 8005e9c:	08005ec3 	.word	0x08005ec3
 8005ea0:	08005ee1 	.word	0x08005ee1
 8005ea4:	08005ee1 	.word	0x08005ee1
 8005ea8:	08005ee1 	.word	0x08005ee1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 ff71 	bl	8006d9c <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e00f      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	3328      	adds	r3, #40	@ 0x28
 8005ec8:	2101      	movs	r1, #1
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f818 	bl	8006f00 <RCCEx_PLL3_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ed6:	e004      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ede:	e000      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005eea:	4b96      	ldr	r3, [pc, #600]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	f023 0107 	bic.w	r1, r3, #7
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ef8:	4a92      	ldr	r2, [pc, #584]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005efe:	e003      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f002 0304 	and.w	r3, r2, #4
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d044      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	d825      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f34:	a201      	add	r2, pc, #4	@ (adr r2, 8005f3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f6b 	.word	0x08005f6b
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 ff1d 	bl	8006d9c <RCCEx_PLL2_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f68:	e00f      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	3328      	adds	r3, #40	@ 0x28
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 ffc4 	bl	8006f00 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e004      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f92:	4b6c      	ldr	r3, [pc, #432]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	f023 0107 	bic.w	r1, r3, #7
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fa2:	4a68      	ldr	r2, [pc, #416]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f002 0320 	and.w	r3, r2, #32
 8005fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d055      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fde:	d033      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe4:	d82c      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fea:	d02f      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff0:	d826      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ff2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ff6:	d02b      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ff8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ffc:	d820      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006002:	d012      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006008:	d81a      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d022      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800600e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006012:	d115      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006018:	3308      	adds	r3, #8
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f000 febd 	bl	8006d9c <RCCEx_PLL2_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006028:	e015      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	3328      	adds	r3, #40	@ 0x28
 8006030:	2102      	movs	r1, #2
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ff64 	bl	8006f00 <RCCEx_PLL3_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800603e:	e00a      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006046:	e006      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006048:	bf00      	nop
 800604a:	e004      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800604c:	bf00      	nop
 800604e:	e002      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006050:	bf00      	nop
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800605e:	4b39      	ldr	r3, [pc, #228]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	4a35      	ldr	r2, [pc, #212]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6553      	str	r3, [r2, #84]	@ 0x54
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800608a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006094:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d058      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060aa:	d033      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80060ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060b0:	d82c      	bhi.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b6:	d02f      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060bc:	d826      	bhi.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060c2:	d02b      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80060c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060c8:	d820      	bhi.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ce:	d012      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80060d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d4:	d81a      	bhi.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d022      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060de:	d115      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e4:	3308      	adds	r3, #8
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fe57 	bl	8006d9c <RCCEx_PLL2_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80060f4:	e015      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	3328      	adds	r3, #40	@ 0x28
 80060fc:	2102      	movs	r1, #2
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fefe 	bl	8006f00 <RCCEx_PLL3_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800610a:	e00a      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006112:	e006      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006114:	bf00      	nop
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006118:	bf00      	nop
 800611a:	e002      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800611c:	bf00      	nop
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10e      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613a:	4a02      	ldr	r2, [pc, #8]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800613c:	430b      	orrs	r3, r1
 800613e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006140:	e006      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006142:	bf00      	nop
 8006144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800615c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006166:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	d055      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006178:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800617c:	d033      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800617e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006182:	d82c      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006188:	d02f      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800618a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618e:	d826      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006190:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006194:	d02b      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006196:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800619a:	d820      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800619c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a0:	d012      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80061a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061a6:	d81a      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d022      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b0:	d115      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	3308      	adds	r3, #8
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fdee 	bl	8006d9c <RCCEx_PLL2_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061c6:	e015      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	3328      	adds	r3, #40	@ 0x28
 80061ce:	2102      	movs	r1, #2
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fe95 	bl	8006f00 <RCCEx_PLL3_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80061dc:	e00a      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061e4:	e006      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e004      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80061f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80061fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006200:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800620c:	4a9d      	ldr	r2, [pc, #628]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800620e:	430b      	orrs	r3, r1
 8006210:	6593      	str	r3, [r2, #88]	@ 0x58
 8006212:	e003      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f002 0308 	and.w	r3, r2, #8
 8006228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006232:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006236:	460b      	mov	r3, r1
 8006238:	4313      	orrs	r3, r2
 800623a:	d01e      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624e:	3328      	adds	r3, #40	@ 0x28
 8006250:	2102      	movs	r1, #2
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fe54 	bl	8006f00 <RCCEx_PLL3_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006264:	4b87      	ldr	r3, [pc, #540]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006268:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800626c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006274:	4a83      	ldr	r2, [pc, #524]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f002 0310 	and.w	r3, r2, #16
 8006286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800628a:	2300      	movs	r3, #0
 800628c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006290:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d01e      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a6:	d10c      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	3328      	adds	r3, #40	@ 0x28
 80062ae:	2102      	movs	r1, #2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fe25 	bl	8006f00 <RCCEx_PLL3_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062c2:	4b70      	ldr	r3, [pc, #448]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062d2:	4a6c      	ldr	r2, [pc, #432]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80062e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80062f2:	460b      	mov	r3, r1
 80062f4:	4313      	orrs	r3, r2
 80062f6:	d03e      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006304:	d022      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800630a:	d81b      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006314:	d00b      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006316:	e015      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	3308      	adds	r3, #8
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fd3b 	bl	8006d9c <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800632c:	e00f      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	3328      	adds	r3, #40	@ 0x28
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fde2 	bl	8006f00 <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006342:	e004      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006356:	4b4b      	ldr	r3, [pc, #300]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006366:	4a47      	ldr	r2, [pc, #284]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6593      	str	r3, [r2, #88]	@ 0x58
 800636c:	e003      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006382:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006384:	2300      	movs	r3, #0
 8006386:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006388:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800638c:	460b      	mov	r3, r1
 800638e:	4313      	orrs	r3, r2
 8006390:	d03b      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800639e:	d01f      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80063a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063a4:	d818      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80063ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063b0:	d007      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80063b2:	e011      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b4:	4b33      	ldr	r3, [pc, #204]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	4a32      	ldr	r2, [pc, #200]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80063c0:	e00f      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	3328      	adds	r3, #40	@ 0x28
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fd98 	bl	8006f00 <RCCEx_PLL3_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80063d6:	e004      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80063e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063ea:	4b26      	ldr	r3, [pc, #152]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	4a22      	ldr	r2, [pc, #136]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006416:	673b      	str	r3, [r7, #112]	@ 0x70
 8006418:	2300      	movs	r3, #0
 800641a:	677b      	str	r3, [r7, #116]	@ 0x74
 800641c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d034      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006434:	d007      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006436:	e011      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006438:	4b12      	ldr	r3, [pc, #72]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	4a11      	ldr	r2, [pc, #68]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006444:	e00e      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644a:	3308      	adds	r3, #8
 800644c:	2102      	movs	r1, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fca4 	bl	8006d9c <RCCEx_PLL2_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800645a:	e003      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10d      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800646e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006470:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800647a:	4a02      	ldr	r2, [pc, #8]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647c:	430b      	orrs	r3, r1
 800647e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006480:	e006      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006482:	bf00      	nop
 8006484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800649c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800649e:	2300      	movs	r3, #0
 80064a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d00c      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	3328      	adds	r3, #40	@ 0x28
 80064b2:	2102      	movs	r1, #2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fd23 	bl	8006f00 <RCCEx_PLL3_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80064d4:	2300      	movs	r3, #0
 80064d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80064d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80064dc:	460b      	mov	r3, r1
 80064de:	4313      	orrs	r3, r2
 80064e0:	d038      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ee:	d018      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f4:	d811      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80064f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064fa:	d014      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006500:	d80b      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d011      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4bc3      	ldr	r3, [pc, #780]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006510:	4ac2      	ldr	r2, [pc, #776]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006518:	e008      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006520:	e004      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006522:	bf00      	nop
 8006524:	e002      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800652a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006534:	4bb9      	ldr	r3, [pc, #740]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006538:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006544:	4ab5      	ldr	r2, [pc, #724]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006546:	430b      	orrs	r3, r1
 8006548:	6553      	str	r3, [r2, #84]	@ 0x54
 800654a:	e003      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006560:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006562:	2300      	movs	r3, #0
 8006564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006566:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006570:	4baa      	ldr	r3, [pc, #680]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006574:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657e:	4aa7      	ldr	r2, [pc, #668]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006590:	653b      	str	r3, [r7, #80]	@ 0x50
 8006592:	2300      	movs	r3, #0
 8006594:	657b      	str	r3, [r7, #84]	@ 0x54
 8006596:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800659a:	460b      	mov	r3, r1
 800659c:	4313      	orrs	r3, r2
 800659e:	d00a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065a0:	4b9e      	ldr	r3, [pc, #632]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80065b0:	4a9a      	ldr	r2, [pc, #616]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80065c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c4:	2300      	movs	r3, #0
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065d2:	4b92      	ldr	r3, [pc, #584]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e0:	4a8e      	ldr	r2, [pc, #568]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e2:	430b      	orrs	r3, r1
 80065e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065f4:	2300      	movs	r3, #0
 80065f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80065fc:	460b      	mov	r3, r1
 80065fe:	4313      	orrs	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006602:	4b86      	ldr	r3, [pc, #536]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	4a85      	ldr	r2, [pc, #532]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006608:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800660c:	6113      	str	r3, [r2, #16]
 800660e:	4b83      	ldr	r3, [pc, #524]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006610:	6919      	ldr	r1, [r3, #16]
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800661a:	4a80      	ldr	r2, [pc, #512]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800661c:	430b      	orrs	r3, r1
 800661e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800662c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800662e:	2300      	movs	r3, #0
 8006630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006632:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	d009      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800663c:	4b77      	ldr	r3, [pc, #476]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800663e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006640:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	4a74      	ldr	r2, [pc, #464]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800664c:	430b      	orrs	r3, r1
 800664e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800665c:	633b      	str	r3, [r7, #48]	@ 0x30
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
 8006662:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006666:	460b      	mov	r3, r1
 8006668:	4313      	orrs	r3, r2
 800666a:	d00a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800666c:	4b6b      	ldr	r3, [pc, #428]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006670:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800667c:	4a67      	ldr	r2, [pc, #412]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667e:	430b      	orrs	r3, r1
 8006680:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	2100      	movs	r1, #0
 800668c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006694:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d011      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	3308      	adds	r3, #8
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fb78 	bl	8006d9c <RCCEx_PLL2_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	2100      	movs	r1, #0
 80066cc:	6239      	str	r1, [r7, #32]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80066d8:	460b      	mov	r3, r1
 80066da:	4313      	orrs	r3, r2
 80066dc:	d011      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	3308      	adds	r3, #8
 80066e4:	2101      	movs	r1, #1
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fb58 	bl	8006d9c <RCCEx_PLL2_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	2100      	movs	r1, #0
 800670c:	61b9      	str	r1, [r7, #24]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006718:	460b      	mov	r3, r1
 800671a:	4313      	orrs	r3, r2
 800671c:	d011      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	3308      	adds	r3, #8
 8006724:	2102      	movs	r1, #2
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fb38 	bl	8006d9c <RCCEx_PLL2_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	2100      	movs	r1, #0
 800674c:	6139      	str	r1, [r7, #16]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006758:	460b      	mov	r3, r1
 800675a:	4313      	orrs	r3, r2
 800675c:	d011      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	3328      	adds	r3, #40	@ 0x28
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fbca 	bl	8006f00 <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	2100      	movs	r1, #0
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006798:	460b      	mov	r3, r1
 800679a:	4313      	orrs	r3, r2
 800679c:	d011      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a2:	3328      	adds	r3, #40	@ 0x28
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fbaa 	bl	8006f00 <RCCEx_PLL3_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	2100      	movs	r1, #0
 80067cc:	6039      	str	r1, [r7, #0]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80067d8:	460b      	mov	r3, r1
 80067da:	4313      	orrs	r3, r2
 80067dc:	d011      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2102      	movs	r1, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fb8a 	bl	8006f00 <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006802:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e000      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
}
 8006810:	4618      	mov	r0, r3
 8006812:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800681c:	58024400 	.word	0x58024400

08006820 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006824:	f7fe fd96 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4904      	ldr	r1, [pc, #16]	@ (8006848 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006836:	5ccb      	ldrb	r3, [r1, r3]
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd80      	pop	{r7, pc}
 8006844:	58024400 	.word	0x58024400
 8006848:	0800da30 	.word	0x0800da30

0800684c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	@ 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006854:	4ba1      	ldr	r3, [pc, #644]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800685e:	4b9f      	ldr	r3, [pc, #636]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	0b1b      	lsrs	r3, r3, #12
 8006864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006868:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800686a:	4b9c      	ldr	r3, [pc, #624]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006876:	4b99      	ldr	r3, [pc, #612]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687a:	08db      	lsrs	r3, r3, #3
 800687c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8111 	beq.w	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b02      	cmp	r3, #2
 800689e:	f000 8083 	beq.w	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	f200 80a1 	bhi.w	80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d056      	beq.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068b6:	e099      	b.n	80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b8:	4b88      	ldr	r3, [pc, #544]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d02d      	beq.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068c4:	4b85      	ldr	r3, [pc, #532]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	4a84      	ldr	r2, [pc, #528]	@ (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b7b      	ldr	r3, [pc, #492]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006902:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800691e:	e087      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b6a      	ldr	r3, [pc, #424]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a03 	vldr	s12, [r7, #12]
 8006946:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006962:	e065      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006976:	4b59      	ldr	r3, [pc, #356]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	ed97 6a03 	vldr	s12, [r7, #12]
 800698a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800698e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800699a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069a6:	e043      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ba:	4b48      	ldr	r3, [pc, #288]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ea:	e021      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fe:	4b37      	ldr	r3, [pc, #220]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a30:	4b2a      	ldr	r3, [pc, #168]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	0a5b      	lsrs	r3, r3, #9
 8006a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a56:	ee17 2a90 	vmov	r2, s15
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a84:	ee17 2a90 	vmov	r2, s15
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006a8c:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	0e1b      	lsrs	r3, r3, #24
 8006a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab2:	ee17 2a90 	vmov	r2, s15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aba:	e008      	b.n	8006ace <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	3724      	adds	r7, #36	@ 0x24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	58024400 	.word	0x58024400
 8006ae0:	03d09000 	.word	0x03d09000
 8006ae4:	46000000 	.word	0x46000000
 8006ae8:	4c742400 	.word	0x4c742400
 8006aec:	4a742400 	.word	0x4a742400
 8006af0:	4bbebc20 	.word	0x4bbebc20

08006af4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	@ 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006afc:	4ba1      	ldr	r3, [pc, #644]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b06:	4b9f      	ldr	r3, [pc, #636]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0a:	0d1b      	lsrs	r3, r3, #20
 8006b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b12:	4b9c      	ldr	r3, [pc, #624]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b1e:	4b99      	ldr	r3, [pc, #612]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8111 	beq.w	8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f000 8083 	beq.w	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f200 80a1 	bhi.w	8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d056      	beq.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b5e:	e099      	b.n	8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b60:	4b88      	ldr	r3, [pc, #544]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02d      	beq.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b6c:	4b85      	ldr	r3, [pc, #532]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	4a84      	ldr	r2, [pc, #528]	@ (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b7b      	ldr	r3, [pc, #492]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bc6:	e087      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b6a      	ldr	r3, [pc, #424]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c0a:	e065      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b59      	ldr	r3, [pc, #356]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c4e:	e043      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b48      	ldr	r3, [pc, #288]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c92:	e021      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b37      	ldr	r3, [pc, #220]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cdc:	0a5b      	lsrs	r3, r3, #9
 8006cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfe:	ee17 2a90 	vmov	r2, s15
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d06:	4b1f      	ldr	r3, [pc, #124]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d34:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d38:	0e1b      	lsrs	r3, r3, #24
 8006d3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5a:	ee17 2a90 	vmov	r2, s15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d62:	e008      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	3724      	adds	r7, #36	@ 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	58024400 	.word	0x58024400
 8006d88:	03d09000 	.word	0x03d09000
 8006d8c:	46000000 	.word	0x46000000
 8006d90:	4c742400 	.word	0x4c742400
 8006d94:	4a742400 	.word	0x4a742400
 8006d98:	4bbebc20 	.word	0x4bbebc20

08006d9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006daa:	4b53      	ldr	r3, [pc, #332]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d101      	bne.n	8006dba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e099      	b.n	8006eee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dba:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc6:	f7fa fda9 	bl	800191c <HAL_GetTick>
 8006dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dcc:	e008      	b.n	8006de0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dce:	f7fa fda5 	bl	800191c <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e086      	b.n	8006eee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006de0:	4b45      	ldr	r3, [pc, #276]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f0      	bne.n	8006dce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dec:	4b42      	ldr	r3, [pc, #264]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	493f      	ldr	r1, [pc, #252]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	025b      	lsls	r3, r3, #9
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	041b      	lsls	r3, r3, #16
 8006e1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	061b      	lsls	r3, r3, #24
 8006e2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e30:	4931      	ldr	r1, [pc, #196]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e36:	4b30      	ldr	r3, [pc, #192]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	492d      	ldr	r1, [pc, #180]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e48:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	f023 0220 	bic.w	r2, r3, #32
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	4928      	ldr	r1, [pc, #160]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e5a:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5e:	4a26      	ldr	r2, [pc, #152]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e60:	f023 0310 	bic.w	r3, r3, #16
 8006e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e66:	4b24      	ldr	r3, [pc, #144]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e6a:	4b24      	ldr	r3, [pc, #144]	@ (8006efc <RCCEx_PLL2_Config+0x160>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	69d2      	ldr	r2, [r2, #28]
 8006e72:	00d2      	lsls	r2, r2, #3
 8006e74:	4920      	ldr	r1, [pc, #128]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e80:	f043 0310 	orr.w	r3, r3, #16
 8006e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e90:	4a19      	ldr	r2, [pc, #100]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006e92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e98:	e00f      	b.n	8006eba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d106      	bne.n	8006eae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ea0:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	4a14      	ldr	r2, [pc, #80]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006eac:	e005      	b.n	8006eba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006eae:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb2:	4a11      	ldr	r2, [pc, #68]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006eb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006eba:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006ec0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec6:	f7fa fd29 	bl	800191c <HAL_GetTick>
 8006eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ecc:	e008      	b.n	8006ee0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ece:	f7fa fd25 	bl	800191c <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e006      	b.n	8006eee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ee0:	4b05      	ldr	r3, [pc, #20]	@ (8006ef8 <RCCEx_PLL2_Config+0x15c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0f0      	beq.n	8006ece <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	58024400 	.word	0x58024400
 8006efc:	ffff0007 	.word	0xffff0007

08006f00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f0e:	4b53      	ldr	r3, [pc, #332]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d101      	bne.n	8006f1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e099      	b.n	8007052 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a4e      	ldr	r2, [pc, #312]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fa fcf7 	bl	800191c <HAL_GetTick>
 8006f2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f30:	e008      	b.n	8006f44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f32:	f7fa fcf3 	bl	800191c <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e086      	b.n	8007052 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f44:	4b45      	ldr	r3, [pc, #276]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f0      	bne.n	8006f32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f50:	4b42      	ldr	r3, [pc, #264]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	051b      	lsls	r3, r3, #20
 8006f5e:	493f      	ldr	r1, [pc, #252]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	025b      	lsls	r3, r3, #9
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	061b      	lsls	r3, r3, #24
 8006f90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f94:	4931      	ldr	r1, [pc, #196]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f9a:	4b30      	ldr	r3, [pc, #192]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	492d      	ldr	r1, [pc, #180]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006fac:	4b2b      	ldr	r3, [pc, #172]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4928      	ldr	r1, [pc, #160]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fbe:	4b27      	ldr	r3, [pc, #156]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc2:	4a26      	ldr	r2, [pc, #152]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fca:	4b24      	ldr	r3, [pc, #144]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fce:	4b24      	ldr	r3, [pc, #144]	@ (8007060 <RCCEx_PLL3_Config+0x160>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	69d2      	ldr	r2, [r2, #28]
 8006fd6:	00d2      	lsls	r2, r2, #3
 8006fd8:	4920      	ldr	r1, [pc, #128]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fde:	4b1f      	ldr	r3, [pc, #124]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	4a19      	ldr	r2, [pc, #100]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8006ff6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ffc:	e00f      	b.n	800701e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d106      	bne.n	8007012 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007004:	4b15      	ldr	r3, [pc, #84]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8007006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007008:	4a14      	ldr	r2, [pc, #80]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 800700a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800700e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007010:	e005      	b.n	800701e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007012:	4b12      	ldr	r3, [pc, #72]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	4a11      	ldr	r2, [pc, #68]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8007018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800701c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800701e:	4b0f      	ldr	r3, [pc, #60]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a0e      	ldr	r2, [pc, #56]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8007024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702a:	f7fa fc77 	bl	800191c <HAL_GetTick>
 800702e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007030:	e008      	b.n	8007044 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007032:	f7fa fc73 	bl	800191c <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e006      	b.n	8007052 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007044:	4b05      	ldr	r3, [pc, #20]	@ (800705c <RCCEx_PLL3_Config+0x15c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	58024400 	.word	0x58024400
 8007060:	ffff0007 	.word	0xffff0007

08007064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e049      	b.n	800710a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7fa fa98 	bl	80015c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f000 fa66 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d020      	beq.n	8007176 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01b      	beq.n	8007176 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0202 	mvn.w	r2, #2
 8007146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9eb 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8007162:	e005      	b.n	8007170 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f9dd 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9ee 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d020      	beq.n	80071c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01b      	beq.n	80071c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f06f 0204 	mvn.w	r2, #4
 8007192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9c5 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 80071ae:	e005      	b.n	80071bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9b7 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9c8 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d020      	beq.n	800720e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01b      	beq.n	800720e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f06f 0208 	mvn.w	r2, #8
 80071de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2204      	movs	r2, #4
 80071e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f99f 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 80071fa:	e005      	b.n	8007208 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f991 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f9a2 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d020      	beq.n	800725a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01b      	beq.n	800725a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f06f 0210 	mvn.w	r2, #16
 800722a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2208      	movs	r2, #8
 8007230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f979 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8007246:	e005      	b.n	8007254 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f96b 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f97c 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f06f 0201 	mvn.w	r2, #1
 8007276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f949 	bl	8007510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00c      	beq.n	80072ac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fb40 	bl	800792c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80072c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fb38 	bl	8007940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00c      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f936 	bl	8007560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b00      	cmp	r3, #0
 8007306:	d007      	beq.n	8007318 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0220 	mvn.w	r2, #32
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fb00 	bl	8007918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIM_ConfigClockSource+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e0dc      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	4b6a      	ldr	r3, [pc, #424]	@ (8007500 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007358:	4013      	ands	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a64      	ldr	r2, [pc, #400]	@ (8007504 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	f000 80a9 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007378:	4a62      	ldr	r2, [pc, #392]	@ (8007504 <HAL_TIM_ConfigClockSource+0x1e4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f200 80ae 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 8007380:	4a61      	ldr	r2, [pc, #388]	@ (8007508 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	f000 80a1 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007388:	4a5f      	ldr	r2, [pc, #380]	@ (8007508 <HAL_TIM_ConfigClockSource+0x1e8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f200 80a6 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 8007390:	4a5e      	ldr	r2, [pc, #376]	@ (800750c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007392:	4293      	cmp	r3, r2
 8007394:	f000 8099 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007398:	4a5c      	ldr	r2, [pc, #368]	@ (800750c <HAL_TIM_ConfigClockSource+0x1ec>)
 800739a:	4293      	cmp	r3, r2
 800739c:	f200 809e 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80073a4:	f000 8091 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 80073a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80073ac:	f200 8096 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b4:	f000 8089 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 80073b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073bc:	f200 808e 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c4:	d03e      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x124>
 80073c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ca:	f200 8087 	bhi.w	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d2:	f000 8086 	beq.w	80074e2 <HAL_TIM_ConfigClockSource+0x1c2>
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073da:	d87f      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073dc:	2b70      	cmp	r3, #112	@ 0x70
 80073de:	d01a      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0xf6>
 80073e0:	2b70      	cmp	r3, #112	@ 0x70
 80073e2:	d87b      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073e4:	2b60      	cmp	r3, #96	@ 0x60
 80073e6:	d050      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x16a>
 80073e8:	2b60      	cmp	r3, #96	@ 0x60
 80073ea:	d877      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073ec:	2b50      	cmp	r3, #80	@ 0x50
 80073ee:	d03c      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x14a>
 80073f0:	2b50      	cmp	r3, #80	@ 0x50
 80073f2:	d873      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073f4:	2b40      	cmp	r3, #64	@ 0x40
 80073f6:	d058      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x18a>
 80073f8:	2b40      	cmp	r3, #64	@ 0x40
 80073fa:	d86f      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 80073fc:	2b30      	cmp	r3, #48	@ 0x30
 80073fe:	d064      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007400:	2b30      	cmp	r3, #48	@ 0x30
 8007402:	d86b      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 8007404:	2b20      	cmp	r3, #32
 8007406:	d060      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007408:	2b20      	cmp	r3, #32
 800740a:	d867      	bhi.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05c      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007410:	2b10      	cmp	r3, #16
 8007412:	d05a      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x1aa>
 8007414:	e062      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007426:	f000 f9c9 	bl	80077bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
      break;
 8007442:	e04f      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007454:	f000 f9b2 	bl	80077bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007466:	609a      	str	r2, [r3, #8]
      break;
 8007468:	e03c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007476:	461a      	mov	r2, r3
 8007478:	f000 f922 	bl	80076c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2150      	movs	r1, #80	@ 0x50
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f97c 	bl	8007780 <TIM_ITRx_SetConfig>
      break;
 8007488:	e02c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007496:	461a      	mov	r2, r3
 8007498:	f000 f941 	bl	800771e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2160      	movs	r1, #96	@ 0x60
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f96c 	bl	8007780 <TIM_ITRx_SetConfig>
      break;
 80074a8:	e01c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b6:	461a      	mov	r2, r3
 80074b8:	f000 f902 	bl	80076c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2140      	movs	r1, #64	@ 0x40
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f95c 	bl	8007780 <TIM_ITRx_SetConfig>
      break;
 80074c8:	e00c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f000 f953 	bl	8007780 <TIM_ITRx_SetConfig>
      break;
 80074da:	e003      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
      break;
 80074e0:	e000      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80074e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	ffceff88 	.word	0xffceff88
 8007504:	00100040 	.word	0x00100040
 8007508:	00100030 	.word	0x00100030
 800750c:	00100020 	.word	0x00100020

08007510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a46      	ldr	r2, [pc, #280]	@ (80076a0 <TIM_Base_SetConfig+0x12c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007592:	d00f      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a43      	ldr	r2, [pc, #268]	@ (80076a4 <TIM_Base_SetConfig+0x130>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00b      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a42      	ldr	r2, [pc, #264]	@ (80076a8 <TIM_Base_SetConfig+0x134>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a41      	ldr	r2, [pc, #260]	@ (80076ac <TIM_Base_SetConfig+0x138>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a40      	ldr	r2, [pc, #256]	@ (80076b0 <TIM_Base_SetConfig+0x13c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d108      	bne.n	80075c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a35      	ldr	r2, [pc, #212]	@ (80076a0 <TIM_Base_SetConfig+0x12c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d01f      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d4:	d01b      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a32      	ldr	r2, [pc, #200]	@ (80076a4 <TIM_Base_SetConfig+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d017      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a31      	ldr	r2, [pc, #196]	@ (80076a8 <TIM_Base_SetConfig+0x134>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d013      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a30      	ldr	r2, [pc, #192]	@ (80076ac <TIM_Base_SetConfig+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00f      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a2f      	ldr	r2, [pc, #188]	@ (80076b0 <TIM_Base_SetConfig+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00b      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a2e      	ldr	r2, [pc, #184]	@ (80076b4 <TIM_Base_SetConfig+0x140>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a2d      	ldr	r2, [pc, #180]	@ (80076b8 <TIM_Base_SetConfig+0x144>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_Base_SetConfig+0x9a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a2c      	ldr	r2, [pc, #176]	@ (80076bc <TIM_Base_SetConfig+0x148>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d108      	bne.n	8007620 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a16      	ldr	r2, [pc, #88]	@ (80076a0 <TIM_Base_SetConfig+0x12c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00f      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <TIM_Base_SetConfig+0x13c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00b      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a17      	ldr	r2, [pc, #92]	@ (80076b4 <TIM_Base_SetConfig+0x140>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d007      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a16      	ldr	r2, [pc, #88]	@ (80076b8 <TIM_Base_SetConfig+0x144>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a15      	ldr	r2, [pc, #84]	@ (80076bc <TIM_Base_SetConfig+0x148>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d105      	bne.n	8007692 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	611a      	str	r2, [r3, #16]
  }
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40010400 	.word	0x40010400
 80076b4:	40014000 	.word	0x40014000
 80076b8:	40014400 	.word	0x40014400
 80076bc:	40014800 	.word	0x40014800

080076c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f023 0201 	bic.w	r2, r3, #1
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 030a 	bic.w	r3, r3, #10
 80076fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	f023 0210 	bic.w	r2, r3, #16
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	031b      	lsls	r3, r3, #12
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800775a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	4313      	orrs	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <TIM_ITRx_SetConfig+0x38>)
 8007794:	4013      	ands	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	f043 0307 	orr.w	r3, r3, #7
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	609a      	str	r2, [r3, #8]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	ffcfff8f 	.word	0xffcfff8f

080077bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007810:	2302      	movs	r3, #2
 8007812:	e06d      	b.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a30      	ldr	r2, [pc, #192]	@ (80078fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d004      	beq.n	8007848 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2f      	ldr	r2, [pc, #188]	@ (8007900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d108      	bne.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800784e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007860:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a20      	ldr	r2, [pc, #128]	@ (80078fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d022      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007886:	d01d      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1d      	ldr	r2, [pc, #116]	@ (8007904 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1c      	ldr	r2, [pc, #112]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1a      	ldr	r2, [pc, #104]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a15      	ldr	r2, [pc, #84]	@ (8007900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a16      	ldr	r2, [pc, #88]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a15      	ldr	r2, [pc, #84]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d10c      	bne.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	40010000 	.word	0x40010000
 8007900:	40010400 	.word	0x40010400
 8007904:	40000400 	.word	0x40000400
 8007908:	40000800 	.word	0x40000800
 800790c:	40000c00 	.word	0x40000c00
 8007910:	40001800 	.word	0x40001800
 8007914:	40014000 	.word	0x40014000

08007918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e042      	b.n	80079ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7f9 fead 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2224      	movs	r2, #36	@ 0x24
 8007982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 f9f8 	bl	8008d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fc8d 	bl	80082c4 <UART_SetConfig>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e01b      	b.n	80079ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fa77 	bl	8008ed8 <UART_CheckIdleState>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	@ 0x28
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d17b      	bne.n	8007b06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <HAL_UART_Transmit+0x26>
 8007a14:	88fb      	ldrh	r3, [r7, #6]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e074      	b.n	8007b08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2221      	movs	r2, #33	@ 0x21
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a2e:	f7f9 ff75 	bl	800191c <HAL_GetTick>
 8007a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a4c:	d108      	bne.n	8007a60 <HAL_UART_Transmit+0x6c>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e003      	b.n	8007a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a68:	e030      	b.n	8007acc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	2180      	movs	r1, #128	@ 0x80
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f001 fad9 	bl	800902c <UART_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e03d      	b.n	8007b08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e007      	b.n	8007aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1c8      	bne.n	8007a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2140      	movs	r1, #64	@ 0x40
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 faa2 	bl	800902c <UART_WaitOnFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e006      	b.n	8007b08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e000      	b.n	8007b08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b0ba      	sub	sp, #232	@ 0xe8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007b3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007b3e:	4013      	ands	r3, r2
 8007b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11b      	bne.n	8007b84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d015      	beq.n	8007b84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8377 	beq.w	8008268 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
      }
      return;
 8007b82:	e371      	b.n	8008268 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8123 	beq.w	8007dd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b92:	4b8d      	ldr	r3, [pc, #564]	@ (8007dc8 <HAL_UART_IRQHandler+0x2b8>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8007dcc <HAL_UART_IRQHandler+0x2bc>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 8116 	beq.w	8007dd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xc8>
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bce:	f043 0201 	orr.w	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d011      	beq.n	8007c08 <HAL_UART_IRQHandler+0xf8>
 8007be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfe:	f043 0204 	orr.w	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d011      	beq.n	8007c38 <HAL_UART_IRQHandler+0x128>
 8007c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2204      	movs	r2, #4
 8007c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2e:	f043 0202 	orr.w	r2, r3, #2
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d017      	beq.n	8007c74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c54:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc8 <HAL_UART_IRQHandler+0x2b8>)
 8007c56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2208      	movs	r2, #8
 8007c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6a:	f043 0208 	orr.w	r2, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d012      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x196>
 8007c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00c      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 82dd 	beq.w	800826c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d013      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfa:	2b40      	cmp	r3, #64	@ 0x40
 8007cfc:	d005      	beq.n	8007d0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d054      	beq.n	8007db4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f9fc 	bl	8009108 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1a:	2b40      	cmp	r3, #64	@ 0x40
 8007d1c:	d146      	bne.n	8007dac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1d9      	bne.n	8007d1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d017      	beq.n	8007da4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d7a:	4a15      	ldr	r2, [pc, #84]	@ (8007dd0 <HAL_UART_IRQHandler+0x2c0>)
 8007d7c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fa fa33 	bl	80021f0 <HAL_DMA_Abort_IT>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d019      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d9e:	4610      	mov	r0, r2
 8007da0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da2:	e00f      	b.n	8007dc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fa77 	bl	8008298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007daa:	e00b      	b.n	8007dc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa73 	bl	8008298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db2:	e007      	b.n	8007dc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fa6f 	bl	8008298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007dc2:	e253      	b.n	800826c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc4:	bf00      	nop
    return;
 8007dc6:	e251      	b.n	800826c <HAL_UART_IRQHandler+0x75c>
 8007dc8:	10000001 	.word	0x10000001
 8007dcc:	04000120 	.word	0x04000120
 8007dd0:	080091d5 	.word	0x080091d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	f040 81e7 	bne.w	80081ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 81e0 	beq.w	80081ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 81d9 	beq.w	80081ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0c:	2b40      	cmp	r3, #64	@ 0x40
 8007e0e:	f040 8151 	bne.w	80080b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a96      	ldr	r2, [pc, #600]	@ (8008074 <HAL_UART_IRQHandler+0x564>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d068      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a93      	ldr	r2, [pc, #588]	@ (8008078 <HAL_UART_IRQHandler+0x568>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d061      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a91      	ldr	r2, [pc, #580]	@ (800807c <HAL_UART_IRQHandler+0x56c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d05a      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a8e      	ldr	r2, [pc, #568]	@ (8008080 <HAL_UART_IRQHandler+0x570>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d053      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a8c      	ldr	r2, [pc, #560]	@ (8008084 <HAL_UART_IRQHandler+0x574>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d04c      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a89      	ldr	r2, [pc, #548]	@ (8008088 <HAL_UART_IRQHandler+0x578>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d045      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a87      	ldr	r2, [pc, #540]	@ (800808c <HAL_UART_IRQHandler+0x57c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d03e      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a84      	ldr	r2, [pc, #528]	@ (8008090 <HAL_UART_IRQHandler+0x580>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d037      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a82      	ldr	r2, [pc, #520]	@ (8008094 <HAL_UART_IRQHandler+0x584>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d030      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a7f      	ldr	r2, [pc, #508]	@ (8008098 <HAL_UART_IRQHandler+0x588>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d029      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a7d      	ldr	r2, [pc, #500]	@ (800809c <HAL_UART_IRQHandler+0x58c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a7a      	ldr	r2, [pc, #488]	@ (80080a0 <HAL_UART_IRQHandler+0x590>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d01b      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a78      	ldr	r2, [pc, #480]	@ (80080a4 <HAL_UART_IRQHandler+0x594>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d014      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a75      	ldr	r2, [pc, #468]	@ (80080a8 <HAL_UART_IRQHandler+0x598>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00d      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a73      	ldr	r2, [pc, #460]	@ (80080ac <HAL_UART_IRQHandler+0x59c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d006      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x3e2>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a70      	ldr	r2, [pc, #448]	@ (80080b0 <HAL_UART_IRQHandler+0x5a0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d106      	bne.n	8007f00 <HAL_UART_IRQHandler+0x3f0>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	e005      	b.n	8007f0c <HAL_UART_IRQHandler+0x3fc>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 81ab 	beq.w	8008270 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f24:	429a      	cmp	r2, r3
 8007f26:	f080 81a3 	bcs.w	8008270 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f40:	f000 8087 	beq.w	8008052 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1da      	bne.n	8007f44 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e1      	bne.n	8007f8e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ff4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e3      	bne.n	8007fca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800801e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008020:	f023 0310 	bic.w	r3, r3, #16
 8008024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008032:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008034:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e4      	bne.n	8008010 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800804c:	4618      	mov	r0, r3
 800804e:	f7f9 fdb1 	bl	8001bb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008064:	b29b      	uxth	r3, r3
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	b29b      	uxth	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f91d 	bl	80082ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008072:	e0fd      	b.n	8008270 <HAL_UART_IRQHandler+0x760>
 8008074:	40020010 	.word	0x40020010
 8008078:	40020028 	.word	0x40020028
 800807c:	40020040 	.word	0x40020040
 8008080:	40020058 	.word	0x40020058
 8008084:	40020070 	.word	0x40020070
 8008088:	40020088 	.word	0x40020088
 800808c:	400200a0 	.word	0x400200a0
 8008090:	400200b8 	.word	0x400200b8
 8008094:	40020410 	.word	0x40020410
 8008098:	40020428 	.word	0x40020428
 800809c:	40020440 	.word	0x40020440
 80080a0:	40020458 	.word	0x40020458
 80080a4:	40020470 	.word	0x40020470
 80080a8:	40020488 	.word	0x40020488
 80080ac:	400204a0 	.word	0x400204a0
 80080b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80cf 	beq.w	8008274 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80080d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 80ca 	beq.w	8008274 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008102:	647b      	str	r3, [r7, #68]	@ 0x44
 8008104:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e4      	bne.n	80080e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	623b      	str	r3, [r7, #32]
   return(result);
 8008126:	6a3a      	ldr	r2, [r7, #32]
 8008128:	4b55      	ldr	r3, [pc, #340]	@ (8008280 <HAL_UART_IRQHandler+0x770>)
 800812a:	4013      	ands	r3, r2
 800812c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800813a:	633a      	str	r2, [r7, #48]	@ 0x30
 800813c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e3      	bne.n	8008116 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0310 	bic.w	r3, r3, #16
 8008176:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008184:	61fb      	str	r3, [r7, #28]
 8008186:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	69b9      	ldr	r1, [r7, #24]
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	617b      	str	r3, [r7, #20]
   return(result);
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e4      	bne.n	8008162 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800819e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f881 	bl	80082ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081aa:	e063      	b.n	8008274 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00e      	beq.n	80081d6 <HAL_UART_IRQHandler+0x6c6>
 80081b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d008      	beq.n	80081d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80081cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f841 	bl	8009256 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081d4:	e051      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80081d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d014      	beq.n	800820c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80081e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80081ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d03a      	beq.n	8008278 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
    }
    return;
 800820a:	e035      	b.n	8008278 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800820c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <HAL_UART_IRQHandler+0x71c>
 8008218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800821c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 ffeb 	bl	8009200 <UART_EndTransmit_IT>
    return;
 800822a:	e026      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800822c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <HAL_UART_IRQHandler+0x73c>
 8008238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800823c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 f81a 	bl	800927e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800824a:	e016      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800824c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d010      	beq.n	800827a <HAL_UART_IRQHandler+0x76a>
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800825c:	2b00      	cmp	r3, #0
 800825e:	da0c      	bge.n	800827a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f802 	bl	800926a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008266:	e008      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
      return;
 8008268:	bf00      	nop
 800826a:	e006      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
    return;
 800826c:	bf00      	nop
 800826e:	e004      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
      return;
 8008270:	bf00      	nop
 8008272:	e002      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
      return;
 8008274:	bf00      	nop
 8008276:	e000      	b.n	800827a <HAL_UART_IRQHandler+0x76a>
    return;
 8008278:	bf00      	nop
  }
}
 800827a:	37e8      	adds	r7, #232	@ 0xe8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	effffffe 	.word	0xeffffffe

08008284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082c8:	b092      	sub	sp, #72	@ 0x48
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	431a      	orrs	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4bbe      	ldr	r3, [pc, #760]	@ (80085ec <UART_SetConfig+0x328>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4ab3      	ldr	r2, [pc, #716]	@ (80085f0 <UART_SetConfig+0x32c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800832c:	4313      	orrs	r3, r2
 800832e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	4baf      	ldr	r3, [pc, #700]	@ (80085f4 <UART_SetConfig+0x330>)
 8008338:	4013      	ands	r3, r2
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	6812      	ldr	r2, [r2, #0]
 800833e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008340:	430b      	orrs	r3, r1
 8008342:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	f023 010f 	bic.w	r1, r3, #15
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4aa6      	ldr	r2, [pc, #664]	@ (80085f8 <UART_SetConfig+0x334>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d177      	bne.n	8008454 <UART_SetConfig+0x190>
 8008364:	4ba5      	ldr	r3, [pc, #660]	@ (80085fc <UART_SetConfig+0x338>)
 8008366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008368:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800836c:	2b28      	cmp	r3, #40	@ 0x28
 800836e:	d86d      	bhi.n	800844c <UART_SetConfig+0x188>
 8008370:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <UART_SetConfig+0xb4>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	0800841d 	.word	0x0800841d
 800837c:	0800844d 	.word	0x0800844d
 8008380:	0800844d 	.word	0x0800844d
 8008384:	0800844d 	.word	0x0800844d
 8008388:	0800844d 	.word	0x0800844d
 800838c:	0800844d 	.word	0x0800844d
 8008390:	0800844d 	.word	0x0800844d
 8008394:	0800844d 	.word	0x0800844d
 8008398:	08008425 	.word	0x08008425
 800839c:	0800844d 	.word	0x0800844d
 80083a0:	0800844d 	.word	0x0800844d
 80083a4:	0800844d 	.word	0x0800844d
 80083a8:	0800844d 	.word	0x0800844d
 80083ac:	0800844d 	.word	0x0800844d
 80083b0:	0800844d 	.word	0x0800844d
 80083b4:	0800844d 	.word	0x0800844d
 80083b8:	0800842d 	.word	0x0800842d
 80083bc:	0800844d 	.word	0x0800844d
 80083c0:	0800844d 	.word	0x0800844d
 80083c4:	0800844d 	.word	0x0800844d
 80083c8:	0800844d 	.word	0x0800844d
 80083cc:	0800844d 	.word	0x0800844d
 80083d0:	0800844d 	.word	0x0800844d
 80083d4:	0800844d 	.word	0x0800844d
 80083d8:	08008435 	.word	0x08008435
 80083dc:	0800844d 	.word	0x0800844d
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	0800844d 	.word	0x0800844d
 80083e8:	0800844d 	.word	0x0800844d
 80083ec:	0800844d 	.word	0x0800844d
 80083f0:	0800844d 	.word	0x0800844d
 80083f4:	0800844d 	.word	0x0800844d
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	0800844d 	.word	0x0800844d
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800844d 	.word	0x0800844d
 8008408:	0800844d 	.word	0x0800844d
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008445 	.word	0x08008445
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e222      	b.n	800886a <UART_SetConfig+0x5a6>
 8008424:	2304      	movs	r3, #4
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e21e      	b.n	800886a <UART_SetConfig+0x5a6>
 800842c:	2308      	movs	r3, #8
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e21a      	b.n	800886a <UART_SetConfig+0x5a6>
 8008434:	2310      	movs	r3, #16
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e216      	b.n	800886a <UART_SetConfig+0x5a6>
 800843c:	2320      	movs	r3, #32
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e212      	b.n	800886a <UART_SetConfig+0x5a6>
 8008444:	2340      	movs	r3, #64	@ 0x40
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844a:	e20e      	b.n	800886a <UART_SetConfig+0x5a6>
 800844c:	2380      	movs	r3, #128	@ 0x80
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e20a      	b.n	800886a <UART_SetConfig+0x5a6>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a69      	ldr	r2, [pc, #420]	@ (8008600 <UART_SetConfig+0x33c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d130      	bne.n	80084c0 <UART_SetConfig+0x1fc>
 800845e:	4b67      	ldr	r3, [pc, #412]	@ (80085fc <UART_SetConfig+0x338>)
 8008460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b05      	cmp	r3, #5
 8008468:	d826      	bhi.n	80084b8 <UART_SetConfig+0x1f4>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <UART_SetConfig+0x1ac>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008489 	.word	0x08008489
 8008474:	08008491 	.word	0x08008491
 8008478:	08008499 	.word	0x08008499
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084b1 	.word	0x080084b1
 8008488:	2300      	movs	r3, #0
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848e:	e1ec      	b.n	800886a <UART_SetConfig+0x5a6>
 8008490:	2304      	movs	r3, #4
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008496:	e1e8      	b.n	800886a <UART_SetConfig+0x5a6>
 8008498:	2308      	movs	r3, #8
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849e:	e1e4      	b.n	800886a <UART_SetConfig+0x5a6>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a6:	e1e0      	b.n	800886a <UART_SetConfig+0x5a6>
 80084a8:	2320      	movs	r3, #32
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ae:	e1dc      	b.n	800886a <UART_SetConfig+0x5a6>
 80084b0:	2340      	movs	r3, #64	@ 0x40
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b6:	e1d8      	b.n	800886a <UART_SetConfig+0x5a6>
 80084b8:	2380      	movs	r3, #128	@ 0x80
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084be:	e1d4      	b.n	800886a <UART_SetConfig+0x5a6>
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a4f      	ldr	r2, [pc, #316]	@ (8008604 <UART_SetConfig+0x340>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d130      	bne.n	800852c <UART_SetConfig+0x268>
 80084ca:	4b4c      	ldr	r3, [pc, #304]	@ (80085fc <UART_SetConfig+0x338>)
 80084cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d826      	bhi.n	8008524 <UART_SetConfig+0x260>
 80084d6:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <UART_SetConfig+0x218>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084f5 	.word	0x080084f5
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	08008505 	.word	0x08008505
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fa:	e1b6      	b.n	800886a <UART_SetConfig+0x5a6>
 80084fc:	2304      	movs	r3, #4
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e1b2      	b.n	800886a <UART_SetConfig+0x5a6>
 8008504:	2308      	movs	r3, #8
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e1ae      	b.n	800886a <UART_SetConfig+0x5a6>
 800850c:	2310      	movs	r3, #16
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e1aa      	b.n	800886a <UART_SetConfig+0x5a6>
 8008514:	2320      	movs	r3, #32
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e1a6      	b.n	800886a <UART_SetConfig+0x5a6>
 800851c:	2340      	movs	r3, #64	@ 0x40
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e1a2      	b.n	800886a <UART_SetConfig+0x5a6>
 8008524:	2380      	movs	r3, #128	@ 0x80
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e19e      	b.n	800886a <UART_SetConfig+0x5a6>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a35      	ldr	r2, [pc, #212]	@ (8008608 <UART_SetConfig+0x344>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d130      	bne.n	8008598 <UART_SetConfig+0x2d4>
 8008536:	4b31      	ldr	r3, [pc, #196]	@ (80085fc <UART_SetConfig+0x338>)
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	2b05      	cmp	r3, #5
 8008540:	d826      	bhi.n	8008590 <UART_SetConfig+0x2cc>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <UART_SetConfig+0x284>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008561 	.word	0x08008561
 800854c:	08008569 	.word	0x08008569
 8008550:	08008571 	.word	0x08008571
 8008554:	08008579 	.word	0x08008579
 8008558:	08008581 	.word	0x08008581
 800855c:	08008589 	.word	0x08008589
 8008560:	2300      	movs	r3, #0
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008566:	e180      	b.n	800886a <UART_SetConfig+0x5a6>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e17c      	b.n	800886a <UART_SetConfig+0x5a6>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e178      	b.n	800886a <UART_SetConfig+0x5a6>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e174      	b.n	800886a <UART_SetConfig+0x5a6>
 8008580:	2320      	movs	r3, #32
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e170      	b.n	800886a <UART_SetConfig+0x5a6>
 8008588:	2340      	movs	r3, #64	@ 0x40
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e16c      	b.n	800886a <UART_SetConfig+0x5a6>
 8008590:	2380      	movs	r3, #128	@ 0x80
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e168      	b.n	800886a <UART_SetConfig+0x5a6>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1b      	ldr	r2, [pc, #108]	@ (800860c <UART_SetConfig+0x348>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d142      	bne.n	8008628 <UART_SetConfig+0x364>
 80085a2:	4b16      	ldr	r3, [pc, #88]	@ (80085fc <UART_SetConfig+0x338>)
 80085a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b05      	cmp	r3, #5
 80085ac:	d838      	bhi.n	8008620 <UART_SetConfig+0x35c>
 80085ae:	a201      	add	r2, pc, #4	@ (adr r2, 80085b4 <UART_SetConfig+0x2f0>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085cd 	.word	0x080085cd
 80085b8:	080085d5 	.word	0x080085d5
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	08008611 	.word	0x08008611
 80085c8:	08008619 	.word	0x08008619
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e14a      	b.n	800886a <UART_SetConfig+0x5a6>
 80085d4:	2304      	movs	r3, #4
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e146      	b.n	800886a <UART_SetConfig+0x5a6>
 80085dc:	2308      	movs	r3, #8
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e142      	b.n	800886a <UART_SetConfig+0x5a6>
 80085e4:	2310      	movs	r3, #16
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e13e      	b.n	800886a <UART_SetConfig+0x5a6>
 80085ec:	cfff69f3 	.word	0xcfff69f3
 80085f0:	58000c00 	.word	0x58000c00
 80085f4:	11fff4ff 	.word	0x11fff4ff
 80085f8:	40011000 	.word	0x40011000
 80085fc:	58024400 	.word	0x58024400
 8008600:	40004400 	.word	0x40004400
 8008604:	40004800 	.word	0x40004800
 8008608:	40004c00 	.word	0x40004c00
 800860c:	40005000 	.word	0x40005000
 8008610:	2320      	movs	r3, #32
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e128      	b.n	800886a <UART_SetConfig+0x5a6>
 8008618:	2340      	movs	r3, #64	@ 0x40
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e124      	b.n	800886a <UART_SetConfig+0x5a6>
 8008620:	2380      	movs	r3, #128	@ 0x80
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e120      	b.n	800886a <UART_SetConfig+0x5a6>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4acb      	ldr	r2, [pc, #812]	@ (800895c <UART_SetConfig+0x698>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d176      	bne.n	8008720 <UART_SetConfig+0x45c>
 8008632:	4bcb      	ldr	r3, [pc, #812]	@ (8008960 <UART_SetConfig+0x69c>)
 8008634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800863a:	2b28      	cmp	r3, #40	@ 0x28
 800863c:	d86c      	bhi.n	8008718 <UART_SetConfig+0x454>
 800863e:	a201      	add	r2, pc, #4	@ (adr r2, 8008644 <UART_SetConfig+0x380>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	080086e9 	.word	0x080086e9
 8008648:	08008719 	.word	0x08008719
 800864c:	08008719 	.word	0x08008719
 8008650:	08008719 	.word	0x08008719
 8008654:	08008719 	.word	0x08008719
 8008658:	08008719 	.word	0x08008719
 800865c:	08008719 	.word	0x08008719
 8008660:	08008719 	.word	0x08008719
 8008664:	080086f1 	.word	0x080086f1
 8008668:	08008719 	.word	0x08008719
 800866c:	08008719 	.word	0x08008719
 8008670:	08008719 	.word	0x08008719
 8008674:	08008719 	.word	0x08008719
 8008678:	08008719 	.word	0x08008719
 800867c:	08008719 	.word	0x08008719
 8008680:	08008719 	.word	0x08008719
 8008684:	080086f9 	.word	0x080086f9
 8008688:	08008719 	.word	0x08008719
 800868c:	08008719 	.word	0x08008719
 8008690:	08008719 	.word	0x08008719
 8008694:	08008719 	.word	0x08008719
 8008698:	08008719 	.word	0x08008719
 800869c:	08008719 	.word	0x08008719
 80086a0:	08008719 	.word	0x08008719
 80086a4:	08008701 	.word	0x08008701
 80086a8:	08008719 	.word	0x08008719
 80086ac:	08008719 	.word	0x08008719
 80086b0:	08008719 	.word	0x08008719
 80086b4:	08008719 	.word	0x08008719
 80086b8:	08008719 	.word	0x08008719
 80086bc:	08008719 	.word	0x08008719
 80086c0:	08008719 	.word	0x08008719
 80086c4:	08008709 	.word	0x08008709
 80086c8:	08008719 	.word	0x08008719
 80086cc:	08008719 	.word	0x08008719
 80086d0:	08008719 	.word	0x08008719
 80086d4:	08008719 	.word	0x08008719
 80086d8:	08008719 	.word	0x08008719
 80086dc:	08008719 	.word	0x08008719
 80086e0:	08008719 	.word	0x08008719
 80086e4:	08008711 	.word	0x08008711
 80086e8:	2301      	movs	r3, #1
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e0bc      	b.n	800886a <UART_SetConfig+0x5a6>
 80086f0:	2304      	movs	r3, #4
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e0b8      	b.n	800886a <UART_SetConfig+0x5a6>
 80086f8:	2308      	movs	r3, #8
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e0b4      	b.n	800886a <UART_SetConfig+0x5a6>
 8008700:	2310      	movs	r3, #16
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e0b0      	b.n	800886a <UART_SetConfig+0x5a6>
 8008708:	2320      	movs	r3, #32
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e0ac      	b.n	800886a <UART_SetConfig+0x5a6>
 8008710:	2340      	movs	r3, #64	@ 0x40
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e0a8      	b.n	800886a <UART_SetConfig+0x5a6>
 8008718:	2380      	movs	r3, #128	@ 0x80
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e0a4      	b.n	800886a <UART_SetConfig+0x5a6>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a8f      	ldr	r2, [pc, #572]	@ (8008964 <UART_SetConfig+0x6a0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d130      	bne.n	800878c <UART_SetConfig+0x4c8>
 800872a:	4b8d      	ldr	r3, [pc, #564]	@ (8008960 <UART_SetConfig+0x69c>)
 800872c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b05      	cmp	r3, #5
 8008734:	d826      	bhi.n	8008784 <UART_SetConfig+0x4c0>
 8008736:	a201      	add	r2, pc, #4	@ (adr r2, 800873c <UART_SetConfig+0x478>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	08008755 	.word	0x08008755
 8008740:	0800875d 	.word	0x0800875d
 8008744:	08008765 	.word	0x08008765
 8008748:	0800876d 	.word	0x0800876d
 800874c:	08008775 	.word	0x08008775
 8008750:	0800877d 	.word	0x0800877d
 8008754:	2300      	movs	r3, #0
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e086      	b.n	800886a <UART_SetConfig+0x5a6>
 800875c:	2304      	movs	r3, #4
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008762:	e082      	b.n	800886a <UART_SetConfig+0x5a6>
 8008764:	2308      	movs	r3, #8
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876a:	e07e      	b.n	800886a <UART_SetConfig+0x5a6>
 800876c:	2310      	movs	r3, #16
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e07a      	b.n	800886a <UART_SetConfig+0x5a6>
 8008774:	2320      	movs	r3, #32
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e076      	b.n	800886a <UART_SetConfig+0x5a6>
 800877c:	2340      	movs	r3, #64	@ 0x40
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e072      	b.n	800886a <UART_SetConfig+0x5a6>
 8008784:	2380      	movs	r3, #128	@ 0x80
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e06e      	b.n	800886a <UART_SetConfig+0x5a6>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a75      	ldr	r2, [pc, #468]	@ (8008968 <UART_SetConfig+0x6a4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d130      	bne.n	80087f8 <UART_SetConfig+0x534>
 8008796:	4b72      	ldr	r3, [pc, #456]	@ (8008960 <UART_SetConfig+0x69c>)
 8008798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	2b05      	cmp	r3, #5
 80087a0:	d826      	bhi.n	80087f0 <UART_SetConfig+0x52c>
 80087a2:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <UART_SetConfig+0x4e4>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087c1 	.word	0x080087c1
 80087ac:	080087c9 	.word	0x080087c9
 80087b0:	080087d1 	.word	0x080087d1
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	2300      	movs	r3, #0
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e050      	b.n	800886a <UART_SetConfig+0x5a6>
 80087c8:	2304      	movs	r3, #4
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e04c      	b.n	800886a <UART_SetConfig+0x5a6>
 80087d0:	2308      	movs	r3, #8
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e048      	b.n	800886a <UART_SetConfig+0x5a6>
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e044      	b.n	800886a <UART_SetConfig+0x5a6>
 80087e0:	2320      	movs	r3, #32
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e040      	b.n	800886a <UART_SetConfig+0x5a6>
 80087e8:	2340      	movs	r3, #64	@ 0x40
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e03c      	b.n	800886a <UART_SetConfig+0x5a6>
 80087f0:	2380      	movs	r3, #128	@ 0x80
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e038      	b.n	800886a <UART_SetConfig+0x5a6>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a5b      	ldr	r2, [pc, #364]	@ (800896c <UART_SetConfig+0x6a8>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d130      	bne.n	8008864 <UART_SetConfig+0x5a0>
 8008802:	4b57      	ldr	r3, [pc, #348]	@ (8008960 <UART_SetConfig+0x69c>)
 8008804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b05      	cmp	r3, #5
 800880c:	d826      	bhi.n	800885c <UART_SetConfig+0x598>
 800880e:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <UART_SetConfig+0x550>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	0800882d 	.word	0x0800882d
 8008818:	08008835 	.word	0x08008835
 800881c:	0800883d 	.word	0x0800883d
 8008820:	08008845 	.word	0x08008845
 8008824:	0800884d 	.word	0x0800884d
 8008828:	08008855 	.word	0x08008855
 800882c:	2302      	movs	r3, #2
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e01a      	b.n	800886a <UART_SetConfig+0x5a6>
 8008834:	2304      	movs	r3, #4
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e016      	b.n	800886a <UART_SetConfig+0x5a6>
 800883c:	2308      	movs	r3, #8
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e012      	b.n	800886a <UART_SetConfig+0x5a6>
 8008844:	2310      	movs	r3, #16
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e00e      	b.n	800886a <UART_SetConfig+0x5a6>
 800884c:	2320      	movs	r3, #32
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e00a      	b.n	800886a <UART_SetConfig+0x5a6>
 8008854:	2340      	movs	r3, #64	@ 0x40
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e006      	b.n	800886a <UART_SetConfig+0x5a6>
 800885c:	2380      	movs	r3, #128	@ 0x80
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e002      	b.n	800886a <UART_SetConfig+0x5a6>
 8008864:	2380      	movs	r3, #128	@ 0x80
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <UART_SetConfig+0x6a8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	f040 80f8 	bne.w	8008a66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008876:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800887a:	2b20      	cmp	r3, #32
 800887c:	dc46      	bgt.n	800890c <UART_SetConfig+0x648>
 800887e:	2b02      	cmp	r3, #2
 8008880:	f2c0 8082 	blt.w	8008988 <UART_SetConfig+0x6c4>
 8008884:	3b02      	subs	r3, #2
 8008886:	2b1e      	cmp	r3, #30
 8008888:	d87e      	bhi.n	8008988 <UART_SetConfig+0x6c4>
 800888a:	a201      	add	r2, pc, #4	@ (adr r2, 8008890 <UART_SetConfig+0x5cc>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	08008913 	.word	0x08008913
 8008894:	08008989 	.word	0x08008989
 8008898:	0800891b 	.word	0x0800891b
 800889c:	08008989 	.word	0x08008989
 80088a0:	08008989 	.word	0x08008989
 80088a4:	08008989 	.word	0x08008989
 80088a8:	0800892b 	.word	0x0800892b
 80088ac:	08008989 	.word	0x08008989
 80088b0:	08008989 	.word	0x08008989
 80088b4:	08008989 	.word	0x08008989
 80088b8:	08008989 	.word	0x08008989
 80088bc:	08008989 	.word	0x08008989
 80088c0:	08008989 	.word	0x08008989
 80088c4:	08008989 	.word	0x08008989
 80088c8:	0800893b 	.word	0x0800893b
 80088cc:	08008989 	.word	0x08008989
 80088d0:	08008989 	.word	0x08008989
 80088d4:	08008989 	.word	0x08008989
 80088d8:	08008989 	.word	0x08008989
 80088dc:	08008989 	.word	0x08008989
 80088e0:	08008989 	.word	0x08008989
 80088e4:	08008989 	.word	0x08008989
 80088e8:	08008989 	.word	0x08008989
 80088ec:	08008989 	.word	0x08008989
 80088f0:	08008989 	.word	0x08008989
 80088f4:	08008989 	.word	0x08008989
 80088f8:	08008989 	.word	0x08008989
 80088fc:	08008989 	.word	0x08008989
 8008900:	08008989 	.word	0x08008989
 8008904:	08008989 	.word	0x08008989
 8008908:	0800897b 	.word	0x0800897b
 800890c:	2b40      	cmp	r3, #64	@ 0x40
 800890e:	d037      	beq.n	8008980 <UART_SetConfig+0x6bc>
 8008910:	e03a      	b.n	8008988 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008912:	f7fd ff85 	bl	8006820 <HAL_RCCEx_GetD3PCLK1Freq>
 8008916:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008918:	e03c      	b.n	8008994 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800891e:	4618      	mov	r0, r3
 8008920:	f7fd ff94 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008928:	e034      	b.n	8008994 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800892a:	f107 0318 	add.w	r3, r7, #24
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f8e0 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008938:	e02c      	b.n	8008994 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800893a:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <UART_SetConfig+0x69c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008946:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <UART_SetConfig+0x69c>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	08db      	lsrs	r3, r3, #3
 800894c:	f003 0303 	and.w	r3, r3, #3
 8008950:	4a07      	ldr	r2, [pc, #28]	@ (8008970 <UART_SetConfig+0x6ac>)
 8008952:	fa22 f303 	lsr.w	r3, r2, r3
 8008956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008958:	e01c      	b.n	8008994 <UART_SetConfig+0x6d0>
 800895a:	bf00      	nop
 800895c:	40011400 	.word	0x40011400
 8008960:	58024400 	.word	0x58024400
 8008964:	40007800 	.word	0x40007800
 8008968:	40007c00 	.word	0x40007c00
 800896c:	58000c00 	.word	0x58000c00
 8008970:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008974:	4b9d      	ldr	r3, [pc, #628]	@ (8008bec <UART_SetConfig+0x928>)
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	e00c      	b.n	8008994 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800897a:	4b9d      	ldr	r3, [pc, #628]	@ (8008bf0 <UART_SetConfig+0x92c>)
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897e:	e009      	b.n	8008994 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008986:	e005      	b.n	8008994 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008992:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 81de 	beq.w	8008d58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a0:	4a94      	ldr	r2, [pc, #592]	@ (8008bf4 <UART_SetConfig+0x930>)
 80089a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	4613      	mov	r3, r2
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	4413      	add	r3, r2
 80089ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089bc:	429a      	cmp	r2, r3
 80089be:	d305      	bcc.n	80089cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d903      	bls.n	80089d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089d2:	e1c1      	b.n	8008d58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d6:	2200      	movs	r2, #0
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	60fa      	str	r2, [r7, #12]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e0:	4a84      	ldr	r2, [pc, #528]	@ (8008bf4 <UART_SetConfig+0x930>)
 80089e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2200      	movs	r2, #0
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089f6:	f7f7 fe87 	bl	8000708 <__aeabi_uldivmod>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	020b      	lsls	r3, r1, #8
 8008a0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a10:	0202      	lsls	r2, r0, #8
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	6849      	ldr	r1, [r1, #4]
 8008a16:	0849      	lsrs	r1, r1, #1
 8008a18:	2000      	movs	r0, #0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	eb12 0804 	adds.w	r8, r2, r4
 8008a22:	eb43 0905 	adc.w	r9, r3, r5
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	469a      	mov	sl, r3
 8008a2e:	4693      	mov	fp, r2
 8008a30:	4652      	mov	r2, sl
 8008a32:	465b      	mov	r3, fp
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f7 fe66 	bl	8000708 <__aeabi_uldivmod>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4613      	mov	r3, r2
 8008a42:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a4a:	d308      	bcc.n	8008a5e <UART_SetConfig+0x79a>
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a52:	d204      	bcs.n	8008a5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a5a:	60da      	str	r2, [r3, #12]
 8008a5c:	e17c      	b.n	8008d58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a64:	e178      	b.n	8008d58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a6e:	f040 80c5 	bne.w	8008bfc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	dc48      	bgt.n	8008b0c <UART_SetConfig+0x848>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	db7b      	blt.n	8008b76 <UART_SetConfig+0x8b2>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d879      	bhi.n	8008b76 <UART_SetConfig+0x8b2>
 8008a82:	a201      	add	r2, pc, #4	@ (adr r2, 8008a88 <UART_SetConfig+0x7c4>)
 8008a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a88:	08008b13 	.word	0x08008b13
 8008a8c:	08008b1b 	.word	0x08008b1b
 8008a90:	08008b77 	.word	0x08008b77
 8008a94:	08008b77 	.word	0x08008b77
 8008a98:	08008b23 	.word	0x08008b23
 8008a9c:	08008b77 	.word	0x08008b77
 8008aa0:	08008b77 	.word	0x08008b77
 8008aa4:	08008b77 	.word	0x08008b77
 8008aa8:	08008b33 	.word	0x08008b33
 8008aac:	08008b77 	.word	0x08008b77
 8008ab0:	08008b77 	.word	0x08008b77
 8008ab4:	08008b77 	.word	0x08008b77
 8008ab8:	08008b77 	.word	0x08008b77
 8008abc:	08008b77 	.word	0x08008b77
 8008ac0:	08008b77 	.word	0x08008b77
 8008ac4:	08008b77 	.word	0x08008b77
 8008ac8:	08008b43 	.word	0x08008b43
 8008acc:	08008b77 	.word	0x08008b77
 8008ad0:	08008b77 	.word	0x08008b77
 8008ad4:	08008b77 	.word	0x08008b77
 8008ad8:	08008b77 	.word	0x08008b77
 8008adc:	08008b77 	.word	0x08008b77
 8008ae0:	08008b77 	.word	0x08008b77
 8008ae4:	08008b77 	.word	0x08008b77
 8008ae8:	08008b77 	.word	0x08008b77
 8008aec:	08008b77 	.word	0x08008b77
 8008af0:	08008b77 	.word	0x08008b77
 8008af4:	08008b77 	.word	0x08008b77
 8008af8:	08008b77 	.word	0x08008b77
 8008afc:	08008b77 	.word	0x08008b77
 8008b00:	08008b77 	.word	0x08008b77
 8008b04:	08008b77 	.word	0x08008b77
 8008b08:	08008b69 	.word	0x08008b69
 8008b0c:	2b40      	cmp	r3, #64	@ 0x40
 8008b0e:	d02e      	beq.n	8008b6e <UART_SetConfig+0x8aa>
 8008b10:	e031      	b.n	8008b76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b12:	f7fc fc4f 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8008b16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b18:	e033      	b.n	8008b82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b1a:	f7fc fc61 	bl	80053e0 <HAL_RCC_GetPCLK2Freq>
 8008b1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b20:	e02f      	b.n	8008b82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fd fe90 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b30:	e027      	b.n	8008b82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b32:	f107 0318 	add.w	r3, r7, #24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fd ffdc 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e01f      	b.n	8008b82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b42:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf8 <UART_SetConfig+0x934>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf8 <UART_SetConfig+0x934>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	08db      	lsrs	r3, r3, #3
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	4a24      	ldr	r2, [pc, #144]	@ (8008bec <UART_SetConfig+0x928>)
 8008b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b60:	e00f      	b.n	8008b82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b62:	4b22      	ldr	r3, [pc, #136]	@ (8008bec <UART_SetConfig+0x928>)
 8008b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b66:	e00c      	b.n	8008b82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b68:	4b21      	ldr	r3, [pc, #132]	@ (8008bf0 <UART_SetConfig+0x92c>)
 8008b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b6c:	e009      	b.n	8008b82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b74:	e005      	b.n	8008b82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80e7 	beq.w	8008d58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8e:	4a19      	ldr	r2, [pc, #100]	@ (8008bf4 <UART_SetConfig+0x930>)
 8008b90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b94:	461a      	mov	r2, r3
 8008b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b9c:	005a      	lsls	r2, r3, #1
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	085b      	lsrs	r3, r3, #1
 8008ba4:	441a      	add	r2, r3
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	2b0f      	cmp	r3, #15
 8008bb4:	d916      	bls.n	8008be4 <UART_SetConfig+0x920>
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bbc:	d212      	bcs.n	8008be4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f023 030f 	bic.w	r3, r3, #15
 8008bc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008be0:	60da      	str	r2, [r3, #12]
 8008be2:	e0b9      	b.n	8008d58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bea:	e0b5      	b.n	8008d58 <UART_SetConfig+0xa94>
 8008bec:	03d09000 	.word	0x03d09000
 8008bf0:	003d0900 	.word	0x003d0900
 8008bf4:	0800da40 	.word	0x0800da40
 8008bf8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bfc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	dc49      	bgt.n	8008c98 <UART_SetConfig+0x9d4>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db7c      	blt.n	8008d02 <UART_SetConfig+0xa3e>
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d87a      	bhi.n	8008d02 <UART_SetConfig+0xa3e>
 8008c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c14 <UART_SetConfig+0x950>)
 8008c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c12:	bf00      	nop
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008ca7 	.word	0x08008ca7
 8008c1c:	08008d03 	.word	0x08008d03
 8008c20:	08008d03 	.word	0x08008d03
 8008c24:	08008caf 	.word	0x08008caf
 8008c28:	08008d03 	.word	0x08008d03
 8008c2c:	08008d03 	.word	0x08008d03
 8008c30:	08008d03 	.word	0x08008d03
 8008c34:	08008cbf 	.word	0x08008cbf
 8008c38:	08008d03 	.word	0x08008d03
 8008c3c:	08008d03 	.word	0x08008d03
 8008c40:	08008d03 	.word	0x08008d03
 8008c44:	08008d03 	.word	0x08008d03
 8008c48:	08008d03 	.word	0x08008d03
 8008c4c:	08008d03 	.word	0x08008d03
 8008c50:	08008d03 	.word	0x08008d03
 8008c54:	08008ccf 	.word	0x08008ccf
 8008c58:	08008d03 	.word	0x08008d03
 8008c5c:	08008d03 	.word	0x08008d03
 8008c60:	08008d03 	.word	0x08008d03
 8008c64:	08008d03 	.word	0x08008d03
 8008c68:	08008d03 	.word	0x08008d03
 8008c6c:	08008d03 	.word	0x08008d03
 8008c70:	08008d03 	.word	0x08008d03
 8008c74:	08008d03 	.word	0x08008d03
 8008c78:	08008d03 	.word	0x08008d03
 8008c7c:	08008d03 	.word	0x08008d03
 8008c80:	08008d03 	.word	0x08008d03
 8008c84:	08008d03 	.word	0x08008d03
 8008c88:	08008d03 	.word	0x08008d03
 8008c8c:	08008d03 	.word	0x08008d03
 8008c90:	08008d03 	.word	0x08008d03
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	2b40      	cmp	r3, #64	@ 0x40
 8008c9a:	d02e      	beq.n	8008cfa <UART_SetConfig+0xa36>
 8008c9c:	e031      	b.n	8008d02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c9e:	f7fc fb89 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8008ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ca4:	e033      	b.n	8008d0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca6:	f7fc fb9b 	bl	80053e0 <HAL_RCC_GetPCLK2Freq>
 8008caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cac:	e02f      	b.n	8008d0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fd fdca 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e027      	b.n	8008d0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fd ff16 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ccc:	e01f      	b.n	8008d0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cce:	4b2d      	ldr	r3, [pc, #180]	@ (8008d84 <UART_SetConfig+0xac0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cda:	4b2a      	ldr	r3, [pc, #168]	@ (8008d84 <UART_SetConfig+0xac0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	4a28      	ldr	r2, [pc, #160]	@ (8008d88 <UART_SetConfig+0xac4>)
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cec:	e00f      	b.n	8008d0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008cee:	4b26      	ldr	r3, [pc, #152]	@ (8008d88 <UART_SetConfig+0xac4>)
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf2:	e00c      	b.n	8008d0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cf4:	4b25      	ldr	r3, [pc, #148]	@ (8008d8c <UART_SetConfig+0xac8>)
 8008cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf8:	e009      	b.n	8008d0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d00:	e005      	b.n	8008d0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d021      	beq.n	8008d58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d18:	4a1d      	ldr	r2, [pc, #116]	@ (8008d90 <UART_SetConfig+0xacc>)
 8008d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	085b      	lsrs	r3, r3, #1
 8008d2c:	441a      	add	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3a:	2b0f      	cmp	r3, #15
 8008d3c:	d909      	bls.n	8008d52 <UART_SetConfig+0xa8e>
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d44:	d205      	bcs.n	8008d52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60da      	str	r2, [r3, #12]
 8008d50:	e002      	b.n	8008d58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2200      	movs	r2, #0
 8008d72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3748      	adds	r7, #72	@ 0x48
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
 8008d88:	03d09000 	.word	0x03d09000
 8008d8c:	003d0900 	.word	0x003d0900
 8008d90:	0800da40 	.word	0x0800da40

08008d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da0:	f003 0308 	and.w	r3, r3, #8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01a      	beq.n	8008eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e92:	d10a      	bne.n	8008eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	605a      	str	r2, [r3, #4]
  }
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b098      	sub	sp, #96	@ 0x60
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ee8:	f7f8 fd18 	bl	800191c <HAL_GetTick>
 8008eec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0308 	and.w	r3, r3, #8
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d12f      	bne.n	8008f5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f04:	2200      	movs	r2, #0
 8008f06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f88e 	bl	800902c <UART_WaitOnFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d022      	beq.n	8008f5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1e:	e853 3f00 	ldrex	r3, [r3]
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f3c:	e841 2300 	strex	r3, r2, [r1]
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e6      	bne.n	8008f16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e063      	b.n	8009024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d149      	bne.n	8008ffe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f72:	2200      	movs	r2, #0
 8008f74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f857 	bl	800902c <UART_WaitOnFlagUntilTimeout>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d03c      	beq.n	8008ffe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	623b      	str	r3, [r7, #32]
   return(result);
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e6      	bne.n	8008f84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f023 0301 	bic.w	r3, r3, #1
 8008fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fd6:	61fa      	str	r2, [r7, #28]
 8008fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	69b9      	ldr	r1, [r7, #24]
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e5      	bne.n	8008fb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e012      	b.n	8009024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3758      	adds	r7, #88	@ 0x58
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	4613      	mov	r3, r2
 800903a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903c:	e04f      	b.n	80090de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d04b      	beq.n	80090de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009046:	f7f8 fc69 	bl	800191c <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	429a      	cmp	r2, r3
 8009054:	d302      	bcc.n	800905c <UART_WaitOnFlagUntilTimeout+0x30>
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e04e      	b.n	80090fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d037      	beq.n	80090de <UART_WaitOnFlagUntilTimeout+0xb2>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b80      	cmp	r3, #128	@ 0x80
 8009072:	d034      	beq.n	80090de <UART_WaitOnFlagUntilTimeout+0xb2>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b40      	cmp	r3, #64	@ 0x40
 8009078:	d031      	beq.n	80090de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b08      	cmp	r3, #8
 8009086:	d110      	bne.n	80090aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2208      	movs	r2, #8
 800908e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f839 	bl	8009108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2208      	movs	r2, #8
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e029      	b.n	80090fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090b8:	d111      	bne.n	80090de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 f81f 	bl	8009108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e00f      	b.n	80090fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69da      	ldr	r2, [r3, #28]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4013      	ands	r3, r2
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	bf0c      	ite	eq
 80090ee:	2301      	moveq	r3, #1
 80090f0:	2300      	movne	r3, #0
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	461a      	mov	r2, r3
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d0a0      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009108:	b480      	push	{r7}
 800910a:	b095      	sub	sp, #84	@ 0x54
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009130:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009134:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800913c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e6      	bne.n	8009110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	61fb      	str	r3, [r7, #28]
   return(result);
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	4b1e      	ldr	r3, [pc, #120]	@ (80091d0 <UART_EndRxTransfer+0xc8>)
 8009156:	4013      	ands	r3, r2
 8009158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e5      	bne.n	8009142 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800917a:	2b01      	cmp	r3, #1
 800917c:	d118      	bne.n	80091b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	60bb      	str	r3, [r7, #8]
   return(result);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f023 0310 	bic.w	r3, r3, #16
 8009192:	647b      	str	r3, [r7, #68]	@ 0x44
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6979      	ldr	r1, [r7, #20]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	613b      	str	r3, [r7, #16]
   return(result);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e6      	bne.n	800917e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80091c4:	bf00      	nop
 80091c6:	3754      	adds	r7, #84	@ 0x54
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	effffffe 	.word	0xeffffffe

080091d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff f850 	bl	8008298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	60bb      	str	r3, [r7, #8]
   return(result);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921c:	61fb      	str	r3, [r7, #28]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	61bb      	str	r3, [r7, #24]
 8009228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6979      	ldr	r1, [r7, #20]
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	613b      	str	r3, [r7, #16]
   return(result);
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff f81b 	bl	8008284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800924e:	bf00      	nop
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e027      	b.n	80092f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2224      	movs	r2, #36	@ 0x24
 80092b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0201 	bic.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009318:	2302      	movs	r3, #2
 800931a:	e02d      	b.n	8009378 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2224      	movs	r2, #36	@ 0x24
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0201 	bic.w	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f84f 	bl	80093fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2220      	movs	r2, #32
 800936a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009394:	2302      	movs	r3, #2
 8009396:	e02d      	b.n	80093f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2224      	movs	r2, #36	@ 0x24
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0201 	bic.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f811 	bl	80093fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009408:	2b00      	cmp	r3, #0
 800940a:	d108      	bne.n	800941e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800941c:	e031      	b.n	8009482 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800941e:	2310      	movs	r3, #16
 8009420:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009422:	2310      	movs	r3, #16
 8009424:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	0e5b      	lsrs	r3, r3, #25
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0307 	and.w	r3, r3, #7
 8009434:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	0f5b      	lsrs	r3, r3, #29
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	7b3a      	ldrb	r2, [r7, #12]
 800944a:	4911      	ldr	r1, [pc, #68]	@ (8009490 <UARTEx_SetNbDataToProcess+0x94>)
 800944c:	5c8a      	ldrb	r2, [r1, r2]
 800944e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009452:	7b3a      	ldrb	r2, [r7, #12]
 8009454:	490f      	ldr	r1, [pc, #60]	@ (8009494 <UARTEx_SetNbDataToProcess+0x98>)
 8009456:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009458:	fb93 f3f2 	sdiv	r3, r3, r2
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	7b7a      	ldrb	r2, [r7, #13]
 8009468:	4909      	ldr	r1, [pc, #36]	@ (8009490 <UARTEx_SetNbDataToProcess+0x94>)
 800946a:	5c8a      	ldrb	r2, [r1, r2]
 800946c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009470:	7b7a      	ldrb	r2, [r7, #13]
 8009472:	4908      	ldr	r1, [pc, #32]	@ (8009494 <UARTEx_SetNbDataToProcess+0x98>)
 8009474:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009476:	fb93 f3f2 	sdiv	r3, r3, r2
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	0800da58 	.word	0x0800da58
 8009494:	0800da60 	.word	0x0800da60

08009498 <__cvt>:
 8009498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949a:	ed2d 8b02 	vpush	{d8}
 800949e:	eeb0 8b40 	vmov.f64	d8, d0
 80094a2:	b085      	sub	sp, #20
 80094a4:	4617      	mov	r7, r2
 80094a6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80094a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094aa:	ee18 2a90 	vmov	r2, s17
 80094ae:	f025 0520 	bic.w	r5, r5, #32
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	bfb6      	itet	lt
 80094b6:	222d      	movlt	r2, #45	@ 0x2d
 80094b8:	2200      	movge	r2, #0
 80094ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80094be:	2d46      	cmp	r5, #70	@ 0x46
 80094c0:	460c      	mov	r4, r1
 80094c2:	701a      	strb	r2, [r3, #0]
 80094c4:	d004      	beq.n	80094d0 <__cvt+0x38>
 80094c6:	2d45      	cmp	r5, #69	@ 0x45
 80094c8:	d100      	bne.n	80094cc <__cvt+0x34>
 80094ca:	3401      	adds	r4, #1
 80094cc:	2102      	movs	r1, #2
 80094ce:	e000      	b.n	80094d2 <__cvt+0x3a>
 80094d0:	2103      	movs	r1, #3
 80094d2:	ab03      	add	r3, sp, #12
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	ab02      	add	r3, sp, #8
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4622      	mov	r2, r4
 80094dc:	4633      	mov	r3, r6
 80094de:	eeb0 0b48 	vmov.f64	d0, d8
 80094e2:	f001 f885 	bl	800a5f0 <_dtoa_r>
 80094e6:	2d47      	cmp	r5, #71	@ 0x47
 80094e8:	d114      	bne.n	8009514 <__cvt+0x7c>
 80094ea:	07fb      	lsls	r3, r7, #31
 80094ec:	d50a      	bpl.n	8009504 <__cvt+0x6c>
 80094ee:	1902      	adds	r2, r0, r4
 80094f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80094f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f8:	bf08      	it	eq
 80094fa:	9203      	streq	r2, [sp, #12]
 80094fc:	2130      	movs	r1, #48	@ 0x30
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	4293      	cmp	r3, r2
 8009502:	d319      	bcc.n	8009538 <__cvt+0xa0>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009508:	1a1b      	subs	r3, r3, r0
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	b005      	add	sp, #20
 800950e:	ecbd 8b02 	vpop	{d8}
 8009512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009514:	2d46      	cmp	r5, #70	@ 0x46
 8009516:	eb00 0204 	add.w	r2, r0, r4
 800951a:	d1e9      	bne.n	80094f0 <__cvt+0x58>
 800951c:	7803      	ldrb	r3, [r0, #0]
 800951e:	2b30      	cmp	r3, #48	@ 0x30
 8009520:	d107      	bne.n	8009532 <__cvt+0x9a>
 8009522:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952a:	bf1c      	itt	ne
 800952c:	f1c4 0401 	rsbne	r4, r4, #1
 8009530:	6034      	strne	r4, [r6, #0]
 8009532:	6833      	ldr	r3, [r6, #0]
 8009534:	441a      	add	r2, r3
 8009536:	e7db      	b.n	80094f0 <__cvt+0x58>
 8009538:	1c5c      	adds	r4, r3, #1
 800953a:	9403      	str	r4, [sp, #12]
 800953c:	7019      	strb	r1, [r3, #0]
 800953e:	e7de      	b.n	80094fe <__cvt+0x66>

08009540 <__exponent>:
 8009540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009542:	2900      	cmp	r1, #0
 8009544:	bfba      	itte	lt
 8009546:	4249      	neglt	r1, r1
 8009548:	232d      	movlt	r3, #45	@ 0x2d
 800954a:	232b      	movge	r3, #43	@ 0x2b
 800954c:	2909      	cmp	r1, #9
 800954e:	7002      	strb	r2, [r0, #0]
 8009550:	7043      	strb	r3, [r0, #1]
 8009552:	dd29      	ble.n	80095a8 <__exponent+0x68>
 8009554:	f10d 0307 	add.w	r3, sp, #7
 8009558:	461d      	mov	r5, r3
 800955a:	270a      	movs	r7, #10
 800955c:	461a      	mov	r2, r3
 800955e:	fbb1 f6f7 	udiv	r6, r1, r7
 8009562:	fb07 1416 	mls	r4, r7, r6, r1
 8009566:	3430      	adds	r4, #48	@ 0x30
 8009568:	f802 4c01 	strb.w	r4, [r2, #-1]
 800956c:	460c      	mov	r4, r1
 800956e:	2c63      	cmp	r4, #99	@ 0x63
 8009570:	f103 33ff 	add.w	r3, r3, #4294967295
 8009574:	4631      	mov	r1, r6
 8009576:	dcf1      	bgt.n	800955c <__exponent+0x1c>
 8009578:	3130      	adds	r1, #48	@ 0x30
 800957a:	1e94      	subs	r4, r2, #2
 800957c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009580:	1c41      	adds	r1, r0, #1
 8009582:	4623      	mov	r3, r4
 8009584:	42ab      	cmp	r3, r5
 8009586:	d30a      	bcc.n	800959e <__exponent+0x5e>
 8009588:	f10d 0309 	add.w	r3, sp, #9
 800958c:	1a9b      	subs	r3, r3, r2
 800958e:	42ac      	cmp	r4, r5
 8009590:	bf88      	it	hi
 8009592:	2300      	movhi	r3, #0
 8009594:	3302      	adds	r3, #2
 8009596:	4403      	add	r3, r0
 8009598:	1a18      	subs	r0, r3, r0
 800959a:	b003      	add	sp, #12
 800959c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80095a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80095a6:	e7ed      	b.n	8009584 <__exponent+0x44>
 80095a8:	2330      	movs	r3, #48	@ 0x30
 80095aa:	3130      	adds	r1, #48	@ 0x30
 80095ac:	7083      	strb	r3, [r0, #2]
 80095ae:	70c1      	strb	r1, [r0, #3]
 80095b0:	1d03      	adds	r3, r0, #4
 80095b2:	e7f1      	b.n	8009598 <__exponent+0x58>
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <_printf_float>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	b08d      	sub	sp, #52	@ 0x34
 80095be:	460c      	mov	r4, r1
 80095c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80095c4:	4616      	mov	r6, r2
 80095c6:	461f      	mov	r7, r3
 80095c8:	4605      	mov	r5, r0
 80095ca:	f000 ff0b 	bl	800a3e4 <_localeconv_r>
 80095ce:	f8d0 b000 	ldr.w	fp, [r0]
 80095d2:	4658      	mov	r0, fp
 80095d4:	f7f6 fed4 	bl	8000380 <strlen>
 80095d8:	2300      	movs	r3, #0
 80095da:	930a      	str	r3, [sp, #40]	@ 0x28
 80095dc:	f8d8 3000 	ldr.w	r3, [r8]
 80095e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	9005      	str	r0, [sp, #20]
 80095e8:	3307      	adds	r3, #7
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	f103 0108 	add.w	r1, r3, #8
 80095f2:	f8c8 1000 	str.w	r1, [r8]
 80095f6:	ed93 0b00 	vldr	d0, [r3]
 80095fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009858 <_printf_float+0x2a0>
 80095fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8009602:	eeb4 7b46 	vcmp.f64	d7, d6
 8009606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800960e:	dd24      	ble.n	800965a <_printf_float+0xa2>
 8009610:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009618:	d502      	bpl.n	8009620 <_printf_float+0x68>
 800961a:	232d      	movs	r3, #45	@ 0x2d
 800961c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009620:	498f      	ldr	r1, [pc, #572]	@ (8009860 <_printf_float+0x2a8>)
 8009622:	4b90      	ldr	r3, [pc, #576]	@ (8009864 <_printf_float+0x2ac>)
 8009624:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009628:	bf94      	ite	ls
 800962a:	4688      	movls	r8, r1
 800962c:	4698      	movhi	r8, r3
 800962e:	f022 0204 	bic.w	r2, r2, #4
 8009632:	2303      	movs	r3, #3
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	f04f 0a00 	mov.w	sl, #0
 800963c:	9700      	str	r7, [sp, #0]
 800963e:	4633      	mov	r3, r6
 8009640:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009642:	4621      	mov	r1, r4
 8009644:	4628      	mov	r0, r5
 8009646:	f000 f9d1 	bl	80099ec <_printf_common>
 800964a:	3001      	adds	r0, #1
 800964c:	f040 8089 	bne.w	8009762 <_printf_float+0x1aa>
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	b00d      	add	sp, #52	@ 0x34
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	eeb4 0b40 	vcmp.f64	d0, d0
 800965e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009662:	d709      	bvc.n	8009678 <_printf_float+0xc0>
 8009664:	ee10 3a90 	vmov	r3, s1
 8009668:	2b00      	cmp	r3, #0
 800966a:	bfbc      	itt	lt
 800966c:	232d      	movlt	r3, #45	@ 0x2d
 800966e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009672:	497d      	ldr	r1, [pc, #500]	@ (8009868 <_printf_float+0x2b0>)
 8009674:	4b7d      	ldr	r3, [pc, #500]	@ (800986c <_printf_float+0x2b4>)
 8009676:	e7d5      	b.n	8009624 <_printf_float+0x6c>
 8009678:	6863      	ldr	r3, [r4, #4]
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009680:	d139      	bne.n	80096f6 <_printf_float+0x13e>
 8009682:	2306      	movs	r3, #6
 8009684:	6063      	str	r3, [r4, #4]
 8009686:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800968a:	2300      	movs	r3, #0
 800968c:	6022      	str	r2, [r4, #0]
 800968e:	9303      	str	r3, [sp, #12]
 8009690:	ab0a      	add	r3, sp, #40	@ 0x28
 8009692:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009696:	ab09      	add	r3, sp, #36	@ 0x24
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	6861      	ldr	r1, [r4, #4]
 800969c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80096a0:	4628      	mov	r0, r5
 80096a2:	f7ff fef9 	bl	8009498 <__cvt>
 80096a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096ac:	4680      	mov	r8, r0
 80096ae:	d129      	bne.n	8009704 <_printf_float+0x14c>
 80096b0:	1cc8      	adds	r0, r1, #3
 80096b2:	db02      	blt.n	80096ba <_printf_float+0x102>
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	4299      	cmp	r1, r3
 80096b8:	dd41      	ble.n	800973e <_printf_float+0x186>
 80096ba:	f1a9 0902 	sub.w	r9, r9, #2
 80096be:	fa5f f989 	uxtb.w	r9, r9
 80096c2:	3901      	subs	r1, #1
 80096c4:	464a      	mov	r2, r9
 80096c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80096ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80096cc:	f7ff ff38 	bl	8009540 <__exponent>
 80096d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096d2:	1813      	adds	r3, r2, r0
 80096d4:	2a01      	cmp	r2, #1
 80096d6:	4682      	mov	sl, r0
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	dc02      	bgt.n	80096e2 <_printf_float+0x12a>
 80096dc:	6822      	ldr	r2, [r4, #0]
 80096de:	07d2      	lsls	r2, r2, #31
 80096e0:	d501      	bpl.n	80096e6 <_printf_float+0x12e>
 80096e2:	3301      	adds	r3, #1
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0a6      	beq.n	800963c <_printf_float+0x84>
 80096ee:	232d      	movs	r3, #45	@ 0x2d
 80096f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096f4:	e7a2      	b.n	800963c <_printf_float+0x84>
 80096f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80096fa:	d1c4      	bne.n	8009686 <_printf_float+0xce>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1c2      	bne.n	8009686 <_printf_float+0xce>
 8009700:	2301      	movs	r3, #1
 8009702:	e7bf      	b.n	8009684 <_printf_float+0xcc>
 8009704:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009708:	d9db      	bls.n	80096c2 <_printf_float+0x10a>
 800970a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800970e:	d118      	bne.n	8009742 <_printf_float+0x18a>
 8009710:	2900      	cmp	r1, #0
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	dd0b      	ble.n	800972e <_printf_float+0x176>
 8009716:	6121      	str	r1, [r4, #16]
 8009718:	b913      	cbnz	r3, 8009720 <_printf_float+0x168>
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	07d0      	lsls	r0, r2, #31
 800971e:	d502      	bpl.n	8009726 <_printf_float+0x16e>
 8009720:	3301      	adds	r3, #1
 8009722:	440b      	add	r3, r1
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	e7db      	b.n	80096e6 <_printf_float+0x12e>
 800972e:	b913      	cbnz	r3, 8009736 <_printf_float+0x17e>
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	07d2      	lsls	r2, r2, #31
 8009734:	d501      	bpl.n	800973a <_printf_float+0x182>
 8009736:	3302      	adds	r3, #2
 8009738:	e7f4      	b.n	8009724 <_printf_float+0x16c>
 800973a:	2301      	movs	r3, #1
 800973c:	e7f2      	b.n	8009724 <_printf_float+0x16c>
 800973e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009744:	4299      	cmp	r1, r3
 8009746:	db05      	blt.n	8009754 <_printf_float+0x19c>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	6121      	str	r1, [r4, #16]
 800974c:	07d8      	lsls	r0, r3, #31
 800974e:	d5ea      	bpl.n	8009726 <_printf_float+0x16e>
 8009750:	1c4b      	adds	r3, r1, #1
 8009752:	e7e7      	b.n	8009724 <_printf_float+0x16c>
 8009754:	2900      	cmp	r1, #0
 8009756:	bfd4      	ite	le
 8009758:	f1c1 0202 	rsble	r2, r1, #2
 800975c:	2201      	movgt	r2, #1
 800975e:	4413      	add	r3, r2
 8009760:	e7e0      	b.n	8009724 <_printf_float+0x16c>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	055a      	lsls	r2, r3, #21
 8009766:	d407      	bmi.n	8009778 <_printf_float+0x1c0>
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	4642      	mov	r2, r8
 800976c:	4631      	mov	r1, r6
 800976e:	4628      	mov	r0, r5
 8009770:	47b8      	blx	r7
 8009772:	3001      	adds	r0, #1
 8009774:	d12a      	bne.n	80097cc <_printf_float+0x214>
 8009776:	e76b      	b.n	8009650 <_printf_float+0x98>
 8009778:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800977c:	f240 80e0 	bls.w	8009940 <_printf_float+0x388>
 8009780:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009784:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978c:	d133      	bne.n	80097f6 <_printf_float+0x23e>
 800978e:	4a38      	ldr	r2, [pc, #224]	@ (8009870 <_printf_float+0x2b8>)
 8009790:	2301      	movs	r3, #1
 8009792:	4631      	mov	r1, r6
 8009794:	4628      	mov	r0, r5
 8009796:	47b8      	blx	r7
 8009798:	3001      	adds	r0, #1
 800979a:	f43f af59 	beq.w	8009650 <_printf_float+0x98>
 800979e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80097a2:	4543      	cmp	r3, r8
 80097a4:	db02      	blt.n	80097ac <_printf_float+0x1f4>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	07d8      	lsls	r0, r3, #31
 80097aa:	d50f      	bpl.n	80097cc <_printf_float+0x214>
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	465a      	mov	r2, fp
 80097b0:	4631      	mov	r1, r6
 80097b2:	4628      	mov	r0, r5
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f af4a 	beq.w	8009650 <_printf_float+0x98>
 80097bc:	f04f 0900 	mov.w	r9, #0
 80097c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80097c4:	f104 0a1a 	add.w	sl, r4, #26
 80097c8:	45c8      	cmp	r8, r9
 80097ca:	dc09      	bgt.n	80097e0 <_printf_float+0x228>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	079b      	lsls	r3, r3, #30
 80097d0:	f100 8107 	bmi.w	80099e2 <_printf_float+0x42a>
 80097d4:	68e0      	ldr	r0, [r4, #12]
 80097d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097d8:	4298      	cmp	r0, r3
 80097da:	bfb8      	it	lt
 80097dc:	4618      	movlt	r0, r3
 80097de:	e739      	b.n	8009654 <_printf_float+0x9c>
 80097e0:	2301      	movs	r3, #1
 80097e2:	4652      	mov	r2, sl
 80097e4:	4631      	mov	r1, r6
 80097e6:	4628      	mov	r0, r5
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	f43f af30 	beq.w	8009650 <_printf_float+0x98>
 80097f0:	f109 0901 	add.w	r9, r9, #1
 80097f4:	e7e8      	b.n	80097c8 <_printf_float+0x210>
 80097f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dc3b      	bgt.n	8009874 <_printf_float+0x2bc>
 80097fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009870 <_printf_float+0x2b8>)
 80097fe:	2301      	movs	r3, #1
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	f43f af22 	beq.w	8009650 <_printf_float+0x98>
 800980c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009810:	ea59 0303 	orrs.w	r3, r9, r3
 8009814:	d102      	bne.n	800981c <_printf_float+0x264>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	07d9      	lsls	r1, r3, #31
 800981a:	d5d7      	bpl.n	80097cc <_printf_float+0x214>
 800981c:	9b05      	ldr	r3, [sp, #20]
 800981e:	465a      	mov	r2, fp
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f af12 	beq.w	8009650 <_printf_float+0x98>
 800982c:	f04f 0a00 	mov.w	sl, #0
 8009830:	f104 0b1a 	add.w	fp, r4, #26
 8009834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009836:	425b      	negs	r3, r3
 8009838:	4553      	cmp	r3, sl
 800983a:	dc01      	bgt.n	8009840 <_printf_float+0x288>
 800983c:	464b      	mov	r3, r9
 800983e:	e794      	b.n	800976a <_printf_float+0x1b2>
 8009840:	2301      	movs	r3, #1
 8009842:	465a      	mov	r2, fp
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	f43f af00 	beq.w	8009650 <_printf_float+0x98>
 8009850:	f10a 0a01 	add.w	sl, sl, #1
 8009854:	e7ee      	b.n	8009834 <_printf_float+0x27c>
 8009856:	bf00      	nop
 8009858:	ffffffff 	.word	0xffffffff
 800985c:	7fefffff 	.word	0x7fefffff
 8009860:	0800da68 	.word	0x0800da68
 8009864:	0800da6c 	.word	0x0800da6c
 8009868:	0800da70 	.word	0x0800da70
 800986c:	0800da74 	.word	0x0800da74
 8009870:	0800da78 	.word	0x0800da78
 8009874:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009876:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800987a:	4553      	cmp	r3, sl
 800987c:	bfa8      	it	ge
 800987e:	4653      	movge	r3, sl
 8009880:	2b00      	cmp	r3, #0
 8009882:	4699      	mov	r9, r3
 8009884:	dc37      	bgt.n	80098f6 <_printf_float+0x33e>
 8009886:	2300      	movs	r3, #0
 8009888:	9307      	str	r3, [sp, #28]
 800988a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800988e:	f104 021a 	add.w	r2, r4, #26
 8009892:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009894:	9907      	ldr	r1, [sp, #28]
 8009896:	9306      	str	r3, [sp, #24]
 8009898:	eba3 0309 	sub.w	r3, r3, r9
 800989c:	428b      	cmp	r3, r1
 800989e:	dc31      	bgt.n	8009904 <_printf_float+0x34c>
 80098a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a2:	459a      	cmp	sl, r3
 80098a4:	dc3b      	bgt.n	800991e <_printf_float+0x366>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	07da      	lsls	r2, r3, #31
 80098aa:	d438      	bmi.n	800991e <_printf_float+0x366>
 80098ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ae:	ebaa 0903 	sub.w	r9, sl, r3
 80098b2:	9b06      	ldr	r3, [sp, #24]
 80098b4:	ebaa 0303 	sub.w	r3, sl, r3
 80098b8:	4599      	cmp	r9, r3
 80098ba:	bfa8      	it	ge
 80098bc:	4699      	movge	r9, r3
 80098be:	f1b9 0f00 	cmp.w	r9, #0
 80098c2:	dc34      	bgt.n	800992e <_printf_float+0x376>
 80098c4:	f04f 0800 	mov.w	r8, #0
 80098c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098cc:	f104 0b1a 	add.w	fp, r4, #26
 80098d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d2:	ebaa 0303 	sub.w	r3, sl, r3
 80098d6:	eba3 0309 	sub.w	r3, r3, r9
 80098da:	4543      	cmp	r3, r8
 80098dc:	f77f af76 	ble.w	80097cc <_printf_float+0x214>
 80098e0:	2301      	movs	r3, #1
 80098e2:	465a      	mov	r2, fp
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f aeb0 	beq.w	8009650 <_printf_float+0x98>
 80098f0:	f108 0801 	add.w	r8, r8, #1
 80098f4:	e7ec      	b.n	80098d0 <_printf_float+0x318>
 80098f6:	4642      	mov	r2, r8
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	d1c1      	bne.n	8009886 <_printf_float+0x2ce>
 8009902:	e6a5      	b.n	8009650 <_printf_float+0x98>
 8009904:	2301      	movs	r3, #1
 8009906:	4631      	mov	r1, r6
 8009908:	4628      	mov	r0, r5
 800990a:	9206      	str	r2, [sp, #24]
 800990c:	47b8      	blx	r7
 800990e:	3001      	adds	r0, #1
 8009910:	f43f ae9e 	beq.w	8009650 <_printf_float+0x98>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	9a06      	ldr	r2, [sp, #24]
 8009918:	3301      	adds	r3, #1
 800991a:	9307      	str	r3, [sp, #28]
 800991c:	e7b9      	b.n	8009892 <_printf_float+0x2da>
 800991e:	9b05      	ldr	r3, [sp, #20]
 8009920:	465a      	mov	r2, fp
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	47b8      	blx	r7
 8009928:	3001      	adds	r0, #1
 800992a:	d1bf      	bne.n	80098ac <_printf_float+0x2f4>
 800992c:	e690      	b.n	8009650 <_printf_float+0x98>
 800992e:	9a06      	ldr	r2, [sp, #24]
 8009930:	464b      	mov	r3, r9
 8009932:	4442      	add	r2, r8
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	d1c2      	bne.n	80098c4 <_printf_float+0x30c>
 800993e:	e687      	b.n	8009650 <_printf_float+0x98>
 8009940:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009944:	f1b9 0f01 	cmp.w	r9, #1
 8009948:	dc01      	bgt.n	800994e <_printf_float+0x396>
 800994a:	07db      	lsls	r3, r3, #31
 800994c:	d536      	bpl.n	80099bc <_printf_float+0x404>
 800994e:	2301      	movs	r3, #1
 8009950:	4642      	mov	r2, r8
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	f43f ae79 	beq.w	8009650 <_printf_float+0x98>
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	465a      	mov	r2, fp
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	47b8      	blx	r7
 8009968:	3001      	adds	r0, #1
 800996a:	f43f ae71 	beq.w	8009650 <_printf_float+0x98>
 800996e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009972:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997a:	f109 39ff 	add.w	r9, r9, #4294967295
 800997e:	d018      	beq.n	80099b2 <_printf_float+0x3fa>
 8009980:	464b      	mov	r3, r9
 8009982:	f108 0201 	add.w	r2, r8, #1
 8009986:	4631      	mov	r1, r6
 8009988:	4628      	mov	r0, r5
 800998a:	47b8      	blx	r7
 800998c:	3001      	adds	r0, #1
 800998e:	d10c      	bne.n	80099aa <_printf_float+0x3f2>
 8009990:	e65e      	b.n	8009650 <_printf_float+0x98>
 8009992:	2301      	movs	r3, #1
 8009994:	465a      	mov	r2, fp
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	47b8      	blx	r7
 800999c:	3001      	adds	r0, #1
 800999e:	f43f ae57 	beq.w	8009650 <_printf_float+0x98>
 80099a2:	f108 0801 	add.w	r8, r8, #1
 80099a6:	45c8      	cmp	r8, r9
 80099a8:	dbf3      	blt.n	8009992 <_printf_float+0x3da>
 80099aa:	4653      	mov	r3, sl
 80099ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80099b0:	e6dc      	b.n	800976c <_printf_float+0x1b4>
 80099b2:	f04f 0800 	mov.w	r8, #0
 80099b6:	f104 0b1a 	add.w	fp, r4, #26
 80099ba:	e7f4      	b.n	80099a6 <_printf_float+0x3ee>
 80099bc:	2301      	movs	r3, #1
 80099be:	4642      	mov	r2, r8
 80099c0:	e7e1      	b.n	8009986 <_printf_float+0x3ce>
 80099c2:	2301      	movs	r3, #1
 80099c4:	464a      	mov	r2, r9
 80099c6:	4631      	mov	r1, r6
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b8      	blx	r7
 80099cc:	3001      	adds	r0, #1
 80099ce:	f43f ae3f 	beq.w	8009650 <_printf_float+0x98>
 80099d2:	f108 0801 	add.w	r8, r8, #1
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099da:	1a5b      	subs	r3, r3, r1
 80099dc:	4543      	cmp	r3, r8
 80099de:	dcf0      	bgt.n	80099c2 <_printf_float+0x40a>
 80099e0:	e6f8      	b.n	80097d4 <_printf_float+0x21c>
 80099e2:	f04f 0800 	mov.w	r8, #0
 80099e6:	f104 0919 	add.w	r9, r4, #25
 80099ea:	e7f4      	b.n	80099d6 <_printf_float+0x41e>

080099ec <_printf_common>:
 80099ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	4616      	mov	r6, r2
 80099f2:	4698      	mov	r8, r3
 80099f4:	688a      	ldr	r2, [r1, #8]
 80099f6:	690b      	ldr	r3, [r1, #16]
 80099f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bfb8      	it	lt
 8009a00:	4613      	movlt	r3, r2
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a08:	4607      	mov	r7, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	b10a      	cbz	r2, 8009a12 <_printf_common+0x26>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	0699      	lsls	r1, r3, #26
 8009a16:	bf42      	ittt	mi
 8009a18:	6833      	ldrmi	r3, [r6, #0]
 8009a1a:	3302      	addmi	r3, #2
 8009a1c:	6033      	strmi	r3, [r6, #0]
 8009a1e:	6825      	ldr	r5, [r4, #0]
 8009a20:	f015 0506 	ands.w	r5, r5, #6
 8009a24:	d106      	bne.n	8009a34 <_printf_common+0x48>
 8009a26:	f104 0a19 	add.w	sl, r4, #25
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	6832      	ldr	r2, [r6, #0]
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dc26      	bgt.n	8009a82 <_printf_common+0x96>
 8009a34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	3b00      	subs	r3, #0
 8009a3c:	bf18      	it	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	0692      	lsls	r2, r2, #26
 8009a42:	d42b      	bmi.n	8009a9c <_printf_common+0xb0>
 8009a44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a48:	4641      	mov	r1, r8
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c8      	blx	r9
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d01e      	beq.n	8009a90 <_printf_common+0xa4>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	6922      	ldr	r2, [r4, #16]
 8009a56:	f003 0306 	and.w	r3, r3, #6
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	bf02      	ittt	eq
 8009a5e:	68e5      	ldreq	r5, [r4, #12]
 8009a60:	6833      	ldreq	r3, [r6, #0]
 8009a62:	1aed      	subeq	r5, r5, r3
 8009a64:	68a3      	ldr	r3, [r4, #8]
 8009a66:	bf0c      	ite	eq
 8009a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a6c:	2500      	movne	r5, #0
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	bfc4      	itt	gt
 8009a72:	1a9b      	subgt	r3, r3, r2
 8009a74:	18ed      	addgt	r5, r5, r3
 8009a76:	2600      	movs	r6, #0
 8009a78:	341a      	adds	r4, #26
 8009a7a:	42b5      	cmp	r5, r6
 8009a7c:	d11a      	bne.n	8009ab4 <_printf_common+0xc8>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e008      	b.n	8009a94 <_printf_common+0xa8>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4652      	mov	r2, sl
 8009a86:	4641      	mov	r1, r8
 8009a88:	4638      	mov	r0, r7
 8009a8a:	47c8      	blx	r9
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d103      	bne.n	8009a98 <_printf_common+0xac>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a98:	3501      	adds	r5, #1
 8009a9a:	e7c6      	b.n	8009a2a <_printf_common+0x3e>
 8009a9c:	18e1      	adds	r1, r4, r3
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	2030      	movs	r0, #48	@ 0x30
 8009aa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aa6:	4422      	add	r2, r4
 8009aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	e7c7      	b.n	8009a44 <_printf_common+0x58>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4641      	mov	r1, r8
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c8      	blx	r9
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d0e6      	beq.n	8009a90 <_printf_common+0xa4>
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7d9      	b.n	8009a7a <_printf_common+0x8e>
	...

08009ac8 <_printf_i>:
 8009ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	7e0f      	ldrb	r7, [r1, #24]
 8009ace:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ad0:	2f78      	cmp	r7, #120	@ 0x78
 8009ad2:	4691      	mov	r9, r2
 8009ad4:	4680      	mov	r8, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ade:	d807      	bhi.n	8009af0 <_printf_i+0x28>
 8009ae0:	2f62      	cmp	r7, #98	@ 0x62
 8009ae2:	d80a      	bhi.n	8009afa <_printf_i+0x32>
 8009ae4:	2f00      	cmp	r7, #0
 8009ae6:	f000 80d2 	beq.w	8009c8e <_printf_i+0x1c6>
 8009aea:	2f58      	cmp	r7, #88	@ 0x58
 8009aec:	f000 80b9 	beq.w	8009c62 <_printf_i+0x19a>
 8009af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009af4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009af8:	e03a      	b.n	8009b70 <_printf_i+0xa8>
 8009afa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009afe:	2b15      	cmp	r3, #21
 8009b00:	d8f6      	bhi.n	8009af0 <_printf_i+0x28>
 8009b02:	a101      	add	r1, pc, #4	@ (adr r1, 8009b08 <_printf_i+0x40>)
 8009b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b08:	08009b61 	.word	0x08009b61
 8009b0c:	08009b75 	.word	0x08009b75
 8009b10:	08009af1 	.word	0x08009af1
 8009b14:	08009af1 	.word	0x08009af1
 8009b18:	08009af1 	.word	0x08009af1
 8009b1c:	08009af1 	.word	0x08009af1
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009af1 	.word	0x08009af1
 8009b28:	08009af1 	.word	0x08009af1
 8009b2c:	08009af1 	.word	0x08009af1
 8009b30:	08009af1 	.word	0x08009af1
 8009b34:	08009c75 	.word	0x08009c75
 8009b38:	08009b9f 	.word	0x08009b9f
 8009b3c:	08009c2f 	.word	0x08009c2f
 8009b40:	08009af1 	.word	0x08009af1
 8009b44:	08009af1 	.word	0x08009af1
 8009b48:	08009c97 	.word	0x08009c97
 8009b4c:	08009af1 	.word	0x08009af1
 8009b50:	08009b9f 	.word	0x08009b9f
 8009b54:	08009af1 	.word	0x08009af1
 8009b58:	08009af1 	.word	0x08009af1
 8009b5c:	08009c37 	.word	0x08009c37
 8009b60:	6833      	ldr	r3, [r6, #0]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6032      	str	r2, [r6, #0]
 8009b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b70:	2301      	movs	r3, #1
 8009b72:	e09d      	b.n	8009cb0 <_printf_i+0x1e8>
 8009b74:	6833      	ldr	r3, [r6, #0]
 8009b76:	6820      	ldr	r0, [r4, #0]
 8009b78:	1d19      	adds	r1, r3, #4
 8009b7a:	6031      	str	r1, [r6, #0]
 8009b7c:	0606      	lsls	r6, r0, #24
 8009b7e:	d501      	bpl.n	8009b84 <_printf_i+0xbc>
 8009b80:	681d      	ldr	r5, [r3, #0]
 8009b82:	e003      	b.n	8009b8c <_printf_i+0xc4>
 8009b84:	0645      	lsls	r5, r0, #25
 8009b86:	d5fb      	bpl.n	8009b80 <_printf_i+0xb8>
 8009b88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b8c:	2d00      	cmp	r5, #0
 8009b8e:	da03      	bge.n	8009b98 <_printf_i+0xd0>
 8009b90:	232d      	movs	r3, #45	@ 0x2d
 8009b92:	426d      	negs	r5, r5
 8009b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b98:	4859      	ldr	r0, [pc, #356]	@ (8009d00 <_printf_i+0x238>)
 8009b9a:	230a      	movs	r3, #10
 8009b9c:	e011      	b.n	8009bc2 <_printf_i+0xfa>
 8009b9e:	6821      	ldr	r1, [r4, #0]
 8009ba0:	6833      	ldr	r3, [r6, #0]
 8009ba2:	0608      	lsls	r0, r1, #24
 8009ba4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ba8:	d402      	bmi.n	8009bb0 <_printf_i+0xe8>
 8009baa:	0649      	lsls	r1, r1, #25
 8009bac:	bf48      	it	mi
 8009bae:	b2ad      	uxthmi	r5, r5
 8009bb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bb2:	4853      	ldr	r0, [pc, #332]	@ (8009d00 <_printf_i+0x238>)
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	bf14      	ite	ne
 8009bb8:	230a      	movne	r3, #10
 8009bba:	2308      	moveq	r3, #8
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bc2:	6866      	ldr	r6, [r4, #4]
 8009bc4:	60a6      	str	r6, [r4, #8]
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	bfa2      	ittt	ge
 8009bca:	6821      	ldrge	r1, [r4, #0]
 8009bcc:	f021 0104 	bicge.w	r1, r1, #4
 8009bd0:	6021      	strge	r1, [r4, #0]
 8009bd2:	b90d      	cbnz	r5, 8009bd8 <_printf_i+0x110>
 8009bd4:	2e00      	cmp	r6, #0
 8009bd6:	d04b      	beq.n	8009c70 <_printf_i+0x1a8>
 8009bd8:	4616      	mov	r6, r2
 8009bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bde:	fb03 5711 	mls	r7, r3, r1, r5
 8009be2:	5dc7      	ldrb	r7, [r0, r7]
 8009be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009be8:	462f      	mov	r7, r5
 8009bea:	42bb      	cmp	r3, r7
 8009bec:	460d      	mov	r5, r1
 8009bee:	d9f4      	bls.n	8009bda <_printf_i+0x112>
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d10b      	bne.n	8009c0c <_printf_i+0x144>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	07df      	lsls	r7, r3, #31
 8009bf8:	d508      	bpl.n	8009c0c <_printf_i+0x144>
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	6861      	ldr	r1, [r4, #4]
 8009bfe:	4299      	cmp	r1, r3
 8009c00:	bfde      	ittt	le
 8009c02:	2330      	movle	r3, #48	@ 0x30
 8009c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c0c:	1b92      	subs	r2, r2, r6
 8009c0e:	6122      	str	r2, [r4, #16]
 8009c10:	f8cd a000 	str.w	sl, [sp]
 8009c14:	464b      	mov	r3, r9
 8009c16:	aa03      	add	r2, sp, #12
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	f7ff fee6 	bl	80099ec <_printf_common>
 8009c20:	3001      	adds	r0, #1
 8009c22:	d14a      	bne.n	8009cba <_printf_i+0x1f2>
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	b004      	add	sp, #16
 8009c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	f043 0320 	orr.w	r3, r3, #32
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	4833      	ldr	r0, [pc, #204]	@ (8009d04 <_printf_i+0x23c>)
 8009c38:	2778      	movs	r7, #120	@ 0x78
 8009c3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	6831      	ldr	r1, [r6, #0]
 8009c42:	061f      	lsls	r7, r3, #24
 8009c44:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c48:	d402      	bmi.n	8009c50 <_printf_i+0x188>
 8009c4a:	065f      	lsls	r7, r3, #25
 8009c4c:	bf48      	it	mi
 8009c4e:	b2ad      	uxthmi	r5, r5
 8009c50:	6031      	str	r1, [r6, #0]
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	bf44      	itt	mi
 8009c56:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5a:	6023      	strmi	r3, [r4, #0]
 8009c5c:	b11d      	cbz	r5, 8009c66 <_printf_i+0x19e>
 8009c5e:	2310      	movs	r3, #16
 8009c60:	e7ac      	b.n	8009bbc <_printf_i+0xf4>
 8009c62:	4827      	ldr	r0, [pc, #156]	@ (8009d00 <_printf_i+0x238>)
 8009c64:	e7e9      	b.n	8009c3a <_printf_i+0x172>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	f023 0320 	bic.w	r3, r3, #32
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	e7f6      	b.n	8009c5e <_printf_i+0x196>
 8009c70:	4616      	mov	r6, r2
 8009c72:	e7bd      	b.n	8009bf0 <_printf_i+0x128>
 8009c74:	6833      	ldr	r3, [r6, #0]
 8009c76:	6825      	ldr	r5, [r4, #0]
 8009c78:	6961      	ldr	r1, [r4, #20]
 8009c7a:	1d18      	adds	r0, r3, #4
 8009c7c:	6030      	str	r0, [r6, #0]
 8009c7e:	062e      	lsls	r6, r5, #24
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	d501      	bpl.n	8009c88 <_printf_i+0x1c0>
 8009c84:	6019      	str	r1, [r3, #0]
 8009c86:	e002      	b.n	8009c8e <_printf_i+0x1c6>
 8009c88:	0668      	lsls	r0, r5, #25
 8009c8a:	d5fb      	bpl.n	8009c84 <_printf_i+0x1bc>
 8009c8c:	8019      	strh	r1, [r3, #0]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6123      	str	r3, [r4, #16]
 8009c92:	4616      	mov	r6, r2
 8009c94:	e7bc      	b.n	8009c10 <_printf_i+0x148>
 8009c96:	6833      	ldr	r3, [r6, #0]
 8009c98:	1d1a      	adds	r2, r3, #4
 8009c9a:	6032      	str	r2, [r6, #0]
 8009c9c:	681e      	ldr	r6, [r3, #0]
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7f6 fb1c 	bl	80002e0 <memchr>
 8009ca8:	b108      	cbz	r0, 8009cae <_printf_i+0x1e6>
 8009caa:	1b80      	subs	r0, r0, r6
 8009cac:	6060      	str	r0, [r4, #4]
 8009cae:	6863      	ldr	r3, [r4, #4]
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb8:	e7aa      	b.n	8009c10 <_printf_i+0x148>
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	47d0      	blx	sl
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d0ad      	beq.n	8009c24 <_printf_i+0x15c>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	079b      	lsls	r3, r3, #30
 8009ccc:	d413      	bmi.n	8009cf6 <_printf_i+0x22e>
 8009cce:	68e0      	ldr	r0, [r4, #12]
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	4298      	cmp	r0, r3
 8009cd4:	bfb8      	it	lt
 8009cd6:	4618      	movlt	r0, r3
 8009cd8:	e7a6      	b.n	8009c28 <_printf_i+0x160>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4632      	mov	r2, r6
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	47d0      	blx	sl
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d09d      	beq.n	8009c24 <_printf_i+0x15c>
 8009ce8:	3501      	adds	r5, #1
 8009cea:	68e3      	ldr	r3, [r4, #12]
 8009cec:	9903      	ldr	r1, [sp, #12]
 8009cee:	1a5b      	subs	r3, r3, r1
 8009cf0:	42ab      	cmp	r3, r5
 8009cf2:	dcf2      	bgt.n	8009cda <_printf_i+0x212>
 8009cf4:	e7eb      	b.n	8009cce <_printf_i+0x206>
 8009cf6:	2500      	movs	r5, #0
 8009cf8:	f104 0619 	add.w	r6, r4, #25
 8009cfc:	e7f5      	b.n	8009cea <_printf_i+0x222>
 8009cfe:	bf00      	nop
 8009d00:	0800da7a 	.word	0x0800da7a
 8009d04:	0800da8b 	.word	0x0800da8b

08009d08 <_scanf_float>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	b087      	sub	sp, #28
 8009d0e:	4617      	mov	r7, r2
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	688b      	ldr	r3, [r1, #8]
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009d1a:	bf81      	itttt	hi
 8009d1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009d20:	eb03 0b05 	addhi.w	fp, r3, r5
 8009d24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009d28:	608b      	strhi	r3, [r1, #8]
 8009d2a:	680b      	ldr	r3, [r1, #0]
 8009d2c:	460a      	mov	r2, r1
 8009d2e:	f04f 0500 	mov.w	r5, #0
 8009d32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009d36:	f842 3b1c 	str.w	r3, [r2], #28
 8009d3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d3e:	4680      	mov	r8, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	bf98      	it	ls
 8009d44:	f04f 0b00 	movls.w	fp, #0
 8009d48:	9201      	str	r2, [sp, #4]
 8009d4a:	4616      	mov	r6, r2
 8009d4c:	46aa      	mov	sl, r5
 8009d4e:	46a9      	mov	r9, r5
 8009d50:	9502      	str	r5, [sp, #8]
 8009d52:	68a2      	ldr	r2, [r4, #8]
 8009d54:	b152      	cbz	r2, 8009d6c <_scanf_float+0x64>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b4e      	cmp	r3, #78	@ 0x4e
 8009d5c:	d864      	bhi.n	8009e28 <_scanf_float+0x120>
 8009d5e:	2b40      	cmp	r3, #64	@ 0x40
 8009d60:	d83c      	bhi.n	8009ddc <_scanf_float+0xd4>
 8009d62:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009d66:	b2c8      	uxtb	r0, r1
 8009d68:	280e      	cmp	r0, #14
 8009d6a:	d93a      	bls.n	8009de2 <_scanf_float+0xda>
 8009d6c:	f1b9 0f00 	cmp.w	r9, #0
 8009d70:	d003      	beq.n	8009d7a <_scanf_float+0x72>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d7e:	f1ba 0f01 	cmp.w	sl, #1
 8009d82:	f200 8117 	bhi.w	8009fb4 <_scanf_float+0x2ac>
 8009d86:	9b01      	ldr	r3, [sp, #4]
 8009d88:	429e      	cmp	r6, r3
 8009d8a:	f200 8108 	bhi.w	8009f9e <_scanf_float+0x296>
 8009d8e:	2001      	movs	r0, #1
 8009d90:	b007      	add	sp, #28
 8009d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d96:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009d9a:	2a0d      	cmp	r2, #13
 8009d9c:	d8e6      	bhi.n	8009d6c <_scanf_float+0x64>
 8009d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8009da4 <_scanf_float+0x9c>)
 8009da0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009da4:	08009eeb 	.word	0x08009eeb
 8009da8:	08009d6d 	.word	0x08009d6d
 8009dac:	08009d6d 	.word	0x08009d6d
 8009db0:	08009d6d 	.word	0x08009d6d
 8009db4:	08009f4b 	.word	0x08009f4b
 8009db8:	08009f23 	.word	0x08009f23
 8009dbc:	08009d6d 	.word	0x08009d6d
 8009dc0:	08009d6d 	.word	0x08009d6d
 8009dc4:	08009ef9 	.word	0x08009ef9
 8009dc8:	08009d6d 	.word	0x08009d6d
 8009dcc:	08009d6d 	.word	0x08009d6d
 8009dd0:	08009d6d 	.word	0x08009d6d
 8009dd4:	08009d6d 	.word	0x08009d6d
 8009dd8:	08009eb1 	.word	0x08009eb1
 8009ddc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009de0:	e7db      	b.n	8009d9a <_scanf_float+0x92>
 8009de2:	290e      	cmp	r1, #14
 8009de4:	d8c2      	bhi.n	8009d6c <_scanf_float+0x64>
 8009de6:	a001      	add	r0, pc, #4	@ (adr r0, 8009dec <_scanf_float+0xe4>)
 8009de8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009dec:	08009ea1 	.word	0x08009ea1
 8009df0:	08009d6d 	.word	0x08009d6d
 8009df4:	08009ea1 	.word	0x08009ea1
 8009df8:	08009f37 	.word	0x08009f37
 8009dfc:	08009d6d 	.word	0x08009d6d
 8009e00:	08009e49 	.word	0x08009e49
 8009e04:	08009e87 	.word	0x08009e87
 8009e08:	08009e87 	.word	0x08009e87
 8009e0c:	08009e87 	.word	0x08009e87
 8009e10:	08009e87 	.word	0x08009e87
 8009e14:	08009e87 	.word	0x08009e87
 8009e18:	08009e87 	.word	0x08009e87
 8009e1c:	08009e87 	.word	0x08009e87
 8009e20:	08009e87 	.word	0x08009e87
 8009e24:	08009e87 	.word	0x08009e87
 8009e28:	2b6e      	cmp	r3, #110	@ 0x6e
 8009e2a:	d809      	bhi.n	8009e40 <_scanf_float+0x138>
 8009e2c:	2b60      	cmp	r3, #96	@ 0x60
 8009e2e:	d8b2      	bhi.n	8009d96 <_scanf_float+0x8e>
 8009e30:	2b54      	cmp	r3, #84	@ 0x54
 8009e32:	d07b      	beq.n	8009f2c <_scanf_float+0x224>
 8009e34:	2b59      	cmp	r3, #89	@ 0x59
 8009e36:	d199      	bne.n	8009d6c <_scanf_float+0x64>
 8009e38:	2d07      	cmp	r5, #7
 8009e3a:	d197      	bne.n	8009d6c <_scanf_float+0x64>
 8009e3c:	2508      	movs	r5, #8
 8009e3e:	e02c      	b.n	8009e9a <_scanf_float+0x192>
 8009e40:	2b74      	cmp	r3, #116	@ 0x74
 8009e42:	d073      	beq.n	8009f2c <_scanf_float+0x224>
 8009e44:	2b79      	cmp	r3, #121	@ 0x79
 8009e46:	e7f6      	b.n	8009e36 <_scanf_float+0x12e>
 8009e48:	6821      	ldr	r1, [r4, #0]
 8009e4a:	05c8      	lsls	r0, r1, #23
 8009e4c:	d51b      	bpl.n	8009e86 <_scanf_float+0x17e>
 8009e4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009e52:	6021      	str	r1, [r4, #0]
 8009e54:	f109 0901 	add.w	r9, r9, #1
 8009e58:	f1bb 0f00 	cmp.w	fp, #0
 8009e5c:	d003      	beq.n	8009e66 <_scanf_float+0x15e>
 8009e5e:	3201      	adds	r2, #1
 8009e60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e64:	60a2      	str	r2, [r4, #8]
 8009e66:	68a3      	ldr	r3, [r4, #8]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	60a3      	str	r3, [r4, #8]
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	607b      	str	r3, [r7, #4]
 8009e7a:	f340 8087 	ble.w	8009f8c <_scanf_float+0x284>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	e765      	b.n	8009d52 <_scanf_float+0x4a>
 8009e86:	eb1a 0105 	adds.w	r1, sl, r5
 8009e8a:	f47f af6f 	bne.w	8009d6c <_scanf_float+0x64>
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009e94:	6022      	str	r2, [r4, #0]
 8009e96:	460d      	mov	r5, r1
 8009e98:	468a      	mov	sl, r1
 8009e9a:	f806 3b01 	strb.w	r3, [r6], #1
 8009e9e:	e7e2      	b.n	8009e66 <_scanf_float+0x15e>
 8009ea0:	6822      	ldr	r2, [r4, #0]
 8009ea2:	0610      	lsls	r0, r2, #24
 8009ea4:	f57f af62 	bpl.w	8009d6c <_scanf_float+0x64>
 8009ea8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009eac:	6022      	str	r2, [r4, #0]
 8009eae:	e7f4      	b.n	8009e9a <_scanf_float+0x192>
 8009eb0:	f1ba 0f00 	cmp.w	sl, #0
 8009eb4:	d10e      	bne.n	8009ed4 <_scanf_float+0x1cc>
 8009eb6:	f1b9 0f00 	cmp.w	r9, #0
 8009eba:	d10e      	bne.n	8009eda <_scanf_float+0x1d2>
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009ec2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009ec6:	d108      	bne.n	8009eda <_scanf_float+0x1d2>
 8009ec8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ecc:	6022      	str	r2, [r4, #0]
 8009ece:	f04f 0a01 	mov.w	sl, #1
 8009ed2:	e7e2      	b.n	8009e9a <_scanf_float+0x192>
 8009ed4:	f1ba 0f02 	cmp.w	sl, #2
 8009ed8:	d055      	beq.n	8009f86 <_scanf_float+0x27e>
 8009eda:	2d01      	cmp	r5, #1
 8009edc:	d002      	beq.n	8009ee4 <_scanf_float+0x1dc>
 8009ede:	2d04      	cmp	r5, #4
 8009ee0:	f47f af44 	bne.w	8009d6c <_scanf_float+0x64>
 8009ee4:	3501      	adds	r5, #1
 8009ee6:	b2ed      	uxtb	r5, r5
 8009ee8:	e7d7      	b.n	8009e9a <_scanf_float+0x192>
 8009eea:	f1ba 0f01 	cmp.w	sl, #1
 8009eee:	f47f af3d 	bne.w	8009d6c <_scanf_float+0x64>
 8009ef2:	f04f 0a02 	mov.w	sl, #2
 8009ef6:	e7d0      	b.n	8009e9a <_scanf_float+0x192>
 8009ef8:	b97d      	cbnz	r5, 8009f1a <_scanf_float+0x212>
 8009efa:	f1b9 0f00 	cmp.w	r9, #0
 8009efe:	f47f af38 	bne.w	8009d72 <_scanf_float+0x6a>
 8009f02:	6822      	ldr	r2, [r4, #0]
 8009f04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009f08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009f0c:	f040 8101 	bne.w	800a112 <_scanf_float+0x40a>
 8009f10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f14:	6022      	str	r2, [r4, #0]
 8009f16:	2501      	movs	r5, #1
 8009f18:	e7bf      	b.n	8009e9a <_scanf_float+0x192>
 8009f1a:	2d03      	cmp	r5, #3
 8009f1c:	d0e2      	beq.n	8009ee4 <_scanf_float+0x1dc>
 8009f1e:	2d05      	cmp	r5, #5
 8009f20:	e7de      	b.n	8009ee0 <_scanf_float+0x1d8>
 8009f22:	2d02      	cmp	r5, #2
 8009f24:	f47f af22 	bne.w	8009d6c <_scanf_float+0x64>
 8009f28:	2503      	movs	r5, #3
 8009f2a:	e7b6      	b.n	8009e9a <_scanf_float+0x192>
 8009f2c:	2d06      	cmp	r5, #6
 8009f2e:	f47f af1d 	bne.w	8009d6c <_scanf_float+0x64>
 8009f32:	2507      	movs	r5, #7
 8009f34:	e7b1      	b.n	8009e9a <_scanf_float+0x192>
 8009f36:	6822      	ldr	r2, [r4, #0]
 8009f38:	0591      	lsls	r1, r2, #22
 8009f3a:	f57f af17 	bpl.w	8009d6c <_scanf_float+0x64>
 8009f3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009f42:	6022      	str	r2, [r4, #0]
 8009f44:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f48:	e7a7      	b.n	8009e9a <_scanf_float+0x192>
 8009f4a:	6822      	ldr	r2, [r4, #0]
 8009f4c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009f50:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009f54:	d006      	beq.n	8009f64 <_scanf_float+0x25c>
 8009f56:	0550      	lsls	r0, r2, #21
 8009f58:	f57f af08 	bpl.w	8009d6c <_scanf_float+0x64>
 8009f5c:	f1b9 0f00 	cmp.w	r9, #0
 8009f60:	f000 80d7 	beq.w	800a112 <_scanf_float+0x40a>
 8009f64:	0591      	lsls	r1, r2, #22
 8009f66:	bf58      	it	pl
 8009f68:	9902      	ldrpl	r1, [sp, #8]
 8009f6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009f6e:	bf58      	it	pl
 8009f70:	eba9 0101 	subpl.w	r1, r9, r1
 8009f74:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009f78:	bf58      	it	pl
 8009f7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f7e:	6022      	str	r2, [r4, #0]
 8009f80:	f04f 0900 	mov.w	r9, #0
 8009f84:	e789      	b.n	8009e9a <_scanf_float+0x192>
 8009f86:	f04f 0a03 	mov.w	sl, #3
 8009f8a:	e786      	b.n	8009e9a <_scanf_float+0x192>
 8009f8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009f90:	4639      	mov	r1, r7
 8009f92:	4640      	mov	r0, r8
 8009f94:	4798      	blx	r3
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f aedb 	beq.w	8009d52 <_scanf_float+0x4a>
 8009f9c:	e6e6      	b.n	8009d6c <_scanf_float+0x64>
 8009f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fa6:	463a      	mov	r2, r7
 8009fa8:	4640      	mov	r0, r8
 8009faa:	4798      	blx	r3
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	e6e8      	b.n	8009d86 <_scanf_float+0x7e>
 8009fb4:	1e6b      	subs	r3, r5, #1
 8009fb6:	2b06      	cmp	r3, #6
 8009fb8:	d824      	bhi.n	800a004 <_scanf_float+0x2fc>
 8009fba:	2d02      	cmp	r5, #2
 8009fbc:	d836      	bhi.n	800a02c <_scanf_float+0x324>
 8009fbe:	9b01      	ldr	r3, [sp, #4]
 8009fc0:	429e      	cmp	r6, r3
 8009fc2:	f67f aee4 	bls.w	8009d8e <_scanf_float+0x86>
 8009fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fce:	463a      	mov	r2, r7
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4798      	blx	r3
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	e7f0      	b.n	8009fbe <_scanf_float+0x2b6>
 8009fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fe0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4798      	blx	r3
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	6123      	str	r3, [r4, #16]
 8009ff0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ff4:	fa5f fa8a 	uxtb.w	sl, sl
 8009ff8:	f1ba 0f02 	cmp.w	sl, #2
 8009ffc:	d1ee      	bne.n	8009fdc <_scanf_float+0x2d4>
 8009ffe:	3d03      	subs	r5, #3
 800a000:	b2ed      	uxtb	r5, r5
 800a002:	1b76      	subs	r6, r6, r5
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	05da      	lsls	r2, r3, #23
 800a008:	d530      	bpl.n	800a06c <_scanf_float+0x364>
 800a00a:	055b      	lsls	r3, r3, #21
 800a00c:	d511      	bpl.n	800a032 <_scanf_float+0x32a>
 800a00e:	9b01      	ldr	r3, [sp, #4]
 800a010:	429e      	cmp	r6, r3
 800a012:	f67f aebc 	bls.w	8009d8e <_scanf_float+0x86>
 800a016:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a01a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a01e:	463a      	mov	r2, r7
 800a020:	4640      	mov	r0, r8
 800a022:	4798      	blx	r3
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	3b01      	subs	r3, #1
 800a028:	6123      	str	r3, [r4, #16]
 800a02a:	e7f0      	b.n	800a00e <_scanf_float+0x306>
 800a02c:	46aa      	mov	sl, r5
 800a02e:	46b3      	mov	fp, r6
 800a030:	e7de      	b.n	8009ff0 <_scanf_float+0x2e8>
 800a032:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	2965      	cmp	r1, #101	@ 0x65
 800a03a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a03e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	d00c      	beq.n	800a060 <_scanf_float+0x358>
 800a046:	2945      	cmp	r1, #69	@ 0x45
 800a048:	d00a      	beq.n	800a060 <_scanf_float+0x358>
 800a04a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a04e:	463a      	mov	r2, r7
 800a050:	4640      	mov	r0, r8
 800a052:	4798      	blx	r3
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	1eb5      	subs	r5, r6, #2
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a064:	463a      	mov	r2, r7
 800a066:	4640      	mov	r0, r8
 800a068:	4798      	blx	r3
 800a06a:	462e      	mov	r6, r5
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	f012 0210 	ands.w	r2, r2, #16
 800a072:	d001      	beq.n	800a078 <_scanf_float+0x370>
 800a074:	2000      	movs	r0, #0
 800a076:	e68b      	b.n	8009d90 <_scanf_float+0x88>
 800a078:	7032      	strb	r2, [r6, #0]
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a084:	d11a      	bne.n	800a0bc <_scanf_float+0x3b4>
 800a086:	9b02      	ldr	r3, [sp, #8]
 800a088:	454b      	cmp	r3, r9
 800a08a:	eba3 0209 	sub.w	r2, r3, r9
 800a08e:	d121      	bne.n	800a0d4 <_scanf_float+0x3cc>
 800a090:	9901      	ldr	r1, [sp, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	4640      	mov	r0, r8
 800a096:	f002 fb61 	bl	800c75c <_strtod_r>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	6821      	ldr	r1, [r4, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f011 0f02 	tst.w	r1, #2
 800a0a4:	f103 0204 	add.w	r2, r3, #4
 800a0a8:	d01f      	beq.n	800a0ea <_scanf_float+0x3e2>
 800a0aa:	9903      	ldr	r1, [sp, #12]
 800a0ac:	600a      	str	r2, [r1, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	ed83 0b00 	vstr	d0, [r3]
 800a0b4:	68e3      	ldr	r3, [r4, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60e3      	str	r3, [r4, #12]
 800a0ba:	e7db      	b.n	800a074 <_scanf_float+0x36c>
 800a0bc:	9b04      	ldr	r3, [sp, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0e6      	beq.n	800a090 <_scanf_float+0x388>
 800a0c2:	9905      	ldr	r1, [sp, #20]
 800a0c4:	230a      	movs	r3, #10
 800a0c6:	3101      	adds	r1, #1
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	f002 fbc7 	bl	800c85c <_strtol_r>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	9e05      	ldr	r6, [sp, #20]
 800a0d2:	1ac2      	subs	r2, r0, r3
 800a0d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a0d8:	429e      	cmp	r6, r3
 800a0da:	bf28      	it	cs
 800a0dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a0e0:	490d      	ldr	r1, [pc, #52]	@ (800a118 <_scanf_float+0x410>)
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f000 f912 	bl	800a30c <siprintf>
 800a0e8:	e7d2      	b.n	800a090 <_scanf_float+0x388>
 800a0ea:	f011 0f04 	tst.w	r1, #4
 800a0ee:	9903      	ldr	r1, [sp, #12]
 800a0f0:	600a      	str	r2, [r1, #0]
 800a0f2:	d1dc      	bne.n	800a0ae <_scanf_float+0x3a6>
 800a0f4:	eeb4 0b40 	vcmp.f64	d0, d0
 800a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fc:	681d      	ldr	r5, [r3, #0]
 800a0fe:	d705      	bvc.n	800a10c <_scanf_float+0x404>
 800a100:	4806      	ldr	r0, [pc, #24]	@ (800a11c <_scanf_float+0x414>)
 800a102:	f000 f9e7 	bl	800a4d4 <nanf>
 800a106:	ed85 0a00 	vstr	s0, [r5]
 800a10a:	e7d3      	b.n	800a0b4 <_scanf_float+0x3ac>
 800a10c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a110:	e7f9      	b.n	800a106 <_scanf_float+0x3fe>
 800a112:	f04f 0900 	mov.w	r9, #0
 800a116:	e630      	b.n	8009d7a <_scanf_float+0x72>
 800a118:	0800da9c 	.word	0x0800da9c
 800a11c:	0800de35 	.word	0x0800de35

0800a120 <std>:
 800a120:	2300      	movs	r3, #0
 800a122:	b510      	push	{r4, lr}
 800a124:	4604      	mov	r4, r0
 800a126:	e9c0 3300 	strd	r3, r3, [r0]
 800a12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a12e:	6083      	str	r3, [r0, #8]
 800a130:	8181      	strh	r1, [r0, #12]
 800a132:	6643      	str	r3, [r0, #100]	@ 0x64
 800a134:	81c2      	strh	r2, [r0, #14]
 800a136:	6183      	str	r3, [r0, #24]
 800a138:	4619      	mov	r1, r3
 800a13a:	2208      	movs	r2, #8
 800a13c:	305c      	adds	r0, #92	@ 0x5c
 800a13e:	f000 f948 	bl	800a3d2 <memset>
 800a142:	4b0d      	ldr	r3, [pc, #52]	@ (800a178 <std+0x58>)
 800a144:	6263      	str	r3, [r4, #36]	@ 0x24
 800a146:	4b0d      	ldr	r3, [pc, #52]	@ (800a17c <std+0x5c>)
 800a148:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a14a:	4b0d      	ldr	r3, [pc, #52]	@ (800a180 <std+0x60>)
 800a14c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a14e:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <std+0x64>)
 800a150:	6323      	str	r3, [r4, #48]	@ 0x30
 800a152:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <std+0x68>)
 800a154:	6224      	str	r4, [r4, #32]
 800a156:	429c      	cmp	r4, r3
 800a158:	d006      	beq.n	800a168 <std+0x48>
 800a15a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a15e:	4294      	cmp	r4, r2
 800a160:	d002      	beq.n	800a168 <std+0x48>
 800a162:	33d0      	adds	r3, #208	@ 0xd0
 800a164:	429c      	cmp	r4, r3
 800a166:	d105      	bne.n	800a174 <std+0x54>
 800a168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a170:	f000 b9ac 	b.w	800a4cc <__retarget_lock_init_recursive>
 800a174:	bd10      	pop	{r4, pc}
 800a176:	bf00      	nop
 800a178:	0800a34d 	.word	0x0800a34d
 800a17c:	0800a36f 	.word	0x0800a36f
 800a180:	0800a3a7 	.word	0x0800a3a7
 800a184:	0800a3cb 	.word	0x0800a3cb
 800a188:	24000330 	.word	0x24000330

0800a18c <stdio_exit_handler>:
 800a18c:	4a02      	ldr	r2, [pc, #8]	@ (800a198 <stdio_exit_handler+0xc>)
 800a18e:	4903      	ldr	r1, [pc, #12]	@ (800a19c <stdio_exit_handler+0x10>)
 800a190:	4803      	ldr	r0, [pc, #12]	@ (800a1a0 <stdio_exit_handler+0x14>)
 800a192:	f000 b869 	b.w	800a268 <_fwalk_sglue>
 800a196:	bf00      	nop
 800a198:	24000010 	.word	0x24000010
 800a19c:	0800cc19 	.word	0x0800cc19
 800a1a0:	24000020 	.word	0x24000020

0800a1a4 <cleanup_stdio>:
 800a1a4:	6841      	ldr	r1, [r0, #4]
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <cleanup_stdio+0x34>)
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	d001      	beq.n	800a1b4 <cleanup_stdio+0x10>
 800a1b0:	f002 fd32 	bl	800cc18 <_fflush_r>
 800a1b4:	68a1      	ldr	r1, [r4, #8]
 800a1b6:	4b09      	ldr	r3, [pc, #36]	@ (800a1dc <cleanup_stdio+0x38>)
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	d002      	beq.n	800a1c2 <cleanup_stdio+0x1e>
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f002 fd2b 	bl	800cc18 <_fflush_r>
 800a1c2:	68e1      	ldr	r1, [r4, #12]
 800a1c4:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <cleanup_stdio+0x3c>)
 800a1c6:	4299      	cmp	r1, r3
 800a1c8:	d004      	beq.n	800a1d4 <cleanup_stdio+0x30>
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f002 bd22 	b.w	800cc18 <_fflush_r>
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	bf00      	nop
 800a1d8:	24000330 	.word	0x24000330
 800a1dc:	24000398 	.word	0x24000398
 800a1e0:	24000400 	.word	0x24000400

0800a1e4 <global_stdio_init.part.0>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <global_stdio_init.part.0+0x30>)
 800a1e8:	4c0b      	ldr	r4, [pc, #44]	@ (800a218 <global_stdio_init.part.0+0x34>)
 800a1ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a21c <global_stdio_init.part.0+0x38>)
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2104      	movs	r1, #4
 800a1f4:	f7ff ff94 	bl	800a120 <std>
 800a1f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	2109      	movs	r1, #9
 800a200:	f7ff ff8e 	bl	800a120 <std>
 800a204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a208:	2202      	movs	r2, #2
 800a20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20e:	2112      	movs	r1, #18
 800a210:	f7ff bf86 	b.w	800a120 <std>
 800a214:	24000468 	.word	0x24000468
 800a218:	24000330 	.word	0x24000330
 800a21c:	0800a18d 	.word	0x0800a18d

0800a220 <__sfp_lock_acquire>:
 800a220:	4801      	ldr	r0, [pc, #4]	@ (800a228 <__sfp_lock_acquire+0x8>)
 800a222:	f000 b954 	b.w	800a4ce <__retarget_lock_acquire_recursive>
 800a226:	bf00      	nop
 800a228:	24000471 	.word	0x24000471

0800a22c <__sfp_lock_release>:
 800a22c:	4801      	ldr	r0, [pc, #4]	@ (800a234 <__sfp_lock_release+0x8>)
 800a22e:	f000 b94f 	b.w	800a4d0 <__retarget_lock_release_recursive>
 800a232:	bf00      	nop
 800a234:	24000471 	.word	0x24000471

0800a238 <__sinit>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	4604      	mov	r4, r0
 800a23c:	f7ff fff0 	bl	800a220 <__sfp_lock_acquire>
 800a240:	6a23      	ldr	r3, [r4, #32]
 800a242:	b11b      	cbz	r3, 800a24c <__sinit+0x14>
 800a244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a248:	f7ff bff0 	b.w	800a22c <__sfp_lock_release>
 800a24c:	4b04      	ldr	r3, [pc, #16]	@ (800a260 <__sinit+0x28>)
 800a24e:	6223      	str	r3, [r4, #32]
 800a250:	4b04      	ldr	r3, [pc, #16]	@ (800a264 <__sinit+0x2c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1f5      	bne.n	800a244 <__sinit+0xc>
 800a258:	f7ff ffc4 	bl	800a1e4 <global_stdio_init.part.0>
 800a25c:	e7f2      	b.n	800a244 <__sinit+0xc>
 800a25e:	bf00      	nop
 800a260:	0800a1a5 	.word	0x0800a1a5
 800a264:	24000468 	.word	0x24000468

0800a268 <_fwalk_sglue>:
 800a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26c:	4607      	mov	r7, r0
 800a26e:	4688      	mov	r8, r1
 800a270:	4614      	mov	r4, r2
 800a272:	2600      	movs	r6, #0
 800a274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a278:	f1b9 0901 	subs.w	r9, r9, #1
 800a27c:	d505      	bpl.n	800a28a <_fwalk_sglue+0x22>
 800a27e:	6824      	ldr	r4, [r4, #0]
 800a280:	2c00      	cmp	r4, #0
 800a282:	d1f7      	bne.n	800a274 <_fwalk_sglue+0xc>
 800a284:	4630      	mov	r0, r6
 800a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28a:	89ab      	ldrh	r3, [r5, #12]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d907      	bls.n	800a2a0 <_fwalk_sglue+0x38>
 800a290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a294:	3301      	adds	r3, #1
 800a296:	d003      	beq.n	800a2a0 <_fwalk_sglue+0x38>
 800a298:	4629      	mov	r1, r5
 800a29a:	4638      	mov	r0, r7
 800a29c:	47c0      	blx	r8
 800a29e:	4306      	orrs	r6, r0
 800a2a0:	3568      	adds	r5, #104	@ 0x68
 800a2a2:	e7e9      	b.n	800a278 <_fwalk_sglue+0x10>

0800a2a4 <sniprintf>:
 800a2a4:	b40c      	push	{r2, r3}
 800a2a6:	b530      	push	{r4, r5, lr}
 800a2a8:	4b17      	ldr	r3, [pc, #92]	@ (800a308 <sniprintf+0x64>)
 800a2aa:	1e0c      	subs	r4, r1, #0
 800a2ac:	681d      	ldr	r5, [r3, #0]
 800a2ae:	b09d      	sub	sp, #116	@ 0x74
 800a2b0:	da08      	bge.n	800a2c4 <sniprintf+0x20>
 800a2b2:	238b      	movs	r3, #139	@ 0x8b
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	b01d      	add	sp, #116	@ 0x74
 800a2bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2c0:	b002      	add	sp, #8
 800a2c2:	4770      	bx	lr
 800a2c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a2c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2cc:	bf14      	ite	ne
 800a2ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2d2:	4623      	moveq	r3, r4
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	9307      	str	r3, [sp, #28]
 800a2d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a2dc:	9002      	str	r0, [sp, #8]
 800a2de:	9006      	str	r0, [sp, #24]
 800a2e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a2e6:	ab21      	add	r3, sp, #132	@ 0x84
 800a2e8:	a902      	add	r1, sp, #8
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	f002 fb13 	bl	800c918 <_svfiprintf_r>
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	bfbc      	itt	lt
 800a2f6:	238b      	movlt	r3, #139	@ 0x8b
 800a2f8:	602b      	strlt	r3, [r5, #0]
 800a2fa:	2c00      	cmp	r4, #0
 800a2fc:	d0dd      	beq.n	800a2ba <sniprintf+0x16>
 800a2fe:	9b02      	ldr	r3, [sp, #8]
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	e7d9      	b.n	800a2ba <sniprintf+0x16>
 800a306:	bf00      	nop
 800a308:	2400001c 	.word	0x2400001c

0800a30c <siprintf>:
 800a30c:	b40e      	push	{r1, r2, r3}
 800a30e:	b500      	push	{lr}
 800a310:	b09c      	sub	sp, #112	@ 0x70
 800a312:	ab1d      	add	r3, sp, #116	@ 0x74
 800a314:	9002      	str	r0, [sp, #8]
 800a316:	9006      	str	r0, [sp, #24]
 800a318:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a31c:	4809      	ldr	r0, [pc, #36]	@ (800a344 <siprintf+0x38>)
 800a31e:	9107      	str	r1, [sp, #28]
 800a320:	9104      	str	r1, [sp, #16]
 800a322:	4909      	ldr	r1, [pc, #36]	@ (800a348 <siprintf+0x3c>)
 800a324:	f853 2b04 	ldr.w	r2, [r3], #4
 800a328:	9105      	str	r1, [sp, #20]
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	a902      	add	r1, sp, #8
 800a330:	f002 faf2 	bl	800c918 <_svfiprintf_r>
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	2200      	movs	r2, #0
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	b01c      	add	sp, #112	@ 0x70
 800a33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a340:	b003      	add	sp, #12
 800a342:	4770      	bx	lr
 800a344:	2400001c 	.word	0x2400001c
 800a348:	ffff0208 	.word	0xffff0208

0800a34c <__sread>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	460c      	mov	r4, r1
 800a350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a354:	f000 f86c 	bl	800a430 <_read_r>
 800a358:	2800      	cmp	r0, #0
 800a35a:	bfab      	itete	ge
 800a35c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a35e:	89a3      	ldrhlt	r3, [r4, #12]
 800a360:	181b      	addge	r3, r3, r0
 800a362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a366:	bfac      	ite	ge
 800a368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a36a:	81a3      	strhlt	r3, [r4, #12]
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <__swrite>:
 800a36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a372:	461f      	mov	r7, r3
 800a374:	898b      	ldrh	r3, [r1, #12]
 800a376:	05db      	lsls	r3, r3, #23
 800a378:	4605      	mov	r5, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	4616      	mov	r6, r2
 800a37e:	d505      	bpl.n	800a38c <__swrite+0x1e>
 800a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a384:	2302      	movs	r3, #2
 800a386:	2200      	movs	r2, #0
 800a388:	f000 f840 	bl	800a40c <_lseek_r>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	4632      	mov	r2, r6
 800a39a:	463b      	mov	r3, r7
 800a39c:	4628      	mov	r0, r5
 800a39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a2:	f000 b857 	b.w	800a454 <_write_r>

0800a3a6 <__sseek>:
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ae:	f000 f82d 	bl	800a40c <_lseek_r>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	bf15      	itete	ne
 800a3b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3c2:	81a3      	strheq	r3, [r4, #12]
 800a3c4:	bf18      	it	ne
 800a3c6:	81a3      	strhne	r3, [r4, #12]
 800a3c8:	bd10      	pop	{r4, pc}

0800a3ca <__sclose>:
 800a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ce:	f000 b80d 	b.w	800a3ec <_close_r>

0800a3d2 <memset>:
 800a3d2:	4402      	add	r2, r0
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d100      	bne.n	800a3dc <memset+0xa>
 800a3da:	4770      	bx	lr
 800a3dc:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e0:	e7f9      	b.n	800a3d6 <memset+0x4>
	...

0800a3e4 <_localeconv_r>:
 800a3e4:	4800      	ldr	r0, [pc, #0]	@ (800a3e8 <_localeconv_r+0x4>)
 800a3e6:	4770      	bx	lr
 800a3e8:	2400015c 	.word	0x2400015c

0800a3ec <_close_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4d06      	ldr	r5, [pc, #24]	@ (800a408 <_close_r+0x1c>)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	f7f7 f824 	bl	8001444 <_close>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d102      	bne.n	800a406 <_close_r+0x1a>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	b103      	cbz	r3, 800a406 <_close_r+0x1a>
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	2400046c 	.word	0x2400046c

0800a40c <_lseek_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d07      	ldr	r5, [pc, #28]	@ (800a42c <_lseek_r+0x20>)
 800a410:	4604      	mov	r4, r0
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
 800a416:	2200      	movs	r2, #0
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f7f7 f839 	bl	8001492 <_lseek>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_lseek_r+0x1e>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_lseek_r+0x1e>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	2400046c 	.word	0x2400046c

0800a430 <_read_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d07      	ldr	r5, [pc, #28]	@ (800a450 <_read_r+0x20>)
 800a434:	4604      	mov	r4, r0
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	f7f6 ffc7 	bl	80013d2 <_read>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_read_r+0x1e>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_read_r+0x1e>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	2400046c 	.word	0x2400046c

0800a454 <_write_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	@ (800a474 <_write_r+0x20>)
 800a458:	4604      	mov	r4, r0
 800a45a:	4608      	mov	r0, r1
 800a45c:	4611      	mov	r1, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f7f6 ffd2 	bl	800140c <_write>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_write_r+0x1e>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_write_r+0x1e>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	2400046c 	.word	0x2400046c

0800a478 <__errno>:
 800a478:	4b01      	ldr	r3, [pc, #4]	@ (800a480 <__errno+0x8>)
 800a47a:	6818      	ldr	r0, [r3, #0]
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	2400001c 	.word	0x2400001c

0800a484 <__libc_init_array>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4d0d      	ldr	r5, [pc, #52]	@ (800a4bc <__libc_init_array+0x38>)
 800a488:	4c0d      	ldr	r4, [pc, #52]	@ (800a4c0 <__libc_init_array+0x3c>)
 800a48a:	1b64      	subs	r4, r4, r5
 800a48c:	10a4      	asrs	r4, r4, #2
 800a48e:	2600      	movs	r6, #0
 800a490:	42a6      	cmp	r6, r4
 800a492:	d109      	bne.n	800a4a8 <__libc_init_array+0x24>
 800a494:	4d0b      	ldr	r5, [pc, #44]	@ (800a4c4 <__libc_init_array+0x40>)
 800a496:	4c0c      	ldr	r4, [pc, #48]	@ (800a4c8 <__libc_init_array+0x44>)
 800a498:	f003 fab0 	bl	800d9fc <_init>
 800a49c:	1b64      	subs	r4, r4, r5
 800a49e:	10a4      	asrs	r4, r4, #2
 800a4a0:	2600      	movs	r6, #0
 800a4a2:	42a6      	cmp	r6, r4
 800a4a4:	d105      	bne.n	800a4b2 <__libc_init_array+0x2e>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ac:	4798      	blx	r3
 800a4ae:	3601      	adds	r6, #1
 800a4b0:	e7ee      	b.n	800a490 <__libc_init_array+0xc>
 800a4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b6:	4798      	blx	r3
 800a4b8:	3601      	adds	r6, #1
 800a4ba:	e7f2      	b.n	800a4a2 <__libc_init_array+0x1e>
 800a4bc:	0800dea0 	.word	0x0800dea0
 800a4c0:	0800dea0 	.word	0x0800dea0
 800a4c4:	0800dea0 	.word	0x0800dea0
 800a4c8:	0800dea4 	.word	0x0800dea4

0800a4cc <__retarget_lock_init_recursive>:
 800a4cc:	4770      	bx	lr

0800a4ce <__retarget_lock_acquire_recursive>:
 800a4ce:	4770      	bx	lr

0800a4d0 <__retarget_lock_release_recursive>:
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <nanf>:
 800a4d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a4dc <nanf+0x8>
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	7fc00000 	.word	0x7fc00000

0800a4e0 <quorem>:
 800a4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	6903      	ldr	r3, [r0, #16]
 800a4e6:	690c      	ldr	r4, [r1, #16]
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	db7e      	blt.n	800a5ec <quorem+0x10c>
 800a4ee:	3c01      	subs	r4, #1
 800a4f0:	f101 0814 	add.w	r8, r1, #20
 800a4f4:	00a3      	lsls	r3, r4, #2
 800a4f6:	f100 0514 	add.w	r5, r0, #20
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a50a:	3301      	adds	r3, #1
 800a50c:	429a      	cmp	r2, r3
 800a50e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a512:	fbb2 f6f3 	udiv	r6, r2, r3
 800a516:	d32e      	bcc.n	800a576 <quorem+0x96>
 800a518:	f04f 0a00 	mov.w	sl, #0
 800a51c:	46c4      	mov	ip, r8
 800a51e:	46ae      	mov	lr, r5
 800a520:	46d3      	mov	fp, sl
 800a522:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a526:	b298      	uxth	r0, r3
 800a528:	fb06 a000 	mla	r0, r6, r0, sl
 800a52c:	0c02      	lsrs	r2, r0, #16
 800a52e:	0c1b      	lsrs	r3, r3, #16
 800a530:	fb06 2303 	mla	r3, r6, r3, r2
 800a534:	f8de 2000 	ldr.w	r2, [lr]
 800a538:	b280      	uxth	r0, r0
 800a53a:	b292      	uxth	r2, r2
 800a53c:	1a12      	subs	r2, r2, r0
 800a53e:	445a      	add	r2, fp
 800a540:	f8de 0000 	ldr.w	r0, [lr]
 800a544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a548:	b29b      	uxth	r3, r3
 800a54a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a54e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a552:	b292      	uxth	r2, r2
 800a554:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a558:	45e1      	cmp	r9, ip
 800a55a:	f84e 2b04 	str.w	r2, [lr], #4
 800a55e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a562:	d2de      	bcs.n	800a522 <quorem+0x42>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	58eb      	ldr	r3, [r5, r3]
 800a568:	b92b      	cbnz	r3, 800a576 <quorem+0x96>
 800a56a:	9b01      	ldr	r3, [sp, #4]
 800a56c:	3b04      	subs	r3, #4
 800a56e:	429d      	cmp	r5, r3
 800a570:	461a      	mov	r2, r3
 800a572:	d32f      	bcc.n	800a5d4 <quorem+0xf4>
 800a574:	613c      	str	r4, [r7, #16]
 800a576:	4638      	mov	r0, r7
 800a578:	f001 f954 	bl	800b824 <__mcmp>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	db25      	blt.n	800a5cc <quorem+0xec>
 800a580:	4629      	mov	r1, r5
 800a582:	2000      	movs	r0, #0
 800a584:	f858 2b04 	ldr.w	r2, [r8], #4
 800a588:	f8d1 c000 	ldr.w	ip, [r1]
 800a58c:	fa1f fe82 	uxth.w	lr, r2
 800a590:	fa1f f38c 	uxth.w	r3, ip
 800a594:	eba3 030e 	sub.w	r3, r3, lr
 800a598:	4403      	add	r3, r0
 800a59a:	0c12      	lsrs	r2, r2, #16
 800a59c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a5a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5aa:	45c1      	cmp	r9, r8
 800a5ac:	f841 3b04 	str.w	r3, [r1], #4
 800a5b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5b4:	d2e6      	bcs.n	800a584 <quorem+0xa4>
 800a5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5be:	b922      	cbnz	r2, 800a5ca <quorem+0xea>
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	d30b      	bcc.n	800a5e0 <quorem+0x100>
 800a5c8:	613c      	str	r4, [r7, #16]
 800a5ca:	3601      	adds	r6, #1
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	b003      	add	sp, #12
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	3b04      	subs	r3, #4
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	d1cb      	bne.n	800a574 <quorem+0x94>
 800a5dc:	3c01      	subs	r4, #1
 800a5de:	e7c6      	b.n	800a56e <quorem+0x8e>
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	d1ef      	bne.n	800a5c8 <quorem+0xe8>
 800a5e8:	3c01      	subs	r4, #1
 800a5ea:	e7ea      	b.n	800a5c2 <quorem+0xe2>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e7ee      	b.n	800a5ce <quorem+0xee>

0800a5f0 <_dtoa_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	ed2d 8b02 	vpush	{d8}
 800a5f8:	69c7      	ldr	r7, [r0, #28]
 800a5fa:	b091      	sub	sp, #68	@ 0x44
 800a5fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a600:	ec55 4b10 	vmov	r4, r5, d0
 800a604:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a606:	9107      	str	r1, [sp, #28]
 800a608:	4681      	mov	r9, r0
 800a60a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a60c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a60e:	b97f      	cbnz	r7, 800a630 <_dtoa_r+0x40>
 800a610:	2010      	movs	r0, #16
 800a612:	f000 fd8d 	bl	800b130 <malloc>
 800a616:	4602      	mov	r2, r0
 800a618:	f8c9 001c 	str.w	r0, [r9, #28]
 800a61c:	b920      	cbnz	r0, 800a628 <_dtoa_r+0x38>
 800a61e:	4ba0      	ldr	r3, [pc, #640]	@ (800a8a0 <_dtoa_r+0x2b0>)
 800a620:	21ef      	movs	r1, #239	@ 0xef
 800a622:	48a0      	ldr	r0, [pc, #640]	@ (800a8a4 <_dtoa_r+0x2b4>)
 800a624:	f002 fb74 	bl	800cd10 <__assert_func>
 800a628:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a62c:	6007      	str	r7, [r0, #0]
 800a62e:	60c7      	str	r7, [r0, #12]
 800a630:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a634:	6819      	ldr	r1, [r3, #0]
 800a636:	b159      	cbz	r1, 800a650 <_dtoa_r+0x60>
 800a638:	685a      	ldr	r2, [r3, #4]
 800a63a:	604a      	str	r2, [r1, #4]
 800a63c:	2301      	movs	r3, #1
 800a63e:	4093      	lsls	r3, r2
 800a640:	608b      	str	r3, [r1, #8]
 800a642:	4648      	mov	r0, r9
 800a644:	f000 fe6a 	bl	800b31c <_Bfree>
 800a648:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a64c:	2200      	movs	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]
 800a650:	1e2b      	subs	r3, r5, #0
 800a652:	bfbb      	ittet	lt
 800a654:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a658:	9303      	strlt	r3, [sp, #12]
 800a65a:	2300      	movge	r3, #0
 800a65c:	2201      	movlt	r2, #1
 800a65e:	bfac      	ite	ge
 800a660:	6033      	strge	r3, [r6, #0]
 800a662:	6032      	strlt	r2, [r6, #0]
 800a664:	4b90      	ldr	r3, [pc, #576]	@ (800a8a8 <_dtoa_r+0x2b8>)
 800a666:	9e03      	ldr	r6, [sp, #12]
 800a668:	43b3      	bics	r3, r6
 800a66a:	d110      	bne.n	800a68e <_dtoa_r+0x9e>
 800a66c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a66e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a678:	4323      	orrs	r3, r4
 800a67a:	f000 84de 	beq.w	800b03a <_dtoa_r+0xa4a>
 800a67e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a680:	4f8a      	ldr	r7, [pc, #552]	@ (800a8ac <_dtoa_r+0x2bc>)
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 84e0 	beq.w	800b048 <_dtoa_r+0xa58>
 800a688:	1cfb      	adds	r3, r7, #3
 800a68a:	f000 bcdb 	b.w	800b044 <_dtoa_r+0xa54>
 800a68e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a692:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69a:	d10a      	bne.n	800a6b2 <_dtoa_r+0xc2>
 800a69c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a69e:	2301      	movs	r3, #1
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a6a4:	b113      	cbz	r3, 800a6ac <_dtoa_r+0xbc>
 800a6a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a6a8:	4b81      	ldr	r3, [pc, #516]	@ (800a8b0 <_dtoa_r+0x2c0>)
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	4f81      	ldr	r7, [pc, #516]	@ (800a8b4 <_dtoa_r+0x2c4>)
 800a6ae:	f000 bccb 	b.w	800b048 <_dtoa_r+0xa58>
 800a6b2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a6b4:	a90f      	add	r1, sp, #60	@ 0x3c
 800a6b6:	4648      	mov	r0, r9
 800a6b8:	eeb0 0b48 	vmov.f64	d0, d8
 800a6bc:	f001 f9d2 	bl	800ba64 <__d2b>
 800a6c0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a6c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6c6:	9001      	str	r0, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d045      	beq.n	800a758 <_dtoa_r+0x168>
 800a6cc:	eeb0 7b48 	vmov.f64	d7, d8
 800a6d0:	ee18 1a90 	vmov	r1, s17
 800a6d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a6d8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a6dc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a6e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	ee07 1a90 	vmov	s15, r1
 800a6ea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a6ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a888 <_dtoa_r+0x298>
 800a6f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a6f6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a890 <_dtoa_r+0x2a0>
 800a6fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a6fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a898 <_dtoa_r+0x2a8>
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a70a:	eeb0 7b46 	vmov.f64	d7, d6
 800a70e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a712:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a716:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a71e:	ee16 8a90 	vmov	r8, s13
 800a722:	d508      	bpl.n	800a736 <_dtoa_r+0x146>
 800a724:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a728:	eeb4 6b47 	vcmp.f64	d6, d7
 800a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a730:	bf18      	it	ne
 800a732:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a736:	f1b8 0f16 	cmp.w	r8, #22
 800a73a:	d82b      	bhi.n	800a794 <_dtoa_r+0x1a4>
 800a73c:	495e      	ldr	r1, [pc, #376]	@ (800a8b8 <_dtoa_r+0x2c8>)
 800a73e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a742:	ed91 7b00 	vldr	d7, [r1]
 800a746:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74e:	d501      	bpl.n	800a754 <_dtoa_r+0x164>
 800a750:	f108 38ff 	add.w	r8, r8, #4294967295
 800a754:	2100      	movs	r1, #0
 800a756:	e01e      	b.n	800a796 <_dtoa_r+0x1a6>
 800a758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a75a:	4413      	add	r3, r2
 800a75c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a760:	2920      	cmp	r1, #32
 800a762:	bfc1      	itttt	gt
 800a764:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a768:	408e      	lslgt	r6, r1
 800a76a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a76e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a772:	bfd6      	itet	le
 800a774:	f1c1 0120 	rsble	r1, r1, #32
 800a778:	4331      	orrgt	r1, r6
 800a77a:	fa04 f101 	lslle.w	r1, r4, r1
 800a77e:	ee07 1a90 	vmov	s15, r1
 800a782:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a786:	3b01      	subs	r3, #1
 800a788:	ee17 1a90 	vmov	r1, s15
 800a78c:	2501      	movs	r5, #1
 800a78e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a792:	e7a8      	b.n	800a6e6 <_dtoa_r+0xf6>
 800a794:	2101      	movs	r1, #1
 800a796:	1ad2      	subs	r2, r2, r3
 800a798:	1e53      	subs	r3, r2, #1
 800a79a:	9306      	str	r3, [sp, #24]
 800a79c:	bf45      	ittet	mi
 800a79e:	f1c2 0301 	rsbmi	r3, r2, #1
 800a7a2:	9305      	strmi	r3, [sp, #20]
 800a7a4:	2300      	movpl	r3, #0
 800a7a6:	2300      	movmi	r3, #0
 800a7a8:	bf4c      	ite	mi
 800a7aa:	9306      	strmi	r3, [sp, #24]
 800a7ac:	9305      	strpl	r3, [sp, #20]
 800a7ae:	f1b8 0f00 	cmp.w	r8, #0
 800a7b2:	910c      	str	r1, [sp, #48]	@ 0x30
 800a7b4:	db18      	blt.n	800a7e8 <_dtoa_r+0x1f8>
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a7bc:	4443      	add	r3, r8
 800a7be:	9306      	str	r3, [sp, #24]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9a07      	ldr	r2, [sp, #28]
 800a7c4:	2a09      	cmp	r2, #9
 800a7c6:	d849      	bhi.n	800a85c <_dtoa_r+0x26c>
 800a7c8:	2a05      	cmp	r2, #5
 800a7ca:	bfc4      	itt	gt
 800a7cc:	3a04      	subgt	r2, #4
 800a7ce:	9207      	strgt	r2, [sp, #28]
 800a7d0:	9a07      	ldr	r2, [sp, #28]
 800a7d2:	f1a2 0202 	sub.w	r2, r2, #2
 800a7d6:	bfcc      	ite	gt
 800a7d8:	2400      	movgt	r4, #0
 800a7da:	2401      	movle	r4, #1
 800a7dc:	2a03      	cmp	r2, #3
 800a7de:	d848      	bhi.n	800a872 <_dtoa_r+0x282>
 800a7e0:	e8df f002 	tbb	[pc, r2]
 800a7e4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a7e8:	9b05      	ldr	r3, [sp, #20]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	eba3 0308 	sub.w	r3, r3, r8
 800a7f0:	9305      	str	r3, [sp, #20]
 800a7f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a7f4:	f1c8 0300 	rsb	r3, r8, #0
 800a7f8:	e7e3      	b.n	800a7c2 <_dtoa_r+0x1d2>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	9208      	str	r2, [sp, #32]
 800a7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a800:	2a00      	cmp	r2, #0
 800a802:	dc39      	bgt.n	800a878 <_dtoa_r+0x288>
 800a804:	f04f 0b01 	mov.w	fp, #1
 800a808:	46da      	mov	sl, fp
 800a80a:	465a      	mov	r2, fp
 800a80c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a810:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a814:	2100      	movs	r1, #0
 800a816:	2004      	movs	r0, #4
 800a818:	f100 0614 	add.w	r6, r0, #20
 800a81c:	4296      	cmp	r6, r2
 800a81e:	d930      	bls.n	800a882 <_dtoa_r+0x292>
 800a820:	6079      	str	r1, [r7, #4]
 800a822:	4648      	mov	r0, r9
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	f000 fd39 	bl	800b29c <_Balloc>
 800a82a:	9b04      	ldr	r3, [sp, #16]
 800a82c:	4607      	mov	r7, r0
 800a82e:	2800      	cmp	r0, #0
 800a830:	d146      	bne.n	800a8c0 <_dtoa_r+0x2d0>
 800a832:	4b22      	ldr	r3, [pc, #136]	@ (800a8bc <_dtoa_r+0x2cc>)
 800a834:	4602      	mov	r2, r0
 800a836:	f240 11af 	movw	r1, #431	@ 0x1af
 800a83a:	e6f2      	b.n	800a622 <_dtoa_r+0x32>
 800a83c:	2201      	movs	r2, #1
 800a83e:	e7dd      	b.n	800a7fc <_dtoa_r+0x20c>
 800a840:	2200      	movs	r2, #0
 800a842:	9208      	str	r2, [sp, #32]
 800a844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a846:	eb08 0b02 	add.w	fp, r8, r2
 800a84a:	f10b 0a01 	add.w	sl, fp, #1
 800a84e:	4652      	mov	r2, sl
 800a850:	2a01      	cmp	r2, #1
 800a852:	bfb8      	it	lt
 800a854:	2201      	movlt	r2, #1
 800a856:	e7db      	b.n	800a810 <_dtoa_r+0x220>
 800a858:	2201      	movs	r2, #1
 800a85a:	e7f2      	b.n	800a842 <_dtoa_r+0x252>
 800a85c:	2401      	movs	r4, #1
 800a85e:	2200      	movs	r2, #0
 800a860:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a864:	f04f 3bff 	mov.w	fp, #4294967295
 800a868:	2100      	movs	r1, #0
 800a86a:	46da      	mov	sl, fp
 800a86c:	2212      	movs	r2, #18
 800a86e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a870:	e7ce      	b.n	800a810 <_dtoa_r+0x220>
 800a872:	2201      	movs	r2, #1
 800a874:	9208      	str	r2, [sp, #32]
 800a876:	e7f5      	b.n	800a864 <_dtoa_r+0x274>
 800a878:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a87c:	46da      	mov	sl, fp
 800a87e:	465a      	mov	r2, fp
 800a880:	e7c6      	b.n	800a810 <_dtoa_r+0x220>
 800a882:	3101      	adds	r1, #1
 800a884:	0040      	lsls	r0, r0, #1
 800a886:	e7c7      	b.n	800a818 <_dtoa_r+0x228>
 800a888:	636f4361 	.word	0x636f4361
 800a88c:	3fd287a7 	.word	0x3fd287a7
 800a890:	8b60c8b3 	.word	0x8b60c8b3
 800a894:	3fc68a28 	.word	0x3fc68a28
 800a898:	509f79fb 	.word	0x509f79fb
 800a89c:	3fd34413 	.word	0x3fd34413
 800a8a0:	0800daae 	.word	0x0800daae
 800a8a4:	0800dac5 	.word	0x0800dac5
 800a8a8:	7ff00000 	.word	0x7ff00000
 800a8ac:	0800daaa 	.word	0x0800daaa
 800a8b0:	0800da79 	.word	0x0800da79
 800a8b4:	0800da78 	.word	0x0800da78
 800a8b8:	0800dbc0 	.word	0x0800dbc0
 800a8bc:	0800db1d 	.word	0x0800db1d
 800a8c0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a8c4:	f1ba 0f0e 	cmp.w	sl, #14
 800a8c8:	6010      	str	r0, [r2, #0]
 800a8ca:	d86f      	bhi.n	800a9ac <_dtoa_r+0x3bc>
 800a8cc:	2c00      	cmp	r4, #0
 800a8ce:	d06d      	beq.n	800a9ac <_dtoa_r+0x3bc>
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	f340 80c2 	ble.w	800aa5c <_dtoa_r+0x46c>
 800a8d8:	4aca      	ldr	r2, [pc, #808]	@ (800ac04 <_dtoa_r+0x614>)
 800a8da:	f008 010f 	and.w	r1, r8, #15
 800a8de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a8e2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a8e6:	ed92 7b00 	vldr	d7, [r2]
 800a8ea:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a8ee:	f000 80a9 	beq.w	800aa44 <_dtoa_r+0x454>
 800a8f2:	4ac5      	ldr	r2, [pc, #788]	@ (800ac08 <_dtoa_r+0x618>)
 800a8f4:	ed92 6b08 	vldr	d6, [r2, #32]
 800a8f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a8fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a900:	f001 010f 	and.w	r1, r1, #15
 800a904:	2203      	movs	r2, #3
 800a906:	48c0      	ldr	r0, [pc, #768]	@ (800ac08 <_dtoa_r+0x618>)
 800a908:	2900      	cmp	r1, #0
 800a90a:	f040 809d 	bne.w	800aa48 <_dtoa_r+0x458>
 800a90e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a912:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a916:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a91a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a91c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a920:	2900      	cmp	r1, #0
 800a922:	f000 80c1 	beq.w	800aaa8 <_dtoa_r+0x4b8>
 800a926:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a92a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a932:	f140 80b9 	bpl.w	800aaa8 <_dtoa_r+0x4b8>
 800a936:	f1ba 0f00 	cmp.w	sl, #0
 800a93a:	f000 80b5 	beq.w	800aaa8 <_dtoa_r+0x4b8>
 800a93e:	f1bb 0f00 	cmp.w	fp, #0
 800a942:	dd31      	ble.n	800a9a8 <_dtoa_r+0x3b8>
 800a944:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a948:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a94c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a950:	f108 31ff 	add.w	r1, r8, #4294967295
 800a954:	9104      	str	r1, [sp, #16]
 800a956:	3201      	adds	r2, #1
 800a958:	465c      	mov	r4, fp
 800a95a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a95e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a962:	ee07 2a90 	vmov	s15, r2
 800a966:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a96a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a96e:	ee15 2a90 	vmov	r2, s11
 800a972:	ec51 0b15 	vmov	r0, r1, d5
 800a976:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a97a:	2c00      	cmp	r4, #0
 800a97c:	f040 8098 	bne.w	800aab0 <_dtoa_r+0x4c0>
 800a980:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a984:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a988:	ec41 0b17 	vmov	d7, r0, r1
 800a98c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a994:	f300 8261 	bgt.w	800ae5a <_dtoa_r+0x86a>
 800a998:	eeb1 7b47 	vneg.f64	d7, d7
 800a99c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a4:	f100 80f5 	bmi.w	800ab92 <_dtoa_r+0x5a2>
 800a9a8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a9ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	f2c0 812c 	blt.w	800ac0c <_dtoa_r+0x61c>
 800a9b4:	f1b8 0f0e 	cmp.w	r8, #14
 800a9b8:	f300 8128 	bgt.w	800ac0c <_dtoa_r+0x61c>
 800a9bc:	4b91      	ldr	r3, [pc, #580]	@ (800ac04 <_dtoa_r+0x614>)
 800a9be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9c2:	ed93 6b00 	vldr	d6, [r3]
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da03      	bge.n	800a9d4 <_dtoa_r+0x3e4>
 800a9cc:	f1ba 0f00 	cmp.w	sl, #0
 800a9d0:	f340 80d2 	ble.w	800ab78 <_dtoa_r+0x588>
 800a9d4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a9d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9dc:	463e      	mov	r6, r7
 800a9de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a9e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a9e6:	ee15 3a10 	vmov	r3, s10
 800a9ea:	3330      	adds	r3, #48	@ 0x30
 800a9ec:	f806 3b01 	strb.w	r3, [r6], #1
 800a9f0:	1bf3      	subs	r3, r6, r7
 800a9f2:	459a      	cmp	sl, r3
 800a9f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a9f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a9fc:	f040 80f8 	bne.w	800abf0 <_dtoa_r+0x600>
 800aa00:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0c:	f300 80dd 	bgt.w	800abca <_dtoa_r+0x5da>
 800aa10:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa18:	d104      	bne.n	800aa24 <_dtoa_r+0x434>
 800aa1a:	ee15 3a10 	vmov	r3, s10
 800aa1e:	07db      	lsls	r3, r3, #31
 800aa20:	f100 80d3 	bmi.w	800abca <_dtoa_r+0x5da>
 800aa24:	9901      	ldr	r1, [sp, #4]
 800aa26:	4648      	mov	r0, r9
 800aa28:	f000 fc78 	bl	800b31c <_Bfree>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa30:	7033      	strb	r3, [r6, #0]
 800aa32:	f108 0301 	add.w	r3, r8, #1
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 8304 	beq.w	800b048 <_dtoa_r+0xa58>
 800aa40:	601e      	str	r6, [r3, #0]
 800aa42:	e301      	b.n	800b048 <_dtoa_r+0xa58>
 800aa44:	2202      	movs	r2, #2
 800aa46:	e75e      	b.n	800a906 <_dtoa_r+0x316>
 800aa48:	07cc      	lsls	r4, r1, #31
 800aa4a:	d504      	bpl.n	800aa56 <_dtoa_r+0x466>
 800aa4c:	ed90 6b00 	vldr	d6, [r0]
 800aa50:	3201      	adds	r2, #1
 800aa52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa56:	1049      	asrs	r1, r1, #1
 800aa58:	3008      	adds	r0, #8
 800aa5a:	e755      	b.n	800a908 <_dtoa_r+0x318>
 800aa5c:	d022      	beq.n	800aaa4 <_dtoa_r+0x4b4>
 800aa5e:	f1c8 0100 	rsb	r1, r8, #0
 800aa62:	4a68      	ldr	r2, [pc, #416]	@ (800ac04 <_dtoa_r+0x614>)
 800aa64:	f001 000f 	and.w	r0, r1, #15
 800aa68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800aa6c:	ed92 7b00 	vldr	d7, [r2]
 800aa70:	ee28 7b07 	vmul.f64	d7, d8, d7
 800aa74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa78:	4863      	ldr	r0, [pc, #396]	@ (800ac08 <_dtoa_r+0x618>)
 800aa7a:	1109      	asrs	r1, r1, #4
 800aa7c:	2400      	movs	r4, #0
 800aa7e:	2202      	movs	r2, #2
 800aa80:	b929      	cbnz	r1, 800aa8e <_dtoa_r+0x49e>
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	f43f af49 	beq.w	800a91a <_dtoa_r+0x32a>
 800aa88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa8c:	e745      	b.n	800a91a <_dtoa_r+0x32a>
 800aa8e:	07ce      	lsls	r6, r1, #31
 800aa90:	d505      	bpl.n	800aa9e <_dtoa_r+0x4ae>
 800aa92:	ed90 6b00 	vldr	d6, [r0]
 800aa96:	3201      	adds	r2, #1
 800aa98:	2401      	movs	r4, #1
 800aa9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa9e:	1049      	asrs	r1, r1, #1
 800aaa0:	3008      	adds	r0, #8
 800aaa2:	e7ed      	b.n	800aa80 <_dtoa_r+0x490>
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	e738      	b.n	800a91a <_dtoa_r+0x32a>
 800aaa8:	f8cd 8010 	str.w	r8, [sp, #16]
 800aaac:	4654      	mov	r4, sl
 800aaae:	e754      	b.n	800a95a <_dtoa_r+0x36a>
 800aab0:	4a54      	ldr	r2, [pc, #336]	@ (800ac04 <_dtoa_r+0x614>)
 800aab2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800aab6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800aaba:	9a08      	ldr	r2, [sp, #32]
 800aabc:	ec41 0b17 	vmov	d7, r0, r1
 800aac0:	443c      	add	r4, r7
 800aac2:	b34a      	cbz	r2, 800ab18 <_dtoa_r+0x528>
 800aac4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800aac8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800aacc:	463e      	mov	r6, r7
 800aace:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800aad2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800aad6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aada:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aade:	ee14 2a90 	vmov	r2, s9
 800aae2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aae6:	3230      	adds	r2, #48	@ 0x30
 800aae8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aaec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf4:	f806 2b01 	strb.w	r2, [r6], #1
 800aaf8:	d438      	bmi.n	800ab6c <_dtoa_r+0x57c>
 800aafa:	ee32 5b46 	vsub.f64	d5, d2, d6
 800aafe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab06:	d462      	bmi.n	800abce <_dtoa_r+0x5de>
 800ab08:	42a6      	cmp	r6, r4
 800ab0a:	f43f af4d 	beq.w	800a9a8 <_dtoa_r+0x3b8>
 800ab0e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ab12:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab16:	e7e0      	b.n	800aada <_dtoa_r+0x4ea>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab20:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ab24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab28:	ee14 2a90 	vmov	r2, s9
 800ab2c:	3230      	adds	r2, #48	@ 0x30
 800ab2e:	f806 2b01 	strb.w	r2, [r6], #1
 800ab32:	42a6      	cmp	r6, r4
 800ab34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab38:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab3c:	d119      	bne.n	800ab72 <_dtoa_r+0x582>
 800ab3e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ab42:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ab46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ab4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4e:	dc3e      	bgt.n	800abce <_dtoa_r+0x5de>
 800ab50:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ab54:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5c:	f57f af24 	bpl.w	800a9a8 <_dtoa_r+0x3b8>
 800ab60:	460e      	mov	r6, r1
 800ab62:	3901      	subs	r1, #1
 800ab64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab68:	2b30      	cmp	r3, #48	@ 0x30
 800ab6a:	d0f9      	beq.n	800ab60 <_dtoa_r+0x570>
 800ab6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ab70:	e758      	b.n	800aa24 <_dtoa_r+0x434>
 800ab72:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab76:	e7d5      	b.n	800ab24 <_dtoa_r+0x534>
 800ab78:	d10b      	bne.n	800ab92 <_dtoa_r+0x5a2>
 800ab7a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ab7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ab82:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	f2c0 8161 	blt.w	800ae54 <_dtoa_r+0x864>
 800ab92:	2400      	movs	r4, #0
 800ab94:	4625      	mov	r5, r4
 800ab96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab98:	43db      	mvns	r3, r3
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	463e      	mov	r6, r7
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	4621      	mov	r1, r4
 800aba4:	4648      	mov	r0, r9
 800aba6:	f000 fbb9 	bl	800b31c <_Bfree>
 800abaa:	2d00      	cmp	r5, #0
 800abac:	d0de      	beq.n	800ab6c <_dtoa_r+0x57c>
 800abae:	f1b8 0f00 	cmp.w	r8, #0
 800abb2:	d005      	beq.n	800abc0 <_dtoa_r+0x5d0>
 800abb4:	45a8      	cmp	r8, r5
 800abb6:	d003      	beq.n	800abc0 <_dtoa_r+0x5d0>
 800abb8:	4641      	mov	r1, r8
 800abba:	4648      	mov	r0, r9
 800abbc:	f000 fbae 	bl	800b31c <_Bfree>
 800abc0:	4629      	mov	r1, r5
 800abc2:	4648      	mov	r0, r9
 800abc4:	f000 fbaa 	bl	800b31c <_Bfree>
 800abc8:	e7d0      	b.n	800ab6c <_dtoa_r+0x57c>
 800abca:	f8cd 8010 	str.w	r8, [sp, #16]
 800abce:	4633      	mov	r3, r6
 800abd0:	461e      	mov	r6, r3
 800abd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abd6:	2a39      	cmp	r2, #57	@ 0x39
 800abd8:	d106      	bne.n	800abe8 <_dtoa_r+0x5f8>
 800abda:	429f      	cmp	r7, r3
 800abdc:	d1f8      	bne.n	800abd0 <_dtoa_r+0x5e0>
 800abde:	9a04      	ldr	r2, [sp, #16]
 800abe0:	3201      	adds	r2, #1
 800abe2:	9204      	str	r2, [sp, #16]
 800abe4:	2230      	movs	r2, #48	@ 0x30
 800abe6:	703a      	strb	r2, [r7, #0]
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	3201      	adds	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e7bd      	b.n	800ab6c <_dtoa_r+0x57c>
 800abf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800abf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abfc:	f47f aeef 	bne.w	800a9de <_dtoa_r+0x3ee>
 800ac00:	e710      	b.n	800aa24 <_dtoa_r+0x434>
 800ac02:	bf00      	nop
 800ac04:	0800dbc0 	.word	0x0800dbc0
 800ac08:	0800db98 	.word	0x0800db98
 800ac0c:	9908      	ldr	r1, [sp, #32]
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	f000 80e3 	beq.w	800adda <_dtoa_r+0x7ea>
 800ac14:	9907      	ldr	r1, [sp, #28]
 800ac16:	2901      	cmp	r1, #1
 800ac18:	f300 80c8 	bgt.w	800adac <_dtoa_r+0x7bc>
 800ac1c:	2d00      	cmp	r5, #0
 800ac1e:	f000 80c1 	beq.w	800ada4 <_dtoa_r+0x7b4>
 800ac22:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac26:	9e05      	ldr	r6, [sp, #20]
 800ac28:	461c      	mov	r4, r3
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	9b05      	ldr	r3, [sp, #20]
 800ac2e:	4413      	add	r3, r2
 800ac30:	9305      	str	r3, [sp, #20]
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	2101      	movs	r1, #1
 800ac36:	4413      	add	r3, r2
 800ac38:	4648      	mov	r0, r9
 800ac3a:	9306      	str	r3, [sp, #24]
 800ac3c:	f000 fc6c 	bl	800b518 <__i2b>
 800ac40:	9b04      	ldr	r3, [sp, #16]
 800ac42:	4605      	mov	r5, r0
 800ac44:	b166      	cbz	r6, 800ac60 <_dtoa_r+0x670>
 800ac46:	9a06      	ldr	r2, [sp, #24]
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	dd09      	ble.n	800ac60 <_dtoa_r+0x670>
 800ac4c:	42b2      	cmp	r2, r6
 800ac4e:	9905      	ldr	r1, [sp, #20]
 800ac50:	bfa8      	it	ge
 800ac52:	4632      	movge	r2, r6
 800ac54:	1a89      	subs	r1, r1, r2
 800ac56:	9105      	str	r1, [sp, #20]
 800ac58:	9906      	ldr	r1, [sp, #24]
 800ac5a:	1ab6      	subs	r6, r6, r2
 800ac5c:	1a8a      	subs	r2, r1, r2
 800ac5e:	9206      	str	r2, [sp, #24]
 800ac60:	b1fb      	cbz	r3, 800aca2 <_dtoa_r+0x6b2>
 800ac62:	9a08      	ldr	r2, [sp, #32]
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	f000 80bc 	beq.w	800ade2 <_dtoa_r+0x7f2>
 800ac6a:	b19c      	cbz	r4, 800ac94 <_dtoa_r+0x6a4>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4622      	mov	r2, r4
 800ac70:	4648      	mov	r0, r9
 800ac72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac74:	f000 fd10 	bl	800b698 <__pow5mult>
 800ac78:	9a01      	ldr	r2, [sp, #4]
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	4648      	mov	r0, r9
 800ac80:	f000 fc60 	bl	800b544 <__multiply>
 800ac84:	9901      	ldr	r1, [sp, #4]
 800ac86:	9004      	str	r0, [sp, #16]
 800ac88:	4648      	mov	r0, r9
 800ac8a:	f000 fb47 	bl	800b31c <_Bfree>
 800ac8e:	9a04      	ldr	r2, [sp, #16]
 800ac90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac92:	9201      	str	r2, [sp, #4]
 800ac94:	1b1a      	subs	r2, r3, r4
 800ac96:	d004      	beq.n	800aca2 <_dtoa_r+0x6b2>
 800ac98:	9901      	ldr	r1, [sp, #4]
 800ac9a:	4648      	mov	r0, r9
 800ac9c:	f000 fcfc 	bl	800b698 <__pow5mult>
 800aca0:	9001      	str	r0, [sp, #4]
 800aca2:	2101      	movs	r1, #1
 800aca4:	4648      	mov	r0, r9
 800aca6:	f000 fc37 	bl	800b518 <__i2b>
 800acaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acac:	4604      	mov	r4, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 81d0 	beq.w	800b054 <_dtoa_r+0xa64>
 800acb4:	461a      	mov	r2, r3
 800acb6:	4601      	mov	r1, r0
 800acb8:	4648      	mov	r0, r9
 800acba:	f000 fced 	bl	800b698 <__pow5mult>
 800acbe:	9b07      	ldr	r3, [sp, #28]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	4604      	mov	r4, r0
 800acc4:	f300 8095 	bgt.w	800adf2 <_dtoa_r+0x802>
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	f040 808b 	bne.w	800ade6 <_dtoa_r+0x7f6>
 800acd0:	9b03      	ldr	r3, [sp, #12]
 800acd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	f040 8087 	bne.w	800adea <_dtoa_r+0x7fa>
 800acdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ace0:	0d12      	lsrs	r2, r2, #20
 800ace2:	0512      	lsls	r2, r2, #20
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	f000 8082 	beq.w	800adee <_dtoa_r+0x7fe>
 800acea:	9b05      	ldr	r3, [sp, #20]
 800acec:	3301      	adds	r3, #1
 800acee:	9305      	str	r3, [sp, #20]
 800acf0:	9b06      	ldr	r3, [sp, #24]
 800acf2:	3301      	adds	r3, #1
 800acf4:	9306      	str	r3, [sp, #24]
 800acf6:	2301      	movs	r3, #1
 800acf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 81af 	beq.w	800b060 <_dtoa_r+0xa70>
 800ad02:	6922      	ldr	r2, [r4, #16]
 800ad04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad08:	6910      	ldr	r0, [r2, #16]
 800ad0a:	f000 fbb9 	bl	800b480 <__hi0bits>
 800ad0e:	f1c0 0020 	rsb	r0, r0, #32
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	4418      	add	r0, r3
 800ad16:	f010 001f 	ands.w	r0, r0, #31
 800ad1a:	d076      	beq.n	800ae0a <_dtoa_r+0x81a>
 800ad1c:	f1c0 0220 	rsb	r2, r0, #32
 800ad20:	2a04      	cmp	r2, #4
 800ad22:	dd69      	ble.n	800adf8 <_dtoa_r+0x808>
 800ad24:	9b05      	ldr	r3, [sp, #20]
 800ad26:	f1c0 001c 	rsb	r0, r0, #28
 800ad2a:	4403      	add	r3, r0
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	4406      	add	r6, r0
 800ad32:	4403      	add	r3, r0
 800ad34:	9306      	str	r3, [sp, #24]
 800ad36:	9b05      	ldr	r3, [sp, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dd05      	ble.n	800ad48 <_dtoa_r+0x758>
 800ad3c:	9901      	ldr	r1, [sp, #4]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4648      	mov	r0, r9
 800ad42:	f000 fd03 	bl	800b74c <__lshift>
 800ad46:	9001      	str	r0, [sp, #4]
 800ad48:	9b06      	ldr	r3, [sp, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dd05      	ble.n	800ad5a <_dtoa_r+0x76a>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	461a      	mov	r2, r3
 800ad52:	4648      	mov	r0, r9
 800ad54:	f000 fcfa 	bl	800b74c <__lshift>
 800ad58:	4604      	mov	r4, r0
 800ad5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d056      	beq.n	800ae0e <_dtoa_r+0x81e>
 800ad60:	9801      	ldr	r0, [sp, #4]
 800ad62:	4621      	mov	r1, r4
 800ad64:	f000 fd5e 	bl	800b824 <__mcmp>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	da50      	bge.n	800ae0e <_dtoa_r+0x81e>
 800ad6c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	9901      	ldr	r1, [sp, #4]
 800ad74:	2300      	movs	r3, #0
 800ad76:	220a      	movs	r2, #10
 800ad78:	4648      	mov	r0, r9
 800ad7a:	f000 faf1 	bl	800b360 <__multadd>
 800ad7e:	9b08      	ldr	r3, [sp, #32]
 800ad80:	9001      	str	r0, [sp, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 816e 	beq.w	800b064 <_dtoa_r+0xa74>
 800ad88:	4629      	mov	r1, r5
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	220a      	movs	r2, #10
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f000 fae6 	bl	800b360 <__multadd>
 800ad94:	f1bb 0f00 	cmp.w	fp, #0
 800ad98:	4605      	mov	r5, r0
 800ad9a:	dc64      	bgt.n	800ae66 <_dtoa_r+0x876>
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	dc3e      	bgt.n	800ae20 <_dtoa_r+0x830>
 800ada2:	e060      	b.n	800ae66 <_dtoa_r+0x876>
 800ada4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ada6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800adaa:	e73c      	b.n	800ac26 <_dtoa_r+0x636>
 800adac:	f10a 34ff 	add.w	r4, sl, #4294967295
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	bfbf      	itttt	lt
 800adb4:	1ae2      	sublt	r2, r4, r3
 800adb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800adb8:	189b      	addlt	r3, r3, r2
 800adba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800adbc:	bfae      	itee	ge
 800adbe:	1b1c      	subge	r4, r3, r4
 800adc0:	4623      	movlt	r3, r4
 800adc2:	2400      	movlt	r4, #0
 800adc4:	f1ba 0f00 	cmp.w	sl, #0
 800adc8:	bfb5      	itete	lt
 800adca:	9a05      	ldrlt	r2, [sp, #20]
 800adcc:	9e05      	ldrge	r6, [sp, #20]
 800adce:	eba2 060a 	sublt.w	r6, r2, sl
 800add2:	4652      	movge	r2, sl
 800add4:	bfb8      	it	lt
 800add6:	2200      	movlt	r2, #0
 800add8:	e727      	b.n	800ac2a <_dtoa_r+0x63a>
 800adda:	9e05      	ldr	r6, [sp, #20]
 800addc:	9d08      	ldr	r5, [sp, #32]
 800adde:	461c      	mov	r4, r3
 800ade0:	e730      	b.n	800ac44 <_dtoa_r+0x654>
 800ade2:	461a      	mov	r2, r3
 800ade4:	e758      	b.n	800ac98 <_dtoa_r+0x6a8>
 800ade6:	2300      	movs	r3, #0
 800ade8:	e786      	b.n	800acf8 <_dtoa_r+0x708>
 800adea:	9b02      	ldr	r3, [sp, #8]
 800adec:	e784      	b.n	800acf8 <_dtoa_r+0x708>
 800adee:	920b      	str	r2, [sp, #44]	@ 0x2c
 800adf0:	e783      	b.n	800acfa <_dtoa_r+0x70a>
 800adf2:	2300      	movs	r3, #0
 800adf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adf6:	e784      	b.n	800ad02 <_dtoa_r+0x712>
 800adf8:	d09d      	beq.n	800ad36 <_dtoa_r+0x746>
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	321c      	adds	r2, #28
 800adfe:	4413      	add	r3, r2
 800ae00:	9305      	str	r3, [sp, #20]
 800ae02:	9b06      	ldr	r3, [sp, #24]
 800ae04:	4416      	add	r6, r2
 800ae06:	4413      	add	r3, r2
 800ae08:	e794      	b.n	800ad34 <_dtoa_r+0x744>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	e7f5      	b.n	800adfa <_dtoa_r+0x80a>
 800ae0e:	f1ba 0f00 	cmp.w	sl, #0
 800ae12:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae16:	46d3      	mov	fp, sl
 800ae18:	dc21      	bgt.n	800ae5e <_dtoa_r+0x86e>
 800ae1a:	9b07      	ldr	r3, [sp, #28]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	dd1e      	ble.n	800ae5e <_dtoa_r+0x86e>
 800ae20:	f1bb 0f00 	cmp.w	fp, #0
 800ae24:	f47f aeb7 	bne.w	800ab96 <_dtoa_r+0x5a6>
 800ae28:	4621      	mov	r1, r4
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	2205      	movs	r2, #5
 800ae2e:	4648      	mov	r0, r9
 800ae30:	f000 fa96 	bl	800b360 <__multadd>
 800ae34:	4601      	mov	r1, r0
 800ae36:	4604      	mov	r4, r0
 800ae38:	9801      	ldr	r0, [sp, #4]
 800ae3a:	f000 fcf3 	bl	800b824 <__mcmp>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f77f aea9 	ble.w	800ab96 <_dtoa_r+0x5a6>
 800ae44:	463e      	mov	r6, r7
 800ae46:	2331      	movs	r3, #49	@ 0x31
 800ae48:	f806 3b01 	strb.w	r3, [r6], #1
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	e6a4      	b.n	800ab9e <_dtoa_r+0x5ae>
 800ae54:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae58:	4654      	mov	r4, sl
 800ae5a:	4625      	mov	r5, r4
 800ae5c:	e7f2      	b.n	800ae44 <_dtoa_r+0x854>
 800ae5e:	9b08      	ldr	r3, [sp, #32]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8103 	beq.w	800b06c <_dtoa_r+0xa7c>
 800ae66:	2e00      	cmp	r6, #0
 800ae68:	dd05      	ble.n	800ae76 <_dtoa_r+0x886>
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4648      	mov	r0, r9
 800ae70:	f000 fc6c 	bl	800b74c <__lshift>
 800ae74:	4605      	mov	r5, r0
 800ae76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d058      	beq.n	800af2e <_dtoa_r+0x93e>
 800ae7c:	6869      	ldr	r1, [r5, #4]
 800ae7e:	4648      	mov	r0, r9
 800ae80:	f000 fa0c 	bl	800b29c <_Balloc>
 800ae84:	4606      	mov	r6, r0
 800ae86:	b928      	cbnz	r0, 800ae94 <_dtoa_r+0x8a4>
 800ae88:	4b82      	ldr	r3, [pc, #520]	@ (800b094 <_dtoa_r+0xaa4>)
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae90:	f7ff bbc7 	b.w	800a622 <_dtoa_r+0x32>
 800ae94:	692a      	ldr	r2, [r5, #16]
 800ae96:	3202      	adds	r2, #2
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	f105 010c 	add.w	r1, r5, #12
 800ae9e:	300c      	adds	r0, #12
 800aea0:	f001 ff1e 	bl	800cce0 <memcpy>
 800aea4:	2201      	movs	r2, #1
 800aea6:	4631      	mov	r1, r6
 800aea8:	4648      	mov	r0, r9
 800aeaa:	f000 fc4f 	bl	800b74c <__lshift>
 800aeae:	1c7b      	adds	r3, r7, #1
 800aeb0:	9305      	str	r3, [sp, #20]
 800aeb2:	eb07 030b 	add.w	r3, r7, fp
 800aeb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb8:	9b02      	ldr	r3, [sp, #8]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	46a8      	mov	r8, r5
 800aec0:	9308      	str	r3, [sp, #32]
 800aec2:	4605      	mov	r5, r0
 800aec4:	9b05      	ldr	r3, [sp, #20]
 800aec6:	9801      	ldr	r0, [sp, #4]
 800aec8:	4621      	mov	r1, r4
 800aeca:	f103 3bff 	add.w	fp, r3, #4294967295
 800aece:	f7ff fb07 	bl	800a4e0 <quorem>
 800aed2:	4641      	mov	r1, r8
 800aed4:	9002      	str	r0, [sp, #8]
 800aed6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800aeda:	9801      	ldr	r0, [sp, #4]
 800aedc:	f000 fca2 	bl	800b824 <__mcmp>
 800aee0:	462a      	mov	r2, r5
 800aee2:	9006      	str	r0, [sp, #24]
 800aee4:	4621      	mov	r1, r4
 800aee6:	4648      	mov	r0, r9
 800aee8:	f000 fcb8 	bl	800b85c <__mdiff>
 800aeec:	68c2      	ldr	r2, [r0, #12]
 800aeee:	4606      	mov	r6, r0
 800aef0:	b9fa      	cbnz	r2, 800af32 <_dtoa_r+0x942>
 800aef2:	4601      	mov	r1, r0
 800aef4:	9801      	ldr	r0, [sp, #4]
 800aef6:	f000 fc95 	bl	800b824 <__mcmp>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4631      	mov	r1, r6
 800aefe:	4648      	mov	r0, r9
 800af00:	920a      	str	r2, [sp, #40]	@ 0x28
 800af02:	f000 fa0b 	bl	800b31c <_Bfree>
 800af06:	9b07      	ldr	r3, [sp, #28]
 800af08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af0a:	9e05      	ldr	r6, [sp, #20]
 800af0c:	ea43 0102 	orr.w	r1, r3, r2
 800af10:	9b08      	ldr	r3, [sp, #32]
 800af12:	4319      	orrs	r1, r3
 800af14:	d10f      	bne.n	800af36 <_dtoa_r+0x946>
 800af16:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800af1a:	d028      	beq.n	800af6e <_dtoa_r+0x97e>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	dd02      	ble.n	800af28 <_dtoa_r+0x938>
 800af22:	9b02      	ldr	r3, [sp, #8]
 800af24:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800af28:	f88b a000 	strb.w	sl, [fp]
 800af2c:	e639      	b.n	800aba2 <_dtoa_r+0x5b2>
 800af2e:	4628      	mov	r0, r5
 800af30:	e7bd      	b.n	800aeae <_dtoa_r+0x8be>
 800af32:	2201      	movs	r2, #1
 800af34:	e7e2      	b.n	800aefc <_dtoa_r+0x90c>
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	db04      	blt.n	800af46 <_dtoa_r+0x956>
 800af3c:	9907      	ldr	r1, [sp, #28]
 800af3e:	430b      	orrs	r3, r1
 800af40:	9908      	ldr	r1, [sp, #32]
 800af42:	430b      	orrs	r3, r1
 800af44:	d120      	bne.n	800af88 <_dtoa_r+0x998>
 800af46:	2a00      	cmp	r2, #0
 800af48:	ddee      	ble.n	800af28 <_dtoa_r+0x938>
 800af4a:	9901      	ldr	r1, [sp, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	4648      	mov	r0, r9
 800af50:	f000 fbfc 	bl	800b74c <__lshift>
 800af54:	4621      	mov	r1, r4
 800af56:	9001      	str	r0, [sp, #4]
 800af58:	f000 fc64 	bl	800b824 <__mcmp>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	dc03      	bgt.n	800af68 <_dtoa_r+0x978>
 800af60:	d1e2      	bne.n	800af28 <_dtoa_r+0x938>
 800af62:	f01a 0f01 	tst.w	sl, #1
 800af66:	d0df      	beq.n	800af28 <_dtoa_r+0x938>
 800af68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800af6c:	d1d9      	bne.n	800af22 <_dtoa_r+0x932>
 800af6e:	2339      	movs	r3, #57	@ 0x39
 800af70:	f88b 3000 	strb.w	r3, [fp]
 800af74:	4633      	mov	r3, r6
 800af76:	461e      	mov	r6, r3
 800af78:	3b01      	subs	r3, #1
 800af7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af7e:	2a39      	cmp	r2, #57	@ 0x39
 800af80:	d053      	beq.n	800b02a <_dtoa_r+0xa3a>
 800af82:	3201      	adds	r2, #1
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	e60c      	b.n	800aba2 <_dtoa_r+0x5b2>
 800af88:	2a00      	cmp	r2, #0
 800af8a:	dd07      	ble.n	800af9c <_dtoa_r+0x9ac>
 800af8c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800af90:	d0ed      	beq.n	800af6e <_dtoa_r+0x97e>
 800af92:	f10a 0301 	add.w	r3, sl, #1
 800af96:	f88b 3000 	strb.w	r3, [fp]
 800af9a:	e602      	b.n	800aba2 <_dtoa_r+0x5b2>
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	9a05      	ldr	r2, [sp, #20]
 800afa0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800afa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d029      	beq.n	800affe <_dtoa_r+0xa0e>
 800afaa:	9901      	ldr	r1, [sp, #4]
 800afac:	2300      	movs	r3, #0
 800afae:	220a      	movs	r2, #10
 800afb0:	4648      	mov	r0, r9
 800afb2:	f000 f9d5 	bl	800b360 <__multadd>
 800afb6:	45a8      	cmp	r8, r5
 800afb8:	9001      	str	r0, [sp, #4]
 800afba:	f04f 0300 	mov.w	r3, #0
 800afbe:	f04f 020a 	mov.w	r2, #10
 800afc2:	4641      	mov	r1, r8
 800afc4:	4648      	mov	r0, r9
 800afc6:	d107      	bne.n	800afd8 <_dtoa_r+0x9e8>
 800afc8:	f000 f9ca 	bl	800b360 <__multadd>
 800afcc:	4680      	mov	r8, r0
 800afce:	4605      	mov	r5, r0
 800afd0:	9b05      	ldr	r3, [sp, #20]
 800afd2:	3301      	adds	r3, #1
 800afd4:	9305      	str	r3, [sp, #20]
 800afd6:	e775      	b.n	800aec4 <_dtoa_r+0x8d4>
 800afd8:	f000 f9c2 	bl	800b360 <__multadd>
 800afdc:	4629      	mov	r1, r5
 800afde:	4680      	mov	r8, r0
 800afe0:	2300      	movs	r3, #0
 800afe2:	220a      	movs	r2, #10
 800afe4:	4648      	mov	r0, r9
 800afe6:	f000 f9bb 	bl	800b360 <__multadd>
 800afea:	4605      	mov	r5, r0
 800afec:	e7f0      	b.n	800afd0 <_dtoa_r+0x9e0>
 800afee:	f1bb 0f00 	cmp.w	fp, #0
 800aff2:	bfcc      	ite	gt
 800aff4:	465e      	movgt	r6, fp
 800aff6:	2601      	movle	r6, #1
 800aff8:	443e      	add	r6, r7
 800affa:	f04f 0800 	mov.w	r8, #0
 800affe:	9901      	ldr	r1, [sp, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	4648      	mov	r0, r9
 800b004:	f000 fba2 	bl	800b74c <__lshift>
 800b008:	4621      	mov	r1, r4
 800b00a:	9001      	str	r0, [sp, #4]
 800b00c:	f000 fc0a 	bl	800b824 <__mcmp>
 800b010:	2800      	cmp	r0, #0
 800b012:	dcaf      	bgt.n	800af74 <_dtoa_r+0x984>
 800b014:	d102      	bne.n	800b01c <_dtoa_r+0xa2c>
 800b016:	f01a 0f01 	tst.w	sl, #1
 800b01a:	d1ab      	bne.n	800af74 <_dtoa_r+0x984>
 800b01c:	4633      	mov	r3, r6
 800b01e:	461e      	mov	r6, r3
 800b020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b024:	2a30      	cmp	r2, #48	@ 0x30
 800b026:	d0fa      	beq.n	800b01e <_dtoa_r+0xa2e>
 800b028:	e5bb      	b.n	800aba2 <_dtoa_r+0x5b2>
 800b02a:	429f      	cmp	r7, r3
 800b02c:	d1a3      	bne.n	800af76 <_dtoa_r+0x986>
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	3301      	adds	r3, #1
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	2331      	movs	r3, #49	@ 0x31
 800b036:	703b      	strb	r3, [r7, #0]
 800b038:	e5b3      	b.n	800aba2 <_dtoa_r+0x5b2>
 800b03a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b03c:	4f16      	ldr	r7, [pc, #88]	@ (800b098 <_dtoa_r+0xaa8>)
 800b03e:	b11b      	cbz	r3, 800b048 <_dtoa_r+0xa58>
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	4638      	mov	r0, r7
 800b04a:	b011      	add	sp, #68	@ 0x44
 800b04c:	ecbd 8b02 	vpop	{d8}
 800b050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b054:	9b07      	ldr	r3, [sp, #28]
 800b056:	2b01      	cmp	r3, #1
 800b058:	f77f ae36 	ble.w	800acc8 <_dtoa_r+0x6d8>
 800b05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b05e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b060:	2001      	movs	r0, #1
 800b062:	e656      	b.n	800ad12 <_dtoa_r+0x722>
 800b064:	f1bb 0f00 	cmp.w	fp, #0
 800b068:	f77f aed7 	ble.w	800ae1a <_dtoa_r+0x82a>
 800b06c:	463e      	mov	r6, r7
 800b06e:	9801      	ldr	r0, [sp, #4]
 800b070:	4621      	mov	r1, r4
 800b072:	f7ff fa35 	bl	800a4e0 <quorem>
 800b076:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b07a:	f806 ab01 	strb.w	sl, [r6], #1
 800b07e:	1bf2      	subs	r2, r6, r7
 800b080:	4593      	cmp	fp, r2
 800b082:	ddb4      	ble.n	800afee <_dtoa_r+0x9fe>
 800b084:	9901      	ldr	r1, [sp, #4]
 800b086:	2300      	movs	r3, #0
 800b088:	220a      	movs	r2, #10
 800b08a:	4648      	mov	r0, r9
 800b08c:	f000 f968 	bl	800b360 <__multadd>
 800b090:	9001      	str	r0, [sp, #4]
 800b092:	e7ec      	b.n	800b06e <_dtoa_r+0xa7e>
 800b094:	0800db1d 	.word	0x0800db1d
 800b098:	0800daa1 	.word	0x0800daa1

0800b09c <_free_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4605      	mov	r5, r0
 800b0a0:	2900      	cmp	r1, #0
 800b0a2:	d041      	beq.n	800b128 <_free_r+0x8c>
 800b0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a8:	1f0c      	subs	r4, r1, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfb8      	it	lt
 800b0ae:	18e4      	addlt	r4, r4, r3
 800b0b0:	f000 f8e8 	bl	800b284 <__malloc_lock>
 800b0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b12c <_free_r+0x90>)
 800b0b6:	6813      	ldr	r3, [r2, #0]
 800b0b8:	b933      	cbnz	r3, 800b0c8 <_free_r+0x2c>
 800b0ba:	6063      	str	r3, [r4, #4]
 800b0bc:	6014      	str	r4, [r2, #0]
 800b0be:	4628      	mov	r0, r5
 800b0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c4:	f000 b8e4 	b.w	800b290 <__malloc_unlock>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d908      	bls.n	800b0de <_free_r+0x42>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	1821      	adds	r1, r4, r0
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf01      	itttt	eq
 800b0d4:	6819      	ldreq	r1, [r3, #0]
 800b0d6:	685b      	ldreq	r3, [r3, #4]
 800b0d8:	1809      	addeq	r1, r1, r0
 800b0da:	6021      	streq	r1, [r4, #0]
 800b0dc:	e7ed      	b.n	800b0ba <_free_r+0x1e>
 800b0de:	461a      	mov	r2, r3
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	b10b      	cbz	r3, 800b0e8 <_free_r+0x4c>
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	d9fa      	bls.n	800b0de <_free_r+0x42>
 800b0e8:	6811      	ldr	r1, [r2, #0]
 800b0ea:	1850      	adds	r0, r2, r1
 800b0ec:	42a0      	cmp	r0, r4
 800b0ee:	d10b      	bne.n	800b108 <_free_r+0x6c>
 800b0f0:	6820      	ldr	r0, [r4, #0]
 800b0f2:	4401      	add	r1, r0
 800b0f4:	1850      	adds	r0, r2, r1
 800b0f6:	4283      	cmp	r3, r0
 800b0f8:	6011      	str	r1, [r2, #0]
 800b0fa:	d1e0      	bne.n	800b0be <_free_r+0x22>
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	6053      	str	r3, [r2, #4]
 800b102:	4408      	add	r0, r1
 800b104:	6010      	str	r0, [r2, #0]
 800b106:	e7da      	b.n	800b0be <_free_r+0x22>
 800b108:	d902      	bls.n	800b110 <_free_r+0x74>
 800b10a:	230c      	movs	r3, #12
 800b10c:	602b      	str	r3, [r5, #0]
 800b10e:	e7d6      	b.n	800b0be <_free_r+0x22>
 800b110:	6820      	ldr	r0, [r4, #0]
 800b112:	1821      	adds	r1, r4, r0
 800b114:	428b      	cmp	r3, r1
 800b116:	bf04      	itt	eq
 800b118:	6819      	ldreq	r1, [r3, #0]
 800b11a:	685b      	ldreq	r3, [r3, #4]
 800b11c:	6063      	str	r3, [r4, #4]
 800b11e:	bf04      	itt	eq
 800b120:	1809      	addeq	r1, r1, r0
 800b122:	6021      	streq	r1, [r4, #0]
 800b124:	6054      	str	r4, [r2, #4]
 800b126:	e7ca      	b.n	800b0be <_free_r+0x22>
 800b128:	bd38      	pop	{r3, r4, r5, pc}
 800b12a:	bf00      	nop
 800b12c:	24000478 	.word	0x24000478

0800b130 <malloc>:
 800b130:	4b02      	ldr	r3, [pc, #8]	@ (800b13c <malloc+0xc>)
 800b132:	4601      	mov	r1, r0
 800b134:	6818      	ldr	r0, [r3, #0]
 800b136:	f000 b825 	b.w	800b184 <_malloc_r>
 800b13a:	bf00      	nop
 800b13c:	2400001c 	.word	0x2400001c

0800b140 <sbrk_aligned>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4e0f      	ldr	r6, [pc, #60]	@ (800b180 <sbrk_aligned+0x40>)
 800b144:	460c      	mov	r4, r1
 800b146:	6831      	ldr	r1, [r6, #0]
 800b148:	4605      	mov	r5, r0
 800b14a:	b911      	cbnz	r1, 800b152 <sbrk_aligned+0x12>
 800b14c:	f001 fdb8 	bl	800ccc0 <_sbrk_r>
 800b150:	6030      	str	r0, [r6, #0]
 800b152:	4621      	mov	r1, r4
 800b154:	4628      	mov	r0, r5
 800b156:	f001 fdb3 	bl	800ccc0 <_sbrk_r>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	d103      	bne.n	800b166 <sbrk_aligned+0x26>
 800b15e:	f04f 34ff 	mov.w	r4, #4294967295
 800b162:	4620      	mov	r0, r4
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	1cc4      	adds	r4, r0, #3
 800b168:	f024 0403 	bic.w	r4, r4, #3
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d0f8      	beq.n	800b162 <sbrk_aligned+0x22>
 800b170:	1a21      	subs	r1, r4, r0
 800b172:	4628      	mov	r0, r5
 800b174:	f001 fda4 	bl	800ccc0 <_sbrk_r>
 800b178:	3001      	adds	r0, #1
 800b17a:	d1f2      	bne.n	800b162 <sbrk_aligned+0x22>
 800b17c:	e7ef      	b.n	800b15e <sbrk_aligned+0x1e>
 800b17e:	bf00      	nop
 800b180:	24000474 	.word	0x24000474

0800b184 <_malloc_r>:
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b188:	1ccd      	adds	r5, r1, #3
 800b18a:	f025 0503 	bic.w	r5, r5, #3
 800b18e:	3508      	adds	r5, #8
 800b190:	2d0c      	cmp	r5, #12
 800b192:	bf38      	it	cc
 800b194:	250c      	movcc	r5, #12
 800b196:	2d00      	cmp	r5, #0
 800b198:	4606      	mov	r6, r0
 800b19a:	db01      	blt.n	800b1a0 <_malloc_r+0x1c>
 800b19c:	42a9      	cmp	r1, r5
 800b19e:	d904      	bls.n	800b1aa <_malloc_r+0x26>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	6033      	str	r3, [r6, #0]
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b280 <_malloc_r+0xfc>
 800b1ae:	f000 f869 	bl	800b284 <__malloc_lock>
 800b1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b6:	461c      	mov	r4, r3
 800b1b8:	bb44      	cbnz	r4, 800b20c <_malloc_r+0x88>
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7ff ffbf 	bl	800b140 <sbrk_aligned>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	d158      	bne.n	800b27a <_malloc_r+0xf6>
 800b1c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b1cc:	4627      	mov	r7, r4
 800b1ce:	2f00      	cmp	r7, #0
 800b1d0:	d143      	bne.n	800b25a <_malloc_r+0xd6>
 800b1d2:	2c00      	cmp	r4, #0
 800b1d4:	d04b      	beq.n	800b26e <_malloc_r+0xea>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	4639      	mov	r1, r7
 800b1da:	4630      	mov	r0, r6
 800b1dc:	eb04 0903 	add.w	r9, r4, r3
 800b1e0:	f001 fd6e 	bl	800ccc0 <_sbrk_r>
 800b1e4:	4581      	cmp	r9, r0
 800b1e6:	d142      	bne.n	800b26e <_malloc_r+0xea>
 800b1e8:	6821      	ldr	r1, [r4, #0]
 800b1ea:	1a6d      	subs	r5, r5, r1
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff ffa6 	bl	800b140 <sbrk_aligned>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d03a      	beq.n	800b26e <_malloc_r+0xea>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	442b      	add	r3, r5
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b202:	685a      	ldr	r2, [r3, #4]
 800b204:	bb62      	cbnz	r2, 800b260 <_malloc_r+0xdc>
 800b206:	f8c8 7000 	str.w	r7, [r8]
 800b20a:	e00f      	b.n	800b22c <_malloc_r+0xa8>
 800b20c:	6822      	ldr	r2, [r4, #0]
 800b20e:	1b52      	subs	r2, r2, r5
 800b210:	d420      	bmi.n	800b254 <_malloc_r+0xd0>
 800b212:	2a0b      	cmp	r2, #11
 800b214:	d917      	bls.n	800b246 <_malloc_r+0xc2>
 800b216:	1961      	adds	r1, r4, r5
 800b218:	42a3      	cmp	r3, r4
 800b21a:	6025      	str	r5, [r4, #0]
 800b21c:	bf18      	it	ne
 800b21e:	6059      	strne	r1, [r3, #4]
 800b220:	6863      	ldr	r3, [r4, #4]
 800b222:	bf08      	it	eq
 800b224:	f8c8 1000 	streq.w	r1, [r8]
 800b228:	5162      	str	r2, [r4, r5]
 800b22a:	604b      	str	r3, [r1, #4]
 800b22c:	4630      	mov	r0, r6
 800b22e:	f000 f82f 	bl	800b290 <__malloc_unlock>
 800b232:	f104 000b 	add.w	r0, r4, #11
 800b236:	1d23      	adds	r3, r4, #4
 800b238:	f020 0007 	bic.w	r0, r0, #7
 800b23c:	1ac2      	subs	r2, r0, r3
 800b23e:	bf1c      	itt	ne
 800b240:	1a1b      	subne	r3, r3, r0
 800b242:	50a3      	strne	r3, [r4, r2]
 800b244:	e7af      	b.n	800b1a6 <_malloc_r+0x22>
 800b246:	6862      	ldr	r2, [r4, #4]
 800b248:	42a3      	cmp	r3, r4
 800b24a:	bf0c      	ite	eq
 800b24c:	f8c8 2000 	streq.w	r2, [r8]
 800b250:	605a      	strne	r2, [r3, #4]
 800b252:	e7eb      	b.n	800b22c <_malloc_r+0xa8>
 800b254:	4623      	mov	r3, r4
 800b256:	6864      	ldr	r4, [r4, #4]
 800b258:	e7ae      	b.n	800b1b8 <_malloc_r+0x34>
 800b25a:	463c      	mov	r4, r7
 800b25c:	687f      	ldr	r7, [r7, #4]
 800b25e:	e7b6      	b.n	800b1ce <_malloc_r+0x4a>
 800b260:	461a      	mov	r2, r3
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	42a3      	cmp	r3, r4
 800b266:	d1fb      	bne.n	800b260 <_malloc_r+0xdc>
 800b268:	2300      	movs	r3, #0
 800b26a:	6053      	str	r3, [r2, #4]
 800b26c:	e7de      	b.n	800b22c <_malloc_r+0xa8>
 800b26e:	230c      	movs	r3, #12
 800b270:	6033      	str	r3, [r6, #0]
 800b272:	4630      	mov	r0, r6
 800b274:	f000 f80c 	bl	800b290 <__malloc_unlock>
 800b278:	e794      	b.n	800b1a4 <_malloc_r+0x20>
 800b27a:	6005      	str	r5, [r0, #0]
 800b27c:	e7d6      	b.n	800b22c <_malloc_r+0xa8>
 800b27e:	bf00      	nop
 800b280:	24000478 	.word	0x24000478

0800b284 <__malloc_lock>:
 800b284:	4801      	ldr	r0, [pc, #4]	@ (800b28c <__malloc_lock+0x8>)
 800b286:	f7ff b922 	b.w	800a4ce <__retarget_lock_acquire_recursive>
 800b28a:	bf00      	nop
 800b28c:	24000470 	.word	0x24000470

0800b290 <__malloc_unlock>:
 800b290:	4801      	ldr	r0, [pc, #4]	@ (800b298 <__malloc_unlock+0x8>)
 800b292:	f7ff b91d 	b.w	800a4d0 <__retarget_lock_release_recursive>
 800b296:	bf00      	nop
 800b298:	24000470 	.word	0x24000470

0800b29c <_Balloc>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	69c6      	ldr	r6, [r0, #28]
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	b976      	cbnz	r6, 800b2c4 <_Balloc+0x28>
 800b2a6:	2010      	movs	r0, #16
 800b2a8:	f7ff ff42 	bl	800b130 <malloc>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	61e0      	str	r0, [r4, #28]
 800b2b0:	b920      	cbnz	r0, 800b2bc <_Balloc+0x20>
 800b2b2:	4b18      	ldr	r3, [pc, #96]	@ (800b314 <_Balloc+0x78>)
 800b2b4:	4818      	ldr	r0, [pc, #96]	@ (800b318 <_Balloc+0x7c>)
 800b2b6:	216b      	movs	r1, #107	@ 0x6b
 800b2b8:	f001 fd2a 	bl	800cd10 <__assert_func>
 800b2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2c0:	6006      	str	r6, [r0, #0]
 800b2c2:	60c6      	str	r6, [r0, #12]
 800b2c4:	69e6      	ldr	r6, [r4, #28]
 800b2c6:	68f3      	ldr	r3, [r6, #12]
 800b2c8:	b183      	cbz	r3, 800b2ec <_Balloc+0x50>
 800b2ca:	69e3      	ldr	r3, [r4, #28]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2d2:	b9b8      	cbnz	r0, 800b304 <_Balloc+0x68>
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2da:	1d72      	adds	r2, r6, #5
 800b2dc:	0092      	lsls	r2, r2, #2
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f001 fd34 	bl	800cd4c <_calloc_r>
 800b2e4:	b160      	cbz	r0, 800b300 <_Balloc+0x64>
 800b2e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ea:	e00e      	b.n	800b30a <_Balloc+0x6e>
 800b2ec:	2221      	movs	r2, #33	@ 0x21
 800b2ee:	2104      	movs	r1, #4
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 fd2b 	bl	800cd4c <_calloc_r>
 800b2f6:	69e3      	ldr	r3, [r4, #28]
 800b2f8:	60f0      	str	r0, [r6, #12]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e4      	bne.n	800b2ca <_Balloc+0x2e>
 800b300:	2000      	movs	r0, #0
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	6802      	ldr	r2, [r0, #0]
 800b306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b30a:	2300      	movs	r3, #0
 800b30c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b310:	e7f7      	b.n	800b302 <_Balloc+0x66>
 800b312:	bf00      	nop
 800b314:	0800daae 	.word	0x0800daae
 800b318:	0800db2e 	.word	0x0800db2e

0800b31c <_Bfree>:
 800b31c:	b570      	push	{r4, r5, r6, lr}
 800b31e:	69c6      	ldr	r6, [r0, #28]
 800b320:	4605      	mov	r5, r0
 800b322:	460c      	mov	r4, r1
 800b324:	b976      	cbnz	r6, 800b344 <_Bfree+0x28>
 800b326:	2010      	movs	r0, #16
 800b328:	f7ff ff02 	bl	800b130 <malloc>
 800b32c:	4602      	mov	r2, r0
 800b32e:	61e8      	str	r0, [r5, #28]
 800b330:	b920      	cbnz	r0, 800b33c <_Bfree+0x20>
 800b332:	4b09      	ldr	r3, [pc, #36]	@ (800b358 <_Bfree+0x3c>)
 800b334:	4809      	ldr	r0, [pc, #36]	@ (800b35c <_Bfree+0x40>)
 800b336:	218f      	movs	r1, #143	@ 0x8f
 800b338:	f001 fcea 	bl	800cd10 <__assert_func>
 800b33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b340:	6006      	str	r6, [r0, #0]
 800b342:	60c6      	str	r6, [r0, #12]
 800b344:	b13c      	cbz	r4, 800b356 <_Bfree+0x3a>
 800b346:	69eb      	ldr	r3, [r5, #28]
 800b348:	6862      	ldr	r2, [r4, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b350:	6021      	str	r1, [r4, #0]
 800b352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	0800daae 	.word	0x0800daae
 800b35c:	0800db2e 	.word	0x0800db2e

0800b360 <__multadd>:
 800b360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b364:	690d      	ldr	r5, [r1, #16]
 800b366:	4607      	mov	r7, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	461e      	mov	r6, r3
 800b36c:	f101 0c14 	add.w	ip, r1, #20
 800b370:	2000      	movs	r0, #0
 800b372:	f8dc 3000 	ldr.w	r3, [ip]
 800b376:	b299      	uxth	r1, r3
 800b378:	fb02 6101 	mla	r1, r2, r1, r6
 800b37c:	0c1e      	lsrs	r6, r3, #16
 800b37e:	0c0b      	lsrs	r3, r1, #16
 800b380:	fb02 3306 	mla	r3, r2, r6, r3
 800b384:	b289      	uxth	r1, r1
 800b386:	3001      	adds	r0, #1
 800b388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b38c:	4285      	cmp	r5, r0
 800b38e:	f84c 1b04 	str.w	r1, [ip], #4
 800b392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b396:	dcec      	bgt.n	800b372 <__multadd+0x12>
 800b398:	b30e      	cbz	r6, 800b3de <__multadd+0x7e>
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	42ab      	cmp	r3, r5
 800b39e:	dc19      	bgt.n	800b3d4 <__multadd+0x74>
 800b3a0:	6861      	ldr	r1, [r4, #4]
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	3101      	adds	r1, #1
 800b3a6:	f7ff ff79 	bl	800b29c <_Balloc>
 800b3aa:	4680      	mov	r8, r0
 800b3ac:	b928      	cbnz	r0, 800b3ba <__multadd+0x5a>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e4 <__multadd+0x84>)
 800b3b2:	480d      	ldr	r0, [pc, #52]	@ (800b3e8 <__multadd+0x88>)
 800b3b4:	21ba      	movs	r1, #186	@ 0xba
 800b3b6:	f001 fcab 	bl	800cd10 <__assert_func>
 800b3ba:	6922      	ldr	r2, [r4, #16]
 800b3bc:	3202      	adds	r2, #2
 800b3be:	f104 010c 	add.w	r1, r4, #12
 800b3c2:	0092      	lsls	r2, r2, #2
 800b3c4:	300c      	adds	r0, #12
 800b3c6:	f001 fc8b 	bl	800cce0 <memcpy>
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	f7ff ffa5 	bl	800b31c <_Bfree>
 800b3d2:	4644      	mov	r4, r8
 800b3d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d8:	3501      	adds	r5, #1
 800b3da:	615e      	str	r6, [r3, #20]
 800b3dc:	6125      	str	r5, [r4, #16]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e4:	0800db1d 	.word	0x0800db1d
 800b3e8:	0800db2e 	.word	0x0800db2e

0800b3ec <__s2b>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	4615      	mov	r5, r2
 800b3f4:	461f      	mov	r7, r3
 800b3f6:	2209      	movs	r2, #9
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b400:	2100      	movs	r1, #0
 800b402:	2201      	movs	r2, #1
 800b404:	429a      	cmp	r2, r3
 800b406:	db09      	blt.n	800b41c <__s2b+0x30>
 800b408:	4630      	mov	r0, r6
 800b40a:	f7ff ff47 	bl	800b29c <_Balloc>
 800b40e:	b940      	cbnz	r0, 800b422 <__s2b+0x36>
 800b410:	4602      	mov	r2, r0
 800b412:	4b19      	ldr	r3, [pc, #100]	@ (800b478 <__s2b+0x8c>)
 800b414:	4819      	ldr	r0, [pc, #100]	@ (800b47c <__s2b+0x90>)
 800b416:	21d3      	movs	r1, #211	@ 0xd3
 800b418:	f001 fc7a 	bl	800cd10 <__assert_func>
 800b41c:	0052      	lsls	r2, r2, #1
 800b41e:	3101      	adds	r1, #1
 800b420:	e7f0      	b.n	800b404 <__s2b+0x18>
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	6143      	str	r3, [r0, #20]
 800b426:	2d09      	cmp	r5, #9
 800b428:	f04f 0301 	mov.w	r3, #1
 800b42c:	6103      	str	r3, [r0, #16]
 800b42e:	dd16      	ble.n	800b45e <__s2b+0x72>
 800b430:	f104 0909 	add.w	r9, r4, #9
 800b434:	46c8      	mov	r8, r9
 800b436:	442c      	add	r4, r5
 800b438:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b43c:	4601      	mov	r1, r0
 800b43e:	3b30      	subs	r3, #48	@ 0x30
 800b440:	220a      	movs	r2, #10
 800b442:	4630      	mov	r0, r6
 800b444:	f7ff ff8c 	bl	800b360 <__multadd>
 800b448:	45a0      	cmp	r8, r4
 800b44a:	d1f5      	bne.n	800b438 <__s2b+0x4c>
 800b44c:	f1a5 0408 	sub.w	r4, r5, #8
 800b450:	444c      	add	r4, r9
 800b452:	1b2d      	subs	r5, r5, r4
 800b454:	1963      	adds	r3, r4, r5
 800b456:	42bb      	cmp	r3, r7
 800b458:	db04      	blt.n	800b464 <__s2b+0x78>
 800b45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45e:	340a      	adds	r4, #10
 800b460:	2509      	movs	r5, #9
 800b462:	e7f6      	b.n	800b452 <__s2b+0x66>
 800b464:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b468:	4601      	mov	r1, r0
 800b46a:	3b30      	subs	r3, #48	@ 0x30
 800b46c:	220a      	movs	r2, #10
 800b46e:	4630      	mov	r0, r6
 800b470:	f7ff ff76 	bl	800b360 <__multadd>
 800b474:	e7ee      	b.n	800b454 <__s2b+0x68>
 800b476:	bf00      	nop
 800b478:	0800db1d 	.word	0x0800db1d
 800b47c:	0800db2e 	.word	0x0800db2e

0800b480 <__hi0bits>:
 800b480:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b484:	4603      	mov	r3, r0
 800b486:	bf36      	itet	cc
 800b488:	0403      	lslcc	r3, r0, #16
 800b48a:	2000      	movcs	r0, #0
 800b48c:	2010      	movcc	r0, #16
 800b48e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b492:	bf3c      	itt	cc
 800b494:	021b      	lslcc	r3, r3, #8
 800b496:	3008      	addcc	r0, #8
 800b498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b49c:	bf3c      	itt	cc
 800b49e:	011b      	lslcc	r3, r3, #4
 800b4a0:	3004      	addcc	r0, #4
 800b4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a6:	bf3c      	itt	cc
 800b4a8:	009b      	lslcc	r3, r3, #2
 800b4aa:	3002      	addcc	r0, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	db05      	blt.n	800b4bc <__hi0bits+0x3c>
 800b4b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4b4:	f100 0001 	add.w	r0, r0, #1
 800b4b8:	bf08      	it	eq
 800b4ba:	2020      	moveq	r0, #32
 800b4bc:	4770      	bx	lr

0800b4be <__lo0bits>:
 800b4be:	6803      	ldr	r3, [r0, #0]
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	f013 0007 	ands.w	r0, r3, #7
 800b4c6:	d00b      	beq.n	800b4e0 <__lo0bits+0x22>
 800b4c8:	07d9      	lsls	r1, r3, #31
 800b4ca:	d421      	bmi.n	800b510 <__lo0bits+0x52>
 800b4cc:	0798      	lsls	r0, r3, #30
 800b4ce:	bf49      	itett	mi
 800b4d0:	085b      	lsrmi	r3, r3, #1
 800b4d2:	089b      	lsrpl	r3, r3, #2
 800b4d4:	2001      	movmi	r0, #1
 800b4d6:	6013      	strmi	r3, [r2, #0]
 800b4d8:	bf5c      	itt	pl
 800b4da:	6013      	strpl	r3, [r2, #0]
 800b4dc:	2002      	movpl	r0, #2
 800b4de:	4770      	bx	lr
 800b4e0:	b299      	uxth	r1, r3
 800b4e2:	b909      	cbnz	r1, 800b4e8 <__lo0bits+0x2a>
 800b4e4:	0c1b      	lsrs	r3, r3, #16
 800b4e6:	2010      	movs	r0, #16
 800b4e8:	b2d9      	uxtb	r1, r3
 800b4ea:	b909      	cbnz	r1, 800b4f0 <__lo0bits+0x32>
 800b4ec:	3008      	adds	r0, #8
 800b4ee:	0a1b      	lsrs	r3, r3, #8
 800b4f0:	0719      	lsls	r1, r3, #28
 800b4f2:	bf04      	itt	eq
 800b4f4:	091b      	lsreq	r3, r3, #4
 800b4f6:	3004      	addeq	r0, #4
 800b4f8:	0799      	lsls	r1, r3, #30
 800b4fa:	bf04      	itt	eq
 800b4fc:	089b      	lsreq	r3, r3, #2
 800b4fe:	3002      	addeq	r0, #2
 800b500:	07d9      	lsls	r1, r3, #31
 800b502:	d403      	bmi.n	800b50c <__lo0bits+0x4e>
 800b504:	085b      	lsrs	r3, r3, #1
 800b506:	f100 0001 	add.w	r0, r0, #1
 800b50a:	d003      	beq.n	800b514 <__lo0bits+0x56>
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	4770      	bx	lr
 800b510:	2000      	movs	r0, #0
 800b512:	4770      	bx	lr
 800b514:	2020      	movs	r0, #32
 800b516:	4770      	bx	lr

0800b518 <__i2b>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	460c      	mov	r4, r1
 800b51c:	2101      	movs	r1, #1
 800b51e:	f7ff febd 	bl	800b29c <_Balloc>
 800b522:	4602      	mov	r2, r0
 800b524:	b928      	cbnz	r0, 800b532 <__i2b+0x1a>
 800b526:	4b05      	ldr	r3, [pc, #20]	@ (800b53c <__i2b+0x24>)
 800b528:	4805      	ldr	r0, [pc, #20]	@ (800b540 <__i2b+0x28>)
 800b52a:	f240 1145 	movw	r1, #325	@ 0x145
 800b52e:	f001 fbef 	bl	800cd10 <__assert_func>
 800b532:	2301      	movs	r3, #1
 800b534:	6144      	str	r4, [r0, #20]
 800b536:	6103      	str	r3, [r0, #16]
 800b538:	bd10      	pop	{r4, pc}
 800b53a:	bf00      	nop
 800b53c:	0800db1d 	.word	0x0800db1d
 800b540:	0800db2e 	.word	0x0800db2e

0800b544 <__multiply>:
 800b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	4614      	mov	r4, r2
 800b54a:	690a      	ldr	r2, [r1, #16]
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	429a      	cmp	r2, r3
 800b550:	bfa8      	it	ge
 800b552:	4623      	movge	r3, r4
 800b554:	460f      	mov	r7, r1
 800b556:	bfa4      	itt	ge
 800b558:	460c      	movge	r4, r1
 800b55a:	461f      	movge	r7, r3
 800b55c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b560:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b564:	68a3      	ldr	r3, [r4, #8]
 800b566:	6861      	ldr	r1, [r4, #4]
 800b568:	eb0a 0609 	add.w	r6, sl, r9
 800b56c:	42b3      	cmp	r3, r6
 800b56e:	b085      	sub	sp, #20
 800b570:	bfb8      	it	lt
 800b572:	3101      	addlt	r1, #1
 800b574:	f7ff fe92 	bl	800b29c <_Balloc>
 800b578:	b930      	cbnz	r0, 800b588 <__multiply+0x44>
 800b57a:	4602      	mov	r2, r0
 800b57c:	4b44      	ldr	r3, [pc, #272]	@ (800b690 <__multiply+0x14c>)
 800b57e:	4845      	ldr	r0, [pc, #276]	@ (800b694 <__multiply+0x150>)
 800b580:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b584:	f001 fbc4 	bl	800cd10 <__assert_func>
 800b588:	f100 0514 	add.w	r5, r0, #20
 800b58c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b590:	462b      	mov	r3, r5
 800b592:	2200      	movs	r2, #0
 800b594:	4543      	cmp	r3, r8
 800b596:	d321      	bcc.n	800b5dc <__multiply+0x98>
 800b598:	f107 0114 	add.w	r1, r7, #20
 800b59c:	f104 0214 	add.w	r2, r4, #20
 800b5a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b5a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b5a8:	9302      	str	r3, [sp, #8]
 800b5aa:	1b13      	subs	r3, r2, r4
 800b5ac:	3b15      	subs	r3, #21
 800b5ae:	f023 0303 	bic.w	r3, r3, #3
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	f104 0715 	add.w	r7, r4, #21
 800b5b8:	42ba      	cmp	r2, r7
 800b5ba:	bf38      	it	cc
 800b5bc:	2304      	movcc	r3, #4
 800b5be:	9301      	str	r3, [sp, #4]
 800b5c0:	9b02      	ldr	r3, [sp, #8]
 800b5c2:	9103      	str	r1, [sp, #12]
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	d80c      	bhi.n	800b5e2 <__multiply+0x9e>
 800b5c8:	2e00      	cmp	r6, #0
 800b5ca:	dd03      	ble.n	800b5d4 <__multiply+0x90>
 800b5cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d05b      	beq.n	800b68c <__multiply+0x148>
 800b5d4:	6106      	str	r6, [r0, #16]
 800b5d6:	b005      	add	sp, #20
 800b5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5dc:	f843 2b04 	str.w	r2, [r3], #4
 800b5e0:	e7d8      	b.n	800b594 <__multiply+0x50>
 800b5e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5e6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ea:	d024      	beq.n	800b636 <__multiply+0xf2>
 800b5ec:	f104 0e14 	add.w	lr, r4, #20
 800b5f0:	46a9      	mov	r9, r5
 800b5f2:	f04f 0c00 	mov.w	ip, #0
 800b5f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5fa:	f8d9 3000 	ldr.w	r3, [r9]
 800b5fe:	fa1f fb87 	uxth.w	fp, r7
 800b602:	b29b      	uxth	r3, r3
 800b604:	fb0a 330b 	mla	r3, sl, fp, r3
 800b608:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b60c:	f8d9 7000 	ldr.w	r7, [r9]
 800b610:	4463      	add	r3, ip
 800b612:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b616:	fb0a c70b 	mla	r7, sl, fp, ip
 800b61a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b61e:	b29b      	uxth	r3, r3
 800b620:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b624:	4572      	cmp	r2, lr
 800b626:	f849 3b04 	str.w	r3, [r9], #4
 800b62a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b62e:	d8e2      	bhi.n	800b5f6 <__multiply+0xb2>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	f845 c003 	str.w	ip, [r5, r3]
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b63c:	3104      	adds	r1, #4
 800b63e:	f1b9 0f00 	cmp.w	r9, #0
 800b642:	d021      	beq.n	800b688 <__multiply+0x144>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	f104 0c14 	add.w	ip, r4, #20
 800b64a:	46ae      	mov	lr, r5
 800b64c:	f04f 0a00 	mov.w	sl, #0
 800b650:	f8bc b000 	ldrh.w	fp, [ip]
 800b654:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b658:	fb09 770b 	mla	r7, r9, fp, r7
 800b65c:	4457      	add	r7, sl
 800b65e:	b29b      	uxth	r3, r3
 800b660:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b664:	f84e 3b04 	str.w	r3, [lr], #4
 800b668:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b66c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b670:	f8be 3000 	ldrh.w	r3, [lr]
 800b674:	fb09 330a 	mla	r3, r9, sl, r3
 800b678:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b67c:	4562      	cmp	r2, ip
 800b67e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b682:	d8e5      	bhi.n	800b650 <__multiply+0x10c>
 800b684:	9f01      	ldr	r7, [sp, #4]
 800b686:	51eb      	str	r3, [r5, r7]
 800b688:	3504      	adds	r5, #4
 800b68a:	e799      	b.n	800b5c0 <__multiply+0x7c>
 800b68c:	3e01      	subs	r6, #1
 800b68e:	e79b      	b.n	800b5c8 <__multiply+0x84>
 800b690:	0800db1d 	.word	0x0800db1d
 800b694:	0800db2e 	.word	0x0800db2e

0800b698 <__pow5mult>:
 800b698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b69c:	4615      	mov	r5, r2
 800b69e:	f012 0203 	ands.w	r2, r2, #3
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	460e      	mov	r6, r1
 800b6a6:	d007      	beq.n	800b6b8 <__pow5mult+0x20>
 800b6a8:	4c25      	ldr	r4, [pc, #148]	@ (800b740 <__pow5mult+0xa8>)
 800b6aa:	3a01      	subs	r2, #1
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6b2:	f7ff fe55 	bl	800b360 <__multadd>
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	10ad      	asrs	r5, r5, #2
 800b6ba:	d03d      	beq.n	800b738 <__pow5mult+0xa0>
 800b6bc:	69fc      	ldr	r4, [r7, #28]
 800b6be:	b97c      	cbnz	r4, 800b6e0 <__pow5mult+0x48>
 800b6c0:	2010      	movs	r0, #16
 800b6c2:	f7ff fd35 	bl	800b130 <malloc>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	61f8      	str	r0, [r7, #28]
 800b6ca:	b928      	cbnz	r0, 800b6d8 <__pow5mult+0x40>
 800b6cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b744 <__pow5mult+0xac>)
 800b6ce:	481e      	ldr	r0, [pc, #120]	@ (800b748 <__pow5mult+0xb0>)
 800b6d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6d4:	f001 fb1c 	bl	800cd10 <__assert_func>
 800b6d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6dc:	6004      	str	r4, [r0, #0]
 800b6de:	60c4      	str	r4, [r0, #12]
 800b6e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6e8:	b94c      	cbnz	r4, 800b6fe <__pow5mult+0x66>
 800b6ea:	f240 2171 	movw	r1, #625	@ 0x271
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f7ff ff12 	bl	800b518 <__i2b>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	f04f 0900 	mov.w	r9, #0
 800b702:	07eb      	lsls	r3, r5, #31
 800b704:	d50a      	bpl.n	800b71c <__pow5mult+0x84>
 800b706:	4631      	mov	r1, r6
 800b708:	4622      	mov	r2, r4
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7ff ff1a 	bl	800b544 <__multiply>
 800b710:	4631      	mov	r1, r6
 800b712:	4680      	mov	r8, r0
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff fe01 	bl	800b31c <_Bfree>
 800b71a:	4646      	mov	r6, r8
 800b71c:	106d      	asrs	r5, r5, #1
 800b71e:	d00b      	beq.n	800b738 <__pow5mult+0xa0>
 800b720:	6820      	ldr	r0, [r4, #0]
 800b722:	b938      	cbnz	r0, 800b734 <__pow5mult+0x9c>
 800b724:	4622      	mov	r2, r4
 800b726:	4621      	mov	r1, r4
 800b728:	4638      	mov	r0, r7
 800b72a:	f7ff ff0b 	bl	800b544 <__multiply>
 800b72e:	6020      	str	r0, [r4, #0]
 800b730:	f8c0 9000 	str.w	r9, [r0]
 800b734:	4604      	mov	r4, r0
 800b736:	e7e4      	b.n	800b702 <__pow5mult+0x6a>
 800b738:	4630      	mov	r0, r6
 800b73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73e:	bf00      	nop
 800b740:	0800db88 	.word	0x0800db88
 800b744:	0800daae 	.word	0x0800daae
 800b748:	0800db2e 	.word	0x0800db2e

0800b74c <__lshift>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	460c      	mov	r4, r1
 800b752:	6849      	ldr	r1, [r1, #4]
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	4607      	mov	r7, r0
 800b75e:	4691      	mov	r9, r2
 800b760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b764:	f108 0601 	add.w	r6, r8, #1
 800b768:	42b3      	cmp	r3, r6
 800b76a:	db0b      	blt.n	800b784 <__lshift+0x38>
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff fd95 	bl	800b29c <_Balloc>
 800b772:	4605      	mov	r5, r0
 800b774:	b948      	cbnz	r0, 800b78a <__lshift+0x3e>
 800b776:	4602      	mov	r2, r0
 800b778:	4b28      	ldr	r3, [pc, #160]	@ (800b81c <__lshift+0xd0>)
 800b77a:	4829      	ldr	r0, [pc, #164]	@ (800b820 <__lshift+0xd4>)
 800b77c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b780:	f001 fac6 	bl	800cd10 <__assert_func>
 800b784:	3101      	adds	r1, #1
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	e7ee      	b.n	800b768 <__lshift+0x1c>
 800b78a:	2300      	movs	r3, #0
 800b78c:	f100 0114 	add.w	r1, r0, #20
 800b790:	f100 0210 	add.w	r2, r0, #16
 800b794:	4618      	mov	r0, r3
 800b796:	4553      	cmp	r3, sl
 800b798:	db33      	blt.n	800b802 <__lshift+0xb6>
 800b79a:	6920      	ldr	r0, [r4, #16]
 800b79c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7a0:	f104 0314 	add.w	r3, r4, #20
 800b7a4:	f019 091f 	ands.w	r9, r9, #31
 800b7a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7b0:	d02b      	beq.n	800b80a <__lshift+0xbe>
 800b7b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b7b6:	468a      	mov	sl, r1
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	6818      	ldr	r0, [r3, #0]
 800b7bc:	fa00 f009 	lsl.w	r0, r0, r9
 800b7c0:	4310      	orrs	r0, r2
 800b7c2:	f84a 0b04 	str.w	r0, [sl], #4
 800b7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ca:	459c      	cmp	ip, r3
 800b7cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7d0:	d8f3      	bhi.n	800b7ba <__lshift+0x6e>
 800b7d2:	ebac 0304 	sub.w	r3, ip, r4
 800b7d6:	3b15      	subs	r3, #21
 800b7d8:	f023 0303 	bic.w	r3, r3, #3
 800b7dc:	3304      	adds	r3, #4
 800b7de:	f104 0015 	add.w	r0, r4, #21
 800b7e2:	4584      	cmp	ip, r0
 800b7e4:	bf38      	it	cc
 800b7e6:	2304      	movcc	r3, #4
 800b7e8:	50ca      	str	r2, [r1, r3]
 800b7ea:	b10a      	cbz	r2, 800b7f0 <__lshift+0xa4>
 800b7ec:	f108 0602 	add.w	r6, r8, #2
 800b7f0:	3e01      	subs	r6, #1
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	612e      	str	r6, [r5, #16]
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	f7ff fd90 	bl	800b31c <_Bfree>
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b802:	f842 0f04 	str.w	r0, [r2, #4]!
 800b806:	3301      	adds	r3, #1
 800b808:	e7c5      	b.n	800b796 <__lshift+0x4a>
 800b80a:	3904      	subs	r1, #4
 800b80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b810:	f841 2f04 	str.w	r2, [r1, #4]!
 800b814:	459c      	cmp	ip, r3
 800b816:	d8f9      	bhi.n	800b80c <__lshift+0xc0>
 800b818:	e7ea      	b.n	800b7f0 <__lshift+0xa4>
 800b81a:	bf00      	nop
 800b81c:	0800db1d 	.word	0x0800db1d
 800b820:	0800db2e 	.word	0x0800db2e

0800b824 <__mcmp>:
 800b824:	690a      	ldr	r2, [r1, #16]
 800b826:	4603      	mov	r3, r0
 800b828:	6900      	ldr	r0, [r0, #16]
 800b82a:	1a80      	subs	r0, r0, r2
 800b82c:	b530      	push	{r4, r5, lr}
 800b82e:	d10e      	bne.n	800b84e <__mcmp+0x2a>
 800b830:	3314      	adds	r3, #20
 800b832:	3114      	adds	r1, #20
 800b834:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b838:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b83c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b840:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b844:	4295      	cmp	r5, r2
 800b846:	d003      	beq.n	800b850 <__mcmp+0x2c>
 800b848:	d205      	bcs.n	800b856 <__mcmp+0x32>
 800b84a:	f04f 30ff 	mov.w	r0, #4294967295
 800b84e:	bd30      	pop	{r4, r5, pc}
 800b850:	42a3      	cmp	r3, r4
 800b852:	d3f3      	bcc.n	800b83c <__mcmp+0x18>
 800b854:	e7fb      	b.n	800b84e <__mcmp+0x2a>
 800b856:	2001      	movs	r0, #1
 800b858:	e7f9      	b.n	800b84e <__mcmp+0x2a>
	...

0800b85c <__mdiff>:
 800b85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	4689      	mov	r9, r1
 800b862:	4606      	mov	r6, r0
 800b864:	4611      	mov	r1, r2
 800b866:	4648      	mov	r0, r9
 800b868:	4614      	mov	r4, r2
 800b86a:	f7ff ffdb 	bl	800b824 <__mcmp>
 800b86e:	1e05      	subs	r5, r0, #0
 800b870:	d112      	bne.n	800b898 <__mdiff+0x3c>
 800b872:	4629      	mov	r1, r5
 800b874:	4630      	mov	r0, r6
 800b876:	f7ff fd11 	bl	800b29c <_Balloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__mdiff+0x2e>
 800b87e:	4b3f      	ldr	r3, [pc, #252]	@ (800b97c <__mdiff+0x120>)
 800b880:	f240 2137 	movw	r1, #567	@ 0x237
 800b884:	483e      	ldr	r0, [pc, #248]	@ (800b980 <__mdiff+0x124>)
 800b886:	f001 fa43 	bl	800cd10 <__assert_func>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b890:	4610      	mov	r0, r2
 800b892:	b003      	add	sp, #12
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	bfbc      	itt	lt
 800b89a:	464b      	movlt	r3, r9
 800b89c:	46a1      	movlt	r9, r4
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8a4:	bfba      	itte	lt
 800b8a6:	461c      	movlt	r4, r3
 800b8a8:	2501      	movlt	r5, #1
 800b8aa:	2500      	movge	r5, #0
 800b8ac:	f7ff fcf6 	bl	800b29c <_Balloc>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	b918      	cbnz	r0, 800b8bc <__mdiff+0x60>
 800b8b4:	4b31      	ldr	r3, [pc, #196]	@ (800b97c <__mdiff+0x120>)
 800b8b6:	f240 2145 	movw	r1, #581	@ 0x245
 800b8ba:	e7e3      	b.n	800b884 <__mdiff+0x28>
 800b8bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8c0:	6926      	ldr	r6, [r4, #16]
 800b8c2:	60c5      	str	r5, [r0, #12]
 800b8c4:	f109 0310 	add.w	r3, r9, #16
 800b8c8:	f109 0514 	add.w	r5, r9, #20
 800b8cc:	f104 0e14 	add.w	lr, r4, #20
 800b8d0:	f100 0b14 	add.w	fp, r0, #20
 800b8d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	46d9      	mov	r9, fp
 800b8e0:	f04f 0c00 	mov.w	ip, #0
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	fa1f f38a 	uxth.w	r3, sl
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	b283      	uxth	r3, r0
 800b8f8:	1acb      	subs	r3, r1, r3
 800b8fa:	0c00      	lsrs	r0, r0, #16
 800b8fc:	4463      	add	r3, ip
 800b8fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b902:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b906:	b29b      	uxth	r3, r3
 800b908:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b90c:	4576      	cmp	r6, lr
 800b90e:	f849 3b04 	str.w	r3, [r9], #4
 800b912:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b916:	d8e5      	bhi.n	800b8e4 <__mdiff+0x88>
 800b918:	1b33      	subs	r3, r6, r4
 800b91a:	3b15      	subs	r3, #21
 800b91c:	f023 0303 	bic.w	r3, r3, #3
 800b920:	3415      	adds	r4, #21
 800b922:	3304      	adds	r3, #4
 800b924:	42a6      	cmp	r6, r4
 800b926:	bf38      	it	cc
 800b928:	2304      	movcc	r3, #4
 800b92a:	441d      	add	r5, r3
 800b92c:	445b      	add	r3, fp
 800b92e:	461e      	mov	r6, r3
 800b930:	462c      	mov	r4, r5
 800b932:	4544      	cmp	r4, r8
 800b934:	d30e      	bcc.n	800b954 <__mdiff+0xf8>
 800b936:	f108 0103 	add.w	r1, r8, #3
 800b93a:	1b49      	subs	r1, r1, r5
 800b93c:	f021 0103 	bic.w	r1, r1, #3
 800b940:	3d03      	subs	r5, #3
 800b942:	45a8      	cmp	r8, r5
 800b944:	bf38      	it	cc
 800b946:	2100      	movcc	r1, #0
 800b948:	440b      	add	r3, r1
 800b94a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b94e:	b191      	cbz	r1, 800b976 <__mdiff+0x11a>
 800b950:	6117      	str	r7, [r2, #16]
 800b952:	e79d      	b.n	800b890 <__mdiff+0x34>
 800b954:	f854 1b04 	ldr.w	r1, [r4], #4
 800b958:	46e6      	mov	lr, ip
 800b95a:	0c08      	lsrs	r0, r1, #16
 800b95c:	fa1c fc81 	uxtah	ip, ip, r1
 800b960:	4471      	add	r1, lr
 800b962:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b966:	b289      	uxth	r1, r1
 800b968:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b96c:	f846 1b04 	str.w	r1, [r6], #4
 800b970:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b974:	e7dd      	b.n	800b932 <__mdiff+0xd6>
 800b976:	3f01      	subs	r7, #1
 800b978:	e7e7      	b.n	800b94a <__mdiff+0xee>
 800b97a:	bf00      	nop
 800b97c:	0800db1d 	.word	0x0800db1d
 800b980:	0800db2e 	.word	0x0800db2e

0800b984 <__ulp>:
 800b984:	b082      	sub	sp, #8
 800b986:	ed8d 0b00 	vstr	d0, [sp]
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	4b0f      	ldr	r3, [pc, #60]	@ (800b9cc <__ulp+0x48>)
 800b98e:	4013      	ands	r3, r2
 800b990:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b994:	2b00      	cmp	r3, #0
 800b996:	dc08      	bgt.n	800b9aa <__ulp+0x26>
 800b998:	425b      	negs	r3, r3
 800b99a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b99e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b9a2:	da04      	bge.n	800b9ae <__ulp+0x2a>
 800b9a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b9a8:	4113      	asrs	r3, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	e008      	b.n	800b9c0 <__ulp+0x3c>
 800b9ae:	f1a2 0314 	sub.w	r3, r2, #20
 800b9b2:	2b1e      	cmp	r3, #30
 800b9b4:	bfda      	itte	le
 800b9b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b9ba:	40da      	lsrle	r2, r3
 800b9bc:	2201      	movgt	r2, #1
 800b9be:	2300      	movs	r3, #0
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	ec41 0b10 	vmov	d0, r0, r1
 800b9c8:	b002      	add	sp, #8
 800b9ca:	4770      	bx	lr
 800b9cc:	7ff00000 	.word	0x7ff00000

0800b9d0 <__b2d>:
 800b9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d4:	6906      	ldr	r6, [r0, #16]
 800b9d6:	f100 0814 	add.w	r8, r0, #20
 800b9da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b9de:	1f37      	subs	r7, r6, #4
 800b9e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7ff fd4b 	bl	800b480 <__hi0bits>
 800b9ea:	f1c0 0320 	rsb	r3, r0, #32
 800b9ee:	280a      	cmp	r0, #10
 800b9f0:	600b      	str	r3, [r1, #0]
 800b9f2:	491b      	ldr	r1, [pc, #108]	@ (800ba60 <__b2d+0x90>)
 800b9f4:	dc15      	bgt.n	800ba22 <__b2d+0x52>
 800b9f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b9fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800b9fe:	45b8      	cmp	r8, r7
 800ba00:	ea43 0501 	orr.w	r5, r3, r1
 800ba04:	bf34      	ite	cc
 800ba06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba0a:	2300      	movcs	r3, #0
 800ba0c:	3015      	adds	r0, #21
 800ba0e:	fa02 f000 	lsl.w	r0, r2, r0
 800ba12:	fa23 f30c 	lsr.w	r3, r3, ip
 800ba16:	4303      	orrs	r3, r0
 800ba18:	461c      	mov	r4, r3
 800ba1a:	ec45 4b10 	vmov	d0, r4, r5
 800ba1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba22:	45b8      	cmp	r8, r7
 800ba24:	bf3a      	itte	cc
 800ba26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba2a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ba2e:	2300      	movcs	r3, #0
 800ba30:	380b      	subs	r0, #11
 800ba32:	d012      	beq.n	800ba5a <__b2d+0x8a>
 800ba34:	f1c0 0120 	rsb	r1, r0, #32
 800ba38:	fa23 f401 	lsr.w	r4, r3, r1
 800ba3c:	4082      	lsls	r2, r0
 800ba3e:	4322      	orrs	r2, r4
 800ba40:	4547      	cmp	r7, r8
 800ba42:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ba46:	bf8c      	ite	hi
 800ba48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ba4c:	2200      	movls	r2, #0
 800ba4e:	4083      	lsls	r3, r0
 800ba50:	40ca      	lsrs	r2, r1
 800ba52:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ba56:	4313      	orrs	r3, r2
 800ba58:	e7de      	b.n	800ba18 <__b2d+0x48>
 800ba5a:	ea42 0501 	orr.w	r5, r2, r1
 800ba5e:	e7db      	b.n	800ba18 <__b2d+0x48>
 800ba60:	3ff00000 	.word	0x3ff00000

0800ba64 <__d2b>:
 800ba64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba68:	460f      	mov	r7, r1
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	ec59 8b10 	vmov	r8, r9, d0
 800ba70:	4616      	mov	r6, r2
 800ba72:	f7ff fc13 	bl	800b29c <_Balloc>
 800ba76:	4604      	mov	r4, r0
 800ba78:	b930      	cbnz	r0, 800ba88 <__d2b+0x24>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	4b23      	ldr	r3, [pc, #140]	@ (800bb0c <__d2b+0xa8>)
 800ba7e:	4824      	ldr	r0, [pc, #144]	@ (800bb10 <__d2b+0xac>)
 800ba80:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba84:	f001 f944 	bl	800cd10 <__assert_func>
 800ba88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba90:	b10d      	cbz	r5, 800ba96 <__d2b+0x32>
 800ba92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba96:	9301      	str	r3, [sp, #4]
 800ba98:	f1b8 0300 	subs.w	r3, r8, #0
 800ba9c:	d023      	beq.n	800bae6 <__d2b+0x82>
 800ba9e:	4668      	mov	r0, sp
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	f7ff fd0c 	bl	800b4be <__lo0bits>
 800baa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800baaa:	b1d0      	cbz	r0, 800bae2 <__d2b+0x7e>
 800baac:	f1c0 0320 	rsb	r3, r0, #32
 800bab0:	fa02 f303 	lsl.w	r3, r2, r3
 800bab4:	430b      	orrs	r3, r1
 800bab6:	40c2      	lsrs	r2, r0
 800bab8:	6163      	str	r3, [r4, #20]
 800baba:	9201      	str	r2, [sp, #4]
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	61a3      	str	r3, [r4, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	bf0c      	ite	eq
 800bac4:	2201      	moveq	r2, #1
 800bac6:	2202      	movne	r2, #2
 800bac8:	6122      	str	r2, [r4, #16]
 800baca:	b1a5      	cbz	r5, 800baf6 <__d2b+0x92>
 800bacc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bad0:	4405      	add	r5, r0
 800bad2:	603d      	str	r5, [r7, #0]
 800bad4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bad8:	6030      	str	r0, [r6, #0]
 800bada:	4620      	mov	r0, r4
 800badc:	b003      	add	sp, #12
 800bade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bae2:	6161      	str	r1, [r4, #20]
 800bae4:	e7ea      	b.n	800babc <__d2b+0x58>
 800bae6:	a801      	add	r0, sp, #4
 800bae8:	f7ff fce9 	bl	800b4be <__lo0bits>
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	6163      	str	r3, [r4, #20]
 800baf0:	3020      	adds	r0, #32
 800baf2:	2201      	movs	r2, #1
 800baf4:	e7e8      	b.n	800bac8 <__d2b+0x64>
 800baf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bafa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bafe:	6038      	str	r0, [r7, #0]
 800bb00:	6918      	ldr	r0, [r3, #16]
 800bb02:	f7ff fcbd 	bl	800b480 <__hi0bits>
 800bb06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb0a:	e7e5      	b.n	800bad8 <__d2b+0x74>
 800bb0c:	0800db1d 	.word	0x0800db1d
 800bb10:	0800db2e 	.word	0x0800db2e

0800bb14 <__ratio>:
 800bb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	4688      	mov	r8, r1
 800bb1a:	4669      	mov	r1, sp
 800bb1c:	4681      	mov	r9, r0
 800bb1e:	f7ff ff57 	bl	800b9d0 <__b2d>
 800bb22:	a901      	add	r1, sp, #4
 800bb24:	4640      	mov	r0, r8
 800bb26:	ec55 4b10 	vmov	r4, r5, d0
 800bb2a:	f7ff ff51 	bl	800b9d0 <__b2d>
 800bb2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bb32:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bb36:	1ad2      	subs	r2, r2, r3
 800bb38:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bb3c:	1a5b      	subs	r3, r3, r1
 800bb3e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bb42:	ec57 6b10 	vmov	r6, r7, d0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfd6      	itet	le
 800bb4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb4e:	462a      	movgt	r2, r5
 800bb50:	463a      	movle	r2, r7
 800bb52:	46ab      	mov	fp, r5
 800bb54:	46a2      	mov	sl, r4
 800bb56:	bfce      	itee	gt
 800bb58:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bb5c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bb60:	ee00 3a90 	vmovle	s1, r3
 800bb64:	ec4b ab17 	vmov	d7, sl, fp
 800bb68:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bb6c:	b003      	add	sp, #12
 800bb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb72 <__copybits>:
 800bb72:	3901      	subs	r1, #1
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	1149      	asrs	r1, r1, #5
 800bb78:	6914      	ldr	r4, [r2, #16]
 800bb7a:	3101      	adds	r1, #1
 800bb7c:	f102 0314 	add.w	r3, r2, #20
 800bb80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb88:	1f05      	subs	r5, r0, #4
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	d30c      	bcc.n	800bba8 <__copybits+0x36>
 800bb8e:	1aa3      	subs	r3, r4, r2
 800bb90:	3b11      	subs	r3, #17
 800bb92:	f023 0303 	bic.w	r3, r3, #3
 800bb96:	3211      	adds	r2, #17
 800bb98:	42a2      	cmp	r2, r4
 800bb9a:	bf88      	it	hi
 800bb9c:	2300      	movhi	r3, #0
 800bb9e:	4418      	add	r0, r3
 800bba0:	2300      	movs	r3, #0
 800bba2:	4288      	cmp	r0, r1
 800bba4:	d305      	bcc.n	800bbb2 <__copybits+0x40>
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	f853 6b04 	ldr.w	r6, [r3], #4
 800bbac:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbb0:	e7eb      	b.n	800bb8a <__copybits+0x18>
 800bbb2:	f840 3b04 	str.w	r3, [r0], #4
 800bbb6:	e7f4      	b.n	800bba2 <__copybits+0x30>

0800bbb8 <__any_on>:
 800bbb8:	f100 0214 	add.w	r2, r0, #20
 800bbbc:	6900      	ldr	r0, [r0, #16]
 800bbbe:	114b      	asrs	r3, r1, #5
 800bbc0:	4298      	cmp	r0, r3
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	db11      	blt.n	800bbea <__any_on+0x32>
 800bbc6:	dd0a      	ble.n	800bbde <__any_on+0x26>
 800bbc8:	f011 011f 	ands.w	r1, r1, #31
 800bbcc:	d007      	beq.n	800bbde <__any_on+0x26>
 800bbce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbd2:	fa24 f001 	lsr.w	r0, r4, r1
 800bbd6:	fa00 f101 	lsl.w	r1, r0, r1
 800bbda:	428c      	cmp	r4, r1
 800bbdc:	d10b      	bne.n	800bbf6 <__any_on+0x3e>
 800bbde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d803      	bhi.n	800bbee <__any_on+0x36>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	bd10      	pop	{r4, pc}
 800bbea:	4603      	mov	r3, r0
 800bbec:	e7f7      	b.n	800bbde <__any_on+0x26>
 800bbee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	d0f5      	beq.n	800bbe2 <__any_on+0x2a>
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	e7f6      	b.n	800bbe8 <__any_on+0x30>

0800bbfa <sulp>:
 800bbfa:	b570      	push	{r4, r5, r6, lr}
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	4616      	mov	r6, r2
 800bc02:	ec45 4b10 	vmov	d0, r4, r5
 800bc06:	f7ff febd 	bl	800b984 <__ulp>
 800bc0a:	b17e      	cbz	r6, 800bc2c <sulp+0x32>
 800bc0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dd09      	ble.n	800bc2c <sulp+0x32>
 800bc18:	051b      	lsls	r3, r3, #20
 800bc1a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800bc1e:	2000      	movs	r0, #0
 800bc20:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800bc24:	ec41 0b17 	vmov	d7, r0, r1
 800bc28:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bc2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc30 <_strtod_l>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	ed2d 8b0a 	vpush	{d8-d12}
 800bc38:	b097      	sub	sp, #92	@ 0x5c
 800bc3a:	4688      	mov	r8, r1
 800bc3c:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc3e:	2200      	movs	r2, #0
 800bc40:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc42:	9005      	str	r0, [sp, #20]
 800bc44:	f04f 0a00 	mov.w	sl, #0
 800bc48:	f04f 0b00 	mov.w	fp, #0
 800bc4c:	460a      	mov	r2, r1
 800bc4e:	9211      	str	r2, [sp, #68]	@ 0x44
 800bc50:	7811      	ldrb	r1, [r2, #0]
 800bc52:	292b      	cmp	r1, #43	@ 0x2b
 800bc54:	d04c      	beq.n	800bcf0 <_strtod_l+0xc0>
 800bc56:	d839      	bhi.n	800bccc <_strtod_l+0x9c>
 800bc58:	290d      	cmp	r1, #13
 800bc5a:	d833      	bhi.n	800bcc4 <_strtod_l+0x94>
 800bc5c:	2908      	cmp	r1, #8
 800bc5e:	d833      	bhi.n	800bcc8 <_strtod_l+0x98>
 800bc60:	2900      	cmp	r1, #0
 800bc62:	d03c      	beq.n	800bcde <_strtod_l+0xae>
 800bc64:	2200      	movs	r2, #0
 800bc66:	9208      	str	r2, [sp, #32]
 800bc68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800bc6a:	782a      	ldrb	r2, [r5, #0]
 800bc6c:	2a30      	cmp	r2, #48	@ 0x30
 800bc6e:	f040 80b5 	bne.w	800bddc <_strtod_l+0x1ac>
 800bc72:	786a      	ldrb	r2, [r5, #1]
 800bc74:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc78:	2a58      	cmp	r2, #88	@ 0x58
 800bc7a:	d170      	bne.n	800bd5e <_strtod_l+0x12e>
 800bc7c:	9302      	str	r3, [sp, #8]
 800bc7e:	9b08      	ldr	r3, [sp, #32]
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	ab12      	add	r3, sp, #72	@ 0x48
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	4a8b      	ldr	r2, [pc, #556]	@ (800beb4 <_strtod_l+0x284>)
 800bc88:	9805      	ldr	r0, [sp, #20]
 800bc8a:	ab13      	add	r3, sp, #76	@ 0x4c
 800bc8c:	a911      	add	r1, sp, #68	@ 0x44
 800bc8e:	f001 f8d9 	bl	800ce44 <__gethex>
 800bc92:	f010 060f 	ands.w	r6, r0, #15
 800bc96:	4604      	mov	r4, r0
 800bc98:	d005      	beq.n	800bca6 <_strtod_l+0x76>
 800bc9a:	2e06      	cmp	r6, #6
 800bc9c:	d12a      	bne.n	800bcf4 <_strtod_l+0xc4>
 800bc9e:	3501      	adds	r5, #1
 800bca0:	2300      	movs	r3, #0
 800bca2:	9511      	str	r5, [sp, #68]	@ 0x44
 800bca4:	9308      	str	r3, [sp, #32]
 800bca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f040 852f 	bne.w	800c70c <_strtod_l+0xadc>
 800bcae:	9b08      	ldr	r3, [sp, #32]
 800bcb0:	ec4b ab10 	vmov	d0, sl, fp
 800bcb4:	b1cb      	cbz	r3, 800bcea <_strtod_l+0xba>
 800bcb6:	eeb1 0b40 	vneg.f64	d0, d0
 800bcba:	b017      	add	sp, #92	@ 0x5c
 800bcbc:	ecbd 8b0a 	vpop	{d8-d12}
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	2920      	cmp	r1, #32
 800bcc6:	d1cd      	bne.n	800bc64 <_strtod_l+0x34>
 800bcc8:	3201      	adds	r2, #1
 800bcca:	e7c0      	b.n	800bc4e <_strtod_l+0x1e>
 800bccc:	292d      	cmp	r1, #45	@ 0x2d
 800bcce:	d1c9      	bne.n	800bc64 <_strtod_l+0x34>
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	9108      	str	r1, [sp, #32]
 800bcd4:	1c51      	adds	r1, r2, #1
 800bcd6:	9111      	str	r1, [sp, #68]	@ 0x44
 800bcd8:	7852      	ldrb	r2, [r2, #1]
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	d1c4      	bne.n	800bc68 <_strtod_l+0x38>
 800bcde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f040 850f 	bne.w	800c708 <_strtod_l+0xad8>
 800bcea:	ec4b ab10 	vmov	d0, sl, fp
 800bcee:	e7e4      	b.n	800bcba <_strtod_l+0x8a>
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	e7ee      	b.n	800bcd2 <_strtod_l+0xa2>
 800bcf4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bcf6:	b13a      	cbz	r2, 800bd08 <_strtod_l+0xd8>
 800bcf8:	2135      	movs	r1, #53	@ 0x35
 800bcfa:	a814      	add	r0, sp, #80	@ 0x50
 800bcfc:	f7ff ff39 	bl	800bb72 <__copybits>
 800bd00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd02:	9805      	ldr	r0, [sp, #20]
 800bd04:	f7ff fb0a 	bl	800b31c <_Bfree>
 800bd08:	1e73      	subs	r3, r6, #1
 800bd0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd0c:	2b04      	cmp	r3, #4
 800bd0e:	d806      	bhi.n	800bd1e <_strtod_l+0xee>
 800bd10:	e8df f003 	tbb	[pc, r3]
 800bd14:	201d0314 	.word	0x201d0314
 800bd18:	14          	.byte	0x14
 800bd19:	00          	.byte	0x00
 800bd1a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800bd1e:	05e3      	lsls	r3, r4, #23
 800bd20:	bf48      	it	mi
 800bd22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bd26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd2a:	0d1b      	lsrs	r3, r3, #20
 800bd2c:	051b      	lsls	r3, r3, #20
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1b9      	bne.n	800bca6 <_strtod_l+0x76>
 800bd32:	f7fe fba1 	bl	800a478 <__errno>
 800bd36:	2322      	movs	r3, #34	@ 0x22
 800bd38:	6003      	str	r3, [r0, #0]
 800bd3a:	e7b4      	b.n	800bca6 <_strtod_l+0x76>
 800bd3c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800bd40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bd48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bd4c:	e7e7      	b.n	800bd1e <_strtod_l+0xee>
 800bd4e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800bebc <_strtod_l+0x28c>
 800bd52:	e7e4      	b.n	800bd1e <_strtod_l+0xee>
 800bd54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bd58:	f04f 3aff 	mov.w	sl, #4294967295
 800bd5c:	e7df      	b.n	800bd1e <_strtod_l+0xee>
 800bd5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	9211      	str	r2, [sp, #68]	@ 0x44
 800bd64:	785b      	ldrb	r3, [r3, #1]
 800bd66:	2b30      	cmp	r3, #48	@ 0x30
 800bd68:	d0f9      	beq.n	800bd5e <_strtod_l+0x12e>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d09b      	beq.n	800bca6 <_strtod_l+0x76>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	2600      	movs	r6, #0
 800bd72:	9307      	str	r3, [sp, #28]
 800bd74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd78:	46b1      	mov	r9, r6
 800bd7a:	4635      	mov	r5, r6
 800bd7c:	220a      	movs	r2, #10
 800bd7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800bd80:	7804      	ldrb	r4, [r0, #0]
 800bd82:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800bd86:	b2d9      	uxtb	r1, r3
 800bd88:	2909      	cmp	r1, #9
 800bd8a:	d929      	bls.n	800bde0 <_strtod_l+0x1b0>
 800bd8c:	494a      	ldr	r1, [pc, #296]	@ (800beb8 <_strtod_l+0x288>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f000 ff84 	bl	800cc9c <strncmp>
 800bd94:	b378      	cbz	r0, 800bdf6 <_strtod_l+0x1c6>
 800bd96:	2000      	movs	r0, #0
 800bd98:	4622      	mov	r2, r4
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	9006      	str	r0, [sp, #24]
 800bda0:	2a65      	cmp	r2, #101	@ 0x65
 800bda2:	d001      	beq.n	800bda8 <_strtod_l+0x178>
 800bda4:	2a45      	cmp	r2, #69	@ 0x45
 800bda6:	d117      	bne.n	800bdd8 <_strtod_l+0x1a8>
 800bda8:	b91b      	cbnz	r3, 800bdb2 <_strtod_l+0x182>
 800bdaa:	9b07      	ldr	r3, [sp, #28]
 800bdac:	4303      	orrs	r3, r0
 800bdae:	d096      	beq.n	800bcde <_strtod_l+0xae>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800bdb6:	f108 0201 	add.w	r2, r8, #1
 800bdba:	9211      	str	r2, [sp, #68]	@ 0x44
 800bdbc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bdc0:	2a2b      	cmp	r2, #43	@ 0x2b
 800bdc2:	d06b      	beq.n	800be9c <_strtod_l+0x26c>
 800bdc4:	2a2d      	cmp	r2, #45	@ 0x2d
 800bdc6:	d071      	beq.n	800beac <_strtod_l+0x27c>
 800bdc8:	f04f 0e00 	mov.w	lr, #0
 800bdcc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bdd0:	2c09      	cmp	r4, #9
 800bdd2:	d979      	bls.n	800bec8 <_strtod_l+0x298>
 800bdd4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bdd8:	2400      	movs	r4, #0
 800bdda:	e094      	b.n	800bf06 <_strtod_l+0x2d6>
 800bddc:	2300      	movs	r3, #0
 800bdde:	e7c7      	b.n	800bd70 <_strtod_l+0x140>
 800bde0:	2d08      	cmp	r5, #8
 800bde2:	f100 0001 	add.w	r0, r0, #1
 800bde6:	bfd4      	ite	le
 800bde8:	fb02 3909 	mlale	r9, r2, r9, r3
 800bdec:	fb02 3606 	mlagt	r6, r2, r6, r3
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	9011      	str	r0, [sp, #68]	@ 0x44
 800bdf4:	e7c3      	b.n	800bd7e <_strtod_l+0x14e>
 800bdf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdf8:	1c5a      	adds	r2, r3, #1
 800bdfa:	9211      	str	r2, [sp, #68]	@ 0x44
 800bdfc:	785a      	ldrb	r2, [r3, #1]
 800bdfe:	b375      	cbz	r5, 800be5e <_strtod_l+0x22e>
 800be00:	4607      	mov	r7, r0
 800be02:	462b      	mov	r3, r5
 800be04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800be08:	2909      	cmp	r1, #9
 800be0a:	d913      	bls.n	800be34 <_strtod_l+0x204>
 800be0c:	2101      	movs	r1, #1
 800be0e:	9106      	str	r1, [sp, #24]
 800be10:	e7c6      	b.n	800bda0 <_strtod_l+0x170>
 800be12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	9211      	str	r2, [sp, #68]	@ 0x44
 800be18:	785a      	ldrb	r2, [r3, #1]
 800be1a:	3001      	adds	r0, #1
 800be1c:	2a30      	cmp	r2, #48	@ 0x30
 800be1e:	d0f8      	beq.n	800be12 <_strtod_l+0x1e2>
 800be20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800be24:	2b08      	cmp	r3, #8
 800be26:	f200 8476 	bhi.w	800c716 <_strtod_l+0xae6>
 800be2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be2e:	4607      	mov	r7, r0
 800be30:	2000      	movs	r0, #0
 800be32:	4603      	mov	r3, r0
 800be34:	3a30      	subs	r2, #48	@ 0x30
 800be36:	f100 0101 	add.w	r1, r0, #1
 800be3a:	d023      	beq.n	800be84 <_strtod_l+0x254>
 800be3c:	440f      	add	r7, r1
 800be3e:	eb00 0c03 	add.w	ip, r0, r3
 800be42:	4619      	mov	r1, r3
 800be44:	240a      	movs	r4, #10
 800be46:	4561      	cmp	r1, ip
 800be48:	d10b      	bne.n	800be62 <_strtod_l+0x232>
 800be4a:	1c5c      	adds	r4, r3, #1
 800be4c:	4403      	add	r3, r0
 800be4e:	2b08      	cmp	r3, #8
 800be50:	4404      	add	r4, r0
 800be52:	dc11      	bgt.n	800be78 <_strtod_l+0x248>
 800be54:	230a      	movs	r3, #10
 800be56:	fb03 2909 	mla	r9, r3, r9, r2
 800be5a:	2100      	movs	r1, #0
 800be5c:	e013      	b.n	800be86 <_strtod_l+0x256>
 800be5e:	4628      	mov	r0, r5
 800be60:	e7dc      	b.n	800be1c <_strtod_l+0x1ec>
 800be62:	2908      	cmp	r1, #8
 800be64:	f101 0101 	add.w	r1, r1, #1
 800be68:	dc02      	bgt.n	800be70 <_strtod_l+0x240>
 800be6a:	fb04 f909 	mul.w	r9, r4, r9
 800be6e:	e7ea      	b.n	800be46 <_strtod_l+0x216>
 800be70:	2910      	cmp	r1, #16
 800be72:	bfd8      	it	le
 800be74:	4366      	mulle	r6, r4
 800be76:	e7e6      	b.n	800be46 <_strtod_l+0x216>
 800be78:	2b0f      	cmp	r3, #15
 800be7a:	dcee      	bgt.n	800be5a <_strtod_l+0x22a>
 800be7c:	230a      	movs	r3, #10
 800be7e:	fb03 2606 	mla	r6, r3, r6, r2
 800be82:	e7ea      	b.n	800be5a <_strtod_l+0x22a>
 800be84:	461c      	mov	r4, r3
 800be86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	9211      	str	r2, [sp, #68]	@ 0x44
 800be8c:	785a      	ldrb	r2, [r3, #1]
 800be8e:	4608      	mov	r0, r1
 800be90:	4623      	mov	r3, r4
 800be92:	e7b7      	b.n	800be04 <_strtod_l+0x1d4>
 800be94:	2301      	movs	r3, #1
 800be96:	2700      	movs	r7, #0
 800be98:	9306      	str	r3, [sp, #24]
 800be9a:	e786      	b.n	800bdaa <_strtod_l+0x17a>
 800be9c:	f04f 0e00 	mov.w	lr, #0
 800bea0:	f108 0202 	add.w	r2, r8, #2
 800bea4:	9211      	str	r2, [sp, #68]	@ 0x44
 800bea6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800beaa:	e78f      	b.n	800bdcc <_strtod_l+0x19c>
 800beac:	f04f 0e01 	mov.w	lr, #1
 800beb0:	e7f6      	b.n	800bea0 <_strtod_l+0x270>
 800beb2:	bf00      	nop
 800beb4:	0800dca0 	.word	0x0800dca0
 800beb8:	0800dc88 	.word	0x0800dc88
 800bebc:	7ff00000 	.word	0x7ff00000
 800bec0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bec2:	1c54      	adds	r4, r2, #1
 800bec4:	9411      	str	r4, [sp, #68]	@ 0x44
 800bec6:	7852      	ldrb	r2, [r2, #1]
 800bec8:	2a30      	cmp	r2, #48	@ 0x30
 800beca:	d0f9      	beq.n	800bec0 <_strtod_l+0x290>
 800becc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800bed0:	2c08      	cmp	r4, #8
 800bed2:	d881      	bhi.n	800bdd8 <_strtod_l+0x1a8>
 800bed4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800bed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800beda:	9209      	str	r2, [sp, #36]	@ 0x24
 800bedc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bede:	1c51      	adds	r1, r2, #1
 800bee0:	9111      	str	r1, [sp, #68]	@ 0x44
 800bee2:	7852      	ldrb	r2, [r2, #1]
 800bee4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bee8:	2c09      	cmp	r4, #9
 800beea:	d938      	bls.n	800bf5e <_strtod_l+0x32e>
 800beec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800beee:	1b0c      	subs	r4, r1, r4
 800bef0:	2c08      	cmp	r4, #8
 800bef2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800bef6:	dc02      	bgt.n	800befe <_strtod_l+0x2ce>
 800bef8:	4564      	cmp	r4, ip
 800befa:	bfa8      	it	ge
 800befc:	4664      	movge	r4, ip
 800befe:	f1be 0f00 	cmp.w	lr, #0
 800bf02:	d000      	beq.n	800bf06 <_strtod_l+0x2d6>
 800bf04:	4264      	negs	r4, r4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d14e      	bne.n	800bfa8 <_strtod_l+0x378>
 800bf0a:	9b07      	ldr	r3, [sp, #28]
 800bf0c:	4318      	orrs	r0, r3
 800bf0e:	f47f aeca 	bne.w	800bca6 <_strtod_l+0x76>
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f47f aee2 	bne.w	800bcde <_strtod_l+0xae>
 800bf1a:	2a69      	cmp	r2, #105	@ 0x69
 800bf1c:	d027      	beq.n	800bf6e <_strtod_l+0x33e>
 800bf1e:	dc24      	bgt.n	800bf6a <_strtod_l+0x33a>
 800bf20:	2a49      	cmp	r2, #73	@ 0x49
 800bf22:	d024      	beq.n	800bf6e <_strtod_l+0x33e>
 800bf24:	2a4e      	cmp	r2, #78	@ 0x4e
 800bf26:	f47f aeda 	bne.w	800bcde <_strtod_l+0xae>
 800bf2a:	4997      	ldr	r1, [pc, #604]	@ (800c188 <_strtod_l+0x558>)
 800bf2c:	a811      	add	r0, sp, #68	@ 0x44
 800bf2e:	f001 f9ab 	bl	800d288 <__match>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f43f aed3 	beq.w	800bcde <_strtod_l+0xae>
 800bf38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b28      	cmp	r3, #40	@ 0x28
 800bf3e:	d12d      	bne.n	800bf9c <_strtod_l+0x36c>
 800bf40:	4992      	ldr	r1, [pc, #584]	@ (800c18c <_strtod_l+0x55c>)
 800bf42:	aa14      	add	r2, sp, #80	@ 0x50
 800bf44:	a811      	add	r0, sp, #68	@ 0x44
 800bf46:	f001 f9b3 	bl	800d2b0 <__hexnan>
 800bf4a:	2805      	cmp	r0, #5
 800bf4c:	d126      	bne.n	800bf9c <_strtod_l+0x36c>
 800bf4e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf50:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800bf54:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bf58:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bf5c:	e6a3      	b.n	800bca6 <_strtod_l+0x76>
 800bf5e:	240a      	movs	r4, #10
 800bf60:	fb04 2c0c 	mla	ip, r4, ip, r2
 800bf64:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800bf68:	e7b8      	b.n	800bedc <_strtod_l+0x2ac>
 800bf6a:	2a6e      	cmp	r2, #110	@ 0x6e
 800bf6c:	e7db      	b.n	800bf26 <_strtod_l+0x2f6>
 800bf6e:	4988      	ldr	r1, [pc, #544]	@ (800c190 <_strtod_l+0x560>)
 800bf70:	a811      	add	r0, sp, #68	@ 0x44
 800bf72:	f001 f989 	bl	800d288 <__match>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f43f aeb1 	beq.w	800bcde <_strtod_l+0xae>
 800bf7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf7e:	4985      	ldr	r1, [pc, #532]	@ (800c194 <_strtod_l+0x564>)
 800bf80:	3b01      	subs	r3, #1
 800bf82:	a811      	add	r0, sp, #68	@ 0x44
 800bf84:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf86:	f001 f97f 	bl	800d288 <__match>
 800bf8a:	b910      	cbnz	r0, 800bf92 <_strtod_l+0x362>
 800bf8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf8e:	3301      	adds	r3, #1
 800bf90:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf92:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c1a8 <_strtod_l+0x578>
 800bf96:	f04f 0a00 	mov.w	sl, #0
 800bf9a:	e684      	b.n	800bca6 <_strtod_l+0x76>
 800bf9c:	487e      	ldr	r0, [pc, #504]	@ (800c198 <_strtod_l+0x568>)
 800bf9e:	f000 feaf 	bl	800cd00 <nan>
 800bfa2:	ec5b ab10 	vmov	sl, fp, d0
 800bfa6:	e67e      	b.n	800bca6 <_strtod_l+0x76>
 800bfa8:	ee07 9a90 	vmov	s15, r9
 800bfac:	1be2      	subs	r2, r4, r7
 800bfae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	bf08      	it	eq
 800bfb6:	461d      	moveq	r5, r3
 800bfb8:	2b10      	cmp	r3, #16
 800bfba:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	bfa8      	it	ge
 800bfc0:	2210      	movge	r2, #16
 800bfc2:	2b09      	cmp	r3, #9
 800bfc4:	ec5b ab17 	vmov	sl, fp, d7
 800bfc8:	dc15      	bgt.n	800bff6 <_strtod_l+0x3c6>
 800bfca:	1be1      	subs	r1, r4, r7
 800bfcc:	2900      	cmp	r1, #0
 800bfce:	f43f ae6a 	beq.w	800bca6 <_strtod_l+0x76>
 800bfd2:	eba4 0107 	sub.w	r1, r4, r7
 800bfd6:	dd72      	ble.n	800c0be <_strtod_l+0x48e>
 800bfd8:	2916      	cmp	r1, #22
 800bfda:	dc59      	bgt.n	800c090 <_strtod_l+0x460>
 800bfdc:	4b6f      	ldr	r3, [pc, #444]	@ (800c19c <_strtod_l+0x56c>)
 800bfde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfe4:	ed93 7b00 	vldr	d7, [r3]
 800bfe8:	ec4b ab16 	vmov	d6, sl, fp
 800bfec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bff0:	ec5b ab17 	vmov	sl, fp, d7
 800bff4:	e657      	b.n	800bca6 <_strtod_l+0x76>
 800bff6:	4969      	ldr	r1, [pc, #420]	@ (800c19c <_strtod_l+0x56c>)
 800bff8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bffc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c000:	ee06 6a90 	vmov	s13, r6
 800c004:	2b0f      	cmp	r3, #15
 800c006:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c00a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c00e:	ec5b ab16 	vmov	sl, fp, d6
 800c012:	ddda      	ble.n	800bfca <_strtod_l+0x39a>
 800c014:	1a9a      	subs	r2, r3, r2
 800c016:	1be1      	subs	r1, r4, r7
 800c018:	440a      	add	r2, r1
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	f340 8094 	ble.w	800c148 <_strtod_l+0x518>
 800c020:	f012 000f 	ands.w	r0, r2, #15
 800c024:	d00a      	beq.n	800c03c <_strtod_l+0x40c>
 800c026:	495d      	ldr	r1, [pc, #372]	@ (800c19c <_strtod_l+0x56c>)
 800c028:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c02c:	ed91 7b00 	vldr	d7, [r1]
 800c030:	ec4b ab16 	vmov	d6, sl, fp
 800c034:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c038:	ec5b ab17 	vmov	sl, fp, d7
 800c03c:	f032 020f 	bics.w	r2, r2, #15
 800c040:	d073      	beq.n	800c12a <_strtod_l+0x4fa>
 800c042:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c046:	dd47      	ble.n	800c0d8 <_strtod_l+0x4a8>
 800c048:	2400      	movs	r4, #0
 800c04a:	4625      	mov	r5, r4
 800c04c:	9407      	str	r4, [sp, #28]
 800c04e:	4626      	mov	r6, r4
 800c050:	9a05      	ldr	r2, [sp, #20]
 800c052:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c1a8 <_strtod_l+0x578>
 800c056:	2322      	movs	r3, #34	@ 0x22
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	f04f 0a00 	mov.w	sl, #0
 800c05e:	9b07      	ldr	r3, [sp, #28]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f43f ae20 	beq.w	800bca6 <_strtod_l+0x76>
 800c066:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c068:	9805      	ldr	r0, [sp, #20]
 800c06a:	f7ff f957 	bl	800b31c <_Bfree>
 800c06e:	9805      	ldr	r0, [sp, #20]
 800c070:	4631      	mov	r1, r6
 800c072:	f7ff f953 	bl	800b31c <_Bfree>
 800c076:	9805      	ldr	r0, [sp, #20]
 800c078:	4629      	mov	r1, r5
 800c07a:	f7ff f94f 	bl	800b31c <_Bfree>
 800c07e:	9907      	ldr	r1, [sp, #28]
 800c080:	9805      	ldr	r0, [sp, #20]
 800c082:	f7ff f94b 	bl	800b31c <_Bfree>
 800c086:	9805      	ldr	r0, [sp, #20]
 800c088:	4621      	mov	r1, r4
 800c08a:	f7ff f947 	bl	800b31c <_Bfree>
 800c08e:	e60a      	b.n	800bca6 <_strtod_l+0x76>
 800c090:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c094:	1be0      	subs	r0, r4, r7
 800c096:	4281      	cmp	r1, r0
 800c098:	dbbc      	blt.n	800c014 <_strtod_l+0x3e4>
 800c09a:	4a40      	ldr	r2, [pc, #256]	@ (800c19c <_strtod_l+0x56c>)
 800c09c:	f1c3 030f 	rsb	r3, r3, #15
 800c0a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c0a4:	ed91 7b00 	vldr	d7, [r1]
 800c0a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0aa:	ec4b ab16 	vmov	d6, sl, fp
 800c0ae:	1acb      	subs	r3, r1, r3
 800c0b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c0b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0b8:	ed92 6b00 	vldr	d6, [r2]
 800c0bc:	e796      	b.n	800bfec <_strtod_l+0x3bc>
 800c0be:	3116      	adds	r1, #22
 800c0c0:	dba8      	blt.n	800c014 <_strtod_l+0x3e4>
 800c0c2:	4b36      	ldr	r3, [pc, #216]	@ (800c19c <_strtod_l+0x56c>)
 800c0c4:	1b3c      	subs	r4, r7, r4
 800c0c6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c0ca:	ed94 7b00 	vldr	d7, [r4]
 800c0ce:	ec4b ab16 	vmov	d6, sl, fp
 800c0d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c0d6:	e78b      	b.n	800bff0 <_strtod_l+0x3c0>
 800c0d8:	2000      	movs	r0, #0
 800c0da:	ec4b ab17 	vmov	d7, sl, fp
 800c0de:	4e30      	ldr	r6, [pc, #192]	@ (800c1a0 <_strtod_l+0x570>)
 800c0e0:	1112      	asrs	r2, r2, #4
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	2a01      	cmp	r2, #1
 800c0e6:	dc23      	bgt.n	800c130 <_strtod_l+0x500>
 800c0e8:	b108      	cbz	r0, 800c0ee <_strtod_l+0x4be>
 800c0ea:	ec5b ab17 	vmov	sl, fp, d7
 800c0ee:	4a2c      	ldr	r2, [pc, #176]	@ (800c1a0 <_strtod_l+0x570>)
 800c0f0:	482c      	ldr	r0, [pc, #176]	@ (800c1a4 <_strtod_l+0x574>)
 800c0f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c0f6:	ed92 7b00 	vldr	d7, [r2]
 800c0fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c0fe:	ec4b ab16 	vmov	d6, sl, fp
 800c102:	4a29      	ldr	r2, [pc, #164]	@ (800c1a8 <_strtod_l+0x578>)
 800c104:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c108:	ee17 1a90 	vmov	r1, s15
 800c10c:	400a      	ands	r2, r1
 800c10e:	4282      	cmp	r2, r0
 800c110:	ec5b ab17 	vmov	sl, fp, d7
 800c114:	d898      	bhi.n	800c048 <_strtod_l+0x418>
 800c116:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c11a:	4282      	cmp	r2, r0
 800c11c:	bf86      	itte	hi
 800c11e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c1ac <_strtod_l+0x57c>
 800c122:	f04f 3aff 	movhi.w	sl, #4294967295
 800c126:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c12a:	2200      	movs	r2, #0
 800c12c:	9206      	str	r2, [sp, #24]
 800c12e:	e076      	b.n	800c21e <_strtod_l+0x5ee>
 800c130:	f012 0f01 	tst.w	r2, #1
 800c134:	d004      	beq.n	800c140 <_strtod_l+0x510>
 800c136:	ed96 6b00 	vldr	d6, [r6]
 800c13a:	2001      	movs	r0, #1
 800c13c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c140:	3101      	adds	r1, #1
 800c142:	1052      	asrs	r2, r2, #1
 800c144:	3608      	adds	r6, #8
 800c146:	e7cd      	b.n	800c0e4 <_strtod_l+0x4b4>
 800c148:	d0ef      	beq.n	800c12a <_strtod_l+0x4fa>
 800c14a:	4252      	negs	r2, r2
 800c14c:	f012 000f 	ands.w	r0, r2, #15
 800c150:	d00a      	beq.n	800c168 <_strtod_l+0x538>
 800c152:	4912      	ldr	r1, [pc, #72]	@ (800c19c <_strtod_l+0x56c>)
 800c154:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c158:	ed91 7b00 	vldr	d7, [r1]
 800c15c:	ec4b ab16 	vmov	d6, sl, fp
 800c160:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c164:	ec5b ab17 	vmov	sl, fp, d7
 800c168:	1112      	asrs	r2, r2, #4
 800c16a:	d0de      	beq.n	800c12a <_strtod_l+0x4fa>
 800c16c:	2a1f      	cmp	r2, #31
 800c16e:	dd1f      	ble.n	800c1b0 <_strtod_l+0x580>
 800c170:	2400      	movs	r4, #0
 800c172:	4625      	mov	r5, r4
 800c174:	9407      	str	r4, [sp, #28]
 800c176:	4626      	mov	r6, r4
 800c178:	9a05      	ldr	r2, [sp, #20]
 800c17a:	2322      	movs	r3, #34	@ 0x22
 800c17c:	f04f 0a00 	mov.w	sl, #0
 800c180:	f04f 0b00 	mov.w	fp, #0
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	e76a      	b.n	800c05e <_strtod_l+0x42e>
 800c188:	0800da75 	.word	0x0800da75
 800c18c:	0800dc8c 	.word	0x0800dc8c
 800c190:	0800da6d 	.word	0x0800da6d
 800c194:	0800daa4 	.word	0x0800daa4
 800c198:	0800de35 	.word	0x0800de35
 800c19c:	0800dbc0 	.word	0x0800dbc0
 800c1a0:	0800db98 	.word	0x0800db98
 800c1a4:	7ca00000 	.word	0x7ca00000
 800c1a8:	7ff00000 	.word	0x7ff00000
 800c1ac:	7fefffff 	.word	0x7fefffff
 800c1b0:	f012 0110 	ands.w	r1, r2, #16
 800c1b4:	bf18      	it	ne
 800c1b6:	216a      	movne	r1, #106	@ 0x6a
 800c1b8:	9106      	str	r1, [sp, #24]
 800c1ba:	ec4b ab17 	vmov	d7, sl, fp
 800c1be:	49b0      	ldr	r1, [pc, #704]	@ (800c480 <_strtod_l+0x850>)
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	07d6      	lsls	r6, r2, #31
 800c1c4:	d504      	bpl.n	800c1d0 <_strtod_l+0x5a0>
 800c1c6:	ed91 6b00 	vldr	d6, [r1]
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1d0:	1052      	asrs	r2, r2, #1
 800c1d2:	f101 0108 	add.w	r1, r1, #8
 800c1d6:	d1f4      	bne.n	800c1c2 <_strtod_l+0x592>
 800c1d8:	b108      	cbz	r0, 800c1de <_strtod_l+0x5ae>
 800c1da:	ec5b ab17 	vmov	sl, fp, d7
 800c1de:	9a06      	ldr	r2, [sp, #24]
 800c1e0:	b1b2      	cbz	r2, 800c210 <_strtod_l+0x5e0>
 800c1e2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c1e6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	dd0f      	ble.n	800c210 <_strtod_l+0x5e0>
 800c1f0:	2a1f      	cmp	r2, #31
 800c1f2:	dd55      	ble.n	800c2a0 <_strtod_l+0x670>
 800c1f4:	2a34      	cmp	r2, #52	@ 0x34
 800c1f6:	bfde      	ittt	le
 800c1f8:	f04f 32ff 	movle.w	r2, #4294967295
 800c1fc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c200:	408a      	lslle	r2, r1
 800c202:	f04f 0a00 	mov.w	sl, #0
 800c206:	bfcc      	ite	gt
 800c208:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c20c:	ea02 0b00 	andle.w	fp, r2, r0
 800c210:	ec4b ab17 	vmov	d7, sl, fp
 800c214:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21c:	d0a8      	beq.n	800c170 <_strtod_l+0x540>
 800c21e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c220:	9805      	ldr	r0, [sp, #20]
 800c222:	f8cd 9000 	str.w	r9, [sp]
 800c226:	462a      	mov	r2, r5
 800c228:	f7ff f8e0 	bl	800b3ec <__s2b>
 800c22c:	9007      	str	r0, [sp, #28]
 800c22e:	2800      	cmp	r0, #0
 800c230:	f43f af0a 	beq.w	800c048 <_strtod_l+0x418>
 800c234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c236:	1b3f      	subs	r7, r7, r4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bfb4      	ite	lt
 800c23c:	463b      	movlt	r3, r7
 800c23e:	2300      	movge	r3, #0
 800c240:	930a      	str	r3, [sp, #40]	@ 0x28
 800c242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c244:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c470 <_strtod_l+0x840>
 800c248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c24c:	2400      	movs	r4, #0
 800c24e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c250:	4625      	mov	r5, r4
 800c252:	9b07      	ldr	r3, [sp, #28]
 800c254:	9805      	ldr	r0, [sp, #20]
 800c256:	6859      	ldr	r1, [r3, #4]
 800c258:	f7ff f820 	bl	800b29c <_Balloc>
 800c25c:	4606      	mov	r6, r0
 800c25e:	2800      	cmp	r0, #0
 800c260:	f43f aef6 	beq.w	800c050 <_strtod_l+0x420>
 800c264:	9b07      	ldr	r3, [sp, #28]
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	ec4b ab19 	vmov	d9, sl, fp
 800c26c:	3202      	adds	r2, #2
 800c26e:	f103 010c 	add.w	r1, r3, #12
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	300c      	adds	r0, #12
 800c276:	f000 fd33 	bl	800cce0 <memcpy>
 800c27a:	eeb0 0b49 	vmov.f64	d0, d9
 800c27e:	9805      	ldr	r0, [sp, #20]
 800c280:	aa14      	add	r2, sp, #80	@ 0x50
 800c282:	a913      	add	r1, sp, #76	@ 0x4c
 800c284:	f7ff fbee 	bl	800ba64 <__d2b>
 800c288:	9012      	str	r0, [sp, #72]	@ 0x48
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f43f aee0 	beq.w	800c050 <_strtod_l+0x420>
 800c290:	9805      	ldr	r0, [sp, #20]
 800c292:	2101      	movs	r1, #1
 800c294:	f7ff f940 	bl	800b518 <__i2b>
 800c298:	4605      	mov	r5, r0
 800c29a:	b940      	cbnz	r0, 800c2ae <_strtod_l+0x67e>
 800c29c:	2500      	movs	r5, #0
 800c29e:	e6d7      	b.n	800c050 <_strtod_l+0x420>
 800c2a0:	f04f 31ff 	mov.w	r1, #4294967295
 800c2a4:	fa01 f202 	lsl.w	r2, r1, r2
 800c2a8:	ea02 0a0a 	and.w	sl, r2, sl
 800c2ac:	e7b0      	b.n	800c210 <_strtod_l+0x5e0>
 800c2ae:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c2b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c2b2:	2f00      	cmp	r7, #0
 800c2b4:	bfab      	itete	ge
 800c2b6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c2b8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c2ba:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c2be:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c2c2:	bfac      	ite	ge
 800c2c4:	eb07 0903 	addge.w	r9, r7, r3
 800c2c8:	eba3 0807 	sublt.w	r8, r3, r7
 800c2cc:	9b06      	ldr	r3, [sp, #24]
 800c2ce:	1aff      	subs	r7, r7, r3
 800c2d0:	4417      	add	r7, r2
 800c2d2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c2d6:	4a6b      	ldr	r2, [pc, #428]	@ (800c484 <_strtod_l+0x854>)
 800c2d8:	3f01      	subs	r7, #1
 800c2da:	4297      	cmp	r7, r2
 800c2dc:	da51      	bge.n	800c382 <_strtod_l+0x752>
 800c2de:	1bd1      	subs	r1, r2, r7
 800c2e0:	291f      	cmp	r1, #31
 800c2e2:	eba3 0301 	sub.w	r3, r3, r1
 800c2e6:	f04f 0201 	mov.w	r2, #1
 800c2ea:	dc3e      	bgt.n	800c36a <_strtod_l+0x73a>
 800c2ec:	408a      	lsls	r2, r1
 800c2ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c2f4:	eb09 0703 	add.w	r7, r9, r3
 800c2f8:	4498      	add	r8, r3
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	45b9      	cmp	r9, r7
 800c2fe:	4498      	add	r8, r3
 800c300:	464b      	mov	r3, r9
 800c302:	bfa8      	it	ge
 800c304:	463b      	movge	r3, r7
 800c306:	4543      	cmp	r3, r8
 800c308:	bfa8      	it	ge
 800c30a:	4643      	movge	r3, r8
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfc2      	ittt	gt
 800c310:	1aff      	subgt	r7, r7, r3
 800c312:	eba8 0803 	subgt.w	r8, r8, r3
 800c316:	eba9 0903 	subgt.w	r9, r9, r3
 800c31a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dd16      	ble.n	800c34e <_strtod_l+0x71e>
 800c320:	4629      	mov	r1, r5
 800c322:	9805      	ldr	r0, [sp, #20]
 800c324:	461a      	mov	r2, r3
 800c326:	f7ff f9b7 	bl	800b698 <__pow5mult>
 800c32a:	4605      	mov	r5, r0
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0b5      	beq.n	800c29c <_strtod_l+0x66c>
 800c330:	4601      	mov	r1, r0
 800c332:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c334:	9805      	ldr	r0, [sp, #20]
 800c336:	f7ff f905 	bl	800b544 <__multiply>
 800c33a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f43f ae87 	beq.w	800c050 <_strtod_l+0x420>
 800c342:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c344:	9805      	ldr	r0, [sp, #20]
 800c346:	f7fe ffe9 	bl	800b31c <_Bfree>
 800c34a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c34c:	9312      	str	r3, [sp, #72]	@ 0x48
 800c34e:	2f00      	cmp	r7, #0
 800c350:	dc1b      	bgt.n	800c38a <_strtod_l+0x75a>
 800c352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	dd21      	ble.n	800c39c <_strtod_l+0x76c>
 800c358:	4631      	mov	r1, r6
 800c35a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c35c:	9805      	ldr	r0, [sp, #20]
 800c35e:	f7ff f99b 	bl	800b698 <__pow5mult>
 800c362:	4606      	mov	r6, r0
 800c364:	b9d0      	cbnz	r0, 800c39c <_strtod_l+0x76c>
 800c366:	2600      	movs	r6, #0
 800c368:	e672      	b.n	800c050 <_strtod_l+0x420>
 800c36a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c36e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c372:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c376:	37e2      	adds	r7, #226	@ 0xe2
 800c378:	fa02 f107 	lsl.w	r1, r2, r7
 800c37c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c37e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c380:	e7b8      	b.n	800c2f4 <_strtod_l+0x6c4>
 800c382:	2200      	movs	r2, #0
 800c384:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c386:	2201      	movs	r2, #1
 800c388:	e7f9      	b.n	800c37e <_strtod_l+0x74e>
 800c38a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c38c:	9805      	ldr	r0, [sp, #20]
 800c38e:	463a      	mov	r2, r7
 800c390:	f7ff f9dc 	bl	800b74c <__lshift>
 800c394:	9012      	str	r0, [sp, #72]	@ 0x48
 800c396:	2800      	cmp	r0, #0
 800c398:	d1db      	bne.n	800c352 <_strtod_l+0x722>
 800c39a:	e659      	b.n	800c050 <_strtod_l+0x420>
 800c39c:	f1b8 0f00 	cmp.w	r8, #0
 800c3a0:	dd07      	ble.n	800c3b2 <_strtod_l+0x782>
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	9805      	ldr	r0, [sp, #20]
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	f7ff f9d0 	bl	800b74c <__lshift>
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d0d9      	beq.n	800c366 <_strtod_l+0x736>
 800c3b2:	f1b9 0f00 	cmp.w	r9, #0
 800c3b6:	dd08      	ble.n	800c3ca <_strtod_l+0x79a>
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	9805      	ldr	r0, [sp, #20]
 800c3bc:	464a      	mov	r2, r9
 800c3be:	f7ff f9c5 	bl	800b74c <__lshift>
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f43f ae43 	beq.w	800c050 <_strtod_l+0x420>
 800c3ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c3cc:	9805      	ldr	r0, [sp, #20]
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	f7ff fa44 	bl	800b85c <__mdiff>
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f43f ae3a 	beq.w	800c050 <_strtod_l+0x420>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c3e2:	60c3      	str	r3, [r0, #12]
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	f7ff fa1d 	bl	800b824 <__mcmp>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	da4e      	bge.n	800c48c <_strtod_l+0x85c>
 800c3ee:	ea58 080a 	orrs.w	r8, r8, sl
 800c3f2:	d174      	bne.n	800c4de <_strtod_l+0x8ae>
 800c3f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d170      	bne.n	800c4de <_strtod_l+0x8ae>
 800c3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c400:	0d1b      	lsrs	r3, r3, #20
 800c402:	051b      	lsls	r3, r3, #20
 800c404:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c408:	d969      	bls.n	800c4de <_strtod_l+0x8ae>
 800c40a:	6963      	ldr	r3, [r4, #20]
 800c40c:	b913      	cbnz	r3, 800c414 <_strtod_l+0x7e4>
 800c40e:	6923      	ldr	r3, [r4, #16]
 800c410:	2b01      	cmp	r3, #1
 800c412:	dd64      	ble.n	800c4de <_strtod_l+0x8ae>
 800c414:	4621      	mov	r1, r4
 800c416:	2201      	movs	r2, #1
 800c418:	9805      	ldr	r0, [sp, #20]
 800c41a:	f7ff f997 	bl	800b74c <__lshift>
 800c41e:	4629      	mov	r1, r5
 800c420:	4604      	mov	r4, r0
 800c422:	f7ff f9ff 	bl	800b824 <__mcmp>
 800c426:	2800      	cmp	r0, #0
 800c428:	dd59      	ble.n	800c4de <_strtod_l+0x8ae>
 800c42a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c42e:	9a06      	ldr	r2, [sp, #24]
 800c430:	0d1b      	lsrs	r3, r3, #20
 800c432:	051b      	lsls	r3, r3, #20
 800c434:	2a00      	cmp	r2, #0
 800c436:	d070      	beq.n	800c51a <_strtod_l+0x8ea>
 800c438:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c43c:	d86d      	bhi.n	800c51a <_strtod_l+0x8ea>
 800c43e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c442:	f67f ae99 	bls.w	800c178 <_strtod_l+0x548>
 800c446:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c478 <_strtod_l+0x848>
 800c44a:	ec4b ab16 	vmov	d6, sl, fp
 800c44e:	4b0e      	ldr	r3, [pc, #56]	@ (800c488 <_strtod_l+0x858>)
 800c450:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c454:	ee17 2a90 	vmov	r2, s15
 800c458:	4013      	ands	r3, r2
 800c45a:	ec5b ab17 	vmov	sl, fp, d7
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f47f ae01 	bne.w	800c066 <_strtod_l+0x436>
 800c464:	9a05      	ldr	r2, [sp, #20]
 800c466:	2322      	movs	r3, #34	@ 0x22
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	e5fc      	b.n	800c066 <_strtod_l+0x436>
 800c46c:	f3af 8000 	nop.w
 800c470:	ffc00000 	.word	0xffc00000
 800c474:	41dfffff 	.word	0x41dfffff
 800c478:	00000000 	.word	0x00000000
 800c47c:	39500000 	.word	0x39500000
 800c480:	0800dcb8 	.word	0x0800dcb8
 800c484:	fffffc02 	.word	0xfffffc02
 800c488:	7ff00000 	.word	0x7ff00000
 800c48c:	46d9      	mov	r9, fp
 800c48e:	d15d      	bne.n	800c54c <_strtod_l+0x91c>
 800c490:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c494:	f1b8 0f00 	cmp.w	r8, #0
 800c498:	d02a      	beq.n	800c4f0 <_strtod_l+0x8c0>
 800c49a:	4aab      	ldr	r2, [pc, #684]	@ (800c748 <_strtod_l+0xb18>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d12a      	bne.n	800c4f6 <_strtod_l+0x8c6>
 800c4a0:	9b06      	ldr	r3, [sp, #24]
 800c4a2:	4652      	mov	r2, sl
 800c4a4:	b1fb      	cbz	r3, 800c4e6 <_strtod_l+0x8b6>
 800c4a6:	4ba9      	ldr	r3, [pc, #676]	@ (800c74c <_strtod_l+0xb1c>)
 800c4a8:	ea0b 0303 	and.w	r3, fp, r3
 800c4ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c4b0:	f04f 31ff 	mov.w	r1, #4294967295
 800c4b4:	d81a      	bhi.n	800c4ec <_strtod_l+0x8bc>
 800c4b6:	0d1b      	lsrs	r3, r3, #20
 800c4b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d118      	bne.n	800c4f6 <_strtod_l+0x8c6>
 800c4c4:	4ba2      	ldr	r3, [pc, #648]	@ (800c750 <_strtod_l+0xb20>)
 800c4c6:	4599      	cmp	r9, r3
 800c4c8:	d102      	bne.n	800c4d0 <_strtod_l+0x8a0>
 800c4ca:	3201      	adds	r2, #1
 800c4cc:	f43f adc0 	beq.w	800c050 <_strtod_l+0x420>
 800c4d0:	4b9e      	ldr	r3, [pc, #632]	@ (800c74c <_strtod_l+0xb1c>)
 800c4d2:	ea09 0303 	and.w	r3, r9, r3
 800c4d6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c4da:	f04f 0a00 	mov.w	sl, #0
 800c4de:	9b06      	ldr	r3, [sp, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1b0      	bne.n	800c446 <_strtod_l+0x816>
 800c4e4:	e5bf      	b.n	800c066 <_strtod_l+0x436>
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	e7e9      	b.n	800c4c0 <_strtod_l+0x890>
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	e7e7      	b.n	800c4c0 <_strtod_l+0x890>
 800c4f0:	ea53 030a 	orrs.w	r3, r3, sl
 800c4f4:	d099      	beq.n	800c42a <_strtod_l+0x7fa>
 800c4f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f8:	b1c3      	cbz	r3, 800c52c <_strtod_l+0x8fc>
 800c4fa:	ea13 0f09 	tst.w	r3, r9
 800c4fe:	d0ee      	beq.n	800c4de <_strtod_l+0x8ae>
 800c500:	9a06      	ldr	r2, [sp, #24]
 800c502:	4650      	mov	r0, sl
 800c504:	4659      	mov	r1, fp
 800c506:	f1b8 0f00 	cmp.w	r8, #0
 800c50a:	d013      	beq.n	800c534 <_strtod_l+0x904>
 800c50c:	f7ff fb75 	bl	800bbfa <sulp>
 800c510:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c514:	ec5b ab17 	vmov	sl, fp, d7
 800c518:	e7e1      	b.n	800c4de <_strtod_l+0x8ae>
 800c51a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c51e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c522:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c526:	f04f 3aff 	mov.w	sl, #4294967295
 800c52a:	e7d8      	b.n	800c4de <_strtod_l+0x8ae>
 800c52c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c52e:	ea13 0f0a 	tst.w	r3, sl
 800c532:	e7e4      	b.n	800c4fe <_strtod_l+0x8ce>
 800c534:	f7ff fb61 	bl	800bbfa <sulp>
 800c538:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c53c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	ec5b ab10 	vmov	sl, fp, d0
 800c548:	d1c9      	bne.n	800c4de <_strtod_l+0x8ae>
 800c54a:	e615      	b.n	800c178 <_strtod_l+0x548>
 800c54c:	4629      	mov	r1, r5
 800c54e:	4620      	mov	r0, r4
 800c550:	f7ff fae0 	bl	800bb14 <__ratio>
 800c554:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c558:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c560:	d85d      	bhi.n	800c61e <_strtod_l+0x9ee>
 800c562:	f1b8 0f00 	cmp.w	r8, #0
 800c566:	d164      	bne.n	800c632 <_strtod_l+0xa02>
 800c568:	f1ba 0f00 	cmp.w	sl, #0
 800c56c:	d14b      	bne.n	800c606 <_strtod_l+0x9d6>
 800c56e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c572:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d160      	bne.n	800c63c <_strtod_l+0xa0c>
 800c57a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c57e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c586:	d401      	bmi.n	800c58c <_strtod_l+0x95c>
 800c588:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c58c:	eeb1 ab48 	vneg.f64	d10, d8
 800c590:	486e      	ldr	r0, [pc, #440]	@ (800c74c <_strtod_l+0xb1c>)
 800c592:	4970      	ldr	r1, [pc, #448]	@ (800c754 <_strtod_l+0xb24>)
 800c594:	ea09 0700 	and.w	r7, r9, r0
 800c598:	428f      	cmp	r7, r1
 800c59a:	ec53 2b1a 	vmov	r2, r3, d10
 800c59e:	d17d      	bne.n	800c69c <_strtod_l+0xa6c>
 800c5a0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c5a4:	ec4b ab1c 	vmov	d12, sl, fp
 800c5a8:	eeb0 0b4c 	vmov.f64	d0, d12
 800c5ac:	f7ff f9ea 	bl	800b984 <__ulp>
 800c5b0:	4866      	ldr	r0, [pc, #408]	@ (800c74c <_strtod_l+0xb1c>)
 800c5b2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c5b6:	ee1c 3a90 	vmov	r3, s25
 800c5ba:	4a67      	ldr	r2, [pc, #412]	@ (800c758 <_strtod_l+0xb28>)
 800c5bc:	ea03 0100 	and.w	r1, r3, r0
 800c5c0:	4291      	cmp	r1, r2
 800c5c2:	ec5b ab1c 	vmov	sl, fp, d12
 800c5c6:	d93c      	bls.n	800c642 <_strtod_l+0xa12>
 800c5c8:	ee19 2a90 	vmov	r2, s19
 800c5cc:	4b60      	ldr	r3, [pc, #384]	@ (800c750 <_strtod_l+0xb20>)
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d104      	bne.n	800c5dc <_strtod_l+0x9ac>
 800c5d2:	ee19 3a10 	vmov	r3, s18
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	f43f ad3a 	beq.w	800c050 <_strtod_l+0x420>
 800c5dc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c750 <_strtod_l+0xb20>
 800c5e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c5e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c5e6:	9805      	ldr	r0, [sp, #20]
 800c5e8:	f7fe fe98 	bl	800b31c <_Bfree>
 800c5ec:	9805      	ldr	r0, [sp, #20]
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	f7fe fe94 	bl	800b31c <_Bfree>
 800c5f4:	9805      	ldr	r0, [sp, #20]
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7fe fe90 	bl	800b31c <_Bfree>
 800c5fc:	9805      	ldr	r0, [sp, #20]
 800c5fe:	4621      	mov	r1, r4
 800c600:	f7fe fe8c 	bl	800b31c <_Bfree>
 800c604:	e625      	b.n	800c252 <_strtod_l+0x622>
 800c606:	f1ba 0f01 	cmp.w	sl, #1
 800c60a:	d103      	bne.n	800c614 <_strtod_l+0x9e4>
 800c60c:	f1bb 0f00 	cmp.w	fp, #0
 800c610:	f43f adb2 	beq.w	800c178 <_strtod_l+0x548>
 800c614:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c618:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c61c:	e7b8      	b.n	800c590 <_strtod_l+0x960>
 800c61e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c622:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c626:	f1b8 0f00 	cmp.w	r8, #0
 800c62a:	d0af      	beq.n	800c58c <_strtod_l+0x95c>
 800c62c:	eeb0 ab48 	vmov.f64	d10, d8
 800c630:	e7ae      	b.n	800c590 <_strtod_l+0x960>
 800c632:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c636:	eeb0 8b4a 	vmov.f64	d8, d10
 800c63a:	e7a9      	b.n	800c590 <_strtod_l+0x960>
 800c63c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c640:	e7a6      	b.n	800c590 <_strtod_l+0x960>
 800c642:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c646:	9b06      	ldr	r3, [sp, #24]
 800c648:	46d9      	mov	r9, fp
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1ca      	bne.n	800c5e4 <_strtod_l+0x9b4>
 800c64e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c652:	0d1b      	lsrs	r3, r3, #20
 800c654:	051b      	lsls	r3, r3, #20
 800c656:	429f      	cmp	r7, r3
 800c658:	d1c4      	bne.n	800c5e4 <_strtod_l+0x9b4>
 800c65a:	ec51 0b18 	vmov	r0, r1, d8
 800c65e:	f7f4 f86b 	bl	8000738 <__aeabi_d2lz>
 800c662:	f7f4 f823 	bl	80006ac <__aeabi_l2d>
 800c666:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c66a:	ec41 0b17 	vmov	d7, r0, r1
 800c66e:	ea49 090a 	orr.w	r9, r9, sl
 800c672:	ea59 0908 	orrs.w	r9, r9, r8
 800c676:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c67a:	d03c      	beq.n	800c6f6 <_strtod_l+0xac6>
 800c67c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c730 <_strtod_l+0xb00>
 800c680:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c688:	f53f aced 	bmi.w	800c066 <_strtod_l+0x436>
 800c68c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c738 <_strtod_l+0xb08>
 800c690:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c698:	dda4      	ble.n	800c5e4 <_strtod_l+0x9b4>
 800c69a:	e4e4      	b.n	800c066 <_strtod_l+0x436>
 800c69c:	9906      	ldr	r1, [sp, #24]
 800c69e:	b1e1      	cbz	r1, 800c6da <_strtod_l+0xaaa>
 800c6a0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c6a4:	d819      	bhi.n	800c6da <_strtod_l+0xaaa>
 800c6a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ae:	d811      	bhi.n	800c6d4 <_strtod_l+0xaa4>
 800c6b0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c6b4:	ee18 3a10 	vmov	r3, s16
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	bf38      	it	cc
 800c6bc:	2301      	movcc	r3, #1
 800c6be:	ee08 3a10 	vmov	s16, r3
 800c6c2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c6c6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ca:	d111      	bne.n	800c6f0 <_strtod_l+0xac0>
 800c6cc:	eeb1 7b48 	vneg.f64	d7, d8
 800c6d0:	ec53 2b17 	vmov	r2, r3, d7
 800c6d4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c6d8:	1bcb      	subs	r3, r1, r7
 800c6da:	eeb0 0b49 	vmov.f64	d0, d9
 800c6de:	ec43 2b1a 	vmov	d10, r2, r3
 800c6e2:	f7ff f94f 	bl	800b984 <__ulp>
 800c6e6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c6ea:	ec5b ab19 	vmov	sl, fp, d9
 800c6ee:	e7aa      	b.n	800c646 <_strtod_l+0xa16>
 800c6f0:	eeb0 7b48 	vmov.f64	d7, d8
 800c6f4:	e7ec      	b.n	800c6d0 <_strtod_l+0xaa0>
 800c6f6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c740 <_strtod_l+0xb10>
 800c6fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	f57f af6f 	bpl.w	800c5e4 <_strtod_l+0x9b4>
 800c706:	e4ae      	b.n	800c066 <_strtod_l+0x436>
 800c708:	2300      	movs	r3, #0
 800c70a:	9308      	str	r3, [sp, #32]
 800c70c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c70e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	f7ff bacc 	b.w	800bcae <_strtod_l+0x7e>
 800c716:	2a65      	cmp	r2, #101	@ 0x65
 800c718:	f43f abbc 	beq.w	800be94 <_strtod_l+0x264>
 800c71c:	2a45      	cmp	r2, #69	@ 0x45
 800c71e:	f43f abb9 	beq.w	800be94 <_strtod_l+0x264>
 800c722:	2301      	movs	r3, #1
 800c724:	9306      	str	r3, [sp, #24]
 800c726:	f7ff bbf0 	b.w	800bf0a <_strtod_l+0x2da>
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w
 800c730:	94a03595 	.word	0x94a03595
 800c734:	3fdfffff 	.word	0x3fdfffff
 800c738:	35afe535 	.word	0x35afe535
 800c73c:	3fe00000 	.word	0x3fe00000
 800c740:	94a03595 	.word	0x94a03595
 800c744:	3fcfffff 	.word	0x3fcfffff
 800c748:	000fffff 	.word	0x000fffff
 800c74c:	7ff00000 	.word	0x7ff00000
 800c750:	7fefffff 	.word	0x7fefffff
 800c754:	7fe00000 	.word	0x7fe00000
 800c758:	7c9fffff 	.word	0x7c9fffff

0800c75c <_strtod_r>:
 800c75c:	4b01      	ldr	r3, [pc, #4]	@ (800c764 <_strtod_r+0x8>)
 800c75e:	f7ff ba67 	b.w	800bc30 <_strtod_l>
 800c762:	bf00      	nop
 800c764:	2400006c 	.word	0x2400006c

0800c768 <_strtol_l.constprop.0>:
 800c768:	2b24      	cmp	r3, #36	@ 0x24
 800c76a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c76e:	4686      	mov	lr, r0
 800c770:	4690      	mov	r8, r2
 800c772:	d801      	bhi.n	800c778 <_strtol_l.constprop.0+0x10>
 800c774:	2b01      	cmp	r3, #1
 800c776:	d106      	bne.n	800c786 <_strtol_l.constprop.0+0x1e>
 800c778:	f7fd fe7e 	bl	800a478 <__errno>
 800c77c:	2316      	movs	r3, #22
 800c77e:	6003      	str	r3, [r0, #0]
 800c780:	2000      	movs	r0, #0
 800c782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c786:	4834      	ldr	r0, [pc, #208]	@ (800c858 <_strtol_l.constprop.0+0xf0>)
 800c788:	460d      	mov	r5, r1
 800c78a:	462a      	mov	r2, r5
 800c78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c790:	5d06      	ldrb	r6, [r0, r4]
 800c792:	f016 0608 	ands.w	r6, r6, #8
 800c796:	d1f8      	bne.n	800c78a <_strtol_l.constprop.0+0x22>
 800c798:	2c2d      	cmp	r4, #45	@ 0x2d
 800c79a:	d12d      	bne.n	800c7f8 <_strtol_l.constprop.0+0x90>
 800c79c:	782c      	ldrb	r4, [r5, #0]
 800c79e:	2601      	movs	r6, #1
 800c7a0:	1c95      	adds	r5, r2, #2
 800c7a2:	f033 0210 	bics.w	r2, r3, #16
 800c7a6:	d109      	bne.n	800c7bc <_strtol_l.constprop.0+0x54>
 800c7a8:	2c30      	cmp	r4, #48	@ 0x30
 800c7aa:	d12a      	bne.n	800c802 <_strtol_l.constprop.0+0x9a>
 800c7ac:	782a      	ldrb	r2, [r5, #0]
 800c7ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c7b2:	2a58      	cmp	r2, #88	@ 0x58
 800c7b4:	d125      	bne.n	800c802 <_strtol_l.constprop.0+0x9a>
 800c7b6:	786c      	ldrb	r4, [r5, #1]
 800c7b8:	2310      	movs	r3, #16
 800c7ba:	3502      	adds	r5, #2
 800c7bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c7c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	fbbc f9f3 	udiv	r9, ip, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	fb03 ca19 	mls	sl, r3, r9, ip
 800c7d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c7d4:	2f09      	cmp	r7, #9
 800c7d6:	d81b      	bhi.n	800c810 <_strtol_l.constprop.0+0xa8>
 800c7d8:	463c      	mov	r4, r7
 800c7da:	42a3      	cmp	r3, r4
 800c7dc:	dd27      	ble.n	800c82e <_strtol_l.constprop.0+0xc6>
 800c7de:	1c57      	adds	r7, r2, #1
 800c7e0:	d007      	beq.n	800c7f2 <_strtol_l.constprop.0+0x8a>
 800c7e2:	4581      	cmp	r9, r0
 800c7e4:	d320      	bcc.n	800c828 <_strtol_l.constprop.0+0xc0>
 800c7e6:	d101      	bne.n	800c7ec <_strtol_l.constprop.0+0x84>
 800c7e8:	45a2      	cmp	sl, r4
 800c7ea:	db1d      	blt.n	800c828 <_strtol_l.constprop.0+0xc0>
 800c7ec:	fb00 4003 	mla	r0, r0, r3, r4
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7f6:	e7eb      	b.n	800c7d0 <_strtol_l.constprop.0+0x68>
 800c7f8:	2c2b      	cmp	r4, #43	@ 0x2b
 800c7fa:	bf04      	itt	eq
 800c7fc:	782c      	ldrbeq	r4, [r5, #0]
 800c7fe:	1c95      	addeq	r5, r2, #2
 800c800:	e7cf      	b.n	800c7a2 <_strtol_l.constprop.0+0x3a>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1da      	bne.n	800c7bc <_strtol_l.constprop.0+0x54>
 800c806:	2c30      	cmp	r4, #48	@ 0x30
 800c808:	bf0c      	ite	eq
 800c80a:	2308      	moveq	r3, #8
 800c80c:	230a      	movne	r3, #10
 800c80e:	e7d5      	b.n	800c7bc <_strtol_l.constprop.0+0x54>
 800c810:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c814:	2f19      	cmp	r7, #25
 800c816:	d801      	bhi.n	800c81c <_strtol_l.constprop.0+0xb4>
 800c818:	3c37      	subs	r4, #55	@ 0x37
 800c81a:	e7de      	b.n	800c7da <_strtol_l.constprop.0+0x72>
 800c81c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c820:	2f19      	cmp	r7, #25
 800c822:	d804      	bhi.n	800c82e <_strtol_l.constprop.0+0xc6>
 800c824:	3c57      	subs	r4, #87	@ 0x57
 800c826:	e7d8      	b.n	800c7da <_strtol_l.constprop.0+0x72>
 800c828:	f04f 32ff 	mov.w	r2, #4294967295
 800c82c:	e7e1      	b.n	800c7f2 <_strtol_l.constprop.0+0x8a>
 800c82e:	1c53      	adds	r3, r2, #1
 800c830:	d108      	bne.n	800c844 <_strtol_l.constprop.0+0xdc>
 800c832:	2322      	movs	r3, #34	@ 0x22
 800c834:	f8ce 3000 	str.w	r3, [lr]
 800c838:	4660      	mov	r0, ip
 800c83a:	f1b8 0f00 	cmp.w	r8, #0
 800c83e:	d0a0      	beq.n	800c782 <_strtol_l.constprop.0+0x1a>
 800c840:	1e69      	subs	r1, r5, #1
 800c842:	e006      	b.n	800c852 <_strtol_l.constprop.0+0xea>
 800c844:	b106      	cbz	r6, 800c848 <_strtol_l.constprop.0+0xe0>
 800c846:	4240      	negs	r0, r0
 800c848:	f1b8 0f00 	cmp.w	r8, #0
 800c84c:	d099      	beq.n	800c782 <_strtol_l.constprop.0+0x1a>
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d1f6      	bne.n	800c840 <_strtol_l.constprop.0+0xd8>
 800c852:	f8c8 1000 	str.w	r1, [r8]
 800c856:	e794      	b.n	800c782 <_strtol_l.constprop.0+0x1a>
 800c858:	0800dce1 	.word	0x0800dce1

0800c85c <_strtol_r>:
 800c85c:	f7ff bf84 	b.w	800c768 <_strtol_l.constprop.0>

0800c860 <__ssputs_r>:
 800c860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c864:	688e      	ldr	r6, [r1, #8]
 800c866:	461f      	mov	r7, r3
 800c868:	42be      	cmp	r6, r7
 800c86a:	680b      	ldr	r3, [r1, #0]
 800c86c:	4682      	mov	sl, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	4690      	mov	r8, r2
 800c872:	d82d      	bhi.n	800c8d0 <__ssputs_r+0x70>
 800c874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c878:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c87c:	d026      	beq.n	800c8cc <__ssputs_r+0x6c>
 800c87e:	6965      	ldr	r5, [r4, #20]
 800c880:	6909      	ldr	r1, [r1, #16]
 800c882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c886:	eba3 0901 	sub.w	r9, r3, r1
 800c88a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c88e:	1c7b      	adds	r3, r7, #1
 800c890:	444b      	add	r3, r9
 800c892:	106d      	asrs	r5, r5, #1
 800c894:	429d      	cmp	r5, r3
 800c896:	bf38      	it	cc
 800c898:	461d      	movcc	r5, r3
 800c89a:	0553      	lsls	r3, r2, #21
 800c89c:	d527      	bpl.n	800c8ee <__ssputs_r+0x8e>
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7fe fc70 	bl	800b184 <_malloc_r>
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	b360      	cbz	r0, 800c902 <__ssputs_r+0xa2>
 800c8a8:	6921      	ldr	r1, [r4, #16]
 800c8aa:	464a      	mov	r2, r9
 800c8ac:	f000 fa18 	bl	800cce0 <memcpy>
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	6126      	str	r6, [r4, #16]
 800c8be:	6165      	str	r5, [r4, #20]
 800c8c0:	444e      	add	r6, r9
 800c8c2:	eba5 0509 	sub.w	r5, r5, r9
 800c8c6:	6026      	str	r6, [r4, #0]
 800c8c8:	60a5      	str	r5, [r4, #8]
 800c8ca:	463e      	mov	r6, r7
 800c8cc:	42be      	cmp	r6, r7
 800c8ce:	d900      	bls.n	800c8d2 <__ssputs_r+0x72>
 800c8d0:	463e      	mov	r6, r7
 800c8d2:	6820      	ldr	r0, [r4, #0]
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	f000 f9c6 	bl	800cc68 <memmove>
 800c8dc:	68a3      	ldr	r3, [r4, #8]
 800c8de:	1b9b      	subs	r3, r3, r6
 800c8e0:	60a3      	str	r3, [r4, #8]
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	4433      	add	r3, r6
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ee:	462a      	mov	r2, r5
 800c8f0:	f000 fd8b 	bl	800d40a <_realloc_r>
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d1e0      	bne.n	800c8bc <__ssputs_r+0x5c>
 800c8fa:	6921      	ldr	r1, [r4, #16]
 800c8fc:	4650      	mov	r0, sl
 800c8fe:	f7fe fbcd 	bl	800b09c <_free_r>
 800c902:	230c      	movs	r3, #12
 800c904:	f8ca 3000 	str.w	r3, [sl]
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	f04f 30ff 	mov.w	r0, #4294967295
 800c914:	e7e9      	b.n	800c8ea <__ssputs_r+0x8a>
	...

0800c918 <_svfiprintf_r>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	4698      	mov	r8, r3
 800c91e:	898b      	ldrh	r3, [r1, #12]
 800c920:	061b      	lsls	r3, r3, #24
 800c922:	b09d      	sub	sp, #116	@ 0x74
 800c924:	4607      	mov	r7, r0
 800c926:	460d      	mov	r5, r1
 800c928:	4614      	mov	r4, r2
 800c92a:	d510      	bpl.n	800c94e <_svfiprintf_r+0x36>
 800c92c:	690b      	ldr	r3, [r1, #16]
 800c92e:	b973      	cbnz	r3, 800c94e <_svfiprintf_r+0x36>
 800c930:	2140      	movs	r1, #64	@ 0x40
 800c932:	f7fe fc27 	bl	800b184 <_malloc_r>
 800c936:	6028      	str	r0, [r5, #0]
 800c938:	6128      	str	r0, [r5, #16]
 800c93a:	b930      	cbnz	r0, 800c94a <_svfiprintf_r+0x32>
 800c93c:	230c      	movs	r3, #12
 800c93e:	603b      	str	r3, [r7, #0]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	b01d      	add	sp, #116	@ 0x74
 800c946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94a:	2340      	movs	r3, #64	@ 0x40
 800c94c:	616b      	str	r3, [r5, #20]
 800c94e:	2300      	movs	r3, #0
 800c950:	9309      	str	r3, [sp, #36]	@ 0x24
 800c952:	2320      	movs	r3, #32
 800c954:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c958:	f8cd 800c 	str.w	r8, [sp, #12]
 800c95c:	2330      	movs	r3, #48	@ 0x30
 800c95e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cafc <_svfiprintf_r+0x1e4>
 800c962:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c966:	f04f 0901 	mov.w	r9, #1
 800c96a:	4623      	mov	r3, r4
 800c96c:	469a      	mov	sl, r3
 800c96e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c972:	b10a      	cbz	r2, 800c978 <_svfiprintf_r+0x60>
 800c974:	2a25      	cmp	r2, #37	@ 0x25
 800c976:	d1f9      	bne.n	800c96c <_svfiprintf_r+0x54>
 800c978:	ebba 0b04 	subs.w	fp, sl, r4
 800c97c:	d00b      	beq.n	800c996 <_svfiprintf_r+0x7e>
 800c97e:	465b      	mov	r3, fp
 800c980:	4622      	mov	r2, r4
 800c982:	4629      	mov	r1, r5
 800c984:	4638      	mov	r0, r7
 800c986:	f7ff ff6b 	bl	800c860 <__ssputs_r>
 800c98a:	3001      	adds	r0, #1
 800c98c:	f000 80a7 	beq.w	800cade <_svfiprintf_r+0x1c6>
 800c990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c992:	445a      	add	r2, fp
 800c994:	9209      	str	r2, [sp, #36]	@ 0x24
 800c996:	f89a 3000 	ldrb.w	r3, [sl]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f000 809f 	beq.w	800cade <_svfiprintf_r+0x1c6>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9aa:	f10a 0a01 	add.w	sl, sl, #1
 800c9ae:	9304      	str	r3, [sp, #16]
 800c9b0:	9307      	str	r3, [sp, #28]
 800c9b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9b8:	4654      	mov	r4, sl
 800c9ba:	2205      	movs	r2, #5
 800c9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c0:	484e      	ldr	r0, [pc, #312]	@ (800cafc <_svfiprintf_r+0x1e4>)
 800c9c2:	f7f3 fc8d 	bl	80002e0 <memchr>
 800c9c6:	9a04      	ldr	r2, [sp, #16]
 800c9c8:	b9d8      	cbnz	r0, 800ca02 <_svfiprintf_r+0xea>
 800c9ca:	06d0      	lsls	r0, r2, #27
 800c9cc:	bf44      	itt	mi
 800c9ce:	2320      	movmi	r3, #32
 800c9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9d4:	0711      	lsls	r1, r2, #28
 800c9d6:	bf44      	itt	mi
 800c9d8:	232b      	movmi	r3, #43	@ 0x2b
 800c9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9de:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9e4:	d015      	beq.n	800ca12 <_svfiprintf_r+0xfa>
 800c9e6:	9a07      	ldr	r2, [sp, #28]
 800c9e8:	4654      	mov	r4, sl
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	f04f 0c0a 	mov.w	ip, #10
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f6:	3b30      	subs	r3, #48	@ 0x30
 800c9f8:	2b09      	cmp	r3, #9
 800c9fa:	d94b      	bls.n	800ca94 <_svfiprintf_r+0x17c>
 800c9fc:	b1b0      	cbz	r0, 800ca2c <_svfiprintf_r+0x114>
 800c9fe:	9207      	str	r2, [sp, #28]
 800ca00:	e014      	b.n	800ca2c <_svfiprintf_r+0x114>
 800ca02:	eba0 0308 	sub.w	r3, r0, r8
 800ca06:	fa09 f303 	lsl.w	r3, r9, r3
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	46a2      	mov	sl, r4
 800ca10:	e7d2      	b.n	800c9b8 <_svfiprintf_r+0xa0>
 800ca12:	9b03      	ldr	r3, [sp, #12]
 800ca14:	1d19      	adds	r1, r3, #4
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	9103      	str	r1, [sp, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	bfbb      	ittet	lt
 800ca1e:	425b      	neglt	r3, r3
 800ca20:	f042 0202 	orrlt.w	r2, r2, #2
 800ca24:	9307      	strge	r3, [sp, #28]
 800ca26:	9307      	strlt	r3, [sp, #28]
 800ca28:	bfb8      	it	lt
 800ca2a:	9204      	strlt	r2, [sp, #16]
 800ca2c:	7823      	ldrb	r3, [r4, #0]
 800ca2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca30:	d10a      	bne.n	800ca48 <_svfiprintf_r+0x130>
 800ca32:	7863      	ldrb	r3, [r4, #1]
 800ca34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca36:	d132      	bne.n	800ca9e <_svfiprintf_r+0x186>
 800ca38:	9b03      	ldr	r3, [sp, #12]
 800ca3a:	1d1a      	adds	r2, r3, #4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	9203      	str	r2, [sp, #12]
 800ca40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca44:	3402      	adds	r4, #2
 800ca46:	9305      	str	r3, [sp, #20]
 800ca48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb0c <_svfiprintf_r+0x1f4>
 800ca4c:	7821      	ldrb	r1, [r4, #0]
 800ca4e:	2203      	movs	r2, #3
 800ca50:	4650      	mov	r0, sl
 800ca52:	f7f3 fc45 	bl	80002e0 <memchr>
 800ca56:	b138      	cbz	r0, 800ca68 <_svfiprintf_r+0x150>
 800ca58:	9b04      	ldr	r3, [sp, #16]
 800ca5a:	eba0 000a 	sub.w	r0, r0, sl
 800ca5e:	2240      	movs	r2, #64	@ 0x40
 800ca60:	4082      	lsls	r2, r0
 800ca62:	4313      	orrs	r3, r2
 800ca64:	3401      	adds	r4, #1
 800ca66:	9304      	str	r3, [sp, #16]
 800ca68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6c:	4824      	ldr	r0, [pc, #144]	@ (800cb00 <_svfiprintf_r+0x1e8>)
 800ca6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca72:	2206      	movs	r2, #6
 800ca74:	f7f3 fc34 	bl	80002e0 <memchr>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d036      	beq.n	800caea <_svfiprintf_r+0x1d2>
 800ca7c:	4b21      	ldr	r3, [pc, #132]	@ (800cb04 <_svfiprintf_r+0x1ec>)
 800ca7e:	bb1b      	cbnz	r3, 800cac8 <_svfiprintf_r+0x1b0>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	3307      	adds	r3, #7
 800ca84:	f023 0307 	bic.w	r3, r3, #7
 800ca88:	3308      	adds	r3, #8
 800ca8a:	9303      	str	r3, [sp, #12]
 800ca8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca8e:	4433      	add	r3, r6
 800ca90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca92:	e76a      	b.n	800c96a <_svfiprintf_r+0x52>
 800ca94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca98:	460c      	mov	r4, r1
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	e7a8      	b.n	800c9f0 <_svfiprintf_r+0xd8>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	3401      	adds	r4, #1
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0c0a 	mov.w	ip, #10
 800caaa:	4620      	mov	r0, r4
 800caac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab0:	3a30      	subs	r2, #48	@ 0x30
 800cab2:	2a09      	cmp	r2, #9
 800cab4:	d903      	bls.n	800cabe <_svfiprintf_r+0x1a6>
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0c6      	beq.n	800ca48 <_svfiprintf_r+0x130>
 800caba:	9105      	str	r1, [sp, #20]
 800cabc:	e7c4      	b.n	800ca48 <_svfiprintf_r+0x130>
 800cabe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac2:	4604      	mov	r4, r0
 800cac4:	2301      	movs	r3, #1
 800cac6:	e7f0      	b.n	800caaa <_svfiprintf_r+0x192>
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	462a      	mov	r2, r5
 800cace:	4b0e      	ldr	r3, [pc, #56]	@ (800cb08 <_svfiprintf_r+0x1f0>)
 800cad0:	a904      	add	r1, sp, #16
 800cad2:	4638      	mov	r0, r7
 800cad4:	f7fc fd70 	bl	80095b8 <_printf_float>
 800cad8:	1c42      	adds	r2, r0, #1
 800cada:	4606      	mov	r6, r0
 800cadc:	d1d6      	bne.n	800ca8c <_svfiprintf_r+0x174>
 800cade:	89ab      	ldrh	r3, [r5, #12]
 800cae0:	065b      	lsls	r3, r3, #25
 800cae2:	f53f af2d 	bmi.w	800c940 <_svfiprintf_r+0x28>
 800cae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cae8:	e72c      	b.n	800c944 <_svfiprintf_r+0x2c>
 800caea:	ab03      	add	r3, sp, #12
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	462a      	mov	r2, r5
 800caf0:	4b05      	ldr	r3, [pc, #20]	@ (800cb08 <_svfiprintf_r+0x1f0>)
 800caf2:	a904      	add	r1, sp, #16
 800caf4:	4638      	mov	r0, r7
 800caf6:	f7fc ffe7 	bl	8009ac8 <_printf_i>
 800cafa:	e7ed      	b.n	800cad8 <_svfiprintf_r+0x1c0>
 800cafc:	0800dde1 	.word	0x0800dde1
 800cb00:	0800ddeb 	.word	0x0800ddeb
 800cb04:	080095b9 	.word	0x080095b9
 800cb08:	0800c861 	.word	0x0800c861
 800cb0c:	0800dde7 	.word	0x0800dde7

0800cb10 <__sflush_r>:
 800cb10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb18:	0716      	lsls	r6, r2, #28
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	460c      	mov	r4, r1
 800cb1e:	d454      	bmi.n	800cbca <__sflush_r+0xba>
 800cb20:	684b      	ldr	r3, [r1, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dc02      	bgt.n	800cb2c <__sflush_r+0x1c>
 800cb26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dd48      	ble.n	800cbbe <__sflush_r+0xae>
 800cb2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	d045      	beq.n	800cbbe <__sflush_r+0xae>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb38:	682f      	ldr	r7, [r5, #0]
 800cb3a:	6a21      	ldr	r1, [r4, #32]
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	d030      	beq.n	800cba2 <__sflush_r+0x92>
 800cb40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	0759      	lsls	r1, r3, #29
 800cb46:	d505      	bpl.n	800cb54 <__sflush_r+0x44>
 800cb48:	6863      	ldr	r3, [r4, #4]
 800cb4a:	1ad2      	subs	r2, r2, r3
 800cb4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb4e:	b10b      	cbz	r3, 800cb54 <__sflush_r+0x44>
 800cb50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb52:	1ad2      	subs	r2, r2, r3
 800cb54:	2300      	movs	r3, #0
 800cb56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb58:	6a21      	ldr	r1, [r4, #32]
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	47b0      	blx	r6
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	d106      	bne.n	800cb72 <__sflush_r+0x62>
 800cb64:	6829      	ldr	r1, [r5, #0]
 800cb66:	291d      	cmp	r1, #29
 800cb68:	d82b      	bhi.n	800cbc2 <__sflush_r+0xb2>
 800cb6a:	4a2a      	ldr	r2, [pc, #168]	@ (800cc14 <__sflush_r+0x104>)
 800cb6c:	410a      	asrs	r2, r1
 800cb6e:	07d6      	lsls	r6, r2, #31
 800cb70:	d427      	bmi.n	800cbc2 <__sflush_r+0xb2>
 800cb72:	2200      	movs	r2, #0
 800cb74:	6062      	str	r2, [r4, #4]
 800cb76:	04d9      	lsls	r1, r3, #19
 800cb78:	6922      	ldr	r2, [r4, #16]
 800cb7a:	6022      	str	r2, [r4, #0]
 800cb7c:	d504      	bpl.n	800cb88 <__sflush_r+0x78>
 800cb7e:	1c42      	adds	r2, r0, #1
 800cb80:	d101      	bne.n	800cb86 <__sflush_r+0x76>
 800cb82:	682b      	ldr	r3, [r5, #0]
 800cb84:	b903      	cbnz	r3, 800cb88 <__sflush_r+0x78>
 800cb86:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb8a:	602f      	str	r7, [r5, #0]
 800cb8c:	b1b9      	cbz	r1, 800cbbe <__sflush_r+0xae>
 800cb8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb92:	4299      	cmp	r1, r3
 800cb94:	d002      	beq.n	800cb9c <__sflush_r+0x8c>
 800cb96:	4628      	mov	r0, r5
 800cb98:	f7fe fa80 	bl	800b09c <_free_r>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cba0:	e00d      	b.n	800cbbe <__sflush_r+0xae>
 800cba2:	2301      	movs	r3, #1
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b0      	blx	r6
 800cba8:	4602      	mov	r2, r0
 800cbaa:	1c50      	adds	r0, r2, #1
 800cbac:	d1c9      	bne.n	800cb42 <__sflush_r+0x32>
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0c6      	beq.n	800cb42 <__sflush_r+0x32>
 800cbb4:	2b1d      	cmp	r3, #29
 800cbb6:	d001      	beq.n	800cbbc <__sflush_r+0xac>
 800cbb8:	2b16      	cmp	r3, #22
 800cbba:	d11e      	bne.n	800cbfa <__sflush_r+0xea>
 800cbbc:	602f      	str	r7, [r5, #0]
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	e022      	b.n	800cc08 <__sflush_r+0xf8>
 800cbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc6:	b21b      	sxth	r3, r3
 800cbc8:	e01b      	b.n	800cc02 <__sflush_r+0xf2>
 800cbca:	690f      	ldr	r7, [r1, #16]
 800cbcc:	2f00      	cmp	r7, #0
 800cbce:	d0f6      	beq.n	800cbbe <__sflush_r+0xae>
 800cbd0:	0793      	lsls	r3, r2, #30
 800cbd2:	680e      	ldr	r6, [r1, #0]
 800cbd4:	bf08      	it	eq
 800cbd6:	694b      	ldreq	r3, [r1, #20]
 800cbd8:	600f      	str	r7, [r1, #0]
 800cbda:	bf18      	it	ne
 800cbdc:	2300      	movne	r3, #0
 800cbde:	eba6 0807 	sub.w	r8, r6, r7
 800cbe2:	608b      	str	r3, [r1, #8]
 800cbe4:	f1b8 0f00 	cmp.w	r8, #0
 800cbe8:	dde9      	ble.n	800cbbe <__sflush_r+0xae>
 800cbea:	6a21      	ldr	r1, [r4, #32]
 800cbec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbee:	4643      	mov	r3, r8
 800cbf0:	463a      	mov	r2, r7
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	47b0      	blx	r6
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	dc08      	bgt.n	800cc0c <__sflush_r+0xfc>
 800cbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0c:	4407      	add	r7, r0
 800cc0e:	eba8 0800 	sub.w	r8, r8, r0
 800cc12:	e7e7      	b.n	800cbe4 <__sflush_r+0xd4>
 800cc14:	dfbffffe 	.word	0xdfbffffe

0800cc18 <_fflush_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	690b      	ldr	r3, [r1, #16]
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	b913      	cbnz	r3, 800cc28 <_fflush_r+0x10>
 800cc22:	2500      	movs	r5, #0
 800cc24:	4628      	mov	r0, r5
 800cc26:	bd38      	pop	{r3, r4, r5, pc}
 800cc28:	b118      	cbz	r0, 800cc32 <_fflush_r+0x1a>
 800cc2a:	6a03      	ldr	r3, [r0, #32]
 800cc2c:	b90b      	cbnz	r3, 800cc32 <_fflush_r+0x1a>
 800cc2e:	f7fd fb03 	bl	800a238 <__sinit>
 800cc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0f3      	beq.n	800cc22 <_fflush_r+0xa>
 800cc3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc3c:	07d0      	lsls	r0, r2, #31
 800cc3e:	d404      	bmi.n	800cc4a <_fflush_r+0x32>
 800cc40:	0599      	lsls	r1, r3, #22
 800cc42:	d402      	bmi.n	800cc4a <_fflush_r+0x32>
 800cc44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc46:	f7fd fc42 	bl	800a4ce <__retarget_lock_acquire_recursive>
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	f7ff ff5f 	bl	800cb10 <__sflush_r>
 800cc52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc54:	07da      	lsls	r2, r3, #31
 800cc56:	4605      	mov	r5, r0
 800cc58:	d4e4      	bmi.n	800cc24 <_fflush_r+0xc>
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	059b      	lsls	r3, r3, #22
 800cc5e:	d4e1      	bmi.n	800cc24 <_fflush_r+0xc>
 800cc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc62:	f7fd fc35 	bl	800a4d0 <__retarget_lock_release_recursive>
 800cc66:	e7dd      	b.n	800cc24 <_fflush_r+0xc>

0800cc68 <memmove>:
 800cc68:	4288      	cmp	r0, r1
 800cc6a:	b510      	push	{r4, lr}
 800cc6c:	eb01 0402 	add.w	r4, r1, r2
 800cc70:	d902      	bls.n	800cc78 <memmove+0x10>
 800cc72:	4284      	cmp	r4, r0
 800cc74:	4623      	mov	r3, r4
 800cc76:	d807      	bhi.n	800cc88 <memmove+0x20>
 800cc78:	1e43      	subs	r3, r0, #1
 800cc7a:	42a1      	cmp	r1, r4
 800cc7c:	d008      	beq.n	800cc90 <memmove+0x28>
 800cc7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc86:	e7f8      	b.n	800cc7a <memmove+0x12>
 800cc88:	4402      	add	r2, r0
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	428a      	cmp	r2, r1
 800cc8e:	d100      	bne.n	800cc92 <memmove+0x2a>
 800cc90:	bd10      	pop	{r4, pc}
 800cc92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc9a:	e7f7      	b.n	800cc8c <memmove+0x24>

0800cc9c <strncmp>:
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	b16a      	cbz	r2, 800ccbc <strncmp+0x20>
 800cca0:	3901      	subs	r1, #1
 800cca2:	1884      	adds	r4, r0, r2
 800cca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d103      	bne.n	800ccb8 <strncmp+0x1c>
 800ccb0:	42a0      	cmp	r0, r4
 800ccb2:	d001      	beq.n	800ccb8 <strncmp+0x1c>
 800ccb4:	2a00      	cmp	r2, #0
 800ccb6:	d1f5      	bne.n	800cca4 <strncmp+0x8>
 800ccb8:	1ad0      	subs	r0, r2, r3
 800ccba:	bd10      	pop	{r4, pc}
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	e7fc      	b.n	800ccba <strncmp+0x1e>

0800ccc0 <_sbrk_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d06      	ldr	r5, [pc, #24]	@ (800ccdc <_sbrk_r+0x1c>)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f4 fbee 	bl	80014ac <_sbrk>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_sbrk_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_sbrk_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	2400046c 	.word	0x2400046c

0800cce0 <memcpy>:
 800cce0:	440a      	add	r2, r1
 800cce2:	4291      	cmp	r1, r2
 800cce4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cce8:	d100      	bne.n	800ccec <memcpy+0xc>
 800ccea:	4770      	bx	lr
 800ccec:	b510      	push	{r4, lr}
 800ccee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccf6:	4291      	cmp	r1, r2
 800ccf8:	d1f9      	bne.n	800ccee <memcpy+0xe>
 800ccfa:	bd10      	pop	{r4, pc}
 800ccfc:	0000      	movs	r0, r0
	...

0800cd00 <nan>:
 800cd00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd08 <nan+0x8>
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	00000000 	.word	0x00000000
 800cd0c:	7ff80000 	.word	0x7ff80000

0800cd10 <__assert_func>:
 800cd10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd12:	4614      	mov	r4, r2
 800cd14:	461a      	mov	r2, r3
 800cd16:	4b09      	ldr	r3, [pc, #36]	@ (800cd3c <__assert_func+0x2c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	68d8      	ldr	r0, [r3, #12]
 800cd1e:	b954      	cbnz	r4, 800cd36 <__assert_func+0x26>
 800cd20:	4b07      	ldr	r3, [pc, #28]	@ (800cd40 <__assert_func+0x30>)
 800cd22:	461c      	mov	r4, r3
 800cd24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd28:	9100      	str	r1, [sp, #0]
 800cd2a:	462b      	mov	r3, r5
 800cd2c:	4905      	ldr	r1, [pc, #20]	@ (800cd44 <__assert_func+0x34>)
 800cd2e:	f000 fba7 	bl	800d480 <fiprintf>
 800cd32:	f000 fbb7 	bl	800d4a4 <abort>
 800cd36:	4b04      	ldr	r3, [pc, #16]	@ (800cd48 <__assert_func+0x38>)
 800cd38:	e7f4      	b.n	800cd24 <__assert_func+0x14>
 800cd3a:	bf00      	nop
 800cd3c:	2400001c 	.word	0x2400001c
 800cd40:	0800de35 	.word	0x0800de35
 800cd44:	0800de07 	.word	0x0800de07
 800cd48:	0800ddfa 	.word	0x0800ddfa

0800cd4c <_calloc_r>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	fba1 5402 	umull	r5, r4, r1, r2
 800cd52:	b93c      	cbnz	r4, 800cd64 <_calloc_r+0x18>
 800cd54:	4629      	mov	r1, r5
 800cd56:	f7fe fa15 	bl	800b184 <_malloc_r>
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	b928      	cbnz	r0, 800cd6a <_calloc_r+0x1e>
 800cd5e:	2600      	movs	r6, #0
 800cd60:	4630      	mov	r0, r6
 800cd62:	bd70      	pop	{r4, r5, r6, pc}
 800cd64:	220c      	movs	r2, #12
 800cd66:	6002      	str	r2, [r0, #0]
 800cd68:	e7f9      	b.n	800cd5e <_calloc_r+0x12>
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7fd fb30 	bl	800a3d2 <memset>
 800cd72:	e7f5      	b.n	800cd60 <_calloc_r+0x14>

0800cd74 <rshift>:
 800cd74:	6903      	ldr	r3, [r0, #16]
 800cd76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd82:	f100 0414 	add.w	r4, r0, #20
 800cd86:	dd45      	ble.n	800ce14 <rshift+0xa0>
 800cd88:	f011 011f 	ands.w	r1, r1, #31
 800cd8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd94:	d10c      	bne.n	800cdb0 <rshift+0x3c>
 800cd96:	f100 0710 	add.w	r7, r0, #16
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	42b1      	cmp	r1, r6
 800cd9e:	d334      	bcc.n	800ce0a <rshift+0x96>
 800cda0:	1a9b      	subs	r3, r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	1eea      	subs	r2, r5, #3
 800cda6:	4296      	cmp	r6, r2
 800cda8:	bf38      	it	cc
 800cdaa:	2300      	movcc	r3, #0
 800cdac:	4423      	add	r3, r4
 800cdae:	e015      	b.n	800cddc <rshift+0x68>
 800cdb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdb4:	f1c1 0820 	rsb	r8, r1, #32
 800cdb8:	40cf      	lsrs	r7, r1
 800cdba:	f105 0e04 	add.w	lr, r5, #4
 800cdbe:	46a1      	mov	r9, r4
 800cdc0:	4576      	cmp	r6, lr
 800cdc2:	46f4      	mov	ip, lr
 800cdc4:	d815      	bhi.n	800cdf2 <rshift+0x7e>
 800cdc6:	1a9a      	subs	r2, r3, r2
 800cdc8:	0092      	lsls	r2, r2, #2
 800cdca:	3a04      	subs	r2, #4
 800cdcc:	3501      	adds	r5, #1
 800cdce:	42ae      	cmp	r6, r5
 800cdd0:	bf38      	it	cc
 800cdd2:	2200      	movcc	r2, #0
 800cdd4:	18a3      	adds	r3, r4, r2
 800cdd6:	50a7      	str	r7, [r4, r2]
 800cdd8:	b107      	cbz	r7, 800cddc <rshift+0x68>
 800cdda:	3304      	adds	r3, #4
 800cddc:	1b1a      	subs	r2, r3, r4
 800cdde:	42a3      	cmp	r3, r4
 800cde0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cde4:	bf08      	it	eq
 800cde6:	2300      	moveq	r3, #0
 800cde8:	6102      	str	r2, [r0, #16]
 800cdea:	bf08      	it	eq
 800cdec:	6143      	streq	r3, [r0, #20]
 800cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf2:	f8dc c000 	ldr.w	ip, [ip]
 800cdf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdfa:	ea4c 0707 	orr.w	r7, ip, r7
 800cdfe:	f849 7b04 	str.w	r7, [r9], #4
 800ce02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce06:	40cf      	lsrs	r7, r1
 800ce08:	e7da      	b.n	800cdc0 <rshift+0x4c>
 800ce0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce12:	e7c3      	b.n	800cd9c <rshift+0x28>
 800ce14:	4623      	mov	r3, r4
 800ce16:	e7e1      	b.n	800cddc <rshift+0x68>

0800ce18 <__hexdig_fun>:
 800ce18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ce1c:	2b09      	cmp	r3, #9
 800ce1e:	d802      	bhi.n	800ce26 <__hexdig_fun+0xe>
 800ce20:	3820      	subs	r0, #32
 800ce22:	b2c0      	uxtb	r0, r0
 800ce24:	4770      	bx	lr
 800ce26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce2a:	2b05      	cmp	r3, #5
 800ce2c:	d801      	bhi.n	800ce32 <__hexdig_fun+0x1a>
 800ce2e:	3847      	subs	r0, #71	@ 0x47
 800ce30:	e7f7      	b.n	800ce22 <__hexdig_fun+0xa>
 800ce32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce36:	2b05      	cmp	r3, #5
 800ce38:	d801      	bhi.n	800ce3e <__hexdig_fun+0x26>
 800ce3a:	3827      	subs	r0, #39	@ 0x27
 800ce3c:	e7f1      	b.n	800ce22 <__hexdig_fun+0xa>
 800ce3e:	2000      	movs	r0, #0
 800ce40:	4770      	bx	lr
	...

0800ce44 <__gethex>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	b085      	sub	sp, #20
 800ce4a:	468a      	mov	sl, r1
 800ce4c:	9302      	str	r3, [sp, #8]
 800ce4e:	680b      	ldr	r3, [r1, #0]
 800ce50:	9001      	str	r0, [sp, #4]
 800ce52:	4690      	mov	r8, r2
 800ce54:	1c9c      	adds	r4, r3, #2
 800ce56:	46a1      	mov	r9, r4
 800ce58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ce5c:	2830      	cmp	r0, #48	@ 0x30
 800ce5e:	d0fa      	beq.n	800ce56 <__gethex+0x12>
 800ce60:	eba9 0303 	sub.w	r3, r9, r3
 800ce64:	f1a3 0b02 	sub.w	fp, r3, #2
 800ce68:	f7ff ffd6 	bl	800ce18 <__hexdig_fun>
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d168      	bne.n	800cf44 <__gethex+0x100>
 800ce72:	49a0      	ldr	r1, [pc, #640]	@ (800d0f4 <__gethex+0x2b0>)
 800ce74:	2201      	movs	r2, #1
 800ce76:	4648      	mov	r0, r9
 800ce78:	f7ff ff10 	bl	800cc9c <strncmp>
 800ce7c:	4607      	mov	r7, r0
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d167      	bne.n	800cf52 <__gethex+0x10e>
 800ce82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ce86:	4626      	mov	r6, r4
 800ce88:	f7ff ffc6 	bl	800ce18 <__hexdig_fun>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d062      	beq.n	800cf56 <__gethex+0x112>
 800ce90:	4623      	mov	r3, r4
 800ce92:	7818      	ldrb	r0, [r3, #0]
 800ce94:	2830      	cmp	r0, #48	@ 0x30
 800ce96:	4699      	mov	r9, r3
 800ce98:	f103 0301 	add.w	r3, r3, #1
 800ce9c:	d0f9      	beq.n	800ce92 <__gethex+0x4e>
 800ce9e:	f7ff ffbb 	bl	800ce18 <__hexdig_fun>
 800cea2:	fab0 f580 	clz	r5, r0
 800cea6:	096d      	lsrs	r5, r5, #5
 800cea8:	f04f 0b01 	mov.w	fp, #1
 800ceac:	464a      	mov	r2, r9
 800ceae:	4616      	mov	r6, r2
 800ceb0:	3201      	adds	r2, #1
 800ceb2:	7830      	ldrb	r0, [r6, #0]
 800ceb4:	f7ff ffb0 	bl	800ce18 <__hexdig_fun>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d1f8      	bne.n	800ceae <__gethex+0x6a>
 800cebc:	498d      	ldr	r1, [pc, #564]	@ (800d0f4 <__gethex+0x2b0>)
 800cebe:	2201      	movs	r2, #1
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7ff feeb 	bl	800cc9c <strncmp>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d13f      	bne.n	800cf4a <__gethex+0x106>
 800ceca:	b944      	cbnz	r4, 800cede <__gethex+0x9a>
 800cecc:	1c74      	adds	r4, r6, #1
 800cece:	4622      	mov	r2, r4
 800ced0:	4616      	mov	r6, r2
 800ced2:	3201      	adds	r2, #1
 800ced4:	7830      	ldrb	r0, [r6, #0]
 800ced6:	f7ff ff9f 	bl	800ce18 <__hexdig_fun>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d1f8      	bne.n	800ced0 <__gethex+0x8c>
 800cede:	1ba4      	subs	r4, r4, r6
 800cee0:	00a7      	lsls	r7, r4, #2
 800cee2:	7833      	ldrb	r3, [r6, #0]
 800cee4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cee8:	2b50      	cmp	r3, #80	@ 0x50
 800ceea:	d13e      	bne.n	800cf6a <__gethex+0x126>
 800ceec:	7873      	ldrb	r3, [r6, #1]
 800ceee:	2b2b      	cmp	r3, #43	@ 0x2b
 800cef0:	d033      	beq.n	800cf5a <__gethex+0x116>
 800cef2:	2b2d      	cmp	r3, #45	@ 0x2d
 800cef4:	d034      	beq.n	800cf60 <__gethex+0x11c>
 800cef6:	1c71      	adds	r1, r6, #1
 800cef8:	2400      	movs	r4, #0
 800cefa:	7808      	ldrb	r0, [r1, #0]
 800cefc:	f7ff ff8c 	bl	800ce18 <__hexdig_fun>
 800cf00:	1e43      	subs	r3, r0, #1
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b18      	cmp	r3, #24
 800cf06:	d830      	bhi.n	800cf6a <__gethex+0x126>
 800cf08:	f1a0 0210 	sub.w	r2, r0, #16
 800cf0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf10:	f7ff ff82 	bl	800ce18 <__hexdig_fun>
 800cf14:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf18:	fa5f fc8c 	uxtb.w	ip, ip
 800cf1c:	f1bc 0f18 	cmp.w	ip, #24
 800cf20:	f04f 030a 	mov.w	r3, #10
 800cf24:	d91e      	bls.n	800cf64 <__gethex+0x120>
 800cf26:	b104      	cbz	r4, 800cf2a <__gethex+0xe6>
 800cf28:	4252      	negs	r2, r2
 800cf2a:	4417      	add	r7, r2
 800cf2c:	f8ca 1000 	str.w	r1, [sl]
 800cf30:	b1ed      	cbz	r5, 800cf6e <__gethex+0x12a>
 800cf32:	f1bb 0f00 	cmp.w	fp, #0
 800cf36:	bf0c      	ite	eq
 800cf38:	2506      	moveq	r5, #6
 800cf3a:	2500      	movne	r5, #0
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	b005      	add	sp, #20
 800cf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf44:	2500      	movs	r5, #0
 800cf46:	462c      	mov	r4, r5
 800cf48:	e7b0      	b.n	800ceac <__gethex+0x68>
 800cf4a:	2c00      	cmp	r4, #0
 800cf4c:	d1c7      	bne.n	800cede <__gethex+0x9a>
 800cf4e:	4627      	mov	r7, r4
 800cf50:	e7c7      	b.n	800cee2 <__gethex+0x9e>
 800cf52:	464e      	mov	r6, r9
 800cf54:	462f      	mov	r7, r5
 800cf56:	2501      	movs	r5, #1
 800cf58:	e7c3      	b.n	800cee2 <__gethex+0x9e>
 800cf5a:	2400      	movs	r4, #0
 800cf5c:	1cb1      	adds	r1, r6, #2
 800cf5e:	e7cc      	b.n	800cefa <__gethex+0xb6>
 800cf60:	2401      	movs	r4, #1
 800cf62:	e7fb      	b.n	800cf5c <__gethex+0x118>
 800cf64:	fb03 0002 	mla	r0, r3, r2, r0
 800cf68:	e7ce      	b.n	800cf08 <__gethex+0xc4>
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	e7de      	b.n	800cf2c <__gethex+0xe8>
 800cf6e:	eba6 0309 	sub.w	r3, r6, r9
 800cf72:	3b01      	subs	r3, #1
 800cf74:	4629      	mov	r1, r5
 800cf76:	2b07      	cmp	r3, #7
 800cf78:	dc0a      	bgt.n	800cf90 <__gethex+0x14c>
 800cf7a:	9801      	ldr	r0, [sp, #4]
 800cf7c:	f7fe f98e 	bl	800b29c <_Balloc>
 800cf80:	4604      	mov	r4, r0
 800cf82:	b940      	cbnz	r0, 800cf96 <__gethex+0x152>
 800cf84:	4b5c      	ldr	r3, [pc, #368]	@ (800d0f8 <__gethex+0x2b4>)
 800cf86:	4602      	mov	r2, r0
 800cf88:	21e4      	movs	r1, #228	@ 0xe4
 800cf8a:	485c      	ldr	r0, [pc, #368]	@ (800d0fc <__gethex+0x2b8>)
 800cf8c:	f7ff fec0 	bl	800cd10 <__assert_func>
 800cf90:	3101      	adds	r1, #1
 800cf92:	105b      	asrs	r3, r3, #1
 800cf94:	e7ef      	b.n	800cf76 <__gethex+0x132>
 800cf96:	f100 0a14 	add.w	sl, r0, #20
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4655      	mov	r5, sl
 800cf9e:	469b      	mov	fp, r3
 800cfa0:	45b1      	cmp	r9, r6
 800cfa2:	d337      	bcc.n	800d014 <__gethex+0x1d0>
 800cfa4:	f845 bb04 	str.w	fp, [r5], #4
 800cfa8:	eba5 050a 	sub.w	r5, r5, sl
 800cfac:	10ad      	asrs	r5, r5, #2
 800cfae:	6125      	str	r5, [r4, #16]
 800cfb0:	4658      	mov	r0, fp
 800cfb2:	f7fe fa65 	bl	800b480 <__hi0bits>
 800cfb6:	016d      	lsls	r5, r5, #5
 800cfb8:	f8d8 6000 	ldr.w	r6, [r8]
 800cfbc:	1a2d      	subs	r5, r5, r0
 800cfbe:	42b5      	cmp	r5, r6
 800cfc0:	dd54      	ble.n	800d06c <__gethex+0x228>
 800cfc2:	1bad      	subs	r5, r5, r6
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f7fe fdf6 	bl	800bbb8 <__any_on>
 800cfcc:	4681      	mov	r9, r0
 800cfce:	b178      	cbz	r0, 800cff0 <__gethex+0x1ac>
 800cfd0:	1e6b      	subs	r3, r5, #1
 800cfd2:	1159      	asrs	r1, r3, #5
 800cfd4:	f003 021f 	and.w	r2, r3, #31
 800cfd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfdc:	f04f 0901 	mov.w	r9, #1
 800cfe0:	fa09 f202 	lsl.w	r2, r9, r2
 800cfe4:	420a      	tst	r2, r1
 800cfe6:	d003      	beq.n	800cff0 <__gethex+0x1ac>
 800cfe8:	454b      	cmp	r3, r9
 800cfea:	dc36      	bgt.n	800d05a <__gethex+0x216>
 800cfec:	f04f 0902 	mov.w	r9, #2
 800cff0:	4629      	mov	r1, r5
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7ff febe 	bl	800cd74 <rshift>
 800cff8:	442f      	add	r7, r5
 800cffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cffe:	42bb      	cmp	r3, r7
 800d000:	da42      	bge.n	800d088 <__gethex+0x244>
 800d002:	9801      	ldr	r0, [sp, #4]
 800d004:	4621      	mov	r1, r4
 800d006:	f7fe f989 	bl	800b31c <_Bfree>
 800d00a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d00c:	2300      	movs	r3, #0
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	25a3      	movs	r5, #163	@ 0xa3
 800d012:	e793      	b.n	800cf3c <__gethex+0xf8>
 800d014:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d018:	2a2e      	cmp	r2, #46	@ 0x2e
 800d01a:	d012      	beq.n	800d042 <__gethex+0x1fe>
 800d01c:	2b20      	cmp	r3, #32
 800d01e:	d104      	bne.n	800d02a <__gethex+0x1e6>
 800d020:	f845 bb04 	str.w	fp, [r5], #4
 800d024:	f04f 0b00 	mov.w	fp, #0
 800d028:	465b      	mov	r3, fp
 800d02a:	7830      	ldrb	r0, [r6, #0]
 800d02c:	9303      	str	r3, [sp, #12]
 800d02e:	f7ff fef3 	bl	800ce18 <__hexdig_fun>
 800d032:	9b03      	ldr	r3, [sp, #12]
 800d034:	f000 000f 	and.w	r0, r0, #15
 800d038:	4098      	lsls	r0, r3
 800d03a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d03e:	3304      	adds	r3, #4
 800d040:	e7ae      	b.n	800cfa0 <__gethex+0x15c>
 800d042:	45b1      	cmp	r9, r6
 800d044:	d8ea      	bhi.n	800d01c <__gethex+0x1d8>
 800d046:	492b      	ldr	r1, [pc, #172]	@ (800d0f4 <__gethex+0x2b0>)
 800d048:	9303      	str	r3, [sp, #12]
 800d04a:	2201      	movs	r2, #1
 800d04c:	4630      	mov	r0, r6
 800d04e:	f7ff fe25 	bl	800cc9c <strncmp>
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	2800      	cmp	r0, #0
 800d056:	d1e1      	bne.n	800d01c <__gethex+0x1d8>
 800d058:	e7a2      	b.n	800cfa0 <__gethex+0x15c>
 800d05a:	1ea9      	subs	r1, r5, #2
 800d05c:	4620      	mov	r0, r4
 800d05e:	f7fe fdab 	bl	800bbb8 <__any_on>
 800d062:	2800      	cmp	r0, #0
 800d064:	d0c2      	beq.n	800cfec <__gethex+0x1a8>
 800d066:	f04f 0903 	mov.w	r9, #3
 800d06a:	e7c1      	b.n	800cff0 <__gethex+0x1ac>
 800d06c:	da09      	bge.n	800d082 <__gethex+0x23e>
 800d06e:	1b75      	subs	r5, r6, r5
 800d070:	4621      	mov	r1, r4
 800d072:	9801      	ldr	r0, [sp, #4]
 800d074:	462a      	mov	r2, r5
 800d076:	f7fe fb69 	bl	800b74c <__lshift>
 800d07a:	1b7f      	subs	r7, r7, r5
 800d07c:	4604      	mov	r4, r0
 800d07e:	f100 0a14 	add.w	sl, r0, #20
 800d082:	f04f 0900 	mov.w	r9, #0
 800d086:	e7b8      	b.n	800cffa <__gethex+0x1b6>
 800d088:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d08c:	42bd      	cmp	r5, r7
 800d08e:	dd6f      	ble.n	800d170 <__gethex+0x32c>
 800d090:	1bed      	subs	r5, r5, r7
 800d092:	42ae      	cmp	r6, r5
 800d094:	dc34      	bgt.n	800d100 <__gethex+0x2bc>
 800d096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d022      	beq.n	800d0e4 <__gethex+0x2a0>
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d024      	beq.n	800d0ec <__gethex+0x2a8>
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d115      	bne.n	800d0d2 <__gethex+0x28e>
 800d0a6:	42ae      	cmp	r6, r5
 800d0a8:	d113      	bne.n	800d0d2 <__gethex+0x28e>
 800d0aa:	2e01      	cmp	r6, #1
 800d0ac:	d10b      	bne.n	800d0c6 <__gethex+0x282>
 800d0ae:	9a02      	ldr	r2, [sp, #8]
 800d0b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0b4:	6013      	str	r3, [r2, #0]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	6123      	str	r3, [r4, #16]
 800d0ba:	f8ca 3000 	str.w	r3, [sl]
 800d0be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0c0:	2562      	movs	r5, #98	@ 0x62
 800d0c2:	601c      	str	r4, [r3, #0]
 800d0c4:	e73a      	b.n	800cf3c <__gethex+0xf8>
 800d0c6:	1e71      	subs	r1, r6, #1
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f7fe fd75 	bl	800bbb8 <__any_on>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d1ed      	bne.n	800d0ae <__gethex+0x26a>
 800d0d2:	9801      	ldr	r0, [sp, #4]
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	f7fe f921 	bl	800b31c <_Bfree>
 800d0da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0dc:	2300      	movs	r3, #0
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	2550      	movs	r5, #80	@ 0x50
 800d0e2:	e72b      	b.n	800cf3c <__gethex+0xf8>
 800d0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1f3      	bne.n	800d0d2 <__gethex+0x28e>
 800d0ea:	e7e0      	b.n	800d0ae <__gethex+0x26a>
 800d0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1dd      	bne.n	800d0ae <__gethex+0x26a>
 800d0f2:	e7ee      	b.n	800d0d2 <__gethex+0x28e>
 800d0f4:	0800dc88 	.word	0x0800dc88
 800d0f8:	0800db1d 	.word	0x0800db1d
 800d0fc:	0800de36 	.word	0x0800de36
 800d100:	1e6f      	subs	r7, r5, #1
 800d102:	f1b9 0f00 	cmp.w	r9, #0
 800d106:	d130      	bne.n	800d16a <__gethex+0x326>
 800d108:	b127      	cbz	r7, 800d114 <__gethex+0x2d0>
 800d10a:	4639      	mov	r1, r7
 800d10c:	4620      	mov	r0, r4
 800d10e:	f7fe fd53 	bl	800bbb8 <__any_on>
 800d112:	4681      	mov	r9, r0
 800d114:	117a      	asrs	r2, r7, #5
 800d116:	2301      	movs	r3, #1
 800d118:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d11c:	f007 071f 	and.w	r7, r7, #31
 800d120:	40bb      	lsls	r3, r7
 800d122:	4213      	tst	r3, r2
 800d124:	4629      	mov	r1, r5
 800d126:	4620      	mov	r0, r4
 800d128:	bf18      	it	ne
 800d12a:	f049 0902 	orrne.w	r9, r9, #2
 800d12e:	f7ff fe21 	bl	800cd74 <rshift>
 800d132:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d136:	1b76      	subs	r6, r6, r5
 800d138:	2502      	movs	r5, #2
 800d13a:	f1b9 0f00 	cmp.w	r9, #0
 800d13e:	d047      	beq.n	800d1d0 <__gethex+0x38c>
 800d140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d015      	beq.n	800d174 <__gethex+0x330>
 800d148:	2b03      	cmp	r3, #3
 800d14a:	d017      	beq.n	800d17c <__gethex+0x338>
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d109      	bne.n	800d164 <__gethex+0x320>
 800d150:	f019 0f02 	tst.w	r9, #2
 800d154:	d006      	beq.n	800d164 <__gethex+0x320>
 800d156:	f8da 3000 	ldr.w	r3, [sl]
 800d15a:	ea49 0903 	orr.w	r9, r9, r3
 800d15e:	f019 0f01 	tst.w	r9, #1
 800d162:	d10e      	bne.n	800d182 <__gethex+0x33e>
 800d164:	f045 0510 	orr.w	r5, r5, #16
 800d168:	e032      	b.n	800d1d0 <__gethex+0x38c>
 800d16a:	f04f 0901 	mov.w	r9, #1
 800d16e:	e7d1      	b.n	800d114 <__gethex+0x2d0>
 800d170:	2501      	movs	r5, #1
 800d172:	e7e2      	b.n	800d13a <__gethex+0x2f6>
 800d174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d176:	f1c3 0301 	rsb	r3, r3, #1
 800d17a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d0f0      	beq.n	800d164 <__gethex+0x320>
 800d182:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d186:	f104 0314 	add.w	r3, r4, #20
 800d18a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d18e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d192:	f04f 0c00 	mov.w	ip, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1a0:	d01b      	beq.n	800d1da <__gethex+0x396>
 800d1a2:	3201      	adds	r2, #1
 800d1a4:	6002      	str	r2, [r0, #0]
 800d1a6:	2d02      	cmp	r5, #2
 800d1a8:	f104 0314 	add.w	r3, r4, #20
 800d1ac:	d13c      	bne.n	800d228 <__gethex+0x3e4>
 800d1ae:	f8d8 2000 	ldr.w	r2, [r8]
 800d1b2:	3a01      	subs	r2, #1
 800d1b4:	42b2      	cmp	r2, r6
 800d1b6:	d109      	bne.n	800d1cc <__gethex+0x388>
 800d1b8:	1171      	asrs	r1, r6, #5
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1c0:	f006 061f 	and.w	r6, r6, #31
 800d1c4:	fa02 f606 	lsl.w	r6, r2, r6
 800d1c8:	421e      	tst	r6, r3
 800d1ca:	d13a      	bne.n	800d242 <__gethex+0x3fe>
 800d1cc:	f045 0520 	orr.w	r5, r5, #32
 800d1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1d2:	601c      	str	r4, [r3, #0]
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	601f      	str	r7, [r3, #0]
 800d1d8:	e6b0      	b.n	800cf3c <__gethex+0xf8>
 800d1da:	4299      	cmp	r1, r3
 800d1dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d1e0:	d8d9      	bhi.n	800d196 <__gethex+0x352>
 800d1e2:	68a3      	ldr	r3, [r4, #8]
 800d1e4:	459b      	cmp	fp, r3
 800d1e6:	db17      	blt.n	800d218 <__gethex+0x3d4>
 800d1e8:	6861      	ldr	r1, [r4, #4]
 800d1ea:	9801      	ldr	r0, [sp, #4]
 800d1ec:	3101      	adds	r1, #1
 800d1ee:	f7fe f855 	bl	800b29c <_Balloc>
 800d1f2:	4681      	mov	r9, r0
 800d1f4:	b918      	cbnz	r0, 800d1fe <__gethex+0x3ba>
 800d1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d260 <__gethex+0x41c>)
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	2184      	movs	r1, #132	@ 0x84
 800d1fc:	e6c5      	b.n	800cf8a <__gethex+0x146>
 800d1fe:	6922      	ldr	r2, [r4, #16]
 800d200:	3202      	adds	r2, #2
 800d202:	f104 010c 	add.w	r1, r4, #12
 800d206:	0092      	lsls	r2, r2, #2
 800d208:	300c      	adds	r0, #12
 800d20a:	f7ff fd69 	bl	800cce0 <memcpy>
 800d20e:	4621      	mov	r1, r4
 800d210:	9801      	ldr	r0, [sp, #4]
 800d212:	f7fe f883 	bl	800b31c <_Bfree>
 800d216:	464c      	mov	r4, r9
 800d218:	6923      	ldr	r3, [r4, #16]
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d220:	6122      	str	r2, [r4, #16]
 800d222:	2201      	movs	r2, #1
 800d224:	615a      	str	r2, [r3, #20]
 800d226:	e7be      	b.n	800d1a6 <__gethex+0x362>
 800d228:	6922      	ldr	r2, [r4, #16]
 800d22a:	455a      	cmp	r2, fp
 800d22c:	dd0b      	ble.n	800d246 <__gethex+0x402>
 800d22e:	2101      	movs	r1, #1
 800d230:	4620      	mov	r0, r4
 800d232:	f7ff fd9f 	bl	800cd74 <rshift>
 800d236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d23a:	3701      	adds	r7, #1
 800d23c:	42bb      	cmp	r3, r7
 800d23e:	f6ff aee0 	blt.w	800d002 <__gethex+0x1be>
 800d242:	2501      	movs	r5, #1
 800d244:	e7c2      	b.n	800d1cc <__gethex+0x388>
 800d246:	f016 061f 	ands.w	r6, r6, #31
 800d24a:	d0fa      	beq.n	800d242 <__gethex+0x3fe>
 800d24c:	4453      	add	r3, sl
 800d24e:	f1c6 0620 	rsb	r6, r6, #32
 800d252:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d256:	f7fe f913 	bl	800b480 <__hi0bits>
 800d25a:	42b0      	cmp	r0, r6
 800d25c:	dbe7      	blt.n	800d22e <__gethex+0x3ea>
 800d25e:	e7f0      	b.n	800d242 <__gethex+0x3fe>
 800d260:	0800db1d 	.word	0x0800db1d

0800d264 <L_shift>:
 800d264:	f1c2 0208 	rsb	r2, r2, #8
 800d268:	0092      	lsls	r2, r2, #2
 800d26a:	b570      	push	{r4, r5, r6, lr}
 800d26c:	f1c2 0620 	rsb	r6, r2, #32
 800d270:	6843      	ldr	r3, [r0, #4]
 800d272:	6804      	ldr	r4, [r0, #0]
 800d274:	fa03 f506 	lsl.w	r5, r3, r6
 800d278:	432c      	orrs	r4, r5
 800d27a:	40d3      	lsrs	r3, r2
 800d27c:	6004      	str	r4, [r0, #0]
 800d27e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d282:	4288      	cmp	r0, r1
 800d284:	d3f4      	bcc.n	800d270 <L_shift+0xc>
 800d286:	bd70      	pop	{r4, r5, r6, pc}

0800d288 <__match>:
 800d288:	b530      	push	{r4, r5, lr}
 800d28a:	6803      	ldr	r3, [r0, #0]
 800d28c:	3301      	adds	r3, #1
 800d28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d292:	b914      	cbnz	r4, 800d29a <__match+0x12>
 800d294:	6003      	str	r3, [r0, #0]
 800d296:	2001      	movs	r0, #1
 800d298:	bd30      	pop	{r4, r5, pc}
 800d29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d29e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d2a2:	2d19      	cmp	r5, #25
 800d2a4:	bf98      	it	ls
 800d2a6:	3220      	addls	r2, #32
 800d2a8:	42a2      	cmp	r2, r4
 800d2aa:	d0f0      	beq.n	800d28e <__match+0x6>
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	e7f3      	b.n	800d298 <__match+0x10>

0800d2b0 <__hexnan>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	680b      	ldr	r3, [r1, #0]
 800d2b6:	6801      	ldr	r1, [r0, #0]
 800d2b8:	115e      	asrs	r6, r3, #5
 800d2ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2be:	f013 031f 	ands.w	r3, r3, #31
 800d2c2:	b087      	sub	sp, #28
 800d2c4:	bf18      	it	ne
 800d2c6:	3604      	addne	r6, #4
 800d2c8:	2500      	movs	r5, #0
 800d2ca:	1f37      	subs	r7, r6, #4
 800d2cc:	4682      	mov	sl, r0
 800d2ce:	4690      	mov	r8, r2
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2d6:	46b9      	mov	r9, r7
 800d2d8:	463c      	mov	r4, r7
 800d2da:	9502      	str	r5, [sp, #8]
 800d2dc:	46ab      	mov	fp, r5
 800d2de:	784a      	ldrb	r2, [r1, #1]
 800d2e0:	1c4b      	adds	r3, r1, #1
 800d2e2:	9303      	str	r3, [sp, #12]
 800d2e4:	b342      	cbz	r2, 800d338 <__hexnan+0x88>
 800d2e6:	4610      	mov	r0, r2
 800d2e8:	9105      	str	r1, [sp, #20]
 800d2ea:	9204      	str	r2, [sp, #16]
 800d2ec:	f7ff fd94 	bl	800ce18 <__hexdig_fun>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d151      	bne.n	800d398 <__hexnan+0xe8>
 800d2f4:	9a04      	ldr	r2, [sp, #16]
 800d2f6:	9905      	ldr	r1, [sp, #20]
 800d2f8:	2a20      	cmp	r2, #32
 800d2fa:	d818      	bhi.n	800d32e <__hexnan+0x7e>
 800d2fc:	9b02      	ldr	r3, [sp, #8]
 800d2fe:	459b      	cmp	fp, r3
 800d300:	dd13      	ble.n	800d32a <__hexnan+0x7a>
 800d302:	454c      	cmp	r4, r9
 800d304:	d206      	bcs.n	800d314 <__hexnan+0x64>
 800d306:	2d07      	cmp	r5, #7
 800d308:	dc04      	bgt.n	800d314 <__hexnan+0x64>
 800d30a:	462a      	mov	r2, r5
 800d30c:	4649      	mov	r1, r9
 800d30e:	4620      	mov	r0, r4
 800d310:	f7ff ffa8 	bl	800d264 <L_shift>
 800d314:	4544      	cmp	r4, r8
 800d316:	d952      	bls.n	800d3be <__hexnan+0x10e>
 800d318:	2300      	movs	r3, #0
 800d31a:	f1a4 0904 	sub.w	r9, r4, #4
 800d31e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d322:	f8cd b008 	str.w	fp, [sp, #8]
 800d326:	464c      	mov	r4, r9
 800d328:	461d      	mov	r5, r3
 800d32a:	9903      	ldr	r1, [sp, #12]
 800d32c:	e7d7      	b.n	800d2de <__hexnan+0x2e>
 800d32e:	2a29      	cmp	r2, #41	@ 0x29
 800d330:	d157      	bne.n	800d3e2 <__hexnan+0x132>
 800d332:	3102      	adds	r1, #2
 800d334:	f8ca 1000 	str.w	r1, [sl]
 800d338:	f1bb 0f00 	cmp.w	fp, #0
 800d33c:	d051      	beq.n	800d3e2 <__hexnan+0x132>
 800d33e:	454c      	cmp	r4, r9
 800d340:	d206      	bcs.n	800d350 <__hexnan+0xa0>
 800d342:	2d07      	cmp	r5, #7
 800d344:	dc04      	bgt.n	800d350 <__hexnan+0xa0>
 800d346:	462a      	mov	r2, r5
 800d348:	4649      	mov	r1, r9
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7ff ff8a 	bl	800d264 <L_shift>
 800d350:	4544      	cmp	r4, r8
 800d352:	d936      	bls.n	800d3c2 <__hexnan+0x112>
 800d354:	f1a8 0204 	sub.w	r2, r8, #4
 800d358:	4623      	mov	r3, r4
 800d35a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d35e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d362:	429f      	cmp	r7, r3
 800d364:	d2f9      	bcs.n	800d35a <__hexnan+0xaa>
 800d366:	1b3b      	subs	r3, r7, r4
 800d368:	f023 0303 	bic.w	r3, r3, #3
 800d36c:	3304      	adds	r3, #4
 800d36e:	3401      	adds	r4, #1
 800d370:	3e03      	subs	r6, #3
 800d372:	42b4      	cmp	r4, r6
 800d374:	bf88      	it	hi
 800d376:	2304      	movhi	r3, #4
 800d378:	4443      	add	r3, r8
 800d37a:	2200      	movs	r2, #0
 800d37c:	f843 2b04 	str.w	r2, [r3], #4
 800d380:	429f      	cmp	r7, r3
 800d382:	d2fb      	bcs.n	800d37c <__hexnan+0xcc>
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	b91b      	cbnz	r3, 800d390 <__hexnan+0xe0>
 800d388:	4547      	cmp	r7, r8
 800d38a:	d128      	bne.n	800d3de <__hexnan+0x12e>
 800d38c:	2301      	movs	r3, #1
 800d38e:	603b      	str	r3, [r7, #0]
 800d390:	2005      	movs	r0, #5
 800d392:	b007      	add	sp, #28
 800d394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d398:	3501      	adds	r5, #1
 800d39a:	2d08      	cmp	r5, #8
 800d39c:	f10b 0b01 	add.w	fp, fp, #1
 800d3a0:	dd06      	ble.n	800d3b0 <__hexnan+0x100>
 800d3a2:	4544      	cmp	r4, r8
 800d3a4:	d9c1      	bls.n	800d32a <__hexnan+0x7a>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3ac:	2501      	movs	r5, #1
 800d3ae:	3c04      	subs	r4, #4
 800d3b0:	6822      	ldr	r2, [r4, #0]
 800d3b2:	f000 000f 	and.w	r0, r0, #15
 800d3b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3ba:	6020      	str	r0, [r4, #0]
 800d3bc:	e7b5      	b.n	800d32a <__hexnan+0x7a>
 800d3be:	2508      	movs	r5, #8
 800d3c0:	e7b3      	b.n	800d32a <__hexnan+0x7a>
 800d3c2:	9b01      	ldr	r3, [sp, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d0dd      	beq.n	800d384 <__hexnan+0xd4>
 800d3c8:	f1c3 0320 	rsb	r3, r3, #32
 800d3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d0:	40da      	lsrs	r2, r3
 800d3d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3d6:	4013      	ands	r3, r2
 800d3d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3dc:	e7d2      	b.n	800d384 <__hexnan+0xd4>
 800d3de:	3f04      	subs	r7, #4
 800d3e0:	e7d0      	b.n	800d384 <__hexnan+0xd4>
 800d3e2:	2004      	movs	r0, #4
 800d3e4:	e7d5      	b.n	800d392 <__hexnan+0xe2>

0800d3e6 <__ascii_mbtowc>:
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	b901      	cbnz	r1, 800d3ec <__ascii_mbtowc+0x6>
 800d3ea:	a901      	add	r1, sp, #4
 800d3ec:	b142      	cbz	r2, 800d400 <__ascii_mbtowc+0x1a>
 800d3ee:	b14b      	cbz	r3, 800d404 <__ascii_mbtowc+0x1e>
 800d3f0:	7813      	ldrb	r3, [r2, #0]
 800d3f2:	600b      	str	r3, [r1, #0]
 800d3f4:	7812      	ldrb	r2, [r2, #0]
 800d3f6:	1e10      	subs	r0, r2, #0
 800d3f8:	bf18      	it	ne
 800d3fa:	2001      	movne	r0, #1
 800d3fc:	b002      	add	sp, #8
 800d3fe:	4770      	bx	lr
 800d400:	4610      	mov	r0, r2
 800d402:	e7fb      	b.n	800d3fc <__ascii_mbtowc+0x16>
 800d404:	f06f 0001 	mvn.w	r0, #1
 800d408:	e7f8      	b.n	800d3fc <__ascii_mbtowc+0x16>

0800d40a <_realloc_r>:
 800d40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d40e:	4680      	mov	r8, r0
 800d410:	4615      	mov	r5, r2
 800d412:	460c      	mov	r4, r1
 800d414:	b921      	cbnz	r1, 800d420 <_realloc_r+0x16>
 800d416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d41a:	4611      	mov	r1, r2
 800d41c:	f7fd beb2 	b.w	800b184 <_malloc_r>
 800d420:	b92a      	cbnz	r2, 800d42e <_realloc_r+0x24>
 800d422:	f7fd fe3b 	bl	800b09c <_free_r>
 800d426:	2400      	movs	r4, #0
 800d428:	4620      	mov	r0, r4
 800d42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42e:	f000 f840 	bl	800d4b2 <_malloc_usable_size_r>
 800d432:	4285      	cmp	r5, r0
 800d434:	4606      	mov	r6, r0
 800d436:	d802      	bhi.n	800d43e <_realloc_r+0x34>
 800d438:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d43c:	d8f4      	bhi.n	800d428 <_realloc_r+0x1e>
 800d43e:	4629      	mov	r1, r5
 800d440:	4640      	mov	r0, r8
 800d442:	f7fd fe9f 	bl	800b184 <_malloc_r>
 800d446:	4607      	mov	r7, r0
 800d448:	2800      	cmp	r0, #0
 800d44a:	d0ec      	beq.n	800d426 <_realloc_r+0x1c>
 800d44c:	42b5      	cmp	r5, r6
 800d44e:	462a      	mov	r2, r5
 800d450:	4621      	mov	r1, r4
 800d452:	bf28      	it	cs
 800d454:	4632      	movcs	r2, r6
 800d456:	f7ff fc43 	bl	800cce0 <memcpy>
 800d45a:	4621      	mov	r1, r4
 800d45c:	4640      	mov	r0, r8
 800d45e:	f7fd fe1d 	bl	800b09c <_free_r>
 800d462:	463c      	mov	r4, r7
 800d464:	e7e0      	b.n	800d428 <_realloc_r+0x1e>

0800d466 <__ascii_wctomb>:
 800d466:	4603      	mov	r3, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	b141      	cbz	r1, 800d47e <__ascii_wctomb+0x18>
 800d46c:	2aff      	cmp	r2, #255	@ 0xff
 800d46e:	d904      	bls.n	800d47a <__ascii_wctomb+0x14>
 800d470:	228a      	movs	r2, #138	@ 0x8a
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	4770      	bx	lr
 800d47a:	700a      	strb	r2, [r1, #0]
 800d47c:	2001      	movs	r0, #1
 800d47e:	4770      	bx	lr

0800d480 <fiprintf>:
 800d480:	b40e      	push	{r1, r2, r3}
 800d482:	b503      	push	{r0, r1, lr}
 800d484:	4601      	mov	r1, r0
 800d486:	ab03      	add	r3, sp, #12
 800d488:	4805      	ldr	r0, [pc, #20]	@ (800d4a0 <fiprintf+0x20>)
 800d48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d48e:	6800      	ldr	r0, [r0, #0]
 800d490:	9301      	str	r3, [sp, #4]
 800d492:	f000 f83f 	bl	800d514 <_vfiprintf_r>
 800d496:	b002      	add	sp, #8
 800d498:	f85d eb04 	ldr.w	lr, [sp], #4
 800d49c:	b003      	add	sp, #12
 800d49e:	4770      	bx	lr
 800d4a0:	2400001c 	.word	0x2400001c

0800d4a4 <abort>:
 800d4a4:	b508      	push	{r3, lr}
 800d4a6:	2006      	movs	r0, #6
 800d4a8:	f000 fa08 	bl	800d8bc <raise>
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	f7f3 ff85 	bl	80013bc <_exit>

0800d4b2 <_malloc_usable_size_r>:
 800d4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4b6:	1f18      	subs	r0, r3, #4
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfbc      	itt	lt
 800d4bc:	580b      	ldrlt	r3, [r1, r0]
 800d4be:	18c0      	addlt	r0, r0, r3
 800d4c0:	4770      	bx	lr

0800d4c2 <__sfputc_r>:
 800d4c2:	6893      	ldr	r3, [r2, #8]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	b410      	push	{r4}
 800d4ca:	6093      	str	r3, [r2, #8]
 800d4cc:	da08      	bge.n	800d4e0 <__sfputc_r+0x1e>
 800d4ce:	6994      	ldr	r4, [r2, #24]
 800d4d0:	42a3      	cmp	r3, r4
 800d4d2:	db01      	blt.n	800d4d8 <__sfputc_r+0x16>
 800d4d4:	290a      	cmp	r1, #10
 800d4d6:	d103      	bne.n	800d4e0 <__sfputc_r+0x1e>
 800d4d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4dc:	f000 b932 	b.w	800d744 <__swbuf_r>
 800d4e0:	6813      	ldr	r3, [r2, #0]
 800d4e2:	1c58      	adds	r0, r3, #1
 800d4e4:	6010      	str	r0, [r2, #0]
 800d4e6:	7019      	strb	r1, [r3, #0]
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <__sfputs_r>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	4614      	mov	r4, r2
 800d4f8:	18d5      	adds	r5, r2, r3
 800d4fa:	42ac      	cmp	r4, r5
 800d4fc:	d101      	bne.n	800d502 <__sfputs_r+0x12>
 800d4fe:	2000      	movs	r0, #0
 800d500:	e007      	b.n	800d512 <__sfputs_r+0x22>
 800d502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d506:	463a      	mov	r2, r7
 800d508:	4630      	mov	r0, r6
 800d50a:	f7ff ffda 	bl	800d4c2 <__sfputc_r>
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	d1f3      	bne.n	800d4fa <__sfputs_r+0xa>
 800d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d514 <_vfiprintf_r>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	460d      	mov	r5, r1
 800d51a:	b09d      	sub	sp, #116	@ 0x74
 800d51c:	4614      	mov	r4, r2
 800d51e:	4698      	mov	r8, r3
 800d520:	4606      	mov	r6, r0
 800d522:	b118      	cbz	r0, 800d52c <_vfiprintf_r+0x18>
 800d524:	6a03      	ldr	r3, [r0, #32]
 800d526:	b90b      	cbnz	r3, 800d52c <_vfiprintf_r+0x18>
 800d528:	f7fc fe86 	bl	800a238 <__sinit>
 800d52c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d52e:	07d9      	lsls	r1, r3, #31
 800d530:	d405      	bmi.n	800d53e <_vfiprintf_r+0x2a>
 800d532:	89ab      	ldrh	r3, [r5, #12]
 800d534:	059a      	lsls	r2, r3, #22
 800d536:	d402      	bmi.n	800d53e <_vfiprintf_r+0x2a>
 800d538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d53a:	f7fc ffc8 	bl	800a4ce <__retarget_lock_acquire_recursive>
 800d53e:	89ab      	ldrh	r3, [r5, #12]
 800d540:	071b      	lsls	r3, r3, #28
 800d542:	d501      	bpl.n	800d548 <_vfiprintf_r+0x34>
 800d544:	692b      	ldr	r3, [r5, #16]
 800d546:	b99b      	cbnz	r3, 800d570 <_vfiprintf_r+0x5c>
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f000 f938 	bl	800d7c0 <__swsetup_r>
 800d550:	b170      	cbz	r0, 800d570 <_vfiprintf_r+0x5c>
 800d552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d554:	07dc      	lsls	r4, r3, #31
 800d556:	d504      	bpl.n	800d562 <_vfiprintf_r+0x4e>
 800d558:	f04f 30ff 	mov.w	r0, #4294967295
 800d55c:	b01d      	add	sp, #116	@ 0x74
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	0598      	lsls	r0, r3, #22
 800d566:	d4f7      	bmi.n	800d558 <_vfiprintf_r+0x44>
 800d568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d56a:	f7fc ffb1 	bl	800a4d0 <__retarget_lock_release_recursive>
 800d56e:	e7f3      	b.n	800d558 <_vfiprintf_r+0x44>
 800d570:	2300      	movs	r3, #0
 800d572:	9309      	str	r3, [sp, #36]	@ 0x24
 800d574:	2320      	movs	r3, #32
 800d576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d57a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d57e:	2330      	movs	r3, #48	@ 0x30
 800d580:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d730 <_vfiprintf_r+0x21c>
 800d584:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d588:	f04f 0901 	mov.w	r9, #1
 800d58c:	4623      	mov	r3, r4
 800d58e:	469a      	mov	sl, r3
 800d590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d594:	b10a      	cbz	r2, 800d59a <_vfiprintf_r+0x86>
 800d596:	2a25      	cmp	r2, #37	@ 0x25
 800d598:	d1f9      	bne.n	800d58e <_vfiprintf_r+0x7a>
 800d59a:	ebba 0b04 	subs.w	fp, sl, r4
 800d59e:	d00b      	beq.n	800d5b8 <_vfiprintf_r+0xa4>
 800d5a0:	465b      	mov	r3, fp
 800d5a2:	4622      	mov	r2, r4
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f7ff ffa2 	bl	800d4f0 <__sfputs_r>
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	f000 80a7 	beq.w	800d700 <_vfiprintf_r+0x1ec>
 800d5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5b4:	445a      	add	r2, fp
 800d5b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 809f 	beq.w	800d700 <_vfiprintf_r+0x1ec>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5cc:	f10a 0a01 	add.w	sl, sl, #1
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	9307      	str	r3, [sp, #28]
 800d5d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5da:	4654      	mov	r4, sl
 800d5dc:	2205      	movs	r2, #5
 800d5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e2:	4853      	ldr	r0, [pc, #332]	@ (800d730 <_vfiprintf_r+0x21c>)
 800d5e4:	f7f2 fe7c 	bl	80002e0 <memchr>
 800d5e8:	9a04      	ldr	r2, [sp, #16]
 800d5ea:	b9d8      	cbnz	r0, 800d624 <_vfiprintf_r+0x110>
 800d5ec:	06d1      	lsls	r1, r2, #27
 800d5ee:	bf44      	itt	mi
 800d5f0:	2320      	movmi	r3, #32
 800d5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5f6:	0713      	lsls	r3, r2, #28
 800d5f8:	bf44      	itt	mi
 800d5fa:	232b      	movmi	r3, #43	@ 0x2b
 800d5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d600:	f89a 3000 	ldrb.w	r3, [sl]
 800d604:	2b2a      	cmp	r3, #42	@ 0x2a
 800d606:	d015      	beq.n	800d634 <_vfiprintf_r+0x120>
 800d608:	9a07      	ldr	r2, [sp, #28]
 800d60a:	4654      	mov	r4, sl
 800d60c:	2000      	movs	r0, #0
 800d60e:	f04f 0c0a 	mov.w	ip, #10
 800d612:	4621      	mov	r1, r4
 800d614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d618:	3b30      	subs	r3, #48	@ 0x30
 800d61a:	2b09      	cmp	r3, #9
 800d61c:	d94b      	bls.n	800d6b6 <_vfiprintf_r+0x1a2>
 800d61e:	b1b0      	cbz	r0, 800d64e <_vfiprintf_r+0x13a>
 800d620:	9207      	str	r2, [sp, #28]
 800d622:	e014      	b.n	800d64e <_vfiprintf_r+0x13a>
 800d624:	eba0 0308 	sub.w	r3, r0, r8
 800d628:	fa09 f303 	lsl.w	r3, r9, r3
 800d62c:	4313      	orrs	r3, r2
 800d62e:	9304      	str	r3, [sp, #16]
 800d630:	46a2      	mov	sl, r4
 800d632:	e7d2      	b.n	800d5da <_vfiprintf_r+0xc6>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	1d19      	adds	r1, r3, #4
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	9103      	str	r1, [sp, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	bfbb      	ittet	lt
 800d640:	425b      	neglt	r3, r3
 800d642:	f042 0202 	orrlt.w	r2, r2, #2
 800d646:	9307      	strge	r3, [sp, #28]
 800d648:	9307      	strlt	r3, [sp, #28]
 800d64a:	bfb8      	it	lt
 800d64c:	9204      	strlt	r2, [sp, #16]
 800d64e:	7823      	ldrb	r3, [r4, #0]
 800d650:	2b2e      	cmp	r3, #46	@ 0x2e
 800d652:	d10a      	bne.n	800d66a <_vfiprintf_r+0x156>
 800d654:	7863      	ldrb	r3, [r4, #1]
 800d656:	2b2a      	cmp	r3, #42	@ 0x2a
 800d658:	d132      	bne.n	800d6c0 <_vfiprintf_r+0x1ac>
 800d65a:	9b03      	ldr	r3, [sp, #12]
 800d65c:	1d1a      	adds	r2, r3, #4
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	9203      	str	r2, [sp, #12]
 800d662:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d666:	3402      	adds	r4, #2
 800d668:	9305      	str	r3, [sp, #20]
 800d66a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d740 <_vfiprintf_r+0x22c>
 800d66e:	7821      	ldrb	r1, [r4, #0]
 800d670:	2203      	movs	r2, #3
 800d672:	4650      	mov	r0, sl
 800d674:	f7f2 fe34 	bl	80002e0 <memchr>
 800d678:	b138      	cbz	r0, 800d68a <_vfiprintf_r+0x176>
 800d67a:	9b04      	ldr	r3, [sp, #16]
 800d67c:	eba0 000a 	sub.w	r0, r0, sl
 800d680:	2240      	movs	r2, #64	@ 0x40
 800d682:	4082      	lsls	r2, r0
 800d684:	4313      	orrs	r3, r2
 800d686:	3401      	adds	r4, #1
 800d688:	9304      	str	r3, [sp, #16]
 800d68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68e:	4829      	ldr	r0, [pc, #164]	@ (800d734 <_vfiprintf_r+0x220>)
 800d690:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d694:	2206      	movs	r2, #6
 800d696:	f7f2 fe23 	bl	80002e0 <memchr>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d03f      	beq.n	800d71e <_vfiprintf_r+0x20a>
 800d69e:	4b26      	ldr	r3, [pc, #152]	@ (800d738 <_vfiprintf_r+0x224>)
 800d6a0:	bb1b      	cbnz	r3, 800d6ea <_vfiprintf_r+0x1d6>
 800d6a2:	9b03      	ldr	r3, [sp, #12]
 800d6a4:	3307      	adds	r3, #7
 800d6a6:	f023 0307 	bic.w	r3, r3, #7
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	9303      	str	r3, [sp, #12]
 800d6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b0:	443b      	add	r3, r7
 800d6b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b4:	e76a      	b.n	800d58c <_vfiprintf_r+0x78>
 800d6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	2001      	movs	r0, #1
 800d6be:	e7a8      	b.n	800d612 <_vfiprintf_r+0xfe>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	3401      	adds	r4, #1
 800d6c4:	9305      	str	r3, [sp, #20]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	f04f 0c0a 	mov.w	ip, #10
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6d2:	3a30      	subs	r2, #48	@ 0x30
 800d6d4:	2a09      	cmp	r2, #9
 800d6d6:	d903      	bls.n	800d6e0 <_vfiprintf_r+0x1cc>
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d0c6      	beq.n	800d66a <_vfiprintf_r+0x156>
 800d6dc:	9105      	str	r1, [sp, #20]
 800d6de:	e7c4      	b.n	800d66a <_vfiprintf_r+0x156>
 800d6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e7f0      	b.n	800d6cc <_vfiprintf_r+0x1b8>
 800d6ea:	ab03      	add	r3, sp, #12
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	462a      	mov	r2, r5
 800d6f0:	4b12      	ldr	r3, [pc, #72]	@ (800d73c <_vfiprintf_r+0x228>)
 800d6f2:	a904      	add	r1, sp, #16
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f7fb ff5f 	bl	80095b8 <_printf_float>
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	1c78      	adds	r0, r7, #1
 800d6fe:	d1d6      	bne.n	800d6ae <_vfiprintf_r+0x19a>
 800d700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d702:	07d9      	lsls	r1, r3, #31
 800d704:	d405      	bmi.n	800d712 <_vfiprintf_r+0x1fe>
 800d706:	89ab      	ldrh	r3, [r5, #12]
 800d708:	059a      	lsls	r2, r3, #22
 800d70a:	d402      	bmi.n	800d712 <_vfiprintf_r+0x1fe>
 800d70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d70e:	f7fc fedf 	bl	800a4d0 <__retarget_lock_release_recursive>
 800d712:	89ab      	ldrh	r3, [r5, #12]
 800d714:	065b      	lsls	r3, r3, #25
 800d716:	f53f af1f 	bmi.w	800d558 <_vfiprintf_r+0x44>
 800d71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d71c:	e71e      	b.n	800d55c <_vfiprintf_r+0x48>
 800d71e:	ab03      	add	r3, sp, #12
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	462a      	mov	r2, r5
 800d724:	4b05      	ldr	r3, [pc, #20]	@ (800d73c <_vfiprintf_r+0x228>)
 800d726:	a904      	add	r1, sp, #16
 800d728:	4630      	mov	r0, r6
 800d72a:	f7fc f9cd 	bl	8009ac8 <_printf_i>
 800d72e:	e7e4      	b.n	800d6fa <_vfiprintf_r+0x1e6>
 800d730:	0800dde1 	.word	0x0800dde1
 800d734:	0800ddeb 	.word	0x0800ddeb
 800d738:	080095b9 	.word	0x080095b9
 800d73c:	0800d4f1 	.word	0x0800d4f1
 800d740:	0800dde7 	.word	0x0800dde7

0800d744 <__swbuf_r>:
 800d744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d746:	460e      	mov	r6, r1
 800d748:	4614      	mov	r4, r2
 800d74a:	4605      	mov	r5, r0
 800d74c:	b118      	cbz	r0, 800d756 <__swbuf_r+0x12>
 800d74e:	6a03      	ldr	r3, [r0, #32]
 800d750:	b90b      	cbnz	r3, 800d756 <__swbuf_r+0x12>
 800d752:	f7fc fd71 	bl	800a238 <__sinit>
 800d756:	69a3      	ldr	r3, [r4, #24]
 800d758:	60a3      	str	r3, [r4, #8]
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	071a      	lsls	r2, r3, #28
 800d75e:	d501      	bpl.n	800d764 <__swbuf_r+0x20>
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	b943      	cbnz	r3, 800d776 <__swbuf_r+0x32>
 800d764:	4621      	mov	r1, r4
 800d766:	4628      	mov	r0, r5
 800d768:	f000 f82a 	bl	800d7c0 <__swsetup_r>
 800d76c:	b118      	cbz	r0, 800d776 <__swbuf_r+0x32>
 800d76e:	f04f 37ff 	mov.w	r7, #4294967295
 800d772:	4638      	mov	r0, r7
 800d774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	6922      	ldr	r2, [r4, #16]
 800d77a:	1a98      	subs	r0, r3, r2
 800d77c:	6963      	ldr	r3, [r4, #20]
 800d77e:	b2f6      	uxtb	r6, r6
 800d780:	4283      	cmp	r3, r0
 800d782:	4637      	mov	r7, r6
 800d784:	dc05      	bgt.n	800d792 <__swbuf_r+0x4e>
 800d786:	4621      	mov	r1, r4
 800d788:	4628      	mov	r0, r5
 800d78a:	f7ff fa45 	bl	800cc18 <_fflush_r>
 800d78e:	2800      	cmp	r0, #0
 800d790:	d1ed      	bne.n	800d76e <__swbuf_r+0x2a>
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	3b01      	subs	r3, #1
 800d796:	60a3      	str	r3, [r4, #8]
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	6022      	str	r2, [r4, #0]
 800d79e:	701e      	strb	r6, [r3, #0]
 800d7a0:	6962      	ldr	r2, [r4, #20]
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d004      	beq.n	800d7b2 <__swbuf_r+0x6e>
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	07db      	lsls	r3, r3, #31
 800d7ac:	d5e1      	bpl.n	800d772 <__swbuf_r+0x2e>
 800d7ae:	2e0a      	cmp	r6, #10
 800d7b0:	d1df      	bne.n	800d772 <__swbuf_r+0x2e>
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	f7ff fa2f 	bl	800cc18 <_fflush_r>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d0d9      	beq.n	800d772 <__swbuf_r+0x2e>
 800d7be:	e7d6      	b.n	800d76e <__swbuf_r+0x2a>

0800d7c0 <__swsetup_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	4b29      	ldr	r3, [pc, #164]	@ (800d868 <__swsetup_r+0xa8>)
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	6818      	ldr	r0, [r3, #0]
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	b118      	cbz	r0, 800d7d4 <__swsetup_r+0x14>
 800d7cc:	6a03      	ldr	r3, [r0, #32]
 800d7ce:	b90b      	cbnz	r3, 800d7d4 <__swsetup_r+0x14>
 800d7d0:	f7fc fd32 	bl	800a238 <__sinit>
 800d7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7d8:	0719      	lsls	r1, r3, #28
 800d7da:	d422      	bmi.n	800d822 <__swsetup_r+0x62>
 800d7dc:	06da      	lsls	r2, r3, #27
 800d7de:	d407      	bmi.n	800d7f0 <__swsetup_r+0x30>
 800d7e0:	2209      	movs	r2, #9
 800d7e2:	602a      	str	r2, [r5, #0]
 800d7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7e8:	81a3      	strh	r3, [r4, #12]
 800d7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ee:	e033      	b.n	800d858 <__swsetup_r+0x98>
 800d7f0:	0758      	lsls	r0, r3, #29
 800d7f2:	d512      	bpl.n	800d81a <__swsetup_r+0x5a>
 800d7f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7f6:	b141      	cbz	r1, 800d80a <__swsetup_r+0x4a>
 800d7f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7fc:	4299      	cmp	r1, r3
 800d7fe:	d002      	beq.n	800d806 <__swsetup_r+0x46>
 800d800:	4628      	mov	r0, r5
 800d802:	f7fd fc4b 	bl	800b09c <_free_r>
 800d806:	2300      	movs	r3, #0
 800d808:	6363      	str	r3, [r4, #52]	@ 0x34
 800d80a:	89a3      	ldrh	r3, [r4, #12]
 800d80c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d810:	81a3      	strh	r3, [r4, #12]
 800d812:	2300      	movs	r3, #0
 800d814:	6063      	str	r3, [r4, #4]
 800d816:	6923      	ldr	r3, [r4, #16]
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	f043 0308 	orr.w	r3, r3, #8
 800d820:	81a3      	strh	r3, [r4, #12]
 800d822:	6923      	ldr	r3, [r4, #16]
 800d824:	b94b      	cbnz	r3, 800d83a <__swsetup_r+0x7a>
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d830:	d003      	beq.n	800d83a <__swsetup_r+0x7a>
 800d832:	4621      	mov	r1, r4
 800d834:	4628      	mov	r0, r5
 800d836:	f000 f883 	bl	800d940 <__smakebuf_r>
 800d83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d83e:	f013 0201 	ands.w	r2, r3, #1
 800d842:	d00a      	beq.n	800d85a <__swsetup_r+0x9a>
 800d844:	2200      	movs	r2, #0
 800d846:	60a2      	str	r2, [r4, #8]
 800d848:	6962      	ldr	r2, [r4, #20]
 800d84a:	4252      	negs	r2, r2
 800d84c:	61a2      	str	r2, [r4, #24]
 800d84e:	6922      	ldr	r2, [r4, #16]
 800d850:	b942      	cbnz	r2, 800d864 <__swsetup_r+0xa4>
 800d852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d856:	d1c5      	bne.n	800d7e4 <__swsetup_r+0x24>
 800d858:	bd38      	pop	{r3, r4, r5, pc}
 800d85a:	0799      	lsls	r1, r3, #30
 800d85c:	bf58      	it	pl
 800d85e:	6962      	ldrpl	r2, [r4, #20]
 800d860:	60a2      	str	r2, [r4, #8]
 800d862:	e7f4      	b.n	800d84e <__swsetup_r+0x8e>
 800d864:	2000      	movs	r0, #0
 800d866:	e7f7      	b.n	800d858 <__swsetup_r+0x98>
 800d868:	2400001c 	.word	0x2400001c

0800d86c <_raise_r>:
 800d86c:	291f      	cmp	r1, #31
 800d86e:	b538      	push	{r3, r4, r5, lr}
 800d870:	4605      	mov	r5, r0
 800d872:	460c      	mov	r4, r1
 800d874:	d904      	bls.n	800d880 <_raise_r+0x14>
 800d876:	2316      	movs	r3, #22
 800d878:	6003      	str	r3, [r0, #0]
 800d87a:	f04f 30ff 	mov.w	r0, #4294967295
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d882:	b112      	cbz	r2, 800d88a <_raise_r+0x1e>
 800d884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d888:	b94b      	cbnz	r3, 800d89e <_raise_r+0x32>
 800d88a:	4628      	mov	r0, r5
 800d88c:	f000 f830 	bl	800d8f0 <_getpid_r>
 800d890:	4622      	mov	r2, r4
 800d892:	4601      	mov	r1, r0
 800d894:	4628      	mov	r0, r5
 800d896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d89a:	f000 b817 	b.w	800d8cc <_kill_r>
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d00a      	beq.n	800d8b8 <_raise_r+0x4c>
 800d8a2:	1c59      	adds	r1, r3, #1
 800d8a4:	d103      	bne.n	800d8ae <_raise_r+0x42>
 800d8a6:	2316      	movs	r3, #22
 800d8a8:	6003      	str	r3, [r0, #0]
 800d8aa:	2001      	movs	r0, #1
 800d8ac:	e7e7      	b.n	800d87e <_raise_r+0x12>
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	4798      	blx	r3
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	e7e0      	b.n	800d87e <_raise_r+0x12>

0800d8bc <raise>:
 800d8bc:	4b02      	ldr	r3, [pc, #8]	@ (800d8c8 <raise+0xc>)
 800d8be:	4601      	mov	r1, r0
 800d8c0:	6818      	ldr	r0, [r3, #0]
 800d8c2:	f7ff bfd3 	b.w	800d86c <_raise_r>
 800d8c6:	bf00      	nop
 800d8c8:	2400001c 	.word	0x2400001c

0800d8cc <_kill_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	4d07      	ldr	r5, [pc, #28]	@ (800d8ec <_kill_r+0x20>)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	602b      	str	r3, [r5, #0]
 800d8da:	f7f3 fd5f 	bl	800139c <_kill>
 800d8de:	1c43      	adds	r3, r0, #1
 800d8e0:	d102      	bne.n	800d8e8 <_kill_r+0x1c>
 800d8e2:	682b      	ldr	r3, [r5, #0]
 800d8e4:	b103      	cbz	r3, 800d8e8 <_kill_r+0x1c>
 800d8e6:	6023      	str	r3, [r4, #0]
 800d8e8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2400046c 	.word	0x2400046c

0800d8f0 <_getpid_r>:
 800d8f0:	f7f3 bd4c 	b.w	800138c <_getpid>

0800d8f4 <__swhatbuf_r>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8fc:	2900      	cmp	r1, #0
 800d8fe:	b096      	sub	sp, #88	@ 0x58
 800d900:	4615      	mov	r5, r2
 800d902:	461e      	mov	r6, r3
 800d904:	da0d      	bge.n	800d922 <__swhatbuf_r+0x2e>
 800d906:	89a3      	ldrh	r3, [r4, #12]
 800d908:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d90c:	f04f 0100 	mov.w	r1, #0
 800d910:	bf14      	ite	ne
 800d912:	2340      	movne	r3, #64	@ 0x40
 800d914:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d918:	2000      	movs	r0, #0
 800d91a:	6031      	str	r1, [r6, #0]
 800d91c:	602b      	str	r3, [r5, #0]
 800d91e:	b016      	add	sp, #88	@ 0x58
 800d920:	bd70      	pop	{r4, r5, r6, pc}
 800d922:	466a      	mov	r2, sp
 800d924:	f000 f848 	bl	800d9b8 <_fstat_r>
 800d928:	2800      	cmp	r0, #0
 800d92a:	dbec      	blt.n	800d906 <__swhatbuf_r+0x12>
 800d92c:	9901      	ldr	r1, [sp, #4]
 800d92e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d932:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d936:	4259      	negs	r1, r3
 800d938:	4159      	adcs	r1, r3
 800d93a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d93e:	e7eb      	b.n	800d918 <__swhatbuf_r+0x24>

0800d940 <__smakebuf_r>:
 800d940:	898b      	ldrh	r3, [r1, #12]
 800d942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d944:	079d      	lsls	r5, r3, #30
 800d946:	4606      	mov	r6, r0
 800d948:	460c      	mov	r4, r1
 800d94a:	d507      	bpl.n	800d95c <__smakebuf_r+0x1c>
 800d94c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	6123      	str	r3, [r4, #16]
 800d954:	2301      	movs	r3, #1
 800d956:	6163      	str	r3, [r4, #20]
 800d958:	b003      	add	sp, #12
 800d95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95c:	ab01      	add	r3, sp, #4
 800d95e:	466a      	mov	r2, sp
 800d960:	f7ff ffc8 	bl	800d8f4 <__swhatbuf_r>
 800d964:	9f00      	ldr	r7, [sp, #0]
 800d966:	4605      	mov	r5, r0
 800d968:	4639      	mov	r1, r7
 800d96a:	4630      	mov	r0, r6
 800d96c:	f7fd fc0a 	bl	800b184 <_malloc_r>
 800d970:	b948      	cbnz	r0, 800d986 <__smakebuf_r+0x46>
 800d972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d976:	059a      	lsls	r2, r3, #22
 800d978:	d4ee      	bmi.n	800d958 <__smakebuf_r+0x18>
 800d97a:	f023 0303 	bic.w	r3, r3, #3
 800d97e:	f043 0302 	orr.w	r3, r3, #2
 800d982:	81a3      	strh	r3, [r4, #12]
 800d984:	e7e2      	b.n	800d94c <__smakebuf_r+0xc>
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	6020      	str	r0, [r4, #0]
 800d98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d996:	b15b      	cbz	r3, 800d9b0 <__smakebuf_r+0x70>
 800d998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d99c:	4630      	mov	r0, r6
 800d99e:	f000 f81d 	bl	800d9dc <_isatty_r>
 800d9a2:	b128      	cbz	r0, 800d9b0 <__smakebuf_r+0x70>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	f023 0303 	bic.w	r3, r3, #3
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	431d      	orrs	r5, r3
 800d9b4:	81a5      	strh	r5, [r4, #12]
 800d9b6:	e7cf      	b.n	800d958 <__smakebuf_r+0x18>

0800d9b8 <_fstat_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	@ (800d9d8 <_fstat_r+0x20>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	f7f3 fd49 	bl	800145c <_fstat>
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	d102      	bne.n	800d9d4 <_fstat_r+0x1c>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	b103      	cbz	r3, 800d9d4 <_fstat_r+0x1c>
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	bf00      	nop
 800d9d8:	2400046c 	.word	0x2400046c

0800d9dc <_isatty_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d06      	ldr	r5, [pc, #24]	@ (800d9f8 <_isatty_r+0x1c>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	f7f3 fd48 	bl	800147c <_isatty>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_isatty_r+0x1a>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_isatty_r+0x1a>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	2400046c 	.word	0x2400046c

0800d9fc <_init>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	bf00      	nop
 800da00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da02:	bc08      	pop	{r3}
 800da04:	469e      	mov	lr, r3
 800da06:	4770      	bx	lr

0800da08 <_fini>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr
