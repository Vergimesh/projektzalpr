
projektzal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010164  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08010408  08010408  00011408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010910  08010910  000121ec  2**0
                  CONTENTS
  4 .ARM          00000008  08010910  08010910  00011910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010918  08010918  000121ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010918  08010918  00011918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801091c  0801091c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  24000000  08010920  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  240001ec  08010b0c  000121ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240005ec  08010b0c  000125ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed01  00000000  00000000  0001221a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a53  00000000  00000000  00030f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  00034970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001182  00000000  00000000  00035fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d1f5  00000000  00000000  0003716a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022de6  00000000  00000000  0007435f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a4ba  00000000  00000000  00097145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002215ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007200  00000000  00000000  00221644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00228844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080103ec 	.word	0x080103ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	080103ec 	.word	0x080103ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <BMP280_Init>:
// File: bmp2.c
#include "bmp2.h"

void BMP280_Init(I2C_HandleTypeDef *hi2c) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Configuration for control measurement register
    config[0] = 0xF4; // Address of control register
 8000b9c:	23f4      	movs	r3, #244	@ 0xf4
 8000b9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x27; // Normal mode, oversampling x1 for temperature
 8000ba0:	2327      	movs	r3, #39	@ 0x27
 8000ba2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2302      	movs	r3, #2
 8000bb0:	21ec      	movs	r1, #236	@ 0xec
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f002 fe2a 	bl	800380c <HAL_I2C_Master_Transmit>

    // Configuration for configuration register
    config[0] = 0xF5; // Address of configuration register
 8000bb8:	23f5      	movs	r3, #245	@ 0xf5
 8000bba:	733b      	strb	r3, [r7, #12]
    config[1] = 0xA0; // Filter x4, standby time 1000 ms
 8000bbc:	23a0      	movs	r3, #160	@ 0xa0
 8000bbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, BMP280_I2C_ADDRESS, config, 2, HAL_MAX_DELAY);
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	21ec      	movs	r1, #236	@ 0xec
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f002 fe1c 	bl	800380c <HAL_I2C_Master_Transmit>
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
    uint8_t calib_raw[24];

    // Read 24 bytes of calibration data starting at register 0x88
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0x88, 1, calib_raw, 24, HAL_MAX_DELAY);
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2318      	movs	r3, #24
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	21ec      	movs	r1, #236	@ 0xec
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 ff1d 	bl	8003a3c <HAL_I2C_Mem_Read>

    // Parse calibration data
    calib_data->dig_T1 = (uint16_t)(calib_raw[1] << 8 | calib_raw[0]);
 8000c02:	7a7b      	ldrb	r3, [r7, #9]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)(calib_raw[3] << 8 | calib_raw[2]);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)(calib_raw[5] << 8 | calib_raw[4]);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	7b3b      	ldrb	r3, [r7, #12]
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	809a      	strh	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(I2C_HandleTypeDef *hi2c, BMP280_CalibrationData *calib_data) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    uint8_t temp_raw[3];
    int32_t temp_adc;
    float var1, var2, temperature;

    // Read 3 bytes of temperature data starting from register 0xFA
    HAL_I2C_Mem_Read(hi2c, BMP280_I2C_ADDRESS, 0xFA, 1, temp_raw, 3, HAL_MAX_DELAY);
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	22fa      	movs	r2, #250	@ 0xfa
 8000c66:	21ec      	movs	r1, #236	@ 0xec
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f002 fee7 	bl	8003a3c <HAL_I2C_Mem_Read>

    // Combine bytes into 20-bit raw temperature value
    temp_adc = ((int32_t)(temp_raw[0] << 12)) | ((int32_t)(temp_raw[1] << 4)) | ((temp_raw[2] >> 4));
 8000c6e:	7b3b      	ldrb	r3, [r7, #12]
 8000c70:	031a      	lsls	r2, r3, #12
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4313      	orrs	r3, r2
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]

    // Compensate temperature using calibration data
    var1 = (((float)temp_adc) / 16384.0 - ((float)calib_data->dig_T1) / 1024.0) * ((float)calib_data->dig_T2);
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c90:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d80 <BMP280_ReadTemperature+0x138>
 8000c94:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ca8:	ed9f 4b37 	vldr	d4, [pc, #220]	@ 8000d88 <BMP280_ReadTemperature+0x140>
 8000cac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cce:	edc7 7a06 	vstr	s15, [r7, #24]
    var2 = ((((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0) * (((float)temp_adc) / 131072.0 - ((float)calib_data->dig_T1) / 8192.0)) * ((float)calib_data->dig_T3);
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000ce4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cf8:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000cfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 4b1f 	vldr	d4, [pc, #124]	@ 8000d90 <BMP280_ReadTemperature+0x148>
 8000d16:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d2a:	ed9f 3b1b 	vldr	d3, [pc, #108]	@ 8000d98 <BMP280_ReadTemperature+0x150>
 8000d2e:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8000d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d36:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
    temperature = (var1 + var2) / 5120.0;
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d64:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000da0 <BMP280_ReadTemperature+0x158>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	edc7 7a04 	vstr	s15, [r7, #16]

    return temperature;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
}
 8000d76:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40d00000 	.word	0x40d00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40900000 	.word	0x40900000
 8000d90:	00000000 	.word	0x00000000
 8000d94:	41000000 	.word	0x41000000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40c00000 	.word	0x40c00000
 8000da0:	45a00000 	.word	0x45a00000

08000da4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b6b      	ldr	r3, [pc, #428]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a69      	ldr	r2, [pc, #420]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b67      	ldr	r3, [pc, #412]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b63      	ldr	r3, [pc, #396]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a62      	ldr	r2, [pc, #392]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b58      	ldr	r3, [pc, #352]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	4b54      	ldr	r3, [pc, #336]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a53      	ldr	r2, [pc, #332]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b50      	ldr	r3, [pc, #320]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b4d      	ldr	r3, [pc, #308]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a4b      	ldr	r2, [pc, #300]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <MX_GPIO_Init+0x1c4>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	4845      	ldr	r0, [pc, #276]	@ (8000f6c <MX_GPIO_Init+0x1c8>)
 8000e56:	f002 fbdb 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4840      	ldr	r0, [pc, #256]	@ (8000f70 <MX_GPIO_Init+0x1cc>)
 8000e70:	f002 fa06 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e74:	2332      	movs	r3, #50	@ 0x32
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e84:	230b      	movs	r3, #11
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4838      	ldr	r0, [pc, #224]	@ (8000f70 <MX_GPIO_Init+0x1cc>)
 8000e90:	f002 f9f6 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e94:	2386      	movs	r3, #134	@ 0x86
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4831      	ldr	r0, [pc, #196]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000eb0:	f002 f9e6 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GUZIK_Pin;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GUZIK_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	482a      	ldr	r0, [pc, #168]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000eca:	f002 f9d9 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4821      	ldr	r0, [pc, #132]	@ (8000f6c <MX_GPIO_Init+0x1c8>)
 8000ee6:	f002 f9cb 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efc:	230b      	movs	r3, #11
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4819      	ldr	r0, [pc, #100]	@ (8000f6c <MX_GPIO_Init+0x1c8>)
 8000f08:	f002 f9ba 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f0c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f1e:	230a      	movs	r3, #10
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4812      	ldr	r0, [pc, #72]	@ (8000f74 <MX_GPIO_Init+0x1d0>)
 8000f2a:	f002 f9a9 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f2e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f40:	230b      	movs	r3, #11
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <MX_GPIO_Init+0x1d4>)
 8000f4c:	f002 f998 	bl	8003280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2009      	movs	r0, #9
 8000f56:	f001 fbec 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f5a:	2009      	movs	r0, #9
 8000f5c:	f001 fc03 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	@ 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58020800 	.word	0x58020800
 8000f74:	58020000 	.word	0x58020000
 8000f78:	58021800 	.word	0x58021800

08000f7c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000f82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff4 <MX_I2C1_Init+0x78>)
 8000f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000f88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff8 <MX_I2C1_Init+0x7c>)
 8000f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb6:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fb8:	f002 fb8c 	bl	80036d4 <HAL_I2C_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fc2:	f000 fd6d 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4809      	ldr	r0, [pc, #36]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fca:	f003 ff87 	bl	8004edc <HAL_I2CEx_ConfigAnalogFilter>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd4:	f000 fd64 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_I2C1_Init+0x74>)
 8000fdc:	f003 ffc9 	bl	8004f72 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 fd5b 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	24000208 	.word	0x24000208
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	00707cbb 	.word	0x00707cbb

08000ffc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <MX_I2C2_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <MX_I2C2_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_I2C2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	@ (8001070 <MX_I2C2_Init+0x74>)
 8001038:	f002 fb4c 	bl	80036d4 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001042:	f000 fd2d 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <MX_I2C2_Init+0x74>)
 800104a:	f003 ff47 	bl	8004edc <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001054:	f000 fd24 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_I2C2_Init+0x74>)
 800105c:	f003 ff89 	bl	8004f72 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 fd1b 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2400025c 	.word	0x2400025c
 8001074:	40005800 	.word	0x40005800
 8001078:	00707cbb 	.word	0x00707cbb

0800107c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0bc      	sub	sp, #240	@ 0xf0
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	22c0      	movs	r2, #192	@ 0xc0
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f00b ff0c 	bl	800ceba <memset>
  if(i2cHandle->Instance==I2C1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5d      	ldr	r2, [pc, #372]	@ (800121c <HAL_I2C_MspInit+0x1a0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d156      	bne.n	800115a <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ac:	f04f 0208 	mov.w	r2, #8
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 ffe2 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010ce:	f000 fce7 	bl	8001aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b53      	ldr	r3, [pc, #332]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	4a51      	ldr	r2, [pc, #324]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f0:	23c0      	movs	r3, #192	@ 0xc0
 80010f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f6:	2312      	movs	r3, #18
 80010f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001108:	2304      	movs	r3, #4
 800110a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001112:	4619      	mov	r1, r3
 8001114:	4843      	ldr	r0, [pc, #268]	@ (8001224 <HAL_I2C_MspInit+0x1a8>)
 8001116:	f002 f8b3 	bl	8003280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 800111c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001120:	4a3f      	ldr	r2, [pc, #252]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001126:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800112a:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 800112c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	201f      	movs	r0, #31
 800113e:	f001 faf8 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001142:	201f      	movs	r0, #31
 8001144:	f001 fb0f 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2020      	movs	r0, #32
 800114e:	f001 faf0 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001152:	2020      	movs	r0, #32
 8001154:	f001 fb07 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001158:	e05b      	b.n	8001212 <HAL_I2C_MspInit+0x196>
  else if(i2cHandle->Instance==I2C2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a32      	ldr	r2, [pc, #200]	@ (8001228 <HAL_I2C_MspInit+0x1ac>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d156      	bne.n	8001212 <HAL_I2C_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001164:	f04f 0208 	mov.w	r2, #8
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	4618      	mov	r0, r3
 800117c:	f004 ff86 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_I2C_MspInit+0x10e>
      Error_Handler();
 8001186:	f000 fc8b 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	4a23      	ldr	r2, [pc, #140]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b0:	2312      	movs	r3, #18
 80011b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c2:	2304      	movs	r3, #4
 80011c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011cc:	4619      	mov	r1, r3
 80011ce:	4815      	ldr	r0, [pc, #84]	@ (8001224 <HAL_I2C_MspInit+0x1a8>)
 80011d0:	f002 f856 	bl	8003280 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 80011d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011da:	4a11      	ldr	r2, [pc, #68]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_I2C_MspInit+0x1a4>)
 80011e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2021      	movs	r0, #33	@ 0x21
 80011f8:	f001 fa9b 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80011fc:	2021      	movs	r0, #33	@ 0x21
 80011fe:	f001 fab2 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2022      	movs	r0, #34	@ 0x22
 8001208:	f001 fa93 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800120c:	2022      	movs	r0, #34	@ 0x22
 800120e:	f001 faaa 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	37f0      	adds	r7, #240	@ 0xf0
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40005400 	.word	0x40005400
 8001220:	58024400 	.word	0x58024400
 8001224:	58020400 	.word	0x58020400
 8001228:	40005800 	.word	0x40005800

0800122c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001242:	2308      	movs	r3, #8
 8001244:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001246:	2028      	movs	r0, #40	@ 0x28
 8001248:	f001 f968 	bl	800251c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	2130      	movs	r1, #48	@ 0x30
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f829 	bl	80012ac <lcd_write>
	HAL_Delay(5);
 800125a:	2005      	movs	r0, #5
 800125c:	f001 f95e 	bl	800251c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	2130      	movs	r1, #48	@ 0x30
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f81f 	bl	80012ac <lcd_write>
	HAL_Delay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f001 f954 	bl	800251c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	2130      	movs	r1, #48	@ 0x30
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f815 	bl	80012ac <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f80e 	bl	80012ac <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	210c      	movs	r1, #12
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f807 	bl	80012ac <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f89f 	bl	80013e2 <lcd_clear>

}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	4613      	mov	r3, r2
 80012bc:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	f023 030f 	bic.w	r3, r3, #15
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	797b      	ldrb	r3, [r7, #5]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80012d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012d8:	f023 030f 	bic.w	r3, r3, #15
 80012dc:	b25a      	sxtb	r2, r3
 80012de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	797b      	ldrb	r3, [r7, #5]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b25a      	sxtb	r2, r3
 8001304:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001308:	4313      	orrs	r3, r2
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	b299      	uxth	r1, r3
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	2364      	movs	r3, #100	@ 0x64
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2304      	movs	r3, #4
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <lcd_write+0x88>)
 8001320:	f002 fa74 	bl	800380c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001324:	2005      	movs	r0, #5
 8001326:	f001 f8f9 	bl	800251c <HAL_Delay>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2400025c 	.word	0x2400025c

08001338 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	2300      	movs	r3, #0
 8001346:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001352:	2308      	movs	r3, #8
 8001354:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f843 	bl	80013e2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffa1 	bl	80012ac <lcd_write>
	while(lcd->f_line[i])
 800136a:	e00f      	b.n	800138c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7818      	ldrb	r0, [r3, #0]
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	7859      	ldrb	r1, [r3, #1]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	f7ff ff93 	bl	80012ac <lcd_write>
		i++;
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	3301      	adds	r3, #1
 800138a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e9      	bne.n	800136c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	21c0      	movs	r1, #192	@ 0xc0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff81 	bl	80012ac <lcd_write>
	while(lcd->s_line[i])
 80013aa:	e00f      	b.n	80013cc <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7818      	ldrb	r0, [r3, #0]
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	7c99      	ldrb	r1, [r3, #18]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	f7ff ff73 	bl	80012ac <lcd_write>
		i++;
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	3301      	adds	r3, #1
 80013ca:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	7c9b      	ldrb	r3, [r3, #18]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1e9      	bne.n	80013ac <lcd_display+0x74>
	}
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80013f8:	2308      	movs	r3, #8
 80013fa:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff51 	bl	80012ac <lcd_write>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0a4      	sub	sp, #144	@ 0x90
 8001418:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800141a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001422:	bf00      	nop
 8001424:	4b87      	ldr	r3, [pc, #540]	@ (8001644 <main+0x230>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <main+0x2a>
 8001430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001434:	1e5a      	subs	r2, r3, #1
 8001436:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800143a:	2b00      	cmp	r3, #0
 800143c:	dcf2      	bgt.n	8001424 <main+0x10>
  if ( timeout < 0 )
 800143e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001442:	2b00      	cmp	r3, #0
 8001444:	da01      	bge.n	800144a <main+0x36>
  {
  Error_Handler();
 8001446:	f000 fb2b 	bl	8001aa0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f000 ffd5 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f92f 	bl	80016b0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001452:	4b7c      	ldr	r3, [pc, #496]	@ (8001644 <main+0x230>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001458:	4a7a      	ldr	r2, [pc, #488]	@ (8001644 <main+0x230>)
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001462:	4b78      	ldr	r3, [pc, #480]	@ (8001644 <main+0x230>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800146e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001470:	2000      	movs	r0, #0
 8001472:	f002 f901 	bl	8003678 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001476:	2100      	movs	r1, #0
 8001478:	2000      	movs	r0, #0
 800147a:	f002 f917 	bl	80036ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800147e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001486:	bf00      	nop
 8001488:	4b6e      	ldr	r3, [pc, #440]	@ (8001644 <main+0x230>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <main+0x8e>
 8001494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800149e:	2b00      	cmp	r3, #0
 80014a0:	dcf2      	bgt.n	8001488 <main+0x74>
if ( timeout < 0 )
 80014a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da01      	bge.n	80014ae <main+0x9a>
{
Error_Handler();
 80014aa:	f000 faf9 	bl	8001aa0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f7ff fc79 	bl	8000da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014b2:	f7ff fd63 	bl	8000f7c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80014b6:	f000 feb7 	bl	8002228 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80014ba:	f000 fcdd 	bl	8001e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014be:	f000 fd29 	bl	8001f14 <MX_TIM3_Init>
  MX_I2C2_Init();
 80014c2:	f7ff fd9b 	bl	8000ffc <MX_I2C2_Init>
  MX_TIM8_Init();
 80014c6:	f000 fd81 	bl	8001fcc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1);
 80014ca:	485f      	ldr	r0, [pc, #380]	@ (8001648 <main+0x234>)
 80014cc:	f7ff fb62 	bl	8000b94 <BMP280_Init>


  BMP280_ReadCalibrationData(&hi2c1, &calib_data);
 80014d0:	495e      	ldr	r1, [pc, #376]	@ (800164c <main+0x238>)
 80014d2:	485d      	ldr	r0, [pc, #372]	@ (8001648 <main+0x234>)
 80014d4:	f7ff fb82 	bl	8000bdc <BMP280_ReadCalibrationData>
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80014d8:	2108      	movs	r1, #8
 80014da:	485d      	ldr	r0, [pc, #372]	@ (8001650 <main+0x23c>)
 80014dc:	f006 fea8 	bl	8008230 <HAL_TIM_PWM_Stop>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80014e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <main+0x23c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  	  htim3.Init.Period = 999;
 80014e8:	4b59      	ldr	r3, [pc, #356]	@ (8001650 <main+0x23c>)
 80014ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ee:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Init(&htim3);
 80014f0:	4857      	ldr	r0, [pc, #348]	@ (8001650 <main+0x23c>)
 80014f2:	f006 fbf7 	bl	8007ce4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 80014f6:	4856      	ldr	r0, [pc, #344]	@ (8001650 <main+0x23c>)
 80014f8:	f006 fc4c 	bl	8007d94 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014fc:	2108      	movs	r1, #8
 80014fe:	4854      	ldr	r0, [pc, #336]	@ (8001650 <main+0x23c>)
 8001500:	f006 fd88 	bl	8008014 <HAL_TIM_PWM_Start>

  pid_init(&pid_controller,  kp,  ki,  kd,5000);
 8001504:	4b53      	ldr	r3, [pc, #332]	@ (8001654 <main+0x240>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	4b53      	ldr	r3, [pc, #332]	@ (8001658 <main+0x244>)
 800150c:	ed93 7a00 	vldr	s14, [r3]
 8001510:	4b52      	ldr	r3, [pc, #328]	@ (800165c <main+0x248>)
 8001512:	edd3 6a00 	vldr	s13, [r3]
 8001516:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8001660 <main+0x24c>
 800151a:	eeb0 1a66 	vmov.f32	s2, s13
 800151e:	eef0 0a47 	vmov.f32	s1, s14
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	484f      	ldr	r0, [pc, #316]	@ (8001664 <main+0x250>)
 8001528:	f000 fac0 	bl	8001aac <pid_init>

  	  disp.addr = (0x27 << 1);
 800152c:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <main+0x254>)
 800152e:	224e      	movs	r2, #78	@ 0x4e
 8001530:	701a      	strb	r2, [r3, #0]
    disp.bl = true;
 8001532:	4b4d      	ldr	r3, [pc, #308]	@ (8001668 <main+0x254>)
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    lcd_init(&disp);
 800153a:	484b      	ldr	r0, [pc, #300]	@ (8001668 <main+0x254>)
 800153c:	f7ff fe76 	bl	800122c <lcd_init>


    HAL_TIM_Encoder_Start(&htim8 , TIM_CHANNEL_ALL) ;
 8001540:	213c      	movs	r1, #60	@ 0x3c
 8001542:	484a      	ldr	r0, [pc, #296]	@ (800166c <main+0x258>)
 8001544:	f006 ffb0 	bl	80084a8 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8001548:	4849      	ldr	r0, [pc, #292]	@ (8001670 <main+0x25c>)
 800154a:	f006 fc93 	bl	8007e74 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, wejscie, 3);
 800154e:	2203      	movs	r2, #3
 8001550:	4948      	ldr	r1, [pc, #288]	@ (8001674 <main+0x260>)
 8001552:	4849      	ldr	r0, [pc, #292]	@ (8001678 <main+0x264>)
 8001554:	f008 f93c 	bl	80097d0 <HAL_UART_Receive_IT>



  while (1)
  {
	  uint32_t enkoder = __HAL_TIM_GET_COUNTER(&htim8);
 8001558:	4b44      	ldr	r3, [pc, #272]	@ (800166c <main+0x258>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	  __HAL_TIM_SET_COUNTER(&htim8 , enkoder );
 8001562:	4b42      	ldr	r3, [pc, #264]	@ (800166c <main+0x258>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800156a:	625a      	str	r2, [r3, #36]	@ 0x24
	  wartosc_enk =(float) (enkoder/50+20);
 800156c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001570:	4a42      	ldr	r2, [pc, #264]	@ (800167c <main+0x268>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	3314      	adds	r3, #20
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <main+0x26c>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 8001588:	2101      	movs	r1, #1
 800158a:	483e      	ldr	r0, [pc, #248]	@ (8001684 <main+0x270>)
 800158c:	f002 f828 	bl	80035e0 <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d12d      	bne.n	80015f2 <main+0x1de>
	  {
	  char zmienna [20] ;
	  snprintf(zmienna, sizeof(zmienna), "%.2f",wartosc_enk);
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <main+0x26c>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80015a4:	ed8d 7b00 	vstr	d7, [sp]
 80015a8:	4a37      	ldr	r2, [pc, #220]	@ (8001688 <main+0x274>)
 80015aa:	2114      	movs	r1, #20
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00b fbed 	bl	800cd8c <sniprintf>
	  HAL_UART_Transmit(&huart3 ,"Licznik:", strlen("Licznik:") ,1000 );
 80015b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b6:	2208      	movs	r2, #8
 80015b8:	4934      	ldr	r1, [pc, #208]	@ (800168c <main+0x278>)
 80015ba:	482f      	ldr	r0, [pc, #188]	@ (8001678 <main+0x264>)
 80015bc:	f008 f87a 	bl	80096b4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3 ,( uint8_t*) zmienna, strlen(zmienna) ,1000 );
 80015c0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe fedb 	bl	8000380 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	4828      	ldr	r0, [pc, #160]	@ (8001678 <main+0x264>)
 80015d8:	f008 f86c 	bl	80096b4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3 ,( uint8_t*) "\r\n", strlen( "\r\n" ), 1000 );
 80015dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e0:	2202      	movs	r2, #2
 80015e2:	492b      	ldr	r1, [pc, #172]	@ (8001690 <main+0x27c>)
 80015e4:	4824      	ldr	r0, [pc, #144]	@ (8001678 <main+0x264>)
 80015e6:	f008 f865 	bl	80096b4 <HAL_UART_Transmit>
	  wartosc = wartosc_enk;
 80015ea:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <main+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <main+0x280>)
 80015f0:	6013      	str	r3, [r2, #0]
	  }


 	 char sygnal[50];
 	 snprintf(sygnal, sizeof(sygnal), "Sygnal: %d \r\n", final_output);
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <main+0x284>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4638      	mov	r0, r7
 80015f8:	4a28      	ldr	r2, [pc, #160]	@ (800169c <main+0x288>)
 80015fa:	2132      	movs	r1, #50	@ 0x32
 80015fc:	f00b fbc6 	bl	800cd8c <sniprintf>
 	 char tempe[50];
 	 snprintf(tempe, sizeof(tempe), "Temp: %.2f C\r\n", temperature);
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <main+0x28c>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800160e:	ed8d 7b00 	vstr	d7, [sp]
 8001612:	4a24      	ldr	r2, [pc, #144]	@ (80016a4 <main+0x290>)
 8001614:	2132      	movs	r1, #50	@ 0x32
 8001616:	4618      	mov	r0, r3
 8001618:	f00b fbb8 	bl	800cd8c <sniprintf>
	     sprintf((char *)disp.f_line, sygnal);
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4821      	ldr	r0, [pc, #132]	@ (80016a8 <main+0x294>)
 8001622:	f00b fbe7 	bl	800cdf4 <siprintf>
	     sprintf((char *)disp.s_line, tempe);
 8001626:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800162a:	4619      	mov	r1, r3
 800162c:	481f      	ldr	r0, [pc, #124]	@ (80016ac <main+0x298>)
 800162e:	f00b fbe1 	bl	800cdf4 <siprintf>
	     lcd_display(&disp);
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <main+0x254>)
 8001634:	f7ff fe80 	bl	8001338 <lcd_display>
	     HAL_Delay(500);
 8001638:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800163c:	f000 ff6e 	bl	800251c <HAL_Delay>
  {
 8001640:	e78a      	b.n	8001558 <main+0x144>
 8001642:	bf00      	nop
 8001644:	58024400 	.word	0x58024400
 8001648:	24000208 	.word	0x24000208
 800164c:	240002b0 	.word	0x240002b0
 8001650:	24000370 	.word	0x24000370
 8001654:	2400000c 	.word	0x2400000c
 8001658:	24000010 	.word	0x24000010
 800165c:	24000014 	.word	0x24000014
 8001660:	459c4000 	.word	0x459c4000
 8001664:	240002c8 	.word	0x240002c8
 8001668:	240002f4 	.word	0x240002f4
 800166c:	240003bc 	.word	0x240003bc
 8001670:	24000324 	.word	0x24000324
 8001674:	240002bc 	.word	0x240002bc
 8001678:	24000408 	.word	0x24000408
 800167c:	51eb851f 	.word	0x51eb851f
 8001680:	2400031c 	.word	0x2400031c
 8001684:	58020400 	.word	0x58020400
 8001688:	08010408 	.word	0x08010408
 800168c:	08010410 	.word	0x08010410
 8001690:	0801041c 	.word	0x0801041c
 8001694:	24000008 	.word	0x24000008
 8001698:	240002ec 	.word	0x240002ec
 800169c:	08010420 	.word	0x08010420
 80016a0:	240002b8 	.word	0x240002b8
 80016a4:	08010430 	.word	0x08010430
 80016a8:	240002f5 	.word	0x240002f5
 80016ac:	24000306 	.word	0x24000306

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b09c      	sub	sp, #112	@ 0x70
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ba:	224c      	movs	r2, #76	@ 0x4c
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b fbfb 	bl	800ceba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2220      	movs	r2, #32
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00b fbf5 	bl	800ceba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016d0:	2004      	movs	r0, #4
 80016d2:	f003 fc9b 	bl	800500c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b28      	ldr	r3, [pc, #160]	@ (800177c <SystemClock_Config+0xcc>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	4a27      	ldr	r2, [pc, #156]	@ (800177c <SystemClock_Config+0xcc>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <SystemClock_Config+0xcc>)
 80016e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <SystemClock_Config+0xd0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f8:	4a21      	ldr	r2, [pc, #132]	@ (8001780 <SystemClock_Config+0xd0>)
 80016fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <SystemClock_Config+0xd0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800170c:	bf00      	nop
 800170e:	4b1c      	ldr	r3, [pc, #112]	@ (8001780 <SystemClock_Config+0xd0>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800171a:	d1f8      	bne.n	800170e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171c:	2302      	movs	r3, #2
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001720:	2301      	movs	r3, #1
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001724:	2340      	movs	r3, #64	@ 0x40
 8001726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001728:	2300      	movs	r3, #0
 800172a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	4618      	mov	r0, r3
 8001732:	f003 fcc5 	bl	80050c0 <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800173c:	f000 f9b0 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	233f      	movs	r3, #63	@ 0x3f
 8001742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001754:	2340      	movs	r3, #64	@ 0x40
 8001756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2101      	movs	r1, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f004 f905 	bl	8005974 <HAL_RCC_ClockConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001770:	f000 f996 	bl	8001aa0 <Error_Handler>
  }
}
 8001774:	bf00      	nop
 8001776:	3770      	adds	r7, #112	@ 0x70
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	58000400 	.word	0x58000400
 8001780:	58024800 	.word	0x58024800

08001784 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3)  // Sprawdzenie, czy to przycisk na PA3
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d111      	bne.n	80017b8 <HAL_GPIO_EXTI_Callback+0x34>
	    {
	        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET)
 8001794:	2101      	movs	r1, #1
 8001796:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001798:	f001 ff22 	bl	80035e0 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d105      	bne.n	80017ae <HAL_GPIO_EXTI_Callback+0x2a>
	        {
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // Włącz diodę
 80017a2:	2201      	movs	r2, #1
 80017a4:	2101      	movs	r1, #1
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017a8:	f001 ff32 	bl	8003610 <HAL_GPIO_WritePin>
	        else
	        {
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Wyłącz diodę
	        }
	    }
}
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_EXTI_Callback+0x34>
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Wyłącz diodę
 80017ae:	2200      	movs	r2, #0
 80017b0:	2101      	movs	r1, #1
 80017b2:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017b4:	f001 ff2c 	bl	8003610 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	58020400 	.word	0x58020400

080017c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09e      	sub	sp, #120	@ 0x78
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017d4:	f040 809f 	bne.w	8001916 <HAL_TIM_PeriodElapsedCallback+0x152>
  {
    // Timer interrupt triggered, perform UART transmission here
    temperature = BMP280_ReadTemperature(&hi2c1, &calib_data);
 80017d8:	4951      	ldr	r1, [pc, #324]	@ (8001920 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80017da:	4852      	ldr	r0, [pc, #328]	@ (8001924 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017dc:	f7ff fa34 	bl	8000c48 <BMP280_ReadTemperature>
 80017e0:	eef0 7a40 	vmov.f32	s15, s0
 80017e4:	4b50      	ldr	r3, [pc, #320]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80017e6:	edc3 7a00 	vstr	s15, [r3]
    pid_output = pid_calculate(&pid_controller, wartosc, temperature);
 80017ea:	4b50      	ldr	r3, [pc, #320]	@ (800192c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80017f2:	ed93 7a00 	vldr	s14, [r3]
 80017f6:	eef0 0a47 	vmov.f32	s1, s14
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	484c      	ldr	r0, [pc, #304]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001800:	f000 f990 	bl	8001b24 <pid_calculate>
 8001804:	eef0 7a40 	vmov.f32	s15, s0
 8001808:	4b4a      	ldr	r3, [pc, #296]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800180a:	edc3 7a00 	vstr	s15, [r3]
    licznik = licznik + 1;
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a48      	ldr	r2, [pc, #288]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001816:	6013      	str	r3, [r2, #0]

    scaled_output = ((pid_output - min_pid) / (float)(max_pid - min_pid))*1000.0;
 8001818:	4b46      	ldr	r3, [pc, #280]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800182e:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b42      	ldr	r3, [pc, #264]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001944 <HAL_TIM_PeriodElapsedCallback+0x180>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800184e:	edc3 7a00 	vstr	s15, [r3]


     if (scaled_output < 0.0) {
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d503      	bpl.n	800186a <HAL_TIM_PeriodElapsedCallback+0xa6>
         final_output = 0;
 8001862:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e017      	b.n	800189a <HAL_TIM_PeriodElapsedCallback+0xd6>
     } else if (scaled_output > 1000.0) {
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001944 <HAL_TIM_PeriodElapsedCallback+0x180>
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd04      	ble.n	8001888 <HAL_TIM_PeriodElapsedCallback+0xc4>
         final_output = 1000;
 800187e:	4b33      	ldr	r3, [pc, #204]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001880:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e008      	b.n	800189a <HAL_TIM_PeriodElapsedCallback+0xd6>
     } else {
         final_output = (int)scaled_output;  // rzutowanie na int
 8001888:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001892:	ee17 2a90 	vmov	r2, s15
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001898:	601a      	str	r2, [r3, #0]
     }

           // Ustawienie wypełnienia PWM
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, final_output);
 800189a:	4b2c      	ldr	r3, [pc, #176]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x188>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	63da      	str	r2, [r3, #60]	@ 0x3c
     if (licznik==50)
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b32      	cmp	r3, #50	@ 0x32
 80018aa:	d134      	bne.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x152>
     {
    	 char msg[50];
    	 snprintf(msg, sizeof(msg), "Wypełnienie: %d \r\n", final_output);
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x188>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f107 0008 	add.w	r0, r7, #8
 80018b4:	4a27      	ldr	r2, [pc, #156]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80018b6:	2132      	movs	r1, #50	@ 0x32
 80018b8:	f00b fa68 	bl	800cd8c <sniprintf>

    	 HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd5d 	bl	8000380 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f107 0108 	add.w	r1, r7, #8
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	4821      	ldr	r0, [pc, #132]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80018d4:	f007 feee 	bl	80096b4 <HAL_UART_Transmit>
    	 char uart_msg[50];
    	 snprintf(uart_msg, sizeof(uart_msg), "Temperature: %.2f C\r\n", temperature);
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018e6:	ed8d 7b00 	vstr	d7, [sp]
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80018ec:	2132      	movs	r1, #50	@ 0x32
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00b fa4c 	bl	800cd8c <sniprintf>

    	 HAL_UART_Transmit(&huart3, (uint8_t *)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80018f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd41 	bl	8000380 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	4813      	ldr	r0, [pc, #76]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800190c:	f007 fed2 	bl	80096b4 <HAL_UART_Transmit>
    	 licznik=0;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
     }


  }
}
 8001916:	bf00      	nop
 8001918:	3770      	adds	r7, #112	@ 0x70
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	240002b0 	.word	0x240002b0
 8001924:	24000208 	.word	0x24000208
 8001928:	240002b8 	.word	0x240002b8
 800192c:	24000008 	.word	0x24000008
 8001930:	240002c8 	.word	0x240002c8
 8001934:	240002e4 	.word	0x240002e4
 8001938:	240002f0 	.word	0x240002f0
 800193c:	24000318 	.word	0x24000318
 8001940:	24000018 	.word	0x24000018
 8001944:	447a0000 	.word	0x447a0000
 8001948:	240002e8 	.word	0x240002e8
 800194c:	240002ec 	.word	0x240002ec
 8001950:	24000370 	.word	0x24000370
 8001954:	08010440 	.word	0x08010440
 8001958:	24000408 	.word	0x24000408
 800195c:	08010454 	.word	0x08010454

08001960 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
 8001966:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a68 <HAL_UART_RxCpltCallback+0x108>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d175      	bne.n	8001a5e <HAL_UART_RxCpltCallback+0xfe>
    	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 8001972:	2101      	movs	r1, #1
 8001974:	483d      	ldr	r0, [pc, #244]	@ (8001a6c <HAL_UART_RxCpltCallback+0x10c>)
 8001976:	f001 fe33 	bl	80035e0 <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d169      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0xf4>

        if (strncmp("B", (char*)wejscie, 1) == 0) {
 8001980:	2201      	movs	r2, #1
 8001982:	493b      	ldr	r1, [pc, #236]	@ (8001a70 <HAL_UART_RxCpltCallback+0x110>)
 8001984:	483b      	ldr	r0, [pc, #236]	@ (8001a74 <HAL_UART_RxCpltCallback+0x114>)
 8001986:	f00b faa0 	bl	800ceca <strncmp>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d161      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0xf4>
        	 	pomoc[0] = wejscie[1];
 8001990:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_UART_RxCpltCallback+0x110>)
 8001992:	785a      	ldrb	r2, [r3, #1]
 8001994:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <HAL_UART_RxCpltCallback+0x118>)
 8001996:	701a      	strb	r2, [r3, #0]
        	    pomoc[1] = wejscie[2];
 8001998:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_UART_RxCpltCallback+0x110>)
 800199a:	789a      	ldrb	r2, [r3, #2]
 800199c:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <HAL_UART_RxCpltCallback+0x118>)
 800199e:	705a      	strb	r2, [r3, #1]


        	wartosc_spr =(float) atoi(pomoc);
 80019a0:	4835      	ldr	r0, [pc, #212]	@ (8001a78 <HAL_UART_RxCpltCallback+0x118>)
 80019a2:	f00a fa65 	bl	800be70 <atoi>
 80019a6:	ee07 0a90 	vmov	s15, r0
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_UART_RxCpltCallback+0x11c>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]

        	if (wartosc_spr>40 || wartosc_spr<20){
 80019b4:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <HAL_UART_RxCpltCallback+0x11c>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001a80 <HAL_UART_RxCpltCallback+0x120>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dc09      	bgt.n	80019dc <HAL_UART_RxCpltCallback+0x7c>
 80019c8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <HAL_UART_RxCpltCallback+0x11c>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d506      	bpl.n	80019ea <HAL_UART_RxCpltCallback+0x8a>
        		HAL_UART_Transmit(&huart3, "WARTOSC POZA ZAKRESEM BEZPIECZNYM 20-40 !!!", strlen("WARTOSC POZA ZAKRESEM BEZPIECZNYM 20-40 !!!"), 10);
 80019dc:	230a      	movs	r3, #10
 80019de:	222b      	movs	r2, #43	@ 0x2b
 80019e0:	4928      	ldr	r1, [pc, #160]	@ (8001a84 <HAL_UART_RxCpltCallback+0x124>)
 80019e2:	4829      	ldr	r0, [pc, #164]	@ (8001a88 <HAL_UART_RxCpltCallback+0x128>)
 80019e4:	f007 fe66 	bl	80096b4 <HAL_UART_Transmit>
        	if (wartosc_spr>40 || wartosc_spr<20){
 80019e8:	e034      	b.n	8001a54 <HAL_UART_RxCpltCallback+0xf4>
        	}
        	else{
        			wartosc = wartosc_spr;
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_UART_RxCpltCallback+0x11c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a27      	ldr	r2, [pc, #156]	@ (8001a8c <HAL_UART_RxCpltCallback+0x12c>)
 80019f0:	6013      	str	r3, [r2, #0]
        			pid_reset(&pid_controller);
 80019f2:	4827      	ldr	r0, [pc, #156]	@ (8001a90 <HAL_UART_RxCpltCallback+0x130>)
 80019f4:	f000 f884 	bl	8001b00 <pid_reset>
        		 // Wysyłamy wynik przez UART
        		 char transmit_msg[10];
        		 snprintf(transmit_msg, sizeof(transmit_msg), "%.1f", wartosc);
 80019f8:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_UART_RxCpltCallback+0x12c>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	ed8d 7b00 	vstr	d7, [sp]
 8001a0a:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <HAL_UART_RxCpltCallback+0x134>)
 8001a0c:	210a      	movs	r1, #10
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00b f9bc 	bl	800cd8c <sniprintf>

        		 HAL_UART_Transmit(&huart3 ,"ZADANE:", strlen("ZADANE:") ,1000 );
 8001a14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a18:	2207      	movs	r2, #7
 8001a1a:	491f      	ldr	r1, [pc, #124]	@ (8001a98 <HAL_UART_RxCpltCallback+0x138>)
 8001a1c:	481a      	ldr	r0, [pc, #104]	@ (8001a88 <HAL_UART_RxCpltCallback+0x128>)
 8001a1e:	f007 fe49 	bl	80096b4 <HAL_UART_Transmit>
        		 HAL_UART_Transmit(&huart3, (uint8_t*)transmit_msg, strlen(transmit_msg), 10);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fcaa 	bl	8000380 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f107 010c 	add.w	r1, r7, #12
 8001a34:	230a      	movs	r3, #10
 8001a36:	4814      	ldr	r0, [pc, #80]	@ (8001a88 <HAL_UART_RxCpltCallback+0x128>)
 8001a38:	f007 fe3c 	bl	80096b4 <HAL_UART_Transmit>
        		 HAL_UART_Transmit(&huart3 ,( uint8_t*) "\r\n", strlen( "\r\n" ), 1000 );
 8001a3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a40:	2202      	movs	r2, #2
 8001a42:	4916      	ldr	r1, [pc, #88]	@ (8001a9c <HAL_UART_RxCpltCallback+0x13c>)
 8001a44:	4810      	ldr	r0, [pc, #64]	@ (8001a88 <HAL_UART_RxCpltCallback+0x128>)
 8001a46:	f007 fe35 	bl	80096b4 <HAL_UART_Transmit>
        		 memset(wejscie, ' ', 3);
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	4808      	ldr	r0, [pc, #32]	@ (8001a70 <HAL_UART_RxCpltCallback+0x110>)
 8001a50:	f00b fa33 	bl	800ceba <memset>

        	}
        }
    	}
        HAL_UART_Receive_IT(&huart3, (uint8_t*)wejscie, 3);
 8001a54:	2203      	movs	r2, #3
 8001a56:	4906      	ldr	r1, [pc, #24]	@ (8001a70 <HAL_UART_RxCpltCallback+0x110>)
 8001a58:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <HAL_UART_RxCpltCallback+0x128>)
 8001a5a:	f007 feb9 	bl	80097d0 <HAL_UART_Receive_IT>
    }
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40004800 	.word	0x40004800
 8001a6c:	58020400 	.word	0x58020400
 8001a70:	240002bc 	.word	0x240002bc
 8001a74:	0801046c 	.word	0x0801046c
 8001a78:	240002c0 	.word	0x240002c0
 8001a7c:	240002c4 	.word	0x240002c4
 8001a80:	42200000 	.word	0x42200000
 8001a84:	08010470 	.word	0x08010470
 8001a88:	24000408 	.word	0x24000408
 8001a8c:	24000008 	.word	0x24000008
 8001a90:	240002c8 	.word	0x240002c8
 8001a94:	0801049c 	.word	0x0801049c
 8001a98:	080104a4 	.word	0x080104a4
 8001a9c:	0801041c 	.word	0x0801041c

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <pid_init>:
#include "pid.h"

void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, float anti_windup_limit_init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6178      	str	r0, [r7, #20]
 8001ab4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ab8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001abc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ac0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid_data->previous_error = 0;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]

	pid_data->previous_i_term = 0;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]

	pid_data->Kp = kp_init;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	615a      	str	r2, [r3, #20]
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <pid_reset>:

void pid_reset(pid_str *pid_data)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <pid_calculate>:

float pid_calculate(pid_str *pid_data, float setpoint, float process_variable)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b30:	edc7 0a01 	vstr	s1, [r7, #4]
	 float error = setpoint - process_variable;
 8001b34:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24




	    float p_term = pid_data->Kp * error;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b4a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b52:	edc7 7a08 	vstr	s15, [r7, #32]

	    float i_term = pid_data->Ki * pid_data->total_error;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	edc7 7a07 	vstr	s15, [r7, #28]
//	    if (abs(error)<setpoint/10.0)
//	    	{pid_data->total_error += error;
//	    	i_term = pid_data->Ki * pid_data->total_error;}


	    float d_term = pid_data->Kd * (error - pid_data->previous_error);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001b7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b82:	edc7 7a06 	vstr	s15, [r7, #24]
//
//	    if (i_term > pid_data->anti_windup_limit){ i_term = pid_data->anti_windup_limit;}
//	    if (i_term < -pid_data->anti_windup_limit) {i_term = -pid_data->anti_windup_limit;}

	    pid_data->previous_error = error;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8a:	601a      	str	r2, [r3, #0]

	    pid_data->previous_i_term = i_term;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	619a      	str	r2, [r3, #24]

	    float output = (float)(p_term + i_term + d_term);
 8001b92:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	edc7 7a05 	vstr	s15, [r7, #20]
	    return output;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	ee07 3a90 	vmov	s15, r3
}
 8001bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb4:	372c      	adds	r7, #44	@ 0x2c
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_MspInit+0x30>)
 8001bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bcc:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_MspInit+0x30>)
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_MspInit+0x30>)
 8001bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	58024400 	.word	0x58024400

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4a:	f000 fc47 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GUZIK_Pin);
 8001c56:	2008      	movs	r0, #8
 8001c58:	f001 fcf3 	bl	8003642 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <TIM2_IRQHandler+0x10>)
 8001c66:	f006 fcad 	bl	80085c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24000324 	.word	0x24000324

08001c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <TIM3_IRQHandler+0x10>)
 8001c7a:	f006 fca3 	bl	80085c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	24000370 	.word	0x24000370

08001c88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <I2C1_EV_IRQHandler+0x10>)
 8001c8e:	f001 ffef 	bl	8003c70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	24000208 	.word	0x24000208

08001c9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <I2C1_ER_IRQHandler+0x10>)
 8001ca2:	f001 ffff 	bl	8003ca4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	24000208 	.word	0x24000208

08001cb0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <I2C2_EV_IRQHandler+0x10>)
 8001cb6:	f001 ffdb 	bl	8003c70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2400025c 	.word	0x2400025c

08001cc4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <I2C2_ER_IRQHandler+0x10>)
 8001cca:	f001 ffeb 	bl	8003ca4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2400025c 	.word	0x2400025c

08001cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <USART3_IRQHandler+0x10>)
 8001cde:	f007 fdc3 	bl	8009868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24000408 	.word	0x24000408

08001cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d06:	f00b f93d 	bl	800cf84 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <_exit+0x12>

08001d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e00a      	b.n	8001d5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d44:	f3af 8000 	nop.w
 8001d48:	4601      	mov	r1, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbf0      	blt.n	8001d44 <_read+0x12>
  }

  return len;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e009      	b.n	8001d92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbf1      	blt.n	8001d7e <_write+0x12>
  }
  return len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_close>:

int _close(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_isatty>:

int _isatty(int file)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f00b f8a2 	bl	800cf84 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24080000 	.word	0x24080000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	24000320 	.word	0x24000320
 8001e74:	240005f0 	.word	0x240005f0

08001e78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001e98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ea0:	f240 227f 	movw	r2, #639	@ 0x27f
 8001ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001eae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b16      	ldr	r3, [pc, #88]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec0:	4813      	ldr	r0, [pc, #76]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ec2:	f005 ff0f 	bl	8007ce4 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ecc:	f7ff fde8 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001ede:	f006 fd8d 	bl	80089fc <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ee8:	f7ff fdda 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_TIM2_Init+0x98>)
 8001efa:	f007 fadf 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f04:	f7ff fdcc 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	24000324 	.word	0x24000324

08001f14 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f26:	463b      	mov	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f3a:	4a23      	ldr	r2, [pc, #140]	@ (8001fc8 <MX_TIM3_Init+0xb4>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f40:	223f      	movs	r2, #63	@ 0x3f
 8001f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f5e:	4819      	ldr	r0, [pc, #100]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f60:	f006 f800 	bl	8007f64 <HAL_TIM_PWM_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f6a:	f7ff fd99 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001f7e:	f007 fa9d 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001f88:	f7ff fd8a 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8c:	2360      	movs	r3, #96	@ 0x60
 8001f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001f90:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001fa6:	f006 fc15 	bl	80087d4 <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001fb0:	f7ff fd76 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fb4:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <MX_TIM3_Init+0xb0>)
 8001fb6:	f000 f8fb 	bl	80021b0 <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	24000370 	.word	0x24000370
 8001fc8:	40000400 	.word	0x40000400

08001fcc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	@ 0x30
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2224      	movs	r2, #36	@ 0x24
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00a ff6d 	bl	800ceba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <MX_TIM8_Init+0xac>)
 8001fec:	4a23      	ldr	r2, [pc, #140]	@ (800207c <MX_TIM8_Init+0xb0>)
 8001fee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_TIM8_Init+0xac>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <MX_TIM8_Init+0xac>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_TIM8_Init+0xac>)
 8001ffe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002002:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_TIM8_Init+0xac>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_TIM8_Init+0xac>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_TIM8_Init+0xac>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002016:	2303      	movs	r3, #3
 8002018:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800202e:	2301      	movs	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4619      	mov	r1, r3
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_TIM8_Init+0xac>)
 8002042:	f006 f98b 	bl	800835c <HAL_TIM_Encoder_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800204c:	f7ff fd28 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_TIM8_Init+0xac>)
 8002062:	f007 fa2b 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800206c:	f7ff fd18 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	@ 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	240003bc 	.word	0x240003bc
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002090:	d116      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 8002094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002098:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 80020a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	201c      	movs	r0, #28
 80020b6:	f000 fb3c 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ba:	201c      	movs	r0, #28
 80020bc:	f000 fb53 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	58024400 	.word	0x58024400

080020cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002114 <HAL_TIM_PWM_MspInit+0x48>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d116      	bne.n	800210c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_TIM_PWM_MspInit+0x4c>)
 80020e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <HAL_TIM_PWM_MspInit+0x4c>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <HAL_TIM_PWM_MspInit+0x4c>)
 80020f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	201d      	movs	r0, #29
 8002102:	f000 fb16 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002106:	201d      	movs	r0, #29
 8002108:	f000 fb2d 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40000400 	.word	0x40000400
 8002118:	58024400 	.word	0x58024400

0800211c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1a      	ldr	r2, [pc, #104]	@ (80021a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d12d      	bne.n	800219a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002144:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800214e:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002162:	4a11      	ldr	r2, [pc, #68]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800217a:	23c0      	movs	r3, #192	@ 0xc0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800218a:	2303      	movs	r3, #3
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	@ (80021ac <HAL_TIM_Encoder_MspInit+0x90>)
 8002196:	f001 f873 	bl	8003280 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	@ 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40010400 	.word	0x40010400
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58020800 	.word	0x58020800

080021b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a13      	ldr	r2, [pc, #76]	@ (800221c <HAL_TIM_MspPostInit+0x6c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d11f      	bne.n	8002212 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_TIM_MspPostInit+0x70>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <HAL_TIM_MspPostInit+0x70>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_TIM_MspPostInit+0x70>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002202:	2302      	movs	r3, #2
 8002204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_TIM_MspPostInit+0x74>)
 800220e:	f001 f837 	bl	8003280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40000400 	.word	0x40000400
 8002220:	58024400 	.word	0x58024400
 8002224:	58020800 	.word	0x58020800

08002228 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 800222e:	4a23      	ldr	r2, [pc, #140]	@ (80022bc <MX_USART3_UART_Init+0x94>)
 8002230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002232:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002264:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800226a:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002270:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002272:	f007 f9cf 	bl	8009614 <HAL_UART_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800227c:	f7ff fc10 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002280:	2100      	movs	r1, #0
 8002282:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002284:	f009 fd29 	bl	800bcda <HAL_UARTEx_SetTxFifoThreshold>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800228e:	f7ff fc07 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002292:	2100      	movs	r1, #0
 8002294:	4808      	ldr	r0, [pc, #32]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 8002296:	f009 fd5e 	bl	800bd56 <HAL_UARTEx_SetRxFifoThreshold>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80022a0:	f7ff fbfe 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022a4:	4804      	ldr	r0, [pc, #16]	@ (80022b8 <MX_USART3_UART_Init+0x90>)
 80022a6:	f009 fcdf 	bl	800bc68 <HAL_UARTEx_DisableFifoMode>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80022b0:	f7ff fbf6 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	24000408 	.word	0x24000408
 80022bc:	40004800 	.word	0x40004800

080022c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0ba      	sub	sp, #232	@ 0xe8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	22c0      	movs	r2, #192	@ 0xc0
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00a fdea 	bl	800ceba <memset>
  if(uartHandle->Instance==USART3)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002398 <HAL_UART_MspInit+0xd8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d14e      	bne.n	800238e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f0:	f04f 0202 	mov.w	r2, #2
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fec0 	bl	800608c <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002312:	f7ff fbc5 	bl	8001aa0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_UART_MspInit+0xdc>)
 8002318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800231c:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <HAL_UART_MspInit+0xdc>)
 800231e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002322:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_UART_MspInit+0xdc>)
 8002328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800232c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_UART_MspInit+0xdc>)
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233a:	4a18      	ldr	r2, [pc, #96]	@ (800239c <HAL_UART_MspInit+0xdc>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <HAL_UART_MspInit+0xdc>)
 8002346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002352:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236c:	2307      	movs	r3, #7
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002376:	4619      	mov	r1, r3
 8002378:	4809      	ldr	r0, [pc, #36]	@ (80023a0 <HAL_UART_MspInit+0xe0>)
 800237a:	f000 ff81 	bl	8003280 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	2027      	movs	r0, #39	@ 0x27
 8002384:	f000 f9d5 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002388:	2027      	movs	r0, #39	@ 0x27
 800238a:	f000 f9ec 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800238e:	bf00      	nop
 8002390:	37e8      	adds	r7, #232	@ 0xe8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40004800 	.word	0x40004800
 800239c:	58024400 	.word	0x58024400
 80023a0:	58020c00 	.word	0x58020c00

080023a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023a8:	f7fe fb5e 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ae:	490d      	ldr	r1, [pc, #52]	@ (80023e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023b0:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b4:	e002      	b.n	80023bc <LoopCopyDataInit>

080023b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ba:	3304      	adds	r3, #4

080023bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c0:	d3f9      	bcc.n	80023b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023c4:	4c0a      	ldr	r4, [pc, #40]	@ (80023f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c8:	e001      	b.n	80023ce <LoopFillZerobss>

080023ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023cc:	3204      	adds	r2, #4

080023ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d0:	d3fb      	bcc.n	80023ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023d2:	f00a fddd 	bl	800cf90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023d6:	f7ff f81d 	bl	8001414 <main>
  bx  lr
 80023da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023e4:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 80023e8:	08010920 	.word	0x08010920
  ldr r2, =_sbss
 80023ec:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 80023f0:	240005ec 	.word	0x240005ec

080023f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC3_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 f98c 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002404:	f003 fc6c 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_Init+0x68>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	4913      	ldr	r1, [pc, #76]	@ (8002464 <HAL_Init+0x6c>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_Init+0x68>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	4a0e      	ldr	r2, [pc, #56]	@ (8002464 <HAL_Init+0x6c>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <HAL_Init+0x70>)
 800243a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800243c:	4a0b      	ldr	r2, [pc, #44]	@ (800246c <HAL_Init+0x74>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f814 	bl	8002470 <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e002      	b.n	8002458 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002452:	f7ff fbb5 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	58024400 	.word	0x58024400
 8002464:	080104ac 	.word	0x080104ac
 8002468:	24000004 	.word	0x24000004
 800246c:	24000000 	.word	0x24000000

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002478:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_InitTick+0x60>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e021      	b.n	80024c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002484:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <HAL_InitTick+0x64>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_InitTick+0x60>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f971 	bl	8002782 <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 f93b 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	@ (80024d8 <HAL_InitTick+0x68>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	24000020 	.word	0x24000020
 80024d4:	24000000 	.word	0x24000000
 80024d8:	2400001c 	.word	0x2400001c

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	24000020 	.word	0x24000020
 8002500:	2400049c 	.word	0x2400049c

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2400049c 	.word	0x2400049c

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000020 	.word	0x24000020

08002564 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_GetREVID+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0c1b      	lsrs	r3, r3, #16
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	5c001000 	.word	0x5c001000

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <__NVIC_SetPriorityGrouping+0x40>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <__NVIC_SetPriorityGrouping+0x40>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00
 80025c0:	05fa0000 	.word	0x05fa0000

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	@ (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	@ (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <__NVIC_SetPriority+0x50>)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	@ 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff40 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff90 	bl	8002670 <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5f 	bl	800261c <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff33 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa4 	bl	80026d8 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff feae 	bl	8002504 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e2dc      	b.n	8002d6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2280      	movs	r2, #128	@ 0x80
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e2cd      	b.n	8002d6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a76      	ldr	r2, [pc, #472]	@ (80029b0 <HAL_DMA_Abort+0x214>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04a      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a74      	ldr	r2, [pc, #464]	@ (80029b4 <HAL_DMA_Abort+0x218>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d045      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	@ (80029b8 <HAL_DMA_Abort+0x21c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a71      	ldr	r2, [pc, #452]	@ (80029bc <HAL_DMA_Abort+0x220>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d03b      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a70      	ldr	r2, [pc, #448]	@ (80029c0 <HAL_DMA_Abort+0x224>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	@ (80029c4 <HAL_DMA_Abort+0x228>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	@ (80029c8 <HAL_DMA_Abort+0x22c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	@ (80029cc <HAL_DMA_Abort+0x230>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d027      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_DMA_Abort+0x234>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	@ (80029d4 <HAL_DMA_Abort+0x238>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	@ (80029d8 <HAL_DMA_Abort+0x23c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	@ (80029dc <HAL_DMA_Abort+0x240>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	@ (80029e0 <HAL_DMA_Abort+0x244>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	@ (80029e4 <HAL_DMA_Abort+0x248>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	@ (80029e8 <HAL_DMA_Abort+0x24c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_Abort+0xd6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a5f      	ldr	r2, [pc, #380]	@ (80029ec <HAL_DMA_Abort+0x250>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Abort+0xda>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_DMA_Abort+0xdc>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 021e 	bic.w	r2, r2, #30
 800288a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800289a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e00a      	b.n	80028ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 020e 	bic.w	r2, r2, #14
 80028b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3c      	ldr	r2, [pc, #240]	@ (80029b0 <HAL_DMA_Abort+0x214>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d072      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3a      	ldr	r2, [pc, #232]	@ (80029b4 <HAL_DMA_Abort+0x218>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d06d      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a39      	ldr	r2, [pc, #228]	@ (80029b8 <HAL_DMA_Abort+0x21c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d068      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a37      	ldr	r2, [pc, #220]	@ (80029bc <HAL_DMA_Abort+0x220>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d063      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a36      	ldr	r2, [pc, #216]	@ (80029c0 <HAL_DMA_Abort+0x224>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d05e      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a34      	ldr	r2, [pc, #208]	@ (80029c4 <HAL_DMA_Abort+0x228>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d059      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a33      	ldr	r2, [pc, #204]	@ (80029c8 <HAL_DMA_Abort+0x22c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d054      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a31      	ldr	r2, [pc, #196]	@ (80029cc <HAL_DMA_Abort+0x230>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04f      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a30      	ldr	r2, [pc, #192]	@ (80029d0 <HAL_DMA_Abort+0x234>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04a      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2e      	ldr	r2, [pc, #184]	@ (80029d4 <HAL_DMA_Abort+0x238>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d045      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <HAL_DMA_Abort+0x23c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d040      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2b      	ldr	r2, [pc, #172]	@ (80029dc <HAL_DMA_Abort+0x240>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d03b      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2a      	ldr	r2, [pc, #168]	@ (80029e0 <HAL_DMA_Abort+0x244>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d036      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a28      	ldr	r2, [pc, #160]	@ (80029e4 <HAL_DMA_Abort+0x248>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d031      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a27      	ldr	r2, [pc, #156]	@ (80029e8 <HAL_DMA_Abort+0x24c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d02c      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a25      	ldr	r2, [pc, #148]	@ (80029ec <HAL_DMA_Abort+0x250>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d027      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a24      	ldr	r2, [pc, #144]	@ (80029f0 <HAL_DMA_Abort+0x254>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a22      	ldr	r2, [pc, #136]	@ (80029f4 <HAL_DMA_Abort+0x258>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01d      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a21      	ldr	r2, [pc, #132]	@ (80029f8 <HAL_DMA_Abort+0x25c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_DMA_Abort+0x260>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <HAL_DMA_Abort+0x264>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <HAL_DMA_Abort+0x268>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_DMA_Abort+0x26c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_DMA_Abort+0x20e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <HAL_DMA_Abort+0x270>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d132      	bne.n	8002a10 <HAL_DMA_Abort+0x274>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e031      	b.n	8002a12 <HAL_DMA_Abort+0x276>
 80029ae:	bf00      	nop
 80029b0:	40020010 	.word	0x40020010
 80029b4:	40020028 	.word	0x40020028
 80029b8:	40020040 	.word	0x40020040
 80029bc:	40020058 	.word	0x40020058
 80029c0:	40020070 	.word	0x40020070
 80029c4:	40020088 	.word	0x40020088
 80029c8:	400200a0 	.word	0x400200a0
 80029cc:	400200b8 	.word	0x400200b8
 80029d0:	40020410 	.word	0x40020410
 80029d4:	40020428 	.word	0x40020428
 80029d8:	40020440 	.word	0x40020440
 80029dc:	40020458 	.word	0x40020458
 80029e0:	40020470 	.word	0x40020470
 80029e4:	40020488 	.word	0x40020488
 80029e8:	400204a0 	.word	0x400204a0
 80029ec:	400204b8 	.word	0x400204b8
 80029f0:	58025408 	.word	0x58025408
 80029f4:	5802541c 	.word	0x5802541c
 80029f8:	58025430 	.word	0x58025430
 80029fc:	58025444 	.word	0x58025444
 8002a00:	58025458 	.word	0x58025458
 8002a04:	5802546c 	.word	0x5802546c
 8002a08:	58025480 	.word	0x58025480
 8002a0c:	58025494 	.word	0x58025494
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6d      	ldr	r2, [pc, #436]	@ (8002be0 <HAL_DMA_Abort+0x444>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	@ (8002be4 <HAL_DMA_Abort+0x448>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6a      	ldr	r2, [pc, #424]	@ (8002be8 <HAL_DMA_Abort+0x44c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	@ (8002bec <HAL_DMA_Abort+0x450>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a67      	ldr	r2, [pc, #412]	@ (8002bf0 <HAL_DMA_Abort+0x454>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	@ (8002bf4 <HAL_DMA_Abort+0x458>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a64      	ldr	r2, [pc, #400]	@ (8002bf8 <HAL_DMA_Abort+0x45c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a62      	ldr	r2, [pc, #392]	@ (8002bfc <HAL_DMA_Abort+0x460>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a61      	ldr	r2, [pc, #388]	@ (8002c00 <HAL_DMA_Abort+0x464>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5f      	ldr	r2, [pc, #380]	@ (8002c04 <HAL_DMA_Abort+0x468>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c08 <HAL_DMA_Abort+0x46c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5c      	ldr	r2, [pc, #368]	@ (8002c0c <HAL_DMA_Abort+0x470>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c10 <HAL_DMA_Abort+0x474>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a59      	ldr	r2, [pc, #356]	@ (8002c14 <HAL_DMA_Abort+0x478>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a58      	ldr	r2, [pc, #352]	@ (8002c18 <HAL_DMA_Abort+0x47c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort+0x32a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_DMA_Abort+0x480>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <HAL_DMA_Abort+0x33c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e007      	b.n	8002ae8 <HAL_DMA_Abort+0x34c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ae8:	e013      	b.n	8002b12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aea:	f7ff fd0b 	bl	8002504 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d90c      	bls.n	8002b12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e12d      	b.n	8002d6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2f      	ldr	r2, [pc, #188]	@ (8002be0 <HAL_DMA_Abort+0x444>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04a      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	@ (8002be4 <HAL_DMA_Abort+0x448>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d045      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2c      	ldr	r2, [pc, #176]	@ (8002be8 <HAL_DMA_Abort+0x44c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d040      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	@ (8002bec <HAL_DMA_Abort+0x450>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d03b      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a29      	ldr	r2, [pc, #164]	@ (8002bf0 <HAL_DMA_Abort+0x454>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d036      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_DMA_Abort+0x458>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d031      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a26      	ldr	r2, [pc, #152]	@ (8002bf8 <HAL_DMA_Abort+0x45c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d02c      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <HAL_DMA_Abort+0x460>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d027      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a23      	ldr	r2, [pc, #140]	@ (8002c00 <HAL_DMA_Abort+0x464>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	@ (8002c04 <HAL_DMA_Abort+0x468>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01d      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a20      	ldr	r2, [pc, #128]	@ (8002c08 <HAL_DMA_Abort+0x46c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	@ (8002c0c <HAL_DMA_Abort+0x470>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c10 <HAL_DMA_Abort+0x474>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00e      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c14 <HAL_DMA_Abort+0x478>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	@ (8002c18 <HAL_DMA_Abort+0x47c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_DMA_Abort+0x422>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	@ (8002c1c <HAL_DMA_Abort+0x480>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_Abort+0x426>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_DMA_Abort+0x428>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02b      	beq.n	8002c20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	223f      	movs	r2, #63	@ 0x3f
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	e02a      	b.n	8002c36 <HAL_DMA_Abort+0x49a>
 8002be0:	40020010 	.word	0x40020010
 8002be4:	40020028 	.word	0x40020028
 8002be8:	40020040 	.word	0x40020040
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	40020070 	.word	0x40020070
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	400200a0 	.word	0x400200a0
 8002bfc:	400200b8 	.word	0x400200b8
 8002c00:	40020410 	.word	0x40020410
 8002c04:	40020428 	.word	0x40020428
 8002c08:	40020440 	.word	0x40020440
 8002c0c:	40020458 	.word	0x40020458
 8002c10:	40020470 	.word	0x40020470
 8002c14:	40020488 	.word	0x40020488
 8002c18:	400204a0 	.word	0x400204a0
 8002c1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2201      	movs	r2, #1
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d78 <HAL_DMA_Abort+0x5dc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d072      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a4d      	ldr	r2, [pc, #308]	@ (8002d7c <HAL_DMA_Abort+0x5e0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d06d      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002d80 <HAL_DMA_Abort+0x5e4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d068      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4a      	ldr	r2, [pc, #296]	@ (8002d84 <HAL_DMA_Abort+0x5e8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d063      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a49      	ldr	r2, [pc, #292]	@ (8002d88 <HAL_DMA_Abort+0x5ec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d05e      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a47      	ldr	r2, [pc, #284]	@ (8002d8c <HAL_DMA_Abort+0x5f0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d059      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a46      	ldr	r2, [pc, #280]	@ (8002d90 <HAL_DMA_Abort+0x5f4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d054      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a44      	ldr	r2, [pc, #272]	@ (8002d94 <HAL_DMA_Abort+0x5f8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04f      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a43      	ldr	r2, [pc, #268]	@ (8002d98 <HAL_DMA_Abort+0x5fc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a41      	ldr	r2, [pc, #260]	@ (8002d9c <HAL_DMA_Abort+0x600>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a40      	ldr	r2, [pc, #256]	@ (8002da0 <HAL_DMA_Abort+0x604>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8002da4 <HAL_DMA_Abort+0x608>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8002da8 <HAL_DMA_Abort+0x60c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3b      	ldr	r2, [pc, #236]	@ (8002dac <HAL_DMA_Abort+0x610>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8002db0 <HAL_DMA_Abort+0x614>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a38      	ldr	r2, [pc, #224]	@ (8002db4 <HAL_DMA_Abort+0x618>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a37      	ldr	r2, [pc, #220]	@ (8002db8 <HAL_DMA_Abort+0x61c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	@ (8002dbc <HAL_DMA_Abort+0x620>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <HAL_DMA_Abort+0x624>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	@ (8002dc4 <HAL_DMA_Abort+0x628>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a31      	ldr	r2, [pc, #196]	@ (8002dc8 <HAL_DMA_Abort+0x62c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002dcc <HAL_DMA_Abort+0x630>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <HAL_DMA_Abort+0x634>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort+0x58a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd4 <HAL_DMA_Abort+0x638>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Abort+0x58e>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_DMA_Abort+0x590>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	58025408 	.word	0x58025408
 8002dbc:	5802541c 	.word	0x5802541c
 8002dc0:	58025430 	.word	0x58025430
 8002dc4:	58025444 	.word	0x58025444
 8002dc8:	58025458 	.word	0x58025458
 8002dcc:	5802546c 	.word	0x5802546c
 8002dd0:	58025480 	.word	0x58025480
 8002dd4:	58025494 	.word	0x58025494

08002dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e237      	b.n	800325a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d004      	beq.n	8002e00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	@ 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e22c      	b.n	800325a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a5c      	ldr	r2, [pc, #368]	@ (8002f78 <HAL_DMA_Abort_IT+0x1a0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d04a      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f7c <HAL_DMA_Abort_IT+0x1a4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d045      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a59      	ldr	r2, [pc, #356]	@ (8002f80 <HAL_DMA_Abort_IT+0x1a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d040      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a58      	ldr	r2, [pc, #352]	@ (8002f84 <HAL_DMA_Abort_IT+0x1ac>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d03b      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a56      	ldr	r2, [pc, #344]	@ (8002f88 <HAL_DMA_Abort_IT+0x1b0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d036      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a55      	ldr	r2, [pc, #340]	@ (8002f8c <HAL_DMA_Abort_IT+0x1b4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d031      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a53      	ldr	r2, [pc, #332]	@ (8002f90 <HAL_DMA_Abort_IT+0x1b8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d02c      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a52      	ldr	r2, [pc, #328]	@ (8002f94 <HAL_DMA_Abort_IT+0x1bc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d027      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a50      	ldr	r2, [pc, #320]	@ (8002f98 <HAL_DMA_Abort_IT+0x1c0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d022      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a4f      	ldr	r2, [pc, #316]	@ (8002f9c <HAL_DMA_Abort_IT+0x1c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1d0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a49      	ldr	r2, [pc, #292]	@ (8002fac <HAL_DMA_Abort_IT+0x1d4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a47      	ldr	r2, [pc, #284]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1d8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a46      	ldr	r2, [pc, #280]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA_Abort_IT+0xcc>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xce>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8086 	beq.w	8002fb8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002f78 <HAL_DMA_Abort_IT+0x1a0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d04a      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	@ (8002f7c <HAL_DMA_Abort_IT+0x1a4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d045      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f80 <HAL_DMA_Abort_IT+0x1a8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d040      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <HAL_DMA_Abort_IT+0x1ac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d03b      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	@ (8002f88 <HAL_DMA_Abort_IT+0x1b0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d036      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <HAL_DMA_Abort_IT+0x1b4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d031      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a26      	ldr	r2, [pc, #152]	@ (8002f90 <HAL_DMA_Abort_IT+0x1b8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d02c      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a25      	ldr	r2, [pc, #148]	@ (8002f94 <HAL_DMA_Abort_IT+0x1bc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d027      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a23      	ldr	r2, [pc, #140]	@ (8002f98 <HAL_DMA_Abort_IT+0x1c0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d022      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a22      	ldr	r2, [pc, #136]	@ (8002f9c <HAL_DMA_Abort_IT+0x1c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d01d      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a20      	ldr	r2, [pc, #128]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1c8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d018      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1cc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1d0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fac <HAL_DMA_Abort_IT+0x1d4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1d8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x17c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a19      	ldr	r2, [pc, #100]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1dc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d108      	bne.n	8002f66 <HAL_DMA_Abort_IT+0x18e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e178      	b.n	8003258 <HAL_DMA_Abort_IT+0x480>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e16f      	b.n	8003258 <HAL_DMA_Abort_IT+0x480>
 8002f78:	40020010 	.word	0x40020010
 8002f7c:	40020028 	.word	0x40020028
 8002f80:	40020040 	.word	0x40020040
 8002f84:	40020058 	.word	0x40020058
 8002f88:	40020070 	.word	0x40020070
 8002f8c:	40020088 	.word	0x40020088
 8002f90:	400200a0 	.word	0x400200a0
 8002f94:	400200b8 	.word	0x400200b8
 8002f98:	40020410 	.word	0x40020410
 8002f9c:	40020428 	.word	0x40020428
 8002fa0:	40020440 	.word	0x40020440
 8002fa4:	40020458 	.word	0x40020458
 8002fa8:	40020470 	.word	0x40020470
 8002fac:	40020488 	.word	0x40020488
 8002fb0:	400204a0 	.word	0x400204a0
 8002fb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020e 	bic.w	r2, r2, #14
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6c      	ldr	r2, [pc, #432]	@ (8003180 <HAL_DMA_Abort_IT+0x3a8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d04a      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8003184 <HAL_DMA_Abort_IT+0x3ac>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d045      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a69      	ldr	r2, [pc, #420]	@ (8003188 <HAL_DMA_Abort_IT+0x3b0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d040      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a68      	ldr	r2, [pc, #416]	@ (800318c <HAL_DMA_Abort_IT+0x3b4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03b      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a66      	ldr	r2, [pc, #408]	@ (8003190 <HAL_DMA_Abort_IT+0x3b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d036      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_DMA_Abort_IT+0x3bc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d031      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a63      	ldr	r2, [pc, #396]	@ (8003198 <HAL_DMA_Abort_IT+0x3c0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d02c      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a62      	ldr	r2, [pc, #392]	@ (800319c <HAL_DMA_Abort_IT+0x3c4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a60      	ldr	r2, [pc, #384]	@ (80031a0 <HAL_DMA_Abort_IT+0x3c8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d022      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5f      	ldr	r2, [pc, #380]	@ (80031a4 <HAL_DMA_Abort_IT+0x3cc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d01d      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5d      	ldr	r2, [pc, #372]	@ (80031a8 <HAL_DMA_Abort_IT+0x3d0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5c      	ldr	r2, [pc, #368]	@ (80031ac <HAL_DMA_Abort_IT+0x3d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5a      	ldr	r2, [pc, #360]	@ (80031b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a59      	ldr	r2, [pc, #356]	@ (80031b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a57      	ldr	r2, [pc, #348]	@ (80031b8 <HAL_DMA_Abort_IT+0x3e0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_Abort_IT+0x290>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a56      	ldr	r2, [pc, #344]	@ (80031bc <HAL_DMA_Abort_IT+0x3e4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <HAL_DMA_Abort_IT+0x2a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <HAL_DMA_Abort_IT+0x2b2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3c      	ldr	r2, [pc, #240]	@ (8003180 <HAL_DMA_Abort_IT+0x3a8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d072      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3a      	ldr	r2, [pc, #232]	@ (8003184 <HAL_DMA_Abort_IT+0x3ac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d06d      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a39      	ldr	r2, [pc, #228]	@ (8003188 <HAL_DMA_Abort_IT+0x3b0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d068      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a37      	ldr	r2, [pc, #220]	@ (800318c <HAL_DMA_Abort_IT+0x3b4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d063      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a36      	ldr	r2, [pc, #216]	@ (8003190 <HAL_DMA_Abort_IT+0x3b8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a34      	ldr	r2, [pc, #208]	@ (8003194 <HAL_DMA_Abort_IT+0x3bc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d059      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a33      	ldr	r2, [pc, #204]	@ (8003198 <HAL_DMA_Abort_IT+0x3c0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d054      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a31      	ldr	r2, [pc, #196]	@ (800319c <HAL_DMA_Abort_IT+0x3c4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d04f      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a30      	ldr	r2, [pc, #192]	@ (80031a0 <HAL_DMA_Abort_IT+0x3c8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d04a      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2e      	ldr	r2, [pc, #184]	@ (80031a4 <HAL_DMA_Abort_IT+0x3cc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d045      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	@ (80031a8 <HAL_DMA_Abort_IT+0x3d0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d040      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	@ (80031ac <HAL_DMA_Abort_IT+0x3d4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d03b      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2a      	ldr	r2, [pc, #168]	@ (80031b0 <HAL_DMA_Abort_IT+0x3d8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d036      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	@ (80031b4 <HAL_DMA_Abort_IT+0x3dc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a27      	ldr	r2, [pc, #156]	@ (80031b8 <HAL_DMA_Abort_IT+0x3e0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d02c      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a25      	ldr	r2, [pc, #148]	@ (80031bc <HAL_DMA_Abort_IT+0x3e4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d027      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	@ (80031c0 <HAL_DMA_Abort_IT+0x3e8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a22      	ldr	r2, [pc, #136]	@ (80031c4 <HAL_DMA_Abort_IT+0x3ec>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01d      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a21      	ldr	r2, [pc, #132]	@ (80031c8 <HAL_DMA_Abort_IT+0x3f0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d018      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	@ (80031cc <HAL_DMA_Abort_IT+0x3f4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <HAL_DMA_Abort_IT+0x3f8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00e      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <HAL_DMA_Abort_IT+0x3fc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d009      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	@ (80031d8 <HAL_DMA_Abort_IT+0x400>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x3a2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_DMA_Abort_IT+0x404>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d132      	bne.n	80031e0 <HAL_DMA_Abort_IT+0x408>
 800317a:	2301      	movs	r3, #1
 800317c:	e031      	b.n	80031e2 <HAL_DMA_Abort_IT+0x40a>
 800317e:	bf00      	nop
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
 80031c0:	58025408 	.word	0x58025408
 80031c4:	5802541c 	.word	0x5802541c
 80031c8:	58025430 	.word	0x58025430
 80031cc:	58025444 	.word	0x58025444
 80031d0:	58025458 	.word	0x58025458
 80031d4:	5802546c 	.word	0x5802546c
 80031d8:	58025480 	.word	0x58025480
 80031dc:	58025494 	.word	0x58025494
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003214:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800322c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003236:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003272:	b2db      	uxtb	r3, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800328e:	4b89      	ldr	r3, [pc, #548]	@ (80034b4 <HAL_GPIO_Init+0x234>)
 8003290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003292:	e194      	b.n	80035be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	2101      	movs	r1, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8186 	beq.w	80035b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d005      	beq.n	80032c4 <HAL_GPIO_Init+0x44>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d130      	bne.n	8003326 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032fa:	2201      	movs	r2, #1
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 0201 	and.w	r2, r3, #1
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b03      	cmp	r3, #3
 8003330:	d017      	beq.n	8003362 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d123      	bne.n	80033b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	08da      	lsrs	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3208      	adds	r2, #8
 80033b0:	69b9      	ldr	r1, [r7, #24]
 80033b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	2203      	movs	r2, #3
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0203 	and.w	r2, r3, #3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80e0 	beq.w	80035b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f8:	4b2f      	ldr	r3, [pc, #188]	@ (80034b8 <HAL_GPIO_Init+0x238>)
 80033fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033fe:	4a2e      	ldr	r2, [pc, #184]	@ (80034b8 <HAL_GPIO_Init+0x238>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003408:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_GPIO_Init+0x238>)
 800340a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003416:	4a29      	ldr	r2, [pc, #164]	@ (80034bc <HAL_GPIO_Init+0x23c>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a20      	ldr	r2, [pc, #128]	@ (80034c0 <HAL_GPIO_Init+0x240>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d052      	beq.n	80034e8 <HAL_GPIO_Init+0x268>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1f      	ldr	r2, [pc, #124]	@ (80034c4 <HAL_GPIO_Init+0x244>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_GPIO_Init+0x22e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_GPIO_Init+0x248>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <HAL_GPIO_Init+0x22a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <HAL_GPIO_Init+0x24c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d025      	beq.n	80034a6 <HAL_GPIO_Init+0x226>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <HAL_GPIO_Init+0x250>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_GPIO_Init+0x222>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <HAL_GPIO_Init+0x254>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d019      	beq.n	800349e <HAL_GPIO_Init+0x21e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_GPIO_Init+0x258>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x21a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_GPIO_Init+0x25c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x216>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a18      	ldr	r2, [pc, #96]	@ (80034e0 <HAL_GPIO_Init+0x260>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x212>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_GPIO_Init+0x264>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x20e>
 800348a:	2309      	movs	r3, #9
 800348c:	e02d      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 800348e:	230a      	movs	r3, #10
 8003490:	e02b      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 8003492:	2308      	movs	r3, #8
 8003494:	e029      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 8003496:	2307      	movs	r3, #7
 8003498:	e027      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 800349a:	2306      	movs	r3, #6
 800349c:	e025      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 800349e:	2305      	movs	r3, #5
 80034a0:	e023      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e021      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e01f      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e01d      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e01b      	b.n	80034ea <HAL_GPIO_Init+0x26a>
 80034b2:	bf00      	nop
 80034b4:	58000080 	.word	0x58000080
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58000400 	.word	0x58000400
 80034c0:	58020000 	.word	0x58020000
 80034c4:	58020400 	.word	0x58020400
 80034c8:	58020800 	.word	0x58020800
 80034cc:	58020c00 	.word	0x58020c00
 80034d0:	58021000 	.word	0x58021000
 80034d4:	58021400 	.word	0x58021400
 80034d8:	58021800 	.word	0x58021800
 80034dc:	58021c00 	.word	0x58021c00
 80034e0:	58022000 	.word	0x58022000
 80034e4:	58022400 	.word	0x58022400
 80034e8:	2300      	movs	r3, #0
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	4093      	lsls	r3, r2
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034fa:	4938      	ldr	r1, [pc, #224]	@ (80035dc <HAL_GPIO_Init+0x35c>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800352e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800355c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3301      	adds	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f ae63 	bne.w	8003294 <HAL_GPIO_Init+0x14>
  }
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	3724      	adds	r7, #36	@ 0x24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	58000400 	.word	0x58000400

080035e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e001      	b.n	8003602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800362c:	e003      	b.n	8003636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	619a      	str	r2, [r3, #24]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800364c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003650:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800365c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe f88b 	bl	8001784 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003680:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <HAL_HSEM_FastTake+0x2c>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3320      	adds	r3, #32
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	4a07      	ldr	r2, [pc, #28]	@ (80036a8 <HAL_HSEM_FastTake+0x30>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	58026400 	.word	0x58026400
 80036a8:	80000300 	.word	0x80000300

080036ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80036b6:	4906      	ldr	r1, [pc, #24]	@ (80036d0 <HAL_HSEM_Release+0x24>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	58026400 	.word	0x58026400

080036d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e08b      	b.n	80037fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fcbe 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	@ 0x24
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003724:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003734:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	e006      	b.n	800375c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800375a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d108      	bne.n	8003776 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	e007      	b.n	8003786 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003784:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_I2C_Init+0x134>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	02008000 	.word	0x02008000

0800380c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	461a      	mov	r2, r3
 8003818:	460b      	mov	r3, r1
 800381a:	817b      	strh	r3, [r7, #10]
 800381c:	4613      	mov	r3, r2
 800381e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b20      	cmp	r3, #32
 800382a:	f040 80fd 	bne.w	8003a28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2C_Master_Transmit+0x30>
 8003838:	2302      	movs	r3, #2
 800383a:	e0f6      	b.n	8003a2a <HAL_I2C_Master_Transmit+0x21e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003844:	f7fe fe5e 	bl	8002504 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2319      	movs	r3, #25
 8003850:	2201      	movs	r2, #1
 8003852:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f001 f8ed 	bl	8004a36 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0e1      	b.n	8003a2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2221      	movs	r2, #33	@ 0x21
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2210      	movs	r2, #16
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	893a      	ldrh	r2, [r7, #8]
 8003886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	@ 0xff
 8003896:	d906      	bls.n	80038a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	@ 0xff
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800389e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e007      	b.n	80038b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80038b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003a34 <HAL_I2C_Master_Transmit+0x228>)
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f001 fa5b 	bl	8004dbc <I2C_TransferConfig>
 8003906:	e066      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	4b48      	ldr	r3, [pc, #288]	@ (8003a34 <HAL_I2C_Master_Transmit+0x228>)
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f001 fa50 	bl	8004dbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800391c:	e05b      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	6a39      	ldr	r1, [r7, #32]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f001 f8e0 	bl	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07b      	b.n	8003a2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d034      	beq.n	80039d6 <HAL_I2C_Master_Transmit+0x1ca>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d130      	bne.n	80039d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	2200      	movs	r2, #0
 800397c:	2180      	movs	r1, #128	@ 0x80
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f001 f859 	bl	8004a36 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e04d      	b.n	8003a2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2bff      	cmp	r3, #255	@ 0xff
 8003996:	d90e      	bls.n	80039b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	22ff      	movs	r2, #255	@ 0xff
 800399c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	8979      	ldrh	r1, [r7, #10]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f001 fa04 	bl	8004dbc <I2C_TransferConfig>
 80039b4:	e00f      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	2300      	movs	r3, #0
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f001 f9f3 	bl	8004dbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d19e      	bne.n	800391e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	6a39      	ldr	r1, [r7, #32]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f001 f8c6 	bl	8004b76 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e01a      	b.n	8003a2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2220      	movs	r2, #32
 80039fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <HAL_I2C_Master_Transmit+0x22c>)
 8003a08:	400b      	ands	r3, r1
 8003a0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	80002000 	.word	0x80002000
 8003a38:	fe00e800 	.word	0xfe00e800

08003a3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	817b      	strh	r3, [r7, #10]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	813b      	strh	r3, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	f040 80fd 	bne.w	8003c5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x34>
 8003a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0f1      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Mem_Read+0x4e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0ea      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a92:	f7fe fd37 	bl	8002504 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2319      	movs	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 ffc6 	bl	8004a36 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0d5      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2222      	movs	r2, #34	@ 0x22
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2240      	movs	r2, #64	@ 0x40
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003adc:	88f8      	ldrh	r0, [r7, #6]
 8003ade:	893a      	ldrh	r2, [r7, #8]
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4603      	mov	r3, r0
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fa6d 	bl	8003fcc <I2C_RequestMemoryRead>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0ad      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2bff      	cmp	r3, #255	@ 0xff
 8003b0c:	d90e      	bls.n	8003b2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	22ff      	movs	r2, #255	@ 0xff
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	4b52      	ldr	r3, [pc, #328]	@ (8003c68 <HAL_I2C_Mem_Read+0x22c>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f001 f949 	bl	8004dbc <I2C_TransferConfig>
 8003b2a:	e00f      	b.n	8003b4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_I2C_Mem_Read+0x22c>)
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f001 f938 	bl	8004dbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	2200      	movs	r2, #0
 8003b54:	2104      	movs	r1, #4
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 ff6d 	bl	8004a36 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e07c      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d034      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x1d0>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d130      	bne.n	8003c0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2180      	movs	r1, #128	@ 0x80
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 ff3e 	bl	8004a36 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04d      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2bff      	cmp	r3, #255	@ 0xff
 8003bcc:	d90e      	bls.n	8003bec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22ff      	movs	r2, #255	@ 0xff
 8003bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f001 f8e9 	bl	8004dbc <I2C_TransferConfig>
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	8979      	ldrh	r1, [r7, #10]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f001 f8d8 	bl	8004dbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d19a      	bne.n	8003b4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 ffab 	bl	8004b76 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e01a      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_I2C_Mem_Read+0x230>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c5e:	2302      	movs	r3, #2
  }
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	80002400 	.word	0x80002400
 8003c6c:	fe00e800 	.word	0xfe00e800

08003c70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00f      	beq.n	8003ce6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ce4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00f      	beq.n	8003d10 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00f      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d28:	f043 0202 	orr.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d38:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 030b 	and.w	r3, r3, #11
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fd19 	bl	8004784 <I2C_ITError>
  }
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <I2C_Slave_ISR_IT+0x24>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0e2      	b.n	8003fc4 <I2C_Slave_ISR_IT+0x1ea>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e1a:	6939      	ldr	r1, [r7, #16]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa09 	bl	8004234 <I2C_ITSlaveCplt>
 8003e22:	e0ca      	b.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04b      	beq.n	8003ec6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d046      	beq.n	8003ec6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d128      	bne.n	8003e94 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b28      	cmp	r3, #40	@ 0x28
 8003e4c:	d108      	bne.n	8003e60 <I2C_Slave_ISR_IT+0x86>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e54:	d104      	bne.n	8003e60 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e56:	6939      	ldr	r1, [r7, #16]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fc3f 	bl	80046dc <I2C_ITListenCplt>
 8003e5e:	e031      	b.n	8003ec4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b29      	cmp	r3, #41	@ 0x29
 8003e6a:	d10e      	bne.n	8003e8a <I2C_Slave_ISR_IT+0xb0>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e72:	d00a      	beq.n	8003e8a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fd98 	bl	80049b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f97a 	bl	800417c <I2C_ITSlaveSeqCplt>
 8003e88:	e01c      	b.n	8003ec4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e92:	e08f      	b.n	8003fb4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea0:	f043 0204 	orr.w	r2, r3, #4
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <I2C_Slave_ISR_IT+0xdc>
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eb4:	d17e      	bne.n	8003fb4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc61 	bl	8004784 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ec2:	e077      	b.n	8003fb4 <I2C_Slave_ISR_IT+0x1da>
 8003ec4:	e076      	b.n	8003fb4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02f      	beq.n	8003f30 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02a      	beq.n	8003f30 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d018      	beq.n	8003f16 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d14b      	bne.n	8003fb8 <I2C_Slave_ISR_IT+0x1de>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f26:	d047      	beq.n	8003fb8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f927 	bl	800417c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f2e:	e043      	b.n	8003fb8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f44:	6939      	ldr	r1, [r7, #16]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f894 	bl	8004074 <I2C_ITAddrCplt>
 8003f4c:	e035      	b.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d030      	beq.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02b      	beq.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d018      	beq.n	8003f9e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	781a      	ldrb	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003f9c:	e00d      	b.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa4:	d002      	beq.n	8003fac <I2C_Slave_ISR_IT+0x1d2>
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d106      	bne.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f8e5 	bl	800417c <I2C_ITSlaveSeqCplt>
 8003fb2:	e002      	b.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003fb8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	817b      	strh	r3, [r7, #10]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	813b      	strh	r3, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <I2C_RequestMemoryRead+0xa4>)
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fee2 	bl	8004dbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fd73 	bl	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e02c      	b.n	8004066 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d105      	bne.n	800401e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004012:	893b      	ldrh	r3, [r7, #8]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	629a      	str	r2, [r3, #40]	@ 0x28
 800401c:	e015      	b.n	800404a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	b29b      	uxth	r3, r3
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	69b9      	ldr	r1, [r7, #24]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fd59 	bl	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e012      	b.n	8004066 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004040:	893b      	ldrh	r3, [r7, #8]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2200      	movs	r2, #0
 8004052:	2140      	movs	r1, #64	@ 0x40
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fcee 	bl	8004a36 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	80002000 	.word	0x80002000

08004074 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800408a:	2b28      	cmp	r3, #40	@ 0x28
 800408c:	d16a      	bne.n	8004164 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80040ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80040c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d138      	bne.n	8004144 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	09db      	lsrs	r3, r3, #7
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	89bb      	ldrh	r3, [r7, #12]
 80040da:	4053      	eors	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f003 0306 	and.w	r3, r3, #6
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11c      	bne.n	8004120 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80040e6:	897b      	ldrh	r3, [r7, #10]
 80040e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d13b      	bne.n	8004174 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004112:	89ba      	ldrh	r2, [r7, #12]
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fe32 	bl	8003d82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800411e:	e029      	b.n	8004174 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fe79 	bl	8004e20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004136:	89ba      	ldrh	r2, [r7, #12]
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fe20 	bl	8003d82 <HAL_I2C_AddrCallback>
}
 8004142:	e017      	b.n	8004174 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004144:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fe69 	bl	8004e20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004156:	89ba      	ldrh	r2, [r7, #12]
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fe10 	bl	8003d82 <HAL_I2C_AddrCallback>
}
 8004162:	e007      	b.n	8004174 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2208      	movs	r2, #8
 800416a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e00c      	b.n	80041ca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b29      	cmp	r3, #41	@ 0x29
 80041d4:	d112      	bne.n	80041fc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2228      	movs	r2, #40	@ 0x28
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2221      	movs	r2, #33	@ 0x21
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041e4:	2101      	movs	r1, #1
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fe1a 	bl	8004e20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fdb0 	bl	8003d5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041fa:	e017      	b.n	800422c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b2a      	cmp	r3, #42	@ 0x2a
 8004206:	d111      	bne.n	800422c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2228      	movs	r2, #40	@ 0x28
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2222      	movs	r2, #34	@ 0x22
 8004214:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004216:	2102      	movs	r1, #2
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fe01 	bl	8004e20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fda1 	bl	8003d6e <HAL_I2C_SlaveRxCpltCallback>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2220      	movs	r2, #32
 800425e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	2b21      	cmp	r3, #33	@ 0x21
 8004264:	d002      	beq.n	800426c <I2C_ITSlaveCplt+0x38>
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	2b29      	cmp	r3, #41	@ 0x29
 800426a:	d108      	bne.n	800427e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800426c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fdd5 	bl	8004e20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2221      	movs	r2, #33	@ 0x21
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
 800427c:	e019      	b.n	80042b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	2b22      	cmp	r3, #34	@ 0x22
 8004282:	d002      	beq.n	800428a <I2C_ITSlaveCplt+0x56>
 8004284:	7afb      	ldrb	r3, [r7, #11]
 8004286:	2b2a      	cmp	r3, #42	@ 0x2a
 8004288:	d108      	bne.n	800429c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800428a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fdc6 	bl	8004e20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2222      	movs	r2, #34	@ 0x22
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30
 800429a:	e00a      	b.n	80042b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	2b28      	cmp	r3, #40	@ 0x28
 80042a0:	d107      	bne.n	80042b2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80042a2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fdba 	bl	8004e20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b7f      	ldr	r3, [pc, #508]	@ (80044cc <I2C_ITSlaveCplt+0x298>)
 80042ce:	400b      	ands	r3, r1
 80042d0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fb6d 	bl	80049b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d07a      	beq.n	80043d8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8111 	beq.w	800451e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a73      	ldr	r2, [pc, #460]	@ (80044d0 <I2C_ITSlaveCplt+0x29c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d059      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a71      	ldr	r2, [pc, #452]	@ (80044d4 <I2C_ITSlaveCplt+0x2a0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d053      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6f      	ldr	r2, [pc, #444]	@ (80044d8 <I2C_ITSlaveCplt+0x2a4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d04d      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6d      	ldr	r2, [pc, #436]	@ (80044dc <I2C_ITSlaveCplt+0x2a8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d047      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6b      	ldr	r2, [pc, #428]	@ (80044e0 <I2C_ITSlaveCplt+0x2ac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d041      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a69      	ldr	r2, [pc, #420]	@ (80044e4 <I2C_ITSlaveCplt+0x2b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03b      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a67      	ldr	r2, [pc, #412]	@ (80044e8 <I2C_ITSlaveCplt+0x2b4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d035      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a65      	ldr	r2, [pc, #404]	@ (80044ec <I2C_ITSlaveCplt+0x2b8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d02f      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a63      	ldr	r2, [pc, #396]	@ (80044f0 <I2C_ITSlaveCplt+0x2bc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d029      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a61      	ldr	r2, [pc, #388]	@ (80044f4 <I2C_ITSlaveCplt+0x2c0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d023      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5f      	ldr	r2, [pc, #380]	@ (80044f8 <I2C_ITSlaveCplt+0x2c4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5d      	ldr	r2, [pc, #372]	@ (80044fc <I2C_ITSlaveCplt+0x2c8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d017      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a5b      	ldr	r2, [pc, #364]	@ (8004500 <I2C_ITSlaveCplt+0x2cc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d011      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a59      	ldr	r2, [pc, #356]	@ (8004504 <I2C_ITSlaveCplt+0x2d0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a57      	ldr	r2, [pc, #348]	@ (8004508 <I2C_ITSlaveCplt+0x2d4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d005      	beq.n	80043bc <I2C_ITSlaveCplt+0x188>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a55      	ldr	r2, [pc, #340]	@ (800450c <I2C_ITSlaveCplt+0x2d8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d105      	bne.n	80043c8 <I2C_ITSlaveCplt+0x194>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	e004      	b.n	80043d2 <I2C_ITSlaveCplt+0x19e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80043d6:	e0a2      	b.n	800451e <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 809d 	beq.w	800451e <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8090 	beq.w	800451e <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a32      	ldr	r2, [pc, #200]	@ (80044d0 <I2C_ITSlaveCplt+0x29c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d059      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a30      	ldr	r2, [pc, #192]	@ (80044d4 <I2C_ITSlaveCplt+0x2a0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d053      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2e      	ldr	r2, [pc, #184]	@ (80044d8 <I2C_ITSlaveCplt+0x2a4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d04d      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2c      	ldr	r2, [pc, #176]	@ (80044dc <I2C_ITSlaveCplt+0x2a8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d047      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <I2C_ITSlaveCplt+0x2ac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d041      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a28      	ldr	r2, [pc, #160]	@ (80044e4 <I2C_ITSlaveCplt+0x2b0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d03b      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a26      	ldr	r2, [pc, #152]	@ (80044e8 <I2C_ITSlaveCplt+0x2b4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d035      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <I2C_ITSlaveCplt+0x2b8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02f      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	@ (80044f0 <I2C_ITSlaveCplt+0x2bc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d029      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a20      	ldr	r2, [pc, #128]	@ (80044f4 <I2C_ITSlaveCplt+0x2c0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d023      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1e      	ldr	r2, [pc, #120]	@ (80044f8 <I2C_ITSlaveCplt+0x2c4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01d      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <I2C_ITSlaveCplt+0x2c8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d017      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <I2C_ITSlaveCplt+0x2cc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d011      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <I2C_ITSlaveCplt+0x2d0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00b      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a16      	ldr	r2, [pc, #88]	@ (8004508 <I2C_ITSlaveCplt+0x2d4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d005      	beq.n	80044be <I2C_ITSlaveCplt+0x28a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a14      	ldr	r2, [pc, #80]	@ (800450c <I2C_ITSlaveCplt+0x2d8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d128      	bne.n	8004510 <I2C_ITSlaveCplt+0x2dc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	e027      	b.n	800451a <I2C_ITSlaveCplt+0x2e6>
 80044ca:	bf00      	nop
 80044cc:	fe00e800 	.word	0xfe00e800
 80044d0:	40020010 	.word	0x40020010
 80044d4:	40020028 	.word	0x40020028
 80044d8:	40020040 	.word	0x40020040
 80044dc:	40020058 	.word	0x40020058
 80044e0:	40020070 	.word	0x40020070
 80044e4:	40020088 	.word	0x40020088
 80044e8:	400200a0 	.word	0x400200a0
 80044ec:	400200b8 	.word	0x400200b8
 80044f0:	40020410 	.word	0x40020410
 80044f4:	40020428 	.word	0x40020428
 80044f8:	40020440 	.word	0x40020440
 80044fc:	40020458 	.word	0x40020458
 8004500:	40020470 	.word	0x40020470
 8004504:	40020488 	.word	0x40020488
 8004508:	400204a0 	.word	0x400204a0
 800450c:	400204b8 	.word	0x400204b8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	b29b      	uxth	r3, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d049      	beq.n	800461e <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004590:	2b00      	cmp	r3, #0
 8004592:	d044      	beq.n	800461e <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d128      	bne.n	80045f0 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b28      	cmp	r3, #40	@ 0x28
 80045a8:	d108      	bne.n	80045bc <I2C_ITSlaveCplt+0x388>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045b0:	d104      	bne.n	80045bc <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f891 	bl	80046dc <I2C_ITListenCplt>
 80045ba:	e030      	b.n	800461e <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b29      	cmp	r3, #41	@ 0x29
 80045c6:	d10e      	bne.n	80045e6 <I2C_ITSlaveCplt+0x3b2>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045ce:	d00a      	beq.n	80045e6 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2210      	movs	r2, #16
 80045d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9ea 	bl	80049b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fdcc 	bl	800417c <I2C_ITSlaveSeqCplt>
 80045e4:	e01b      	b.n	800461e <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	61da      	str	r2, [r3, #28]
 80045ee:	e016      	b.n	800461e <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2210      	movs	r2, #16
 80045f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <I2C_ITSlaveCplt+0x3de>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004610:	d105      	bne.n	800461e <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f8b3 	bl	8004784 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004638:	4619      	mov	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f8a2 	bl	8004784 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b28      	cmp	r3, #40	@ 0x28
 800464a:	d141      	bne.n	80046d0 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f844 	bl	80046dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004654:	e03c      	b.n	80046d0 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800465e:	d014      	beq.n	800468a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fd8b 	bl	800417c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a1b      	ldr	r2, [pc, #108]	@ (80046d8 <I2C_ITSlaveCplt+0x4a4>)
 800466a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fb8b 	bl	8003d9e <HAL_I2C_ListenCpltCallback>
}
 8004688:	e022      	b.n	80046d0 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b22      	cmp	r3, #34	@ 0x22
 8004694:	d10e      	bne.n	80046b4 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fb5e 	bl	8003d6e <HAL_I2C_SlaveRxCpltCallback>
}
 80046b2:	e00d      	b.n	80046d0 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fb45 	bl	8003d5a <HAL_I2C_SlaveTxCpltCallback>
}
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	ffff0000 	.word	0xffff0000

080046dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a25      	ldr	r2, [pc, #148]	@ (8004780 <I2C_ITListenCplt+0xa4>)
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d022      	beq.n	8004758 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d012      	beq.n	8004758 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004758:	f248 0103 	movw	r1, #32771	@ 0x8003
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fb5f 	bl	8004e20 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2210      	movs	r2, #16
 8004768:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fb13 	bl	8003d9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	ffff0000 	.word	0xffff0000

08004784 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004958 <I2C_ITError+0x1d4>)
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b28      	cmp	r3, #40	@ 0x28
 80047ba:	d005      	beq.n	80047c8 <I2C_ITError+0x44>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b29      	cmp	r3, #41	@ 0x29
 80047c0:	d002      	beq.n	80047c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047c6:	d10b      	bne.n	80047e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047c8:	2103      	movs	r1, #3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fb28 	bl	8004e20 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2228      	movs	r2, #40	@ 0x28
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a60      	ldr	r2, [pc, #384]	@ (800495c <I2C_ITError+0x1d8>)
 80047dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80047de:	e030      	b.n	8004842 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fb1b 	bl	8004e20 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8e1 	bl	80049b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b60      	cmp	r3, #96	@ 0x60
 80047fa:	d01f      	beq.n	800483c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d114      	bne.n	800483c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b10      	cmp	r3, #16
 800481e:	d109      	bne.n	8004834 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2210      	movs	r2, #16
 8004826:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482c:	f043 0204 	orr.w	r2, r3, #4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2220      	movs	r2, #32
 800483a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004846:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	2b00      	cmp	r3, #0
 800484e:	d039      	beq.n	80048c4 <I2C_ITError+0x140>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b11      	cmp	r3, #17
 8004854:	d002      	beq.n	800485c <I2C_ITError+0xd8>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b21      	cmp	r3, #33	@ 0x21
 800485a:	d133      	bne.n	80048c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800486a:	d107      	bne.n	800487c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800487a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe fcef 	bl	8003264 <HAL_DMA_GetState>
 8004886:	4603      	mov	r3, r0
 8004888:	2b01      	cmp	r3, #1
 800488a:	d017      	beq.n	80048bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	4a33      	ldr	r2, [pc, #204]	@ (8004960 <I2C_ITError+0x1dc>)
 8004892:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fa99 	bl	8002dd8 <HAL_DMA_Abort_IT>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d04d      	beq.n	8004948 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048ba:	e045      	b.n	8004948 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f851 	bl	8004964 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048c2:	e041      	b.n	8004948 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d039      	beq.n	8004940 <I2C_ITError+0x1bc>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b12      	cmp	r3, #18
 80048d0:	d002      	beq.n	80048d8 <I2C_ITError+0x154>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b22      	cmp	r3, #34	@ 0x22
 80048d6:	d133      	bne.n	8004940 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e6:	d107      	bne.n	80048f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fcb1 	bl	8003264 <HAL_DMA_GetState>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d017      	beq.n	8004938 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	4a14      	ldr	r2, [pc, #80]	@ (8004960 <I2C_ITError+0x1dc>)
 800490e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fa5b 	bl	8002dd8 <HAL_DMA_Abort_IT>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d011      	beq.n	800494c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004932:	4610      	mov	r0, r2
 8004934:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004936:	e009      	b.n	800494c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f813 	bl	8004964 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800493e:	e005      	b.n	800494c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f80f 	bl	8004964 <I2C_TreatErrorCallback>
  }
}
 8004946:	e002      	b.n	800494e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800494c:	bf00      	nop
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	ffff0000 	.word	0xffff0000
 800495c:	08003ddb 	.word	0x08003ddb
 8004960:	080049fb 	.word	0x080049fb

08004964 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b60      	cmp	r3, #96	@ 0x60
 8004976:	d10e      	bne.n	8004996 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fa19 	bl	8003dc6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004994:	e009      	b.n	80049aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fa04 	bl	8003db2 <HAL_I2C_ErrorCallback>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d103      	bne.n	80049d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d007      	beq.n	80049ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	619a      	str	r2, [r3, #24]
  }
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	2200      	movs	r2, #0
 8004a26:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff ff9b 	bl	8004964 <I2C_TreatErrorCallback>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a46:	e03b      	b.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f8d5 	bl	8004bfc <I2C_IsErrorOccurred>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e041      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d02d      	beq.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fd fd4e 	bl	8002504 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d122      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d113      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e00f      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d0b4      	beq.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004af4:	e033      	b.n	8004b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f87e 	bl	8004bfc <I2C_IsErrorOccurred>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e031      	b.n	8004b6e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d025      	beq.n	8004b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fd fcf7 	bl	8002504 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11a      	bne.n	8004b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d013      	beq.n	8004b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e007      	b.n	8004b6e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d1c4      	bne.n	8004af6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b82:	e02f      	b.n	8004be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f837 	bl	8004bfc <I2C_IsErrorOccurred>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e02d      	b.n	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fd fcb4 	bl	8002504 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11a      	bne.n	8004be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d013      	beq.n	8004be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e007      	b.n	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	d1c8      	bne.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d068      	beq.n	8004cfa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c30:	e049      	b.n	8004cc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d045      	beq.n	8004cc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7fd fc63 	bl	8002504 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <I2C_IsErrorOccurred+0x54>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d13a      	bne.n	8004cc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c72:	d121      	bne.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c7a:	d01d      	beq.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d01a      	beq.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c92:	f7fd fc37 	bl	8002504 <HAL_GetTick>
 8004c96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c98:	e00e      	b.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c9a:	f7fd fc33 	bl	8002504 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b19      	cmp	r3, #25
 8004ca6:	d907      	bls.n	8004cb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004cb6:	e006      	b.n	8004cc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d1e9      	bne.n	8004c9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d003      	beq.n	8004cdc <I2C_IsErrorOccurred+0xe0>
 8004cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0aa      	beq.n	8004c32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f043 0304 	orr.w	r3, r3, #4
 8004cf2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01c      	beq.n	8004daa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fe1e 	bl	80049b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <I2C_IsErrorOccurred+0x1bc>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004daa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	@ 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	fe00e800 	.word	0xfe00e800

08004dbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	817b      	strh	r3, [r7, #10]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dd4:	7a7b      	ldrb	r3, [r7, #9]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ddc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	0d5b      	lsrs	r3, r3, #21
 8004df6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004dfa:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <I2C_TransferConfig+0x60>)
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	ea02 0103 	and.w	r1, r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	03ff63ff 	.word	0x03ff63ff

08004e20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00f      	beq.n	8004e5a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004e40:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e4e:	2b28      	cmp	r3, #40	@ 0x28
 8004e50:	d003      	beq.n	8004e5a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e5a:	887b      	ldrh	r3, [r7, #2]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00f      	beq.n	8004e84 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004e6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e78:	2b28      	cmp	r3, #40	@ 0x28
 8004e7a:	d003      	beq.n	8004e84 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e82:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da03      	bge.n	8004e94 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e94:	887b      	ldrh	r3, [r7, #2]
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d103      	bne.n	8004ea2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d103      	bne.n	8004eb0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f043 0320 	orr.w	r3, r3, #32
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	d103      	bne.n	8004ebe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	400a      	ands	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d138      	bne.n	8004f64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e032      	b.n	8004f66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	@ 0x24
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d139      	bne.n	8004ffc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e033      	b.n	8004ffe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2224      	movs	r2, #36	@ 0x24
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005014:	4b29      	ldr	r3, [pc, #164]	@ (80050bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	2b06      	cmp	r3, #6
 800501e:	d00a      	beq.n	8005036 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005020:	4b26      	ldr	r3, [pc, #152]	@ (80050bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e040      	b.n	80050b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e03e      	b.n	80050b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005036:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800503e:	491f      	ldr	r1, [pc, #124]	@ (80050bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005046:	f7fd fa5d 	bl	8002504 <HAL_GetTick>
 800504a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800504c:	e009      	b.n	8005062 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800504e:	f7fd fa59 	bl	8002504 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800505c:	d901      	bls.n	8005062 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e028      	b.n	80050b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <HAL_PWREx_ConfigSupply+0xb0>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800506e:	d1ee      	bne.n	800504e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b1e      	cmp	r3, #30
 8005074:	d008      	beq.n	8005088 <HAL_PWREx_ConfigSupply+0x7c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b2e      	cmp	r3, #46	@ 0x2e
 800507a:	d005      	beq.n	8005088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b1d      	cmp	r3, #29
 8005080:	d002      	beq.n	8005088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b2d      	cmp	r3, #45	@ 0x2d
 8005086:	d114      	bne.n	80050b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005088:	f7fd fa3c 	bl	8002504 <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800508e:	e009      	b.n	80050a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005090:	f7fd fa38 	bl	8002504 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800509e:	d901      	bls.n	80050a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e007      	b.n	80050b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80050a4:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_PWREx_ConfigSupply+0xb0>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b0:	d1ee      	bne.n	8005090 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	58024800 	.word	0x58024800

080050c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	@ 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f000 bc48 	b.w	8005964 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8088 	beq.w	80051f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e2:	4b99      	ldr	r3, [pc, #612]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050ec:	4b96      	ldr	r3, [pc, #600]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d007      	beq.n	8005108 <HAL_RCC_OscConfig+0x48>
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	2b18      	cmp	r3, #24
 80050fc:	d111      	bne.n	8005122 <HAL_RCC_OscConfig+0x62>
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d10c      	bne.n	8005122 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	4b8f      	ldr	r3, [pc, #572]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d06d      	beq.n	80051f0 <HAL_RCC_OscConfig+0x130>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d169      	bne.n	80051f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	f000 bc21 	b.w	8005964 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512a:	d106      	bne.n	800513a <HAL_RCC_OscConfig+0x7a>
 800512c:	4b86      	ldr	r3, [pc, #536]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a85      	ldr	r2, [pc, #532]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e02e      	b.n	8005198 <HAL_RCC_OscConfig+0xd8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0x9c>
 8005142:	4b81      	ldr	r3, [pc, #516]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a80      	ldr	r2, [pc, #512]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b7e      	ldr	r3, [pc, #504]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a7d      	ldr	r2, [pc, #500]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e01d      	b.n	8005198 <HAL_RCC_OscConfig+0xd8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005164:	d10c      	bne.n	8005180 <HAL_RCC_OscConfig+0xc0>
 8005166:	4b78      	ldr	r3, [pc, #480]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a77      	ldr	r2, [pc, #476]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800516c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	4b75      	ldr	r3, [pc, #468]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a74      	ldr	r2, [pc, #464]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e00b      	b.n	8005198 <HAL_RCC_OscConfig+0xd8>
 8005180:	4b71      	ldr	r3, [pc, #452]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a70      	ldr	r2, [pc, #448]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b6e      	ldr	r3, [pc, #440]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a6d      	ldr	r2, [pc, #436]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d013      	beq.n	80051c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd f9b0 	bl	8002504 <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a8:	f7fd f9ac 	bl	8002504 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b64      	cmp	r3, #100	@ 0x64
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e3d4      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ba:	4b63      	ldr	r3, [pc, #396]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0xe8>
 80051c6:	e014      	b.n	80051f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd f99c 	bl	8002504 <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fd f998 	bl	8002504 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	@ 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e3c0      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051e2:	4b59      	ldr	r3, [pc, #356]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x110>
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80ca 	beq.w	8005394 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005200:	4b51      	ldr	r3, [pc, #324]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005208:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800520a:	4b4f      	ldr	r3, [pc, #316]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_RCC_OscConfig+0x166>
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2b18      	cmp	r3, #24
 800521a:	d156      	bne.n	80052ca <HAL_RCC_OscConfig+0x20a>
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d151      	bne.n	80052ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005226:	4b48      	ldr	r3, [pc, #288]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_RCC_OscConfig+0x17e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e392      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800523e:	4b42      	ldr	r3, [pc, #264]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 0219 	bic.w	r2, r3, #25
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	493f      	ldr	r1, [pc, #252]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd f958 	bl	8002504 <HAL_GetTick>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005258:	f7fd f954 	bl	8002504 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e37c      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800526a:	4b37      	ldr	r3, [pc, #220]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	f7fd f975 	bl	8002564 <HAL_GetREVID>
 800527a:	4603      	mov	r3, r0
 800527c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005280:	4293      	cmp	r3, r2
 8005282:	d817      	bhi.n	80052b4 <HAL_RCC_OscConfig+0x1f4>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b40      	cmp	r3, #64	@ 0x40
 800528a:	d108      	bne.n	800529e <HAL_RCC_OscConfig+0x1de>
 800528c:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005294:	4a2c      	ldr	r2, [pc, #176]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800529a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800529c:	e07a      	b.n	8005394 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529e:	4b2a      	ldr	r3, [pc, #168]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	031b      	lsls	r3, r3, #12
 80052ac:	4926      	ldr	r1, [pc, #152]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b2:	e06f      	b.n	8005394 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b4:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	4921      	ldr	r1, [pc, #132]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c8:	e064      	b.n	8005394 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d047      	beq.n	8005362 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 0219 	bic.w	r2, r3, #25
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	491a      	ldr	r1, [pc, #104]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fd f90e 	bl	8002504 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ec:	f7fd f90a 	bl	8002504 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e332      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052fe:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530a:	f7fd f92b 	bl	8002564 <HAL_GetREVID>
 800530e:	4603      	mov	r3, r0
 8005310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005314:	4293      	cmp	r3, r2
 8005316:	d819      	bhi.n	800534c <HAL_RCC_OscConfig+0x28c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d108      	bne.n	8005332 <HAL_RCC_OscConfig+0x272>
 8005320:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005328:	4a07      	ldr	r2, [pc, #28]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 800532a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800532e:	6053      	str	r3, [r2, #4]
 8005330:	e030      	b.n	8005394 <HAL_RCC_OscConfig+0x2d4>
 8005332:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	031b      	lsls	r3, r3, #12
 8005340:	4901      	ldr	r1, [pc, #4]	@ (8005348 <HAL_RCC_OscConfig+0x288>)
 8005342:	4313      	orrs	r3, r2
 8005344:	604b      	str	r3, [r1, #4]
 8005346:	e025      	b.n	8005394 <HAL_RCC_OscConfig+0x2d4>
 8005348:	58024400 	.word	0x58024400
 800534c:	4b9a      	ldr	r3, [pc, #616]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	4997      	ldr	r1, [pc, #604]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
 8005360:	e018      	b.n	8005394 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005362:	4b95      	ldr	r3, [pc, #596]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a94      	ldr	r2, [pc, #592]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005368:	f023 0301 	bic.w	r3, r3, #1
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd f8c9 	bl	8002504 <HAL_GetTick>
 8005372:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fd f8c5 	bl	8002504 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e2ed      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005388:	4b8b      	ldr	r3, [pc, #556]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80a9 	beq.w	80054f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a2:	4b85      	ldr	r3, [pc, #532]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ac:	4b82      	ldr	r3, [pc, #520]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d007      	beq.n	80053c8 <HAL_RCC_OscConfig+0x308>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b18      	cmp	r3, #24
 80053bc:	d13a      	bne.n	8005434 <HAL_RCC_OscConfig+0x374>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d135      	bne.n	8005434 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053c8:	4b7b      	ldr	r3, [pc, #492]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_OscConfig+0x320>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	2b80      	cmp	r3, #128	@ 0x80
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e2c1      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053e0:	f7fd f8c0 	bl	8002564 <HAL_GetREVID>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d817      	bhi.n	800541e <HAL_RCC_OscConfig+0x35e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d108      	bne.n	8005408 <HAL_RCC_OscConfig+0x348>
 80053f6:	4b70      	ldr	r3, [pc, #448]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053fe:	4a6e      	ldr	r2, [pc, #440]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005400:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005404:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005406:	e075      	b.n	80054f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005408:	4b6b      	ldr	r3, [pc, #428]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	069b      	lsls	r3, r3, #26
 8005416:	4968      	ldr	r1, [pc, #416]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800541c:	e06a      	b.n	80054f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800541e:	4b66      	ldr	r3, [pc, #408]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	4962      	ldr	r1, [pc, #392]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005432:	e05f      	b.n	80054f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d042      	beq.n	80054c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800543c:	4b5e      	ldr	r3, [pc, #376]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5d      	ldr	r2, [pc, #372]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd f85c 	bl	8002504 <HAL_GetTick>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005450:	f7fd f858 	bl	8002504 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e280      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005462:	4b55      	ldr	r3, [pc, #340]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800546e:	f7fd f879 	bl	8002564 <HAL_GetREVID>
 8005472:	4603      	mov	r3, r0
 8005474:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005478:	4293      	cmp	r3, r2
 800547a:	d817      	bhi.n	80054ac <HAL_RCC_OscConfig+0x3ec>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	2b20      	cmp	r3, #32
 8005482:	d108      	bne.n	8005496 <HAL_RCC_OscConfig+0x3d6>
 8005484:	4b4c      	ldr	r3, [pc, #304]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800548c:	4a4a      	ldr	r2, [pc, #296]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800548e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005492:	6053      	str	r3, [r2, #4]
 8005494:	e02e      	b.n	80054f4 <HAL_RCC_OscConfig+0x434>
 8005496:	4b48      	ldr	r3, [pc, #288]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	069b      	lsls	r3, r3, #26
 80054a4:	4944      	ldr	r1, [pc, #272]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
 80054aa:	e023      	b.n	80054f4 <HAL_RCC_OscConfig+0x434>
 80054ac:	4b42      	ldr	r3, [pc, #264]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	493f      	ldr	r1, [pc, #252]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	60cb      	str	r3, [r1, #12]
 80054c0:	e018      	b.n	80054f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054c2:	4b3d      	ldr	r3, [pc, #244]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80054c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fd f819 	bl	8002504 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054d6:	f7fd f815 	bl	8002504 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e23d      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054e8:	4b33      	ldr	r3, [pc, #204]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d036      	beq.n	800556e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d019      	beq.n	800553c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005508:	4b2b      	ldr	r3, [pc, #172]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800550a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550c:	4a2a      	ldr	r2, [pc, #168]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fc fff6 	bl	8002504 <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551c:	f7fc fff2 	bl	8002504 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e21a      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800552e:	4b22      	ldr	r3, [pc, #136]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x45c>
 800553a:	e018      	b.n	800556e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553c:	4b1e      	ldr	r3, [pc, #120]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 800553e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005540:	4a1d      	ldr	r2, [pc, #116]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005548:	f7fc ffdc 	bl	8002504 <HAL_GetTick>
 800554c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005550:	f7fc ffd8 	bl	8002504 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e200      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d039      	beq.n	80055ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01c      	beq.n	80055bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005582:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a0c      	ldr	r2, [pc, #48]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 8005588:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800558c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800558e:	f7fc ffb9 	bl	8002504 <HAL_GetTick>
 8005592:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005596:	f7fc ffb5 	bl	8002504 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e1dd      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055a8:	4b03      	ldr	r3, [pc, #12]	@ (80055b8 <HAL_RCC_OscConfig+0x4f8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x4d6>
 80055b4:	e01b      	b.n	80055ee <HAL_RCC_OscConfig+0x52e>
 80055b6:	bf00      	nop
 80055b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055bc:	4b9b      	ldr	r3, [pc, #620]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a9a      	ldr	r2, [pc, #616]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80055c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055c8:	f7fc ff9c 	bl	8002504 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d0:	f7fc ff98 	bl	8002504 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1c0      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055e2:	4b92      	ldr	r3, [pc, #584]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8081 	beq.w	80056fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005830 <HAL_RCC_OscConfig+0x770>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a8b      	ldr	r2, [pc, #556]	@ (8005830 <HAL_RCC_OscConfig+0x770>)
 8005602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005608:	f7fc ff7c 	bl	8002504 <HAL_GetTick>
 800560c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005610:	f7fc ff78 	bl	8002504 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	@ 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e1a0      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005622:	4b83      	ldr	r3, [pc, #524]	@ (8005830 <HAL_RCC_OscConfig+0x770>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x584>
 8005636:	4b7d      	ldr	r3, [pc, #500]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563a:	4a7c      	ldr	r2, [pc, #496]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	@ 0x70
 8005642:	e02d      	b.n	80056a0 <HAL_RCC_OscConfig+0x5e0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10c      	bne.n	8005666 <HAL_RCC_OscConfig+0x5a6>
 800564c:	4b77      	ldr	r3, [pc, #476]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005650:	4a76      	ldr	r2, [pc, #472]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	6713      	str	r3, [r2, #112]	@ 0x70
 8005658:	4b74      	ldr	r3, [pc, #464]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565c:	4a73      	ldr	r2, [pc, #460]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800565e:	f023 0304 	bic.w	r3, r3, #4
 8005662:	6713      	str	r3, [r2, #112]	@ 0x70
 8005664:	e01c      	b.n	80056a0 <HAL_RCC_OscConfig+0x5e0>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x5c8>
 800566e:	4b6f      	ldr	r3, [pc, #444]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a6e      	ldr	r2, [pc, #440]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005674:	f043 0304 	orr.w	r3, r3, #4
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
 800567a:	4b6c      	ldr	r3, [pc, #432]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	4a6b      	ldr	r2, [pc, #428]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	@ 0x70
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0x5e0>
 8005688:	4b68      	ldr	r3, [pc, #416]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4a67      	ldr	r2, [pc, #412]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	6713      	str	r3, [r2, #112]	@ 0x70
 8005694:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005698:	4a64      	ldr	r2, [pc, #400]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800569a:	f023 0304 	bic.w	r3, r3, #4
 800569e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fc ff2c 	bl	8002504 <HAL_GetTick>
 80056ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fc ff28 	bl	8002504 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e14e      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c6:	4b59      	ldr	r3, [pc, #356]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0ee      	beq.n	80056b0 <HAL_RCC_OscConfig+0x5f0>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fc ff16 	bl	8002504 <HAL_GetTick>
 80056d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fc ff12 	bl	8002504 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e138      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056f2:	4b4e      	ldr	r3, [pc, #312]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ee      	bne.n	80056dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 812d 	beq.w	8005962 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005708:	4b48      	ldr	r3, [pc, #288]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005710:	2b18      	cmp	r3, #24
 8005712:	f000 80bd 	beq.w	8005890 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	2b02      	cmp	r3, #2
 800571c:	f040 809e 	bne.w	800585c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b42      	ldr	r3, [pc, #264]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a41      	ldr	r2, [pc, #260]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800572a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fc feea 	bl	8002504 <HAL_GetTick>
 8005730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005734:	f7fc fee6 	bl	8002504 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e10e      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005746:	4b39      	ldr	r3, [pc, #228]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005752:	4b36      	ldr	r3, [pc, #216]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005756:	4b37      	ldr	r3, [pc, #220]	@ (8005834 <HAL_RCC_OscConfig+0x774>)
 8005758:	4013      	ands	r3, r2
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	430a      	orrs	r2, r1
 8005766:	4931      	ldr	r1, [pc, #196]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005768:	4313      	orrs	r3, r2
 800576a:	628b      	str	r3, [r1, #40]	@ 0x28
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	3b01      	subs	r3, #1
 8005772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	3b01      	subs	r3, #1
 800577c:	025b      	lsls	r3, r3, #9
 800577e:	b29b      	uxth	r3, r3
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	3b01      	subs	r3, #1
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	3b01      	subs	r3, #1
 8005796:	061b      	lsls	r3, r3, #24
 8005798:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800579c:	4923      	ldr	r1, [pc, #140]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a6:	4a21      	ldr	r2, [pc, #132]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057ae:	4b1f      	ldr	r3, [pc, #124]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057b2:	4b21      	ldr	r3, [pc, #132]	@ (8005838 <HAL_RCC_OscConfig+0x778>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057ba:	00d2      	lsls	r2, r2, #3
 80057bc:	491b      	ldr	r1, [pc, #108]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057c2:	4b1a      	ldr	r3, [pc, #104]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	f023 020c 	bic.w	r2, r3, #12
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	4917      	ldr	r1, [pc, #92]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057d4:	4b15      	ldr	r3, [pc, #84]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	f023 0202 	bic.w	r2, r3, #2
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e0:	4912      	ldr	r1, [pc, #72]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057e6:	4b11      	ldr	r3, [pc, #68]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	4a10      	ldr	r2, [pc, #64]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f2:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	4a0d      	ldr	r2, [pc, #52]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 80057f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057fe:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	4a07      	ldr	r2, [pc, #28]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005816:	4b05      	ldr	r3, [pc, #20]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a04      	ldr	r2, [pc, #16]	@ (800582c <HAL_RCC_OscConfig+0x76c>)
 800581c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005822:	f7fc fe6f 	bl	8002504 <HAL_GetTick>
 8005826:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005828:	e011      	b.n	800584e <HAL_RCC_OscConfig+0x78e>
 800582a:	bf00      	nop
 800582c:	58024400 	.word	0x58024400
 8005830:	58024800 	.word	0x58024800
 8005834:	fffffc0c 	.word	0xfffffc0c
 8005838:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fc fe62 	bl	8002504 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e08a      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800584e:	4b47      	ldr	r3, [pc, #284]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x77c>
 800585a:	e082      	b.n	8005962 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585c:	4b43      	ldr	r3, [pc, #268]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a42      	ldr	r2, [pc, #264]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc fe4c 	bl	8002504 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005870:	f7fc fe48 	bl	8002504 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e070      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005882:	4b3a      	ldr	r3, [pc, #232]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x7b0>
 800588e:	e068      	b.n	8005962 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005890:	4b36      	ldr	r3, [pc, #216]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005896:	4b35      	ldr	r3, [pc, #212]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d031      	beq.n	8005908 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f003 0203 	and.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d12a      	bne.n	8005908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d122      	bne.n	8005908 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d11a      	bne.n	8005908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0a5b      	lsrs	r3, r3, #9
 80058d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d111      	bne.n	8005908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d108      	bne.n	8005908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	0e1b      	lsrs	r3, r3, #24
 80058fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005902:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e02b      	b.n	8005964 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800590c:	4b17      	ldr	r3, [pc, #92]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 800590e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005916:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d01f      	beq.n	8005962 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	4a11      	ldr	r2, [pc, #68]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800592e:	f7fc fde9 	bl	8002504 <HAL_GetTick>
 8005932:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005934:	bf00      	nop
 8005936:	f7fc fde5 	bl	8002504 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	4293      	cmp	r3, r2
 8005940:	d0f9      	beq.n	8005936 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <HAL_RCC_OscConfig+0x8b0>)
 8005948:	4013      	ands	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800594e:	00d2      	lsls	r2, r2, #3
 8005950:	4906      	ldr	r1, [pc, #24]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005952:	4313      	orrs	r3, r2
 8005954:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005956:	4b05      	ldr	r3, [pc, #20]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	4a04      	ldr	r2, [pc, #16]	@ (800596c <HAL_RCC_OscConfig+0x8ac>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3730      	adds	r7, #48	@ 0x30
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	58024400 	.word	0x58024400
 8005970:	ffff0007 	.word	0xffff0007

08005974 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e19c      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005988:	4b8a      	ldr	r3, [pc, #552]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d910      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b87      	ldr	r3, [pc, #540]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	4985      	ldr	r1, [pc, #532]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b83      	ldr	r3, [pc, #524]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e184      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d908      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059d4:	4b78      	ldr	r3, [pc, #480]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	4975      	ldr	r1, [pc, #468]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	4b70      	ldr	r3, [pc, #448]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d908      	bls.n	8005a14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a02:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	496a      	ldr	r1, [pc, #424]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	4b64      	ldr	r3, [pc, #400]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d908      	bls.n	8005a42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a30:	4b61      	ldr	r3, [pc, #388]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	495e      	ldr	r1, [pc, #376]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	4b59      	ldr	r3, [pc, #356]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d908      	bls.n	8005a70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a5e:	4b56      	ldr	r3, [pc, #344]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	4953      	ldr	r1, [pc, #332]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d908      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f023 020f 	bic.w	r2, r3, #15
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4947      	ldr	r1, [pc, #284]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d055      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005aaa:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	4940      	ldr	r1, [pc, #256]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d121      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0f6      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d107      	bne.n	8005aec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005adc:	4b36      	ldr	r3, [pc, #216]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d115      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0ea      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005af4:	4b30      	ldr	r3, [pc, #192]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0de      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b04:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0d6      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b14:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f023 0207 	bic.w	r2, r3, #7
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4925      	ldr	r1, [pc, #148]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b26:	f7fc fced 	bl	8002504 <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2e:	f7fc fce9 	bl	8002504 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e0be      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b44:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d1eb      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	4b14      	ldr	r3, [pc, #80]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d208      	bcs.n	8005b84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b72:	4b11      	ldr	r3, [pc, #68]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f023 020f 	bic.w	r2, r3, #15
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	490e      	ldr	r1, [pc, #56]	@ (8005bb8 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b84:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d214      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b92:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 020f 	bic.w	r2, r3, #15
 8005b9a:	4906      	ldr	r1, [pc, #24]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b04      	ldr	r3, [pc, #16]	@ (8005bb4 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e086      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x34e>
 8005bb4:	52002000 	.word	0x52002000
 8005bb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d010      	beq.n	8005bea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d208      	bcs.n	8005bea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	4939      	ldr	r1, [pc, #228]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d010      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d208      	bcs.n	8005c18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c06:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	492e      	ldr	r1, [pc, #184]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d010      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	4b28      	ldr	r3, [pc, #160]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d208      	bcs.n	8005c46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c34:	4b25      	ldr	r3, [pc, #148]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	4922      	ldr	r1, [pc, #136]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d208      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c62:	4b1a      	ldr	r3, [pc, #104]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4917      	ldr	r1, [pc, #92]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c74:	f000 f834 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b14      	ldr	r3, [pc, #80]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	4912      	ldr	r1, [pc, #72]	@ (8005cd0 <HAL_RCC_ClockConfig+0x35c>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c92:	4b0e      	ldr	r3, [pc, #56]	@ (8005ccc <HAL_RCC_ClockConfig+0x358>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd0 <HAL_RCC_ClockConfig+0x35c>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd4 <HAL_RCC_ClockConfig+0x360>)
 8005caa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cac:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd8 <HAL_RCC_ClockConfig+0x364>)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005cdc <HAL_RCC_ClockConfig+0x368>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc fbda 	bl	8002470 <HAL_InitTick>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	080104ac 	.word	0x080104ac
 8005cd4:	24000004 	.word	0x24000004
 8005cd8:	24000000 	.word	0x24000000
 8005cdc:	2400001c 	.word	0x2400001c

08005ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	@ 0x24
 8005ce4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce6:	4bb3      	ldr	r3, [pc, #716]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cee:	2b18      	cmp	r3, #24
 8005cf0:	f200 8155 	bhi.w	8005f9e <HAL_RCC_GetSysClockFreq+0x2be>
 8005cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d61 	.word	0x08005d61
 8005d00:	08005f9f 	.word	0x08005f9f
 8005d04:	08005f9f 	.word	0x08005f9f
 8005d08:	08005f9f 	.word	0x08005f9f
 8005d0c:	08005f9f 	.word	0x08005f9f
 8005d10:	08005f9f 	.word	0x08005f9f
 8005d14:	08005f9f 	.word	0x08005f9f
 8005d18:	08005f9f 	.word	0x08005f9f
 8005d1c:	08005d87 	.word	0x08005d87
 8005d20:	08005f9f 	.word	0x08005f9f
 8005d24:	08005f9f 	.word	0x08005f9f
 8005d28:	08005f9f 	.word	0x08005f9f
 8005d2c:	08005f9f 	.word	0x08005f9f
 8005d30:	08005f9f 	.word	0x08005f9f
 8005d34:	08005f9f 	.word	0x08005f9f
 8005d38:	08005f9f 	.word	0x08005f9f
 8005d3c:	08005d8d 	.word	0x08005d8d
 8005d40:	08005f9f 	.word	0x08005f9f
 8005d44:	08005f9f 	.word	0x08005f9f
 8005d48:	08005f9f 	.word	0x08005f9f
 8005d4c:	08005f9f 	.word	0x08005f9f
 8005d50:	08005f9f 	.word	0x08005f9f
 8005d54:	08005f9f 	.word	0x08005f9f
 8005d58:	08005f9f 	.word	0x08005f9f
 8005d5c:	08005d93 	.word	0x08005d93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d60:	4b94      	ldr	r3, [pc, #592]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d6c:	4b91      	ldr	r3, [pc, #580]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	08db      	lsrs	r3, r3, #3
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	4a90      	ldr	r2, [pc, #576]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d7e:	e111      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d80:	4b8d      	ldr	r3, [pc, #564]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d82:	61bb      	str	r3, [r7, #24]
      break;
 8005d84:	e10e      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d86:	4b8d      	ldr	r3, [pc, #564]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d88:	61bb      	str	r3, [r7, #24]
      break;
 8005d8a:	e10b      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d8e:	61bb      	str	r3, [r7, #24]
      break;
 8005d90:	e108      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d92:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d9c:	4b85      	ldr	r3, [pc, #532]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005da6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005da8:	4b82      	ldr	r3, [pc, #520]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005db2:	4b80      	ldr	r3, [pc, #512]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db6:	08db      	lsrs	r3, r3, #3
 8005db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80e1 	beq.w	8005f98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f000 8083 	beq.w	8005ee4 <HAL_RCC_GetSysClockFreq+0x204>
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f200 80a1 	bhi.w	8005f28 <HAL_RCC_GetSysClockFreq+0x248>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_RCC_GetSysClockFreq+0x114>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d056      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005df2:	e099      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df4:	4b6f      	ldr	r3, [pc, #444]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d02d      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e00:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	08db      	lsrs	r3, r3, #3
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8005fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2a:	4b62      	ldr	r3, [pc, #392]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e5a:	e087      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005fc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6e:	4b51      	ldr	r3, [pc, #324]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e9e:	e065      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb2:	4b40      	ldr	r3, [pc, #256]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ee2:	e043      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005fd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f26:	e021      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f6c:	4b11      	ldr	r3, [pc, #68]	@ (8005fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	0a5b      	lsrs	r3, r3, #9
 8005f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f76:	3301      	adds	r3, #1
 8005f78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f90:	ee17 3a90 	vmov	r3, s15
 8005f94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f96:	e005      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
      break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f9e:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fa0:	61bb      	str	r3, [r7, #24]
      break;
 8005fa2:	bf00      	nop
  }

  return sysclockfreq;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3724      	adds	r7, #36	@ 0x24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	03d09000 	.word	0x03d09000
 8005fbc:	003d0900 	.word	0x003d0900
 8005fc0:	017d7840 	.word	0x017d7840
 8005fc4:	46000000 	.word	0x46000000
 8005fc8:	4c742400 	.word	0x4c742400
 8005fcc:	4a742400 	.word	0x4a742400
 8005fd0:	4bbebc20 	.word	0x4bbebc20

08005fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fda:	f7ff fe81 	bl	8005ce0 <HAL_RCC_GetSysClockFreq>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	0a1b      	lsrs	r3, r3, #8
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	490f      	ldr	r1, [pc, #60]	@ (8006028 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fec:	5ccb      	ldrb	r3, [r1, r3]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	4a09      	ldr	r2, [pc, #36]	@ (8006028 <HAL_RCC_GetHCLKFreq+0x54>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	4a07      	ldr	r2, [pc, #28]	@ (800602c <HAL_RCC_GetHCLKFreq+0x58>)
 8006010:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006012:	4a07      	ldr	r2, [pc, #28]	@ (8006030 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006018:	4b04      	ldr	r3, [pc, #16]	@ (800602c <HAL_RCC_GetHCLKFreq+0x58>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	58024400 	.word	0x58024400
 8006028:	080104ac 	.word	0x080104ac
 800602c:	24000004 	.word	0x24000004
 8006030:	24000000 	.word	0x24000000

08006034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006038:	f7ff ffcc 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4904      	ldr	r1, [pc, #16]	@ (800605c <HAL_RCC_GetPCLK1Freq+0x28>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	58024400 	.word	0x58024400
 800605c:	080104ac 	.word	0x080104ac

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006064:	f7ff ffb6 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b06      	ldr	r3, [pc, #24]	@ (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4904      	ldr	r1, [pc, #16]	@ (8006088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	58024400 	.word	0x58024400
 8006088:	080104ac 	.word	0x080104ac

0800608c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800608c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006090:	b0ca      	sub	sp, #296	@ 0x128
 8006092:	af00      	add	r7, sp, #0
 8006094:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80060b0:	2500      	movs	r5, #0
 80060b2:	ea54 0305 	orrs.w	r3, r4, r5
 80060b6:	d049      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060c2:	d02f      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060c8:	d828      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060ce:	d01a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060d4:	d822      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060de:	d007      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060e0:	e01c      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e2:	4bb8      	ldr	r3, [pc, #736]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	4ab7      	ldr	r2, [pc, #732]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060ee:	e01a      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	3308      	adds	r3, #8
 80060f6:	2102      	movs	r1, #2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 fc8f 	bl	8007a1c <RCCEx_PLL2_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006104:	e00f      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	3328      	adds	r3, #40	@ 0x28
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fd36 	bl	8007b80 <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800611a:	e004      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800612e:	4ba5      	ldr	r3, [pc, #660]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006132:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800613c:	4aa1      	ldr	r2, [pc, #644]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800613e:	430b      	orrs	r3, r1
 8006140:	6513      	str	r3, [r2, #80]	@ 0x50
 8006142:	e003      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006158:	f04f 0900 	mov.w	r9, #0
 800615c:	ea58 0309 	orrs.w	r3, r8, r9
 8006160:	d047      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006168:	2b04      	cmp	r3, #4
 800616a:	d82a      	bhi.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800616c:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006189 	.word	0x08006189
 8006178:	08006197 	.word	0x08006197
 800617c:	080061ad 	.word	0x080061ad
 8006180:	080061cb 	.word	0x080061cb
 8006184:	080061cb 	.word	0x080061cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4b8e      	ldr	r3, [pc, #568]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800618a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618c:	4a8d      	ldr	r2, [pc, #564]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006194:	e01a      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619a:	3308      	adds	r3, #8
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fc3c 	bl	8007a1c <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061aa:	e00f      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	3328      	adds	r3, #40	@ 0x28
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fce3 	bl	8007b80 <RCCEx_PLL3_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061c0:	e004      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061d4:	4b7b      	ldr	r3, [pc, #492]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d8:	f023 0107 	bic.w	r1, r3, #7
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e2:	4a78      	ldr	r2, [pc, #480]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80061fe:	f04f 0b00 	mov.w	fp, #0
 8006202:	ea5a 030b 	orrs.w	r3, sl, fp
 8006206:	d04c      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006212:	d030      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006218:	d829      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800621a:	2bc0      	cmp	r3, #192	@ 0xc0
 800621c:	d02d      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800621e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006220:	d825      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006222:	2b80      	cmp	r3, #128	@ 0x80
 8006224:	d018      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006226:	2b80      	cmp	r3, #128	@ 0x80
 8006228:	d821      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800622e:	2b40      	cmp	r3, #64	@ 0x40
 8006230:	d007      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006232:	e01c      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b63      	ldr	r3, [pc, #396]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	4a62      	ldr	r2, [pc, #392]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006240:	e01c      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006246:	3308      	adds	r3, #8
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fbe6 	bl	8007a1c <RCCEx_PLL2_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006256:	e011      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625c:	3328      	adds	r3, #40	@ 0x28
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fc8d 	bl	8007b80 <RCCEx_PLL3_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800626c:	e006      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006274:	e002      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800627a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006284:	4b4f      	ldr	r3, [pc, #316]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006288:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006292:	4a4c      	ldr	r2, [pc, #304]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6513      	str	r3, [r2, #80]	@ 0x50
 8006298:	e003      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80062ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80062b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80062bc:	460b      	mov	r3, r1
 80062be:	4313      	orrs	r3, r2
 80062c0:	d053      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062ce:	d035      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062d4:	d82e      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062da:	d031      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062e0:	d828      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e6:	d01a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80062e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ec:	d822      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80062f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062f6:	d007      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80062f8:	e01c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fa:	4b32      	ldr	r3, [pc, #200]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	4a31      	ldr	r2, [pc, #196]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006306:	e01c      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	3308      	adds	r3, #8
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fb83 	bl	8007a1c <RCCEx_PLL2_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800631c:	e011      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	3328      	adds	r3, #40	@ 0x28
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fc2a 	bl	8007b80 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006332:	e006      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800634a:	4b1e      	ldr	r3, [pc, #120]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800635a:	4a1a      	ldr	r2, [pc, #104]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800635c:	430b      	orrs	r3, r1
 800635e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006360:	e003      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006376:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800637a:	2300      	movs	r3, #0
 800637c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006380:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006384:	460b      	mov	r3, r1
 8006386:	4313      	orrs	r3, r2
 8006388:	d056      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006392:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006396:	d038      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006398:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800639c:	d831      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800639e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063a2:	d034      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80063a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063a8:	d82b      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ae:	d01d      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80063b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063b4:	d825      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063c0:	e01f      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c8:	4ba2      	ldr	r3, [pc, #648]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	4aa1      	ldr	r2, [pc, #644]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063d4:	e01c      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	3308      	adds	r3, #8
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 fb1c 	bl	8007a1c <RCCEx_PLL2_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063ea:	e011      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	3328      	adds	r3, #40	@ 0x28
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 fbc3 	bl	8007b80 <RCCEx_PLL3_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006400:	e006      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006408:	e002      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800640a:	bf00      	nop
 800640c:	e000      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800640e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006418:	4b8e      	ldr	r3, [pc, #568]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800641a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006428:	4a8a      	ldr	r2, [pc, #552]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6593      	str	r3, [r2, #88]	@ 0x58
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800644e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d03a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800645e:	2b30      	cmp	r3, #48	@ 0x30
 8006460:	d01f      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006462:	2b30      	cmp	r3, #48	@ 0x30
 8006464:	d819      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006466:	2b20      	cmp	r3, #32
 8006468:	d00c      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d815      	bhi.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d019      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006472:	2b10      	cmp	r3, #16
 8006474:	d111      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006476:	4b77      	ldr	r3, [pc, #476]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	4a76      	ldr	r2, [pc, #472]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800647c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006482:	e011      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	3308      	adds	r3, #8
 800648a:	2102      	movs	r1, #2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fac5 	bl	8007a1c <RCCEx_PLL2_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006498:	e006      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064b0:	4b68      	ldr	r3, [pc, #416]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064be:	4a65      	ldr	r2, [pc, #404]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064c4:	e003      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80064da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4313      	orrs	r3, r2
 80064ec:	d051      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064f8:	d035      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064fe:	d82e      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006500:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006504:	d031      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006506:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800650a:	d828      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800650c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006510:	d01a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006516:	d822      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d007      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006522:	e01c      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006524:	4b4b      	ldr	r3, [pc, #300]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	4a4a      	ldr	r2, [pc, #296]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800652e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006530:	e01c      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	3308      	adds	r3, #8
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fa6e 	bl	8007a1c <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006546:	e011      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3328      	adds	r3, #40	@ 0x28
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fb15 	bl	8007b80 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800655c:	e006      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006564:	e002      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800656a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006574:	4b37      	ldr	r3, [pc, #220]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006578:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006582:	4a34      	ldr	r2, [pc, #208]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006584:	430b      	orrs	r3, r1
 8006586:	6513      	str	r3, [r2, #80]	@ 0x50
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800659e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d056      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065bc:	d033      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065c2:	d82c      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065c8:	d02f      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065ce:	d826      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065d4:	d02b      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065da:	d820      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e0:	d012      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80065e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e6:	d81a      	bhi.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d022      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f0:	d115      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	3308      	adds	r3, #8
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fa0e 	bl	8007a1c <RCCEx_PLL2_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006606:	e015      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	3328      	adds	r3, #40	@ 0x28
 800660e:	2101      	movs	r1, #1
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fab5 	bl	8007b80 <RCCEx_PLL3_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800661c:	e00a      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006624:	e006      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006626:	bf00      	nop
 8006628:	e004      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800662a:	bf00      	nop
 800662c:	e002      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800662e:	bf00      	nop
 8006630:	e000      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10d      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800663c:	4b05      	ldr	r3, [pc, #20]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800663e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006640:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800664a:	4a02      	ldr	r2, [pc, #8]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800664c:	430b      	orrs	r3, r1
 800664e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800666c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006676:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	d055      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800668c:	d033      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800668e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006692:	d82c      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006698:	d02f      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669e:	d826      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066a4:	d02b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80066a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066aa:	d820      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b0:	d012      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80066b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b6:	d81a      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d022      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066c0:	d115      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	3308      	adds	r3, #8
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 f9a6 	bl	8007a1c <RCCEx_PLL2_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066d6:	e015      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	3328      	adds	r3, #40	@ 0x28
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 fa4d 	bl	8007b80 <RCCEx_PLL3_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066ec:	e00a      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066f4:	e006      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066f6:	bf00      	nop
 80066f8:	e004      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066fa:	bf00      	nop
 80066fc:	e002      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80066fe:	bf00      	nop
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800670c:	4ba3      	ldr	r3, [pc, #652]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800670e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006710:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800671c:	4a9f      	ldr	r2, [pc, #636]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800671e:	430b      	orrs	r3, r1
 8006720:	6593      	str	r3, [r2, #88]	@ 0x58
 8006722:	e003      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d037      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006756:	d00e      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800675c:	d816      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d018      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006766:	d111      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006768:	4b8c      	ldr	r3, [pc, #560]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	4a8b      	ldr	r2, [pc, #556]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006774:	e00f      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677a:	3308      	adds	r3, #8
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f001 f94c 	bl	8007a1c <RCCEx_PLL2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800678a:	e004      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006792:	e000      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800679e:	4b7f      	ldr	r3, [pc, #508]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ac:	4a7b      	ldr	r2, [pc, #492]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80067b2:	e003      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80067c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	d039      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d81c      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80067e6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006829 	.word	0x08006829
 80067f0:	080067fd 	.word	0x080067fd
 80067f4:	0800680b 	.word	0x0800680b
 80067f8:	08006829 	.word	0x08006829
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fc:	4b67      	ldr	r3, [pc, #412]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	4a66      	ldr	r2, [pc, #408]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006808:	e00f      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680e:	3308      	adds	r3, #8
 8006810:	2102      	movs	r1, #2
 8006812:	4618      	mov	r0, r3
 8006814:	f001 f902 	bl	8007a1c <RCCEx_PLL2_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800681e:	e004      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006826:	e000      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006832:	4b5a      	ldr	r3, [pc, #360]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006836:	f023 0103 	bic.w	r1, r3, #3
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006840:	4a56      	ldr	r2, [pc, #344]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006842:	430b      	orrs	r3, r1
 8006844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006846:	e003      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800685c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006860:	2300      	movs	r3, #0
 8006862:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006866:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800686a:	460b      	mov	r3, r1
 800686c:	4313      	orrs	r3, r2
 800686e:	f000 809f 	beq.w	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006872:	4b4b      	ldr	r3, [pc, #300]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a4a      	ldr	r2, [pc, #296]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800687e:	f7fb fe41 	bl	8002504 <HAL_GetTick>
 8006882:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006886:	e00b      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006888:	f7fb fe3c 	bl	8002504 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b64      	cmp	r3, #100	@ 0x64
 8006896:	d903      	bls.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800689e:	e005      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068a0:	4b3f      	ldr	r3, [pc, #252]	@ (80069a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0ed      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80068ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d179      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068b4:	4b39      	ldr	r3, [pc, #228]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068c0:	4053      	eors	r3, r2
 80068c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d015      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068ca:	4b34      	ldr	r3, [pc, #208]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068d6:	4b31      	ldr	r3, [pc, #196]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	4a30      	ldr	r2, [pc, #192]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068e2:	4b2e      	ldr	r3, [pc, #184]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	4a2d      	ldr	r2, [pc, #180]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068ee:	4a2b      	ldr	r2, [pc, #172]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006902:	d118      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fb fdfe 	bl	8002504 <HAL_GetTick>
 8006908:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800690c:	e00d      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fb fdf9 	bl	8002504 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800691e:	429a      	cmp	r2, r3
 8006920:	d903      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006928:	e005      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800692a:	4b1c      	ldr	r3, [pc, #112]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0eb      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693a:	2b00      	cmp	r3, #0
 800693c:	d129      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800694e:	d10e      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006950:	4b12      	ldr	r3, [pc, #72]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006960:	091a      	lsrs	r2, r3, #4
 8006962:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006964:	4013      	ands	r3, r2
 8006966:	4a0d      	ldr	r2, [pc, #52]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006968:	430b      	orrs	r3, r1
 800696a:	6113      	str	r3, [r2, #16]
 800696c:	e005      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	4a0a      	ldr	r2, [pc, #40]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006974:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006978:	6113      	str	r3, [r2, #16]
 800697a:	4b08      	ldr	r3, [pc, #32]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698a:	4a04      	ldr	r2, [pc, #16]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800698c:	430b      	orrs	r3, r1
 800698e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006990:	e00e      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800699a:	e009      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800699c:	58024400 	.word	0x58024400
 80069a0:	58024800 	.word	0x58024800
 80069a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f002 0301 	and.w	r3, r2, #1
 80069bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f000 8089 	beq.w	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d8:	2b28      	cmp	r3, #40	@ 0x28
 80069da:	d86b      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80069dc:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006abd 	.word	0x08006abd
 80069e8:	08006ab5 	.word	0x08006ab5
 80069ec:	08006ab5 	.word	0x08006ab5
 80069f0:	08006ab5 	.word	0x08006ab5
 80069f4:	08006ab5 	.word	0x08006ab5
 80069f8:	08006ab5 	.word	0x08006ab5
 80069fc:	08006ab5 	.word	0x08006ab5
 8006a00:	08006ab5 	.word	0x08006ab5
 8006a04:	08006a89 	.word	0x08006a89
 8006a08:	08006ab5 	.word	0x08006ab5
 8006a0c:	08006ab5 	.word	0x08006ab5
 8006a10:	08006ab5 	.word	0x08006ab5
 8006a14:	08006ab5 	.word	0x08006ab5
 8006a18:	08006ab5 	.word	0x08006ab5
 8006a1c:	08006ab5 	.word	0x08006ab5
 8006a20:	08006ab5 	.word	0x08006ab5
 8006a24:	08006a9f 	.word	0x08006a9f
 8006a28:	08006ab5 	.word	0x08006ab5
 8006a2c:	08006ab5 	.word	0x08006ab5
 8006a30:	08006ab5 	.word	0x08006ab5
 8006a34:	08006ab5 	.word	0x08006ab5
 8006a38:	08006ab5 	.word	0x08006ab5
 8006a3c:	08006ab5 	.word	0x08006ab5
 8006a40:	08006ab5 	.word	0x08006ab5
 8006a44:	08006abd 	.word	0x08006abd
 8006a48:	08006ab5 	.word	0x08006ab5
 8006a4c:	08006ab5 	.word	0x08006ab5
 8006a50:	08006ab5 	.word	0x08006ab5
 8006a54:	08006ab5 	.word	0x08006ab5
 8006a58:	08006ab5 	.word	0x08006ab5
 8006a5c:	08006ab5 	.word	0x08006ab5
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ab5 	.word	0x08006ab5
 8006a70:	08006ab5 	.word	0x08006ab5
 8006a74:	08006ab5 	.word	0x08006ab5
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ab5 	.word	0x08006ab5
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006abd 	.word	0x08006abd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 ffc3 	bl	8007a1c <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a9c:	e00f      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f86a 	bl	8007b80 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ac6:	4bbf      	ldr	r3, [pc, #764]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ad4:	4abb      	ldr	r2, [pc, #748]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 0302 	and.w	r3, r2, #2
 8006af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006afa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d041      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b0a:	2b05      	cmp	r3, #5
 8006b0c:	d824      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b61 	.word	0x08006b61
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b43 	.word	0x08006b43
 8006b20:	08006b61 	.word	0x08006b61
 8006b24:	08006b61 	.word	0x08006b61
 8006b28:	08006b61 	.word	0x08006b61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	3308      	adds	r3, #8
 8006b32:	2101      	movs	r1, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 ff71 	bl	8007a1c <RCCEx_PLL2_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b40:	e00f      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	3328      	adds	r3, #40	@ 0x28
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 f818 	bl	8007b80 <RCCEx_PLL3_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b56:	e004      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b5e:	e000      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b6a:	4b96      	ldr	r3, [pc, #600]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b6e:	f023 0107 	bic.w	r1, r3, #7
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b78:	4a92      	ldr	r2, [pc, #584]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b7e:	e003      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f002 0304 	and.w	r3, r2, #4
 8006b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d044      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bb0:	2b05      	cmp	r3, #5
 8006bb2:	d825      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006c09 	.word	0x08006c09
 8006bc0:	08006bd5 	.word	0x08006bd5
 8006bc4:	08006beb 	.word	0x08006beb
 8006bc8:	08006c09 	.word	0x08006c09
 8006bcc:	08006c09 	.word	0x08006c09
 8006bd0:	08006c09 	.word	0x08006c09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	3308      	adds	r3, #8
 8006bda:	2101      	movs	r1, #1
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 ff1d 	bl	8007a1c <RCCEx_PLL2_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006be8:	e00f      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	3328      	adds	r3, #40	@ 0x28
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 ffc4 	bl	8007b80 <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006bfe:	e004      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c06:	e000      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c12:	4b6c      	ldr	r3, [pc, #432]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c16:	f023 0107 	bic.w	r1, r3, #7
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c22:	4a68      	ldr	r2, [pc, #416]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f002 0320 	and.w	r3, r2, #32
 8006c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d055      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c5e:	d033      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c64:	d82c      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6a:	d02f      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c70:	d826      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c76:	d02b      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006c78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c7c:	d820      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c82:	d012      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c88:	d81a      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d022      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c92:	d115      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	3308      	adds	r3, #8
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 febd 	bl	8007a1c <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e015      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	3328      	adds	r3, #40	@ 0x28
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ff64 	bl	8007b80 <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc6:	e006      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cc8:	bf00      	nop
 8006cca:	e004      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006ccc:	bf00      	nop
 8006cce:	e002      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cde:	4b39      	ldr	r3, [pc, #228]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cee:	4a35      	ldr	r2, [pc, #212]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cf4:	e003      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d058      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d2a:	d033      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006d2c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d30:	d82c      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d36:	d02f      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d3c:	d826      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d42:	d02b      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d48:	d820      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d4e:	d012      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d54:	d81a      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d022      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d5e:	d115      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d64:	3308      	adds	r3, #8
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fe57 	bl	8007a1c <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d74:	e015      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7a:	3328      	adds	r3, #40	@ 0x28
 8006d7c:	2102      	movs	r1, #2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fefe 	bl	8007b80 <RCCEx_PLL3_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d92:	e006      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d94:	bf00      	nop
 8006d96:	e004      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d98:	bf00      	nop
 8006d9a:	e002      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d9c:	bf00      	nop
 8006d9e:	e000      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10e      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006daa:	4b06      	ldr	r3, [pc, #24]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dba:	4a02      	ldr	r2, [pc, #8]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dc0:	e006      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006dc2:	bf00      	nop
 8006dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006de6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d055      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006df8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006dfc:	d033      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006dfe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e02:	d82c      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e08:	d02f      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0e:	d826      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e10:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e14:	d02b      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006e16:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e1a:	d820      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e20:	d012      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006e22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e26:	d81a      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d022      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e30:	d115      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	3308      	adds	r3, #8
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fdee 	bl	8007a1c <RCCEx_PLL2_Config>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e46:	e015      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4c:	3328      	adds	r3, #40	@ 0x28
 8006e4e:	2102      	movs	r1, #2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fe95 	bl	8007b80 <RCCEx_PLL3_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e5c:	e00a      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e64:	e006      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e66:	bf00      	nop
 8006e68:	e004      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e6a:	bf00      	nop
 8006e6c:	e002      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e80:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e8c:	4a9d      	ldr	r2, [pc, #628]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e92:	e003      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f002 0308 	and.w	r3, r2, #8
 8006ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006eb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	d01e      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ece:	3328      	adds	r3, #40	@ 0x28
 8006ed0:	2102      	movs	r1, #2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fe54 	bl	8007b80 <RCCEx_PLL3_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ee4:	4b87      	ldr	r3, [pc, #540]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ef4:	4a83      	ldr	r2, [pc, #524]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f002 0310 	and.w	r3, r2, #16
 8006f06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f10:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f14:	460b      	mov	r3, r1
 8006f16:	4313      	orrs	r3, r2
 8006f18:	d01e      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f26:	d10c      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2c:	3328      	adds	r3, #40	@ 0x28
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fe25 	bl	8007b80 <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f42:	4b70      	ldr	r3, [pc, #448]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f52:	4a6c      	ldr	r2, [pc, #432]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f72:	460b      	mov	r3, r1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	d03e      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f84:	d022      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8a:	d81b      	bhi.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f94:	d00b      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006f96:	e015      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fd3b 	bl	8007a1c <RCCEx_PLL2_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fac:	e00f      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb2:	3328      	adds	r3, #40	@ 0x28
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fde2 	bl	8007b80 <RCCEx_PLL3_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fc2:	e004      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fca:	e000      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fda:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fe6:	4a47      	ldr	r2, [pc, #284]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fec:	e003      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007002:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007004:	2300      	movs	r3, #0
 8007006:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007008:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800700c:	460b      	mov	r3, r1
 800700e:	4313      	orrs	r3, r2
 8007010:	d03b      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800701e:	d01f      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007020:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007024:	d818      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800702a:	d003      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007030:	d007      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007032:	e011      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007034:	4b33      	ldr	r3, [pc, #204]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	4a32      	ldr	r2, [pc, #200]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800703a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800703e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007040:	e00f      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	3328      	adds	r3, #40	@ 0x28
 8007048:	2101      	movs	r1, #1
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fd98 	bl	8007b80 <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007056:	e004      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800705e:	e000      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800706a:	4b26      	ldr	r3, [pc, #152]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800706c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707a:	4a22      	ldr	r2, [pc, #136]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800707c:	430b      	orrs	r3, r1
 800707e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007080:	e003      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007096:	673b      	str	r3, [r7, #112]	@ 0x70
 8007098:	2300      	movs	r3, #0
 800709a:	677b      	str	r3, [r7, #116]	@ 0x74
 800709c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070a0:	460b      	mov	r3, r1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	d034      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80070b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b4:	d007      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80070b6:	e011      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b8:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	4a11      	ldr	r2, [pc, #68]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070c4:	e00e      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ca:	3308      	adds	r3, #8
 80070cc:	2102      	movs	r1, #2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fca4 	bl	8007a1c <RCCEx_PLL2_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070da:	e003      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10d      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fa:	4a02      	ldr	r2, [pc, #8]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070fc:	430b      	orrs	r3, r1
 80070fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007100:	e006      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800711c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800711e:	2300      	movs	r3, #0
 8007120:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007122:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d00c      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007130:	3328      	adds	r3, #40	@ 0x28
 8007132:	2102      	movs	r1, #2
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fd23 	bl	8007b80 <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007152:	663b      	str	r3, [r7, #96]	@ 0x60
 8007154:	2300      	movs	r3, #0
 8007156:	667b      	str	r3, [r7, #100]	@ 0x64
 8007158:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800715c:	460b      	mov	r3, r1
 800715e:	4313      	orrs	r3, r2
 8007160:	d038      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716e:	d018      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007170:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007174:	d811      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800717a:	d014      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800717c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007180:	d80b      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d011      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800718a:	d106      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718c:	4bc3      	ldr	r3, [pc, #780]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	4ac2      	ldr	r2, [pc, #776]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007198:	e008      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071a0:	e004      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071b4:	4bb9      	ldr	r3, [pc, #740]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c4:	4ab5      	ldr	r2, [pc, #724]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c6:	430b      	orrs	r3, r1
 80071c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80071ca:	e003      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80071e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071e2:	2300      	movs	r3, #0
 80071e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071ea:	460b      	mov	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071f0:	4baa      	ldr	r3, [pc, #680]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fe:	4aa7      	ldr	r2, [pc, #668]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007200:	430b      	orrs	r3, r1
 8007202:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007210:	653b      	str	r3, [r7, #80]	@ 0x50
 8007212:	2300      	movs	r3, #0
 8007214:	657b      	str	r3, [r7, #84]	@ 0x54
 8007216:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007220:	4b9e      	ldr	r3, [pc, #632]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007230:	4a9a      	ldr	r2, [pc, #616]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007232:	430b      	orrs	r3, r1
 8007234:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007244:	2300      	movs	r3, #0
 8007246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007248:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d009      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007252:	4b92      	ldr	r3, [pc, #584]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007256:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800725a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007260:	4a8e      	ldr	r2, [pc, #568]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007262:	430b      	orrs	r3, r1
 8007264:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007272:	643b      	str	r3, [r7, #64]	@ 0x40
 8007274:	2300      	movs	r3, #0
 8007276:	647b      	str	r3, [r7, #68]	@ 0x44
 8007278:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800727c:	460b      	mov	r3, r1
 800727e:	4313      	orrs	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007282:	4b86      	ldr	r3, [pc, #536]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4a85      	ldr	r2, [pc, #532]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007288:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800728c:	6113      	str	r3, [r2, #16]
 800728e:	4b83      	ldr	r3, [pc, #524]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007290:	6919      	ldr	r1, [r3, #16]
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007296:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800729a:	4a80      	ldr	r2, [pc, #512]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800729c:	430b      	orrs	r3, r1
 800729e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072ae:	2300      	movs	r3, #0
 80072b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072b6:	460b      	mov	r3, r1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072bc:	4b77      	ldr	r3, [pc, #476]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ca:	4a74      	ldr	r2, [pc, #464]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80072dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80072de:	2300      	movs	r3, #0
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072e6:	460b      	mov	r3, r1
 80072e8:	4313      	orrs	r3, r2
 80072ea:	d00a      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072ec:	4b6b      	ldr	r3, [pc, #428]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072fc:	4a67      	ldr	r2, [pc, #412]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	2100      	movs	r1, #0
 800730c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007314:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007318:	460b      	mov	r3, r1
 800731a:	4313      	orrs	r3, r2
 800731c:	d011      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	3308      	adds	r3, #8
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fb78 	bl	8007a1c <RCCEx_PLL2_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	2100      	movs	r1, #0
 800734c:	6239      	str	r1, [r7, #32]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
 8007354:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d011      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	3308      	adds	r3, #8
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fb58 	bl	8007a1c <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800737e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	2100      	movs	r1, #0
 800738c:	61b9      	str	r1, [r7, #24]
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d011      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	3308      	adds	r3, #8
 80073a4:	2102      	movs	r1, #2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fb38 	bl	8007a1c <RCCEx_PLL2_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	2100      	movs	r1, #0
 80073cc:	6139      	str	r1, [r7, #16]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073d8:	460b      	mov	r3, r1
 80073da:	4313      	orrs	r3, r2
 80073dc:	d011      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	3328      	adds	r3, #40	@ 0x28
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fbca 	bl	8007b80 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80073f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	2100      	movs	r1, #0
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d011      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007422:	3328      	adds	r3, #40	@ 0x28
 8007424:	2101      	movs	r1, #1
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fbaa 	bl	8007b80 <RCCEx_PLL3_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800743e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	2100      	movs	r1, #0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d011      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	3328      	adds	r3, #40	@ 0x28
 8007464:	2102      	movs	r1, #2
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fb8a 	bl	8007b80 <RCCEx_PLL3_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007482:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
}
 8007490:	4618      	mov	r0, r3
 8007492:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007496:	46bd      	mov	sp, r7
 8007498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800749c:	58024400 	.word	0x58024400

080074a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074a4:	f7fe fd96 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 80074a8:	4602      	mov	r2, r0
 80074aa:	4b06      	ldr	r3, [pc, #24]	@ (80074c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	091b      	lsrs	r3, r3, #4
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	4904      	ldr	r1, [pc, #16]	@ (80074c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074b6:	5ccb      	ldrb	r3, [r1, r3]
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	58024400 	.word	0x58024400
 80074c8:	080104ac 	.word	0x080104ac

080074cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b089      	sub	sp, #36	@ 0x24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074d4:	4ba1      	ldr	r3, [pc, #644]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80074de:	4b9f      	ldr	r3, [pc, #636]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	0b1b      	lsrs	r3, r3, #12
 80074e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074ea:	4b9c      	ldr	r3, [pc, #624]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80074f6:	4b99      	ldr	r3, [pc, #612]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8111 	beq.w	800773c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b02      	cmp	r3, #2
 800751e:	f000 8083 	beq.w	8007628 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	2b02      	cmp	r3, #2
 8007526:	f200 80a1 	bhi.w	800766c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d056      	beq.n	80075e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007536:	e099      	b.n	800766c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007538:	4b88      	ldr	r3, [pc, #544]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d02d      	beq.n	80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007544:	4b85      	ldr	r3, [pc, #532]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	08db      	lsrs	r3, r3, #3
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	4a84      	ldr	r2, [pc, #528]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
 8007554:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756e:	4b7b      	ldr	r3, [pc, #492]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007582:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800759e:	e087      	b.n	80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007768 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b2:	4b6a      	ldr	r3, [pc, #424]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e2:	e065      	b.n	80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800776c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f6:	4b59      	ldr	r3, [pc, #356]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007606:	ed97 6a03 	vldr	s12, [r7, #12]
 800760a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800760e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800761a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007626:	e043      	b.n	80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007632:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b48      	ldr	r3, [pc, #288]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a03 	vldr	s12, [r7, #12]
 800764e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766a:	e021      	b.n	80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800776c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b37      	ldr	r3, [pc, #220]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007692:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80076b0:	4b2a      	ldr	r3, [pc, #168]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	0a5b      	lsrs	r3, r3, #9
 80076b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d6:	ee17 2a90 	vmov	r2, s15
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80076de:	4b1f      	ldr	r3, [pc, #124]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	0c1b      	lsrs	r3, r3, #16
 80076e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007704:	ee17 2a90 	vmov	r2, s15
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800770c:	4b13      	ldr	r3, [pc, #76]	@ (800775c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	0e1b      	lsrs	r3, r3, #24
 8007712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007726:	edd7 6a07 	vldr	s13, [r7, #28]
 800772a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800772e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007732:	ee17 2a90 	vmov	r2, s15
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800773a:	e008      	b.n	800774e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	609a      	str	r2, [r3, #8]
}
 800774e:	bf00      	nop
 8007750:	3724      	adds	r7, #36	@ 0x24
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	58024400 	.word	0x58024400
 8007760:	03d09000 	.word	0x03d09000
 8007764:	46000000 	.word	0x46000000
 8007768:	4c742400 	.word	0x4c742400
 800776c:	4a742400 	.word	0x4a742400
 8007770:	4bbebc20 	.word	0x4bbebc20

08007774 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007774:	b480      	push	{r7}
 8007776:	b089      	sub	sp, #36	@ 0x24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800777c:	4ba1      	ldr	r3, [pc, #644]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007786:	4b9f      	ldr	r3, [pc, #636]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778a:	0d1b      	lsrs	r3, r3, #20
 800778c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007790:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007792:	4b9c      	ldr	r3, [pc, #624]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800779e:	4b99      	ldr	r3, [pc, #612]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a2:	08db      	lsrs	r3, r3, #3
 80077a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 8111 	beq.w	80079e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	f000 8083 	beq.w	80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f200 80a1 	bhi.w	8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d056      	beq.n	800788c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077de:	e099      	b.n	8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e0:	4b88      	ldr	r3, [pc, #544]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02d      	beq.n	8007848 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ec:	4b85      	ldr	r3, [pc, #532]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a84      	ldr	r2, [pc, #528]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b7b      	ldr	r3, [pc, #492]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a03 	vldr	s12, [r7, #12]
 800782a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007846:	e087      	b.n	8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800785c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800788a:	e065      	b.n	8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b59      	ldr	r3, [pc, #356]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ce:	e043      	b.n	8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b48      	ldr	r3, [pc, #288]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007912:	e021      	b.n	8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b37      	ldr	r3, [pc, #220]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007956:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007958:	4b2a      	ldr	r3, [pc, #168]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795c:	0a5b      	lsrs	r3, r3, #9
 800795e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800796e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007972:	edd7 6a07 	vldr	s13, [r7, #28]
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007986:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800799c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 2a90 	vmov	r2, s15
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80079b4:	4b13      	ldr	r3, [pc, #76]	@ (8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	0e1b      	lsrs	r3, r3, #24
 80079ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079da:	ee17 2a90 	vmov	r2, s15
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079e2:	e008      	b.n	80079f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	609a      	str	r2, [r3, #8]
}
 80079f6:	bf00      	nop
 80079f8:	3724      	adds	r7, #36	@ 0x24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
 8007a08:	03d09000 	.word	0x03d09000
 8007a0c:	46000000 	.word	0x46000000
 8007a10:	4c742400 	.word	0x4c742400
 8007a14:	4a742400 	.word	0x4a742400
 8007a18:	4bbebc20 	.word	0x4bbebc20

08007a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a2a:	4b53      	ldr	r3, [pc, #332]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d101      	bne.n	8007a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e099      	b.n	8007b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a46:	f7fa fd5d 	bl	8002504 <HAL_GetTick>
 8007a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a4c:	e008      	b.n	8007a60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a4e:	f7fa fd59 	bl	8002504 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e086      	b.n	8007b6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a60:	4b45      	ldr	r3, [pc, #276]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f0      	bne.n	8007a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a6c:	4b42      	ldr	r3, [pc, #264]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	493f      	ldr	r1, [pc, #252]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	025b      	lsls	r3, r3, #9
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	061b      	lsls	r3, r3, #24
 8007aac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ab0:	4931      	ldr	r1, [pc, #196]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ab6:	4b30      	ldr	r3, [pc, #192]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	492d      	ldr	r1, [pc, #180]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007acc:	f023 0220 	bic.w	r2, r3, #32
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	4928      	ldr	r1, [pc, #160]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ada:	4b27      	ldr	r3, [pc, #156]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ade:	4a26      	ldr	r2, [pc, #152]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	f023 0310 	bic.w	r3, r3, #16
 8007ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ae6:	4b24      	ldr	r3, [pc, #144]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aea:	4b24      	ldr	r3, [pc, #144]	@ (8007b7c <RCCEx_PLL2_Config+0x160>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	69d2      	ldr	r2, [r2, #28]
 8007af2:	00d2      	lsls	r2, r2, #3
 8007af4:	4920      	ldr	r1, [pc, #128]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007afa:	4b1f      	ldr	r3, [pc, #124]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	4a1e      	ldr	r2, [pc, #120]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	f043 0310 	orr.w	r3, r3, #16
 8007b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b10:	4a19      	ldr	r2, [pc, #100]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b18:	e00f      	b.n	8007b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b20:	4b15      	ldr	r3, [pc, #84]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	4a14      	ldr	r2, [pc, #80]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b2c:	e005      	b.n	8007b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b2e:	4b12      	ldr	r3, [pc, #72]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	4a11      	ldr	r2, [pc, #68]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b46:	f7fa fcdd 	bl	8002504 <HAL_GetTick>
 8007b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b4c:	e008      	b.n	8007b60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b4e:	f7fa fcd9 	bl	8002504 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e006      	b.n	8007b6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b60:	4b05      	ldr	r3, [pc, #20]	@ (8007b78 <RCCEx_PLL2_Config+0x15c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	ffff0007 	.word	0xffff0007

08007b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b8e:	4b53      	ldr	r3, [pc, #332]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d101      	bne.n	8007b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e099      	b.n	8007cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007baa:	f7fa fcab 	bl	8002504 <HAL_GetTick>
 8007bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bb0:	e008      	b.n	8007bc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bb2:	f7fa fca7 	bl	8002504 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e086      	b.n	8007cd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bc4:	4b45      	ldr	r3, [pc, #276]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bd0:	4b42      	ldr	r3, [pc, #264]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	051b      	lsls	r3, r3, #20
 8007bde:	493f      	ldr	r1, [pc, #252]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	025b      	lsls	r3, r3, #9
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c14:	4931      	ldr	r1, [pc, #196]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c1a:	4b30      	ldr	r3, [pc, #192]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	492d      	ldr	r1, [pc, #180]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4928      	ldr	r1, [pc, #160]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c3e:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c4a:	4b24      	ldr	r3, [pc, #144]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ce0 <RCCEx_PLL3_Config+0x160>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	69d2      	ldr	r2, [r2, #28]
 8007c56:	00d2      	lsls	r2, r2, #3
 8007c58:	4920      	ldr	r1, [pc, #128]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	4a1e      	ldr	r2, [pc, #120]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c70:	4b1a      	ldr	r3, [pc, #104]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	4a19      	ldr	r2, [pc, #100]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c7c:	e00f      	b.n	8007c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c84:	4b15      	ldr	r3, [pc, #84]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a14      	ldr	r2, [pc, #80]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c90:	e005      	b.n	8007c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c92:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	4a11      	ldr	r2, [pc, #68]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007c98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7fa fc2b 	bl	8002504 <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cb2:	f7fa fc27 	bl	8002504 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e006      	b.n	8007cd2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc4:	4b05      	ldr	r3, [pc, #20]	@ (8007cdc <RCCEx_PLL3_Config+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	ffff0007 	.word	0xffff0007

08007ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e049      	b.n	8007d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fa f9b8 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f000 ff8a 	bl	8008c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d001      	beq.n	8007dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e04c      	b.n	8007e46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a26      	ldr	r2, [pc, #152]	@ (8007e54 <HAL_TIM_Base_Start+0xc0>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d022      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc6:	d01d      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a22      	ldr	r2, [pc, #136]	@ (8007e58 <HAL_TIM_Base_Start+0xc4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d018      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a21      	ldr	r2, [pc, #132]	@ (8007e5c <HAL_TIM_Base_Start+0xc8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d013      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e60 <HAL_TIM_Base_Start+0xcc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00e      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1e      	ldr	r2, [pc, #120]	@ (8007e64 <HAL_TIM_Base_Start+0xd0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d009      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e68 <HAL_TIM_Base_Start+0xd4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d004      	beq.n	8007e04 <HAL_TIM_Base_Start+0x70>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8007e6c <HAL_TIM_Base_Start+0xd8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d115      	bne.n	8007e30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	4b19      	ldr	r3, [pc, #100]	@ (8007e70 <HAL_TIM_Base_Start+0xdc>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b06      	cmp	r3, #6
 8007e14:	d015      	beq.n	8007e42 <HAL_TIM_Base_Start+0xae>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e1c:	d011      	beq.n	8007e42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2e:	e008      	b.n	8007e42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40010000 	.word	0x40010000
 8007e58:	40000400 	.word	0x40000400
 8007e5c:	40000800 	.word	0x40000800
 8007e60:	40000c00 	.word	0x40000c00
 8007e64:	40010400 	.word	0x40010400
 8007e68:	40001800 	.word	0x40001800
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	00010007 	.word	0x00010007

08007e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d001      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e054      	b.n	8007f36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a26      	ldr	r2, [pc, #152]	@ (8007f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d022      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb6:	d01d      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a22      	ldr	r2, [pc, #136]	@ (8007f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d018      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a21      	ldr	r2, [pc, #132]	@ (8007f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d013      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00e      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1e      	ldr	r2, [pc, #120]	@ (8007f54 <HAL_TIM_Base_Start_IT+0xe0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d009      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f58 <HAL_TIM_Base_Start_IT+0xe4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d004      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x80>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1b      	ldr	r2, [pc, #108]	@ (8007f5c <HAL_TIM_Base_Start_IT+0xe8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d115      	bne.n	8007f20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	4b19      	ldr	r3, [pc, #100]	@ (8007f60 <HAL_TIM_Base_Start_IT+0xec>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b06      	cmp	r3, #6
 8007f04:	d015      	beq.n	8007f32 <HAL_TIM_Base_Start_IT+0xbe>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d011      	beq.n	8007f32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0201 	orr.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f1e:	e008      	b.n	8007f32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0201 	orr.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e000      	b.n	8007f34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40010400 	.word	0x40010400
 8007f58:	40001800 	.word	0x40001800
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	00010007 	.word	0x00010007

08007f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e049      	b.n	800800a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fa f89e 	bl	80020cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	f000 fe4a 	bl	8008c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d109      	bne.n	8008038 <HAL_TIM_PWM_Start+0x24>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	bf14      	ite	ne
 8008030:	2301      	movne	r3, #1
 8008032:	2300      	moveq	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	e03c      	b.n	80080b2 <HAL_TIM_PWM_Start+0x9e>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b04      	cmp	r3, #4
 800803c:	d109      	bne.n	8008052 <HAL_TIM_PWM_Start+0x3e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b01      	cmp	r3, #1
 8008048:	bf14      	ite	ne
 800804a:	2301      	movne	r3, #1
 800804c:	2300      	moveq	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	e02f      	b.n	80080b2 <HAL_TIM_PWM_Start+0x9e>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b08      	cmp	r3, #8
 8008056:	d109      	bne.n	800806c <HAL_TIM_PWM_Start+0x58>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	e022      	b.n	80080b2 <HAL_TIM_PWM_Start+0x9e>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b0c      	cmp	r3, #12
 8008070:	d109      	bne.n	8008086 <HAL_TIM_PWM_Start+0x72>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	bf14      	ite	ne
 800807e:	2301      	movne	r3, #1
 8008080:	2300      	moveq	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	e015      	b.n	80080b2 <HAL_TIM_PWM_Start+0x9e>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b10      	cmp	r3, #16
 800808a:	d109      	bne.n	80080a0 <HAL_TIM_PWM_Start+0x8c>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	bf14      	ite	ne
 8008098:	2301      	movne	r3, #1
 800809a:	2300      	moveq	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	e008      	b.n	80080b2 <HAL_TIM_PWM_Start+0x9e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e0a1      	b.n	80081fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <HAL_TIM_PWM_Start+0xb6>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080c8:	e023      	b.n	8008112 <HAL_TIM_PWM_Start+0xfe>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d104      	bne.n	80080da <HAL_TIM_PWM_Start+0xc6>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080d8:	e01b      	b.n	8008112 <HAL_TIM_PWM_Start+0xfe>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d104      	bne.n	80080ea <HAL_TIM_PWM_Start+0xd6>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080e8:	e013      	b.n	8008112 <HAL_TIM_PWM_Start+0xfe>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b0c      	cmp	r3, #12
 80080ee:	d104      	bne.n	80080fa <HAL_TIM_PWM_Start+0xe6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080f8:	e00b      	b.n	8008112 <HAL_TIM_PWM_Start+0xfe>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	d104      	bne.n	800810a <HAL_TIM_PWM_Start+0xf6>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008108:	e003      	b.n	8008112 <HAL_TIM_PWM_Start+0xfe>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2202      	movs	r2, #2
 800810e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2201      	movs	r2, #1
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f9a8 	bl	8009470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a38      	ldr	r2, [pc, #224]	@ (8008208 <HAL_TIM_PWM_Start+0x1f4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_TIM_PWM_Start+0x13e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a37      	ldr	r2, [pc, #220]	@ (800820c <HAL_TIM_PWM_Start+0x1f8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00e      	beq.n	8008152 <HAL_TIM_PWM_Start+0x13e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a35      	ldr	r2, [pc, #212]	@ (8008210 <HAL_TIM_PWM_Start+0x1fc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d009      	beq.n	8008152 <HAL_TIM_PWM_Start+0x13e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a34      	ldr	r2, [pc, #208]	@ (8008214 <HAL_TIM_PWM_Start+0x200>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d004      	beq.n	8008152 <HAL_TIM_PWM_Start+0x13e>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a32      	ldr	r2, [pc, #200]	@ (8008218 <HAL_TIM_PWM_Start+0x204>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d101      	bne.n	8008156 <HAL_TIM_PWM_Start+0x142>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <HAL_TIM_PWM_Start+0x144>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800816a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a25      	ldr	r2, [pc, #148]	@ (8008208 <HAL_TIM_PWM_Start+0x1f4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d022      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800817e:	d01d      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a25      	ldr	r2, [pc, #148]	@ (800821c <HAL_TIM_PWM_Start+0x208>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d018      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a24      	ldr	r2, [pc, #144]	@ (8008220 <HAL_TIM_PWM_Start+0x20c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d013      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a22      	ldr	r2, [pc, #136]	@ (8008224 <HAL_TIM_PWM_Start+0x210>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00e      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1a      	ldr	r2, [pc, #104]	@ (800820c <HAL_TIM_PWM_Start+0x1f8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d009      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008228 <HAL_TIM_PWM_Start+0x214>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_TIM_PWM_Start+0x1a8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a16      	ldr	r2, [pc, #88]	@ (8008210 <HAL_TIM_PWM_Start+0x1fc>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d115      	bne.n	80081e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	4b1a      	ldr	r3, [pc, #104]	@ (800822c <HAL_TIM_PWM_Start+0x218>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b06      	cmp	r3, #6
 80081cc:	d015      	beq.n	80081fa <HAL_TIM_PWM_Start+0x1e6>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d4:	d011      	beq.n	80081fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e6:	e008      	b.n	80081fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e000      	b.n	80081fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40010000 	.word	0x40010000
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800
 8008224:	40000c00 	.word	0x40000c00
 8008228:	40001800 	.word	0x40001800
 800822c:	00010007 	.word	0x00010007

08008230 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2200      	movs	r2, #0
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f001 f914 	bl	8009470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a3e      	ldr	r2, [pc, #248]	@ (8008348 <HAL_TIM_PWM_Stop+0x118>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <HAL_TIM_PWM_Stop+0x4a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a3d      	ldr	r2, [pc, #244]	@ (800834c <HAL_TIM_PWM_Stop+0x11c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d00e      	beq.n	800827a <HAL_TIM_PWM_Stop+0x4a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a3b      	ldr	r2, [pc, #236]	@ (8008350 <HAL_TIM_PWM_Stop+0x120>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d009      	beq.n	800827a <HAL_TIM_PWM_Stop+0x4a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a3a      	ldr	r2, [pc, #232]	@ (8008354 <HAL_TIM_PWM_Stop+0x124>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d004      	beq.n	800827a <HAL_TIM_PWM_Stop+0x4a>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a38      	ldr	r2, [pc, #224]	@ (8008358 <HAL_TIM_PWM_Stop+0x128>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d101      	bne.n	800827e <HAL_TIM_PWM_Stop+0x4e>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <HAL_TIM_PWM_Stop+0x50>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d017      	beq.n	80082b4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6a1a      	ldr	r2, [r3, #32]
 800828a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800828e:	4013      	ands	r3, r2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10f      	bne.n	80082b4 <HAL_TIM_PWM_Stop+0x84>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6a1a      	ldr	r2, [r3, #32]
 800829a:	f240 4344 	movw	r3, #1092	@ 0x444
 800829e:	4013      	ands	r3, r2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d107      	bne.n	80082b4 <HAL_TIM_PWM_Stop+0x84>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6a1a      	ldr	r2, [r3, #32]
 80082ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082be:	4013      	ands	r3, r2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10f      	bne.n	80082e4 <HAL_TIM_PWM_Stop+0xb4>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6a1a      	ldr	r2, [r3, #32]
 80082ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d107      	bne.n	80082e4 <HAL_TIM_PWM_Stop+0xb4>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0201 	bic.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <HAL_TIM_PWM_Stop+0xc4>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082f2:	e023      	b.n	800833c <HAL_TIM_PWM_Stop+0x10c>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d104      	bne.n	8008304 <HAL_TIM_PWM_Stop+0xd4>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008302:	e01b      	b.n	800833c <HAL_TIM_PWM_Stop+0x10c>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b08      	cmp	r3, #8
 8008308:	d104      	bne.n	8008314 <HAL_TIM_PWM_Stop+0xe4>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008312:	e013      	b.n	800833c <HAL_TIM_PWM_Stop+0x10c>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b0c      	cmp	r3, #12
 8008318:	d104      	bne.n	8008324 <HAL_TIM_PWM_Stop+0xf4>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008322:	e00b      	b.n	800833c <HAL_TIM_PWM_Stop+0x10c>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	2b10      	cmp	r3, #16
 8008328:	d104      	bne.n	8008334 <HAL_TIM_PWM_Stop+0x104>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008332:	e003      	b.n	800833c <HAL_TIM_PWM_Stop+0x10c>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800

0800835c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e08f      	b.n	8008490 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7f9 fec9 	bl	800211c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6899      	ldr	r1, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	4b3e      	ldr	r3, [pc, #248]	@ (8008498 <HAL_TIM_Encoder_Init+0x13c>)
 800839e:	400b      	ands	r3, r1
 80083a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f000 fc45 	bl	8008c3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4b31      	ldr	r3, [pc, #196]	@ (800849c <HAL_TIM_Encoder_Init+0x140>)
 80083d8:	4013      	ands	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	4313      	orrs	r3, r2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4b2b      	ldr	r3, [pc, #172]	@ (80084a0 <HAL_TIM_Encoder_Init+0x144>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4b2a      	ldr	r3, [pc, #168]	@ (80084a4 <HAL_TIM_Encoder_Init+0x148>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	4313      	orrs	r3, r2
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	011a      	lsls	r2, r3, #4
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	031b      	lsls	r3, r3, #12
 800841c:	4313      	orrs	r3, r2
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4313      	orrs	r3, r2
 8008422:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800842a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	4313      	orrs	r3, r2
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	fffebff8 	.word	0xfffebff8
 800849c:	fffffcfc 	.word	0xfffffcfc
 80084a0:	fffff3f3 	.word	0xfffff3f3
 80084a4:	ffff0f0f 	.word	0xffff0f0f

080084a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d110      	bne.n	80084fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d102      	bne.n	80084e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80084de:	7b7b      	ldrb	r3, [r7, #13]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d001      	beq.n	80084e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e069      	b.n	80085bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084f8:	e031      	b.n	800855e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d110      	bne.n	8008522 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d102      	bne.n	800850c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008506:	7b3b      	ldrb	r3, [r7, #12]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d001      	beq.n	8008510 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e055      	b.n	80085bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008520:	e01d      	b.n	800855e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d108      	bne.n	800853a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d105      	bne.n	800853a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800852e:	7b7b      	ldrb	r3, [r7, #13]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d102      	bne.n	800853a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008534:	7b3b      	ldrb	r3, [r7, #12]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d001      	beq.n	800853e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e03e      	b.n	80085bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2202      	movs	r2, #2
 8008552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_TIM_Encoder_Start+0xc4>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b04      	cmp	r3, #4
 8008568:	d008      	beq.n	800857c <HAL_TIM_Encoder_Start+0xd4>
 800856a:	e00f      	b.n	800858c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2201      	movs	r2, #1
 8008572:	2100      	movs	r1, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f000 ff7b 	bl	8009470 <TIM_CCxChannelCmd>
      break;
 800857a:	e016      	b.n	80085aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2201      	movs	r2, #1
 8008582:	2104      	movs	r1, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f000 ff73 	bl	8009470 <TIM_CCxChannelCmd>
      break;
 800858a:	e00e      	b.n	80085aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2201      	movs	r2, #1
 8008592:	2100      	movs	r1, #0
 8008594:	4618      	mov	r0, r3
 8008596:	f000 ff6b 	bl	8009470 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2201      	movs	r2, #1
 80085a0:	2104      	movs	r1, #4
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 ff64 	bl	8009470 <TIM_CCxChannelCmd>
      break;
 80085a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0201 	orr.w	r2, r2, #1
 80085b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d020      	beq.n	8008628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01b      	beq.n	8008628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0202 	mvn.w	r2, #2
 80085f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 faf6 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fae8 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 faf9 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d020      	beq.n	8008674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01b      	beq.n	8008674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f06f 0204 	mvn.w	r2, #4
 8008644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fad0 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 8008660:	e005      	b.n	800866e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fac2 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fad3 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01b      	beq.n	80086c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0208 	mvn.w	r2, #8
 8008690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2204      	movs	r2, #4
 8008696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 faaa 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 80086ac:	e005      	b.n	80086ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa9c 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 faad 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 0310 	and.w	r3, r3, #16
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d020      	beq.n	800870c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01b      	beq.n	800870c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0210 	mvn.w	r2, #16
 80086dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2208      	movs	r2, #8
 80086e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa84 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 80086f8:	e005      	b.n	8008706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa76 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fa87 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00c      	beq.n	8008730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d007      	beq.n	8008730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0201 	mvn.w	r2, #1
 8008728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7f9 f84a 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00c      	beq.n	800875e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 ff47 	bl	80095ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800877a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 ff3f 	bl	8009600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00c      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800879e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa41 	bl	8008c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00c      	beq.n	80087ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f06f 0220 	mvn.w	r2, #32
 80087c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 ff07 	bl	80095d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e0ff      	b.n	80089f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b14      	cmp	r3, #20
 80087fe:	f200 80f0 	bhi.w	80089e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008802:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080089e3 	.word	0x080089e3
 8008810:	080089e3 	.word	0x080089e3
 8008814:	080089e3 	.word	0x080089e3
 8008818:	0800889d 	.word	0x0800889d
 800881c:	080089e3 	.word	0x080089e3
 8008820:	080089e3 	.word	0x080089e3
 8008824:	080089e3 	.word	0x080089e3
 8008828:	080088df 	.word	0x080088df
 800882c:	080089e3 	.word	0x080089e3
 8008830:	080089e3 	.word	0x080089e3
 8008834:	080089e3 	.word	0x080089e3
 8008838:	0800891f 	.word	0x0800891f
 800883c:	080089e3 	.word	0x080089e3
 8008840:	080089e3 	.word	0x080089e3
 8008844:	080089e3 	.word	0x080089e3
 8008848:	08008961 	.word	0x08008961
 800884c:	080089e3 	.word	0x080089e3
 8008850:	080089e3 	.word	0x080089e3
 8008854:	080089e3 	.word	0x080089e3
 8008858:	080089a1 	.word	0x080089a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fa90 	bl	8008d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0208 	orr.w	r2, r2, #8
 8008876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699a      	ldr	r2, [r3, #24]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0204 	bic.w	r2, r2, #4
 8008886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6999      	ldr	r1, [r3, #24]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	619a      	str	r2, [r3, #24]
      break;
 800889a:	e0a5      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fb00 	bl	8008ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6999      	ldr	r1, [r3, #24]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	021a      	lsls	r2, r3, #8
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	619a      	str	r2, [r3, #24]
      break;
 80088dc:	e084      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fb69 	bl	8008fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69da      	ldr	r2, [r3, #28]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f042 0208 	orr.w	r2, r2, #8
 80088f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0204 	bic.w	r2, r2, #4
 8008908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69d9      	ldr	r1, [r3, #28]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	61da      	str	r2, [r3, #28]
      break;
 800891c:	e064      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fbd1 	bl	80090cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69d9      	ldr	r1, [r3, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	021a      	lsls	r2, r3, #8
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	61da      	str	r2, [r3, #28]
      break;
 800895e:	e043      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fc1a 	bl	80091a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0208 	orr.w	r2, r2, #8
 800897a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0204 	bic.w	r2, r2, #4
 800898a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800899e:	e023      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fc5e 	bl	8009268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089e0:	e002      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
      break;
 80089e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_TIM_ConfigClockSource+0x1c>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e0dc      	b.n	8008bd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	4b6a      	ldr	r3, [pc, #424]	@ (8008bdc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a64      	ldr	r2, [pc, #400]	@ (8008be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	f000 80a9 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a54:	4a62      	ldr	r2, [pc, #392]	@ (8008be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	f200 80ae 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a5c:	4a61      	ldr	r2, [pc, #388]	@ (8008be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	f000 80a1 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a64:	4a5f      	ldr	r2, [pc, #380]	@ (8008be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f200 80a6 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f000 8099 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a74:	4a5c      	ldr	r2, [pc, #368]	@ (8008be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f200 809e 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a80:	f000 8091 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a88:	f200 8096 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a90:	f000 8089 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a98:	f200 808e 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa0:	d03e      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x124>
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa6:	f200 8087 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aae:	f000 8086 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1c2>
 8008ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab6:	d87f      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ab8:	2b70      	cmp	r3, #112	@ 0x70
 8008aba:	d01a      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0xf6>
 8008abc:	2b70      	cmp	r3, #112	@ 0x70
 8008abe:	d87b      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac0:	2b60      	cmp	r3, #96	@ 0x60
 8008ac2:	d050      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0x16a>
 8008ac4:	2b60      	cmp	r3, #96	@ 0x60
 8008ac6:	d877      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac8:	2b50      	cmp	r3, #80	@ 0x50
 8008aca:	d03c      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x14a>
 8008acc:	2b50      	cmp	r3, #80	@ 0x50
 8008ace:	d873      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad0:	2b40      	cmp	r3, #64	@ 0x40
 8008ad2:	d058      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x18a>
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d86f      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad8:	2b30      	cmp	r3, #48	@ 0x30
 8008ada:	d064      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008adc:	2b30      	cmp	r3, #48	@ 0x30
 8008ade:	d86b      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d060      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d867      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d05c      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d05a      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008af0:	e062      	b.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b02:	f000 fc95 	bl	8009430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	609a      	str	r2, [r3, #8]
      break;
 8008b1e:	e04f      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b30:	f000 fc7e 	bl	8009430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b42:	609a      	str	r2, [r3, #8]
      break;
 8008b44:	e03c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b52:	461a      	mov	r2, r3
 8008b54:	f000 fbee 	bl	8009334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2150      	movs	r1, #80	@ 0x50
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fc48 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008b64:	e02c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b72:	461a      	mov	r2, r3
 8008b74:	f000 fc0d 	bl	8009392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2160      	movs	r1, #96	@ 0x60
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fc38 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008b84:	e01c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 fbce 	bl	8009334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2140      	movs	r1, #64	@ 0x40
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fc28 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008ba4:	e00c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f000 fc1f 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008bb6:	e003      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	e000      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	ffceff88 	.word	0xffceff88
 8008be0:	00100040 	.word	0x00100040
 8008be4:	00100030 	.word	0x00100030
 8008be8:	00100020 	.word	0x00100020

08008bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a46      	ldr	r2, [pc, #280]	@ (8008d68 <TIM_Base_SetConfig+0x12c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d013      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5a:	d00f      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a43      	ldr	r2, [pc, #268]	@ (8008d6c <TIM_Base_SetConfig+0x130>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00b      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a42      	ldr	r2, [pc, #264]	@ (8008d70 <TIM_Base_SetConfig+0x134>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d007      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a41      	ldr	r2, [pc, #260]	@ (8008d74 <TIM_Base_SetConfig+0x138>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a40      	ldr	r2, [pc, #256]	@ (8008d78 <TIM_Base_SetConfig+0x13c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d108      	bne.n	8008c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a35      	ldr	r2, [pc, #212]	@ (8008d68 <TIM_Base_SetConfig+0x12c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01f      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9c:	d01b      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a32      	ldr	r2, [pc, #200]	@ (8008d6c <TIM_Base_SetConfig+0x130>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d017      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a31      	ldr	r2, [pc, #196]	@ (8008d70 <TIM_Base_SetConfig+0x134>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a30      	ldr	r2, [pc, #192]	@ (8008d74 <TIM_Base_SetConfig+0x138>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00f      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8008d78 <TIM_Base_SetConfig+0x13c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00b      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8008d7c <TIM_Base_SetConfig+0x140>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d007      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008d80 <TIM_Base_SetConfig+0x144>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8008d84 <TIM_Base_SetConfig+0x148>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d108      	bne.n	8008ce8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a16      	ldr	r2, [pc, #88]	@ (8008d68 <TIM_Base_SetConfig+0x12c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00f      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <TIM_Base_SetConfig+0x13c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00b      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a17      	ldr	r2, [pc, #92]	@ (8008d7c <TIM_Base_SetConfig+0x140>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a16      	ldr	r2, [pc, #88]	@ (8008d80 <TIM_Base_SetConfig+0x144>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <TIM_Base_SetConfig+0x148>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d103      	bne.n	8008d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d105      	bne.n	8008d5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	611a      	str	r2, [r3, #16]
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40014400 	.word	0x40014400
 8008d84:	40014800 	.word	0x40014800

08008d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	f023 0201 	bic.w	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4b37      	ldr	r3, [pc, #220]	@ (8008e90 <TIM_OC1_SetConfig+0x108>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 0302 	bic.w	r3, r3, #2
 8008dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a2d      	ldr	r2, [pc, #180]	@ (8008e94 <TIM_OC1_SetConfig+0x10c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e98 <TIM_OC1_SetConfig+0x110>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2b      	ldr	r2, [pc, #172]	@ (8008e9c <TIM_OC1_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea0 <TIM_OC1_SetConfig+0x118>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a29      	ldr	r2, [pc, #164]	@ (8008ea4 <TIM_OC1_SetConfig+0x11c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d10c      	bne.n	8008e1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f023 0308 	bic.w	r3, r3, #8
 8008e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 0304 	bic.w	r3, r3, #4
 8008e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1c      	ldr	r2, [pc, #112]	@ (8008e94 <TIM_OC1_SetConfig+0x10c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00f      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1b      	ldr	r2, [pc, #108]	@ (8008e98 <TIM_OC1_SetConfig+0x110>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00b      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a1a      	ldr	r2, [pc, #104]	@ (8008e9c <TIM_OC1_SetConfig+0x114>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a19      	ldr	r2, [pc, #100]	@ (8008ea0 <TIM_OC1_SetConfig+0x118>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d003      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a18      	ldr	r2, [pc, #96]	@ (8008ea4 <TIM_OC1_SetConfig+0x11c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d111      	bne.n	8008e6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	621a      	str	r2, [r3, #32]
}
 8008e84:	bf00      	nop
 8008e86:	371c      	adds	r7, #28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	fffeff8f 	.word	0xfffeff8f
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800

08008ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f023 0210 	bic.w	r2, r3, #16
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b34      	ldr	r3, [pc, #208]	@ (8008fa4 <TIM_OC2_SetConfig+0xfc>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a29      	ldr	r2, [pc, #164]	@ (8008fa8 <TIM_OC2_SetConfig+0x100>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x68>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a28      	ldr	r2, [pc, #160]	@ (8008fac <TIM_OC2_SetConfig+0x104>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10d      	bne.n	8008f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fa8 <TIM_OC2_SetConfig+0x100>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <TIM_OC2_SetConfig+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <TIM_OC2_SetConfig+0x108>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb4 <TIM_OC2_SetConfig+0x10c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb8 <TIM_OC2_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d113      	bne.n	8008f7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	feff8fff 	.word	0xfeff8fff
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800

08008fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4b33      	ldr	r3, [pc, #204]	@ (80090b4 <TIM_OC3_SetConfig+0xf8>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a28      	ldr	r2, [pc, #160]	@ (80090b8 <TIM_OC3_SetConfig+0xfc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_OC3_SetConfig+0x66>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a27      	ldr	r2, [pc, #156]	@ (80090bc <TIM_OC3_SetConfig+0x100>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d10d      	bne.n	800903e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800903c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1d      	ldr	r2, [pc, #116]	@ (80090b8 <TIM_OC3_SetConfig+0xfc>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1c      	ldr	r2, [pc, #112]	@ (80090bc <TIM_OC3_SetConfig+0x100>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00b      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1b      	ldr	r2, [pc, #108]	@ (80090c0 <TIM_OC3_SetConfig+0x104>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d007      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a1a      	ldr	r2, [pc, #104]	@ (80090c4 <TIM_OC3_SetConfig+0x108>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a19      	ldr	r2, [pc, #100]	@ (80090c8 <TIM_OC3_SetConfig+0x10c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d113      	bne.n	800908e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	fffeff8f 	.word	0xfffeff8f
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800

080090cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4b24      	ldr	r3, [pc, #144]	@ (8009188 <TIM_OC4_SetConfig+0xbc>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	031b      	lsls	r3, r3, #12
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a19      	ldr	r2, [pc, #100]	@ (800918c <TIM_OC4_SetConfig+0xc0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00f      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a18      	ldr	r2, [pc, #96]	@ (8009190 <TIM_OC4_SetConfig+0xc4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a17      	ldr	r2, [pc, #92]	@ (8009194 <TIM_OC4_SetConfig+0xc8>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a16      	ldr	r2, [pc, #88]	@ (8009198 <TIM_OC4_SetConfig+0xcc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a15      	ldr	r2, [pc, #84]	@ (800919c <TIM_OC4_SetConfig+0xd0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d109      	bne.n	8009160 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	feff8fff 	.word	0xfeff8fff
 800918c:	40010000 	.word	0x40010000
 8009190:	40010400 	.word	0x40010400
 8009194:	40014000 	.word	0x40014000
 8009198:	40014400 	.word	0x40014400
 800919c:	40014800 	.word	0x40014800

080091a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4b21      	ldr	r3, [pc, #132]	@ (8009250 <TIM_OC5_SetConfig+0xb0>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <TIM_OC5_SetConfig+0xb4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00f      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <TIM_OC5_SetConfig+0xb8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00b      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a16      	ldr	r2, [pc, #88]	@ (800925c <TIM_OC5_SetConfig+0xbc>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d007      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a15      	ldr	r2, [pc, #84]	@ (8009260 <TIM_OC5_SetConfig+0xc0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a14      	ldr	r2, [pc, #80]	@ (8009264 <TIM_OC5_SetConfig+0xc4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d109      	bne.n	800922a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800921c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	621a      	str	r2, [r3, #32]
}
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	fffeff8f 	.word	0xfffeff8f
 8009254:	40010000 	.word	0x40010000
 8009258:	40010400 	.word	0x40010400
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800

08009268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4b22      	ldr	r3, [pc, #136]	@ (800931c <TIM_OC6_SetConfig+0xb4>)
 8009294:	4013      	ands	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <TIM_OC6_SetConfig+0xb8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00f      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a18      	ldr	r2, [pc, #96]	@ (8009324 <TIM_OC6_SetConfig+0xbc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a17      	ldr	r2, [pc, #92]	@ (8009328 <TIM_OC6_SetConfig+0xc0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a16      	ldr	r2, [pc, #88]	@ (800932c <TIM_OC6_SetConfig+0xc4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a15      	ldr	r2, [pc, #84]	@ (8009330 <TIM_OC6_SetConfig+0xc8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d109      	bne.n	80092f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	621a      	str	r2, [r3, #32]
}
 800930e:	bf00      	nop
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	feff8fff 	.word	0xfeff8fff
 8009320:	40010000 	.word	0x40010000
 8009324:	40010400 	.word	0x40010400
 8009328:	40014000 	.word	0x40014000
 800932c:	40014400 	.word	0x40014400
 8009330:	40014800 	.word	0x40014800

08009334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800935e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 030a 	bic.w	r3, r3, #10
 8009370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	f023 0210 	bic.w	r2, r3, #16
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	031b      	lsls	r3, r3, #12
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4b09      	ldr	r3, [pc, #36]	@ (800942c <TIM_ITRx_SetConfig+0x38>)
 8009408:	4013      	ands	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	f043 0307 	orr.w	r3, r3, #7
 8009416:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	609a      	str	r2, [r3, #8]
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	ffcfff8f 	.word	0xffcfff8f

08009430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800944a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	021a      	lsls	r2, r3, #8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	431a      	orrs	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4313      	orrs	r3, r2
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	2201      	movs	r2, #1
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a1a      	ldr	r2, [r3, #32]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	43db      	mvns	r3, r3
 8009492:	401a      	ands	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	fa01 f303 	lsl.w	r3, r1, r3
 80094a8:	431a      	orrs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
}
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094d0:	2302      	movs	r3, #2
 80094d2:	e06d      	b.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a30      	ldr	r2, [pc, #192]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d004      	beq.n	8009508 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a2f      	ldr	r2, [pc, #188]	@ (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d108      	bne.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800950e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009520:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a20      	ldr	r2, [pc, #128]	@ (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d022      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009546:	d01d      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1d      	ldr	r2, [pc, #116]	@ (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d018      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1c      	ldr	r2, [pc, #112]	@ (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d013      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1a      	ldr	r2, [pc, #104]	@ (80095cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00e      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a15      	ldr	r2, [pc, #84]	@ (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d009      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a16      	ldr	r2, [pc, #88]	@ (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d10c      	bne.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800958a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40010400 	.word	0x40010400
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40000c00 	.word	0x40000c00
 80095d0:	40001800 	.word	0x40001800
 80095d4:	40014000 	.word	0x40014000

080095d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e042      	b.n	80096ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7f8 fe41 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2224      	movs	r2, #36	@ 0x24
 8009642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0201 	bic.w	r2, r2, #1
 8009654:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fa44 	bl	800aaec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fcd9 	bl	800a01c <UART_SetConfig>
 800966a:	4603      	mov	r3, r0
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e01b      	b.n	80096ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0201 	orr.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 fac3 	bl	800ac30 <UART_CheckIdleState>
 80096aa:	4603      	mov	r3, r0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	@ 0x28
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	4613      	mov	r3, r2
 80096c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d17b      	bne.n	80097c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <HAL_UART_Transmit+0x26>
 80096d4:	88fb      	ldrh	r3, [r7, #6]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e074      	b.n	80097c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2221      	movs	r2, #33	@ 0x21
 80096ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096ee:	f7f8 ff09 	bl	8002504 <HAL_GetTick>
 80096f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	88fa      	ldrh	r2, [r7, #6]
 80096f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	88fa      	ldrh	r2, [r7, #6]
 8009700:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800970c:	d108      	bne.n	8009720 <HAL_UART_Transmit+0x6c>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	e003      	b.n	8009728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009724:	2300      	movs	r3, #0
 8009726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009728:	e030      	b.n	800978c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2200      	movs	r2, #0
 8009732:	2180      	movs	r1, #128	@ 0x80
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f001 fb25 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2220      	movs	r2, #32
 8009744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e03d      	b.n	80097c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10b      	bne.n	800976a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009760:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	3302      	adds	r3, #2
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	e007      	b.n	800977a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	781a      	ldrb	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	3301      	adds	r3, #1
 8009778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1c8      	bne.n	800972a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	2140      	movs	r1, #64	@ 0x40
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f001 faee 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d005      	beq.n	80097ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e006      	b.n	80097c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	e000      	b.n	80097c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80097c6:	2302      	movs	r3, #2
  }
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3720      	adds	r7, #32
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	@ 0x28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d137      	bne.n	8009858 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <HAL_UART_Receive_IT+0x24>
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e030      	b.n	800985a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a18      	ldr	r2, [pc, #96]	@ (8009864 <HAL_UART_Receive_IT+0x94>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d01f      	beq.n	8009848 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d018      	beq.n	8009848 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	613b      	str	r3, [r7, #16]
   return(result);
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800982a:	627b      	str	r3, [r7, #36]	@ 0x24
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	461a      	mov	r2, r3
 8009832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009834:	623b      	str	r3, [r7, #32]
 8009836:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	69f9      	ldr	r1, [r7, #28]
 800983a:	6a3a      	ldr	r2, [r7, #32]
 800983c:	e841 2300 	strex	r3, r2, [r1]
 8009840:	61bb      	str	r3, [r7, #24]
   return(result);
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e6      	bne.n	8009816 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009848:	88fb      	ldrh	r3, [r7, #6]
 800984a:	461a      	mov	r2, r3
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f001 fb06 	bl	800ae60 <UART_Start_Receive_IT>
 8009854:	4603      	mov	r3, r0
 8009856:	e000      	b.n	800985a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009858:	2302      	movs	r3, #2
  }
}
 800985a:	4618      	mov	r0, r3
 800985c:	3728      	adds	r7, #40	@ 0x28
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	58000c00 	.word	0x58000c00

08009868 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b0ba      	sub	sp, #232	@ 0xe8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800988e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009892:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009896:	4013      	ands	r3, r2
 8009898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800989c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d11b      	bne.n	80098dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d015      	beq.n	80098dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098b4:	f003 0320 	and.w	r3, r3, #32
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d105      	bne.n	80098c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d009      	beq.n	80098dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8377 	beq.w	8009fc0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
      }
      return;
 80098da:	e371      	b.n	8009fc0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8123 	beq.w	8009b2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80098ea:	4b8d      	ldr	r3, [pc, #564]	@ (8009b20 <HAL_UART_IRQHandler+0x2b8>)
 80098ec:	4013      	ands	r3, r2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098f6:	4b8b      	ldr	r3, [pc, #556]	@ (8009b24 <HAL_UART_IRQHandler+0x2bc>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 8116 	beq.w	8009b2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d011      	beq.n	8009930 <HAL_UART_IRQHandler+0xc8>
 800990c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2201      	movs	r2, #1
 800991e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009926:	f043 0201 	orr.w	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d011      	beq.n	8009960 <HAL_UART_IRQHandler+0xf8>
 800993c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2202      	movs	r2, #2
 800994e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009956:	f043 0204 	orr.w	r2, r3, #4
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d011      	beq.n	8009990 <HAL_UART_IRQHandler+0x128>
 800996c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2204      	movs	r2, #4
 800997e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009986:	f043 0202 	orr.w	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b00      	cmp	r3, #0
 800999a:	d017      	beq.n	80099cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d105      	bne.n	80099b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80099ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009b20 <HAL_UART_IRQHandler+0x2b8>)
 80099ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2208      	movs	r2, #8
 80099ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c2:	f043 0208 	orr.w	r2, r3, #8
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d012      	beq.n	80099fe <HAL_UART_IRQHandler+0x196>
 80099d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00c      	beq.n	80099fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f4:	f043 0220 	orr.w	r2, r3, #32
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 82dd 	beq.w	8009fc4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a1a:	f003 0320 	and.w	r3, r3, #32
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d105      	bne.n	8009a2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a52:	2b40      	cmp	r3, #64	@ 0x40
 8009a54:	d005      	beq.n	8009a62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d054      	beq.n	8009b0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 fb1e 	bl	800b0a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a72:	2b40      	cmp	r3, #64	@ 0x40
 8009a74:	d146      	bne.n	8009b04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1d9      	bne.n	8009a76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d017      	beq.n	8009afc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad2:	4a15      	ldr	r2, [pc, #84]	@ (8009b28 <HAL_UART_IRQHandler+0x2c0>)
 8009ad4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7f9 f97b 	bl	8002dd8 <HAL_DMA_Abort_IT>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d019      	beq.n	8009b1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009af6:	4610      	mov	r0, r2
 8009af8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009afa:	e00f      	b.n	8009b1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fa77 	bl	8009ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b02:	e00b      	b.n	8009b1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fa73 	bl	8009ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b0a:	e007      	b.n	8009b1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa6f 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009b1a:	e253      	b.n	8009fc4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1c:	bf00      	nop
    return;
 8009b1e:	e251      	b.n	8009fc4 <HAL_UART_IRQHandler+0x75c>
 8009b20:	10000001 	.word	0x10000001
 8009b24:	04000120 	.word	0x04000120
 8009b28:	0800b171 	.word	0x0800b171

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	f040 81e7 	bne.w	8009f04 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b3a:	f003 0310 	and.w	r3, r3, #16
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 81e0 	beq.w	8009f04 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b48:	f003 0310 	and.w	r3, r3, #16
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 81d9 	beq.w	8009f04 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2210      	movs	r2, #16
 8009b58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b64:	2b40      	cmp	r3, #64	@ 0x40
 8009b66:	f040 8151 	bne.w	8009e0c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a96      	ldr	r2, [pc, #600]	@ (8009dcc <HAL_UART_IRQHandler+0x564>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d068      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a93      	ldr	r2, [pc, #588]	@ (8009dd0 <HAL_UART_IRQHandler+0x568>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d061      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a91      	ldr	r2, [pc, #580]	@ (8009dd4 <HAL_UART_IRQHandler+0x56c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d05a      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a8e      	ldr	r2, [pc, #568]	@ (8009dd8 <HAL_UART_IRQHandler+0x570>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d053      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a8c      	ldr	r2, [pc, #560]	@ (8009ddc <HAL_UART_IRQHandler+0x574>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d04c      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a89      	ldr	r2, [pc, #548]	@ (8009de0 <HAL_UART_IRQHandler+0x578>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d045      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a87      	ldr	r2, [pc, #540]	@ (8009de4 <HAL_UART_IRQHandler+0x57c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d03e      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a84      	ldr	r2, [pc, #528]	@ (8009de8 <HAL_UART_IRQHandler+0x580>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d037      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a82      	ldr	r2, [pc, #520]	@ (8009dec <HAL_UART_IRQHandler+0x584>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d030      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a7f      	ldr	r2, [pc, #508]	@ (8009df0 <HAL_UART_IRQHandler+0x588>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d029      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a7d      	ldr	r2, [pc, #500]	@ (8009df4 <HAL_UART_IRQHandler+0x58c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d022      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a7a      	ldr	r2, [pc, #488]	@ (8009df8 <HAL_UART_IRQHandler+0x590>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d01b      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a78      	ldr	r2, [pc, #480]	@ (8009dfc <HAL_UART_IRQHandler+0x594>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d014      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a75      	ldr	r2, [pc, #468]	@ (8009e00 <HAL_UART_IRQHandler+0x598>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00d      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a73      	ldr	r2, [pc, #460]	@ (8009e04 <HAL_UART_IRQHandler+0x59c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d006      	beq.n	8009c4a <HAL_UART_IRQHandler+0x3e2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a70      	ldr	r2, [pc, #448]	@ (8009e08 <HAL_UART_IRQHandler+0x5a0>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d106      	bne.n	8009c58 <HAL_UART_IRQHandler+0x3f0>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	e005      	b.n	8009c64 <HAL_UART_IRQHandler+0x3fc>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 81ab 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	f080 81a3 	bcs.w	8009fc8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c98:	f000 8087 	beq.w	8009daa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009cca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009cd6:	e841 2300 	strex	r3, r2, [r1]
 8009cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1da      	bne.n	8009c9c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cf8:	f023 0301 	bic.w	r3, r3, #1
 8009cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3308      	adds	r3, #8
 8009d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e1      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3308      	adds	r3, #8
 8009d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e3      	bne.n	8009d22 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d78:	f023 0310 	bic.w	r3, r3, #16
 8009d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e4      	bne.n	8009d68 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f8 fcf9 	bl	800279c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2202      	movs	r2, #2
 8009dae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f91d 	bl	800a004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009dca:	e0fd      	b.n	8009fc8 <HAL_UART_IRQHandler+0x760>
 8009dcc:	40020010 	.word	0x40020010
 8009dd0:	40020028 	.word	0x40020028
 8009dd4:	40020040 	.word	0x40020040
 8009dd8:	40020058 	.word	0x40020058
 8009ddc:	40020070 	.word	0x40020070
 8009de0:	40020088 	.word	0x40020088
 8009de4:	400200a0 	.word	0x400200a0
 8009de8:	400200b8 	.word	0x400200b8
 8009dec:	40020410 	.word	0x40020410
 8009df0:	40020428 	.word	0x40020428
 8009df4:	40020440 	.word	0x40020440
 8009df8:	40020458 	.word	0x40020458
 8009dfc:	40020470 	.word	0x40020470
 8009e00:	40020488 	.word	0x40020488
 8009e04:	400204a0 	.word	0x400204a0
 8009e08:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 80cf 	beq.w	8009fcc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 80ca 	beq.w	8009fcc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e5c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e4      	bne.n	8009e38 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e7e:	6a3a      	ldr	r2, [r7, #32]
 8009e80:	4b55      	ldr	r3, [pc, #340]	@ (8009fd8 <HAL_UART_IRQHandler+0x770>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e92:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e3      	bne.n	8009e6e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	e853 3f00 	ldrex	r3, [r3]
 8009ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0310 	bic.w	r3, r3, #16
 8009ece:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	69b9      	ldr	r1, [r7, #24]
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e4      	bne.n	8009eba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ef6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f881 	bl	800a004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f02:	e063      	b.n	8009fcc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00e      	beq.n	8009f2e <HAL_UART_IRQHandler+0x6c6>
 8009f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d008      	beq.n	8009f2e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fe80 	bl	800bc2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f2c:	e051      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d014      	beq.n	8009f64 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d105      	bne.n	8009f52 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d03a      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	4798      	blx	r3
    }
    return;
 8009f62:	e035      	b.n	8009fd0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <HAL_UART_IRQHandler+0x71c>
 8009f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f90d 	bl	800b19c <UART_EndTransmit_IT>
    return;
 8009f82:	e026      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d009      	beq.n	8009fa4 <HAL_UART_IRQHandler+0x73c>
 8009f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 fe59 	bl	800bc54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fa2:	e016      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d010      	beq.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
 8009fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da0c      	bge.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 fe41 	bl	800bc40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fbe:	e008      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8009fc0:	bf00      	nop
 8009fc2:	e006      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
    return;
 8009fc4:	bf00      	nop
 8009fc6:	e004      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8009fc8:	bf00      	nop
 8009fca:	e002      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8009fcc:	bf00      	nop
 8009fce:	e000      	b.n	8009fd2 <HAL_UART_IRQHandler+0x76a>
    return;
 8009fd0:	bf00      	nop
  }
}
 8009fd2:	37e8      	adds	r7, #232	@ 0xe8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	effffffe 	.word	0xeffffffe

08009fdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a01c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a020:	b092      	sub	sp, #72	@ 0x48
 800a022:	af00      	add	r7, sp, #0
 800a024:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	431a      	orrs	r2, r3
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	4313      	orrs	r3, r2
 800a042:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4bbe      	ldr	r3, [pc, #760]	@ (800a344 <UART_SetConfig+0x328>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a054:	430b      	orrs	r3, r1
 800a056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4ab3      	ldr	r2, [pc, #716]	@ (800a348 <UART_SetConfig+0x32c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a084:	4313      	orrs	r3, r2
 800a086:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	4baf      	ldr	r3, [pc, #700]	@ (800a34c <UART_SetConfig+0x330>)
 800a090:	4013      	ands	r3, r2
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a098:	430b      	orrs	r3, r1
 800a09a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a2:	f023 010f 	bic.w	r1, r3, #15
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4aa6      	ldr	r2, [pc, #664]	@ (800a350 <UART_SetConfig+0x334>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d177      	bne.n	800a1ac <UART_SetConfig+0x190>
 800a0bc:	4ba5      	ldr	r3, [pc, #660]	@ (800a354 <UART_SetConfig+0x338>)
 800a0be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0c4:	2b28      	cmp	r3, #40	@ 0x28
 800a0c6:	d86d      	bhi.n	800a1a4 <UART_SetConfig+0x188>
 800a0c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d0 <UART_SetConfig+0xb4>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a175 	.word	0x0800a175
 800a0d4:	0800a1a5 	.word	0x0800a1a5
 800a0d8:	0800a1a5 	.word	0x0800a1a5
 800a0dc:	0800a1a5 	.word	0x0800a1a5
 800a0e0:	0800a1a5 	.word	0x0800a1a5
 800a0e4:	0800a1a5 	.word	0x0800a1a5
 800a0e8:	0800a1a5 	.word	0x0800a1a5
 800a0ec:	0800a1a5 	.word	0x0800a1a5
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a1a5 	.word	0x0800a1a5
 800a0f8:	0800a1a5 	.word	0x0800a1a5
 800a0fc:	0800a1a5 	.word	0x0800a1a5
 800a100:	0800a1a5 	.word	0x0800a1a5
 800a104:	0800a1a5 	.word	0x0800a1a5
 800a108:	0800a1a5 	.word	0x0800a1a5
 800a10c:	0800a1a5 	.word	0x0800a1a5
 800a110:	0800a185 	.word	0x0800a185
 800a114:	0800a1a5 	.word	0x0800a1a5
 800a118:	0800a1a5 	.word	0x0800a1a5
 800a11c:	0800a1a5 	.word	0x0800a1a5
 800a120:	0800a1a5 	.word	0x0800a1a5
 800a124:	0800a1a5 	.word	0x0800a1a5
 800a128:	0800a1a5 	.word	0x0800a1a5
 800a12c:	0800a1a5 	.word	0x0800a1a5
 800a130:	0800a18d 	.word	0x0800a18d
 800a134:	0800a1a5 	.word	0x0800a1a5
 800a138:	0800a1a5 	.word	0x0800a1a5
 800a13c:	0800a1a5 	.word	0x0800a1a5
 800a140:	0800a1a5 	.word	0x0800a1a5
 800a144:	0800a1a5 	.word	0x0800a1a5
 800a148:	0800a1a5 	.word	0x0800a1a5
 800a14c:	0800a1a5 	.word	0x0800a1a5
 800a150:	0800a195 	.word	0x0800a195
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a1a5 	.word	0x0800a1a5
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a1a5 	.word	0x0800a1a5
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a19d 	.word	0x0800a19d
 800a174:	2301      	movs	r3, #1
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e222      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a17c:	2304      	movs	r3, #4
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e21e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a184:	2308      	movs	r3, #8
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18a:	e21a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a18c:	2310      	movs	r3, #16
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e216      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a194:	2320      	movs	r3, #32
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e212      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a19c:	2340      	movs	r3, #64	@ 0x40
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e20e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1a4:	2380      	movs	r3, #128	@ 0x80
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e20a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a69      	ldr	r2, [pc, #420]	@ (800a358 <UART_SetConfig+0x33c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d130      	bne.n	800a218 <UART_SetConfig+0x1fc>
 800a1b6:	4b67      	ldr	r3, [pc, #412]	@ (800a354 <UART_SetConfig+0x338>)
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d826      	bhi.n	800a210 <UART_SetConfig+0x1f4>
 800a1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <UART_SetConfig+0x1ac>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a1e1 	.word	0x0800a1e1
 800a1cc:	0800a1e9 	.word	0x0800a1e9
 800a1d0:	0800a1f1 	.word	0x0800a1f1
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a201 	.word	0x0800a201
 800a1dc:	0800a209 	.word	0x0800a209
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e1ec      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e1e8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f6:	e1e4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fe:	e1e0      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a200:	2320      	movs	r3, #32
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a206:	e1dc      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a208:	2340      	movs	r3, #64	@ 0x40
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e1d8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a210:	2380      	movs	r3, #128	@ 0x80
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e1d4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a4f      	ldr	r2, [pc, #316]	@ (800a35c <UART_SetConfig+0x340>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d130      	bne.n	800a284 <UART_SetConfig+0x268>
 800a222:	4b4c      	ldr	r3, [pc, #304]	@ (800a354 <UART_SetConfig+0x338>)
 800a224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	d826      	bhi.n	800a27c <UART_SetConfig+0x260>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <UART_SetConfig+0x218>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a24d 	.word	0x0800a24d
 800a238:	0800a255 	.word	0x0800a255
 800a23c:	0800a25d 	.word	0x0800a25d
 800a240:	0800a265 	.word	0x0800a265
 800a244:	0800a26d 	.word	0x0800a26d
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e1b6      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a254:	2304      	movs	r3, #4
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e1b2      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a25c:	2308      	movs	r3, #8
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a262:	e1ae      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a264:	2310      	movs	r3, #16
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e1aa      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a26c:	2320      	movs	r3, #32
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e1a6      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a274:	2340      	movs	r3, #64	@ 0x40
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e1a2      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a27c:	2380      	movs	r3, #128	@ 0x80
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e19e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a35      	ldr	r2, [pc, #212]	@ (800a360 <UART_SetConfig+0x344>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d130      	bne.n	800a2f0 <UART_SetConfig+0x2d4>
 800a28e:	4b31      	ldr	r3, [pc, #196]	@ (800a354 <UART_SetConfig+0x338>)
 800a290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b05      	cmp	r3, #5
 800a298:	d826      	bhi.n	800a2e8 <UART_SetConfig+0x2cc>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x284>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2c9 	.word	0x0800a2c9
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e180      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e17c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e178      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e174      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2de:	e170      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2e0:	2340      	movs	r3, #64	@ 0x40
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e16c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2e8:	2380      	movs	r3, #128	@ 0x80
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e168      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a364 <UART_SetConfig+0x348>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d142      	bne.n	800a380 <UART_SetConfig+0x364>
 800a2fa:	4b16      	ldr	r3, [pc, #88]	@ (800a354 <UART_SetConfig+0x338>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	2b05      	cmp	r3, #5
 800a304:	d838      	bhi.n	800a378 <UART_SetConfig+0x35c>
 800a306:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <UART_SetConfig+0x2f0>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a325 	.word	0x0800a325
 800a310:	0800a32d 	.word	0x0800a32d
 800a314:	0800a335 	.word	0x0800a335
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a369 	.word	0x0800a369
 800a320:	0800a371 	.word	0x0800a371
 800a324:	2300      	movs	r3, #0
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e14a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a32c:	2304      	movs	r3, #4
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e146      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a334:	2308      	movs	r3, #8
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e142      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a33c:	2310      	movs	r3, #16
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e13e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a344:	cfff69f3 	.word	0xcfff69f3
 800a348:	58000c00 	.word	0x58000c00
 800a34c:	11fff4ff 	.word	0x11fff4ff
 800a350:	40011000 	.word	0x40011000
 800a354:	58024400 	.word	0x58024400
 800a358:	40004400 	.word	0x40004400
 800a35c:	40004800 	.word	0x40004800
 800a360:	40004c00 	.word	0x40004c00
 800a364:	40005000 	.word	0x40005000
 800a368:	2320      	movs	r3, #32
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e128      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a370:	2340      	movs	r3, #64	@ 0x40
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e124      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a378:	2380      	movs	r3, #128	@ 0x80
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e120      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4acb      	ldr	r2, [pc, #812]	@ (800a6b4 <UART_SetConfig+0x698>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d176      	bne.n	800a478 <UART_SetConfig+0x45c>
 800a38a:	4bcb      	ldr	r3, [pc, #812]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a392:	2b28      	cmp	r3, #40	@ 0x28
 800a394:	d86c      	bhi.n	800a470 <UART_SetConfig+0x454>
 800a396:	a201      	add	r2, pc, #4	@ (adr r2, 800a39c <UART_SetConfig+0x380>)
 800a398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39c:	0800a441 	.word	0x0800a441
 800a3a0:	0800a471 	.word	0x0800a471
 800a3a4:	0800a471 	.word	0x0800a471
 800a3a8:	0800a471 	.word	0x0800a471
 800a3ac:	0800a471 	.word	0x0800a471
 800a3b0:	0800a471 	.word	0x0800a471
 800a3b4:	0800a471 	.word	0x0800a471
 800a3b8:	0800a471 	.word	0x0800a471
 800a3bc:	0800a449 	.word	0x0800a449
 800a3c0:	0800a471 	.word	0x0800a471
 800a3c4:	0800a471 	.word	0x0800a471
 800a3c8:	0800a471 	.word	0x0800a471
 800a3cc:	0800a471 	.word	0x0800a471
 800a3d0:	0800a471 	.word	0x0800a471
 800a3d4:	0800a471 	.word	0x0800a471
 800a3d8:	0800a471 	.word	0x0800a471
 800a3dc:	0800a451 	.word	0x0800a451
 800a3e0:	0800a471 	.word	0x0800a471
 800a3e4:	0800a471 	.word	0x0800a471
 800a3e8:	0800a471 	.word	0x0800a471
 800a3ec:	0800a471 	.word	0x0800a471
 800a3f0:	0800a471 	.word	0x0800a471
 800a3f4:	0800a471 	.word	0x0800a471
 800a3f8:	0800a471 	.word	0x0800a471
 800a3fc:	0800a459 	.word	0x0800a459
 800a400:	0800a471 	.word	0x0800a471
 800a404:	0800a471 	.word	0x0800a471
 800a408:	0800a471 	.word	0x0800a471
 800a40c:	0800a471 	.word	0x0800a471
 800a410:	0800a471 	.word	0x0800a471
 800a414:	0800a471 	.word	0x0800a471
 800a418:	0800a471 	.word	0x0800a471
 800a41c:	0800a461 	.word	0x0800a461
 800a420:	0800a471 	.word	0x0800a471
 800a424:	0800a471 	.word	0x0800a471
 800a428:	0800a471 	.word	0x0800a471
 800a42c:	0800a471 	.word	0x0800a471
 800a430:	0800a471 	.word	0x0800a471
 800a434:	0800a471 	.word	0x0800a471
 800a438:	0800a471 	.word	0x0800a471
 800a43c:	0800a469 	.word	0x0800a469
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a446:	e0bc      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44e:	e0b8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a456:	e0b4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45e:	e0b0      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a460:	2320      	movs	r3, #32
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e0ac      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a468:	2340      	movs	r3, #64	@ 0x40
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e0a8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a470:	2380      	movs	r3, #128	@ 0x80
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e0a4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a8f      	ldr	r2, [pc, #572]	@ (800a6bc <UART_SetConfig+0x6a0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d130      	bne.n	800a4e4 <UART_SetConfig+0x4c8>
 800a482:	4b8d      	ldr	r3, [pc, #564]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d826      	bhi.n	800a4dc <UART_SetConfig+0x4c0>
 800a48e:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <UART_SetConfig+0x478>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4bd 	.word	0x0800a4bd
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e086      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e082      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e07e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e07a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e076      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4d4:	2340      	movs	r3, #64	@ 0x40
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e072      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4dc:	2380      	movs	r3, #128	@ 0x80
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e06e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a75      	ldr	r2, [pc, #468]	@ (800a6c0 <UART_SetConfig+0x6a4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d130      	bne.n	800a550 <UART_SetConfig+0x534>
 800a4ee:	4b72      	ldr	r3, [pc, #456]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b05      	cmp	r3, #5
 800a4f8:	d826      	bhi.n	800a548 <UART_SetConfig+0x52c>
 800a4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a500 <UART_SetConfig+0x4e4>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a519 	.word	0x0800a519
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	0800a531 	.word	0x0800a531
 800a510:	0800a539 	.word	0x0800a539
 800a514:	0800a541 	.word	0x0800a541
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e050      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a520:	2304      	movs	r3, #4
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e04c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e048      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e044      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a538:	2320      	movs	r3, #32
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53e:	e040      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a540:	2340      	movs	r3, #64	@ 0x40
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e03c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a548:	2380      	movs	r3, #128	@ 0x80
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e038      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a5b      	ldr	r2, [pc, #364]	@ (800a6c4 <UART_SetConfig+0x6a8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d130      	bne.n	800a5bc <UART_SetConfig+0x5a0>
 800a55a:	4b57      	ldr	r3, [pc, #348]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	2b05      	cmp	r3, #5
 800a564:	d826      	bhi.n	800a5b4 <UART_SetConfig+0x598>
 800a566:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <UART_SetConfig+0x550>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a585 	.word	0x0800a585
 800a570:	0800a58d 	.word	0x0800a58d
 800a574:	0800a595 	.word	0x0800a595
 800a578:	0800a59d 	.word	0x0800a59d
 800a57c:	0800a5a5 	.word	0x0800a5a5
 800a580:	0800a5ad 	.word	0x0800a5ad
 800a584:	2302      	movs	r3, #2
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e01a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a58c:	2304      	movs	r3, #4
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e016      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a594:	2308      	movs	r3, #8
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e012      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a59c:	2310      	movs	r3, #16
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a2:	e00e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e00a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5ac:	2340      	movs	r3, #64	@ 0x40
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e006      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5b4:	2380      	movs	r3, #128	@ 0x80
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e002      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5bc:	2380      	movs	r3, #128	@ 0x80
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a3f      	ldr	r2, [pc, #252]	@ (800a6c4 <UART_SetConfig+0x6a8>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	f040 80f8 	bne.w	800a7be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	dc46      	bgt.n	800a664 <UART_SetConfig+0x648>
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	f2c0 8082 	blt.w	800a6e0 <UART_SetConfig+0x6c4>
 800a5dc:	3b02      	subs	r3, #2
 800a5de:	2b1e      	cmp	r3, #30
 800a5e0:	d87e      	bhi.n	800a6e0 <UART_SetConfig+0x6c4>
 800a5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e8 <UART_SetConfig+0x5cc>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a66b 	.word	0x0800a66b
 800a5ec:	0800a6e1 	.word	0x0800a6e1
 800a5f0:	0800a673 	.word	0x0800a673
 800a5f4:	0800a6e1 	.word	0x0800a6e1
 800a5f8:	0800a6e1 	.word	0x0800a6e1
 800a5fc:	0800a6e1 	.word	0x0800a6e1
 800a600:	0800a683 	.word	0x0800a683
 800a604:	0800a6e1 	.word	0x0800a6e1
 800a608:	0800a6e1 	.word	0x0800a6e1
 800a60c:	0800a6e1 	.word	0x0800a6e1
 800a610:	0800a6e1 	.word	0x0800a6e1
 800a614:	0800a6e1 	.word	0x0800a6e1
 800a618:	0800a6e1 	.word	0x0800a6e1
 800a61c:	0800a6e1 	.word	0x0800a6e1
 800a620:	0800a693 	.word	0x0800a693
 800a624:	0800a6e1 	.word	0x0800a6e1
 800a628:	0800a6e1 	.word	0x0800a6e1
 800a62c:	0800a6e1 	.word	0x0800a6e1
 800a630:	0800a6e1 	.word	0x0800a6e1
 800a634:	0800a6e1 	.word	0x0800a6e1
 800a638:	0800a6e1 	.word	0x0800a6e1
 800a63c:	0800a6e1 	.word	0x0800a6e1
 800a640:	0800a6e1 	.word	0x0800a6e1
 800a644:	0800a6e1 	.word	0x0800a6e1
 800a648:	0800a6e1 	.word	0x0800a6e1
 800a64c:	0800a6e1 	.word	0x0800a6e1
 800a650:	0800a6e1 	.word	0x0800a6e1
 800a654:	0800a6e1 	.word	0x0800a6e1
 800a658:	0800a6e1 	.word	0x0800a6e1
 800a65c:	0800a6e1 	.word	0x0800a6e1
 800a660:	0800a6d3 	.word	0x0800a6d3
 800a664:	2b40      	cmp	r3, #64	@ 0x40
 800a666:	d037      	beq.n	800a6d8 <UART_SetConfig+0x6bc>
 800a668:	e03a      	b.n	800a6e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a66a:	f7fc ff19 	bl	80074a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a66e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a670:	e03c      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a676:	4618      	mov	r0, r3
 800a678:	f7fc ff28 	bl	80074cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a680:	e034      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a682:	f107 0318 	add.w	r3, r7, #24
 800a686:	4618      	mov	r0, r3
 800a688:	f7fd f874 	bl	8007774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a690:	e02c      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d016      	beq.n	800a6cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a69e:	4b06      	ldr	r3, [pc, #24]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	08db      	lsrs	r3, r3, #3
 800a6a4:	f003 0303 	and.w	r3, r3, #3
 800a6a8:	4a07      	ldr	r2, [pc, #28]	@ (800a6c8 <UART_SetConfig+0x6ac>)
 800a6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6b0:	e01c      	b.n	800a6ec <UART_SetConfig+0x6d0>
 800a6b2:	bf00      	nop
 800a6b4:	40011400 	.word	0x40011400
 800a6b8:	58024400 	.word	0x58024400
 800a6bc:	40007800 	.word	0x40007800
 800a6c0:	40007c00 	.word	0x40007c00
 800a6c4:	58000c00 	.word	0x58000c00
 800a6c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a6cc:	4b9d      	ldr	r3, [pc, #628]	@ (800a944 <UART_SetConfig+0x928>)
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d0:	e00c      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6d2:	4b9d      	ldr	r3, [pc, #628]	@ (800a948 <UART_SetConfig+0x92c>)
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d6:	e009      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6de:	e005      	b.n	800a6ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a6ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 81de 	beq.w	800aab0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f8:	4a94      	ldr	r2, [pc, #592]	@ (800a94c <UART_SetConfig+0x930>)
 800a6fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a702:	fbb3 f3f2 	udiv	r3, r3, r2
 800a706:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a714:	429a      	cmp	r2, r3
 800a716:	d305      	bcc.n	800a724 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a720:	429a      	cmp	r2, r3
 800a722:	d903      	bls.n	800a72c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a72a:	e1c1      	b.n	800aab0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72e:	2200      	movs	r2, #0
 800a730:	60bb      	str	r3, [r7, #8]
 800a732:	60fa      	str	r2, [r7, #12]
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	4a84      	ldr	r2, [pc, #528]	@ (800a94c <UART_SetConfig+0x930>)
 800a73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	2200      	movs	r2, #0
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	607a      	str	r2, [r7, #4]
 800a746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a74e:	f7f5 ffdb 	bl	8000708 <__aeabi_uldivmod>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4610      	mov	r0, r2
 800a758:	4619      	mov	r1, r3
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	f04f 0300 	mov.w	r3, #0
 800a762:	020b      	lsls	r3, r1, #8
 800a764:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a768:	0202      	lsls	r2, r0, #8
 800a76a:	6979      	ldr	r1, [r7, #20]
 800a76c:	6849      	ldr	r1, [r1, #4]
 800a76e:	0849      	lsrs	r1, r1, #1
 800a770:	2000      	movs	r0, #0
 800a772:	460c      	mov	r4, r1
 800a774:	4605      	mov	r5, r0
 800a776:	eb12 0804 	adds.w	r8, r2, r4
 800a77a:	eb43 0905 	adc.w	r9, r3, r5
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	469a      	mov	sl, r3
 800a786:	4693      	mov	fp, r2
 800a788:	4652      	mov	r2, sl
 800a78a:	465b      	mov	r3, fp
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f5 ffba 	bl	8000708 <__aeabi_uldivmod>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4613      	mov	r3, r2
 800a79a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7a2:	d308      	bcc.n	800a7b6 <UART_SetConfig+0x79a>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7aa:	d204      	bcs.n	800a7b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7b2:	60da      	str	r2, [r3, #12]
 800a7b4:	e17c      	b.n	800aab0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7bc:	e178      	b.n	800aab0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7c6:	f040 80c5 	bne.w	800a954 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a7ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	dc48      	bgt.n	800a864 <UART_SetConfig+0x848>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	db7b      	blt.n	800a8ce <UART_SetConfig+0x8b2>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d879      	bhi.n	800a8ce <UART_SetConfig+0x8b2>
 800a7da:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <UART_SetConfig+0x7c4>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a86b 	.word	0x0800a86b
 800a7e4:	0800a873 	.word	0x0800a873
 800a7e8:	0800a8cf 	.word	0x0800a8cf
 800a7ec:	0800a8cf 	.word	0x0800a8cf
 800a7f0:	0800a87b 	.word	0x0800a87b
 800a7f4:	0800a8cf 	.word	0x0800a8cf
 800a7f8:	0800a8cf 	.word	0x0800a8cf
 800a7fc:	0800a8cf 	.word	0x0800a8cf
 800a800:	0800a88b 	.word	0x0800a88b
 800a804:	0800a8cf 	.word	0x0800a8cf
 800a808:	0800a8cf 	.word	0x0800a8cf
 800a80c:	0800a8cf 	.word	0x0800a8cf
 800a810:	0800a8cf 	.word	0x0800a8cf
 800a814:	0800a8cf 	.word	0x0800a8cf
 800a818:	0800a8cf 	.word	0x0800a8cf
 800a81c:	0800a8cf 	.word	0x0800a8cf
 800a820:	0800a89b 	.word	0x0800a89b
 800a824:	0800a8cf 	.word	0x0800a8cf
 800a828:	0800a8cf 	.word	0x0800a8cf
 800a82c:	0800a8cf 	.word	0x0800a8cf
 800a830:	0800a8cf 	.word	0x0800a8cf
 800a834:	0800a8cf 	.word	0x0800a8cf
 800a838:	0800a8cf 	.word	0x0800a8cf
 800a83c:	0800a8cf 	.word	0x0800a8cf
 800a840:	0800a8cf 	.word	0x0800a8cf
 800a844:	0800a8cf 	.word	0x0800a8cf
 800a848:	0800a8cf 	.word	0x0800a8cf
 800a84c:	0800a8cf 	.word	0x0800a8cf
 800a850:	0800a8cf 	.word	0x0800a8cf
 800a854:	0800a8cf 	.word	0x0800a8cf
 800a858:	0800a8cf 	.word	0x0800a8cf
 800a85c:	0800a8cf 	.word	0x0800a8cf
 800a860:	0800a8c1 	.word	0x0800a8c1
 800a864:	2b40      	cmp	r3, #64	@ 0x40
 800a866:	d02e      	beq.n	800a8c6 <UART_SetConfig+0x8aa>
 800a868:	e031      	b.n	800a8ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a86a:	f7fb fbe3 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 800a86e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a870:	e033      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a872:	f7fb fbf5 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 800a876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a878:	e02f      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a87a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fc fe24 	bl	80074cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a888:	e027      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a88a:	f107 0318 	add.w	r3, r7, #24
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fc ff70 	bl	8007774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a898:	e01f      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a89a:	4b2d      	ldr	r3, [pc, #180]	@ (800a950 <UART_SetConfig+0x934>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d009      	beq.n	800a8ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a950 <UART_SetConfig+0x934>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	08db      	lsrs	r3, r3, #3
 800a8ac:	f003 0303 	and.w	r3, r3, #3
 800a8b0:	4a24      	ldr	r2, [pc, #144]	@ (800a944 <UART_SetConfig+0x928>)
 800a8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8b8:	e00f      	b.n	800a8da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a8ba:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <UART_SetConfig+0x928>)
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8be:	e00c      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8c0:	4b21      	ldr	r3, [pc, #132]	@ (800a948 <UART_SetConfig+0x92c>)
 800a8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c4:	e009      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e005      	b.n	800a8da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 80e7 	beq.w	800aab0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e6:	4a19      	ldr	r2, [pc, #100]	@ (800a94c <UART_SetConfig+0x930>)
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f4:	005a      	lsls	r2, r3, #1
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	441a      	add	r2, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	fbb2 f3f3 	udiv	r3, r2, r3
 800a906:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	2b0f      	cmp	r3, #15
 800a90c:	d916      	bls.n	800a93c <UART_SetConfig+0x920>
 800a90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a914:	d212      	bcs.n	800a93c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f023 030f 	bic.w	r3, r3, #15
 800a91e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	b29b      	uxth	r3, r3
 800a926:	f003 0307 	and.w	r3, r3, #7
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a92e:	4313      	orrs	r3, r2
 800a930:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a938:	60da      	str	r2, [r3, #12]
 800a93a:	e0b9      	b.n	800aab0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a942:	e0b5      	b.n	800aab0 <UART_SetConfig+0xa94>
 800a944:	03d09000 	.word	0x03d09000
 800a948:	003d0900 	.word	0x003d0900
 800a94c:	080104bc 	.word	0x080104bc
 800a950:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a954:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a958:	2b20      	cmp	r3, #32
 800a95a:	dc49      	bgt.n	800a9f0 <UART_SetConfig+0x9d4>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	db7c      	blt.n	800aa5a <UART_SetConfig+0xa3e>
 800a960:	2b20      	cmp	r3, #32
 800a962:	d87a      	bhi.n	800aa5a <UART_SetConfig+0xa3e>
 800a964:	a201      	add	r2, pc, #4	@ (adr r2, 800a96c <UART_SetConfig+0x950>)
 800a966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96a:	bf00      	nop
 800a96c:	0800a9f7 	.word	0x0800a9f7
 800a970:	0800a9ff 	.word	0x0800a9ff
 800a974:	0800aa5b 	.word	0x0800aa5b
 800a978:	0800aa5b 	.word	0x0800aa5b
 800a97c:	0800aa07 	.word	0x0800aa07
 800a980:	0800aa5b 	.word	0x0800aa5b
 800a984:	0800aa5b 	.word	0x0800aa5b
 800a988:	0800aa5b 	.word	0x0800aa5b
 800a98c:	0800aa17 	.word	0x0800aa17
 800a990:	0800aa5b 	.word	0x0800aa5b
 800a994:	0800aa5b 	.word	0x0800aa5b
 800a998:	0800aa5b 	.word	0x0800aa5b
 800a99c:	0800aa5b 	.word	0x0800aa5b
 800a9a0:	0800aa5b 	.word	0x0800aa5b
 800a9a4:	0800aa5b 	.word	0x0800aa5b
 800a9a8:	0800aa5b 	.word	0x0800aa5b
 800a9ac:	0800aa27 	.word	0x0800aa27
 800a9b0:	0800aa5b 	.word	0x0800aa5b
 800a9b4:	0800aa5b 	.word	0x0800aa5b
 800a9b8:	0800aa5b 	.word	0x0800aa5b
 800a9bc:	0800aa5b 	.word	0x0800aa5b
 800a9c0:	0800aa5b 	.word	0x0800aa5b
 800a9c4:	0800aa5b 	.word	0x0800aa5b
 800a9c8:	0800aa5b 	.word	0x0800aa5b
 800a9cc:	0800aa5b 	.word	0x0800aa5b
 800a9d0:	0800aa5b 	.word	0x0800aa5b
 800a9d4:	0800aa5b 	.word	0x0800aa5b
 800a9d8:	0800aa5b 	.word	0x0800aa5b
 800a9dc:	0800aa5b 	.word	0x0800aa5b
 800a9e0:	0800aa5b 	.word	0x0800aa5b
 800a9e4:	0800aa5b 	.word	0x0800aa5b
 800a9e8:	0800aa5b 	.word	0x0800aa5b
 800a9ec:	0800aa4d 	.word	0x0800aa4d
 800a9f0:	2b40      	cmp	r3, #64	@ 0x40
 800a9f2:	d02e      	beq.n	800aa52 <UART_SetConfig+0xa36>
 800a9f4:	e031      	b.n	800aa5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9f6:	f7fb fb1d 	bl	8006034 <HAL_RCC_GetPCLK1Freq>
 800a9fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9fc:	e033      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9fe:	f7fb fb2f 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 800aa02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa04:	e02f      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fc fd5e 	bl	80074cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa14:	e027      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa16:	f107 0318 	add.w	r3, r7, #24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fc feaa 	bl	8007774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa24:	e01f      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa26:	4b2d      	ldr	r3, [pc, #180]	@ (800aadc <UART_SetConfig+0xac0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0320 	and.w	r3, r3, #32
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa32:	4b2a      	ldr	r3, [pc, #168]	@ (800aadc <UART_SetConfig+0xac0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	08db      	lsrs	r3, r3, #3
 800aa38:	f003 0303 	and.w	r3, r3, #3
 800aa3c:	4a28      	ldr	r2, [pc, #160]	@ (800aae0 <UART_SetConfig+0xac4>)
 800aa3e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa44:	e00f      	b.n	800aa66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa46:	4b26      	ldr	r3, [pc, #152]	@ (800aae0 <UART_SetConfig+0xac4>)
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa4a:	e00c      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa4c:	4b25      	ldr	r3, [pc, #148]	@ (800aae4 <UART_SetConfig+0xac8>)
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa50:	e009      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa58:	e005      	b.n	800aa66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa64:	bf00      	nop
    }

    if (pclk != 0U)
 800aa66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d021      	beq.n	800aab0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa70:	4a1d      	ldr	r2, [pc, #116]	@ (800aae8 <UART_SetConfig+0xacc>)
 800aa72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	085b      	lsrs	r3, r3, #1
 800aa84:	441a      	add	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa92:	2b0f      	cmp	r3, #15
 800aa94:	d909      	bls.n	800aaaa <UART_SetConfig+0xa8e>
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa9c:	d205      	bcs.n	800aaaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60da      	str	r2, [r3, #12]
 800aaa8:	e002      	b.n	800aab0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2200      	movs	r2, #0
 800aaca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aacc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3748      	adds	r7, #72	@ 0x48
 800aad4:	46bd      	mov	sp, r7
 800aad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aada:	bf00      	nop
 800aadc:	58024400 	.word	0x58024400
 800aae0:	03d09000 	.word	0x03d09000
 800aae4:	003d0900 	.word	0x003d0900
 800aae8:	080104bc 	.word	0x080104bc

0800aaec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abea:	d10a      	bne.n	800ac02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b098      	sub	sp, #96	@ 0x60
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac40:	f7f7 fc60 	bl	8002504 <HAL_GetTick>
 800ac44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d12f      	bne.n	800acb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f88e 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d022      	beq.n	800acb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e6      	bne.n	800ac6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e063      	b.n	800ad7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0304 	and.w	r3, r3, #4
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d149      	bne.n	800ad56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acca:	2200      	movs	r2, #0
 800accc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f857 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d03c      	beq.n	800ad56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	623b      	str	r3, [r7, #32]
   return(result);
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800acfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e6      	bne.n	800acdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3308      	adds	r3, #8
 800ad14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f023 0301 	bic.w	r3, r3, #1
 800ad24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad2e:	61fa      	str	r2, [r7, #28]
 800ad30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e5      	bne.n	800ad0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e012      	b.n	800ad7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2220      	movs	r2, #32
 800ad62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3758      	adds	r7, #88	@ 0x58
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad94:	e04f      	b.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9c:	d04b      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad9e:	f7f7 fbb1 	bl	8002504 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d302      	bcc.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e04e      	b.n	800ae56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0304 	and.w	r3, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d037      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b80      	cmp	r3, #128	@ 0x80
 800adca:	d034      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b40      	cmp	r3, #64	@ 0x40
 800add0:	d031      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	f003 0308 	and.w	r3, r3, #8
 800addc:	2b08      	cmp	r3, #8
 800adde:	d110      	bne.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2208      	movs	r2, #8
 800ade6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f000 f95b 	bl	800b0a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2208      	movs	r2, #8
 800adf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e029      	b.n	800ae56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae10:	d111      	bne.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 f941 	bl	800b0a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2220      	movs	r2, #32
 800ae26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e00f      	b.n	800ae56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	bf0c      	ite	eq
 800ae46:	2301      	moveq	r3, #1
 800ae48:	2300      	movne	r3, #0
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d0a0      	beq.n	800ad96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b0a3      	sub	sp, #140	@ 0x8c
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	88fa      	ldrh	r2, [r7, #6]
 800ae78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	88fa      	ldrh	r2, [r7, #6]
 800ae80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae92:	d10e      	bne.n	800aeb2 <UART_Start_Receive_IT+0x52>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d105      	bne.n	800aea8 <UART_Start_Receive_IT+0x48>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aea2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aea6:	e02d      	b.n	800af04 <UART_Start_Receive_IT+0xa4>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	22ff      	movs	r2, #255	@ 0xff
 800aeac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aeb0:	e028      	b.n	800af04 <UART_Start_Receive_IT+0xa4>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10d      	bne.n	800aed6 <UART_Start_Receive_IT+0x76>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d104      	bne.n	800aecc <UART_Start_Receive_IT+0x6c>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	22ff      	movs	r2, #255	@ 0xff
 800aec6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aeca:	e01b      	b.n	800af04 <UART_Start_Receive_IT+0xa4>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	227f      	movs	r2, #127	@ 0x7f
 800aed0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aed4:	e016      	b.n	800af04 <UART_Start_Receive_IT+0xa4>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aede:	d10d      	bne.n	800aefc <UART_Start_Receive_IT+0x9c>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d104      	bne.n	800aef2 <UART_Start_Receive_IT+0x92>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	227f      	movs	r2, #127	@ 0x7f
 800aeec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aef0:	e008      	b.n	800af04 <UART_Start_Receive_IT+0xa4>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	223f      	movs	r2, #63	@ 0x3f
 800aef6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aefa:	e003      	b.n	800af04 <UART_Start_Receive_IT+0xa4>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2222      	movs	r2, #34	@ 0x22
 800af10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800af24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3308      	adds	r3, #8
 800af34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800af38:	673a      	str	r2, [r7, #112]	@ 0x70
 800af3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800af3e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800af40:	e841 2300 	strex	r3, r2, [r1]
 800af44:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800af46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e3      	bne.n	800af14 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af54:	d14f      	bne.n	800aff6 <UART_Start_Receive_IT+0x196>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af5c:	88fa      	ldrh	r2, [r7, #6]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d349      	bcc.n	800aff6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6a:	d107      	bne.n	800af7c <UART_Start_Receive_IT+0x11c>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4a47      	ldr	r2, [pc, #284]	@ (800b094 <UART_Start_Receive_IT+0x234>)
 800af78:	675a      	str	r2, [r3, #116]	@ 0x74
 800af7a:	e002      	b.n	800af82 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a46      	ldr	r2, [pc, #280]	@ (800b098 <UART_Start_Receive_IT+0x238>)
 800af80:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d01a      	beq.n	800afc0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800af98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800afac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800afb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800afba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e4      	bne.n	800af8a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3308      	adds	r3, #8
 800afc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3308      	adds	r3, #8
 800afde:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800afe0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800afe2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800afe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800afee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e5      	bne.n	800afc0 <UART_Start_Receive_IT+0x160>
 800aff4:	e046      	b.n	800b084 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800affe:	d107      	bne.n	800b010 <UART_Start_Receive_IT+0x1b0>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d103      	bne.n	800b010 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4a24      	ldr	r2, [pc, #144]	@ (800b09c <UART_Start_Receive_IT+0x23c>)
 800b00c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b00e:	e002      	b.n	800b016 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4a23      	ldr	r2, [pc, #140]	@ (800b0a0 <UART_Start_Receive_IT+0x240>)
 800b014:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d019      	beq.n	800b052 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b026:	e853 3f00 	ldrex	r3, [r3]
 800b02a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b032:	677b      	str	r3, [r7, #116]	@ 0x74
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	461a      	mov	r2, r3
 800b03a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b03c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b03e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b040:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b044:	e841 2300 	strex	r3, r2, [r1]
 800b048:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1e6      	bne.n	800b01e <UART_Start_Receive_IT+0x1be>
 800b050:	e018      	b.n	800b084 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	613b      	str	r3, [r7, #16]
   return(result);
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f043 0320 	orr.w	r3, r3, #32
 800b066:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	461a      	mov	r2, r3
 800b06e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b070:	623b      	str	r3, [r7, #32]
 800b072:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	69f9      	ldr	r1, [r7, #28]
 800b076:	6a3a      	ldr	r2, [r7, #32]
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e6      	bne.n	800b052 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	378c      	adds	r7, #140	@ 0x8c
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	0800b8c5 	.word	0x0800b8c5
 800b098:	0800b565 	.word	0x0800b565
 800b09c:	0800b3ad 	.word	0x0800b3ad
 800b0a0:	0800b1f5 	.word	0x0800b1f5

0800b0a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b095      	sub	sp, #84	@ 0x54
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e6      	bne.n	800b0ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	4b1e      	ldr	r3, [pc, #120]	@ (800b16c <UART_EndRxTransfer+0xc8>)
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e5      	bne.n	800b0de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b116:	2b01      	cmp	r3, #1
 800b118:	d118      	bne.n	800b14c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	60bb      	str	r3, [r7, #8]
   return(result);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f023 0310 	bic.w	r3, r3, #16
 800b12e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	461a      	mov	r2, r3
 800b136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b138:	61bb      	str	r3, [r7, #24]
 800b13a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6979      	ldr	r1, [r7, #20]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	613b      	str	r3, [r7, #16]
   return(result);
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e6      	bne.n	800b11a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2220      	movs	r2, #32
 800b150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b160:	bf00      	nop
 800b162:	3754      	adds	r7, #84	@ 0x54
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	effffffe 	.word	0xeffffffe

0800b170 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7fe ff2e 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b194:	bf00      	nop
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	e853 3f00 	ldrex	r3, [r3]
 800b1b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1b8:	61fb      	str	r3, [r7, #28]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	61bb      	str	r3, [r7, #24]
 800b1c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c6:	6979      	ldr	r1, [r7, #20]
 800b1c8:	69ba      	ldr	r2, [r7, #24]
 800b1ca:	e841 2300 	strex	r3, r2, [r1]
 800b1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1e6      	bne.n	800b1a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7fe fef9 	bl	8009fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1ea:	bf00      	nop
 800b1ec:	3720      	adds	r7, #32
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b09c      	sub	sp, #112	@ 0x70
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b202:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b20c:	2b22      	cmp	r3, #34	@ 0x22
 800b20e:	f040 80be 	bne.w	800b38e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b218:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b21c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b220:	b2d9      	uxtb	r1, r3
 800b222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b226:	b2da      	uxtb	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b22c:	400a      	ands	r2, r1
 800b22e:	b2d2      	uxtb	r2, r2
 800b230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b242:	b29b      	uxth	r3, r3
 800b244:	3b01      	subs	r3, #1
 800b246:	b29a      	uxth	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b254:	b29b      	uxth	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	f040 80a1 	bne.w	800b39e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b264:	e853 3f00 	ldrex	r3, [r3]
 800b268:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b26a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b26c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b270:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b27a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b27c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e6      	bne.n	800b25c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3308      	adds	r3, #8
 800b294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	f023 0301 	bic.w	r3, r3, #1
 800b2a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b2ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800b2b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2b6:	e841 2300 	strex	r3, r2, [r1]
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1e5      	bne.n	800b28e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a33      	ldr	r2, [pc, #204]	@ (800b3a8 <UART_RxISR_8BIT+0x1b4>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d01f      	beq.n	800b320 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d018      	beq.n	800b320 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	623b      	str	r3, [r7, #32]
   return(result);
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b302:	663b      	str	r3, [r7, #96]	@ 0x60
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b30c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b30e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e6      	bne.n	800b2ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b324:	2b01      	cmp	r3, #1
 800b326:	d12e      	bne.n	800b386 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 0310 	bic.w	r3, r3, #16
 800b342:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	461a      	mov	r2, r3
 800b34a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b34c:	61fb      	str	r3, [r7, #28]
 800b34e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	69b9      	ldr	r1, [r7, #24]
 800b352:	69fa      	ldr	r2, [r7, #28]
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	617b      	str	r3, [r7, #20]
   return(result);
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e6      	bne.n	800b32e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	f003 0310 	and.w	r3, r3, #16
 800b36a:	2b10      	cmp	r3, #16
 800b36c:	d103      	bne.n	800b376 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2210      	movs	r2, #16
 800b374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fe fe40 	bl	800a004 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b384:	e00b      	b.n	800b39e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7f6 faea 	bl	8001960 <HAL_UART_RxCpltCallback>
}
 800b38c:	e007      	b.n	800b39e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	699a      	ldr	r2, [r3, #24]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f042 0208 	orr.w	r2, r2, #8
 800b39c:	619a      	str	r2, [r3, #24]
}
 800b39e:	bf00      	nop
 800b3a0:	3770      	adds	r7, #112	@ 0x70
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	58000c00 	.word	0x58000c00

0800b3ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b09c      	sub	sp, #112	@ 0x70
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3c4:	2b22      	cmp	r3, #34	@ 0x22
 800b3c6:	f040 80be 	bne.w	800b546 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b3da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b3de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b3e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3ee:	1c9a      	adds	r2, r3, #2
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f040 80a1 	bne.w	800b556 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b428:	667b      	str	r3, [r7, #100]	@ 0x64
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b432:	657b      	str	r3, [r7, #84]	@ 0x54
 800b434:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e6      	bne.n	800b414 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3308      	adds	r3, #8
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	f023 0301 	bic.w	r3, r3, #1
 800b45c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3308      	adds	r3, #8
 800b464:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b466:	643a      	str	r2, [r7, #64]	@ 0x40
 800b468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b46c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e5      	bne.n	800b446 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2220      	movs	r2, #32
 800b47e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a33      	ldr	r2, [pc, #204]	@ (800b560 <UART_RxISR_16BIT+0x1b4>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d01f      	beq.n	800b4d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d018      	beq.n	800b4d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b4ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e6      	bne.n	800b4a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d12e      	bne.n	800b53e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f023 0310 	bic.w	r3, r3, #16
 800b4fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6979      	ldr	r1, [r7, #20]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	613b      	str	r3, [r7, #16]
   return(result);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e6      	bne.n	800b4e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f003 0310 	and.w	r3, r3, #16
 800b522:	2b10      	cmp	r3, #16
 800b524:	d103      	bne.n	800b52e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2210      	movs	r2, #16
 800b52c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7fe fd64 	bl	800a004 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b53c:	e00b      	b.n	800b556 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7f6 fa0e 	bl	8001960 <HAL_UART_RxCpltCallback>
}
 800b544:	e007      	b.n	800b556 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	699a      	ldr	r2, [r3, #24]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0208 	orr.w	r2, r2, #8
 800b554:	619a      	str	r2, [r3, #24]
}
 800b556:	bf00      	nop
 800b558:	3770      	adds	r7, #112	@ 0x70
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	58000c00 	.word	0x58000c00

0800b564 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b0ac      	sub	sp, #176	@ 0xb0
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b572:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	69db      	ldr	r3, [r3, #28]
 800b57c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b59a:	2b22      	cmp	r3, #34	@ 0x22
 800b59c:	f040 8180 	bne.w	800b8a0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5aa:	e123      	b.n	800b7f4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b5b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b5ba:	b2d9      	uxtb	r1, r3
 800b5bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5c6:	400a      	ands	r2, r1
 800b5c8:	b2d2      	uxtb	r2, r2
 800b5ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d053      	beq.n	800b6a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d011      	beq.n	800b62e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b60a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00b      	beq.n	800b62e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2201      	movs	r2, #1
 800b61c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b624:	f043 0201 	orr.w	r2, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b62e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b00      	cmp	r3, #0
 800b638:	d011      	beq.n	800b65e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b63a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00b      	beq.n	800b65e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2202      	movs	r2, #2
 800b64c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b654:	f043 0204 	orr.w	r2, r3, #4
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b662:	f003 0304 	and.w	r3, r3, #4
 800b666:	2b00      	cmp	r3, #0
 800b668:	d011      	beq.n	800b68e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b66e:	f003 0301 	and.w	r3, r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00b      	beq.n	800b68e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2204      	movs	r2, #4
 800b67c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b684:	f043 0202 	orr.w	r2, r3, #2
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b694:	2b00      	cmp	r3, #0
 800b696:	d006      	beq.n	800b6a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7fe fca9 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f040 80a0 	bne.w	800b7f4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b6c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b6d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b6d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b6dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b6de:	e841 2300 	strex	r3, r2, [r1]
 800b6e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b6e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1e4      	bne.n	800b6b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6f4:	e853 3f00 	ldrex	r3, [r3]
 800b6f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b6fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6fc:	4b6e      	ldr	r3, [pc, #440]	@ (800b8b8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b6fe:	4013      	ands	r3, r2
 800b700:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3308      	adds	r3, #8
 800b70a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b70e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b710:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b714:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b71c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e3      	bne.n	800b6ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a60      	ldr	r2, [pc, #384]	@ (800b8bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d021      	beq.n	800b784 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d01a      	beq.n	800b784 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b75e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b770:	657b      	str	r3, [r7, #84]	@ 0x54
 800b772:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b776:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b77e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e4      	bne.n	800b74e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d130      	bne.n	800b7ee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79a:	e853 3f00 	ldrex	r3, [r3]
 800b79e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	f023 0310 	bic.w	r3, r3, #16
 800b7a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b7ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e4      	bne.n	800b792 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b10      	cmp	r3, #16
 800b7d4:	d103      	bne.n	800b7de <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2210      	movs	r2, #16
 800b7dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7fe fc0c 	bl	800a004 <HAL_UARTEx_RxEventCallback>
 800b7ec:	e002      	b.n	800b7f4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7f6 f8b6 	bl	8001960 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b7f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d006      	beq.n	800b80a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b7fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b800:	f003 0320 	and.w	r3, r3, #32
 800b804:	2b00      	cmp	r3, #0
 800b806:	f47f aed1 	bne.w	800b5ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b810:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b814:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d049      	beq.n	800b8b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b822:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b826:	429a      	cmp	r2, r3
 800b828:	d242      	bcs.n	800b8b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3308      	adds	r3, #8
 800b830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	61fb      	str	r3, [r7, #28]
   return(result);
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3308      	adds	r3, #8
 800b84a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b84e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b850:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b856:	e841 2300 	strex	r3, r2, [r1]
 800b85a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1e3      	bne.n	800b82a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a16      	ldr	r2, [pc, #88]	@ (800b8c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b866:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	60bb      	str	r3, [r7, #8]
   return(result);
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f043 0320 	orr.w	r3, r3, #32
 800b87c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6979      	ldr	r1, [r7, #20]
 800b890:	69ba      	ldr	r2, [r7, #24]
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	613b      	str	r3, [r7, #16]
   return(result);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e4      	bne.n	800b868 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b89e:	e007      	b.n	800b8b0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f042 0208 	orr.w	r2, r2, #8
 800b8ae:	619a      	str	r2, [r3, #24]
}
 800b8b0:	bf00      	nop
 800b8b2:	37b0      	adds	r7, #176	@ 0xb0
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	effffffe 	.word	0xeffffffe
 800b8bc:	58000c00 	.word	0x58000c00
 800b8c0:	0800b1f5 	.word	0x0800b1f5

0800b8c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b0ae      	sub	sp, #184	@ 0xb8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b8d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8fa:	2b22      	cmp	r3, #34	@ 0x22
 800b8fc:	f040 8184 	bne.w	800bc08 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b906:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b90a:	e127      	b.n	800bb5c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b912:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b91a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b91e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b922:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b926:	4013      	ands	r3, r2
 800b928:	b29a      	uxth	r2, r3
 800b92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b92e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b934:	1c9a      	adds	r2, r3, #2
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b940:	b29b      	uxth	r3, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	b29a      	uxth	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b95a:	f003 0307 	and.w	r3, r3, #7
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d053      	beq.n	800ba0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d011      	beq.n	800b992 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b96e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00b      	beq.n	800b992 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2201      	movs	r2, #1
 800b980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b988:	f043 0201 	orr.w	r2, r3, #1
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d011      	beq.n	800b9c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b99e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00b      	beq.n	800b9c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9b8:	f043 0204 	orr.w	r2, r3, #4
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9c6:	f003 0304 	and.w	r3, r3, #4
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d011      	beq.n	800b9f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b9ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00b      	beq.n	800b9f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2204      	movs	r2, #4
 800b9e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9e8:	f043 0202 	orr.w	r2, r3, #2
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d006      	beq.n	800ba0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7fe faf7 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 80a2 	bne.w	800bb5c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ba26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	461a      	mov	r2, r3
 800ba36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ba42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ba4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e2      	bne.n	800ba18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3308      	adds	r3, #8
 800ba58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ba62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba64:	4b6e      	ldr	r3, [pc, #440]	@ (800bc20 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ba66:	4013      	ands	r3, r2
 800ba68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3308      	adds	r3, #8
 800ba72:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ba76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ba78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ba7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ba84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e3      	bne.n	800ba52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a60      	ldr	r2, [pc, #384]	@ (800bc24 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d021      	beq.n	800baec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01a      	beq.n	800baec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800babe:	e853 3f00 	ldrex	r3, [r3]
 800bac2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bac6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800baca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	461a      	mov	r2, r3
 800bad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bada:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bade:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e4      	bne.n	800bab6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d130      	bne.n	800bb56 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	e853 3f00 	ldrex	r3, [r3]
 800bb06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0a:	f023 0310 	bic.w	r3, r3, #16
 800bb0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e4      	bne.n	800bafa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	f003 0310 	and.w	r3, r3, #16
 800bb3a:	2b10      	cmp	r3, #16
 800bb3c:	d103      	bne.n	800bb46 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2210      	movs	r2, #16
 800bb44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7fe fa58 	bl	800a004 <HAL_UARTEx_RxEventCallback>
 800bb54:	e002      	b.n	800bb5c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7f5 ff02 	bl	8001960 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb5c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d006      	beq.n	800bb72 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800bb64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb68:	f003 0320 	and.w	r3, r3, #32
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f47f aecd 	bne.w	800b90c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bb78:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bb7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d049      	beq.n	800bc18 <UART_RxISR_16BIT_FIFOEN+0x354>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bb8a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d242      	bcs.n	800bc18 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3308      	adds	r3, #8
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	623b      	str	r3, [r7, #32]
   return(result);
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bbb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbbe:	e841 2300 	strex	r3, r2, [r1]
 800bbc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1e3      	bne.n	800bb92 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a16      	ldr	r2, [pc, #88]	@ (800bc28 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bbce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f043 0320 	orr.w	r3, r3, #32
 800bbe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	461a      	mov	r2, r3
 800bbee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bbf2:	61fb      	str	r3, [r7, #28]
 800bbf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf6:	69b9      	ldr	r1, [r7, #24]
 800bbf8:	69fa      	ldr	r2, [r7, #28]
 800bbfa:	e841 2300 	strex	r3, r2, [r1]
 800bbfe:	617b      	str	r3, [r7, #20]
   return(result);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1e4      	bne.n	800bbd0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc06:	e007      	b.n	800bc18 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	699a      	ldr	r2, [r3, #24]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0208 	orr.w	r2, r2, #8
 800bc16:	619a      	str	r2, [r3, #24]
}
 800bc18:	bf00      	nop
 800bc1a:	37b8      	adds	r7, #184	@ 0xb8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	effffffe 	.word	0xeffffffe
 800bc24:	58000c00 	.word	0x58000c00
 800bc28:	0800b3ad 	.word	0x0800b3ad

0800bc2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d101      	bne.n	800bc7e <HAL_UARTEx_DisableFifoMode+0x16>
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	e027      	b.n	800bcce <HAL_UARTEx_DisableFifoMode+0x66>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2224      	movs	r2, #36	@ 0x24
 800bc8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 0201 	bic.w	r2, r2, #1
 800bca4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d101      	bne.n	800bcf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e02d      	b.n	800bd4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2224      	movs	r2, #36	@ 0x24
 800bcfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f022 0201 	bic.w	r2, r2, #1
 800bd18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f850 	bl	800bdd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e02d      	b.n	800bdca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2224      	movs	r2, #36	@ 0x24
 800bd7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 0201 	bic.w	r2, r2, #1
 800bd94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	430a      	orrs	r2, r1
 800bda8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f812 	bl	800bdd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2220      	movs	r2, #32
 800bdbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d108      	bne.n	800bdf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdf4:	e031      	b.n	800be5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdf6:	2310      	movs	r3, #16
 800bdf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdfa:	2310      	movs	r3, #16
 800bdfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	0e5b      	lsrs	r3, r3, #25
 800be06:	b2db      	uxtb	r3, r3
 800be08:	f003 0307 	and.w	r3, r3, #7
 800be0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	0f5b      	lsrs	r3, r3, #29
 800be16:	b2db      	uxtb	r3, r3
 800be18:	f003 0307 	and.w	r3, r3, #7
 800be1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	7b3a      	ldrb	r2, [r7, #12]
 800be22:	4911      	ldr	r1, [pc, #68]	@ (800be68 <UARTEx_SetNbDataToProcess+0x94>)
 800be24:	5c8a      	ldrb	r2, [r1, r2]
 800be26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be2a:	7b3a      	ldrb	r2, [r7, #12]
 800be2c:	490f      	ldr	r1, [pc, #60]	@ (800be6c <UARTEx_SetNbDataToProcess+0x98>)
 800be2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be30:	fb93 f3f2 	sdiv	r3, r3, r2
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	7b7a      	ldrb	r2, [r7, #13]
 800be40:	4909      	ldr	r1, [pc, #36]	@ (800be68 <UARTEx_SetNbDataToProcess+0x94>)
 800be42:	5c8a      	ldrb	r2, [r1, r2]
 800be44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be48:	7b7a      	ldrb	r2, [r7, #13]
 800be4a:	4908      	ldr	r1, [pc, #32]	@ (800be6c <UARTEx_SetNbDataToProcess+0x98>)
 800be4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be52:	b29a      	uxth	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be5a:	bf00      	nop
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	080104d4 	.word	0x080104d4
 800be6c:	080104dc 	.word	0x080104dc

0800be70 <atoi>:
 800be70:	220a      	movs	r2, #10
 800be72:	2100      	movs	r1, #0
 800be74:	f000 b87c 	b.w	800bf70 <strtol>

0800be78 <_strtol_l.constprop.0>:
 800be78:	2b24      	cmp	r3, #36	@ 0x24
 800be7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be7e:	4686      	mov	lr, r0
 800be80:	4690      	mov	r8, r2
 800be82:	d801      	bhi.n	800be88 <_strtol_l.constprop.0+0x10>
 800be84:	2b01      	cmp	r3, #1
 800be86:	d106      	bne.n	800be96 <_strtol_l.constprop.0+0x1e>
 800be88:	f001 f87c 	bl	800cf84 <__errno>
 800be8c:	2316      	movs	r3, #22
 800be8e:	6003      	str	r3, [r0, #0]
 800be90:	2000      	movs	r0, #0
 800be92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be96:	4834      	ldr	r0, [pc, #208]	@ (800bf68 <_strtol_l.constprop.0+0xf0>)
 800be98:	460d      	mov	r5, r1
 800be9a:	462a      	mov	r2, r5
 800be9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bea0:	5d06      	ldrb	r6, [r0, r4]
 800bea2:	f016 0608 	ands.w	r6, r6, #8
 800bea6:	d1f8      	bne.n	800be9a <_strtol_l.constprop.0+0x22>
 800bea8:	2c2d      	cmp	r4, #45	@ 0x2d
 800beaa:	d12d      	bne.n	800bf08 <_strtol_l.constprop.0+0x90>
 800beac:	782c      	ldrb	r4, [r5, #0]
 800beae:	2601      	movs	r6, #1
 800beb0:	1c95      	adds	r5, r2, #2
 800beb2:	f033 0210 	bics.w	r2, r3, #16
 800beb6:	d109      	bne.n	800becc <_strtol_l.constprop.0+0x54>
 800beb8:	2c30      	cmp	r4, #48	@ 0x30
 800beba:	d12a      	bne.n	800bf12 <_strtol_l.constprop.0+0x9a>
 800bebc:	782a      	ldrb	r2, [r5, #0]
 800bebe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bec2:	2a58      	cmp	r2, #88	@ 0x58
 800bec4:	d125      	bne.n	800bf12 <_strtol_l.constprop.0+0x9a>
 800bec6:	786c      	ldrb	r4, [r5, #1]
 800bec8:	2310      	movs	r3, #16
 800beca:	3502      	adds	r5, #2
 800becc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bed0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bed4:	2200      	movs	r2, #0
 800bed6:	fbbc f9f3 	udiv	r9, ip, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	fb03 ca19 	mls	sl, r3, r9, ip
 800bee0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bee4:	2f09      	cmp	r7, #9
 800bee6:	d81b      	bhi.n	800bf20 <_strtol_l.constprop.0+0xa8>
 800bee8:	463c      	mov	r4, r7
 800beea:	42a3      	cmp	r3, r4
 800beec:	dd27      	ble.n	800bf3e <_strtol_l.constprop.0+0xc6>
 800beee:	1c57      	adds	r7, r2, #1
 800bef0:	d007      	beq.n	800bf02 <_strtol_l.constprop.0+0x8a>
 800bef2:	4581      	cmp	r9, r0
 800bef4:	d320      	bcc.n	800bf38 <_strtol_l.constprop.0+0xc0>
 800bef6:	d101      	bne.n	800befc <_strtol_l.constprop.0+0x84>
 800bef8:	45a2      	cmp	sl, r4
 800befa:	db1d      	blt.n	800bf38 <_strtol_l.constprop.0+0xc0>
 800befc:	fb00 4003 	mla	r0, r0, r3, r4
 800bf00:	2201      	movs	r2, #1
 800bf02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf06:	e7eb      	b.n	800bee0 <_strtol_l.constprop.0+0x68>
 800bf08:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf0a:	bf04      	itt	eq
 800bf0c:	782c      	ldrbeq	r4, [r5, #0]
 800bf0e:	1c95      	addeq	r5, r2, #2
 800bf10:	e7cf      	b.n	800beb2 <_strtol_l.constprop.0+0x3a>
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1da      	bne.n	800becc <_strtol_l.constprop.0+0x54>
 800bf16:	2c30      	cmp	r4, #48	@ 0x30
 800bf18:	bf0c      	ite	eq
 800bf1a:	2308      	moveq	r3, #8
 800bf1c:	230a      	movne	r3, #10
 800bf1e:	e7d5      	b.n	800becc <_strtol_l.constprop.0+0x54>
 800bf20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf24:	2f19      	cmp	r7, #25
 800bf26:	d801      	bhi.n	800bf2c <_strtol_l.constprop.0+0xb4>
 800bf28:	3c37      	subs	r4, #55	@ 0x37
 800bf2a:	e7de      	b.n	800beea <_strtol_l.constprop.0+0x72>
 800bf2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf30:	2f19      	cmp	r7, #25
 800bf32:	d804      	bhi.n	800bf3e <_strtol_l.constprop.0+0xc6>
 800bf34:	3c57      	subs	r4, #87	@ 0x57
 800bf36:	e7d8      	b.n	800beea <_strtol_l.constprop.0+0x72>
 800bf38:	f04f 32ff 	mov.w	r2, #4294967295
 800bf3c:	e7e1      	b.n	800bf02 <_strtol_l.constprop.0+0x8a>
 800bf3e:	1c53      	adds	r3, r2, #1
 800bf40:	d108      	bne.n	800bf54 <_strtol_l.constprop.0+0xdc>
 800bf42:	2322      	movs	r3, #34	@ 0x22
 800bf44:	f8ce 3000 	str.w	r3, [lr]
 800bf48:	4660      	mov	r0, ip
 800bf4a:	f1b8 0f00 	cmp.w	r8, #0
 800bf4e:	d0a0      	beq.n	800be92 <_strtol_l.constprop.0+0x1a>
 800bf50:	1e69      	subs	r1, r5, #1
 800bf52:	e006      	b.n	800bf62 <_strtol_l.constprop.0+0xea>
 800bf54:	b106      	cbz	r6, 800bf58 <_strtol_l.constprop.0+0xe0>
 800bf56:	4240      	negs	r0, r0
 800bf58:	f1b8 0f00 	cmp.w	r8, #0
 800bf5c:	d099      	beq.n	800be92 <_strtol_l.constprop.0+0x1a>
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	d1f6      	bne.n	800bf50 <_strtol_l.constprop.0+0xd8>
 800bf62:	f8c8 1000 	str.w	r1, [r8]
 800bf66:	e794      	b.n	800be92 <_strtol_l.constprop.0+0x1a>
 800bf68:	080104e5 	.word	0x080104e5

0800bf6c <_strtol_r>:
 800bf6c:	f7ff bf84 	b.w	800be78 <_strtol_l.constprop.0>

0800bf70 <strtol>:
 800bf70:	4613      	mov	r3, r2
 800bf72:	460a      	mov	r2, r1
 800bf74:	4601      	mov	r1, r0
 800bf76:	4802      	ldr	r0, [pc, #8]	@ (800bf80 <strtol+0x10>)
 800bf78:	6800      	ldr	r0, [r0, #0]
 800bf7a:	f7ff bf7d 	b.w	800be78 <_strtol_l.constprop.0>
 800bf7e:	bf00      	nop
 800bf80:	24000030 	.word	0x24000030

0800bf84 <__cvt>:
 800bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf86:	ed2d 8b02 	vpush	{d8}
 800bf8a:	eeb0 8b40 	vmov.f64	d8, d0
 800bf8e:	b085      	sub	sp, #20
 800bf90:	4617      	mov	r7, r2
 800bf92:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bf94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf96:	ee18 2a90 	vmov	r2, s17
 800bf9a:	f025 0520 	bic.w	r5, r5, #32
 800bf9e:	2a00      	cmp	r2, #0
 800bfa0:	bfb6      	itet	lt
 800bfa2:	222d      	movlt	r2, #45	@ 0x2d
 800bfa4:	2200      	movge	r2, #0
 800bfa6:	eeb1 8b40 	vneglt.f64	d8, d0
 800bfaa:	2d46      	cmp	r5, #70	@ 0x46
 800bfac:	460c      	mov	r4, r1
 800bfae:	701a      	strb	r2, [r3, #0]
 800bfb0:	d004      	beq.n	800bfbc <__cvt+0x38>
 800bfb2:	2d45      	cmp	r5, #69	@ 0x45
 800bfb4:	d100      	bne.n	800bfb8 <__cvt+0x34>
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	2102      	movs	r1, #2
 800bfba:	e000      	b.n	800bfbe <__cvt+0x3a>
 800bfbc:	2103      	movs	r1, #3
 800bfbe:	ab03      	add	r3, sp, #12
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	ab02      	add	r3, sp, #8
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	4622      	mov	r2, r4
 800bfc8:	4633      	mov	r3, r6
 800bfca:	eeb0 0b48 	vmov.f64	d0, d8
 800bfce:	f001 f897 	bl	800d100 <_dtoa_r>
 800bfd2:	2d47      	cmp	r5, #71	@ 0x47
 800bfd4:	d114      	bne.n	800c000 <__cvt+0x7c>
 800bfd6:	07fb      	lsls	r3, r7, #31
 800bfd8:	d50a      	bpl.n	800bff0 <__cvt+0x6c>
 800bfda:	1902      	adds	r2, r0, r4
 800bfdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe4:	bf08      	it	eq
 800bfe6:	9203      	streq	r2, [sp, #12]
 800bfe8:	2130      	movs	r1, #48	@ 0x30
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d319      	bcc.n	800c024 <__cvt+0xa0>
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bff4:	1a1b      	subs	r3, r3, r0
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	b005      	add	sp, #20
 800bffa:	ecbd 8b02 	vpop	{d8}
 800bffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c000:	2d46      	cmp	r5, #70	@ 0x46
 800c002:	eb00 0204 	add.w	r2, r0, r4
 800c006:	d1e9      	bne.n	800bfdc <__cvt+0x58>
 800c008:	7803      	ldrb	r3, [r0, #0]
 800c00a:	2b30      	cmp	r3, #48	@ 0x30
 800c00c:	d107      	bne.n	800c01e <__cvt+0x9a>
 800c00e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c016:	bf1c      	itt	ne
 800c018:	f1c4 0401 	rsbne	r4, r4, #1
 800c01c:	6034      	strne	r4, [r6, #0]
 800c01e:	6833      	ldr	r3, [r6, #0]
 800c020:	441a      	add	r2, r3
 800c022:	e7db      	b.n	800bfdc <__cvt+0x58>
 800c024:	1c5c      	adds	r4, r3, #1
 800c026:	9403      	str	r4, [sp, #12]
 800c028:	7019      	strb	r1, [r3, #0]
 800c02a:	e7de      	b.n	800bfea <__cvt+0x66>

0800c02c <__exponent>:
 800c02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c02e:	2900      	cmp	r1, #0
 800c030:	bfba      	itte	lt
 800c032:	4249      	neglt	r1, r1
 800c034:	232d      	movlt	r3, #45	@ 0x2d
 800c036:	232b      	movge	r3, #43	@ 0x2b
 800c038:	2909      	cmp	r1, #9
 800c03a:	7002      	strb	r2, [r0, #0]
 800c03c:	7043      	strb	r3, [r0, #1]
 800c03e:	dd29      	ble.n	800c094 <__exponent+0x68>
 800c040:	f10d 0307 	add.w	r3, sp, #7
 800c044:	461d      	mov	r5, r3
 800c046:	270a      	movs	r7, #10
 800c048:	461a      	mov	r2, r3
 800c04a:	fbb1 f6f7 	udiv	r6, r1, r7
 800c04e:	fb07 1416 	mls	r4, r7, r6, r1
 800c052:	3430      	adds	r4, #48	@ 0x30
 800c054:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c058:	460c      	mov	r4, r1
 800c05a:	2c63      	cmp	r4, #99	@ 0x63
 800c05c:	f103 33ff 	add.w	r3, r3, #4294967295
 800c060:	4631      	mov	r1, r6
 800c062:	dcf1      	bgt.n	800c048 <__exponent+0x1c>
 800c064:	3130      	adds	r1, #48	@ 0x30
 800c066:	1e94      	subs	r4, r2, #2
 800c068:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c06c:	1c41      	adds	r1, r0, #1
 800c06e:	4623      	mov	r3, r4
 800c070:	42ab      	cmp	r3, r5
 800c072:	d30a      	bcc.n	800c08a <__exponent+0x5e>
 800c074:	f10d 0309 	add.w	r3, sp, #9
 800c078:	1a9b      	subs	r3, r3, r2
 800c07a:	42ac      	cmp	r4, r5
 800c07c:	bf88      	it	hi
 800c07e:	2300      	movhi	r3, #0
 800c080:	3302      	adds	r3, #2
 800c082:	4403      	add	r3, r0
 800c084:	1a18      	subs	r0, r3, r0
 800c086:	b003      	add	sp, #12
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c08e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c092:	e7ed      	b.n	800c070 <__exponent+0x44>
 800c094:	2330      	movs	r3, #48	@ 0x30
 800c096:	3130      	adds	r1, #48	@ 0x30
 800c098:	7083      	strb	r3, [r0, #2]
 800c09a:	70c1      	strb	r1, [r0, #3]
 800c09c:	1d03      	adds	r3, r0, #4
 800c09e:	e7f1      	b.n	800c084 <__exponent+0x58>

0800c0a0 <_printf_float>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	b08d      	sub	sp, #52	@ 0x34
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c0ac:	4616      	mov	r6, r2
 800c0ae:	461f      	mov	r7, r3
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	f000 ff1d 	bl	800cef0 <_localeconv_r>
 800c0b6:	f8d0 b000 	ldr.w	fp, [r0]
 800c0ba:	4658      	mov	r0, fp
 800c0bc:	f7f4 f960 	bl	8000380 <strlen>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c0cc:	6822      	ldr	r2, [r4, #0]
 800c0ce:	9005      	str	r0, [sp, #20]
 800c0d0:	3307      	adds	r3, #7
 800c0d2:	f023 0307 	bic.w	r3, r3, #7
 800c0d6:	f103 0108 	add.w	r1, r3, #8
 800c0da:	f8c8 1000 	str.w	r1, [r8]
 800c0de:	ed93 0b00 	vldr	d0, [r3]
 800c0e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c340 <_printf_float+0x2a0>
 800c0e6:	eeb0 7bc0 	vabs.f64	d7, d0
 800c0ea:	eeb4 7b46 	vcmp.f64	d7, d6
 800c0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c0f6:	dd24      	ble.n	800c142 <_printf_float+0xa2>
 800c0f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c100:	d502      	bpl.n	800c108 <_printf_float+0x68>
 800c102:	232d      	movs	r3, #45	@ 0x2d
 800c104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c108:	498f      	ldr	r1, [pc, #572]	@ (800c348 <_printf_float+0x2a8>)
 800c10a:	4b90      	ldr	r3, [pc, #576]	@ (800c34c <_printf_float+0x2ac>)
 800c10c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c110:	bf94      	ite	ls
 800c112:	4688      	movls	r8, r1
 800c114:	4698      	movhi	r8, r3
 800c116:	f022 0204 	bic.w	r2, r2, #4
 800c11a:	2303      	movs	r3, #3
 800c11c:	6123      	str	r3, [r4, #16]
 800c11e:	6022      	str	r2, [r4, #0]
 800c120:	f04f 0a00 	mov.w	sl, #0
 800c124:	9700      	str	r7, [sp, #0]
 800c126:	4633      	mov	r3, r6
 800c128:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c12a:	4621      	mov	r1, r4
 800c12c:	4628      	mov	r0, r5
 800c12e:	f000 f9d1 	bl	800c4d4 <_printf_common>
 800c132:	3001      	adds	r0, #1
 800c134:	f040 8089 	bne.w	800c24a <_printf_float+0x1aa>
 800c138:	f04f 30ff 	mov.w	r0, #4294967295
 800c13c:	b00d      	add	sp, #52	@ 0x34
 800c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c142:	eeb4 0b40 	vcmp.f64	d0, d0
 800c146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c14a:	d709      	bvc.n	800c160 <_printf_float+0xc0>
 800c14c:	ee10 3a90 	vmov	r3, s1
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfbc      	itt	lt
 800c154:	232d      	movlt	r3, #45	@ 0x2d
 800c156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c15a:	497d      	ldr	r1, [pc, #500]	@ (800c350 <_printf_float+0x2b0>)
 800c15c:	4b7d      	ldr	r3, [pc, #500]	@ (800c354 <_printf_float+0x2b4>)
 800c15e:	e7d5      	b.n	800c10c <_printf_float+0x6c>
 800c160:	6863      	ldr	r3, [r4, #4]
 800c162:	1c59      	adds	r1, r3, #1
 800c164:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c168:	d139      	bne.n	800c1de <_printf_float+0x13e>
 800c16a:	2306      	movs	r3, #6
 800c16c:	6063      	str	r3, [r4, #4]
 800c16e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c172:	2300      	movs	r3, #0
 800c174:	6022      	str	r2, [r4, #0]
 800c176:	9303      	str	r3, [sp, #12]
 800c178:	ab0a      	add	r3, sp, #40	@ 0x28
 800c17a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c17e:	ab09      	add	r3, sp, #36	@ 0x24
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	6861      	ldr	r1, [r4, #4]
 800c184:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c188:	4628      	mov	r0, r5
 800c18a:	f7ff fefb 	bl	800bf84 <__cvt>
 800c18e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c194:	4680      	mov	r8, r0
 800c196:	d129      	bne.n	800c1ec <_printf_float+0x14c>
 800c198:	1cc8      	adds	r0, r1, #3
 800c19a:	db02      	blt.n	800c1a2 <_printf_float+0x102>
 800c19c:	6863      	ldr	r3, [r4, #4]
 800c19e:	4299      	cmp	r1, r3
 800c1a0:	dd41      	ble.n	800c226 <_printf_float+0x186>
 800c1a2:	f1a9 0902 	sub.w	r9, r9, #2
 800c1a6:	fa5f f989 	uxtb.w	r9, r9
 800c1aa:	3901      	subs	r1, #1
 800c1ac:	464a      	mov	r2, r9
 800c1ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1b4:	f7ff ff3a 	bl	800c02c <__exponent>
 800c1b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1ba:	1813      	adds	r3, r2, r0
 800c1bc:	2a01      	cmp	r2, #1
 800c1be:	4682      	mov	sl, r0
 800c1c0:	6123      	str	r3, [r4, #16]
 800c1c2:	dc02      	bgt.n	800c1ca <_printf_float+0x12a>
 800c1c4:	6822      	ldr	r2, [r4, #0]
 800c1c6:	07d2      	lsls	r2, r2, #31
 800c1c8:	d501      	bpl.n	800c1ce <_printf_float+0x12e>
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	6123      	str	r3, [r4, #16]
 800c1ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0a6      	beq.n	800c124 <_printf_float+0x84>
 800c1d6:	232d      	movs	r3, #45	@ 0x2d
 800c1d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1dc:	e7a2      	b.n	800c124 <_printf_float+0x84>
 800c1de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c1e2:	d1c4      	bne.n	800c16e <_printf_float+0xce>
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1c2      	bne.n	800c16e <_printf_float+0xce>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e7bf      	b.n	800c16c <_printf_float+0xcc>
 800c1ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c1f0:	d9db      	bls.n	800c1aa <_printf_float+0x10a>
 800c1f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c1f6:	d118      	bne.n	800c22a <_printf_float+0x18a>
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	6863      	ldr	r3, [r4, #4]
 800c1fc:	dd0b      	ble.n	800c216 <_printf_float+0x176>
 800c1fe:	6121      	str	r1, [r4, #16]
 800c200:	b913      	cbnz	r3, 800c208 <_printf_float+0x168>
 800c202:	6822      	ldr	r2, [r4, #0]
 800c204:	07d0      	lsls	r0, r2, #31
 800c206:	d502      	bpl.n	800c20e <_printf_float+0x16e>
 800c208:	3301      	adds	r3, #1
 800c20a:	440b      	add	r3, r1
 800c20c:	6123      	str	r3, [r4, #16]
 800c20e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c210:	f04f 0a00 	mov.w	sl, #0
 800c214:	e7db      	b.n	800c1ce <_printf_float+0x12e>
 800c216:	b913      	cbnz	r3, 800c21e <_printf_float+0x17e>
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	07d2      	lsls	r2, r2, #31
 800c21c:	d501      	bpl.n	800c222 <_printf_float+0x182>
 800c21e:	3302      	adds	r3, #2
 800c220:	e7f4      	b.n	800c20c <_printf_float+0x16c>
 800c222:	2301      	movs	r3, #1
 800c224:	e7f2      	b.n	800c20c <_printf_float+0x16c>
 800c226:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c22a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c22c:	4299      	cmp	r1, r3
 800c22e:	db05      	blt.n	800c23c <_printf_float+0x19c>
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	6121      	str	r1, [r4, #16]
 800c234:	07d8      	lsls	r0, r3, #31
 800c236:	d5ea      	bpl.n	800c20e <_printf_float+0x16e>
 800c238:	1c4b      	adds	r3, r1, #1
 800c23a:	e7e7      	b.n	800c20c <_printf_float+0x16c>
 800c23c:	2900      	cmp	r1, #0
 800c23e:	bfd4      	ite	le
 800c240:	f1c1 0202 	rsble	r2, r1, #2
 800c244:	2201      	movgt	r2, #1
 800c246:	4413      	add	r3, r2
 800c248:	e7e0      	b.n	800c20c <_printf_float+0x16c>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	055a      	lsls	r2, r3, #21
 800c24e:	d407      	bmi.n	800c260 <_printf_float+0x1c0>
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	4642      	mov	r2, r8
 800c254:	4631      	mov	r1, r6
 800c256:	4628      	mov	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	d12a      	bne.n	800c2b4 <_printf_float+0x214>
 800c25e:	e76b      	b.n	800c138 <_printf_float+0x98>
 800c260:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c264:	f240 80e0 	bls.w	800c428 <_printf_float+0x388>
 800c268:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c26c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c274:	d133      	bne.n	800c2de <_printf_float+0x23e>
 800c276:	4a38      	ldr	r2, [pc, #224]	@ (800c358 <_printf_float+0x2b8>)
 800c278:	2301      	movs	r3, #1
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b8      	blx	r7
 800c280:	3001      	adds	r0, #1
 800c282:	f43f af59 	beq.w	800c138 <_printf_float+0x98>
 800c286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c28a:	4543      	cmp	r3, r8
 800c28c:	db02      	blt.n	800c294 <_printf_float+0x1f4>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	07d8      	lsls	r0, r3, #31
 800c292:	d50f      	bpl.n	800c2b4 <_printf_float+0x214>
 800c294:	9b05      	ldr	r3, [sp, #20]
 800c296:	465a      	mov	r2, fp
 800c298:	4631      	mov	r1, r6
 800c29a:	4628      	mov	r0, r5
 800c29c:	47b8      	blx	r7
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f43f af4a 	beq.w	800c138 <_printf_float+0x98>
 800c2a4:	f04f 0900 	mov.w	r9, #0
 800c2a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2ac:	f104 0a1a 	add.w	sl, r4, #26
 800c2b0:	45c8      	cmp	r8, r9
 800c2b2:	dc09      	bgt.n	800c2c8 <_printf_float+0x228>
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	079b      	lsls	r3, r3, #30
 800c2b8:	f100 8107 	bmi.w	800c4ca <_printf_float+0x42a>
 800c2bc:	68e0      	ldr	r0, [r4, #12]
 800c2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c0:	4298      	cmp	r0, r3
 800c2c2:	bfb8      	it	lt
 800c2c4:	4618      	movlt	r0, r3
 800c2c6:	e739      	b.n	800c13c <_printf_float+0x9c>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	4652      	mov	r2, sl
 800c2cc:	4631      	mov	r1, r6
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	47b8      	blx	r7
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	f43f af30 	beq.w	800c138 <_printf_float+0x98>
 800c2d8:	f109 0901 	add.w	r9, r9, #1
 800c2dc:	e7e8      	b.n	800c2b0 <_printf_float+0x210>
 800c2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dc3b      	bgt.n	800c35c <_printf_float+0x2bc>
 800c2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c358 <_printf_float+0x2b8>)
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	4631      	mov	r1, r6
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	47b8      	blx	r7
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	f43f af22 	beq.w	800c138 <_printf_float+0x98>
 800c2f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c2f8:	ea59 0303 	orrs.w	r3, r9, r3
 800c2fc:	d102      	bne.n	800c304 <_printf_float+0x264>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	07d9      	lsls	r1, r3, #31
 800c302:	d5d7      	bpl.n	800c2b4 <_printf_float+0x214>
 800c304:	9b05      	ldr	r3, [sp, #20]
 800c306:	465a      	mov	r2, fp
 800c308:	4631      	mov	r1, r6
 800c30a:	4628      	mov	r0, r5
 800c30c:	47b8      	blx	r7
 800c30e:	3001      	adds	r0, #1
 800c310:	f43f af12 	beq.w	800c138 <_printf_float+0x98>
 800c314:	f04f 0a00 	mov.w	sl, #0
 800c318:	f104 0b1a 	add.w	fp, r4, #26
 800c31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c31e:	425b      	negs	r3, r3
 800c320:	4553      	cmp	r3, sl
 800c322:	dc01      	bgt.n	800c328 <_printf_float+0x288>
 800c324:	464b      	mov	r3, r9
 800c326:	e794      	b.n	800c252 <_printf_float+0x1b2>
 800c328:	2301      	movs	r3, #1
 800c32a:	465a      	mov	r2, fp
 800c32c:	4631      	mov	r1, r6
 800c32e:	4628      	mov	r0, r5
 800c330:	47b8      	blx	r7
 800c332:	3001      	adds	r0, #1
 800c334:	f43f af00 	beq.w	800c138 <_printf_float+0x98>
 800c338:	f10a 0a01 	add.w	sl, sl, #1
 800c33c:	e7ee      	b.n	800c31c <_printf_float+0x27c>
 800c33e:	bf00      	nop
 800c340:	ffffffff 	.word	0xffffffff
 800c344:	7fefffff 	.word	0x7fefffff
 800c348:	080105e5 	.word	0x080105e5
 800c34c:	080105e9 	.word	0x080105e9
 800c350:	080105ed 	.word	0x080105ed
 800c354:	080105f1 	.word	0x080105f1
 800c358:	080105f5 	.word	0x080105f5
 800c35c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c35e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c362:	4553      	cmp	r3, sl
 800c364:	bfa8      	it	ge
 800c366:	4653      	movge	r3, sl
 800c368:	2b00      	cmp	r3, #0
 800c36a:	4699      	mov	r9, r3
 800c36c:	dc37      	bgt.n	800c3de <_printf_float+0x33e>
 800c36e:	2300      	movs	r3, #0
 800c370:	9307      	str	r3, [sp, #28]
 800c372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c376:	f104 021a 	add.w	r2, r4, #26
 800c37a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c37c:	9907      	ldr	r1, [sp, #28]
 800c37e:	9306      	str	r3, [sp, #24]
 800c380:	eba3 0309 	sub.w	r3, r3, r9
 800c384:	428b      	cmp	r3, r1
 800c386:	dc31      	bgt.n	800c3ec <_printf_float+0x34c>
 800c388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38a:	459a      	cmp	sl, r3
 800c38c:	dc3b      	bgt.n	800c406 <_printf_float+0x366>
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	07da      	lsls	r2, r3, #31
 800c392:	d438      	bmi.n	800c406 <_printf_float+0x366>
 800c394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c396:	ebaa 0903 	sub.w	r9, sl, r3
 800c39a:	9b06      	ldr	r3, [sp, #24]
 800c39c:	ebaa 0303 	sub.w	r3, sl, r3
 800c3a0:	4599      	cmp	r9, r3
 800c3a2:	bfa8      	it	ge
 800c3a4:	4699      	movge	r9, r3
 800c3a6:	f1b9 0f00 	cmp.w	r9, #0
 800c3aa:	dc34      	bgt.n	800c416 <_printf_float+0x376>
 800c3ac:	f04f 0800 	mov.w	r8, #0
 800c3b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3b4:	f104 0b1a 	add.w	fp, r4, #26
 800c3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c3be:	eba3 0309 	sub.w	r3, r3, r9
 800c3c2:	4543      	cmp	r3, r8
 800c3c4:	f77f af76 	ble.w	800c2b4 <_printf_float+0x214>
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	465a      	mov	r2, fp
 800c3cc:	4631      	mov	r1, r6
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	47b8      	blx	r7
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f43f aeb0 	beq.w	800c138 <_printf_float+0x98>
 800c3d8:	f108 0801 	add.w	r8, r8, #1
 800c3dc:	e7ec      	b.n	800c3b8 <_printf_float+0x318>
 800c3de:	4642      	mov	r2, r8
 800c3e0:	4631      	mov	r1, r6
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	47b8      	blx	r7
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d1c1      	bne.n	800c36e <_printf_float+0x2ce>
 800c3ea:	e6a5      	b.n	800c138 <_printf_float+0x98>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	9206      	str	r2, [sp, #24]
 800c3f4:	47b8      	blx	r7
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f43f ae9e 	beq.w	800c138 <_printf_float+0x98>
 800c3fc:	9b07      	ldr	r3, [sp, #28]
 800c3fe:	9a06      	ldr	r2, [sp, #24]
 800c400:	3301      	adds	r3, #1
 800c402:	9307      	str	r3, [sp, #28]
 800c404:	e7b9      	b.n	800c37a <_printf_float+0x2da>
 800c406:	9b05      	ldr	r3, [sp, #20]
 800c408:	465a      	mov	r2, fp
 800c40a:	4631      	mov	r1, r6
 800c40c:	4628      	mov	r0, r5
 800c40e:	47b8      	blx	r7
 800c410:	3001      	adds	r0, #1
 800c412:	d1bf      	bne.n	800c394 <_printf_float+0x2f4>
 800c414:	e690      	b.n	800c138 <_printf_float+0x98>
 800c416:	9a06      	ldr	r2, [sp, #24]
 800c418:	464b      	mov	r3, r9
 800c41a:	4442      	add	r2, r8
 800c41c:	4631      	mov	r1, r6
 800c41e:	4628      	mov	r0, r5
 800c420:	47b8      	blx	r7
 800c422:	3001      	adds	r0, #1
 800c424:	d1c2      	bne.n	800c3ac <_printf_float+0x30c>
 800c426:	e687      	b.n	800c138 <_printf_float+0x98>
 800c428:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c42c:	f1b9 0f01 	cmp.w	r9, #1
 800c430:	dc01      	bgt.n	800c436 <_printf_float+0x396>
 800c432:	07db      	lsls	r3, r3, #31
 800c434:	d536      	bpl.n	800c4a4 <_printf_float+0x404>
 800c436:	2301      	movs	r3, #1
 800c438:	4642      	mov	r2, r8
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	f43f ae79 	beq.w	800c138 <_printf_float+0x98>
 800c446:	9b05      	ldr	r3, [sp, #20]
 800c448:	465a      	mov	r2, fp
 800c44a:	4631      	mov	r1, r6
 800c44c:	4628      	mov	r0, r5
 800c44e:	47b8      	blx	r7
 800c450:	3001      	adds	r0, #1
 800c452:	f43f ae71 	beq.w	800c138 <_printf_float+0x98>
 800c456:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c45a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c462:	f109 39ff 	add.w	r9, r9, #4294967295
 800c466:	d018      	beq.n	800c49a <_printf_float+0x3fa>
 800c468:	464b      	mov	r3, r9
 800c46a:	f108 0201 	add.w	r2, r8, #1
 800c46e:	4631      	mov	r1, r6
 800c470:	4628      	mov	r0, r5
 800c472:	47b8      	blx	r7
 800c474:	3001      	adds	r0, #1
 800c476:	d10c      	bne.n	800c492 <_printf_float+0x3f2>
 800c478:	e65e      	b.n	800c138 <_printf_float+0x98>
 800c47a:	2301      	movs	r3, #1
 800c47c:	465a      	mov	r2, fp
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f ae57 	beq.w	800c138 <_printf_float+0x98>
 800c48a:	f108 0801 	add.w	r8, r8, #1
 800c48e:	45c8      	cmp	r8, r9
 800c490:	dbf3      	blt.n	800c47a <_printf_float+0x3da>
 800c492:	4653      	mov	r3, sl
 800c494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c498:	e6dc      	b.n	800c254 <_printf_float+0x1b4>
 800c49a:	f04f 0800 	mov.w	r8, #0
 800c49e:	f104 0b1a 	add.w	fp, r4, #26
 800c4a2:	e7f4      	b.n	800c48e <_printf_float+0x3ee>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4642      	mov	r2, r8
 800c4a8:	e7e1      	b.n	800c46e <_printf_float+0x3ce>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	464a      	mov	r2, r9
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b8      	blx	r7
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f43f ae3f 	beq.w	800c138 <_printf_float+0x98>
 800c4ba:	f108 0801 	add.w	r8, r8, #1
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4c2:	1a5b      	subs	r3, r3, r1
 800c4c4:	4543      	cmp	r3, r8
 800c4c6:	dcf0      	bgt.n	800c4aa <_printf_float+0x40a>
 800c4c8:	e6f8      	b.n	800c2bc <_printf_float+0x21c>
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	f104 0919 	add.w	r9, r4, #25
 800c4d2:	e7f4      	b.n	800c4be <_printf_float+0x41e>

0800c4d4 <_printf_common>:
 800c4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d8:	4616      	mov	r6, r2
 800c4da:	4698      	mov	r8, r3
 800c4dc:	688a      	ldr	r2, [r1, #8]
 800c4de:	690b      	ldr	r3, [r1, #16]
 800c4e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	bfb8      	it	lt
 800c4e8:	4613      	movlt	r3, r2
 800c4ea:	6033      	str	r3, [r6, #0]
 800c4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	b10a      	cbz	r2, 800c4fa <_printf_common+0x26>
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	6033      	str	r3, [r6, #0]
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	0699      	lsls	r1, r3, #26
 800c4fe:	bf42      	ittt	mi
 800c500:	6833      	ldrmi	r3, [r6, #0]
 800c502:	3302      	addmi	r3, #2
 800c504:	6033      	strmi	r3, [r6, #0]
 800c506:	6825      	ldr	r5, [r4, #0]
 800c508:	f015 0506 	ands.w	r5, r5, #6
 800c50c:	d106      	bne.n	800c51c <_printf_common+0x48>
 800c50e:	f104 0a19 	add.w	sl, r4, #25
 800c512:	68e3      	ldr	r3, [r4, #12]
 800c514:	6832      	ldr	r2, [r6, #0]
 800c516:	1a9b      	subs	r3, r3, r2
 800c518:	42ab      	cmp	r3, r5
 800c51a:	dc26      	bgt.n	800c56a <_printf_common+0x96>
 800c51c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	3b00      	subs	r3, #0
 800c524:	bf18      	it	ne
 800c526:	2301      	movne	r3, #1
 800c528:	0692      	lsls	r2, r2, #26
 800c52a:	d42b      	bmi.n	800c584 <_printf_common+0xb0>
 800c52c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c530:	4641      	mov	r1, r8
 800c532:	4638      	mov	r0, r7
 800c534:	47c8      	blx	r9
 800c536:	3001      	adds	r0, #1
 800c538:	d01e      	beq.n	800c578 <_printf_common+0xa4>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	6922      	ldr	r2, [r4, #16]
 800c53e:	f003 0306 	and.w	r3, r3, #6
 800c542:	2b04      	cmp	r3, #4
 800c544:	bf02      	ittt	eq
 800c546:	68e5      	ldreq	r5, [r4, #12]
 800c548:	6833      	ldreq	r3, [r6, #0]
 800c54a:	1aed      	subeq	r5, r5, r3
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	bf0c      	ite	eq
 800c550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c554:	2500      	movne	r5, #0
 800c556:	4293      	cmp	r3, r2
 800c558:	bfc4      	itt	gt
 800c55a:	1a9b      	subgt	r3, r3, r2
 800c55c:	18ed      	addgt	r5, r5, r3
 800c55e:	2600      	movs	r6, #0
 800c560:	341a      	adds	r4, #26
 800c562:	42b5      	cmp	r5, r6
 800c564:	d11a      	bne.n	800c59c <_printf_common+0xc8>
 800c566:	2000      	movs	r0, #0
 800c568:	e008      	b.n	800c57c <_printf_common+0xa8>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4652      	mov	r2, sl
 800c56e:	4641      	mov	r1, r8
 800c570:	4638      	mov	r0, r7
 800c572:	47c8      	blx	r9
 800c574:	3001      	adds	r0, #1
 800c576:	d103      	bne.n	800c580 <_printf_common+0xac>
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c580:	3501      	adds	r5, #1
 800c582:	e7c6      	b.n	800c512 <_printf_common+0x3e>
 800c584:	18e1      	adds	r1, r4, r3
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	2030      	movs	r0, #48	@ 0x30
 800c58a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c58e:	4422      	add	r2, r4
 800c590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c598:	3302      	adds	r3, #2
 800c59a:	e7c7      	b.n	800c52c <_printf_common+0x58>
 800c59c:	2301      	movs	r3, #1
 800c59e:	4622      	mov	r2, r4
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	47c8      	blx	r9
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d0e6      	beq.n	800c578 <_printf_common+0xa4>
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	e7d9      	b.n	800c562 <_printf_common+0x8e>
	...

0800c5b0 <_printf_i>:
 800c5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	7e0f      	ldrb	r7, [r1, #24]
 800c5b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5b8:	2f78      	cmp	r7, #120	@ 0x78
 800c5ba:	4691      	mov	r9, r2
 800c5bc:	4680      	mov	r8, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	469a      	mov	sl, r3
 800c5c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5c6:	d807      	bhi.n	800c5d8 <_printf_i+0x28>
 800c5c8:	2f62      	cmp	r7, #98	@ 0x62
 800c5ca:	d80a      	bhi.n	800c5e2 <_printf_i+0x32>
 800c5cc:	2f00      	cmp	r7, #0
 800c5ce:	f000 80d2 	beq.w	800c776 <_printf_i+0x1c6>
 800c5d2:	2f58      	cmp	r7, #88	@ 0x58
 800c5d4:	f000 80b9 	beq.w	800c74a <_printf_i+0x19a>
 800c5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5e0:	e03a      	b.n	800c658 <_printf_i+0xa8>
 800c5e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5e6:	2b15      	cmp	r3, #21
 800c5e8:	d8f6      	bhi.n	800c5d8 <_printf_i+0x28>
 800c5ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c5f0 <_printf_i+0x40>)
 800c5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c65d 	.word	0x0800c65d
 800c5f8:	0800c5d9 	.word	0x0800c5d9
 800c5fc:	0800c5d9 	.word	0x0800c5d9
 800c600:	0800c5d9 	.word	0x0800c5d9
 800c604:	0800c5d9 	.word	0x0800c5d9
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c5d9 	.word	0x0800c5d9
 800c610:	0800c5d9 	.word	0x0800c5d9
 800c614:	0800c5d9 	.word	0x0800c5d9
 800c618:	0800c5d9 	.word	0x0800c5d9
 800c61c:	0800c75d 	.word	0x0800c75d
 800c620:	0800c687 	.word	0x0800c687
 800c624:	0800c717 	.word	0x0800c717
 800c628:	0800c5d9 	.word	0x0800c5d9
 800c62c:	0800c5d9 	.word	0x0800c5d9
 800c630:	0800c77f 	.word	0x0800c77f
 800c634:	0800c5d9 	.word	0x0800c5d9
 800c638:	0800c687 	.word	0x0800c687
 800c63c:	0800c5d9 	.word	0x0800c5d9
 800c640:	0800c5d9 	.word	0x0800c5d9
 800c644:	0800c71f 	.word	0x0800c71f
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	1d1a      	adds	r2, r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6032      	str	r2, [r6, #0]
 800c650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c658:	2301      	movs	r3, #1
 800c65a:	e09d      	b.n	800c798 <_printf_i+0x1e8>
 800c65c:	6833      	ldr	r3, [r6, #0]
 800c65e:	6820      	ldr	r0, [r4, #0]
 800c660:	1d19      	adds	r1, r3, #4
 800c662:	6031      	str	r1, [r6, #0]
 800c664:	0606      	lsls	r6, r0, #24
 800c666:	d501      	bpl.n	800c66c <_printf_i+0xbc>
 800c668:	681d      	ldr	r5, [r3, #0]
 800c66a:	e003      	b.n	800c674 <_printf_i+0xc4>
 800c66c:	0645      	lsls	r5, r0, #25
 800c66e:	d5fb      	bpl.n	800c668 <_printf_i+0xb8>
 800c670:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c674:	2d00      	cmp	r5, #0
 800c676:	da03      	bge.n	800c680 <_printf_i+0xd0>
 800c678:	232d      	movs	r3, #45	@ 0x2d
 800c67a:	426d      	negs	r5, r5
 800c67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c680:	4859      	ldr	r0, [pc, #356]	@ (800c7e8 <_printf_i+0x238>)
 800c682:	230a      	movs	r3, #10
 800c684:	e011      	b.n	800c6aa <_printf_i+0xfa>
 800c686:	6821      	ldr	r1, [r4, #0]
 800c688:	6833      	ldr	r3, [r6, #0]
 800c68a:	0608      	lsls	r0, r1, #24
 800c68c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c690:	d402      	bmi.n	800c698 <_printf_i+0xe8>
 800c692:	0649      	lsls	r1, r1, #25
 800c694:	bf48      	it	mi
 800c696:	b2ad      	uxthmi	r5, r5
 800c698:	2f6f      	cmp	r7, #111	@ 0x6f
 800c69a:	4853      	ldr	r0, [pc, #332]	@ (800c7e8 <_printf_i+0x238>)
 800c69c:	6033      	str	r3, [r6, #0]
 800c69e:	bf14      	ite	ne
 800c6a0:	230a      	movne	r3, #10
 800c6a2:	2308      	moveq	r3, #8
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6aa:	6866      	ldr	r6, [r4, #4]
 800c6ac:	60a6      	str	r6, [r4, #8]
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	bfa2      	ittt	ge
 800c6b2:	6821      	ldrge	r1, [r4, #0]
 800c6b4:	f021 0104 	bicge.w	r1, r1, #4
 800c6b8:	6021      	strge	r1, [r4, #0]
 800c6ba:	b90d      	cbnz	r5, 800c6c0 <_printf_i+0x110>
 800c6bc:	2e00      	cmp	r6, #0
 800c6be:	d04b      	beq.n	800c758 <_printf_i+0x1a8>
 800c6c0:	4616      	mov	r6, r2
 800c6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c6ca:	5dc7      	ldrb	r7, [r0, r7]
 800c6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6d0:	462f      	mov	r7, r5
 800c6d2:	42bb      	cmp	r3, r7
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	d9f4      	bls.n	800c6c2 <_printf_i+0x112>
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d10b      	bne.n	800c6f4 <_printf_i+0x144>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	07df      	lsls	r7, r3, #31
 800c6e0:	d508      	bpl.n	800c6f4 <_printf_i+0x144>
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	6861      	ldr	r1, [r4, #4]
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	bfde      	ittt	le
 800c6ea:	2330      	movle	r3, #48	@ 0x30
 800c6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6f4:	1b92      	subs	r2, r2, r6
 800c6f6:	6122      	str	r2, [r4, #16]
 800c6f8:	f8cd a000 	str.w	sl, [sp]
 800c6fc:	464b      	mov	r3, r9
 800c6fe:	aa03      	add	r2, sp, #12
 800c700:	4621      	mov	r1, r4
 800c702:	4640      	mov	r0, r8
 800c704:	f7ff fee6 	bl	800c4d4 <_printf_common>
 800c708:	3001      	adds	r0, #1
 800c70a:	d14a      	bne.n	800c7a2 <_printf_i+0x1f2>
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	b004      	add	sp, #16
 800c712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	f043 0320 	orr.w	r3, r3, #32
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	4833      	ldr	r0, [pc, #204]	@ (800c7ec <_printf_i+0x23c>)
 800c720:	2778      	movs	r7, #120	@ 0x78
 800c722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	6831      	ldr	r1, [r6, #0]
 800c72a:	061f      	lsls	r7, r3, #24
 800c72c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c730:	d402      	bmi.n	800c738 <_printf_i+0x188>
 800c732:	065f      	lsls	r7, r3, #25
 800c734:	bf48      	it	mi
 800c736:	b2ad      	uxthmi	r5, r5
 800c738:	6031      	str	r1, [r6, #0]
 800c73a:	07d9      	lsls	r1, r3, #31
 800c73c:	bf44      	itt	mi
 800c73e:	f043 0320 	orrmi.w	r3, r3, #32
 800c742:	6023      	strmi	r3, [r4, #0]
 800c744:	b11d      	cbz	r5, 800c74e <_printf_i+0x19e>
 800c746:	2310      	movs	r3, #16
 800c748:	e7ac      	b.n	800c6a4 <_printf_i+0xf4>
 800c74a:	4827      	ldr	r0, [pc, #156]	@ (800c7e8 <_printf_i+0x238>)
 800c74c:	e7e9      	b.n	800c722 <_printf_i+0x172>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	f023 0320 	bic.w	r3, r3, #32
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	e7f6      	b.n	800c746 <_printf_i+0x196>
 800c758:	4616      	mov	r6, r2
 800c75a:	e7bd      	b.n	800c6d8 <_printf_i+0x128>
 800c75c:	6833      	ldr	r3, [r6, #0]
 800c75e:	6825      	ldr	r5, [r4, #0]
 800c760:	6961      	ldr	r1, [r4, #20]
 800c762:	1d18      	adds	r0, r3, #4
 800c764:	6030      	str	r0, [r6, #0]
 800c766:	062e      	lsls	r6, r5, #24
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	d501      	bpl.n	800c770 <_printf_i+0x1c0>
 800c76c:	6019      	str	r1, [r3, #0]
 800c76e:	e002      	b.n	800c776 <_printf_i+0x1c6>
 800c770:	0668      	lsls	r0, r5, #25
 800c772:	d5fb      	bpl.n	800c76c <_printf_i+0x1bc>
 800c774:	8019      	strh	r1, [r3, #0]
 800c776:	2300      	movs	r3, #0
 800c778:	6123      	str	r3, [r4, #16]
 800c77a:	4616      	mov	r6, r2
 800c77c:	e7bc      	b.n	800c6f8 <_printf_i+0x148>
 800c77e:	6833      	ldr	r3, [r6, #0]
 800c780:	1d1a      	adds	r2, r3, #4
 800c782:	6032      	str	r2, [r6, #0]
 800c784:	681e      	ldr	r6, [r3, #0]
 800c786:	6862      	ldr	r2, [r4, #4]
 800c788:	2100      	movs	r1, #0
 800c78a:	4630      	mov	r0, r6
 800c78c:	f7f3 fda8 	bl	80002e0 <memchr>
 800c790:	b108      	cbz	r0, 800c796 <_printf_i+0x1e6>
 800c792:	1b80      	subs	r0, r0, r6
 800c794:	6060      	str	r0, [r4, #4]
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	6123      	str	r3, [r4, #16]
 800c79a:	2300      	movs	r3, #0
 800c79c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7a0:	e7aa      	b.n	800c6f8 <_printf_i+0x148>
 800c7a2:	6923      	ldr	r3, [r4, #16]
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	47d0      	blx	sl
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d0ad      	beq.n	800c70c <_printf_i+0x15c>
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	079b      	lsls	r3, r3, #30
 800c7b4:	d413      	bmi.n	800c7de <_printf_i+0x22e>
 800c7b6:	68e0      	ldr	r0, [r4, #12]
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	4298      	cmp	r0, r3
 800c7bc:	bfb8      	it	lt
 800c7be:	4618      	movlt	r0, r3
 800c7c0:	e7a6      	b.n	800c710 <_printf_i+0x160>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	4649      	mov	r1, r9
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	47d0      	blx	sl
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	d09d      	beq.n	800c70c <_printf_i+0x15c>
 800c7d0:	3501      	adds	r5, #1
 800c7d2:	68e3      	ldr	r3, [r4, #12]
 800c7d4:	9903      	ldr	r1, [sp, #12]
 800c7d6:	1a5b      	subs	r3, r3, r1
 800c7d8:	42ab      	cmp	r3, r5
 800c7da:	dcf2      	bgt.n	800c7c2 <_printf_i+0x212>
 800c7dc:	e7eb      	b.n	800c7b6 <_printf_i+0x206>
 800c7de:	2500      	movs	r5, #0
 800c7e0:	f104 0619 	add.w	r6, r4, #25
 800c7e4:	e7f5      	b.n	800c7d2 <_printf_i+0x222>
 800c7e6:	bf00      	nop
 800c7e8:	080105f7 	.word	0x080105f7
 800c7ec:	08010608 	.word	0x08010608

0800c7f0 <_scanf_float>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	b087      	sub	sp, #28
 800c7f6:	4617      	mov	r7, r2
 800c7f8:	9303      	str	r3, [sp, #12]
 800c7fa:	688b      	ldr	r3, [r1, #8]
 800c7fc:	1e5a      	subs	r2, r3, #1
 800c7fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c802:	bf81      	itttt	hi
 800c804:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c808:	eb03 0b05 	addhi.w	fp, r3, r5
 800c80c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c810:	608b      	strhi	r3, [r1, #8]
 800c812:	680b      	ldr	r3, [r1, #0]
 800c814:	460a      	mov	r2, r1
 800c816:	f04f 0500 	mov.w	r5, #0
 800c81a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c81e:	f842 3b1c 	str.w	r3, [r2], #28
 800c822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c826:	4680      	mov	r8, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	bf98      	it	ls
 800c82c:	f04f 0b00 	movls.w	fp, #0
 800c830:	9201      	str	r2, [sp, #4]
 800c832:	4616      	mov	r6, r2
 800c834:	46aa      	mov	sl, r5
 800c836:	46a9      	mov	r9, r5
 800c838:	9502      	str	r5, [sp, #8]
 800c83a:	68a2      	ldr	r2, [r4, #8]
 800c83c:	b152      	cbz	r2, 800c854 <_scanf_float+0x64>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b4e      	cmp	r3, #78	@ 0x4e
 800c844:	d864      	bhi.n	800c910 <_scanf_float+0x120>
 800c846:	2b40      	cmp	r3, #64	@ 0x40
 800c848:	d83c      	bhi.n	800c8c4 <_scanf_float+0xd4>
 800c84a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c84e:	b2c8      	uxtb	r0, r1
 800c850:	280e      	cmp	r0, #14
 800c852:	d93a      	bls.n	800c8ca <_scanf_float+0xda>
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	d003      	beq.n	800c862 <_scanf_float+0x72>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c866:	f1ba 0f01 	cmp.w	sl, #1
 800c86a:	f200 8117 	bhi.w	800ca9c <_scanf_float+0x2ac>
 800c86e:	9b01      	ldr	r3, [sp, #4]
 800c870:	429e      	cmp	r6, r3
 800c872:	f200 8108 	bhi.w	800ca86 <_scanf_float+0x296>
 800c876:	2001      	movs	r0, #1
 800c878:	b007      	add	sp, #28
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c882:	2a0d      	cmp	r2, #13
 800c884:	d8e6      	bhi.n	800c854 <_scanf_float+0x64>
 800c886:	a101      	add	r1, pc, #4	@ (adr r1, 800c88c <_scanf_float+0x9c>)
 800c888:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c88c:	0800c9d3 	.word	0x0800c9d3
 800c890:	0800c855 	.word	0x0800c855
 800c894:	0800c855 	.word	0x0800c855
 800c898:	0800c855 	.word	0x0800c855
 800c89c:	0800ca33 	.word	0x0800ca33
 800c8a0:	0800ca0b 	.word	0x0800ca0b
 800c8a4:	0800c855 	.word	0x0800c855
 800c8a8:	0800c855 	.word	0x0800c855
 800c8ac:	0800c9e1 	.word	0x0800c9e1
 800c8b0:	0800c855 	.word	0x0800c855
 800c8b4:	0800c855 	.word	0x0800c855
 800c8b8:	0800c855 	.word	0x0800c855
 800c8bc:	0800c855 	.word	0x0800c855
 800c8c0:	0800c999 	.word	0x0800c999
 800c8c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c8c8:	e7db      	b.n	800c882 <_scanf_float+0x92>
 800c8ca:	290e      	cmp	r1, #14
 800c8cc:	d8c2      	bhi.n	800c854 <_scanf_float+0x64>
 800c8ce:	a001      	add	r0, pc, #4	@ (adr r0, 800c8d4 <_scanf_float+0xe4>)
 800c8d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8d4:	0800c989 	.word	0x0800c989
 800c8d8:	0800c855 	.word	0x0800c855
 800c8dc:	0800c989 	.word	0x0800c989
 800c8e0:	0800ca1f 	.word	0x0800ca1f
 800c8e4:	0800c855 	.word	0x0800c855
 800c8e8:	0800c931 	.word	0x0800c931
 800c8ec:	0800c96f 	.word	0x0800c96f
 800c8f0:	0800c96f 	.word	0x0800c96f
 800c8f4:	0800c96f 	.word	0x0800c96f
 800c8f8:	0800c96f 	.word	0x0800c96f
 800c8fc:	0800c96f 	.word	0x0800c96f
 800c900:	0800c96f 	.word	0x0800c96f
 800c904:	0800c96f 	.word	0x0800c96f
 800c908:	0800c96f 	.word	0x0800c96f
 800c90c:	0800c96f 	.word	0x0800c96f
 800c910:	2b6e      	cmp	r3, #110	@ 0x6e
 800c912:	d809      	bhi.n	800c928 <_scanf_float+0x138>
 800c914:	2b60      	cmp	r3, #96	@ 0x60
 800c916:	d8b2      	bhi.n	800c87e <_scanf_float+0x8e>
 800c918:	2b54      	cmp	r3, #84	@ 0x54
 800c91a:	d07b      	beq.n	800ca14 <_scanf_float+0x224>
 800c91c:	2b59      	cmp	r3, #89	@ 0x59
 800c91e:	d199      	bne.n	800c854 <_scanf_float+0x64>
 800c920:	2d07      	cmp	r5, #7
 800c922:	d197      	bne.n	800c854 <_scanf_float+0x64>
 800c924:	2508      	movs	r5, #8
 800c926:	e02c      	b.n	800c982 <_scanf_float+0x192>
 800c928:	2b74      	cmp	r3, #116	@ 0x74
 800c92a:	d073      	beq.n	800ca14 <_scanf_float+0x224>
 800c92c:	2b79      	cmp	r3, #121	@ 0x79
 800c92e:	e7f6      	b.n	800c91e <_scanf_float+0x12e>
 800c930:	6821      	ldr	r1, [r4, #0]
 800c932:	05c8      	lsls	r0, r1, #23
 800c934:	d51b      	bpl.n	800c96e <_scanf_float+0x17e>
 800c936:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c93a:	6021      	str	r1, [r4, #0]
 800c93c:	f109 0901 	add.w	r9, r9, #1
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	d003      	beq.n	800c94e <_scanf_float+0x15e>
 800c946:	3201      	adds	r2, #1
 800c948:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c94c:	60a2      	str	r2, [r4, #8]
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	3b01      	subs	r3, #1
 800c952:	60a3      	str	r3, [r4, #8]
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	3301      	adds	r3, #1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	2b00      	cmp	r3, #0
 800c960:	607b      	str	r3, [r7, #4]
 800c962:	f340 8087 	ble.w	800ca74 <_scanf_float+0x284>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	3301      	adds	r3, #1
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	e765      	b.n	800c83a <_scanf_float+0x4a>
 800c96e:	eb1a 0105 	adds.w	r1, sl, r5
 800c972:	f47f af6f 	bne.w	800c854 <_scanf_float+0x64>
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	460d      	mov	r5, r1
 800c980:	468a      	mov	sl, r1
 800c982:	f806 3b01 	strb.w	r3, [r6], #1
 800c986:	e7e2      	b.n	800c94e <_scanf_float+0x15e>
 800c988:	6822      	ldr	r2, [r4, #0]
 800c98a:	0610      	lsls	r0, r2, #24
 800c98c:	f57f af62 	bpl.w	800c854 <_scanf_float+0x64>
 800c990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c994:	6022      	str	r2, [r4, #0]
 800c996:	e7f4      	b.n	800c982 <_scanf_float+0x192>
 800c998:	f1ba 0f00 	cmp.w	sl, #0
 800c99c:	d10e      	bne.n	800c9bc <_scanf_float+0x1cc>
 800c99e:	f1b9 0f00 	cmp.w	r9, #0
 800c9a2:	d10e      	bne.n	800c9c2 <_scanf_float+0x1d2>
 800c9a4:	6822      	ldr	r2, [r4, #0]
 800c9a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9ae:	d108      	bne.n	800c9c2 <_scanf_float+0x1d2>
 800c9b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9b4:	6022      	str	r2, [r4, #0]
 800c9b6:	f04f 0a01 	mov.w	sl, #1
 800c9ba:	e7e2      	b.n	800c982 <_scanf_float+0x192>
 800c9bc:	f1ba 0f02 	cmp.w	sl, #2
 800c9c0:	d055      	beq.n	800ca6e <_scanf_float+0x27e>
 800c9c2:	2d01      	cmp	r5, #1
 800c9c4:	d002      	beq.n	800c9cc <_scanf_float+0x1dc>
 800c9c6:	2d04      	cmp	r5, #4
 800c9c8:	f47f af44 	bne.w	800c854 <_scanf_float+0x64>
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	b2ed      	uxtb	r5, r5
 800c9d0:	e7d7      	b.n	800c982 <_scanf_float+0x192>
 800c9d2:	f1ba 0f01 	cmp.w	sl, #1
 800c9d6:	f47f af3d 	bne.w	800c854 <_scanf_float+0x64>
 800c9da:	f04f 0a02 	mov.w	sl, #2
 800c9de:	e7d0      	b.n	800c982 <_scanf_float+0x192>
 800c9e0:	b97d      	cbnz	r5, 800ca02 <_scanf_float+0x212>
 800c9e2:	f1b9 0f00 	cmp.w	r9, #0
 800c9e6:	f47f af38 	bne.w	800c85a <_scanf_float+0x6a>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9f4:	f040 8101 	bne.w	800cbfa <_scanf_float+0x40a>
 800c9f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	2501      	movs	r5, #1
 800ca00:	e7bf      	b.n	800c982 <_scanf_float+0x192>
 800ca02:	2d03      	cmp	r5, #3
 800ca04:	d0e2      	beq.n	800c9cc <_scanf_float+0x1dc>
 800ca06:	2d05      	cmp	r5, #5
 800ca08:	e7de      	b.n	800c9c8 <_scanf_float+0x1d8>
 800ca0a:	2d02      	cmp	r5, #2
 800ca0c:	f47f af22 	bne.w	800c854 <_scanf_float+0x64>
 800ca10:	2503      	movs	r5, #3
 800ca12:	e7b6      	b.n	800c982 <_scanf_float+0x192>
 800ca14:	2d06      	cmp	r5, #6
 800ca16:	f47f af1d 	bne.w	800c854 <_scanf_float+0x64>
 800ca1a:	2507      	movs	r5, #7
 800ca1c:	e7b1      	b.n	800c982 <_scanf_float+0x192>
 800ca1e:	6822      	ldr	r2, [r4, #0]
 800ca20:	0591      	lsls	r1, r2, #22
 800ca22:	f57f af17 	bpl.w	800c854 <_scanf_float+0x64>
 800ca26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca30:	e7a7      	b.n	800c982 <_scanf_float+0x192>
 800ca32:	6822      	ldr	r2, [r4, #0]
 800ca34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ca38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ca3c:	d006      	beq.n	800ca4c <_scanf_float+0x25c>
 800ca3e:	0550      	lsls	r0, r2, #21
 800ca40:	f57f af08 	bpl.w	800c854 <_scanf_float+0x64>
 800ca44:	f1b9 0f00 	cmp.w	r9, #0
 800ca48:	f000 80d7 	beq.w	800cbfa <_scanf_float+0x40a>
 800ca4c:	0591      	lsls	r1, r2, #22
 800ca4e:	bf58      	it	pl
 800ca50:	9902      	ldrpl	r1, [sp, #8]
 800ca52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca56:	bf58      	it	pl
 800ca58:	eba9 0101 	subpl.w	r1, r9, r1
 800ca5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ca60:	bf58      	it	pl
 800ca62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca66:	6022      	str	r2, [r4, #0]
 800ca68:	f04f 0900 	mov.w	r9, #0
 800ca6c:	e789      	b.n	800c982 <_scanf_float+0x192>
 800ca6e:	f04f 0a03 	mov.w	sl, #3
 800ca72:	e786      	b.n	800c982 <_scanf_float+0x192>
 800ca74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4798      	blx	r3
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f43f aedb 	beq.w	800c83a <_scanf_float+0x4a>
 800ca84:	e6e6      	b.n	800c854 <_scanf_float+0x64>
 800ca86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca8e:	463a      	mov	r2, r7
 800ca90:	4640      	mov	r0, r8
 800ca92:	4798      	blx	r3
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	6123      	str	r3, [r4, #16]
 800ca9a:	e6e8      	b.n	800c86e <_scanf_float+0x7e>
 800ca9c:	1e6b      	subs	r3, r5, #1
 800ca9e:	2b06      	cmp	r3, #6
 800caa0:	d824      	bhi.n	800caec <_scanf_float+0x2fc>
 800caa2:	2d02      	cmp	r5, #2
 800caa4:	d836      	bhi.n	800cb14 <_scanf_float+0x324>
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	429e      	cmp	r6, r3
 800caaa:	f67f aee4 	bls.w	800c876 <_scanf_float+0x86>
 800caae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cab6:	463a      	mov	r2, r7
 800cab8:	4640      	mov	r0, r8
 800caba:	4798      	blx	r3
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	e7f0      	b.n	800caa6 <_scanf_float+0x2b6>
 800cac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cac8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cacc:	463a      	mov	r2, r7
 800cace:	4640      	mov	r0, r8
 800cad0:	4798      	blx	r3
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cadc:	fa5f fa8a 	uxtb.w	sl, sl
 800cae0:	f1ba 0f02 	cmp.w	sl, #2
 800cae4:	d1ee      	bne.n	800cac4 <_scanf_float+0x2d4>
 800cae6:	3d03      	subs	r5, #3
 800cae8:	b2ed      	uxtb	r5, r5
 800caea:	1b76      	subs	r6, r6, r5
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	05da      	lsls	r2, r3, #23
 800caf0:	d530      	bpl.n	800cb54 <_scanf_float+0x364>
 800caf2:	055b      	lsls	r3, r3, #21
 800caf4:	d511      	bpl.n	800cb1a <_scanf_float+0x32a>
 800caf6:	9b01      	ldr	r3, [sp, #4]
 800caf8:	429e      	cmp	r6, r3
 800cafa:	f67f aebc 	bls.w	800c876 <_scanf_float+0x86>
 800cafe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb06:	463a      	mov	r2, r7
 800cb08:	4640      	mov	r0, r8
 800cb0a:	4798      	blx	r3
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	e7f0      	b.n	800caf6 <_scanf_float+0x306>
 800cb14:	46aa      	mov	sl, r5
 800cb16:	46b3      	mov	fp, r6
 800cb18:	e7de      	b.n	800cad8 <_scanf_float+0x2e8>
 800cb1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	2965      	cmp	r1, #101	@ 0x65
 800cb22:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb26:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb2a:	6123      	str	r3, [r4, #16]
 800cb2c:	d00c      	beq.n	800cb48 <_scanf_float+0x358>
 800cb2e:	2945      	cmp	r1, #69	@ 0x45
 800cb30:	d00a      	beq.n	800cb48 <_scanf_float+0x358>
 800cb32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb36:	463a      	mov	r2, r7
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4798      	blx	r3
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb42:	3b01      	subs	r3, #1
 800cb44:	1eb5      	subs	r5, r6, #2
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb4c:	463a      	mov	r2, r7
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4798      	blx	r3
 800cb52:	462e      	mov	r6, r5
 800cb54:	6822      	ldr	r2, [r4, #0]
 800cb56:	f012 0210 	ands.w	r2, r2, #16
 800cb5a:	d001      	beq.n	800cb60 <_scanf_float+0x370>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	e68b      	b.n	800c878 <_scanf_float+0x88>
 800cb60:	7032      	strb	r2, [r6, #0]
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cb68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb6c:	d11a      	bne.n	800cba4 <_scanf_float+0x3b4>
 800cb6e:	9b02      	ldr	r3, [sp, #8]
 800cb70:	454b      	cmp	r3, r9
 800cb72:	eba3 0209 	sub.w	r2, r3, r9
 800cb76:	d121      	bne.n	800cbbc <_scanf_float+0x3cc>
 800cb78:	9901      	ldr	r1, [sp, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	f002 fb75 	bl	800f26c <_strtod_r>
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	6821      	ldr	r1, [r4, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f011 0f02 	tst.w	r1, #2
 800cb8c:	f103 0204 	add.w	r2, r3, #4
 800cb90:	d01f      	beq.n	800cbd2 <_scanf_float+0x3e2>
 800cb92:	9903      	ldr	r1, [sp, #12]
 800cb94:	600a      	str	r2, [r1, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	ed83 0b00 	vstr	d0, [r3]
 800cb9c:	68e3      	ldr	r3, [r4, #12]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	60e3      	str	r3, [r4, #12]
 800cba2:	e7db      	b.n	800cb5c <_scanf_float+0x36c>
 800cba4:	9b04      	ldr	r3, [sp, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0e6      	beq.n	800cb78 <_scanf_float+0x388>
 800cbaa:	9905      	ldr	r1, [sp, #20]
 800cbac:	230a      	movs	r3, #10
 800cbae:	3101      	adds	r1, #1
 800cbb0:	4640      	mov	r0, r8
 800cbb2:	f7ff f9db 	bl	800bf6c <_strtol_r>
 800cbb6:	9b04      	ldr	r3, [sp, #16]
 800cbb8:	9e05      	ldr	r6, [sp, #20]
 800cbba:	1ac2      	subs	r2, r0, r3
 800cbbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cbc0:	429e      	cmp	r6, r3
 800cbc2:	bf28      	it	cs
 800cbc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cbc8:	490d      	ldr	r1, [pc, #52]	@ (800cc00 <_scanf_float+0x410>)
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f000 f912 	bl	800cdf4 <siprintf>
 800cbd0:	e7d2      	b.n	800cb78 <_scanf_float+0x388>
 800cbd2:	f011 0f04 	tst.w	r1, #4
 800cbd6:	9903      	ldr	r1, [sp, #12]
 800cbd8:	600a      	str	r2, [r1, #0]
 800cbda:	d1dc      	bne.n	800cb96 <_scanf_float+0x3a6>
 800cbdc:	eeb4 0b40 	vcmp.f64	d0, d0
 800cbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe4:	681d      	ldr	r5, [r3, #0]
 800cbe6:	d705      	bvc.n	800cbf4 <_scanf_float+0x404>
 800cbe8:	4806      	ldr	r0, [pc, #24]	@ (800cc04 <_scanf_float+0x414>)
 800cbea:	f000 f9f9 	bl	800cfe0 <nanf>
 800cbee:	ed85 0a00 	vstr	s0, [r5]
 800cbf2:	e7d3      	b.n	800cb9c <_scanf_float+0x3ac>
 800cbf4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cbf8:	e7f9      	b.n	800cbee <_scanf_float+0x3fe>
 800cbfa:	f04f 0900 	mov.w	r9, #0
 800cbfe:	e630      	b.n	800c862 <_scanf_float+0x72>
 800cc00:	08010619 	.word	0x08010619
 800cc04:	080108ac 	.word	0x080108ac

0800cc08 <std>:
 800cc08:	2300      	movs	r3, #0
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc16:	6083      	str	r3, [r0, #8]
 800cc18:	8181      	strh	r1, [r0, #12]
 800cc1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc1c:	81c2      	strh	r2, [r0, #14]
 800cc1e:	6183      	str	r3, [r0, #24]
 800cc20:	4619      	mov	r1, r3
 800cc22:	2208      	movs	r2, #8
 800cc24:	305c      	adds	r0, #92	@ 0x5c
 800cc26:	f000 f948 	bl	800ceba <memset>
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <std+0x58>)
 800cc2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <std+0x5c>)
 800cc30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc32:	4b0d      	ldr	r3, [pc, #52]	@ (800cc68 <std+0x60>)
 800cc34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc36:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <std+0x64>)
 800cc38:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc70 <std+0x68>)
 800cc3c:	6224      	str	r4, [r4, #32]
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	d006      	beq.n	800cc50 <std+0x48>
 800cc42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc46:	4294      	cmp	r4, r2
 800cc48:	d002      	beq.n	800cc50 <std+0x48>
 800cc4a:	33d0      	adds	r3, #208	@ 0xd0
 800cc4c:	429c      	cmp	r4, r3
 800cc4e:	d105      	bne.n	800cc5c <std+0x54>
 800cc50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc58:	f000 b9be 	b.w	800cfd8 <__retarget_lock_init_recursive>
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	bf00      	nop
 800cc60:	0800ce35 	.word	0x0800ce35
 800cc64:	0800ce57 	.word	0x0800ce57
 800cc68:	0800ce8f 	.word	0x0800ce8f
 800cc6c:	0800ceb3 	.word	0x0800ceb3
 800cc70:	240004a0 	.word	0x240004a0

0800cc74 <stdio_exit_handler>:
 800cc74:	4a02      	ldr	r2, [pc, #8]	@ (800cc80 <stdio_exit_handler+0xc>)
 800cc76:	4903      	ldr	r1, [pc, #12]	@ (800cc84 <stdio_exit_handler+0x10>)
 800cc78:	4803      	ldr	r0, [pc, #12]	@ (800cc88 <stdio_exit_handler+0x14>)
 800cc7a:	f000 b869 	b.w	800cd50 <_fwalk_sglue>
 800cc7e:	bf00      	nop
 800cc80:	24000024 	.word	0x24000024
 800cc84:	0800f631 	.word	0x0800f631
 800cc88:	24000034 	.word	0x24000034

0800cc8c <cleanup_stdio>:
 800cc8c:	6841      	ldr	r1, [r0, #4]
 800cc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc0 <cleanup_stdio+0x34>)
 800cc90:	4299      	cmp	r1, r3
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	d001      	beq.n	800cc9c <cleanup_stdio+0x10>
 800cc98:	f002 fcca 	bl	800f630 <_fflush_r>
 800cc9c:	68a1      	ldr	r1, [r4, #8]
 800cc9e:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <cleanup_stdio+0x38>)
 800cca0:	4299      	cmp	r1, r3
 800cca2:	d002      	beq.n	800ccaa <cleanup_stdio+0x1e>
 800cca4:	4620      	mov	r0, r4
 800cca6:	f002 fcc3 	bl	800f630 <_fflush_r>
 800ccaa:	68e1      	ldr	r1, [r4, #12]
 800ccac:	4b06      	ldr	r3, [pc, #24]	@ (800ccc8 <cleanup_stdio+0x3c>)
 800ccae:	4299      	cmp	r1, r3
 800ccb0:	d004      	beq.n	800ccbc <cleanup_stdio+0x30>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb8:	f002 bcba 	b.w	800f630 <_fflush_r>
 800ccbc:	bd10      	pop	{r4, pc}
 800ccbe:	bf00      	nop
 800ccc0:	240004a0 	.word	0x240004a0
 800ccc4:	24000508 	.word	0x24000508
 800ccc8:	24000570 	.word	0x24000570

0800cccc <global_stdio_init.part.0>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	4b0b      	ldr	r3, [pc, #44]	@ (800ccfc <global_stdio_init.part.0+0x30>)
 800ccd0:	4c0b      	ldr	r4, [pc, #44]	@ (800cd00 <global_stdio_init.part.0+0x34>)
 800ccd2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd04 <global_stdio_init.part.0+0x38>)
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2104      	movs	r1, #4
 800ccdc:	f7ff ff94 	bl	800cc08 <std>
 800cce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cce4:	2201      	movs	r2, #1
 800cce6:	2109      	movs	r1, #9
 800cce8:	f7ff ff8e 	bl	800cc08 <std>
 800ccec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf6:	2112      	movs	r1, #18
 800ccf8:	f7ff bf86 	b.w	800cc08 <std>
 800ccfc:	240005d8 	.word	0x240005d8
 800cd00:	240004a0 	.word	0x240004a0
 800cd04:	0800cc75 	.word	0x0800cc75

0800cd08 <__sfp_lock_acquire>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__sfp_lock_acquire+0x8>)
 800cd0a:	f000 b966 	b.w	800cfda <__retarget_lock_acquire_recursive>
 800cd0e:	bf00      	nop
 800cd10:	240005e1 	.word	0x240005e1

0800cd14 <__sfp_lock_release>:
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <__sfp_lock_release+0x8>)
 800cd16:	f000 b961 	b.w	800cfdc <__retarget_lock_release_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	240005e1 	.word	0x240005e1

0800cd20 <__sinit>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	4604      	mov	r4, r0
 800cd24:	f7ff fff0 	bl	800cd08 <__sfp_lock_acquire>
 800cd28:	6a23      	ldr	r3, [r4, #32]
 800cd2a:	b11b      	cbz	r3, 800cd34 <__sinit+0x14>
 800cd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd30:	f7ff bff0 	b.w	800cd14 <__sfp_lock_release>
 800cd34:	4b04      	ldr	r3, [pc, #16]	@ (800cd48 <__sinit+0x28>)
 800cd36:	6223      	str	r3, [r4, #32]
 800cd38:	4b04      	ldr	r3, [pc, #16]	@ (800cd4c <__sinit+0x2c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1f5      	bne.n	800cd2c <__sinit+0xc>
 800cd40:	f7ff ffc4 	bl	800cccc <global_stdio_init.part.0>
 800cd44:	e7f2      	b.n	800cd2c <__sinit+0xc>
 800cd46:	bf00      	nop
 800cd48:	0800cc8d 	.word	0x0800cc8d
 800cd4c:	240005d8 	.word	0x240005d8

0800cd50 <_fwalk_sglue>:
 800cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd54:	4607      	mov	r7, r0
 800cd56:	4688      	mov	r8, r1
 800cd58:	4614      	mov	r4, r2
 800cd5a:	2600      	movs	r6, #0
 800cd5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd60:	f1b9 0901 	subs.w	r9, r9, #1
 800cd64:	d505      	bpl.n	800cd72 <_fwalk_sglue+0x22>
 800cd66:	6824      	ldr	r4, [r4, #0]
 800cd68:	2c00      	cmp	r4, #0
 800cd6a:	d1f7      	bne.n	800cd5c <_fwalk_sglue+0xc>
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd72:	89ab      	ldrh	r3, [r5, #12]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d907      	bls.n	800cd88 <_fwalk_sglue+0x38>
 800cd78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	d003      	beq.n	800cd88 <_fwalk_sglue+0x38>
 800cd80:	4629      	mov	r1, r5
 800cd82:	4638      	mov	r0, r7
 800cd84:	47c0      	blx	r8
 800cd86:	4306      	orrs	r6, r0
 800cd88:	3568      	adds	r5, #104	@ 0x68
 800cd8a:	e7e9      	b.n	800cd60 <_fwalk_sglue+0x10>

0800cd8c <sniprintf>:
 800cd8c:	b40c      	push	{r2, r3}
 800cd8e:	b530      	push	{r4, r5, lr}
 800cd90:	4b17      	ldr	r3, [pc, #92]	@ (800cdf0 <sniprintf+0x64>)
 800cd92:	1e0c      	subs	r4, r1, #0
 800cd94:	681d      	ldr	r5, [r3, #0]
 800cd96:	b09d      	sub	sp, #116	@ 0x74
 800cd98:	da08      	bge.n	800cdac <sniprintf+0x20>
 800cd9a:	238b      	movs	r3, #139	@ 0x8b
 800cd9c:	602b      	str	r3, [r5, #0]
 800cd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cda2:	b01d      	add	sp, #116	@ 0x74
 800cda4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cda8:	b002      	add	sp, #8
 800cdaa:	4770      	bx	lr
 800cdac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cdb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdb4:	bf14      	ite	ne
 800cdb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cdba:	4623      	moveq	r3, r4
 800cdbc:	9304      	str	r3, [sp, #16]
 800cdbe:	9307      	str	r3, [sp, #28]
 800cdc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdc4:	9002      	str	r0, [sp, #8]
 800cdc6:	9006      	str	r0, [sp, #24]
 800cdc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdce:	ab21      	add	r3, sp, #132	@ 0x84
 800cdd0:	a902      	add	r1, sp, #8
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	f002 faab 	bl	800f330 <_svfiprintf_r>
 800cdda:	1c43      	adds	r3, r0, #1
 800cddc:	bfbc      	itt	lt
 800cdde:	238b      	movlt	r3, #139	@ 0x8b
 800cde0:	602b      	strlt	r3, [r5, #0]
 800cde2:	2c00      	cmp	r4, #0
 800cde4:	d0dd      	beq.n	800cda2 <sniprintf+0x16>
 800cde6:	9b02      	ldr	r3, [sp, #8]
 800cde8:	2200      	movs	r2, #0
 800cdea:	701a      	strb	r2, [r3, #0]
 800cdec:	e7d9      	b.n	800cda2 <sniprintf+0x16>
 800cdee:	bf00      	nop
 800cdf0:	24000030 	.word	0x24000030

0800cdf4 <siprintf>:
 800cdf4:	b40e      	push	{r1, r2, r3}
 800cdf6:	b500      	push	{lr}
 800cdf8:	b09c      	sub	sp, #112	@ 0x70
 800cdfa:	ab1d      	add	r3, sp, #116	@ 0x74
 800cdfc:	9002      	str	r0, [sp, #8]
 800cdfe:	9006      	str	r0, [sp, #24]
 800ce00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce04:	4809      	ldr	r0, [pc, #36]	@ (800ce2c <siprintf+0x38>)
 800ce06:	9107      	str	r1, [sp, #28]
 800ce08:	9104      	str	r1, [sp, #16]
 800ce0a:	4909      	ldr	r1, [pc, #36]	@ (800ce30 <siprintf+0x3c>)
 800ce0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce10:	9105      	str	r1, [sp, #20]
 800ce12:	6800      	ldr	r0, [r0, #0]
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	a902      	add	r1, sp, #8
 800ce18:	f002 fa8a 	bl	800f330 <_svfiprintf_r>
 800ce1c:	9b02      	ldr	r3, [sp, #8]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	b01c      	add	sp, #112	@ 0x70
 800ce24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce28:	b003      	add	sp, #12
 800ce2a:	4770      	bx	lr
 800ce2c:	24000030 	.word	0x24000030
 800ce30:	ffff0208 	.word	0xffff0208

0800ce34 <__sread>:
 800ce34:	b510      	push	{r4, lr}
 800ce36:	460c      	mov	r4, r1
 800ce38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce3c:	f000 f87e 	bl	800cf3c <_read_r>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	bfab      	itete	ge
 800ce44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce46:	89a3      	ldrhlt	r3, [r4, #12]
 800ce48:	181b      	addge	r3, r3, r0
 800ce4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce4e:	bfac      	ite	ge
 800ce50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce52:	81a3      	strhlt	r3, [r4, #12]
 800ce54:	bd10      	pop	{r4, pc}

0800ce56 <__swrite>:
 800ce56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	461f      	mov	r7, r3
 800ce5c:	898b      	ldrh	r3, [r1, #12]
 800ce5e:	05db      	lsls	r3, r3, #23
 800ce60:	4605      	mov	r5, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	4616      	mov	r6, r2
 800ce66:	d505      	bpl.n	800ce74 <__swrite+0x1e>
 800ce68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f000 f852 	bl	800cf18 <_lseek_r>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	4632      	mov	r2, r6
 800ce82:	463b      	mov	r3, r7
 800ce84:	4628      	mov	r0, r5
 800ce86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8a:	f000 b869 	b.w	800cf60 <_write_r>

0800ce8e <__sseek>:
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	460c      	mov	r4, r1
 800ce92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce96:	f000 f83f 	bl	800cf18 <_lseek_r>
 800ce9a:	1c43      	adds	r3, r0, #1
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	bf15      	itete	ne
 800cea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ceaa:	81a3      	strheq	r3, [r4, #12]
 800ceac:	bf18      	it	ne
 800ceae:	81a3      	strhne	r3, [r4, #12]
 800ceb0:	bd10      	pop	{r4, pc}

0800ceb2 <__sclose>:
 800ceb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb6:	f000 b81f 	b.w	800cef8 <_close_r>

0800ceba <memset>:
 800ceba:	4402      	add	r2, r0
 800cebc:	4603      	mov	r3, r0
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d100      	bne.n	800cec4 <memset+0xa>
 800cec2:	4770      	bx	lr
 800cec4:	f803 1b01 	strb.w	r1, [r3], #1
 800cec8:	e7f9      	b.n	800cebe <memset+0x4>

0800ceca <strncmp>:
 800ceca:	b510      	push	{r4, lr}
 800cecc:	b16a      	cbz	r2, 800ceea <strncmp+0x20>
 800cece:	3901      	subs	r1, #1
 800ced0:	1884      	adds	r4, r0, r2
 800ced2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d103      	bne.n	800cee6 <strncmp+0x1c>
 800cede:	42a0      	cmp	r0, r4
 800cee0:	d001      	beq.n	800cee6 <strncmp+0x1c>
 800cee2:	2a00      	cmp	r2, #0
 800cee4:	d1f5      	bne.n	800ced2 <strncmp+0x8>
 800cee6:	1ad0      	subs	r0, r2, r3
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	4610      	mov	r0, r2
 800ceec:	e7fc      	b.n	800cee8 <strncmp+0x1e>
	...

0800cef0 <_localeconv_r>:
 800cef0:	4800      	ldr	r0, [pc, #0]	@ (800cef4 <_localeconv_r+0x4>)
 800cef2:	4770      	bx	lr
 800cef4:	24000170 	.word	0x24000170

0800cef8 <_close_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4d06      	ldr	r5, [pc, #24]	@ (800cf14 <_close_r+0x1c>)
 800cefc:	2300      	movs	r3, #0
 800cefe:	4604      	mov	r4, r0
 800cf00:	4608      	mov	r0, r1
 800cf02:	602b      	str	r3, [r5, #0]
 800cf04:	f7f4 ff4e 	bl	8001da4 <_close>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_close_r+0x1a>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_close_r+0x1a>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	240005dc 	.word	0x240005dc

0800cf18 <_lseek_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	@ (800cf38 <_lseek_r+0x20>)
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	4608      	mov	r0, r1
 800cf20:	4611      	mov	r1, r2
 800cf22:	2200      	movs	r2, #0
 800cf24:	602a      	str	r2, [r5, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	f7f4 ff63 	bl	8001df2 <_lseek>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_lseek_r+0x1e>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_lseek_r+0x1e>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	240005dc 	.word	0x240005dc

0800cf3c <_read_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4d07      	ldr	r5, [pc, #28]	@ (800cf5c <_read_r+0x20>)
 800cf40:	4604      	mov	r4, r0
 800cf42:	4608      	mov	r0, r1
 800cf44:	4611      	mov	r1, r2
 800cf46:	2200      	movs	r2, #0
 800cf48:	602a      	str	r2, [r5, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	f7f4 fef1 	bl	8001d32 <_read>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_read_r+0x1e>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_read_r+0x1e>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	240005dc 	.word	0x240005dc

0800cf60 <_write_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4d07      	ldr	r5, [pc, #28]	@ (800cf80 <_write_r+0x20>)
 800cf64:	4604      	mov	r4, r0
 800cf66:	4608      	mov	r0, r1
 800cf68:	4611      	mov	r1, r2
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	602a      	str	r2, [r5, #0]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	f7f4 fefc 	bl	8001d6c <_write>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d102      	bne.n	800cf7e <_write_r+0x1e>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b103      	cbz	r3, 800cf7e <_write_r+0x1e>
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	240005dc 	.word	0x240005dc

0800cf84 <__errno>:
 800cf84:	4b01      	ldr	r3, [pc, #4]	@ (800cf8c <__errno+0x8>)
 800cf86:	6818      	ldr	r0, [r3, #0]
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	24000030 	.word	0x24000030

0800cf90 <__libc_init_array>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	4d0d      	ldr	r5, [pc, #52]	@ (800cfc8 <__libc_init_array+0x38>)
 800cf94:	4c0d      	ldr	r4, [pc, #52]	@ (800cfcc <__libc_init_array+0x3c>)
 800cf96:	1b64      	subs	r4, r4, r5
 800cf98:	10a4      	asrs	r4, r4, #2
 800cf9a:	2600      	movs	r6, #0
 800cf9c:	42a6      	cmp	r6, r4
 800cf9e:	d109      	bne.n	800cfb4 <__libc_init_array+0x24>
 800cfa0:	4d0b      	ldr	r5, [pc, #44]	@ (800cfd0 <__libc_init_array+0x40>)
 800cfa2:	4c0c      	ldr	r4, [pc, #48]	@ (800cfd4 <__libc_init_array+0x44>)
 800cfa4:	f003 fa22 	bl	80103ec <_init>
 800cfa8:	1b64      	subs	r4, r4, r5
 800cfaa:	10a4      	asrs	r4, r4, #2
 800cfac:	2600      	movs	r6, #0
 800cfae:	42a6      	cmp	r6, r4
 800cfb0:	d105      	bne.n	800cfbe <__libc_init_array+0x2e>
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb8:	4798      	blx	r3
 800cfba:	3601      	adds	r6, #1
 800cfbc:	e7ee      	b.n	800cf9c <__libc_init_array+0xc>
 800cfbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfc2:	4798      	blx	r3
 800cfc4:	3601      	adds	r6, #1
 800cfc6:	e7f2      	b.n	800cfae <__libc_init_array+0x1e>
 800cfc8:	08010918 	.word	0x08010918
 800cfcc:	08010918 	.word	0x08010918
 800cfd0:	08010918 	.word	0x08010918
 800cfd4:	0801091c 	.word	0x0801091c

0800cfd8 <__retarget_lock_init_recursive>:
 800cfd8:	4770      	bx	lr

0800cfda <__retarget_lock_acquire_recursive>:
 800cfda:	4770      	bx	lr

0800cfdc <__retarget_lock_release_recursive>:
 800cfdc:	4770      	bx	lr
	...

0800cfe0 <nanf>:
 800cfe0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cfe8 <nanf+0x8>
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	7fc00000 	.word	0x7fc00000

0800cfec <quorem>:
 800cfec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	6903      	ldr	r3, [r0, #16]
 800cff2:	690c      	ldr	r4, [r1, #16]
 800cff4:	42a3      	cmp	r3, r4
 800cff6:	4607      	mov	r7, r0
 800cff8:	db7e      	blt.n	800d0f8 <quorem+0x10c>
 800cffa:	3c01      	subs	r4, #1
 800cffc:	f101 0814 	add.w	r8, r1, #20
 800d000:	00a3      	lsls	r3, r4, #2
 800d002:	f100 0514 	add.w	r5, r0, #20
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d00c:	9301      	str	r3, [sp, #4]
 800d00e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d016:	3301      	adds	r3, #1
 800d018:	429a      	cmp	r2, r3
 800d01a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d01e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d022:	d32e      	bcc.n	800d082 <quorem+0x96>
 800d024:	f04f 0a00 	mov.w	sl, #0
 800d028:	46c4      	mov	ip, r8
 800d02a:	46ae      	mov	lr, r5
 800d02c:	46d3      	mov	fp, sl
 800d02e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d032:	b298      	uxth	r0, r3
 800d034:	fb06 a000 	mla	r0, r6, r0, sl
 800d038:	0c02      	lsrs	r2, r0, #16
 800d03a:	0c1b      	lsrs	r3, r3, #16
 800d03c:	fb06 2303 	mla	r3, r6, r3, r2
 800d040:	f8de 2000 	ldr.w	r2, [lr]
 800d044:	b280      	uxth	r0, r0
 800d046:	b292      	uxth	r2, r2
 800d048:	1a12      	subs	r2, r2, r0
 800d04a:	445a      	add	r2, fp
 800d04c:	f8de 0000 	ldr.w	r0, [lr]
 800d050:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d054:	b29b      	uxth	r3, r3
 800d056:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d05a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d05e:	b292      	uxth	r2, r2
 800d060:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d064:	45e1      	cmp	r9, ip
 800d066:	f84e 2b04 	str.w	r2, [lr], #4
 800d06a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d06e:	d2de      	bcs.n	800d02e <quorem+0x42>
 800d070:	9b00      	ldr	r3, [sp, #0]
 800d072:	58eb      	ldr	r3, [r5, r3]
 800d074:	b92b      	cbnz	r3, 800d082 <quorem+0x96>
 800d076:	9b01      	ldr	r3, [sp, #4]
 800d078:	3b04      	subs	r3, #4
 800d07a:	429d      	cmp	r5, r3
 800d07c:	461a      	mov	r2, r3
 800d07e:	d32f      	bcc.n	800d0e0 <quorem+0xf4>
 800d080:	613c      	str	r4, [r7, #16]
 800d082:	4638      	mov	r0, r7
 800d084:	f001 f956 	bl	800e334 <__mcmp>
 800d088:	2800      	cmp	r0, #0
 800d08a:	db25      	blt.n	800d0d8 <quorem+0xec>
 800d08c:	4629      	mov	r1, r5
 800d08e:	2000      	movs	r0, #0
 800d090:	f858 2b04 	ldr.w	r2, [r8], #4
 800d094:	f8d1 c000 	ldr.w	ip, [r1]
 800d098:	fa1f fe82 	uxth.w	lr, r2
 800d09c:	fa1f f38c 	uxth.w	r3, ip
 800d0a0:	eba3 030e 	sub.w	r3, r3, lr
 800d0a4:	4403      	add	r3, r0
 800d0a6:	0c12      	lsrs	r2, r2, #16
 800d0a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0b6:	45c1      	cmp	r9, r8
 800d0b8:	f841 3b04 	str.w	r3, [r1], #4
 800d0bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0c0:	d2e6      	bcs.n	800d090 <quorem+0xa4>
 800d0c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0ca:	b922      	cbnz	r2, 800d0d6 <quorem+0xea>
 800d0cc:	3b04      	subs	r3, #4
 800d0ce:	429d      	cmp	r5, r3
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	d30b      	bcc.n	800d0ec <quorem+0x100>
 800d0d4:	613c      	str	r4, [r7, #16]
 800d0d6:	3601      	adds	r6, #1
 800d0d8:	4630      	mov	r0, r6
 800d0da:	b003      	add	sp, #12
 800d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e0:	6812      	ldr	r2, [r2, #0]
 800d0e2:	3b04      	subs	r3, #4
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	d1cb      	bne.n	800d080 <quorem+0x94>
 800d0e8:	3c01      	subs	r4, #1
 800d0ea:	e7c6      	b.n	800d07a <quorem+0x8e>
 800d0ec:	6812      	ldr	r2, [r2, #0]
 800d0ee:	3b04      	subs	r3, #4
 800d0f0:	2a00      	cmp	r2, #0
 800d0f2:	d1ef      	bne.n	800d0d4 <quorem+0xe8>
 800d0f4:	3c01      	subs	r4, #1
 800d0f6:	e7ea      	b.n	800d0ce <quorem+0xe2>
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	e7ee      	b.n	800d0da <quorem+0xee>
 800d0fc:	0000      	movs	r0, r0
	...

0800d100 <_dtoa_r>:
 800d100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	ed2d 8b02 	vpush	{d8}
 800d108:	69c7      	ldr	r7, [r0, #28]
 800d10a:	b091      	sub	sp, #68	@ 0x44
 800d10c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d110:	ec55 4b10 	vmov	r4, r5, d0
 800d114:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d116:	9107      	str	r1, [sp, #28]
 800d118:	4681      	mov	r9, r0
 800d11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d11c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d11e:	b97f      	cbnz	r7, 800d140 <_dtoa_r+0x40>
 800d120:	2010      	movs	r0, #16
 800d122:	f000 fd8d 	bl	800dc40 <malloc>
 800d126:	4602      	mov	r2, r0
 800d128:	f8c9 001c 	str.w	r0, [r9, #28]
 800d12c:	b920      	cbnz	r0, 800d138 <_dtoa_r+0x38>
 800d12e:	4ba0      	ldr	r3, [pc, #640]	@ (800d3b0 <_dtoa_r+0x2b0>)
 800d130:	21ef      	movs	r1, #239	@ 0xef
 800d132:	48a0      	ldr	r0, [pc, #640]	@ (800d3b4 <_dtoa_r+0x2b4>)
 800d134:	f002 fae4 	bl	800f700 <__assert_func>
 800d138:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d13c:	6007      	str	r7, [r0, #0]
 800d13e:	60c7      	str	r7, [r0, #12]
 800d140:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d144:	6819      	ldr	r1, [r3, #0]
 800d146:	b159      	cbz	r1, 800d160 <_dtoa_r+0x60>
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	604a      	str	r2, [r1, #4]
 800d14c:	2301      	movs	r3, #1
 800d14e:	4093      	lsls	r3, r2
 800d150:	608b      	str	r3, [r1, #8]
 800d152:	4648      	mov	r0, r9
 800d154:	f000 fe6a 	bl	800de2c <_Bfree>
 800d158:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	1e2b      	subs	r3, r5, #0
 800d162:	bfbb      	ittet	lt
 800d164:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d168:	9303      	strlt	r3, [sp, #12]
 800d16a:	2300      	movge	r3, #0
 800d16c:	2201      	movlt	r2, #1
 800d16e:	bfac      	ite	ge
 800d170:	6033      	strge	r3, [r6, #0]
 800d172:	6032      	strlt	r2, [r6, #0]
 800d174:	4b90      	ldr	r3, [pc, #576]	@ (800d3b8 <_dtoa_r+0x2b8>)
 800d176:	9e03      	ldr	r6, [sp, #12]
 800d178:	43b3      	bics	r3, r6
 800d17a:	d110      	bne.n	800d19e <_dtoa_r+0x9e>
 800d17c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d17e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d188:	4323      	orrs	r3, r4
 800d18a:	f000 84de 	beq.w	800db4a <_dtoa_r+0xa4a>
 800d18e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d190:	4f8a      	ldr	r7, [pc, #552]	@ (800d3bc <_dtoa_r+0x2bc>)
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 84e0 	beq.w	800db58 <_dtoa_r+0xa58>
 800d198:	1cfb      	adds	r3, r7, #3
 800d19a:	f000 bcdb 	b.w	800db54 <_dtoa_r+0xa54>
 800d19e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d1a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1aa:	d10a      	bne.n	800d1c2 <_dtoa_r+0xc2>
 800d1ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d1b4:	b113      	cbz	r3, 800d1bc <_dtoa_r+0xbc>
 800d1b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d1b8:	4b81      	ldr	r3, [pc, #516]	@ (800d3c0 <_dtoa_r+0x2c0>)
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	4f81      	ldr	r7, [pc, #516]	@ (800d3c4 <_dtoa_r+0x2c4>)
 800d1be:	f000 bccb 	b.w	800db58 <_dtoa_r+0xa58>
 800d1c2:	aa0e      	add	r2, sp, #56	@ 0x38
 800d1c4:	a90f      	add	r1, sp, #60	@ 0x3c
 800d1c6:	4648      	mov	r0, r9
 800d1c8:	eeb0 0b48 	vmov.f64	d0, d8
 800d1cc:	f001 f9d2 	bl	800e574 <__d2b>
 800d1d0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d1d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1d6:	9001      	str	r0, [sp, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d045      	beq.n	800d268 <_dtoa_r+0x168>
 800d1dc:	eeb0 7b48 	vmov.f64	d7, d8
 800d1e0:	ee18 1a90 	vmov	r1, s17
 800d1e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d1e8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d1ec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d1f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d1f4:	2500      	movs	r5, #0
 800d1f6:	ee07 1a90 	vmov	s15, r1
 800d1fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d1fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d398 <_dtoa_r+0x298>
 800d202:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d206:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d3a0 <_dtoa_r+0x2a0>
 800d20a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d20e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d3a8 <_dtoa_r+0x2a8>
 800d212:	ee07 3a90 	vmov	s15, r3
 800d216:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d21a:	eeb0 7b46 	vmov.f64	d7, d6
 800d21e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d222:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d226:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	ee16 8a90 	vmov	r8, s13
 800d232:	d508      	bpl.n	800d246 <_dtoa_r+0x146>
 800d234:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d238:	eeb4 6b47 	vcmp.f64	d6, d7
 800d23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d240:	bf18      	it	ne
 800d242:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d246:	f1b8 0f16 	cmp.w	r8, #22
 800d24a:	d82b      	bhi.n	800d2a4 <_dtoa_r+0x1a4>
 800d24c:	495e      	ldr	r1, [pc, #376]	@ (800d3c8 <_dtoa_r+0x2c8>)
 800d24e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d252:	ed91 7b00 	vldr	d7, [r1]
 800d256:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25e:	d501      	bpl.n	800d264 <_dtoa_r+0x164>
 800d260:	f108 38ff 	add.w	r8, r8, #4294967295
 800d264:	2100      	movs	r1, #0
 800d266:	e01e      	b.n	800d2a6 <_dtoa_r+0x1a6>
 800d268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d26a:	4413      	add	r3, r2
 800d26c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d270:	2920      	cmp	r1, #32
 800d272:	bfc1      	itttt	gt
 800d274:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d278:	408e      	lslgt	r6, r1
 800d27a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d27e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d282:	bfd6      	itet	le
 800d284:	f1c1 0120 	rsble	r1, r1, #32
 800d288:	4331      	orrgt	r1, r6
 800d28a:	fa04 f101 	lslle.w	r1, r4, r1
 800d28e:	ee07 1a90 	vmov	s15, r1
 800d292:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d296:	3b01      	subs	r3, #1
 800d298:	ee17 1a90 	vmov	r1, s15
 800d29c:	2501      	movs	r5, #1
 800d29e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d2a2:	e7a8      	b.n	800d1f6 <_dtoa_r+0xf6>
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	1ad2      	subs	r2, r2, r3
 800d2a8:	1e53      	subs	r3, r2, #1
 800d2aa:	9306      	str	r3, [sp, #24]
 800d2ac:	bf45      	ittet	mi
 800d2ae:	f1c2 0301 	rsbmi	r3, r2, #1
 800d2b2:	9305      	strmi	r3, [sp, #20]
 800d2b4:	2300      	movpl	r3, #0
 800d2b6:	2300      	movmi	r3, #0
 800d2b8:	bf4c      	ite	mi
 800d2ba:	9306      	strmi	r3, [sp, #24]
 800d2bc:	9305      	strpl	r3, [sp, #20]
 800d2be:	f1b8 0f00 	cmp.w	r8, #0
 800d2c2:	910c      	str	r1, [sp, #48]	@ 0x30
 800d2c4:	db18      	blt.n	800d2f8 <_dtoa_r+0x1f8>
 800d2c6:	9b06      	ldr	r3, [sp, #24]
 800d2c8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d2cc:	4443      	add	r3, r8
 800d2ce:	9306      	str	r3, [sp, #24]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	9a07      	ldr	r2, [sp, #28]
 800d2d4:	2a09      	cmp	r2, #9
 800d2d6:	d849      	bhi.n	800d36c <_dtoa_r+0x26c>
 800d2d8:	2a05      	cmp	r2, #5
 800d2da:	bfc4      	itt	gt
 800d2dc:	3a04      	subgt	r2, #4
 800d2de:	9207      	strgt	r2, [sp, #28]
 800d2e0:	9a07      	ldr	r2, [sp, #28]
 800d2e2:	f1a2 0202 	sub.w	r2, r2, #2
 800d2e6:	bfcc      	ite	gt
 800d2e8:	2400      	movgt	r4, #0
 800d2ea:	2401      	movle	r4, #1
 800d2ec:	2a03      	cmp	r2, #3
 800d2ee:	d848      	bhi.n	800d382 <_dtoa_r+0x282>
 800d2f0:	e8df f002 	tbb	[pc, r2]
 800d2f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	eba3 0308 	sub.w	r3, r3, r8
 800d300:	9305      	str	r3, [sp, #20]
 800d302:	920a      	str	r2, [sp, #40]	@ 0x28
 800d304:	f1c8 0300 	rsb	r3, r8, #0
 800d308:	e7e3      	b.n	800d2d2 <_dtoa_r+0x1d2>
 800d30a:	2200      	movs	r2, #0
 800d30c:	9208      	str	r2, [sp, #32]
 800d30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d310:	2a00      	cmp	r2, #0
 800d312:	dc39      	bgt.n	800d388 <_dtoa_r+0x288>
 800d314:	f04f 0b01 	mov.w	fp, #1
 800d318:	46da      	mov	sl, fp
 800d31a:	465a      	mov	r2, fp
 800d31c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d320:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d324:	2100      	movs	r1, #0
 800d326:	2004      	movs	r0, #4
 800d328:	f100 0614 	add.w	r6, r0, #20
 800d32c:	4296      	cmp	r6, r2
 800d32e:	d930      	bls.n	800d392 <_dtoa_r+0x292>
 800d330:	6079      	str	r1, [r7, #4]
 800d332:	4648      	mov	r0, r9
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	f000 fd39 	bl	800ddac <_Balloc>
 800d33a:	9b04      	ldr	r3, [sp, #16]
 800d33c:	4607      	mov	r7, r0
 800d33e:	2800      	cmp	r0, #0
 800d340:	d146      	bne.n	800d3d0 <_dtoa_r+0x2d0>
 800d342:	4b22      	ldr	r3, [pc, #136]	@ (800d3cc <_dtoa_r+0x2cc>)
 800d344:	4602      	mov	r2, r0
 800d346:	f240 11af 	movw	r1, #431	@ 0x1af
 800d34a:	e6f2      	b.n	800d132 <_dtoa_r+0x32>
 800d34c:	2201      	movs	r2, #1
 800d34e:	e7dd      	b.n	800d30c <_dtoa_r+0x20c>
 800d350:	2200      	movs	r2, #0
 800d352:	9208      	str	r2, [sp, #32]
 800d354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d356:	eb08 0b02 	add.w	fp, r8, r2
 800d35a:	f10b 0a01 	add.w	sl, fp, #1
 800d35e:	4652      	mov	r2, sl
 800d360:	2a01      	cmp	r2, #1
 800d362:	bfb8      	it	lt
 800d364:	2201      	movlt	r2, #1
 800d366:	e7db      	b.n	800d320 <_dtoa_r+0x220>
 800d368:	2201      	movs	r2, #1
 800d36a:	e7f2      	b.n	800d352 <_dtoa_r+0x252>
 800d36c:	2401      	movs	r4, #1
 800d36e:	2200      	movs	r2, #0
 800d370:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d374:	f04f 3bff 	mov.w	fp, #4294967295
 800d378:	2100      	movs	r1, #0
 800d37a:	46da      	mov	sl, fp
 800d37c:	2212      	movs	r2, #18
 800d37e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d380:	e7ce      	b.n	800d320 <_dtoa_r+0x220>
 800d382:	2201      	movs	r2, #1
 800d384:	9208      	str	r2, [sp, #32]
 800d386:	e7f5      	b.n	800d374 <_dtoa_r+0x274>
 800d388:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800d38c:	46da      	mov	sl, fp
 800d38e:	465a      	mov	r2, fp
 800d390:	e7c6      	b.n	800d320 <_dtoa_r+0x220>
 800d392:	3101      	adds	r1, #1
 800d394:	0040      	lsls	r0, r0, #1
 800d396:	e7c7      	b.n	800d328 <_dtoa_r+0x228>
 800d398:	636f4361 	.word	0x636f4361
 800d39c:	3fd287a7 	.word	0x3fd287a7
 800d3a0:	8b60c8b3 	.word	0x8b60c8b3
 800d3a4:	3fc68a28 	.word	0x3fc68a28
 800d3a8:	509f79fb 	.word	0x509f79fb
 800d3ac:	3fd34413 	.word	0x3fd34413
 800d3b0:	0801062b 	.word	0x0801062b
 800d3b4:	08010642 	.word	0x08010642
 800d3b8:	7ff00000 	.word	0x7ff00000
 800d3bc:	08010627 	.word	0x08010627
 800d3c0:	080105f6 	.word	0x080105f6
 800d3c4:	080105f5 	.word	0x080105f5
 800d3c8:	08010738 	.word	0x08010738
 800d3cc:	0801069a 	.word	0x0801069a
 800d3d0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d3d4:	f1ba 0f0e 	cmp.w	sl, #14
 800d3d8:	6010      	str	r0, [r2, #0]
 800d3da:	d86f      	bhi.n	800d4bc <_dtoa_r+0x3bc>
 800d3dc:	2c00      	cmp	r4, #0
 800d3de:	d06d      	beq.n	800d4bc <_dtoa_r+0x3bc>
 800d3e0:	f1b8 0f00 	cmp.w	r8, #0
 800d3e4:	f340 80c2 	ble.w	800d56c <_dtoa_r+0x46c>
 800d3e8:	4aca      	ldr	r2, [pc, #808]	@ (800d714 <_dtoa_r+0x614>)
 800d3ea:	f008 010f 	and.w	r1, r8, #15
 800d3ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d3f2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d3f6:	ed92 7b00 	vldr	d7, [r2]
 800d3fa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d3fe:	f000 80a9 	beq.w	800d554 <_dtoa_r+0x454>
 800d402:	4ac5      	ldr	r2, [pc, #788]	@ (800d718 <_dtoa_r+0x618>)
 800d404:	ed92 6b08 	vldr	d6, [r2, #32]
 800d408:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d40c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d410:	f001 010f 	and.w	r1, r1, #15
 800d414:	2203      	movs	r2, #3
 800d416:	48c0      	ldr	r0, [pc, #768]	@ (800d718 <_dtoa_r+0x618>)
 800d418:	2900      	cmp	r1, #0
 800d41a:	f040 809d 	bne.w	800d558 <_dtoa_r+0x458>
 800d41e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d422:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d426:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d42a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d42c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d430:	2900      	cmp	r1, #0
 800d432:	f000 80c1 	beq.w	800d5b8 <_dtoa_r+0x4b8>
 800d436:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d43a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	f140 80b9 	bpl.w	800d5b8 <_dtoa_r+0x4b8>
 800d446:	f1ba 0f00 	cmp.w	sl, #0
 800d44a:	f000 80b5 	beq.w	800d5b8 <_dtoa_r+0x4b8>
 800d44e:	f1bb 0f00 	cmp.w	fp, #0
 800d452:	dd31      	ble.n	800d4b8 <_dtoa_r+0x3b8>
 800d454:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d458:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d45c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d460:	f108 31ff 	add.w	r1, r8, #4294967295
 800d464:	9104      	str	r1, [sp, #16]
 800d466:	3201      	adds	r2, #1
 800d468:	465c      	mov	r4, fp
 800d46a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d46e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d472:	ee07 2a90 	vmov	s15, r2
 800d476:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d47a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d47e:	ee15 2a90 	vmov	r2, s11
 800d482:	ec51 0b15 	vmov	r0, r1, d5
 800d486:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	f040 8098 	bne.w	800d5c0 <_dtoa_r+0x4c0>
 800d490:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d494:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d498:	ec41 0b17 	vmov	d7, r0, r1
 800d49c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a4:	f300 8261 	bgt.w	800d96a <_dtoa_r+0x86a>
 800d4a8:	eeb1 7b47 	vneg.f64	d7, d7
 800d4ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b4:	f100 80f5 	bmi.w	800d6a2 <_dtoa_r+0x5a2>
 800d4b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d4bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	f2c0 812c 	blt.w	800d71c <_dtoa_r+0x61c>
 800d4c4:	f1b8 0f0e 	cmp.w	r8, #14
 800d4c8:	f300 8128 	bgt.w	800d71c <_dtoa_r+0x61c>
 800d4cc:	4b91      	ldr	r3, [pc, #580]	@ (800d714 <_dtoa_r+0x614>)
 800d4ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d4d2:	ed93 6b00 	vldr	d6, [r3]
 800d4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da03      	bge.n	800d4e4 <_dtoa_r+0x3e4>
 800d4dc:	f1ba 0f00 	cmp.w	sl, #0
 800d4e0:	f340 80d2 	ble.w	800d688 <_dtoa_r+0x588>
 800d4e4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d4e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4ec:	463e      	mov	r6, r7
 800d4ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d4f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d4f6:	ee15 3a10 	vmov	r3, s10
 800d4fa:	3330      	adds	r3, #48	@ 0x30
 800d4fc:	f806 3b01 	strb.w	r3, [r6], #1
 800d500:	1bf3      	subs	r3, r6, r7
 800d502:	459a      	cmp	sl, r3
 800d504:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d508:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d50c:	f040 80f8 	bne.w	800d700 <_dtoa_r+0x600>
 800d510:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d514:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	f300 80dd 	bgt.w	800d6da <_dtoa_r+0x5da>
 800d520:	eeb4 7b46 	vcmp.f64	d7, d6
 800d524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d528:	d104      	bne.n	800d534 <_dtoa_r+0x434>
 800d52a:	ee15 3a10 	vmov	r3, s10
 800d52e:	07db      	lsls	r3, r3, #31
 800d530:	f100 80d3 	bmi.w	800d6da <_dtoa_r+0x5da>
 800d534:	9901      	ldr	r1, [sp, #4]
 800d536:	4648      	mov	r0, r9
 800d538:	f000 fc78 	bl	800de2c <_Bfree>
 800d53c:	2300      	movs	r3, #0
 800d53e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d540:	7033      	strb	r3, [r6, #0]
 800d542:	f108 0301 	add.w	r3, r8, #1
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f000 8304 	beq.w	800db58 <_dtoa_r+0xa58>
 800d550:	601e      	str	r6, [r3, #0]
 800d552:	e301      	b.n	800db58 <_dtoa_r+0xa58>
 800d554:	2202      	movs	r2, #2
 800d556:	e75e      	b.n	800d416 <_dtoa_r+0x316>
 800d558:	07cc      	lsls	r4, r1, #31
 800d55a:	d504      	bpl.n	800d566 <_dtoa_r+0x466>
 800d55c:	ed90 6b00 	vldr	d6, [r0]
 800d560:	3201      	adds	r2, #1
 800d562:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d566:	1049      	asrs	r1, r1, #1
 800d568:	3008      	adds	r0, #8
 800d56a:	e755      	b.n	800d418 <_dtoa_r+0x318>
 800d56c:	d022      	beq.n	800d5b4 <_dtoa_r+0x4b4>
 800d56e:	f1c8 0100 	rsb	r1, r8, #0
 800d572:	4a68      	ldr	r2, [pc, #416]	@ (800d714 <_dtoa_r+0x614>)
 800d574:	f001 000f 	and.w	r0, r1, #15
 800d578:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d57c:	ed92 7b00 	vldr	d7, [r2]
 800d580:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d584:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d588:	4863      	ldr	r0, [pc, #396]	@ (800d718 <_dtoa_r+0x618>)
 800d58a:	1109      	asrs	r1, r1, #4
 800d58c:	2400      	movs	r4, #0
 800d58e:	2202      	movs	r2, #2
 800d590:	b929      	cbnz	r1, 800d59e <_dtoa_r+0x49e>
 800d592:	2c00      	cmp	r4, #0
 800d594:	f43f af49 	beq.w	800d42a <_dtoa_r+0x32a>
 800d598:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d59c:	e745      	b.n	800d42a <_dtoa_r+0x32a>
 800d59e:	07ce      	lsls	r6, r1, #31
 800d5a0:	d505      	bpl.n	800d5ae <_dtoa_r+0x4ae>
 800d5a2:	ed90 6b00 	vldr	d6, [r0]
 800d5a6:	3201      	adds	r2, #1
 800d5a8:	2401      	movs	r4, #1
 800d5aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5ae:	1049      	asrs	r1, r1, #1
 800d5b0:	3008      	adds	r0, #8
 800d5b2:	e7ed      	b.n	800d590 <_dtoa_r+0x490>
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	e738      	b.n	800d42a <_dtoa_r+0x32a>
 800d5b8:	f8cd 8010 	str.w	r8, [sp, #16]
 800d5bc:	4654      	mov	r4, sl
 800d5be:	e754      	b.n	800d46a <_dtoa_r+0x36a>
 800d5c0:	4a54      	ldr	r2, [pc, #336]	@ (800d714 <_dtoa_r+0x614>)
 800d5c2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d5c6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d5ca:	9a08      	ldr	r2, [sp, #32]
 800d5cc:	ec41 0b17 	vmov	d7, r0, r1
 800d5d0:	443c      	add	r4, r7
 800d5d2:	b34a      	cbz	r2, 800d628 <_dtoa_r+0x528>
 800d5d4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d5d8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d5dc:	463e      	mov	r6, r7
 800d5de:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d5e2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d5e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5ea:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d5ee:	ee14 2a90 	vmov	r2, s9
 800d5f2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d5f6:	3230      	adds	r2, #48	@ 0x30
 800d5f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d5fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d604:	f806 2b01 	strb.w	r2, [r6], #1
 800d608:	d438      	bmi.n	800d67c <_dtoa_r+0x57c>
 800d60a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d60e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d616:	d462      	bmi.n	800d6de <_dtoa_r+0x5de>
 800d618:	42a6      	cmp	r6, r4
 800d61a:	f43f af4d 	beq.w	800d4b8 <_dtoa_r+0x3b8>
 800d61e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d622:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d626:	e7e0      	b.n	800d5ea <_dtoa_r+0x4ea>
 800d628:	4621      	mov	r1, r4
 800d62a:	463e      	mov	r6, r7
 800d62c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d630:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d634:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d638:	ee14 2a90 	vmov	r2, s9
 800d63c:	3230      	adds	r2, #48	@ 0x30
 800d63e:	f806 2b01 	strb.w	r2, [r6], #1
 800d642:	42a6      	cmp	r6, r4
 800d644:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d648:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d64c:	d119      	bne.n	800d682 <_dtoa_r+0x582>
 800d64e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d652:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d656:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65e:	dc3e      	bgt.n	800d6de <_dtoa_r+0x5de>
 800d660:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d664:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66c:	f57f af24 	bpl.w	800d4b8 <_dtoa_r+0x3b8>
 800d670:	460e      	mov	r6, r1
 800d672:	3901      	subs	r1, #1
 800d674:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d678:	2b30      	cmp	r3, #48	@ 0x30
 800d67a:	d0f9      	beq.n	800d670 <_dtoa_r+0x570>
 800d67c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d680:	e758      	b.n	800d534 <_dtoa_r+0x434>
 800d682:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d686:	e7d5      	b.n	800d634 <_dtoa_r+0x534>
 800d688:	d10b      	bne.n	800d6a2 <_dtoa_r+0x5a2>
 800d68a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d68e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d692:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69e:	f2c0 8161 	blt.w	800d964 <_dtoa_r+0x864>
 800d6a2:	2400      	movs	r4, #0
 800d6a4:	4625      	mov	r5, r4
 800d6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a8:	43db      	mvns	r3, r3
 800d6aa:	9304      	str	r3, [sp, #16]
 800d6ac:	463e      	mov	r6, r7
 800d6ae:	f04f 0800 	mov.w	r8, #0
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	4648      	mov	r0, r9
 800d6b6:	f000 fbb9 	bl	800de2c <_Bfree>
 800d6ba:	2d00      	cmp	r5, #0
 800d6bc:	d0de      	beq.n	800d67c <_dtoa_r+0x57c>
 800d6be:	f1b8 0f00 	cmp.w	r8, #0
 800d6c2:	d005      	beq.n	800d6d0 <_dtoa_r+0x5d0>
 800d6c4:	45a8      	cmp	r8, r5
 800d6c6:	d003      	beq.n	800d6d0 <_dtoa_r+0x5d0>
 800d6c8:	4641      	mov	r1, r8
 800d6ca:	4648      	mov	r0, r9
 800d6cc:	f000 fbae 	bl	800de2c <_Bfree>
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4648      	mov	r0, r9
 800d6d4:	f000 fbaa 	bl	800de2c <_Bfree>
 800d6d8:	e7d0      	b.n	800d67c <_dtoa_r+0x57c>
 800d6da:	f8cd 8010 	str.w	r8, [sp, #16]
 800d6de:	4633      	mov	r3, r6
 800d6e0:	461e      	mov	r6, r3
 800d6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6e6:	2a39      	cmp	r2, #57	@ 0x39
 800d6e8:	d106      	bne.n	800d6f8 <_dtoa_r+0x5f8>
 800d6ea:	429f      	cmp	r7, r3
 800d6ec:	d1f8      	bne.n	800d6e0 <_dtoa_r+0x5e0>
 800d6ee:	9a04      	ldr	r2, [sp, #16]
 800d6f0:	3201      	adds	r2, #1
 800d6f2:	9204      	str	r2, [sp, #16]
 800d6f4:	2230      	movs	r2, #48	@ 0x30
 800d6f6:	703a      	strb	r2, [r7, #0]
 800d6f8:	781a      	ldrb	r2, [r3, #0]
 800d6fa:	3201      	adds	r2, #1
 800d6fc:	701a      	strb	r2, [r3, #0]
 800d6fe:	e7bd      	b.n	800d67c <_dtoa_r+0x57c>
 800d700:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d704:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	f47f aeef 	bne.w	800d4ee <_dtoa_r+0x3ee>
 800d710:	e710      	b.n	800d534 <_dtoa_r+0x434>
 800d712:	bf00      	nop
 800d714:	08010738 	.word	0x08010738
 800d718:	08010710 	.word	0x08010710
 800d71c:	9908      	ldr	r1, [sp, #32]
 800d71e:	2900      	cmp	r1, #0
 800d720:	f000 80e3 	beq.w	800d8ea <_dtoa_r+0x7ea>
 800d724:	9907      	ldr	r1, [sp, #28]
 800d726:	2901      	cmp	r1, #1
 800d728:	f300 80c8 	bgt.w	800d8bc <_dtoa_r+0x7bc>
 800d72c:	2d00      	cmp	r5, #0
 800d72e:	f000 80c1 	beq.w	800d8b4 <_dtoa_r+0x7b4>
 800d732:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d736:	9e05      	ldr	r6, [sp, #20]
 800d738:	461c      	mov	r4, r3
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	9b05      	ldr	r3, [sp, #20]
 800d73e:	4413      	add	r3, r2
 800d740:	9305      	str	r3, [sp, #20]
 800d742:	9b06      	ldr	r3, [sp, #24]
 800d744:	2101      	movs	r1, #1
 800d746:	4413      	add	r3, r2
 800d748:	4648      	mov	r0, r9
 800d74a:	9306      	str	r3, [sp, #24]
 800d74c:	f000 fc6c 	bl	800e028 <__i2b>
 800d750:	9b04      	ldr	r3, [sp, #16]
 800d752:	4605      	mov	r5, r0
 800d754:	b166      	cbz	r6, 800d770 <_dtoa_r+0x670>
 800d756:	9a06      	ldr	r2, [sp, #24]
 800d758:	2a00      	cmp	r2, #0
 800d75a:	dd09      	ble.n	800d770 <_dtoa_r+0x670>
 800d75c:	42b2      	cmp	r2, r6
 800d75e:	9905      	ldr	r1, [sp, #20]
 800d760:	bfa8      	it	ge
 800d762:	4632      	movge	r2, r6
 800d764:	1a89      	subs	r1, r1, r2
 800d766:	9105      	str	r1, [sp, #20]
 800d768:	9906      	ldr	r1, [sp, #24]
 800d76a:	1ab6      	subs	r6, r6, r2
 800d76c:	1a8a      	subs	r2, r1, r2
 800d76e:	9206      	str	r2, [sp, #24]
 800d770:	b1fb      	cbz	r3, 800d7b2 <_dtoa_r+0x6b2>
 800d772:	9a08      	ldr	r2, [sp, #32]
 800d774:	2a00      	cmp	r2, #0
 800d776:	f000 80bc 	beq.w	800d8f2 <_dtoa_r+0x7f2>
 800d77a:	b19c      	cbz	r4, 800d7a4 <_dtoa_r+0x6a4>
 800d77c:	4629      	mov	r1, r5
 800d77e:	4622      	mov	r2, r4
 800d780:	4648      	mov	r0, r9
 800d782:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d784:	f000 fd10 	bl	800e1a8 <__pow5mult>
 800d788:	9a01      	ldr	r2, [sp, #4]
 800d78a:	4601      	mov	r1, r0
 800d78c:	4605      	mov	r5, r0
 800d78e:	4648      	mov	r0, r9
 800d790:	f000 fc60 	bl	800e054 <__multiply>
 800d794:	9901      	ldr	r1, [sp, #4]
 800d796:	9004      	str	r0, [sp, #16]
 800d798:	4648      	mov	r0, r9
 800d79a:	f000 fb47 	bl	800de2c <_Bfree>
 800d79e:	9a04      	ldr	r2, [sp, #16]
 800d7a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7a2:	9201      	str	r2, [sp, #4]
 800d7a4:	1b1a      	subs	r2, r3, r4
 800d7a6:	d004      	beq.n	800d7b2 <_dtoa_r+0x6b2>
 800d7a8:	9901      	ldr	r1, [sp, #4]
 800d7aa:	4648      	mov	r0, r9
 800d7ac:	f000 fcfc 	bl	800e1a8 <__pow5mult>
 800d7b0:	9001      	str	r0, [sp, #4]
 800d7b2:	2101      	movs	r1, #1
 800d7b4:	4648      	mov	r0, r9
 800d7b6:	f000 fc37 	bl	800e028 <__i2b>
 800d7ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7bc:	4604      	mov	r4, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 81d0 	beq.w	800db64 <_dtoa_r+0xa64>
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	4648      	mov	r0, r9
 800d7ca:	f000 fced 	bl	800e1a8 <__pow5mult>
 800d7ce:	9b07      	ldr	r3, [sp, #28]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	f300 8095 	bgt.w	800d902 <_dtoa_r+0x802>
 800d7d8:	9b02      	ldr	r3, [sp, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f040 808b 	bne.w	800d8f6 <_dtoa_r+0x7f6>
 800d7e0:	9b03      	ldr	r3, [sp, #12]
 800d7e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	f040 8087 	bne.w	800d8fa <_dtoa_r+0x7fa>
 800d7ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d7f0:	0d12      	lsrs	r2, r2, #20
 800d7f2:	0512      	lsls	r2, r2, #20
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	f000 8082 	beq.w	800d8fe <_dtoa_r+0x7fe>
 800d7fa:	9b05      	ldr	r3, [sp, #20]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	9305      	str	r3, [sp, #20]
 800d800:	9b06      	ldr	r3, [sp, #24]
 800d802:	3301      	adds	r3, #1
 800d804:	9306      	str	r3, [sp, #24]
 800d806:	2301      	movs	r3, #1
 800d808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d80a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 81af 	beq.w	800db70 <_dtoa_r+0xa70>
 800d812:	6922      	ldr	r2, [r4, #16]
 800d814:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d818:	6910      	ldr	r0, [r2, #16]
 800d81a:	f000 fbb9 	bl	800df90 <__hi0bits>
 800d81e:	f1c0 0020 	rsb	r0, r0, #32
 800d822:	9b06      	ldr	r3, [sp, #24]
 800d824:	4418      	add	r0, r3
 800d826:	f010 001f 	ands.w	r0, r0, #31
 800d82a:	d076      	beq.n	800d91a <_dtoa_r+0x81a>
 800d82c:	f1c0 0220 	rsb	r2, r0, #32
 800d830:	2a04      	cmp	r2, #4
 800d832:	dd69      	ble.n	800d908 <_dtoa_r+0x808>
 800d834:	9b05      	ldr	r3, [sp, #20]
 800d836:	f1c0 001c 	rsb	r0, r0, #28
 800d83a:	4403      	add	r3, r0
 800d83c:	9305      	str	r3, [sp, #20]
 800d83e:	9b06      	ldr	r3, [sp, #24]
 800d840:	4406      	add	r6, r0
 800d842:	4403      	add	r3, r0
 800d844:	9306      	str	r3, [sp, #24]
 800d846:	9b05      	ldr	r3, [sp, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	dd05      	ble.n	800d858 <_dtoa_r+0x758>
 800d84c:	9901      	ldr	r1, [sp, #4]
 800d84e:	461a      	mov	r2, r3
 800d850:	4648      	mov	r0, r9
 800d852:	f000 fd03 	bl	800e25c <__lshift>
 800d856:	9001      	str	r0, [sp, #4]
 800d858:	9b06      	ldr	r3, [sp, #24]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	dd05      	ble.n	800d86a <_dtoa_r+0x76a>
 800d85e:	4621      	mov	r1, r4
 800d860:	461a      	mov	r2, r3
 800d862:	4648      	mov	r0, r9
 800d864:	f000 fcfa 	bl	800e25c <__lshift>
 800d868:	4604      	mov	r4, r0
 800d86a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d056      	beq.n	800d91e <_dtoa_r+0x81e>
 800d870:	9801      	ldr	r0, [sp, #4]
 800d872:	4621      	mov	r1, r4
 800d874:	f000 fd5e 	bl	800e334 <__mcmp>
 800d878:	2800      	cmp	r0, #0
 800d87a:	da50      	bge.n	800d91e <_dtoa_r+0x81e>
 800d87c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d880:	9304      	str	r3, [sp, #16]
 800d882:	9901      	ldr	r1, [sp, #4]
 800d884:	2300      	movs	r3, #0
 800d886:	220a      	movs	r2, #10
 800d888:	4648      	mov	r0, r9
 800d88a:	f000 faf1 	bl	800de70 <__multadd>
 800d88e:	9b08      	ldr	r3, [sp, #32]
 800d890:	9001      	str	r0, [sp, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 816e 	beq.w	800db74 <_dtoa_r+0xa74>
 800d898:	4629      	mov	r1, r5
 800d89a:	2300      	movs	r3, #0
 800d89c:	220a      	movs	r2, #10
 800d89e:	4648      	mov	r0, r9
 800d8a0:	f000 fae6 	bl	800de70 <__multadd>
 800d8a4:	f1bb 0f00 	cmp.w	fp, #0
 800d8a8:	4605      	mov	r5, r0
 800d8aa:	dc64      	bgt.n	800d976 <_dtoa_r+0x876>
 800d8ac:	9b07      	ldr	r3, [sp, #28]
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	dc3e      	bgt.n	800d930 <_dtoa_r+0x830>
 800d8b2:	e060      	b.n	800d976 <_dtoa_r+0x876>
 800d8b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d8ba:	e73c      	b.n	800d736 <_dtoa_r+0x636>
 800d8bc:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	bfbf      	itttt	lt
 800d8c4:	1ae2      	sublt	r2, r4, r3
 800d8c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d8c8:	189b      	addlt	r3, r3, r2
 800d8ca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d8cc:	bfae      	itee	ge
 800d8ce:	1b1c      	subge	r4, r3, r4
 800d8d0:	4623      	movlt	r3, r4
 800d8d2:	2400      	movlt	r4, #0
 800d8d4:	f1ba 0f00 	cmp.w	sl, #0
 800d8d8:	bfb5      	itete	lt
 800d8da:	9a05      	ldrlt	r2, [sp, #20]
 800d8dc:	9e05      	ldrge	r6, [sp, #20]
 800d8de:	eba2 060a 	sublt.w	r6, r2, sl
 800d8e2:	4652      	movge	r2, sl
 800d8e4:	bfb8      	it	lt
 800d8e6:	2200      	movlt	r2, #0
 800d8e8:	e727      	b.n	800d73a <_dtoa_r+0x63a>
 800d8ea:	9e05      	ldr	r6, [sp, #20]
 800d8ec:	9d08      	ldr	r5, [sp, #32]
 800d8ee:	461c      	mov	r4, r3
 800d8f0:	e730      	b.n	800d754 <_dtoa_r+0x654>
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	e758      	b.n	800d7a8 <_dtoa_r+0x6a8>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	e786      	b.n	800d808 <_dtoa_r+0x708>
 800d8fa:	9b02      	ldr	r3, [sp, #8]
 800d8fc:	e784      	b.n	800d808 <_dtoa_r+0x708>
 800d8fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d900:	e783      	b.n	800d80a <_dtoa_r+0x70a>
 800d902:	2300      	movs	r3, #0
 800d904:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d906:	e784      	b.n	800d812 <_dtoa_r+0x712>
 800d908:	d09d      	beq.n	800d846 <_dtoa_r+0x746>
 800d90a:	9b05      	ldr	r3, [sp, #20]
 800d90c:	321c      	adds	r2, #28
 800d90e:	4413      	add	r3, r2
 800d910:	9305      	str	r3, [sp, #20]
 800d912:	9b06      	ldr	r3, [sp, #24]
 800d914:	4416      	add	r6, r2
 800d916:	4413      	add	r3, r2
 800d918:	e794      	b.n	800d844 <_dtoa_r+0x744>
 800d91a:	4602      	mov	r2, r0
 800d91c:	e7f5      	b.n	800d90a <_dtoa_r+0x80a>
 800d91e:	f1ba 0f00 	cmp.w	sl, #0
 800d922:	f8cd 8010 	str.w	r8, [sp, #16]
 800d926:	46d3      	mov	fp, sl
 800d928:	dc21      	bgt.n	800d96e <_dtoa_r+0x86e>
 800d92a:	9b07      	ldr	r3, [sp, #28]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	dd1e      	ble.n	800d96e <_dtoa_r+0x86e>
 800d930:	f1bb 0f00 	cmp.w	fp, #0
 800d934:	f47f aeb7 	bne.w	800d6a6 <_dtoa_r+0x5a6>
 800d938:	4621      	mov	r1, r4
 800d93a:	465b      	mov	r3, fp
 800d93c:	2205      	movs	r2, #5
 800d93e:	4648      	mov	r0, r9
 800d940:	f000 fa96 	bl	800de70 <__multadd>
 800d944:	4601      	mov	r1, r0
 800d946:	4604      	mov	r4, r0
 800d948:	9801      	ldr	r0, [sp, #4]
 800d94a:	f000 fcf3 	bl	800e334 <__mcmp>
 800d94e:	2800      	cmp	r0, #0
 800d950:	f77f aea9 	ble.w	800d6a6 <_dtoa_r+0x5a6>
 800d954:	463e      	mov	r6, r7
 800d956:	2331      	movs	r3, #49	@ 0x31
 800d958:	f806 3b01 	strb.w	r3, [r6], #1
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	3301      	adds	r3, #1
 800d960:	9304      	str	r3, [sp, #16]
 800d962:	e6a4      	b.n	800d6ae <_dtoa_r+0x5ae>
 800d964:	f8cd 8010 	str.w	r8, [sp, #16]
 800d968:	4654      	mov	r4, sl
 800d96a:	4625      	mov	r5, r4
 800d96c:	e7f2      	b.n	800d954 <_dtoa_r+0x854>
 800d96e:	9b08      	ldr	r3, [sp, #32]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 8103 	beq.w	800db7c <_dtoa_r+0xa7c>
 800d976:	2e00      	cmp	r6, #0
 800d978:	dd05      	ble.n	800d986 <_dtoa_r+0x886>
 800d97a:	4629      	mov	r1, r5
 800d97c:	4632      	mov	r2, r6
 800d97e:	4648      	mov	r0, r9
 800d980:	f000 fc6c 	bl	800e25c <__lshift>
 800d984:	4605      	mov	r5, r0
 800d986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d058      	beq.n	800da3e <_dtoa_r+0x93e>
 800d98c:	6869      	ldr	r1, [r5, #4]
 800d98e:	4648      	mov	r0, r9
 800d990:	f000 fa0c 	bl	800ddac <_Balloc>
 800d994:	4606      	mov	r6, r0
 800d996:	b928      	cbnz	r0, 800d9a4 <_dtoa_r+0x8a4>
 800d998:	4b82      	ldr	r3, [pc, #520]	@ (800dba4 <_dtoa_r+0xaa4>)
 800d99a:	4602      	mov	r2, r0
 800d99c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d9a0:	f7ff bbc7 	b.w	800d132 <_dtoa_r+0x32>
 800d9a4:	692a      	ldr	r2, [r5, #16]
 800d9a6:	3202      	adds	r2, #2
 800d9a8:	0092      	lsls	r2, r2, #2
 800d9aa:	f105 010c 	add.w	r1, r5, #12
 800d9ae:	300c      	adds	r0, #12
 800d9b0:	f001 fe90 	bl	800f6d4 <memcpy>
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4648      	mov	r0, r9
 800d9ba:	f000 fc4f 	bl	800e25c <__lshift>
 800d9be:	1c7b      	adds	r3, r7, #1
 800d9c0:	9305      	str	r3, [sp, #20]
 800d9c2:	eb07 030b 	add.w	r3, r7, fp
 800d9c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9c8:	9b02      	ldr	r3, [sp, #8]
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	46a8      	mov	r8, r5
 800d9d0:	9308      	str	r3, [sp, #32]
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	9b05      	ldr	r3, [sp, #20]
 800d9d6:	9801      	ldr	r0, [sp, #4]
 800d9d8:	4621      	mov	r1, r4
 800d9da:	f103 3bff 	add.w	fp, r3, #4294967295
 800d9de:	f7ff fb05 	bl	800cfec <quorem>
 800d9e2:	4641      	mov	r1, r8
 800d9e4:	9002      	str	r0, [sp, #8]
 800d9e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d9ea:	9801      	ldr	r0, [sp, #4]
 800d9ec:	f000 fca2 	bl	800e334 <__mcmp>
 800d9f0:	462a      	mov	r2, r5
 800d9f2:	9006      	str	r0, [sp, #24]
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4648      	mov	r0, r9
 800d9f8:	f000 fcb8 	bl	800e36c <__mdiff>
 800d9fc:	68c2      	ldr	r2, [r0, #12]
 800d9fe:	4606      	mov	r6, r0
 800da00:	b9fa      	cbnz	r2, 800da42 <_dtoa_r+0x942>
 800da02:	4601      	mov	r1, r0
 800da04:	9801      	ldr	r0, [sp, #4]
 800da06:	f000 fc95 	bl	800e334 <__mcmp>
 800da0a:	4602      	mov	r2, r0
 800da0c:	4631      	mov	r1, r6
 800da0e:	4648      	mov	r0, r9
 800da10:	920a      	str	r2, [sp, #40]	@ 0x28
 800da12:	f000 fa0b 	bl	800de2c <_Bfree>
 800da16:	9b07      	ldr	r3, [sp, #28]
 800da18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da1a:	9e05      	ldr	r6, [sp, #20]
 800da1c:	ea43 0102 	orr.w	r1, r3, r2
 800da20:	9b08      	ldr	r3, [sp, #32]
 800da22:	4319      	orrs	r1, r3
 800da24:	d10f      	bne.n	800da46 <_dtoa_r+0x946>
 800da26:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800da2a:	d028      	beq.n	800da7e <_dtoa_r+0x97e>
 800da2c:	9b06      	ldr	r3, [sp, #24]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dd02      	ble.n	800da38 <_dtoa_r+0x938>
 800da32:	9b02      	ldr	r3, [sp, #8]
 800da34:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800da38:	f88b a000 	strb.w	sl, [fp]
 800da3c:	e639      	b.n	800d6b2 <_dtoa_r+0x5b2>
 800da3e:	4628      	mov	r0, r5
 800da40:	e7bd      	b.n	800d9be <_dtoa_r+0x8be>
 800da42:	2201      	movs	r2, #1
 800da44:	e7e2      	b.n	800da0c <_dtoa_r+0x90c>
 800da46:	9b06      	ldr	r3, [sp, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	db04      	blt.n	800da56 <_dtoa_r+0x956>
 800da4c:	9907      	ldr	r1, [sp, #28]
 800da4e:	430b      	orrs	r3, r1
 800da50:	9908      	ldr	r1, [sp, #32]
 800da52:	430b      	orrs	r3, r1
 800da54:	d120      	bne.n	800da98 <_dtoa_r+0x998>
 800da56:	2a00      	cmp	r2, #0
 800da58:	ddee      	ble.n	800da38 <_dtoa_r+0x938>
 800da5a:	9901      	ldr	r1, [sp, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	4648      	mov	r0, r9
 800da60:	f000 fbfc 	bl	800e25c <__lshift>
 800da64:	4621      	mov	r1, r4
 800da66:	9001      	str	r0, [sp, #4]
 800da68:	f000 fc64 	bl	800e334 <__mcmp>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	dc03      	bgt.n	800da78 <_dtoa_r+0x978>
 800da70:	d1e2      	bne.n	800da38 <_dtoa_r+0x938>
 800da72:	f01a 0f01 	tst.w	sl, #1
 800da76:	d0df      	beq.n	800da38 <_dtoa_r+0x938>
 800da78:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800da7c:	d1d9      	bne.n	800da32 <_dtoa_r+0x932>
 800da7e:	2339      	movs	r3, #57	@ 0x39
 800da80:	f88b 3000 	strb.w	r3, [fp]
 800da84:	4633      	mov	r3, r6
 800da86:	461e      	mov	r6, r3
 800da88:	3b01      	subs	r3, #1
 800da8a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da8e:	2a39      	cmp	r2, #57	@ 0x39
 800da90:	d053      	beq.n	800db3a <_dtoa_r+0xa3a>
 800da92:	3201      	adds	r2, #1
 800da94:	701a      	strb	r2, [r3, #0]
 800da96:	e60c      	b.n	800d6b2 <_dtoa_r+0x5b2>
 800da98:	2a00      	cmp	r2, #0
 800da9a:	dd07      	ble.n	800daac <_dtoa_r+0x9ac>
 800da9c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800daa0:	d0ed      	beq.n	800da7e <_dtoa_r+0x97e>
 800daa2:	f10a 0301 	add.w	r3, sl, #1
 800daa6:	f88b 3000 	strb.w	r3, [fp]
 800daaa:	e602      	b.n	800d6b2 <_dtoa_r+0x5b2>
 800daac:	9b05      	ldr	r3, [sp, #20]
 800daae:	9a05      	ldr	r2, [sp, #20]
 800dab0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800dab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d029      	beq.n	800db0e <_dtoa_r+0xa0e>
 800daba:	9901      	ldr	r1, [sp, #4]
 800dabc:	2300      	movs	r3, #0
 800dabe:	220a      	movs	r2, #10
 800dac0:	4648      	mov	r0, r9
 800dac2:	f000 f9d5 	bl	800de70 <__multadd>
 800dac6:	45a8      	cmp	r8, r5
 800dac8:	9001      	str	r0, [sp, #4]
 800daca:	f04f 0300 	mov.w	r3, #0
 800dace:	f04f 020a 	mov.w	r2, #10
 800dad2:	4641      	mov	r1, r8
 800dad4:	4648      	mov	r0, r9
 800dad6:	d107      	bne.n	800dae8 <_dtoa_r+0x9e8>
 800dad8:	f000 f9ca 	bl	800de70 <__multadd>
 800dadc:	4680      	mov	r8, r0
 800dade:	4605      	mov	r5, r0
 800dae0:	9b05      	ldr	r3, [sp, #20]
 800dae2:	3301      	adds	r3, #1
 800dae4:	9305      	str	r3, [sp, #20]
 800dae6:	e775      	b.n	800d9d4 <_dtoa_r+0x8d4>
 800dae8:	f000 f9c2 	bl	800de70 <__multadd>
 800daec:	4629      	mov	r1, r5
 800daee:	4680      	mov	r8, r0
 800daf0:	2300      	movs	r3, #0
 800daf2:	220a      	movs	r2, #10
 800daf4:	4648      	mov	r0, r9
 800daf6:	f000 f9bb 	bl	800de70 <__multadd>
 800dafa:	4605      	mov	r5, r0
 800dafc:	e7f0      	b.n	800dae0 <_dtoa_r+0x9e0>
 800dafe:	f1bb 0f00 	cmp.w	fp, #0
 800db02:	bfcc      	ite	gt
 800db04:	465e      	movgt	r6, fp
 800db06:	2601      	movle	r6, #1
 800db08:	443e      	add	r6, r7
 800db0a:	f04f 0800 	mov.w	r8, #0
 800db0e:	9901      	ldr	r1, [sp, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	4648      	mov	r0, r9
 800db14:	f000 fba2 	bl	800e25c <__lshift>
 800db18:	4621      	mov	r1, r4
 800db1a:	9001      	str	r0, [sp, #4]
 800db1c:	f000 fc0a 	bl	800e334 <__mcmp>
 800db20:	2800      	cmp	r0, #0
 800db22:	dcaf      	bgt.n	800da84 <_dtoa_r+0x984>
 800db24:	d102      	bne.n	800db2c <_dtoa_r+0xa2c>
 800db26:	f01a 0f01 	tst.w	sl, #1
 800db2a:	d1ab      	bne.n	800da84 <_dtoa_r+0x984>
 800db2c:	4633      	mov	r3, r6
 800db2e:	461e      	mov	r6, r3
 800db30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db34:	2a30      	cmp	r2, #48	@ 0x30
 800db36:	d0fa      	beq.n	800db2e <_dtoa_r+0xa2e>
 800db38:	e5bb      	b.n	800d6b2 <_dtoa_r+0x5b2>
 800db3a:	429f      	cmp	r7, r3
 800db3c:	d1a3      	bne.n	800da86 <_dtoa_r+0x986>
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	3301      	adds	r3, #1
 800db42:	9304      	str	r3, [sp, #16]
 800db44:	2331      	movs	r3, #49	@ 0x31
 800db46:	703b      	strb	r3, [r7, #0]
 800db48:	e5b3      	b.n	800d6b2 <_dtoa_r+0x5b2>
 800db4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db4c:	4f16      	ldr	r7, [pc, #88]	@ (800dba8 <_dtoa_r+0xaa8>)
 800db4e:	b11b      	cbz	r3, 800db58 <_dtoa_r+0xa58>
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800db56:	6013      	str	r3, [r2, #0]
 800db58:	4638      	mov	r0, r7
 800db5a:	b011      	add	sp, #68	@ 0x44
 800db5c:	ecbd 8b02 	vpop	{d8}
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db64:	9b07      	ldr	r3, [sp, #28]
 800db66:	2b01      	cmp	r3, #1
 800db68:	f77f ae36 	ble.w	800d7d8 <_dtoa_r+0x6d8>
 800db6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db70:	2001      	movs	r0, #1
 800db72:	e656      	b.n	800d822 <_dtoa_r+0x722>
 800db74:	f1bb 0f00 	cmp.w	fp, #0
 800db78:	f77f aed7 	ble.w	800d92a <_dtoa_r+0x82a>
 800db7c:	463e      	mov	r6, r7
 800db7e:	9801      	ldr	r0, [sp, #4]
 800db80:	4621      	mov	r1, r4
 800db82:	f7ff fa33 	bl	800cfec <quorem>
 800db86:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800db8a:	f806 ab01 	strb.w	sl, [r6], #1
 800db8e:	1bf2      	subs	r2, r6, r7
 800db90:	4593      	cmp	fp, r2
 800db92:	ddb4      	ble.n	800dafe <_dtoa_r+0x9fe>
 800db94:	9901      	ldr	r1, [sp, #4]
 800db96:	2300      	movs	r3, #0
 800db98:	220a      	movs	r2, #10
 800db9a:	4648      	mov	r0, r9
 800db9c:	f000 f968 	bl	800de70 <__multadd>
 800dba0:	9001      	str	r0, [sp, #4]
 800dba2:	e7ec      	b.n	800db7e <_dtoa_r+0xa7e>
 800dba4:	0801069a 	.word	0x0801069a
 800dba8:	0801061e 	.word	0x0801061e

0800dbac <_free_r>:
 800dbac:	b538      	push	{r3, r4, r5, lr}
 800dbae:	4605      	mov	r5, r0
 800dbb0:	2900      	cmp	r1, #0
 800dbb2:	d041      	beq.n	800dc38 <_free_r+0x8c>
 800dbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb8:	1f0c      	subs	r4, r1, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfb8      	it	lt
 800dbbe:	18e4      	addlt	r4, r4, r3
 800dbc0:	f000 f8e8 	bl	800dd94 <__malloc_lock>
 800dbc4:	4a1d      	ldr	r2, [pc, #116]	@ (800dc3c <_free_r+0x90>)
 800dbc6:	6813      	ldr	r3, [r2, #0]
 800dbc8:	b933      	cbnz	r3, 800dbd8 <_free_r+0x2c>
 800dbca:	6063      	str	r3, [r4, #4]
 800dbcc:	6014      	str	r4, [r2, #0]
 800dbce:	4628      	mov	r0, r5
 800dbd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd4:	f000 b8e4 	b.w	800dda0 <__malloc_unlock>
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	d908      	bls.n	800dbee <_free_r+0x42>
 800dbdc:	6820      	ldr	r0, [r4, #0]
 800dbde:	1821      	adds	r1, r4, r0
 800dbe0:	428b      	cmp	r3, r1
 800dbe2:	bf01      	itttt	eq
 800dbe4:	6819      	ldreq	r1, [r3, #0]
 800dbe6:	685b      	ldreq	r3, [r3, #4]
 800dbe8:	1809      	addeq	r1, r1, r0
 800dbea:	6021      	streq	r1, [r4, #0]
 800dbec:	e7ed      	b.n	800dbca <_free_r+0x1e>
 800dbee:	461a      	mov	r2, r3
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	b10b      	cbz	r3, 800dbf8 <_free_r+0x4c>
 800dbf4:	42a3      	cmp	r3, r4
 800dbf6:	d9fa      	bls.n	800dbee <_free_r+0x42>
 800dbf8:	6811      	ldr	r1, [r2, #0]
 800dbfa:	1850      	adds	r0, r2, r1
 800dbfc:	42a0      	cmp	r0, r4
 800dbfe:	d10b      	bne.n	800dc18 <_free_r+0x6c>
 800dc00:	6820      	ldr	r0, [r4, #0]
 800dc02:	4401      	add	r1, r0
 800dc04:	1850      	adds	r0, r2, r1
 800dc06:	4283      	cmp	r3, r0
 800dc08:	6011      	str	r1, [r2, #0]
 800dc0a:	d1e0      	bne.n	800dbce <_free_r+0x22>
 800dc0c:	6818      	ldr	r0, [r3, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	6053      	str	r3, [r2, #4]
 800dc12:	4408      	add	r0, r1
 800dc14:	6010      	str	r0, [r2, #0]
 800dc16:	e7da      	b.n	800dbce <_free_r+0x22>
 800dc18:	d902      	bls.n	800dc20 <_free_r+0x74>
 800dc1a:	230c      	movs	r3, #12
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	e7d6      	b.n	800dbce <_free_r+0x22>
 800dc20:	6820      	ldr	r0, [r4, #0]
 800dc22:	1821      	adds	r1, r4, r0
 800dc24:	428b      	cmp	r3, r1
 800dc26:	bf04      	itt	eq
 800dc28:	6819      	ldreq	r1, [r3, #0]
 800dc2a:	685b      	ldreq	r3, [r3, #4]
 800dc2c:	6063      	str	r3, [r4, #4]
 800dc2e:	bf04      	itt	eq
 800dc30:	1809      	addeq	r1, r1, r0
 800dc32:	6021      	streq	r1, [r4, #0]
 800dc34:	6054      	str	r4, [r2, #4]
 800dc36:	e7ca      	b.n	800dbce <_free_r+0x22>
 800dc38:	bd38      	pop	{r3, r4, r5, pc}
 800dc3a:	bf00      	nop
 800dc3c:	240005e8 	.word	0x240005e8

0800dc40 <malloc>:
 800dc40:	4b02      	ldr	r3, [pc, #8]	@ (800dc4c <malloc+0xc>)
 800dc42:	4601      	mov	r1, r0
 800dc44:	6818      	ldr	r0, [r3, #0]
 800dc46:	f000 b825 	b.w	800dc94 <_malloc_r>
 800dc4a:	bf00      	nop
 800dc4c:	24000030 	.word	0x24000030

0800dc50 <sbrk_aligned>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	4e0f      	ldr	r6, [pc, #60]	@ (800dc90 <sbrk_aligned+0x40>)
 800dc54:	460c      	mov	r4, r1
 800dc56:	6831      	ldr	r1, [r6, #0]
 800dc58:	4605      	mov	r5, r0
 800dc5a:	b911      	cbnz	r1, 800dc62 <sbrk_aligned+0x12>
 800dc5c:	f001 fd2a 	bl	800f6b4 <_sbrk_r>
 800dc60:	6030      	str	r0, [r6, #0]
 800dc62:	4621      	mov	r1, r4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f001 fd25 	bl	800f6b4 <_sbrk_r>
 800dc6a:	1c43      	adds	r3, r0, #1
 800dc6c:	d103      	bne.n	800dc76 <sbrk_aligned+0x26>
 800dc6e:	f04f 34ff 	mov.w	r4, #4294967295
 800dc72:	4620      	mov	r0, r4
 800dc74:	bd70      	pop	{r4, r5, r6, pc}
 800dc76:	1cc4      	adds	r4, r0, #3
 800dc78:	f024 0403 	bic.w	r4, r4, #3
 800dc7c:	42a0      	cmp	r0, r4
 800dc7e:	d0f8      	beq.n	800dc72 <sbrk_aligned+0x22>
 800dc80:	1a21      	subs	r1, r4, r0
 800dc82:	4628      	mov	r0, r5
 800dc84:	f001 fd16 	bl	800f6b4 <_sbrk_r>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d1f2      	bne.n	800dc72 <sbrk_aligned+0x22>
 800dc8c:	e7ef      	b.n	800dc6e <sbrk_aligned+0x1e>
 800dc8e:	bf00      	nop
 800dc90:	240005e4 	.word	0x240005e4

0800dc94 <_malloc_r>:
 800dc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc98:	1ccd      	adds	r5, r1, #3
 800dc9a:	f025 0503 	bic.w	r5, r5, #3
 800dc9e:	3508      	adds	r5, #8
 800dca0:	2d0c      	cmp	r5, #12
 800dca2:	bf38      	it	cc
 800dca4:	250c      	movcc	r5, #12
 800dca6:	2d00      	cmp	r5, #0
 800dca8:	4606      	mov	r6, r0
 800dcaa:	db01      	blt.n	800dcb0 <_malloc_r+0x1c>
 800dcac:	42a9      	cmp	r1, r5
 800dcae:	d904      	bls.n	800dcba <_malloc_r+0x26>
 800dcb0:	230c      	movs	r3, #12
 800dcb2:	6033      	str	r3, [r6, #0]
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd90 <_malloc_r+0xfc>
 800dcbe:	f000 f869 	bl	800dd94 <__malloc_lock>
 800dcc2:	f8d8 3000 	ldr.w	r3, [r8]
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	bb44      	cbnz	r4, 800dd1c <_malloc_r+0x88>
 800dcca:	4629      	mov	r1, r5
 800dccc:	4630      	mov	r0, r6
 800dcce:	f7ff ffbf 	bl	800dc50 <sbrk_aligned>
 800dcd2:	1c43      	adds	r3, r0, #1
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	d158      	bne.n	800dd8a <_malloc_r+0xf6>
 800dcd8:	f8d8 4000 	ldr.w	r4, [r8]
 800dcdc:	4627      	mov	r7, r4
 800dcde:	2f00      	cmp	r7, #0
 800dce0:	d143      	bne.n	800dd6a <_malloc_r+0xd6>
 800dce2:	2c00      	cmp	r4, #0
 800dce4:	d04b      	beq.n	800dd7e <_malloc_r+0xea>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	4639      	mov	r1, r7
 800dcea:	4630      	mov	r0, r6
 800dcec:	eb04 0903 	add.w	r9, r4, r3
 800dcf0:	f001 fce0 	bl	800f6b4 <_sbrk_r>
 800dcf4:	4581      	cmp	r9, r0
 800dcf6:	d142      	bne.n	800dd7e <_malloc_r+0xea>
 800dcf8:	6821      	ldr	r1, [r4, #0]
 800dcfa:	1a6d      	subs	r5, r5, r1
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff ffa6 	bl	800dc50 <sbrk_aligned>
 800dd04:	3001      	adds	r0, #1
 800dd06:	d03a      	beq.n	800dd7e <_malloc_r+0xea>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	442b      	add	r3, r5
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	bb62      	cbnz	r2, 800dd70 <_malloc_r+0xdc>
 800dd16:	f8c8 7000 	str.w	r7, [r8]
 800dd1a:	e00f      	b.n	800dd3c <_malloc_r+0xa8>
 800dd1c:	6822      	ldr	r2, [r4, #0]
 800dd1e:	1b52      	subs	r2, r2, r5
 800dd20:	d420      	bmi.n	800dd64 <_malloc_r+0xd0>
 800dd22:	2a0b      	cmp	r2, #11
 800dd24:	d917      	bls.n	800dd56 <_malloc_r+0xc2>
 800dd26:	1961      	adds	r1, r4, r5
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	6025      	str	r5, [r4, #0]
 800dd2c:	bf18      	it	ne
 800dd2e:	6059      	strne	r1, [r3, #4]
 800dd30:	6863      	ldr	r3, [r4, #4]
 800dd32:	bf08      	it	eq
 800dd34:	f8c8 1000 	streq.w	r1, [r8]
 800dd38:	5162      	str	r2, [r4, r5]
 800dd3a:	604b      	str	r3, [r1, #4]
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f000 f82f 	bl	800dda0 <__malloc_unlock>
 800dd42:	f104 000b 	add.w	r0, r4, #11
 800dd46:	1d23      	adds	r3, r4, #4
 800dd48:	f020 0007 	bic.w	r0, r0, #7
 800dd4c:	1ac2      	subs	r2, r0, r3
 800dd4e:	bf1c      	itt	ne
 800dd50:	1a1b      	subne	r3, r3, r0
 800dd52:	50a3      	strne	r3, [r4, r2]
 800dd54:	e7af      	b.n	800dcb6 <_malloc_r+0x22>
 800dd56:	6862      	ldr	r2, [r4, #4]
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	bf0c      	ite	eq
 800dd5c:	f8c8 2000 	streq.w	r2, [r8]
 800dd60:	605a      	strne	r2, [r3, #4]
 800dd62:	e7eb      	b.n	800dd3c <_malloc_r+0xa8>
 800dd64:	4623      	mov	r3, r4
 800dd66:	6864      	ldr	r4, [r4, #4]
 800dd68:	e7ae      	b.n	800dcc8 <_malloc_r+0x34>
 800dd6a:	463c      	mov	r4, r7
 800dd6c:	687f      	ldr	r7, [r7, #4]
 800dd6e:	e7b6      	b.n	800dcde <_malloc_r+0x4a>
 800dd70:	461a      	mov	r2, r3
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	42a3      	cmp	r3, r4
 800dd76:	d1fb      	bne.n	800dd70 <_malloc_r+0xdc>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6053      	str	r3, [r2, #4]
 800dd7c:	e7de      	b.n	800dd3c <_malloc_r+0xa8>
 800dd7e:	230c      	movs	r3, #12
 800dd80:	6033      	str	r3, [r6, #0]
 800dd82:	4630      	mov	r0, r6
 800dd84:	f000 f80c 	bl	800dda0 <__malloc_unlock>
 800dd88:	e794      	b.n	800dcb4 <_malloc_r+0x20>
 800dd8a:	6005      	str	r5, [r0, #0]
 800dd8c:	e7d6      	b.n	800dd3c <_malloc_r+0xa8>
 800dd8e:	bf00      	nop
 800dd90:	240005e8 	.word	0x240005e8

0800dd94 <__malloc_lock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	@ (800dd9c <__malloc_lock+0x8>)
 800dd96:	f7ff b920 	b.w	800cfda <__retarget_lock_acquire_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	240005e0 	.word	0x240005e0

0800dda0 <__malloc_unlock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	@ (800dda8 <__malloc_unlock+0x8>)
 800dda2:	f7ff b91b 	b.w	800cfdc <__retarget_lock_release_recursive>
 800dda6:	bf00      	nop
 800dda8:	240005e0 	.word	0x240005e0

0800ddac <_Balloc>:
 800ddac:	b570      	push	{r4, r5, r6, lr}
 800ddae:	69c6      	ldr	r6, [r0, #28]
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	b976      	cbnz	r6, 800ddd4 <_Balloc+0x28>
 800ddb6:	2010      	movs	r0, #16
 800ddb8:	f7ff ff42 	bl	800dc40 <malloc>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	61e0      	str	r0, [r4, #28]
 800ddc0:	b920      	cbnz	r0, 800ddcc <_Balloc+0x20>
 800ddc2:	4b18      	ldr	r3, [pc, #96]	@ (800de24 <_Balloc+0x78>)
 800ddc4:	4818      	ldr	r0, [pc, #96]	@ (800de28 <_Balloc+0x7c>)
 800ddc6:	216b      	movs	r1, #107	@ 0x6b
 800ddc8:	f001 fc9a 	bl	800f700 <__assert_func>
 800ddcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddd0:	6006      	str	r6, [r0, #0]
 800ddd2:	60c6      	str	r6, [r0, #12]
 800ddd4:	69e6      	ldr	r6, [r4, #28]
 800ddd6:	68f3      	ldr	r3, [r6, #12]
 800ddd8:	b183      	cbz	r3, 800ddfc <_Balloc+0x50>
 800ddda:	69e3      	ldr	r3, [r4, #28]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dde2:	b9b8      	cbnz	r0, 800de14 <_Balloc+0x68>
 800dde4:	2101      	movs	r1, #1
 800dde6:	fa01 f605 	lsl.w	r6, r1, r5
 800ddea:	1d72      	adds	r2, r6, #5
 800ddec:	0092      	lsls	r2, r2, #2
 800ddee:	4620      	mov	r0, r4
 800ddf0:	f001 fca4 	bl	800f73c <_calloc_r>
 800ddf4:	b160      	cbz	r0, 800de10 <_Balloc+0x64>
 800ddf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddfa:	e00e      	b.n	800de1a <_Balloc+0x6e>
 800ddfc:	2221      	movs	r2, #33	@ 0x21
 800ddfe:	2104      	movs	r1, #4
 800de00:	4620      	mov	r0, r4
 800de02:	f001 fc9b 	bl	800f73c <_calloc_r>
 800de06:	69e3      	ldr	r3, [r4, #28]
 800de08:	60f0      	str	r0, [r6, #12]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1e4      	bne.n	800ddda <_Balloc+0x2e>
 800de10:	2000      	movs	r0, #0
 800de12:	bd70      	pop	{r4, r5, r6, pc}
 800de14:	6802      	ldr	r2, [r0, #0]
 800de16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de1a:	2300      	movs	r3, #0
 800de1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de20:	e7f7      	b.n	800de12 <_Balloc+0x66>
 800de22:	bf00      	nop
 800de24:	0801062b 	.word	0x0801062b
 800de28:	080106ab 	.word	0x080106ab

0800de2c <_Bfree>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	69c6      	ldr	r6, [r0, #28]
 800de30:	4605      	mov	r5, r0
 800de32:	460c      	mov	r4, r1
 800de34:	b976      	cbnz	r6, 800de54 <_Bfree+0x28>
 800de36:	2010      	movs	r0, #16
 800de38:	f7ff ff02 	bl	800dc40 <malloc>
 800de3c:	4602      	mov	r2, r0
 800de3e:	61e8      	str	r0, [r5, #28]
 800de40:	b920      	cbnz	r0, 800de4c <_Bfree+0x20>
 800de42:	4b09      	ldr	r3, [pc, #36]	@ (800de68 <_Bfree+0x3c>)
 800de44:	4809      	ldr	r0, [pc, #36]	@ (800de6c <_Bfree+0x40>)
 800de46:	218f      	movs	r1, #143	@ 0x8f
 800de48:	f001 fc5a 	bl	800f700 <__assert_func>
 800de4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de50:	6006      	str	r6, [r0, #0]
 800de52:	60c6      	str	r6, [r0, #12]
 800de54:	b13c      	cbz	r4, 800de66 <_Bfree+0x3a>
 800de56:	69eb      	ldr	r3, [r5, #28]
 800de58:	6862      	ldr	r2, [r4, #4]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de60:	6021      	str	r1, [r4, #0]
 800de62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	0801062b 	.word	0x0801062b
 800de6c:	080106ab 	.word	0x080106ab

0800de70 <__multadd>:
 800de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de74:	690d      	ldr	r5, [r1, #16]
 800de76:	4607      	mov	r7, r0
 800de78:	460c      	mov	r4, r1
 800de7a:	461e      	mov	r6, r3
 800de7c:	f101 0c14 	add.w	ip, r1, #20
 800de80:	2000      	movs	r0, #0
 800de82:	f8dc 3000 	ldr.w	r3, [ip]
 800de86:	b299      	uxth	r1, r3
 800de88:	fb02 6101 	mla	r1, r2, r1, r6
 800de8c:	0c1e      	lsrs	r6, r3, #16
 800de8e:	0c0b      	lsrs	r3, r1, #16
 800de90:	fb02 3306 	mla	r3, r2, r6, r3
 800de94:	b289      	uxth	r1, r1
 800de96:	3001      	adds	r0, #1
 800de98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de9c:	4285      	cmp	r5, r0
 800de9e:	f84c 1b04 	str.w	r1, [ip], #4
 800dea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dea6:	dcec      	bgt.n	800de82 <__multadd+0x12>
 800dea8:	b30e      	cbz	r6, 800deee <__multadd+0x7e>
 800deaa:	68a3      	ldr	r3, [r4, #8]
 800deac:	42ab      	cmp	r3, r5
 800deae:	dc19      	bgt.n	800dee4 <__multadd+0x74>
 800deb0:	6861      	ldr	r1, [r4, #4]
 800deb2:	4638      	mov	r0, r7
 800deb4:	3101      	adds	r1, #1
 800deb6:	f7ff ff79 	bl	800ddac <_Balloc>
 800deba:	4680      	mov	r8, r0
 800debc:	b928      	cbnz	r0, 800deca <__multadd+0x5a>
 800debe:	4602      	mov	r2, r0
 800dec0:	4b0c      	ldr	r3, [pc, #48]	@ (800def4 <__multadd+0x84>)
 800dec2:	480d      	ldr	r0, [pc, #52]	@ (800def8 <__multadd+0x88>)
 800dec4:	21ba      	movs	r1, #186	@ 0xba
 800dec6:	f001 fc1b 	bl	800f700 <__assert_func>
 800deca:	6922      	ldr	r2, [r4, #16]
 800decc:	3202      	adds	r2, #2
 800dece:	f104 010c 	add.w	r1, r4, #12
 800ded2:	0092      	lsls	r2, r2, #2
 800ded4:	300c      	adds	r0, #12
 800ded6:	f001 fbfd 	bl	800f6d4 <memcpy>
 800deda:	4621      	mov	r1, r4
 800dedc:	4638      	mov	r0, r7
 800dede:	f7ff ffa5 	bl	800de2c <_Bfree>
 800dee2:	4644      	mov	r4, r8
 800dee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dee8:	3501      	adds	r5, #1
 800deea:	615e      	str	r6, [r3, #20]
 800deec:	6125      	str	r5, [r4, #16]
 800deee:	4620      	mov	r0, r4
 800def0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def4:	0801069a 	.word	0x0801069a
 800def8:	080106ab 	.word	0x080106ab

0800defc <__s2b>:
 800defc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df00:	460c      	mov	r4, r1
 800df02:	4615      	mov	r5, r2
 800df04:	461f      	mov	r7, r3
 800df06:	2209      	movs	r2, #9
 800df08:	3308      	adds	r3, #8
 800df0a:	4606      	mov	r6, r0
 800df0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800df10:	2100      	movs	r1, #0
 800df12:	2201      	movs	r2, #1
 800df14:	429a      	cmp	r2, r3
 800df16:	db09      	blt.n	800df2c <__s2b+0x30>
 800df18:	4630      	mov	r0, r6
 800df1a:	f7ff ff47 	bl	800ddac <_Balloc>
 800df1e:	b940      	cbnz	r0, 800df32 <__s2b+0x36>
 800df20:	4602      	mov	r2, r0
 800df22:	4b19      	ldr	r3, [pc, #100]	@ (800df88 <__s2b+0x8c>)
 800df24:	4819      	ldr	r0, [pc, #100]	@ (800df8c <__s2b+0x90>)
 800df26:	21d3      	movs	r1, #211	@ 0xd3
 800df28:	f001 fbea 	bl	800f700 <__assert_func>
 800df2c:	0052      	lsls	r2, r2, #1
 800df2e:	3101      	adds	r1, #1
 800df30:	e7f0      	b.n	800df14 <__s2b+0x18>
 800df32:	9b08      	ldr	r3, [sp, #32]
 800df34:	6143      	str	r3, [r0, #20]
 800df36:	2d09      	cmp	r5, #9
 800df38:	f04f 0301 	mov.w	r3, #1
 800df3c:	6103      	str	r3, [r0, #16]
 800df3e:	dd16      	ble.n	800df6e <__s2b+0x72>
 800df40:	f104 0909 	add.w	r9, r4, #9
 800df44:	46c8      	mov	r8, r9
 800df46:	442c      	add	r4, r5
 800df48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df4c:	4601      	mov	r1, r0
 800df4e:	3b30      	subs	r3, #48	@ 0x30
 800df50:	220a      	movs	r2, #10
 800df52:	4630      	mov	r0, r6
 800df54:	f7ff ff8c 	bl	800de70 <__multadd>
 800df58:	45a0      	cmp	r8, r4
 800df5a:	d1f5      	bne.n	800df48 <__s2b+0x4c>
 800df5c:	f1a5 0408 	sub.w	r4, r5, #8
 800df60:	444c      	add	r4, r9
 800df62:	1b2d      	subs	r5, r5, r4
 800df64:	1963      	adds	r3, r4, r5
 800df66:	42bb      	cmp	r3, r7
 800df68:	db04      	blt.n	800df74 <__s2b+0x78>
 800df6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6e:	340a      	adds	r4, #10
 800df70:	2509      	movs	r5, #9
 800df72:	e7f6      	b.n	800df62 <__s2b+0x66>
 800df74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df78:	4601      	mov	r1, r0
 800df7a:	3b30      	subs	r3, #48	@ 0x30
 800df7c:	220a      	movs	r2, #10
 800df7e:	4630      	mov	r0, r6
 800df80:	f7ff ff76 	bl	800de70 <__multadd>
 800df84:	e7ee      	b.n	800df64 <__s2b+0x68>
 800df86:	bf00      	nop
 800df88:	0801069a 	.word	0x0801069a
 800df8c:	080106ab 	.word	0x080106ab

0800df90 <__hi0bits>:
 800df90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df94:	4603      	mov	r3, r0
 800df96:	bf36      	itet	cc
 800df98:	0403      	lslcc	r3, r0, #16
 800df9a:	2000      	movcs	r0, #0
 800df9c:	2010      	movcc	r0, #16
 800df9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfa2:	bf3c      	itt	cc
 800dfa4:	021b      	lslcc	r3, r3, #8
 800dfa6:	3008      	addcc	r0, #8
 800dfa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfac:	bf3c      	itt	cc
 800dfae:	011b      	lslcc	r3, r3, #4
 800dfb0:	3004      	addcc	r0, #4
 800dfb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfb6:	bf3c      	itt	cc
 800dfb8:	009b      	lslcc	r3, r3, #2
 800dfba:	3002      	addcc	r0, #2
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	db05      	blt.n	800dfcc <__hi0bits+0x3c>
 800dfc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dfc4:	f100 0001 	add.w	r0, r0, #1
 800dfc8:	bf08      	it	eq
 800dfca:	2020      	moveq	r0, #32
 800dfcc:	4770      	bx	lr

0800dfce <__lo0bits>:
 800dfce:	6803      	ldr	r3, [r0, #0]
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	f013 0007 	ands.w	r0, r3, #7
 800dfd6:	d00b      	beq.n	800dff0 <__lo0bits+0x22>
 800dfd8:	07d9      	lsls	r1, r3, #31
 800dfda:	d421      	bmi.n	800e020 <__lo0bits+0x52>
 800dfdc:	0798      	lsls	r0, r3, #30
 800dfde:	bf49      	itett	mi
 800dfe0:	085b      	lsrmi	r3, r3, #1
 800dfe2:	089b      	lsrpl	r3, r3, #2
 800dfe4:	2001      	movmi	r0, #1
 800dfe6:	6013      	strmi	r3, [r2, #0]
 800dfe8:	bf5c      	itt	pl
 800dfea:	6013      	strpl	r3, [r2, #0]
 800dfec:	2002      	movpl	r0, #2
 800dfee:	4770      	bx	lr
 800dff0:	b299      	uxth	r1, r3
 800dff2:	b909      	cbnz	r1, 800dff8 <__lo0bits+0x2a>
 800dff4:	0c1b      	lsrs	r3, r3, #16
 800dff6:	2010      	movs	r0, #16
 800dff8:	b2d9      	uxtb	r1, r3
 800dffa:	b909      	cbnz	r1, 800e000 <__lo0bits+0x32>
 800dffc:	3008      	adds	r0, #8
 800dffe:	0a1b      	lsrs	r3, r3, #8
 800e000:	0719      	lsls	r1, r3, #28
 800e002:	bf04      	itt	eq
 800e004:	091b      	lsreq	r3, r3, #4
 800e006:	3004      	addeq	r0, #4
 800e008:	0799      	lsls	r1, r3, #30
 800e00a:	bf04      	itt	eq
 800e00c:	089b      	lsreq	r3, r3, #2
 800e00e:	3002      	addeq	r0, #2
 800e010:	07d9      	lsls	r1, r3, #31
 800e012:	d403      	bmi.n	800e01c <__lo0bits+0x4e>
 800e014:	085b      	lsrs	r3, r3, #1
 800e016:	f100 0001 	add.w	r0, r0, #1
 800e01a:	d003      	beq.n	800e024 <__lo0bits+0x56>
 800e01c:	6013      	str	r3, [r2, #0]
 800e01e:	4770      	bx	lr
 800e020:	2000      	movs	r0, #0
 800e022:	4770      	bx	lr
 800e024:	2020      	movs	r0, #32
 800e026:	4770      	bx	lr

0800e028 <__i2b>:
 800e028:	b510      	push	{r4, lr}
 800e02a:	460c      	mov	r4, r1
 800e02c:	2101      	movs	r1, #1
 800e02e:	f7ff febd 	bl	800ddac <_Balloc>
 800e032:	4602      	mov	r2, r0
 800e034:	b928      	cbnz	r0, 800e042 <__i2b+0x1a>
 800e036:	4b05      	ldr	r3, [pc, #20]	@ (800e04c <__i2b+0x24>)
 800e038:	4805      	ldr	r0, [pc, #20]	@ (800e050 <__i2b+0x28>)
 800e03a:	f240 1145 	movw	r1, #325	@ 0x145
 800e03e:	f001 fb5f 	bl	800f700 <__assert_func>
 800e042:	2301      	movs	r3, #1
 800e044:	6144      	str	r4, [r0, #20]
 800e046:	6103      	str	r3, [r0, #16]
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	bf00      	nop
 800e04c:	0801069a 	.word	0x0801069a
 800e050:	080106ab 	.word	0x080106ab

0800e054 <__multiply>:
 800e054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e058:	4614      	mov	r4, r2
 800e05a:	690a      	ldr	r2, [r1, #16]
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	429a      	cmp	r2, r3
 800e060:	bfa8      	it	ge
 800e062:	4623      	movge	r3, r4
 800e064:	460f      	mov	r7, r1
 800e066:	bfa4      	itt	ge
 800e068:	460c      	movge	r4, r1
 800e06a:	461f      	movge	r7, r3
 800e06c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e070:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e074:	68a3      	ldr	r3, [r4, #8]
 800e076:	6861      	ldr	r1, [r4, #4]
 800e078:	eb0a 0609 	add.w	r6, sl, r9
 800e07c:	42b3      	cmp	r3, r6
 800e07e:	b085      	sub	sp, #20
 800e080:	bfb8      	it	lt
 800e082:	3101      	addlt	r1, #1
 800e084:	f7ff fe92 	bl	800ddac <_Balloc>
 800e088:	b930      	cbnz	r0, 800e098 <__multiply+0x44>
 800e08a:	4602      	mov	r2, r0
 800e08c:	4b44      	ldr	r3, [pc, #272]	@ (800e1a0 <__multiply+0x14c>)
 800e08e:	4845      	ldr	r0, [pc, #276]	@ (800e1a4 <__multiply+0x150>)
 800e090:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e094:	f001 fb34 	bl	800f700 <__assert_func>
 800e098:	f100 0514 	add.w	r5, r0, #20
 800e09c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0a0:	462b      	mov	r3, r5
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	4543      	cmp	r3, r8
 800e0a6:	d321      	bcc.n	800e0ec <__multiply+0x98>
 800e0a8:	f107 0114 	add.w	r1, r7, #20
 800e0ac:	f104 0214 	add.w	r2, r4, #20
 800e0b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e0b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e0b8:	9302      	str	r3, [sp, #8]
 800e0ba:	1b13      	subs	r3, r2, r4
 800e0bc:	3b15      	subs	r3, #21
 800e0be:	f023 0303 	bic.w	r3, r3, #3
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	f104 0715 	add.w	r7, r4, #21
 800e0c8:	42ba      	cmp	r2, r7
 800e0ca:	bf38      	it	cc
 800e0cc:	2304      	movcc	r3, #4
 800e0ce:	9301      	str	r3, [sp, #4]
 800e0d0:	9b02      	ldr	r3, [sp, #8]
 800e0d2:	9103      	str	r1, [sp, #12]
 800e0d4:	428b      	cmp	r3, r1
 800e0d6:	d80c      	bhi.n	800e0f2 <__multiply+0x9e>
 800e0d8:	2e00      	cmp	r6, #0
 800e0da:	dd03      	ble.n	800e0e4 <__multiply+0x90>
 800e0dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d05b      	beq.n	800e19c <__multiply+0x148>
 800e0e4:	6106      	str	r6, [r0, #16]
 800e0e6:	b005      	add	sp, #20
 800e0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ec:	f843 2b04 	str.w	r2, [r3], #4
 800e0f0:	e7d8      	b.n	800e0a4 <__multiply+0x50>
 800e0f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e0f6:	f1ba 0f00 	cmp.w	sl, #0
 800e0fa:	d024      	beq.n	800e146 <__multiply+0xf2>
 800e0fc:	f104 0e14 	add.w	lr, r4, #20
 800e100:	46a9      	mov	r9, r5
 800e102:	f04f 0c00 	mov.w	ip, #0
 800e106:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e10a:	f8d9 3000 	ldr.w	r3, [r9]
 800e10e:	fa1f fb87 	uxth.w	fp, r7
 800e112:	b29b      	uxth	r3, r3
 800e114:	fb0a 330b 	mla	r3, sl, fp, r3
 800e118:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e11c:	f8d9 7000 	ldr.w	r7, [r9]
 800e120:	4463      	add	r3, ip
 800e122:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e126:	fb0a c70b 	mla	r7, sl, fp, ip
 800e12a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e12e:	b29b      	uxth	r3, r3
 800e130:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e134:	4572      	cmp	r2, lr
 800e136:	f849 3b04 	str.w	r3, [r9], #4
 800e13a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e13e:	d8e2      	bhi.n	800e106 <__multiply+0xb2>
 800e140:	9b01      	ldr	r3, [sp, #4]
 800e142:	f845 c003 	str.w	ip, [r5, r3]
 800e146:	9b03      	ldr	r3, [sp, #12]
 800e148:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e14c:	3104      	adds	r1, #4
 800e14e:	f1b9 0f00 	cmp.w	r9, #0
 800e152:	d021      	beq.n	800e198 <__multiply+0x144>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	f104 0c14 	add.w	ip, r4, #20
 800e15a:	46ae      	mov	lr, r5
 800e15c:	f04f 0a00 	mov.w	sl, #0
 800e160:	f8bc b000 	ldrh.w	fp, [ip]
 800e164:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e168:	fb09 770b 	mla	r7, r9, fp, r7
 800e16c:	4457      	add	r7, sl
 800e16e:	b29b      	uxth	r3, r3
 800e170:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e174:	f84e 3b04 	str.w	r3, [lr], #4
 800e178:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e17c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e180:	f8be 3000 	ldrh.w	r3, [lr]
 800e184:	fb09 330a 	mla	r3, r9, sl, r3
 800e188:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e18c:	4562      	cmp	r2, ip
 800e18e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e192:	d8e5      	bhi.n	800e160 <__multiply+0x10c>
 800e194:	9f01      	ldr	r7, [sp, #4]
 800e196:	51eb      	str	r3, [r5, r7]
 800e198:	3504      	adds	r5, #4
 800e19a:	e799      	b.n	800e0d0 <__multiply+0x7c>
 800e19c:	3e01      	subs	r6, #1
 800e19e:	e79b      	b.n	800e0d8 <__multiply+0x84>
 800e1a0:	0801069a 	.word	0x0801069a
 800e1a4:	080106ab 	.word	0x080106ab

0800e1a8 <__pow5mult>:
 800e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	4615      	mov	r5, r2
 800e1ae:	f012 0203 	ands.w	r2, r2, #3
 800e1b2:	4607      	mov	r7, r0
 800e1b4:	460e      	mov	r6, r1
 800e1b6:	d007      	beq.n	800e1c8 <__pow5mult+0x20>
 800e1b8:	4c25      	ldr	r4, [pc, #148]	@ (800e250 <__pow5mult+0xa8>)
 800e1ba:	3a01      	subs	r2, #1
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1c2:	f7ff fe55 	bl	800de70 <__multadd>
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	10ad      	asrs	r5, r5, #2
 800e1ca:	d03d      	beq.n	800e248 <__pow5mult+0xa0>
 800e1cc:	69fc      	ldr	r4, [r7, #28]
 800e1ce:	b97c      	cbnz	r4, 800e1f0 <__pow5mult+0x48>
 800e1d0:	2010      	movs	r0, #16
 800e1d2:	f7ff fd35 	bl	800dc40 <malloc>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	61f8      	str	r0, [r7, #28]
 800e1da:	b928      	cbnz	r0, 800e1e8 <__pow5mult+0x40>
 800e1dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e254 <__pow5mult+0xac>)
 800e1de:	481e      	ldr	r0, [pc, #120]	@ (800e258 <__pow5mult+0xb0>)
 800e1e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e1e4:	f001 fa8c 	bl	800f700 <__assert_func>
 800e1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1ec:	6004      	str	r4, [r0, #0]
 800e1ee:	60c4      	str	r4, [r0, #12]
 800e1f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1f8:	b94c      	cbnz	r4, 800e20e <__pow5mult+0x66>
 800e1fa:	f240 2171 	movw	r1, #625	@ 0x271
 800e1fe:	4638      	mov	r0, r7
 800e200:	f7ff ff12 	bl	800e028 <__i2b>
 800e204:	2300      	movs	r3, #0
 800e206:	f8c8 0008 	str.w	r0, [r8, #8]
 800e20a:	4604      	mov	r4, r0
 800e20c:	6003      	str	r3, [r0, #0]
 800e20e:	f04f 0900 	mov.w	r9, #0
 800e212:	07eb      	lsls	r3, r5, #31
 800e214:	d50a      	bpl.n	800e22c <__pow5mult+0x84>
 800e216:	4631      	mov	r1, r6
 800e218:	4622      	mov	r2, r4
 800e21a:	4638      	mov	r0, r7
 800e21c:	f7ff ff1a 	bl	800e054 <__multiply>
 800e220:	4631      	mov	r1, r6
 800e222:	4680      	mov	r8, r0
 800e224:	4638      	mov	r0, r7
 800e226:	f7ff fe01 	bl	800de2c <_Bfree>
 800e22a:	4646      	mov	r6, r8
 800e22c:	106d      	asrs	r5, r5, #1
 800e22e:	d00b      	beq.n	800e248 <__pow5mult+0xa0>
 800e230:	6820      	ldr	r0, [r4, #0]
 800e232:	b938      	cbnz	r0, 800e244 <__pow5mult+0x9c>
 800e234:	4622      	mov	r2, r4
 800e236:	4621      	mov	r1, r4
 800e238:	4638      	mov	r0, r7
 800e23a:	f7ff ff0b 	bl	800e054 <__multiply>
 800e23e:	6020      	str	r0, [r4, #0]
 800e240:	f8c0 9000 	str.w	r9, [r0]
 800e244:	4604      	mov	r4, r0
 800e246:	e7e4      	b.n	800e212 <__pow5mult+0x6a>
 800e248:	4630      	mov	r0, r6
 800e24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24e:	bf00      	nop
 800e250:	08010704 	.word	0x08010704
 800e254:	0801062b 	.word	0x0801062b
 800e258:	080106ab 	.word	0x080106ab

0800e25c <__lshift>:
 800e25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e260:	460c      	mov	r4, r1
 800e262:	6849      	ldr	r1, [r1, #4]
 800e264:	6923      	ldr	r3, [r4, #16]
 800e266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e26a:	68a3      	ldr	r3, [r4, #8]
 800e26c:	4607      	mov	r7, r0
 800e26e:	4691      	mov	r9, r2
 800e270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e274:	f108 0601 	add.w	r6, r8, #1
 800e278:	42b3      	cmp	r3, r6
 800e27a:	db0b      	blt.n	800e294 <__lshift+0x38>
 800e27c:	4638      	mov	r0, r7
 800e27e:	f7ff fd95 	bl	800ddac <_Balloc>
 800e282:	4605      	mov	r5, r0
 800e284:	b948      	cbnz	r0, 800e29a <__lshift+0x3e>
 800e286:	4602      	mov	r2, r0
 800e288:	4b28      	ldr	r3, [pc, #160]	@ (800e32c <__lshift+0xd0>)
 800e28a:	4829      	ldr	r0, [pc, #164]	@ (800e330 <__lshift+0xd4>)
 800e28c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e290:	f001 fa36 	bl	800f700 <__assert_func>
 800e294:	3101      	adds	r1, #1
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	e7ee      	b.n	800e278 <__lshift+0x1c>
 800e29a:	2300      	movs	r3, #0
 800e29c:	f100 0114 	add.w	r1, r0, #20
 800e2a0:	f100 0210 	add.w	r2, r0, #16
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	4553      	cmp	r3, sl
 800e2a8:	db33      	blt.n	800e312 <__lshift+0xb6>
 800e2aa:	6920      	ldr	r0, [r4, #16]
 800e2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2b0:	f104 0314 	add.w	r3, r4, #20
 800e2b4:	f019 091f 	ands.w	r9, r9, #31
 800e2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2c0:	d02b      	beq.n	800e31a <__lshift+0xbe>
 800e2c2:	f1c9 0e20 	rsb	lr, r9, #32
 800e2c6:	468a      	mov	sl, r1
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	6818      	ldr	r0, [r3, #0]
 800e2cc:	fa00 f009 	lsl.w	r0, r0, r9
 800e2d0:	4310      	orrs	r0, r2
 800e2d2:	f84a 0b04 	str.w	r0, [sl], #4
 800e2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2da:	459c      	cmp	ip, r3
 800e2dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2e0:	d8f3      	bhi.n	800e2ca <__lshift+0x6e>
 800e2e2:	ebac 0304 	sub.w	r3, ip, r4
 800e2e6:	3b15      	subs	r3, #21
 800e2e8:	f023 0303 	bic.w	r3, r3, #3
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	f104 0015 	add.w	r0, r4, #21
 800e2f2:	4584      	cmp	ip, r0
 800e2f4:	bf38      	it	cc
 800e2f6:	2304      	movcc	r3, #4
 800e2f8:	50ca      	str	r2, [r1, r3]
 800e2fa:	b10a      	cbz	r2, 800e300 <__lshift+0xa4>
 800e2fc:	f108 0602 	add.w	r6, r8, #2
 800e300:	3e01      	subs	r6, #1
 800e302:	4638      	mov	r0, r7
 800e304:	612e      	str	r6, [r5, #16]
 800e306:	4621      	mov	r1, r4
 800e308:	f7ff fd90 	bl	800de2c <_Bfree>
 800e30c:	4628      	mov	r0, r5
 800e30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e312:	f842 0f04 	str.w	r0, [r2, #4]!
 800e316:	3301      	adds	r3, #1
 800e318:	e7c5      	b.n	800e2a6 <__lshift+0x4a>
 800e31a:	3904      	subs	r1, #4
 800e31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e320:	f841 2f04 	str.w	r2, [r1, #4]!
 800e324:	459c      	cmp	ip, r3
 800e326:	d8f9      	bhi.n	800e31c <__lshift+0xc0>
 800e328:	e7ea      	b.n	800e300 <__lshift+0xa4>
 800e32a:	bf00      	nop
 800e32c:	0801069a 	.word	0x0801069a
 800e330:	080106ab 	.word	0x080106ab

0800e334 <__mcmp>:
 800e334:	690a      	ldr	r2, [r1, #16]
 800e336:	4603      	mov	r3, r0
 800e338:	6900      	ldr	r0, [r0, #16]
 800e33a:	1a80      	subs	r0, r0, r2
 800e33c:	b530      	push	{r4, r5, lr}
 800e33e:	d10e      	bne.n	800e35e <__mcmp+0x2a>
 800e340:	3314      	adds	r3, #20
 800e342:	3114      	adds	r1, #20
 800e344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e34c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e354:	4295      	cmp	r5, r2
 800e356:	d003      	beq.n	800e360 <__mcmp+0x2c>
 800e358:	d205      	bcs.n	800e366 <__mcmp+0x32>
 800e35a:	f04f 30ff 	mov.w	r0, #4294967295
 800e35e:	bd30      	pop	{r4, r5, pc}
 800e360:	42a3      	cmp	r3, r4
 800e362:	d3f3      	bcc.n	800e34c <__mcmp+0x18>
 800e364:	e7fb      	b.n	800e35e <__mcmp+0x2a>
 800e366:	2001      	movs	r0, #1
 800e368:	e7f9      	b.n	800e35e <__mcmp+0x2a>
	...

0800e36c <__mdiff>:
 800e36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e370:	4689      	mov	r9, r1
 800e372:	4606      	mov	r6, r0
 800e374:	4611      	mov	r1, r2
 800e376:	4648      	mov	r0, r9
 800e378:	4614      	mov	r4, r2
 800e37a:	f7ff ffdb 	bl	800e334 <__mcmp>
 800e37e:	1e05      	subs	r5, r0, #0
 800e380:	d112      	bne.n	800e3a8 <__mdiff+0x3c>
 800e382:	4629      	mov	r1, r5
 800e384:	4630      	mov	r0, r6
 800e386:	f7ff fd11 	bl	800ddac <_Balloc>
 800e38a:	4602      	mov	r2, r0
 800e38c:	b928      	cbnz	r0, 800e39a <__mdiff+0x2e>
 800e38e:	4b3f      	ldr	r3, [pc, #252]	@ (800e48c <__mdiff+0x120>)
 800e390:	f240 2137 	movw	r1, #567	@ 0x237
 800e394:	483e      	ldr	r0, [pc, #248]	@ (800e490 <__mdiff+0x124>)
 800e396:	f001 f9b3 	bl	800f700 <__assert_func>
 800e39a:	2301      	movs	r3, #1
 800e39c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	b003      	add	sp, #12
 800e3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a8:	bfbc      	itt	lt
 800e3aa:	464b      	movlt	r3, r9
 800e3ac:	46a1      	movlt	r9, r4
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e3b4:	bfba      	itte	lt
 800e3b6:	461c      	movlt	r4, r3
 800e3b8:	2501      	movlt	r5, #1
 800e3ba:	2500      	movge	r5, #0
 800e3bc:	f7ff fcf6 	bl	800ddac <_Balloc>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	b918      	cbnz	r0, 800e3cc <__mdiff+0x60>
 800e3c4:	4b31      	ldr	r3, [pc, #196]	@ (800e48c <__mdiff+0x120>)
 800e3c6:	f240 2145 	movw	r1, #581	@ 0x245
 800e3ca:	e7e3      	b.n	800e394 <__mdiff+0x28>
 800e3cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e3d0:	6926      	ldr	r6, [r4, #16]
 800e3d2:	60c5      	str	r5, [r0, #12]
 800e3d4:	f109 0310 	add.w	r3, r9, #16
 800e3d8:	f109 0514 	add.w	r5, r9, #20
 800e3dc:	f104 0e14 	add.w	lr, r4, #20
 800e3e0:	f100 0b14 	add.w	fp, r0, #20
 800e3e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e3e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e3ec:	9301      	str	r3, [sp, #4]
 800e3ee:	46d9      	mov	r9, fp
 800e3f0:	f04f 0c00 	mov.w	ip, #0
 800e3f4:	9b01      	ldr	r3, [sp, #4]
 800e3f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e3fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e3fe:	9301      	str	r3, [sp, #4]
 800e400:	fa1f f38a 	uxth.w	r3, sl
 800e404:	4619      	mov	r1, r3
 800e406:	b283      	uxth	r3, r0
 800e408:	1acb      	subs	r3, r1, r3
 800e40a:	0c00      	lsrs	r0, r0, #16
 800e40c:	4463      	add	r3, ip
 800e40e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e412:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e416:	b29b      	uxth	r3, r3
 800e418:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e41c:	4576      	cmp	r6, lr
 800e41e:	f849 3b04 	str.w	r3, [r9], #4
 800e422:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e426:	d8e5      	bhi.n	800e3f4 <__mdiff+0x88>
 800e428:	1b33      	subs	r3, r6, r4
 800e42a:	3b15      	subs	r3, #21
 800e42c:	f023 0303 	bic.w	r3, r3, #3
 800e430:	3415      	adds	r4, #21
 800e432:	3304      	adds	r3, #4
 800e434:	42a6      	cmp	r6, r4
 800e436:	bf38      	it	cc
 800e438:	2304      	movcc	r3, #4
 800e43a:	441d      	add	r5, r3
 800e43c:	445b      	add	r3, fp
 800e43e:	461e      	mov	r6, r3
 800e440:	462c      	mov	r4, r5
 800e442:	4544      	cmp	r4, r8
 800e444:	d30e      	bcc.n	800e464 <__mdiff+0xf8>
 800e446:	f108 0103 	add.w	r1, r8, #3
 800e44a:	1b49      	subs	r1, r1, r5
 800e44c:	f021 0103 	bic.w	r1, r1, #3
 800e450:	3d03      	subs	r5, #3
 800e452:	45a8      	cmp	r8, r5
 800e454:	bf38      	it	cc
 800e456:	2100      	movcc	r1, #0
 800e458:	440b      	add	r3, r1
 800e45a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e45e:	b191      	cbz	r1, 800e486 <__mdiff+0x11a>
 800e460:	6117      	str	r7, [r2, #16]
 800e462:	e79d      	b.n	800e3a0 <__mdiff+0x34>
 800e464:	f854 1b04 	ldr.w	r1, [r4], #4
 800e468:	46e6      	mov	lr, ip
 800e46a:	0c08      	lsrs	r0, r1, #16
 800e46c:	fa1c fc81 	uxtah	ip, ip, r1
 800e470:	4471      	add	r1, lr
 800e472:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e476:	b289      	uxth	r1, r1
 800e478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e47c:	f846 1b04 	str.w	r1, [r6], #4
 800e480:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e484:	e7dd      	b.n	800e442 <__mdiff+0xd6>
 800e486:	3f01      	subs	r7, #1
 800e488:	e7e7      	b.n	800e45a <__mdiff+0xee>
 800e48a:	bf00      	nop
 800e48c:	0801069a 	.word	0x0801069a
 800e490:	080106ab 	.word	0x080106ab

0800e494 <__ulp>:
 800e494:	b082      	sub	sp, #8
 800e496:	ed8d 0b00 	vstr	d0, [sp]
 800e49a:	9a01      	ldr	r2, [sp, #4]
 800e49c:	4b0f      	ldr	r3, [pc, #60]	@ (800e4dc <__ulp+0x48>)
 800e49e:	4013      	ands	r3, r2
 800e4a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	dc08      	bgt.n	800e4ba <__ulp+0x26>
 800e4a8:	425b      	negs	r3, r3
 800e4aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e4ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4b2:	da04      	bge.n	800e4be <__ulp+0x2a>
 800e4b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e4b8:	4113      	asrs	r3, r2
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	e008      	b.n	800e4d0 <__ulp+0x3c>
 800e4be:	f1a2 0314 	sub.w	r3, r2, #20
 800e4c2:	2b1e      	cmp	r3, #30
 800e4c4:	bfda      	itte	le
 800e4c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e4ca:	40da      	lsrle	r2, r3
 800e4cc:	2201      	movgt	r2, #1
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	ec41 0b10 	vmov	d0, r0, r1
 800e4d8:	b002      	add	sp, #8
 800e4da:	4770      	bx	lr
 800e4dc:	7ff00000 	.word	0x7ff00000

0800e4e0 <__b2d>:
 800e4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e4:	6906      	ldr	r6, [r0, #16]
 800e4e6:	f100 0814 	add.w	r8, r0, #20
 800e4ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e4ee:	1f37      	subs	r7, r6, #4
 800e4f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f7ff fd4b 	bl	800df90 <__hi0bits>
 800e4fa:	f1c0 0320 	rsb	r3, r0, #32
 800e4fe:	280a      	cmp	r0, #10
 800e500:	600b      	str	r3, [r1, #0]
 800e502:	491b      	ldr	r1, [pc, #108]	@ (800e570 <__b2d+0x90>)
 800e504:	dc15      	bgt.n	800e532 <__b2d+0x52>
 800e506:	f1c0 0c0b 	rsb	ip, r0, #11
 800e50a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e50e:	45b8      	cmp	r8, r7
 800e510:	ea43 0501 	orr.w	r5, r3, r1
 800e514:	bf34      	ite	cc
 800e516:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e51a:	2300      	movcs	r3, #0
 800e51c:	3015      	adds	r0, #21
 800e51e:	fa02 f000 	lsl.w	r0, r2, r0
 800e522:	fa23 f30c 	lsr.w	r3, r3, ip
 800e526:	4303      	orrs	r3, r0
 800e528:	461c      	mov	r4, r3
 800e52a:	ec45 4b10 	vmov	d0, r4, r5
 800e52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e532:	45b8      	cmp	r8, r7
 800e534:	bf3a      	itte	cc
 800e536:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e53a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e53e:	2300      	movcs	r3, #0
 800e540:	380b      	subs	r0, #11
 800e542:	d012      	beq.n	800e56a <__b2d+0x8a>
 800e544:	f1c0 0120 	rsb	r1, r0, #32
 800e548:	fa23 f401 	lsr.w	r4, r3, r1
 800e54c:	4082      	lsls	r2, r0
 800e54e:	4322      	orrs	r2, r4
 800e550:	4547      	cmp	r7, r8
 800e552:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e556:	bf8c      	ite	hi
 800e558:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e55c:	2200      	movls	r2, #0
 800e55e:	4083      	lsls	r3, r0
 800e560:	40ca      	lsrs	r2, r1
 800e562:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e566:	4313      	orrs	r3, r2
 800e568:	e7de      	b.n	800e528 <__b2d+0x48>
 800e56a:	ea42 0501 	orr.w	r5, r2, r1
 800e56e:	e7db      	b.n	800e528 <__b2d+0x48>
 800e570:	3ff00000 	.word	0x3ff00000

0800e574 <__d2b>:
 800e574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e578:	460f      	mov	r7, r1
 800e57a:	2101      	movs	r1, #1
 800e57c:	ec59 8b10 	vmov	r8, r9, d0
 800e580:	4616      	mov	r6, r2
 800e582:	f7ff fc13 	bl	800ddac <_Balloc>
 800e586:	4604      	mov	r4, r0
 800e588:	b930      	cbnz	r0, 800e598 <__d2b+0x24>
 800e58a:	4602      	mov	r2, r0
 800e58c:	4b23      	ldr	r3, [pc, #140]	@ (800e61c <__d2b+0xa8>)
 800e58e:	4824      	ldr	r0, [pc, #144]	@ (800e620 <__d2b+0xac>)
 800e590:	f240 310f 	movw	r1, #783	@ 0x30f
 800e594:	f001 f8b4 	bl	800f700 <__assert_func>
 800e598:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e59c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5a0:	b10d      	cbz	r5, 800e5a6 <__d2b+0x32>
 800e5a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	f1b8 0300 	subs.w	r3, r8, #0
 800e5ac:	d023      	beq.n	800e5f6 <__d2b+0x82>
 800e5ae:	4668      	mov	r0, sp
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	f7ff fd0c 	bl	800dfce <__lo0bits>
 800e5b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5ba:	b1d0      	cbz	r0, 800e5f2 <__d2b+0x7e>
 800e5bc:	f1c0 0320 	rsb	r3, r0, #32
 800e5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c4:	430b      	orrs	r3, r1
 800e5c6:	40c2      	lsrs	r2, r0
 800e5c8:	6163      	str	r3, [r4, #20]
 800e5ca:	9201      	str	r2, [sp, #4]
 800e5cc:	9b01      	ldr	r3, [sp, #4]
 800e5ce:	61a3      	str	r3, [r4, #24]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	bf0c      	ite	eq
 800e5d4:	2201      	moveq	r2, #1
 800e5d6:	2202      	movne	r2, #2
 800e5d8:	6122      	str	r2, [r4, #16]
 800e5da:	b1a5      	cbz	r5, 800e606 <__d2b+0x92>
 800e5dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5e0:	4405      	add	r5, r0
 800e5e2:	603d      	str	r5, [r7, #0]
 800e5e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5e8:	6030      	str	r0, [r6, #0]
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	b003      	add	sp, #12
 800e5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5f2:	6161      	str	r1, [r4, #20]
 800e5f4:	e7ea      	b.n	800e5cc <__d2b+0x58>
 800e5f6:	a801      	add	r0, sp, #4
 800e5f8:	f7ff fce9 	bl	800dfce <__lo0bits>
 800e5fc:	9b01      	ldr	r3, [sp, #4]
 800e5fe:	6163      	str	r3, [r4, #20]
 800e600:	3020      	adds	r0, #32
 800e602:	2201      	movs	r2, #1
 800e604:	e7e8      	b.n	800e5d8 <__d2b+0x64>
 800e606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e60a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e60e:	6038      	str	r0, [r7, #0]
 800e610:	6918      	ldr	r0, [r3, #16]
 800e612:	f7ff fcbd 	bl	800df90 <__hi0bits>
 800e616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e61a:	e7e5      	b.n	800e5e8 <__d2b+0x74>
 800e61c:	0801069a 	.word	0x0801069a
 800e620:	080106ab 	.word	0x080106ab

0800e624 <__ratio>:
 800e624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e628:	4688      	mov	r8, r1
 800e62a:	4669      	mov	r1, sp
 800e62c:	4681      	mov	r9, r0
 800e62e:	f7ff ff57 	bl	800e4e0 <__b2d>
 800e632:	a901      	add	r1, sp, #4
 800e634:	4640      	mov	r0, r8
 800e636:	ec55 4b10 	vmov	r4, r5, d0
 800e63a:	f7ff ff51 	bl	800e4e0 <__b2d>
 800e63e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e642:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e646:	1ad2      	subs	r2, r2, r3
 800e648:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e64c:	1a5b      	subs	r3, r3, r1
 800e64e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e652:	ec57 6b10 	vmov	r6, r7, d0
 800e656:	2b00      	cmp	r3, #0
 800e658:	bfd6      	itet	le
 800e65a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e65e:	462a      	movgt	r2, r5
 800e660:	463a      	movle	r2, r7
 800e662:	46ab      	mov	fp, r5
 800e664:	46a2      	mov	sl, r4
 800e666:	bfce      	itee	gt
 800e668:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e66c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e670:	ee00 3a90 	vmovle	s1, r3
 800e674:	ec4b ab17 	vmov	d7, sl, fp
 800e678:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e67c:	b003      	add	sp, #12
 800e67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e682 <__copybits>:
 800e682:	3901      	subs	r1, #1
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	1149      	asrs	r1, r1, #5
 800e688:	6914      	ldr	r4, [r2, #16]
 800e68a:	3101      	adds	r1, #1
 800e68c:	f102 0314 	add.w	r3, r2, #20
 800e690:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e694:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e698:	1f05      	subs	r5, r0, #4
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	d30c      	bcc.n	800e6b8 <__copybits+0x36>
 800e69e:	1aa3      	subs	r3, r4, r2
 800e6a0:	3b11      	subs	r3, #17
 800e6a2:	f023 0303 	bic.w	r3, r3, #3
 800e6a6:	3211      	adds	r2, #17
 800e6a8:	42a2      	cmp	r2, r4
 800e6aa:	bf88      	it	hi
 800e6ac:	2300      	movhi	r3, #0
 800e6ae:	4418      	add	r0, r3
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	4288      	cmp	r0, r1
 800e6b4:	d305      	bcc.n	800e6c2 <__copybits+0x40>
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}
 800e6b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800e6bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800e6c0:	e7eb      	b.n	800e69a <__copybits+0x18>
 800e6c2:	f840 3b04 	str.w	r3, [r0], #4
 800e6c6:	e7f4      	b.n	800e6b2 <__copybits+0x30>

0800e6c8 <__any_on>:
 800e6c8:	f100 0214 	add.w	r2, r0, #20
 800e6cc:	6900      	ldr	r0, [r0, #16]
 800e6ce:	114b      	asrs	r3, r1, #5
 800e6d0:	4298      	cmp	r0, r3
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	db11      	blt.n	800e6fa <__any_on+0x32>
 800e6d6:	dd0a      	ble.n	800e6ee <__any_on+0x26>
 800e6d8:	f011 011f 	ands.w	r1, r1, #31
 800e6dc:	d007      	beq.n	800e6ee <__any_on+0x26>
 800e6de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6e2:	fa24 f001 	lsr.w	r0, r4, r1
 800e6e6:	fa00 f101 	lsl.w	r1, r0, r1
 800e6ea:	428c      	cmp	r4, r1
 800e6ec:	d10b      	bne.n	800e706 <__any_on+0x3e>
 800e6ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d803      	bhi.n	800e6fe <__any_on+0x36>
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	bd10      	pop	{r4, pc}
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	e7f7      	b.n	800e6ee <__any_on+0x26>
 800e6fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e702:	2900      	cmp	r1, #0
 800e704:	d0f5      	beq.n	800e6f2 <__any_on+0x2a>
 800e706:	2001      	movs	r0, #1
 800e708:	e7f6      	b.n	800e6f8 <__any_on+0x30>

0800e70a <sulp>:
 800e70a:	b570      	push	{r4, r5, r6, lr}
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	4616      	mov	r6, r2
 800e712:	ec45 4b10 	vmov	d0, r4, r5
 800e716:	f7ff febd 	bl	800e494 <__ulp>
 800e71a:	b17e      	cbz	r6, 800e73c <sulp+0x32>
 800e71c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e720:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e724:	2b00      	cmp	r3, #0
 800e726:	dd09      	ble.n	800e73c <sulp+0x32>
 800e728:	051b      	lsls	r3, r3, #20
 800e72a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e72e:	2000      	movs	r0, #0
 800e730:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e734:	ec41 0b17 	vmov	d7, r0, r1
 800e738:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e73c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e740 <_strtod_l>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	ed2d 8b0a 	vpush	{d8-d12}
 800e748:	b097      	sub	sp, #92	@ 0x5c
 800e74a:	4688      	mov	r8, r1
 800e74c:	920e      	str	r2, [sp, #56]	@ 0x38
 800e74e:	2200      	movs	r2, #0
 800e750:	9212      	str	r2, [sp, #72]	@ 0x48
 800e752:	9005      	str	r0, [sp, #20]
 800e754:	f04f 0a00 	mov.w	sl, #0
 800e758:	f04f 0b00 	mov.w	fp, #0
 800e75c:	460a      	mov	r2, r1
 800e75e:	9211      	str	r2, [sp, #68]	@ 0x44
 800e760:	7811      	ldrb	r1, [r2, #0]
 800e762:	292b      	cmp	r1, #43	@ 0x2b
 800e764:	d04c      	beq.n	800e800 <_strtod_l+0xc0>
 800e766:	d839      	bhi.n	800e7dc <_strtod_l+0x9c>
 800e768:	290d      	cmp	r1, #13
 800e76a:	d833      	bhi.n	800e7d4 <_strtod_l+0x94>
 800e76c:	2908      	cmp	r1, #8
 800e76e:	d833      	bhi.n	800e7d8 <_strtod_l+0x98>
 800e770:	2900      	cmp	r1, #0
 800e772:	d03c      	beq.n	800e7ee <_strtod_l+0xae>
 800e774:	2200      	movs	r2, #0
 800e776:	9208      	str	r2, [sp, #32]
 800e778:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e77a:	782a      	ldrb	r2, [r5, #0]
 800e77c:	2a30      	cmp	r2, #48	@ 0x30
 800e77e:	f040 80b5 	bne.w	800e8ec <_strtod_l+0x1ac>
 800e782:	786a      	ldrb	r2, [r5, #1]
 800e784:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e788:	2a58      	cmp	r2, #88	@ 0x58
 800e78a:	d170      	bne.n	800e86e <_strtod_l+0x12e>
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	9b08      	ldr	r3, [sp, #32]
 800e790:	9301      	str	r3, [sp, #4]
 800e792:	ab12      	add	r3, sp, #72	@ 0x48
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	4a8b      	ldr	r2, [pc, #556]	@ (800e9c4 <_strtod_l+0x284>)
 800e798:	9805      	ldr	r0, [sp, #20]
 800e79a:	ab13      	add	r3, sp, #76	@ 0x4c
 800e79c:	a911      	add	r1, sp, #68	@ 0x44
 800e79e:	f001 f849 	bl	800f834 <__gethex>
 800e7a2:	f010 060f 	ands.w	r6, r0, #15
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	d005      	beq.n	800e7b6 <_strtod_l+0x76>
 800e7aa:	2e06      	cmp	r6, #6
 800e7ac:	d12a      	bne.n	800e804 <_strtod_l+0xc4>
 800e7ae:	3501      	adds	r5, #1
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	9511      	str	r5, [sp, #68]	@ 0x44
 800e7b4:	9308      	str	r3, [sp, #32]
 800e7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f040 852f 	bne.w	800f21c <_strtod_l+0xadc>
 800e7be:	9b08      	ldr	r3, [sp, #32]
 800e7c0:	ec4b ab10 	vmov	d0, sl, fp
 800e7c4:	b1cb      	cbz	r3, 800e7fa <_strtod_l+0xba>
 800e7c6:	eeb1 0b40 	vneg.f64	d0, d0
 800e7ca:	b017      	add	sp, #92	@ 0x5c
 800e7cc:	ecbd 8b0a 	vpop	{d8-d12}
 800e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d4:	2920      	cmp	r1, #32
 800e7d6:	d1cd      	bne.n	800e774 <_strtod_l+0x34>
 800e7d8:	3201      	adds	r2, #1
 800e7da:	e7c0      	b.n	800e75e <_strtod_l+0x1e>
 800e7dc:	292d      	cmp	r1, #45	@ 0x2d
 800e7de:	d1c9      	bne.n	800e774 <_strtod_l+0x34>
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	9108      	str	r1, [sp, #32]
 800e7e4:	1c51      	adds	r1, r2, #1
 800e7e6:	9111      	str	r1, [sp, #68]	@ 0x44
 800e7e8:	7852      	ldrb	r2, [r2, #1]
 800e7ea:	2a00      	cmp	r2, #0
 800e7ec:	d1c4      	bne.n	800e778 <_strtod_l+0x38>
 800e7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f040 850f 	bne.w	800f218 <_strtod_l+0xad8>
 800e7fa:	ec4b ab10 	vmov	d0, sl, fp
 800e7fe:	e7e4      	b.n	800e7ca <_strtod_l+0x8a>
 800e800:	2100      	movs	r1, #0
 800e802:	e7ee      	b.n	800e7e2 <_strtod_l+0xa2>
 800e804:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e806:	b13a      	cbz	r2, 800e818 <_strtod_l+0xd8>
 800e808:	2135      	movs	r1, #53	@ 0x35
 800e80a:	a814      	add	r0, sp, #80	@ 0x50
 800e80c:	f7ff ff39 	bl	800e682 <__copybits>
 800e810:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e812:	9805      	ldr	r0, [sp, #20]
 800e814:	f7ff fb0a 	bl	800de2c <_Bfree>
 800e818:	1e73      	subs	r3, r6, #1
 800e81a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d806      	bhi.n	800e82e <_strtod_l+0xee>
 800e820:	e8df f003 	tbb	[pc, r3]
 800e824:	201d0314 	.word	0x201d0314
 800e828:	14          	.byte	0x14
 800e829:	00          	.byte	0x00
 800e82a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e82e:	05e3      	lsls	r3, r4, #23
 800e830:	bf48      	it	mi
 800e832:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e836:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e83a:	0d1b      	lsrs	r3, r3, #20
 800e83c:	051b      	lsls	r3, r3, #20
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1b9      	bne.n	800e7b6 <_strtod_l+0x76>
 800e842:	f7fe fb9f 	bl	800cf84 <__errno>
 800e846:	2322      	movs	r3, #34	@ 0x22
 800e848:	6003      	str	r3, [r0, #0]
 800e84a:	e7b4      	b.n	800e7b6 <_strtod_l+0x76>
 800e84c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e850:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e854:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e858:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e85c:	e7e7      	b.n	800e82e <_strtod_l+0xee>
 800e85e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e9cc <_strtod_l+0x28c>
 800e862:	e7e4      	b.n	800e82e <_strtod_l+0xee>
 800e864:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e868:	f04f 3aff 	mov.w	sl, #4294967295
 800e86c:	e7df      	b.n	800e82e <_strtod_l+0xee>
 800e86e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e870:	1c5a      	adds	r2, r3, #1
 800e872:	9211      	str	r2, [sp, #68]	@ 0x44
 800e874:	785b      	ldrb	r3, [r3, #1]
 800e876:	2b30      	cmp	r3, #48	@ 0x30
 800e878:	d0f9      	beq.n	800e86e <_strtod_l+0x12e>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d09b      	beq.n	800e7b6 <_strtod_l+0x76>
 800e87e:	2301      	movs	r3, #1
 800e880:	2600      	movs	r6, #0
 800e882:	9307      	str	r3, [sp, #28]
 800e884:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e886:	930a      	str	r3, [sp, #40]	@ 0x28
 800e888:	46b1      	mov	r9, r6
 800e88a:	4635      	mov	r5, r6
 800e88c:	220a      	movs	r2, #10
 800e88e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e890:	7804      	ldrb	r4, [r0, #0]
 800e892:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e896:	b2d9      	uxtb	r1, r3
 800e898:	2909      	cmp	r1, #9
 800e89a:	d929      	bls.n	800e8f0 <_strtod_l+0x1b0>
 800e89c:	494a      	ldr	r1, [pc, #296]	@ (800e9c8 <_strtod_l+0x288>)
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f7fe fb13 	bl	800ceca <strncmp>
 800e8a4:	b378      	cbz	r0, 800e906 <_strtod_l+0x1c6>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	462b      	mov	r3, r5
 800e8ac:	4607      	mov	r7, r0
 800e8ae:	9006      	str	r0, [sp, #24]
 800e8b0:	2a65      	cmp	r2, #101	@ 0x65
 800e8b2:	d001      	beq.n	800e8b8 <_strtod_l+0x178>
 800e8b4:	2a45      	cmp	r2, #69	@ 0x45
 800e8b6:	d117      	bne.n	800e8e8 <_strtod_l+0x1a8>
 800e8b8:	b91b      	cbnz	r3, 800e8c2 <_strtod_l+0x182>
 800e8ba:	9b07      	ldr	r3, [sp, #28]
 800e8bc:	4303      	orrs	r3, r0
 800e8be:	d096      	beq.n	800e7ee <_strtod_l+0xae>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e8c6:	f108 0201 	add.w	r2, r8, #1
 800e8ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800e8cc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e8d0:	2a2b      	cmp	r2, #43	@ 0x2b
 800e8d2:	d06b      	beq.n	800e9ac <_strtod_l+0x26c>
 800e8d4:	2a2d      	cmp	r2, #45	@ 0x2d
 800e8d6:	d071      	beq.n	800e9bc <_strtod_l+0x27c>
 800e8d8:	f04f 0e00 	mov.w	lr, #0
 800e8dc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e8e0:	2c09      	cmp	r4, #9
 800e8e2:	d979      	bls.n	800e9d8 <_strtod_l+0x298>
 800e8e4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e8e8:	2400      	movs	r4, #0
 800e8ea:	e094      	b.n	800ea16 <_strtod_l+0x2d6>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	e7c7      	b.n	800e880 <_strtod_l+0x140>
 800e8f0:	2d08      	cmp	r5, #8
 800e8f2:	f100 0001 	add.w	r0, r0, #1
 800e8f6:	bfd4      	ite	le
 800e8f8:	fb02 3909 	mlale	r9, r2, r9, r3
 800e8fc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e900:	3501      	adds	r5, #1
 800e902:	9011      	str	r0, [sp, #68]	@ 0x44
 800e904:	e7c3      	b.n	800e88e <_strtod_l+0x14e>
 800e906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e90c:	785a      	ldrb	r2, [r3, #1]
 800e90e:	b375      	cbz	r5, 800e96e <_strtod_l+0x22e>
 800e910:	4607      	mov	r7, r0
 800e912:	462b      	mov	r3, r5
 800e914:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e918:	2909      	cmp	r1, #9
 800e91a:	d913      	bls.n	800e944 <_strtod_l+0x204>
 800e91c:	2101      	movs	r1, #1
 800e91e:	9106      	str	r1, [sp, #24]
 800e920:	e7c6      	b.n	800e8b0 <_strtod_l+0x170>
 800e922:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e924:	1c5a      	adds	r2, r3, #1
 800e926:	9211      	str	r2, [sp, #68]	@ 0x44
 800e928:	785a      	ldrb	r2, [r3, #1]
 800e92a:	3001      	adds	r0, #1
 800e92c:	2a30      	cmp	r2, #48	@ 0x30
 800e92e:	d0f8      	beq.n	800e922 <_strtod_l+0x1e2>
 800e930:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e934:	2b08      	cmp	r3, #8
 800e936:	f200 8476 	bhi.w	800f226 <_strtod_l+0xae6>
 800e93a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e93c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e93e:	4607      	mov	r7, r0
 800e940:	2000      	movs	r0, #0
 800e942:	4603      	mov	r3, r0
 800e944:	3a30      	subs	r2, #48	@ 0x30
 800e946:	f100 0101 	add.w	r1, r0, #1
 800e94a:	d023      	beq.n	800e994 <_strtod_l+0x254>
 800e94c:	440f      	add	r7, r1
 800e94e:	eb00 0c03 	add.w	ip, r0, r3
 800e952:	4619      	mov	r1, r3
 800e954:	240a      	movs	r4, #10
 800e956:	4561      	cmp	r1, ip
 800e958:	d10b      	bne.n	800e972 <_strtod_l+0x232>
 800e95a:	1c5c      	adds	r4, r3, #1
 800e95c:	4403      	add	r3, r0
 800e95e:	2b08      	cmp	r3, #8
 800e960:	4404      	add	r4, r0
 800e962:	dc11      	bgt.n	800e988 <_strtod_l+0x248>
 800e964:	230a      	movs	r3, #10
 800e966:	fb03 2909 	mla	r9, r3, r9, r2
 800e96a:	2100      	movs	r1, #0
 800e96c:	e013      	b.n	800e996 <_strtod_l+0x256>
 800e96e:	4628      	mov	r0, r5
 800e970:	e7dc      	b.n	800e92c <_strtod_l+0x1ec>
 800e972:	2908      	cmp	r1, #8
 800e974:	f101 0101 	add.w	r1, r1, #1
 800e978:	dc02      	bgt.n	800e980 <_strtod_l+0x240>
 800e97a:	fb04 f909 	mul.w	r9, r4, r9
 800e97e:	e7ea      	b.n	800e956 <_strtod_l+0x216>
 800e980:	2910      	cmp	r1, #16
 800e982:	bfd8      	it	le
 800e984:	4366      	mulle	r6, r4
 800e986:	e7e6      	b.n	800e956 <_strtod_l+0x216>
 800e988:	2b0f      	cmp	r3, #15
 800e98a:	dcee      	bgt.n	800e96a <_strtod_l+0x22a>
 800e98c:	230a      	movs	r3, #10
 800e98e:	fb03 2606 	mla	r6, r3, r6, r2
 800e992:	e7ea      	b.n	800e96a <_strtod_l+0x22a>
 800e994:	461c      	mov	r4, r3
 800e996:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e998:	1c5a      	adds	r2, r3, #1
 800e99a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e99c:	785a      	ldrb	r2, [r3, #1]
 800e99e:	4608      	mov	r0, r1
 800e9a0:	4623      	mov	r3, r4
 800e9a2:	e7b7      	b.n	800e914 <_strtod_l+0x1d4>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	2700      	movs	r7, #0
 800e9a8:	9306      	str	r3, [sp, #24]
 800e9aa:	e786      	b.n	800e8ba <_strtod_l+0x17a>
 800e9ac:	f04f 0e00 	mov.w	lr, #0
 800e9b0:	f108 0202 	add.w	r2, r8, #2
 800e9b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800e9b6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e9ba:	e78f      	b.n	800e8dc <_strtod_l+0x19c>
 800e9bc:	f04f 0e01 	mov.w	lr, #1
 800e9c0:	e7f6      	b.n	800e9b0 <_strtod_l+0x270>
 800e9c2:	bf00      	nop
 800e9c4:	08010818 	.word	0x08010818
 800e9c8:	08010800 	.word	0x08010800
 800e9cc:	7ff00000 	.word	0x7ff00000
 800e9d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e9d2:	1c54      	adds	r4, r2, #1
 800e9d4:	9411      	str	r4, [sp, #68]	@ 0x44
 800e9d6:	7852      	ldrb	r2, [r2, #1]
 800e9d8:	2a30      	cmp	r2, #48	@ 0x30
 800e9da:	d0f9      	beq.n	800e9d0 <_strtod_l+0x290>
 800e9dc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e9e0:	2c08      	cmp	r4, #8
 800e9e2:	d881      	bhi.n	800e8e8 <_strtod_l+0x1a8>
 800e9e4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e9e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e9ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e9ee:	1c51      	adds	r1, r2, #1
 800e9f0:	9111      	str	r1, [sp, #68]	@ 0x44
 800e9f2:	7852      	ldrb	r2, [r2, #1]
 800e9f4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e9f8:	2c09      	cmp	r4, #9
 800e9fa:	d938      	bls.n	800ea6e <_strtod_l+0x32e>
 800e9fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e9fe:	1b0c      	subs	r4, r1, r4
 800ea00:	2c08      	cmp	r4, #8
 800ea02:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800ea06:	dc02      	bgt.n	800ea0e <_strtod_l+0x2ce>
 800ea08:	4564      	cmp	r4, ip
 800ea0a:	bfa8      	it	ge
 800ea0c:	4664      	movge	r4, ip
 800ea0e:	f1be 0f00 	cmp.w	lr, #0
 800ea12:	d000      	beq.n	800ea16 <_strtod_l+0x2d6>
 800ea14:	4264      	negs	r4, r4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d14e      	bne.n	800eab8 <_strtod_l+0x378>
 800ea1a:	9b07      	ldr	r3, [sp, #28]
 800ea1c:	4318      	orrs	r0, r3
 800ea1e:	f47f aeca 	bne.w	800e7b6 <_strtod_l+0x76>
 800ea22:	9b06      	ldr	r3, [sp, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f47f aee2 	bne.w	800e7ee <_strtod_l+0xae>
 800ea2a:	2a69      	cmp	r2, #105	@ 0x69
 800ea2c:	d027      	beq.n	800ea7e <_strtod_l+0x33e>
 800ea2e:	dc24      	bgt.n	800ea7a <_strtod_l+0x33a>
 800ea30:	2a49      	cmp	r2, #73	@ 0x49
 800ea32:	d024      	beq.n	800ea7e <_strtod_l+0x33e>
 800ea34:	2a4e      	cmp	r2, #78	@ 0x4e
 800ea36:	f47f aeda 	bne.w	800e7ee <_strtod_l+0xae>
 800ea3a:	4997      	ldr	r1, [pc, #604]	@ (800ec98 <_strtod_l+0x558>)
 800ea3c:	a811      	add	r0, sp, #68	@ 0x44
 800ea3e:	f001 f91b 	bl	800fc78 <__match>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f43f aed3 	beq.w	800e7ee <_strtod_l+0xae>
 800ea48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2b28      	cmp	r3, #40	@ 0x28
 800ea4e:	d12d      	bne.n	800eaac <_strtod_l+0x36c>
 800ea50:	4992      	ldr	r1, [pc, #584]	@ (800ec9c <_strtod_l+0x55c>)
 800ea52:	aa14      	add	r2, sp, #80	@ 0x50
 800ea54:	a811      	add	r0, sp, #68	@ 0x44
 800ea56:	f001 f923 	bl	800fca0 <__hexnan>
 800ea5a:	2805      	cmp	r0, #5
 800ea5c:	d126      	bne.n	800eaac <_strtod_l+0x36c>
 800ea5e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ea60:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ea64:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ea68:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ea6c:	e6a3      	b.n	800e7b6 <_strtod_l+0x76>
 800ea6e:	240a      	movs	r4, #10
 800ea70:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ea74:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ea78:	e7b8      	b.n	800e9ec <_strtod_l+0x2ac>
 800ea7a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ea7c:	e7db      	b.n	800ea36 <_strtod_l+0x2f6>
 800ea7e:	4988      	ldr	r1, [pc, #544]	@ (800eca0 <_strtod_l+0x560>)
 800ea80:	a811      	add	r0, sp, #68	@ 0x44
 800ea82:	f001 f8f9 	bl	800fc78 <__match>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f43f aeb1 	beq.w	800e7ee <_strtod_l+0xae>
 800ea8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea8e:	4985      	ldr	r1, [pc, #532]	@ (800eca4 <_strtod_l+0x564>)
 800ea90:	3b01      	subs	r3, #1
 800ea92:	a811      	add	r0, sp, #68	@ 0x44
 800ea94:	9311      	str	r3, [sp, #68]	@ 0x44
 800ea96:	f001 f8ef 	bl	800fc78 <__match>
 800ea9a:	b910      	cbnz	r0, 800eaa2 <_strtod_l+0x362>
 800ea9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800eaa2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ecb8 <_strtod_l+0x578>
 800eaa6:	f04f 0a00 	mov.w	sl, #0
 800eaaa:	e684      	b.n	800e7b6 <_strtod_l+0x76>
 800eaac:	487e      	ldr	r0, [pc, #504]	@ (800eca8 <_strtod_l+0x568>)
 800eaae:	f000 fe1f 	bl	800f6f0 <nan>
 800eab2:	ec5b ab10 	vmov	sl, fp, d0
 800eab6:	e67e      	b.n	800e7b6 <_strtod_l+0x76>
 800eab8:	ee07 9a90 	vmov	s15, r9
 800eabc:	1be2      	subs	r2, r4, r7
 800eabe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800eac2:	2d00      	cmp	r5, #0
 800eac4:	bf08      	it	eq
 800eac6:	461d      	moveq	r5, r3
 800eac8:	2b10      	cmp	r3, #16
 800eaca:	9209      	str	r2, [sp, #36]	@ 0x24
 800eacc:	461a      	mov	r2, r3
 800eace:	bfa8      	it	ge
 800ead0:	2210      	movge	r2, #16
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	ec5b ab17 	vmov	sl, fp, d7
 800ead8:	dc15      	bgt.n	800eb06 <_strtod_l+0x3c6>
 800eada:	1be1      	subs	r1, r4, r7
 800eadc:	2900      	cmp	r1, #0
 800eade:	f43f ae6a 	beq.w	800e7b6 <_strtod_l+0x76>
 800eae2:	eba4 0107 	sub.w	r1, r4, r7
 800eae6:	dd72      	ble.n	800ebce <_strtod_l+0x48e>
 800eae8:	2916      	cmp	r1, #22
 800eaea:	dc59      	bgt.n	800eba0 <_strtod_l+0x460>
 800eaec:	4b6f      	ldr	r3, [pc, #444]	@ (800ecac <_strtod_l+0x56c>)
 800eaee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eaf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaf4:	ed93 7b00 	vldr	d7, [r3]
 800eaf8:	ec4b ab16 	vmov	d6, sl, fp
 800eafc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb00:	ec5b ab17 	vmov	sl, fp, d7
 800eb04:	e657      	b.n	800e7b6 <_strtod_l+0x76>
 800eb06:	4969      	ldr	r1, [pc, #420]	@ (800ecac <_strtod_l+0x56c>)
 800eb08:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800eb0c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800eb10:	ee06 6a90 	vmov	s13, r6
 800eb14:	2b0f      	cmp	r3, #15
 800eb16:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800eb1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eb1e:	ec5b ab16 	vmov	sl, fp, d6
 800eb22:	ddda      	ble.n	800eada <_strtod_l+0x39a>
 800eb24:	1a9a      	subs	r2, r3, r2
 800eb26:	1be1      	subs	r1, r4, r7
 800eb28:	440a      	add	r2, r1
 800eb2a:	2a00      	cmp	r2, #0
 800eb2c:	f340 8094 	ble.w	800ec58 <_strtod_l+0x518>
 800eb30:	f012 000f 	ands.w	r0, r2, #15
 800eb34:	d00a      	beq.n	800eb4c <_strtod_l+0x40c>
 800eb36:	495d      	ldr	r1, [pc, #372]	@ (800ecac <_strtod_l+0x56c>)
 800eb38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800eb3c:	ed91 7b00 	vldr	d7, [r1]
 800eb40:	ec4b ab16 	vmov	d6, sl, fp
 800eb44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb48:	ec5b ab17 	vmov	sl, fp, d7
 800eb4c:	f032 020f 	bics.w	r2, r2, #15
 800eb50:	d073      	beq.n	800ec3a <_strtod_l+0x4fa>
 800eb52:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800eb56:	dd47      	ble.n	800ebe8 <_strtod_l+0x4a8>
 800eb58:	2400      	movs	r4, #0
 800eb5a:	4625      	mov	r5, r4
 800eb5c:	9407      	str	r4, [sp, #28]
 800eb5e:	4626      	mov	r6, r4
 800eb60:	9a05      	ldr	r2, [sp, #20]
 800eb62:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ecb8 <_strtod_l+0x578>
 800eb66:	2322      	movs	r3, #34	@ 0x22
 800eb68:	6013      	str	r3, [r2, #0]
 800eb6a:	f04f 0a00 	mov.w	sl, #0
 800eb6e:	9b07      	ldr	r3, [sp, #28]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	f43f ae20 	beq.w	800e7b6 <_strtod_l+0x76>
 800eb76:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eb78:	9805      	ldr	r0, [sp, #20]
 800eb7a:	f7ff f957 	bl	800de2c <_Bfree>
 800eb7e:	9805      	ldr	r0, [sp, #20]
 800eb80:	4631      	mov	r1, r6
 800eb82:	f7ff f953 	bl	800de2c <_Bfree>
 800eb86:	9805      	ldr	r0, [sp, #20]
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7ff f94f 	bl	800de2c <_Bfree>
 800eb8e:	9907      	ldr	r1, [sp, #28]
 800eb90:	9805      	ldr	r0, [sp, #20]
 800eb92:	f7ff f94b 	bl	800de2c <_Bfree>
 800eb96:	9805      	ldr	r0, [sp, #20]
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f7ff f947 	bl	800de2c <_Bfree>
 800eb9e:	e60a      	b.n	800e7b6 <_strtod_l+0x76>
 800eba0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800eba4:	1be0      	subs	r0, r4, r7
 800eba6:	4281      	cmp	r1, r0
 800eba8:	dbbc      	blt.n	800eb24 <_strtod_l+0x3e4>
 800ebaa:	4a40      	ldr	r2, [pc, #256]	@ (800ecac <_strtod_l+0x56c>)
 800ebac:	f1c3 030f 	rsb	r3, r3, #15
 800ebb0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ebb4:	ed91 7b00 	vldr	d7, [r1]
 800ebb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebba:	ec4b ab16 	vmov	d6, sl, fp
 800ebbe:	1acb      	subs	r3, r1, r3
 800ebc0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ebc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ebc8:	ed92 6b00 	vldr	d6, [r2]
 800ebcc:	e796      	b.n	800eafc <_strtod_l+0x3bc>
 800ebce:	3116      	adds	r1, #22
 800ebd0:	dba8      	blt.n	800eb24 <_strtod_l+0x3e4>
 800ebd2:	4b36      	ldr	r3, [pc, #216]	@ (800ecac <_strtod_l+0x56c>)
 800ebd4:	1b3c      	subs	r4, r7, r4
 800ebd6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ebda:	ed94 7b00 	vldr	d7, [r4]
 800ebde:	ec4b ab16 	vmov	d6, sl, fp
 800ebe2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ebe6:	e78b      	b.n	800eb00 <_strtod_l+0x3c0>
 800ebe8:	2000      	movs	r0, #0
 800ebea:	ec4b ab17 	vmov	d7, sl, fp
 800ebee:	4e30      	ldr	r6, [pc, #192]	@ (800ecb0 <_strtod_l+0x570>)
 800ebf0:	1112      	asrs	r2, r2, #4
 800ebf2:	4601      	mov	r1, r0
 800ebf4:	2a01      	cmp	r2, #1
 800ebf6:	dc23      	bgt.n	800ec40 <_strtod_l+0x500>
 800ebf8:	b108      	cbz	r0, 800ebfe <_strtod_l+0x4be>
 800ebfa:	ec5b ab17 	vmov	sl, fp, d7
 800ebfe:	4a2c      	ldr	r2, [pc, #176]	@ (800ecb0 <_strtod_l+0x570>)
 800ec00:	482c      	ldr	r0, [pc, #176]	@ (800ecb4 <_strtod_l+0x574>)
 800ec02:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ec06:	ed92 7b00 	vldr	d7, [r2]
 800ec0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ec0e:	ec4b ab16 	vmov	d6, sl, fp
 800ec12:	4a29      	ldr	r2, [pc, #164]	@ (800ecb8 <_strtod_l+0x578>)
 800ec14:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec18:	ee17 1a90 	vmov	r1, s15
 800ec1c:	400a      	ands	r2, r1
 800ec1e:	4282      	cmp	r2, r0
 800ec20:	ec5b ab17 	vmov	sl, fp, d7
 800ec24:	d898      	bhi.n	800eb58 <_strtod_l+0x418>
 800ec26:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ec2a:	4282      	cmp	r2, r0
 800ec2c:	bf86      	itte	hi
 800ec2e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ecbc <_strtod_l+0x57c>
 800ec32:	f04f 3aff 	movhi.w	sl, #4294967295
 800ec36:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	9206      	str	r2, [sp, #24]
 800ec3e:	e076      	b.n	800ed2e <_strtod_l+0x5ee>
 800ec40:	f012 0f01 	tst.w	r2, #1
 800ec44:	d004      	beq.n	800ec50 <_strtod_l+0x510>
 800ec46:	ed96 6b00 	vldr	d6, [r6]
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec50:	3101      	adds	r1, #1
 800ec52:	1052      	asrs	r2, r2, #1
 800ec54:	3608      	adds	r6, #8
 800ec56:	e7cd      	b.n	800ebf4 <_strtod_l+0x4b4>
 800ec58:	d0ef      	beq.n	800ec3a <_strtod_l+0x4fa>
 800ec5a:	4252      	negs	r2, r2
 800ec5c:	f012 000f 	ands.w	r0, r2, #15
 800ec60:	d00a      	beq.n	800ec78 <_strtod_l+0x538>
 800ec62:	4912      	ldr	r1, [pc, #72]	@ (800ecac <_strtod_l+0x56c>)
 800ec64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ec68:	ed91 7b00 	vldr	d7, [r1]
 800ec6c:	ec4b ab16 	vmov	d6, sl, fp
 800ec70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ec74:	ec5b ab17 	vmov	sl, fp, d7
 800ec78:	1112      	asrs	r2, r2, #4
 800ec7a:	d0de      	beq.n	800ec3a <_strtod_l+0x4fa>
 800ec7c:	2a1f      	cmp	r2, #31
 800ec7e:	dd1f      	ble.n	800ecc0 <_strtod_l+0x580>
 800ec80:	2400      	movs	r4, #0
 800ec82:	4625      	mov	r5, r4
 800ec84:	9407      	str	r4, [sp, #28]
 800ec86:	4626      	mov	r6, r4
 800ec88:	9a05      	ldr	r2, [sp, #20]
 800ec8a:	2322      	movs	r3, #34	@ 0x22
 800ec8c:	f04f 0a00 	mov.w	sl, #0
 800ec90:	f04f 0b00 	mov.w	fp, #0
 800ec94:	6013      	str	r3, [r2, #0]
 800ec96:	e76a      	b.n	800eb6e <_strtod_l+0x42e>
 800ec98:	080105f2 	.word	0x080105f2
 800ec9c:	08010804 	.word	0x08010804
 800eca0:	080105ea 	.word	0x080105ea
 800eca4:	08010621 	.word	0x08010621
 800eca8:	080108ac 	.word	0x080108ac
 800ecac:	08010738 	.word	0x08010738
 800ecb0:	08010710 	.word	0x08010710
 800ecb4:	7ca00000 	.word	0x7ca00000
 800ecb8:	7ff00000 	.word	0x7ff00000
 800ecbc:	7fefffff 	.word	0x7fefffff
 800ecc0:	f012 0110 	ands.w	r1, r2, #16
 800ecc4:	bf18      	it	ne
 800ecc6:	216a      	movne	r1, #106	@ 0x6a
 800ecc8:	9106      	str	r1, [sp, #24]
 800ecca:	ec4b ab17 	vmov	d7, sl, fp
 800ecce:	49b0      	ldr	r1, [pc, #704]	@ (800ef90 <_strtod_l+0x850>)
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	07d6      	lsls	r6, r2, #31
 800ecd4:	d504      	bpl.n	800ece0 <_strtod_l+0x5a0>
 800ecd6:	ed91 6b00 	vldr	d6, [r1]
 800ecda:	2001      	movs	r0, #1
 800ecdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ece0:	1052      	asrs	r2, r2, #1
 800ece2:	f101 0108 	add.w	r1, r1, #8
 800ece6:	d1f4      	bne.n	800ecd2 <_strtod_l+0x592>
 800ece8:	b108      	cbz	r0, 800ecee <_strtod_l+0x5ae>
 800ecea:	ec5b ab17 	vmov	sl, fp, d7
 800ecee:	9a06      	ldr	r2, [sp, #24]
 800ecf0:	b1b2      	cbz	r2, 800ed20 <_strtod_l+0x5e0>
 800ecf2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800ecf6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800ecfa:	2a00      	cmp	r2, #0
 800ecfc:	4658      	mov	r0, fp
 800ecfe:	dd0f      	ble.n	800ed20 <_strtod_l+0x5e0>
 800ed00:	2a1f      	cmp	r2, #31
 800ed02:	dd55      	ble.n	800edb0 <_strtod_l+0x670>
 800ed04:	2a34      	cmp	r2, #52	@ 0x34
 800ed06:	bfde      	ittt	le
 800ed08:	f04f 32ff 	movle.w	r2, #4294967295
 800ed0c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800ed10:	408a      	lslle	r2, r1
 800ed12:	f04f 0a00 	mov.w	sl, #0
 800ed16:	bfcc      	ite	gt
 800ed18:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ed1c:	ea02 0b00 	andle.w	fp, r2, r0
 800ed20:	ec4b ab17 	vmov	d7, sl, fp
 800ed24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2c:	d0a8      	beq.n	800ec80 <_strtod_l+0x540>
 800ed2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed30:	9805      	ldr	r0, [sp, #20]
 800ed32:	f8cd 9000 	str.w	r9, [sp]
 800ed36:	462a      	mov	r2, r5
 800ed38:	f7ff f8e0 	bl	800defc <__s2b>
 800ed3c:	9007      	str	r0, [sp, #28]
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f43f af0a 	beq.w	800eb58 <_strtod_l+0x418>
 800ed44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed46:	1b3f      	subs	r7, r7, r4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	bfb4      	ite	lt
 800ed4c:	463b      	movlt	r3, r7
 800ed4e:	2300      	movge	r3, #0
 800ed50:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed54:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800ef80 <_strtod_l+0x840>
 800ed58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ed5c:	2400      	movs	r4, #0
 800ed5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ed60:	4625      	mov	r5, r4
 800ed62:	9b07      	ldr	r3, [sp, #28]
 800ed64:	9805      	ldr	r0, [sp, #20]
 800ed66:	6859      	ldr	r1, [r3, #4]
 800ed68:	f7ff f820 	bl	800ddac <_Balloc>
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f43f aef6 	beq.w	800eb60 <_strtod_l+0x420>
 800ed74:	9b07      	ldr	r3, [sp, #28]
 800ed76:	691a      	ldr	r2, [r3, #16]
 800ed78:	ec4b ab19 	vmov	d9, sl, fp
 800ed7c:	3202      	adds	r2, #2
 800ed7e:	f103 010c 	add.w	r1, r3, #12
 800ed82:	0092      	lsls	r2, r2, #2
 800ed84:	300c      	adds	r0, #12
 800ed86:	f000 fca5 	bl	800f6d4 <memcpy>
 800ed8a:	eeb0 0b49 	vmov.f64	d0, d9
 800ed8e:	9805      	ldr	r0, [sp, #20]
 800ed90:	aa14      	add	r2, sp, #80	@ 0x50
 800ed92:	a913      	add	r1, sp, #76	@ 0x4c
 800ed94:	f7ff fbee 	bl	800e574 <__d2b>
 800ed98:	9012      	str	r0, [sp, #72]	@ 0x48
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	f43f aee0 	beq.w	800eb60 <_strtod_l+0x420>
 800eda0:	9805      	ldr	r0, [sp, #20]
 800eda2:	2101      	movs	r1, #1
 800eda4:	f7ff f940 	bl	800e028 <__i2b>
 800eda8:	4605      	mov	r5, r0
 800edaa:	b940      	cbnz	r0, 800edbe <_strtod_l+0x67e>
 800edac:	2500      	movs	r5, #0
 800edae:	e6d7      	b.n	800eb60 <_strtod_l+0x420>
 800edb0:	f04f 31ff 	mov.w	r1, #4294967295
 800edb4:	fa01 f202 	lsl.w	r2, r1, r2
 800edb8:	ea02 0a0a 	and.w	sl, r2, sl
 800edbc:	e7b0      	b.n	800ed20 <_strtod_l+0x5e0>
 800edbe:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800edc0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800edc2:	2f00      	cmp	r7, #0
 800edc4:	bfab      	itete	ge
 800edc6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800edc8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800edca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800edce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800edd2:	bfac      	ite	ge
 800edd4:	eb07 0903 	addge.w	r9, r7, r3
 800edd8:	eba3 0807 	sublt.w	r8, r3, r7
 800eddc:	9b06      	ldr	r3, [sp, #24]
 800edde:	1aff      	subs	r7, r7, r3
 800ede0:	4417      	add	r7, r2
 800ede2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ede6:	4a6b      	ldr	r2, [pc, #428]	@ (800ef94 <_strtod_l+0x854>)
 800ede8:	3f01      	subs	r7, #1
 800edea:	4297      	cmp	r7, r2
 800edec:	da51      	bge.n	800ee92 <_strtod_l+0x752>
 800edee:	1bd1      	subs	r1, r2, r7
 800edf0:	291f      	cmp	r1, #31
 800edf2:	eba3 0301 	sub.w	r3, r3, r1
 800edf6:	f04f 0201 	mov.w	r2, #1
 800edfa:	dc3e      	bgt.n	800ee7a <_strtod_l+0x73a>
 800edfc:	408a      	lsls	r2, r1
 800edfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ee00:	2200      	movs	r2, #0
 800ee02:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ee04:	eb09 0703 	add.w	r7, r9, r3
 800ee08:	4498      	add	r8, r3
 800ee0a:	9b06      	ldr	r3, [sp, #24]
 800ee0c:	45b9      	cmp	r9, r7
 800ee0e:	4498      	add	r8, r3
 800ee10:	464b      	mov	r3, r9
 800ee12:	bfa8      	it	ge
 800ee14:	463b      	movge	r3, r7
 800ee16:	4543      	cmp	r3, r8
 800ee18:	bfa8      	it	ge
 800ee1a:	4643      	movge	r3, r8
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfc2      	ittt	gt
 800ee20:	1aff      	subgt	r7, r7, r3
 800ee22:	eba8 0803 	subgt.w	r8, r8, r3
 800ee26:	eba9 0903 	subgt.w	r9, r9, r3
 800ee2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	dd16      	ble.n	800ee5e <_strtod_l+0x71e>
 800ee30:	4629      	mov	r1, r5
 800ee32:	9805      	ldr	r0, [sp, #20]
 800ee34:	461a      	mov	r2, r3
 800ee36:	f7ff f9b7 	bl	800e1a8 <__pow5mult>
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d0b5      	beq.n	800edac <_strtod_l+0x66c>
 800ee40:	4601      	mov	r1, r0
 800ee42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ee44:	9805      	ldr	r0, [sp, #20]
 800ee46:	f7ff f905 	bl	800e054 <__multiply>
 800ee4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	f43f ae87 	beq.w	800eb60 <_strtod_l+0x420>
 800ee52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ee54:	9805      	ldr	r0, [sp, #20]
 800ee56:	f7fe ffe9 	bl	800de2c <_Bfree>
 800ee5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee5c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ee5e:	2f00      	cmp	r7, #0
 800ee60:	dc1b      	bgt.n	800ee9a <_strtod_l+0x75a>
 800ee62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	dd21      	ble.n	800eeac <_strtod_l+0x76c>
 800ee68:	4631      	mov	r1, r6
 800ee6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee6c:	9805      	ldr	r0, [sp, #20]
 800ee6e:	f7ff f99b 	bl	800e1a8 <__pow5mult>
 800ee72:	4606      	mov	r6, r0
 800ee74:	b9d0      	cbnz	r0, 800eeac <_strtod_l+0x76c>
 800ee76:	2600      	movs	r6, #0
 800ee78:	e672      	b.n	800eb60 <_strtod_l+0x420>
 800ee7a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ee7e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ee82:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ee86:	37e2      	adds	r7, #226	@ 0xe2
 800ee88:	fa02 f107 	lsl.w	r1, r2, r7
 800ee8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ee8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ee90:	e7b8      	b.n	800ee04 <_strtod_l+0x6c4>
 800ee92:	2200      	movs	r2, #0
 800ee94:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ee96:	2201      	movs	r2, #1
 800ee98:	e7f9      	b.n	800ee8e <_strtod_l+0x74e>
 800ee9a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ee9c:	9805      	ldr	r0, [sp, #20]
 800ee9e:	463a      	mov	r2, r7
 800eea0:	f7ff f9dc 	bl	800e25c <__lshift>
 800eea4:	9012      	str	r0, [sp, #72]	@ 0x48
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d1db      	bne.n	800ee62 <_strtod_l+0x722>
 800eeaa:	e659      	b.n	800eb60 <_strtod_l+0x420>
 800eeac:	f1b8 0f00 	cmp.w	r8, #0
 800eeb0:	dd07      	ble.n	800eec2 <_strtod_l+0x782>
 800eeb2:	4631      	mov	r1, r6
 800eeb4:	9805      	ldr	r0, [sp, #20]
 800eeb6:	4642      	mov	r2, r8
 800eeb8:	f7ff f9d0 	bl	800e25c <__lshift>
 800eebc:	4606      	mov	r6, r0
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d0d9      	beq.n	800ee76 <_strtod_l+0x736>
 800eec2:	f1b9 0f00 	cmp.w	r9, #0
 800eec6:	dd08      	ble.n	800eeda <_strtod_l+0x79a>
 800eec8:	4629      	mov	r1, r5
 800eeca:	9805      	ldr	r0, [sp, #20]
 800eecc:	464a      	mov	r2, r9
 800eece:	f7ff f9c5 	bl	800e25c <__lshift>
 800eed2:	4605      	mov	r5, r0
 800eed4:	2800      	cmp	r0, #0
 800eed6:	f43f ae43 	beq.w	800eb60 <_strtod_l+0x420>
 800eeda:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800eedc:	9805      	ldr	r0, [sp, #20]
 800eede:	4632      	mov	r2, r6
 800eee0:	f7ff fa44 	bl	800e36c <__mdiff>
 800eee4:	4604      	mov	r4, r0
 800eee6:	2800      	cmp	r0, #0
 800eee8:	f43f ae3a 	beq.w	800eb60 <_strtod_l+0x420>
 800eeec:	2300      	movs	r3, #0
 800eeee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800eef2:	60c3      	str	r3, [r0, #12]
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7ff fa1d 	bl	800e334 <__mcmp>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	da4e      	bge.n	800ef9c <_strtod_l+0x85c>
 800eefe:	ea58 080a 	orrs.w	r8, r8, sl
 800ef02:	d174      	bne.n	800efee <_strtod_l+0x8ae>
 800ef04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d170      	bne.n	800efee <_strtod_l+0x8ae>
 800ef0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef10:	0d1b      	lsrs	r3, r3, #20
 800ef12:	051b      	lsls	r3, r3, #20
 800ef14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef18:	d969      	bls.n	800efee <_strtod_l+0x8ae>
 800ef1a:	6963      	ldr	r3, [r4, #20]
 800ef1c:	b913      	cbnz	r3, 800ef24 <_strtod_l+0x7e4>
 800ef1e:	6923      	ldr	r3, [r4, #16]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	dd64      	ble.n	800efee <_strtod_l+0x8ae>
 800ef24:	4621      	mov	r1, r4
 800ef26:	2201      	movs	r2, #1
 800ef28:	9805      	ldr	r0, [sp, #20]
 800ef2a:	f7ff f997 	bl	800e25c <__lshift>
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4604      	mov	r4, r0
 800ef32:	f7ff f9ff 	bl	800e334 <__mcmp>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	dd59      	ble.n	800efee <_strtod_l+0x8ae>
 800ef3a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef3e:	9a06      	ldr	r2, [sp, #24]
 800ef40:	0d1b      	lsrs	r3, r3, #20
 800ef42:	051b      	lsls	r3, r3, #20
 800ef44:	2a00      	cmp	r2, #0
 800ef46:	d070      	beq.n	800f02a <_strtod_l+0x8ea>
 800ef48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef4c:	d86d      	bhi.n	800f02a <_strtod_l+0x8ea>
 800ef4e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ef52:	f67f ae99 	bls.w	800ec88 <_strtod_l+0x548>
 800ef56:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800ef88 <_strtod_l+0x848>
 800ef5a:	ec4b ab16 	vmov	d6, sl, fp
 800ef5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ef98 <_strtod_l+0x858>)
 800ef60:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ef64:	ee17 2a90 	vmov	r2, s15
 800ef68:	4013      	ands	r3, r2
 800ef6a:	ec5b ab17 	vmov	sl, fp, d7
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f47f ae01 	bne.w	800eb76 <_strtod_l+0x436>
 800ef74:	9a05      	ldr	r2, [sp, #20]
 800ef76:	2322      	movs	r3, #34	@ 0x22
 800ef78:	6013      	str	r3, [r2, #0]
 800ef7a:	e5fc      	b.n	800eb76 <_strtod_l+0x436>
 800ef7c:	f3af 8000 	nop.w
 800ef80:	ffc00000 	.word	0xffc00000
 800ef84:	41dfffff 	.word	0x41dfffff
 800ef88:	00000000 	.word	0x00000000
 800ef8c:	39500000 	.word	0x39500000
 800ef90:	08010830 	.word	0x08010830
 800ef94:	fffffc02 	.word	0xfffffc02
 800ef98:	7ff00000 	.word	0x7ff00000
 800ef9c:	46d9      	mov	r9, fp
 800ef9e:	d15d      	bne.n	800f05c <_strtod_l+0x91c>
 800efa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800efa4:	f1b8 0f00 	cmp.w	r8, #0
 800efa8:	d02a      	beq.n	800f000 <_strtod_l+0x8c0>
 800efaa:	4aab      	ldr	r2, [pc, #684]	@ (800f258 <_strtod_l+0xb18>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d12a      	bne.n	800f006 <_strtod_l+0x8c6>
 800efb0:	9b06      	ldr	r3, [sp, #24]
 800efb2:	4652      	mov	r2, sl
 800efb4:	b1fb      	cbz	r3, 800eff6 <_strtod_l+0x8b6>
 800efb6:	4ba9      	ldr	r3, [pc, #676]	@ (800f25c <_strtod_l+0xb1c>)
 800efb8:	ea0b 0303 	and.w	r3, fp, r3
 800efbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800efc0:	f04f 31ff 	mov.w	r1, #4294967295
 800efc4:	d81a      	bhi.n	800effc <_strtod_l+0x8bc>
 800efc6:	0d1b      	lsrs	r3, r3, #20
 800efc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800efcc:	fa01 f303 	lsl.w	r3, r1, r3
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d118      	bne.n	800f006 <_strtod_l+0x8c6>
 800efd4:	4ba2      	ldr	r3, [pc, #648]	@ (800f260 <_strtod_l+0xb20>)
 800efd6:	4599      	cmp	r9, r3
 800efd8:	d102      	bne.n	800efe0 <_strtod_l+0x8a0>
 800efda:	3201      	adds	r2, #1
 800efdc:	f43f adc0 	beq.w	800eb60 <_strtod_l+0x420>
 800efe0:	4b9e      	ldr	r3, [pc, #632]	@ (800f25c <_strtod_l+0xb1c>)
 800efe2:	ea09 0303 	and.w	r3, r9, r3
 800efe6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800efea:	f04f 0a00 	mov.w	sl, #0
 800efee:	9b06      	ldr	r3, [sp, #24]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1b0      	bne.n	800ef56 <_strtod_l+0x816>
 800eff4:	e5bf      	b.n	800eb76 <_strtod_l+0x436>
 800eff6:	f04f 33ff 	mov.w	r3, #4294967295
 800effa:	e7e9      	b.n	800efd0 <_strtod_l+0x890>
 800effc:	460b      	mov	r3, r1
 800effe:	e7e7      	b.n	800efd0 <_strtod_l+0x890>
 800f000:	ea53 030a 	orrs.w	r3, r3, sl
 800f004:	d099      	beq.n	800ef3a <_strtod_l+0x7fa>
 800f006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f008:	b1c3      	cbz	r3, 800f03c <_strtod_l+0x8fc>
 800f00a:	ea13 0f09 	tst.w	r3, r9
 800f00e:	d0ee      	beq.n	800efee <_strtod_l+0x8ae>
 800f010:	9a06      	ldr	r2, [sp, #24]
 800f012:	4650      	mov	r0, sl
 800f014:	4659      	mov	r1, fp
 800f016:	f1b8 0f00 	cmp.w	r8, #0
 800f01a:	d013      	beq.n	800f044 <_strtod_l+0x904>
 800f01c:	f7ff fb75 	bl	800e70a <sulp>
 800f020:	ee39 7b00 	vadd.f64	d7, d9, d0
 800f024:	ec5b ab17 	vmov	sl, fp, d7
 800f028:	e7e1      	b.n	800efee <_strtod_l+0x8ae>
 800f02a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f02e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f032:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f036:	f04f 3aff 	mov.w	sl, #4294967295
 800f03a:	e7d8      	b.n	800efee <_strtod_l+0x8ae>
 800f03c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f03e:	ea13 0f0a 	tst.w	r3, sl
 800f042:	e7e4      	b.n	800f00e <_strtod_l+0x8ce>
 800f044:	f7ff fb61 	bl	800e70a <sulp>
 800f048:	ee39 0b40 	vsub.f64	d0, d9, d0
 800f04c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f054:	ec5b ab10 	vmov	sl, fp, d0
 800f058:	d1c9      	bne.n	800efee <_strtod_l+0x8ae>
 800f05a:	e615      	b.n	800ec88 <_strtod_l+0x548>
 800f05c:	4629      	mov	r1, r5
 800f05e:	4620      	mov	r0, r4
 800f060:	f7ff fae0 	bl	800e624 <__ratio>
 800f064:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800f068:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f070:	d85d      	bhi.n	800f12e <_strtod_l+0x9ee>
 800f072:	f1b8 0f00 	cmp.w	r8, #0
 800f076:	d164      	bne.n	800f142 <_strtod_l+0xa02>
 800f078:	f1ba 0f00 	cmp.w	sl, #0
 800f07c:	d14b      	bne.n	800f116 <_strtod_l+0x9d6>
 800f07e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f082:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d160      	bne.n	800f14c <_strtod_l+0xa0c>
 800f08a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800f08e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f096:	d401      	bmi.n	800f09c <_strtod_l+0x95c>
 800f098:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f09c:	eeb1 ab48 	vneg.f64	d10, d8
 800f0a0:	486e      	ldr	r0, [pc, #440]	@ (800f25c <_strtod_l+0xb1c>)
 800f0a2:	4970      	ldr	r1, [pc, #448]	@ (800f264 <_strtod_l+0xb24>)
 800f0a4:	ea09 0700 	and.w	r7, r9, r0
 800f0a8:	428f      	cmp	r7, r1
 800f0aa:	ec53 2b1a 	vmov	r2, r3, d10
 800f0ae:	d17d      	bne.n	800f1ac <_strtod_l+0xa6c>
 800f0b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800f0b4:	ec4b ab1c 	vmov	d12, sl, fp
 800f0b8:	eeb0 0b4c 	vmov.f64	d0, d12
 800f0bc:	f7ff f9ea 	bl	800e494 <__ulp>
 800f0c0:	4866      	ldr	r0, [pc, #408]	@ (800f25c <_strtod_l+0xb1c>)
 800f0c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800f0c6:	ee1c 3a90 	vmov	r3, s25
 800f0ca:	4a67      	ldr	r2, [pc, #412]	@ (800f268 <_strtod_l+0xb28>)
 800f0cc:	ea03 0100 	and.w	r1, r3, r0
 800f0d0:	4291      	cmp	r1, r2
 800f0d2:	ec5b ab1c 	vmov	sl, fp, d12
 800f0d6:	d93c      	bls.n	800f152 <_strtod_l+0xa12>
 800f0d8:	ee19 2a90 	vmov	r2, s19
 800f0dc:	4b60      	ldr	r3, [pc, #384]	@ (800f260 <_strtod_l+0xb20>)
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d104      	bne.n	800f0ec <_strtod_l+0x9ac>
 800f0e2:	ee19 3a10 	vmov	r3, s18
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	f43f ad3a 	beq.w	800eb60 <_strtod_l+0x420>
 800f0ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800f260 <_strtod_l+0xb20>
 800f0f0:	f04f 3aff 	mov.w	sl, #4294967295
 800f0f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f0f6:	9805      	ldr	r0, [sp, #20]
 800f0f8:	f7fe fe98 	bl	800de2c <_Bfree>
 800f0fc:	9805      	ldr	r0, [sp, #20]
 800f0fe:	4631      	mov	r1, r6
 800f100:	f7fe fe94 	bl	800de2c <_Bfree>
 800f104:	9805      	ldr	r0, [sp, #20]
 800f106:	4629      	mov	r1, r5
 800f108:	f7fe fe90 	bl	800de2c <_Bfree>
 800f10c:	9805      	ldr	r0, [sp, #20]
 800f10e:	4621      	mov	r1, r4
 800f110:	f7fe fe8c 	bl	800de2c <_Bfree>
 800f114:	e625      	b.n	800ed62 <_strtod_l+0x622>
 800f116:	f1ba 0f01 	cmp.w	sl, #1
 800f11a:	d103      	bne.n	800f124 <_strtod_l+0x9e4>
 800f11c:	f1bb 0f00 	cmp.w	fp, #0
 800f120:	f43f adb2 	beq.w	800ec88 <_strtod_l+0x548>
 800f124:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f128:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f12c:	e7b8      	b.n	800f0a0 <_strtod_l+0x960>
 800f12e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f132:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f136:	f1b8 0f00 	cmp.w	r8, #0
 800f13a:	d0af      	beq.n	800f09c <_strtod_l+0x95c>
 800f13c:	eeb0 ab48 	vmov.f64	d10, d8
 800f140:	e7ae      	b.n	800f0a0 <_strtod_l+0x960>
 800f142:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800f146:	eeb0 8b4a 	vmov.f64	d8, d10
 800f14a:	e7a9      	b.n	800f0a0 <_strtod_l+0x960>
 800f14c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f150:	e7a6      	b.n	800f0a0 <_strtod_l+0x960>
 800f152:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f156:	9b06      	ldr	r3, [sp, #24]
 800f158:	46d9      	mov	r9, fp
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1ca      	bne.n	800f0f4 <_strtod_l+0x9b4>
 800f15e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f162:	0d1b      	lsrs	r3, r3, #20
 800f164:	051b      	lsls	r3, r3, #20
 800f166:	429f      	cmp	r7, r3
 800f168:	d1c4      	bne.n	800f0f4 <_strtod_l+0x9b4>
 800f16a:	ec51 0b18 	vmov	r0, r1, d8
 800f16e:	f7f1 fae3 	bl	8000738 <__aeabi_d2lz>
 800f172:	f7f1 fa9b 	bl	80006ac <__aeabi_l2d>
 800f176:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800f17a:	ec41 0b17 	vmov	d7, r0, r1
 800f17e:	ea49 090a 	orr.w	r9, r9, sl
 800f182:	ea59 0908 	orrs.w	r9, r9, r8
 800f186:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f18a:	d03c      	beq.n	800f206 <_strtod_l+0xac6>
 800f18c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f240 <_strtod_l+0xb00>
 800f190:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f198:	f53f aced 	bmi.w	800eb76 <_strtod_l+0x436>
 800f19c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f248 <_strtod_l+0xb08>
 800f1a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a8:	dda4      	ble.n	800f0f4 <_strtod_l+0x9b4>
 800f1aa:	e4e4      	b.n	800eb76 <_strtod_l+0x436>
 800f1ac:	9906      	ldr	r1, [sp, #24]
 800f1ae:	b1e1      	cbz	r1, 800f1ea <_strtod_l+0xaaa>
 800f1b0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f1b4:	d819      	bhi.n	800f1ea <_strtod_l+0xaaa>
 800f1b6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	d811      	bhi.n	800f1e4 <_strtod_l+0xaa4>
 800f1c0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f1c4:	ee18 3a10 	vmov	r3, s16
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	bf38      	it	cc
 800f1cc:	2301      	movcc	r3, #1
 800f1ce:	ee08 3a10 	vmov	s16, r3
 800f1d2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f1d6:	f1b8 0f00 	cmp.w	r8, #0
 800f1da:	d111      	bne.n	800f200 <_strtod_l+0xac0>
 800f1dc:	eeb1 7b48 	vneg.f64	d7, d8
 800f1e0:	ec53 2b17 	vmov	r2, r3, d7
 800f1e4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f1e8:	1bcb      	subs	r3, r1, r7
 800f1ea:	eeb0 0b49 	vmov.f64	d0, d9
 800f1ee:	ec43 2b1a 	vmov	d10, r2, r3
 800f1f2:	f7ff f94f 	bl	800e494 <__ulp>
 800f1f6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f1fa:	ec5b ab19 	vmov	sl, fp, d9
 800f1fe:	e7aa      	b.n	800f156 <_strtod_l+0xa16>
 800f200:	eeb0 7b48 	vmov.f64	d7, d8
 800f204:	e7ec      	b.n	800f1e0 <_strtod_l+0xaa0>
 800f206:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f250 <_strtod_l+0xb10>
 800f20a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f212:	f57f af6f 	bpl.w	800f0f4 <_strtod_l+0x9b4>
 800f216:	e4ae      	b.n	800eb76 <_strtod_l+0x436>
 800f218:	2300      	movs	r3, #0
 800f21a:	9308      	str	r3, [sp, #32]
 800f21c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f21e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f220:	6013      	str	r3, [r2, #0]
 800f222:	f7ff bacc 	b.w	800e7be <_strtod_l+0x7e>
 800f226:	2a65      	cmp	r2, #101	@ 0x65
 800f228:	f43f abbc 	beq.w	800e9a4 <_strtod_l+0x264>
 800f22c:	2a45      	cmp	r2, #69	@ 0x45
 800f22e:	f43f abb9 	beq.w	800e9a4 <_strtod_l+0x264>
 800f232:	2301      	movs	r3, #1
 800f234:	9306      	str	r3, [sp, #24]
 800f236:	f7ff bbf0 	b.w	800ea1a <_strtod_l+0x2da>
 800f23a:	bf00      	nop
 800f23c:	f3af 8000 	nop.w
 800f240:	94a03595 	.word	0x94a03595
 800f244:	3fdfffff 	.word	0x3fdfffff
 800f248:	35afe535 	.word	0x35afe535
 800f24c:	3fe00000 	.word	0x3fe00000
 800f250:	94a03595 	.word	0x94a03595
 800f254:	3fcfffff 	.word	0x3fcfffff
 800f258:	000fffff 	.word	0x000fffff
 800f25c:	7ff00000 	.word	0x7ff00000
 800f260:	7fefffff 	.word	0x7fefffff
 800f264:	7fe00000 	.word	0x7fe00000
 800f268:	7c9fffff 	.word	0x7c9fffff

0800f26c <_strtod_r>:
 800f26c:	4b01      	ldr	r3, [pc, #4]	@ (800f274 <_strtod_r+0x8>)
 800f26e:	f7ff ba67 	b.w	800e740 <_strtod_l>
 800f272:	bf00      	nop
 800f274:	24000080 	.word	0x24000080

0800f278 <__ssputs_r>:
 800f278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f27c:	688e      	ldr	r6, [r1, #8]
 800f27e:	461f      	mov	r7, r3
 800f280:	42be      	cmp	r6, r7
 800f282:	680b      	ldr	r3, [r1, #0]
 800f284:	4682      	mov	sl, r0
 800f286:	460c      	mov	r4, r1
 800f288:	4690      	mov	r8, r2
 800f28a:	d82d      	bhi.n	800f2e8 <__ssputs_r+0x70>
 800f28c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f290:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f294:	d026      	beq.n	800f2e4 <__ssputs_r+0x6c>
 800f296:	6965      	ldr	r5, [r4, #20]
 800f298:	6909      	ldr	r1, [r1, #16]
 800f29a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f29e:	eba3 0901 	sub.w	r9, r3, r1
 800f2a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2a6:	1c7b      	adds	r3, r7, #1
 800f2a8:	444b      	add	r3, r9
 800f2aa:	106d      	asrs	r5, r5, #1
 800f2ac:	429d      	cmp	r5, r3
 800f2ae:	bf38      	it	cc
 800f2b0:	461d      	movcc	r5, r3
 800f2b2:	0553      	lsls	r3, r2, #21
 800f2b4:	d527      	bpl.n	800f306 <__ssputs_r+0x8e>
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	f7fe fcec 	bl	800dc94 <_malloc_r>
 800f2bc:	4606      	mov	r6, r0
 800f2be:	b360      	cbz	r0, 800f31a <__ssputs_r+0xa2>
 800f2c0:	6921      	ldr	r1, [r4, #16]
 800f2c2:	464a      	mov	r2, r9
 800f2c4:	f000 fa06 	bl	800f6d4 <memcpy>
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2d2:	81a3      	strh	r3, [r4, #12]
 800f2d4:	6126      	str	r6, [r4, #16]
 800f2d6:	6165      	str	r5, [r4, #20]
 800f2d8:	444e      	add	r6, r9
 800f2da:	eba5 0509 	sub.w	r5, r5, r9
 800f2de:	6026      	str	r6, [r4, #0]
 800f2e0:	60a5      	str	r5, [r4, #8]
 800f2e2:	463e      	mov	r6, r7
 800f2e4:	42be      	cmp	r6, r7
 800f2e6:	d900      	bls.n	800f2ea <__ssputs_r+0x72>
 800f2e8:	463e      	mov	r6, r7
 800f2ea:	6820      	ldr	r0, [r4, #0]
 800f2ec:	4632      	mov	r2, r6
 800f2ee:	4641      	mov	r1, r8
 800f2f0:	f000 f9c6 	bl	800f680 <memmove>
 800f2f4:	68a3      	ldr	r3, [r4, #8]
 800f2f6:	1b9b      	subs	r3, r3, r6
 800f2f8:	60a3      	str	r3, [r4, #8]
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	4433      	add	r3, r6
 800f2fe:	6023      	str	r3, [r4, #0]
 800f300:	2000      	movs	r0, #0
 800f302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f306:	462a      	mov	r2, r5
 800f308:	f000 fd77 	bl	800fdfa <_realloc_r>
 800f30c:	4606      	mov	r6, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	d1e0      	bne.n	800f2d4 <__ssputs_r+0x5c>
 800f312:	6921      	ldr	r1, [r4, #16]
 800f314:	4650      	mov	r0, sl
 800f316:	f7fe fc49 	bl	800dbac <_free_r>
 800f31a:	230c      	movs	r3, #12
 800f31c:	f8ca 3000 	str.w	r3, [sl]
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	f04f 30ff 	mov.w	r0, #4294967295
 800f32c:	e7e9      	b.n	800f302 <__ssputs_r+0x8a>
	...

0800f330 <_svfiprintf_r>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	4698      	mov	r8, r3
 800f336:	898b      	ldrh	r3, [r1, #12]
 800f338:	061b      	lsls	r3, r3, #24
 800f33a:	b09d      	sub	sp, #116	@ 0x74
 800f33c:	4607      	mov	r7, r0
 800f33e:	460d      	mov	r5, r1
 800f340:	4614      	mov	r4, r2
 800f342:	d510      	bpl.n	800f366 <_svfiprintf_r+0x36>
 800f344:	690b      	ldr	r3, [r1, #16]
 800f346:	b973      	cbnz	r3, 800f366 <_svfiprintf_r+0x36>
 800f348:	2140      	movs	r1, #64	@ 0x40
 800f34a:	f7fe fca3 	bl	800dc94 <_malloc_r>
 800f34e:	6028      	str	r0, [r5, #0]
 800f350:	6128      	str	r0, [r5, #16]
 800f352:	b930      	cbnz	r0, 800f362 <_svfiprintf_r+0x32>
 800f354:	230c      	movs	r3, #12
 800f356:	603b      	str	r3, [r7, #0]
 800f358:	f04f 30ff 	mov.w	r0, #4294967295
 800f35c:	b01d      	add	sp, #116	@ 0x74
 800f35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	2340      	movs	r3, #64	@ 0x40
 800f364:	616b      	str	r3, [r5, #20]
 800f366:	2300      	movs	r3, #0
 800f368:	9309      	str	r3, [sp, #36]	@ 0x24
 800f36a:	2320      	movs	r3, #32
 800f36c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f370:	f8cd 800c 	str.w	r8, [sp, #12]
 800f374:	2330      	movs	r3, #48	@ 0x30
 800f376:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f514 <_svfiprintf_r+0x1e4>
 800f37a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f37e:	f04f 0901 	mov.w	r9, #1
 800f382:	4623      	mov	r3, r4
 800f384:	469a      	mov	sl, r3
 800f386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f38a:	b10a      	cbz	r2, 800f390 <_svfiprintf_r+0x60>
 800f38c:	2a25      	cmp	r2, #37	@ 0x25
 800f38e:	d1f9      	bne.n	800f384 <_svfiprintf_r+0x54>
 800f390:	ebba 0b04 	subs.w	fp, sl, r4
 800f394:	d00b      	beq.n	800f3ae <_svfiprintf_r+0x7e>
 800f396:	465b      	mov	r3, fp
 800f398:	4622      	mov	r2, r4
 800f39a:	4629      	mov	r1, r5
 800f39c:	4638      	mov	r0, r7
 800f39e:	f7ff ff6b 	bl	800f278 <__ssputs_r>
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f000 80a7 	beq.w	800f4f6 <_svfiprintf_r+0x1c6>
 800f3a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3aa:	445a      	add	r2, fp
 800f3ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 809f 	beq.w	800f4f6 <_svfiprintf_r+0x1c6>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3c2:	f10a 0a01 	add.w	sl, sl, #1
 800f3c6:	9304      	str	r3, [sp, #16]
 800f3c8:	9307      	str	r3, [sp, #28]
 800f3ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3d0:	4654      	mov	r4, sl
 800f3d2:	2205      	movs	r2, #5
 800f3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d8:	484e      	ldr	r0, [pc, #312]	@ (800f514 <_svfiprintf_r+0x1e4>)
 800f3da:	f7f0 ff81 	bl	80002e0 <memchr>
 800f3de:	9a04      	ldr	r2, [sp, #16]
 800f3e0:	b9d8      	cbnz	r0, 800f41a <_svfiprintf_r+0xea>
 800f3e2:	06d0      	lsls	r0, r2, #27
 800f3e4:	bf44      	itt	mi
 800f3e6:	2320      	movmi	r3, #32
 800f3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3ec:	0711      	lsls	r1, r2, #28
 800f3ee:	bf44      	itt	mi
 800f3f0:	232b      	movmi	r3, #43	@ 0x2b
 800f3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f3fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3fc:	d015      	beq.n	800f42a <_svfiprintf_r+0xfa>
 800f3fe:	9a07      	ldr	r2, [sp, #28]
 800f400:	4654      	mov	r4, sl
 800f402:	2000      	movs	r0, #0
 800f404:	f04f 0c0a 	mov.w	ip, #10
 800f408:	4621      	mov	r1, r4
 800f40a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f40e:	3b30      	subs	r3, #48	@ 0x30
 800f410:	2b09      	cmp	r3, #9
 800f412:	d94b      	bls.n	800f4ac <_svfiprintf_r+0x17c>
 800f414:	b1b0      	cbz	r0, 800f444 <_svfiprintf_r+0x114>
 800f416:	9207      	str	r2, [sp, #28]
 800f418:	e014      	b.n	800f444 <_svfiprintf_r+0x114>
 800f41a:	eba0 0308 	sub.w	r3, r0, r8
 800f41e:	fa09 f303 	lsl.w	r3, r9, r3
 800f422:	4313      	orrs	r3, r2
 800f424:	9304      	str	r3, [sp, #16]
 800f426:	46a2      	mov	sl, r4
 800f428:	e7d2      	b.n	800f3d0 <_svfiprintf_r+0xa0>
 800f42a:	9b03      	ldr	r3, [sp, #12]
 800f42c:	1d19      	adds	r1, r3, #4
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	9103      	str	r1, [sp, #12]
 800f432:	2b00      	cmp	r3, #0
 800f434:	bfbb      	ittet	lt
 800f436:	425b      	neglt	r3, r3
 800f438:	f042 0202 	orrlt.w	r2, r2, #2
 800f43c:	9307      	strge	r3, [sp, #28]
 800f43e:	9307      	strlt	r3, [sp, #28]
 800f440:	bfb8      	it	lt
 800f442:	9204      	strlt	r2, [sp, #16]
 800f444:	7823      	ldrb	r3, [r4, #0]
 800f446:	2b2e      	cmp	r3, #46	@ 0x2e
 800f448:	d10a      	bne.n	800f460 <_svfiprintf_r+0x130>
 800f44a:	7863      	ldrb	r3, [r4, #1]
 800f44c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f44e:	d132      	bne.n	800f4b6 <_svfiprintf_r+0x186>
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	1d1a      	adds	r2, r3, #4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	9203      	str	r2, [sp, #12]
 800f458:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f45c:	3402      	adds	r4, #2
 800f45e:	9305      	str	r3, [sp, #20]
 800f460:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f524 <_svfiprintf_r+0x1f4>
 800f464:	7821      	ldrb	r1, [r4, #0]
 800f466:	2203      	movs	r2, #3
 800f468:	4650      	mov	r0, sl
 800f46a:	f7f0 ff39 	bl	80002e0 <memchr>
 800f46e:	b138      	cbz	r0, 800f480 <_svfiprintf_r+0x150>
 800f470:	9b04      	ldr	r3, [sp, #16]
 800f472:	eba0 000a 	sub.w	r0, r0, sl
 800f476:	2240      	movs	r2, #64	@ 0x40
 800f478:	4082      	lsls	r2, r0
 800f47a:	4313      	orrs	r3, r2
 800f47c:	3401      	adds	r4, #1
 800f47e:	9304      	str	r3, [sp, #16]
 800f480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f484:	4824      	ldr	r0, [pc, #144]	@ (800f518 <_svfiprintf_r+0x1e8>)
 800f486:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f48a:	2206      	movs	r2, #6
 800f48c:	f7f0 ff28 	bl	80002e0 <memchr>
 800f490:	2800      	cmp	r0, #0
 800f492:	d036      	beq.n	800f502 <_svfiprintf_r+0x1d2>
 800f494:	4b21      	ldr	r3, [pc, #132]	@ (800f51c <_svfiprintf_r+0x1ec>)
 800f496:	bb1b      	cbnz	r3, 800f4e0 <_svfiprintf_r+0x1b0>
 800f498:	9b03      	ldr	r3, [sp, #12]
 800f49a:	3307      	adds	r3, #7
 800f49c:	f023 0307 	bic.w	r3, r3, #7
 800f4a0:	3308      	adds	r3, #8
 800f4a2:	9303      	str	r3, [sp, #12]
 800f4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a6:	4433      	add	r3, r6
 800f4a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4aa:	e76a      	b.n	800f382 <_svfiprintf_r+0x52>
 800f4ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4b0:	460c      	mov	r4, r1
 800f4b2:	2001      	movs	r0, #1
 800f4b4:	e7a8      	b.n	800f408 <_svfiprintf_r+0xd8>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	3401      	adds	r4, #1
 800f4ba:	9305      	str	r3, [sp, #20]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	f04f 0c0a 	mov.w	ip, #10
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4c8:	3a30      	subs	r2, #48	@ 0x30
 800f4ca:	2a09      	cmp	r2, #9
 800f4cc:	d903      	bls.n	800f4d6 <_svfiprintf_r+0x1a6>
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d0c6      	beq.n	800f460 <_svfiprintf_r+0x130>
 800f4d2:	9105      	str	r1, [sp, #20]
 800f4d4:	e7c4      	b.n	800f460 <_svfiprintf_r+0x130>
 800f4d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4da:	4604      	mov	r4, r0
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e7f0      	b.n	800f4c2 <_svfiprintf_r+0x192>
 800f4e0:	ab03      	add	r3, sp, #12
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	462a      	mov	r2, r5
 800f4e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f520 <_svfiprintf_r+0x1f0>)
 800f4e8:	a904      	add	r1, sp, #16
 800f4ea:	4638      	mov	r0, r7
 800f4ec:	f7fc fdd8 	bl	800c0a0 <_printf_float>
 800f4f0:	1c42      	adds	r2, r0, #1
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	d1d6      	bne.n	800f4a4 <_svfiprintf_r+0x174>
 800f4f6:	89ab      	ldrh	r3, [r5, #12]
 800f4f8:	065b      	lsls	r3, r3, #25
 800f4fa:	f53f af2d 	bmi.w	800f358 <_svfiprintf_r+0x28>
 800f4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f500:	e72c      	b.n	800f35c <_svfiprintf_r+0x2c>
 800f502:	ab03      	add	r3, sp, #12
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	462a      	mov	r2, r5
 800f508:	4b05      	ldr	r3, [pc, #20]	@ (800f520 <_svfiprintf_r+0x1f0>)
 800f50a:	a904      	add	r1, sp, #16
 800f50c:	4638      	mov	r0, r7
 800f50e:	f7fd f84f 	bl	800c5b0 <_printf_i>
 800f512:	e7ed      	b.n	800f4f0 <_svfiprintf_r+0x1c0>
 800f514:	08010858 	.word	0x08010858
 800f518:	08010862 	.word	0x08010862
 800f51c:	0800c0a1 	.word	0x0800c0a1
 800f520:	0800f279 	.word	0x0800f279
 800f524:	0801085e 	.word	0x0801085e

0800f528 <__sflush_r>:
 800f528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f530:	0716      	lsls	r6, r2, #28
 800f532:	4605      	mov	r5, r0
 800f534:	460c      	mov	r4, r1
 800f536:	d454      	bmi.n	800f5e2 <__sflush_r+0xba>
 800f538:	684b      	ldr	r3, [r1, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dc02      	bgt.n	800f544 <__sflush_r+0x1c>
 800f53e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f540:	2b00      	cmp	r3, #0
 800f542:	dd48      	ble.n	800f5d6 <__sflush_r+0xae>
 800f544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f546:	2e00      	cmp	r6, #0
 800f548:	d045      	beq.n	800f5d6 <__sflush_r+0xae>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f550:	682f      	ldr	r7, [r5, #0]
 800f552:	6a21      	ldr	r1, [r4, #32]
 800f554:	602b      	str	r3, [r5, #0]
 800f556:	d030      	beq.n	800f5ba <__sflush_r+0x92>
 800f558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	0759      	lsls	r1, r3, #29
 800f55e:	d505      	bpl.n	800f56c <__sflush_r+0x44>
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	1ad2      	subs	r2, r2, r3
 800f564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f566:	b10b      	cbz	r3, 800f56c <__sflush_r+0x44>
 800f568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f56a:	1ad2      	subs	r2, r2, r3
 800f56c:	2300      	movs	r3, #0
 800f56e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f570:	6a21      	ldr	r1, [r4, #32]
 800f572:	4628      	mov	r0, r5
 800f574:	47b0      	blx	r6
 800f576:	1c43      	adds	r3, r0, #1
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	d106      	bne.n	800f58a <__sflush_r+0x62>
 800f57c:	6829      	ldr	r1, [r5, #0]
 800f57e:	291d      	cmp	r1, #29
 800f580:	d82b      	bhi.n	800f5da <__sflush_r+0xb2>
 800f582:	4a2a      	ldr	r2, [pc, #168]	@ (800f62c <__sflush_r+0x104>)
 800f584:	410a      	asrs	r2, r1
 800f586:	07d6      	lsls	r6, r2, #31
 800f588:	d427      	bmi.n	800f5da <__sflush_r+0xb2>
 800f58a:	2200      	movs	r2, #0
 800f58c:	6062      	str	r2, [r4, #4]
 800f58e:	04d9      	lsls	r1, r3, #19
 800f590:	6922      	ldr	r2, [r4, #16]
 800f592:	6022      	str	r2, [r4, #0]
 800f594:	d504      	bpl.n	800f5a0 <__sflush_r+0x78>
 800f596:	1c42      	adds	r2, r0, #1
 800f598:	d101      	bne.n	800f59e <__sflush_r+0x76>
 800f59a:	682b      	ldr	r3, [r5, #0]
 800f59c:	b903      	cbnz	r3, 800f5a0 <__sflush_r+0x78>
 800f59e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5a2:	602f      	str	r7, [r5, #0]
 800f5a4:	b1b9      	cbz	r1, 800f5d6 <__sflush_r+0xae>
 800f5a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5aa:	4299      	cmp	r1, r3
 800f5ac:	d002      	beq.n	800f5b4 <__sflush_r+0x8c>
 800f5ae:	4628      	mov	r0, r5
 800f5b0:	f7fe fafc 	bl	800dbac <_free_r>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5b8:	e00d      	b.n	800f5d6 <__sflush_r+0xae>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	4628      	mov	r0, r5
 800f5be:	47b0      	blx	r6
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	1c50      	adds	r0, r2, #1
 800f5c4:	d1c9      	bne.n	800f55a <__sflush_r+0x32>
 800f5c6:	682b      	ldr	r3, [r5, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d0c6      	beq.n	800f55a <__sflush_r+0x32>
 800f5cc:	2b1d      	cmp	r3, #29
 800f5ce:	d001      	beq.n	800f5d4 <__sflush_r+0xac>
 800f5d0:	2b16      	cmp	r3, #22
 800f5d2:	d11e      	bne.n	800f612 <__sflush_r+0xea>
 800f5d4:	602f      	str	r7, [r5, #0]
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	e022      	b.n	800f620 <__sflush_r+0xf8>
 800f5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5de:	b21b      	sxth	r3, r3
 800f5e0:	e01b      	b.n	800f61a <__sflush_r+0xf2>
 800f5e2:	690f      	ldr	r7, [r1, #16]
 800f5e4:	2f00      	cmp	r7, #0
 800f5e6:	d0f6      	beq.n	800f5d6 <__sflush_r+0xae>
 800f5e8:	0793      	lsls	r3, r2, #30
 800f5ea:	680e      	ldr	r6, [r1, #0]
 800f5ec:	bf08      	it	eq
 800f5ee:	694b      	ldreq	r3, [r1, #20]
 800f5f0:	600f      	str	r7, [r1, #0]
 800f5f2:	bf18      	it	ne
 800f5f4:	2300      	movne	r3, #0
 800f5f6:	eba6 0807 	sub.w	r8, r6, r7
 800f5fa:	608b      	str	r3, [r1, #8]
 800f5fc:	f1b8 0f00 	cmp.w	r8, #0
 800f600:	dde9      	ble.n	800f5d6 <__sflush_r+0xae>
 800f602:	6a21      	ldr	r1, [r4, #32]
 800f604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f606:	4643      	mov	r3, r8
 800f608:	463a      	mov	r2, r7
 800f60a:	4628      	mov	r0, r5
 800f60c:	47b0      	blx	r6
 800f60e:	2800      	cmp	r0, #0
 800f610:	dc08      	bgt.n	800f624 <__sflush_r+0xfc>
 800f612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f61a:	81a3      	strh	r3, [r4, #12]
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f624:	4407      	add	r7, r0
 800f626:	eba8 0800 	sub.w	r8, r8, r0
 800f62a:	e7e7      	b.n	800f5fc <__sflush_r+0xd4>
 800f62c:	dfbffffe 	.word	0xdfbffffe

0800f630 <_fflush_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	690b      	ldr	r3, [r1, #16]
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	b913      	cbnz	r3, 800f640 <_fflush_r+0x10>
 800f63a:	2500      	movs	r5, #0
 800f63c:	4628      	mov	r0, r5
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	b118      	cbz	r0, 800f64a <_fflush_r+0x1a>
 800f642:	6a03      	ldr	r3, [r0, #32]
 800f644:	b90b      	cbnz	r3, 800f64a <_fflush_r+0x1a>
 800f646:	f7fd fb6b 	bl	800cd20 <__sinit>
 800f64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d0f3      	beq.n	800f63a <_fflush_r+0xa>
 800f652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f654:	07d0      	lsls	r0, r2, #31
 800f656:	d404      	bmi.n	800f662 <_fflush_r+0x32>
 800f658:	0599      	lsls	r1, r3, #22
 800f65a:	d402      	bmi.n	800f662 <_fflush_r+0x32>
 800f65c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f65e:	f7fd fcbc 	bl	800cfda <__retarget_lock_acquire_recursive>
 800f662:	4628      	mov	r0, r5
 800f664:	4621      	mov	r1, r4
 800f666:	f7ff ff5f 	bl	800f528 <__sflush_r>
 800f66a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f66c:	07da      	lsls	r2, r3, #31
 800f66e:	4605      	mov	r5, r0
 800f670:	d4e4      	bmi.n	800f63c <_fflush_r+0xc>
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	059b      	lsls	r3, r3, #22
 800f676:	d4e1      	bmi.n	800f63c <_fflush_r+0xc>
 800f678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f67a:	f7fd fcaf 	bl	800cfdc <__retarget_lock_release_recursive>
 800f67e:	e7dd      	b.n	800f63c <_fflush_r+0xc>

0800f680 <memmove>:
 800f680:	4288      	cmp	r0, r1
 800f682:	b510      	push	{r4, lr}
 800f684:	eb01 0402 	add.w	r4, r1, r2
 800f688:	d902      	bls.n	800f690 <memmove+0x10>
 800f68a:	4284      	cmp	r4, r0
 800f68c:	4623      	mov	r3, r4
 800f68e:	d807      	bhi.n	800f6a0 <memmove+0x20>
 800f690:	1e43      	subs	r3, r0, #1
 800f692:	42a1      	cmp	r1, r4
 800f694:	d008      	beq.n	800f6a8 <memmove+0x28>
 800f696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f69a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f69e:	e7f8      	b.n	800f692 <memmove+0x12>
 800f6a0:	4402      	add	r2, r0
 800f6a2:	4601      	mov	r1, r0
 800f6a4:	428a      	cmp	r2, r1
 800f6a6:	d100      	bne.n	800f6aa <memmove+0x2a>
 800f6a8:	bd10      	pop	{r4, pc}
 800f6aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6b2:	e7f7      	b.n	800f6a4 <memmove+0x24>

0800f6b4 <_sbrk_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d06      	ldr	r5, [pc, #24]	@ (800f6d0 <_sbrk_r+0x1c>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	602b      	str	r3, [r5, #0]
 800f6c0:	f7f2 fba4 	bl	8001e0c <_sbrk>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	d102      	bne.n	800f6ce <_sbrk_r+0x1a>
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	b103      	cbz	r3, 800f6ce <_sbrk_r+0x1a>
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	240005dc 	.word	0x240005dc

0800f6d4 <memcpy>:
 800f6d4:	440a      	add	r2, r1
 800f6d6:	4291      	cmp	r1, r2
 800f6d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f6dc:	d100      	bne.n	800f6e0 <memcpy+0xc>
 800f6de:	4770      	bx	lr
 800f6e0:	b510      	push	{r4, lr}
 800f6e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6ea:	4291      	cmp	r1, r2
 800f6ec:	d1f9      	bne.n	800f6e2 <memcpy+0xe>
 800f6ee:	bd10      	pop	{r4, pc}

0800f6f0 <nan>:
 800f6f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f6f8 <nan+0x8>
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	00000000 	.word	0x00000000
 800f6fc:	7ff80000 	.word	0x7ff80000

0800f700 <__assert_func>:
 800f700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f702:	4614      	mov	r4, r2
 800f704:	461a      	mov	r2, r3
 800f706:	4b09      	ldr	r3, [pc, #36]	@ (800f72c <__assert_func+0x2c>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4605      	mov	r5, r0
 800f70c:	68d8      	ldr	r0, [r3, #12]
 800f70e:	b954      	cbnz	r4, 800f726 <__assert_func+0x26>
 800f710:	4b07      	ldr	r3, [pc, #28]	@ (800f730 <__assert_func+0x30>)
 800f712:	461c      	mov	r4, r3
 800f714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f718:	9100      	str	r1, [sp, #0]
 800f71a:	462b      	mov	r3, r5
 800f71c:	4905      	ldr	r1, [pc, #20]	@ (800f734 <__assert_func+0x34>)
 800f71e:	f000 fba7 	bl	800fe70 <fiprintf>
 800f722:	f000 fbb7 	bl	800fe94 <abort>
 800f726:	4b04      	ldr	r3, [pc, #16]	@ (800f738 <__assert_func+0x38>)
 800f728:	e7f4      	b.n	800f714 <__assert_func+0x14>
 800f72a:	bf00      	nop
 800f72c:	24000030 	.word	0x24000030
 800f730:	080108ac 	.word	0x080108ac
 800f734:	0801087e 	.word	0x0801087e
 800f738:	08010871 	.word	0x08010871

0800f73c <_calloc_r>:
 800f73c:	b570      	push	{r4, r5, r6, lr}
 800f73e:	fba1 5402 	umull	r5, r4, r1, r2
 800f742:	b93c      	cbnz	r4, 800f754 <_calloc_r+0x18>
 800f744:	4629      	mov	r1, r5
 800f746:	f7fe faa5 	bl	800dc94 <_malloc_r>
 800f74a:	4606      	mov	r6, r0
 800f74c:	b928      	cbnz	r0, 800f75a <_calloc_r+0x1e>
 800f74e:	2600      	movs	r6, #0
 800f750:	4630      	mov	r0, r6
 800f752:	bd70      	pop	{r4, r5, r6, pc}
 800f754:	220c      	movs	r2, #12
 800f756:	6002      	str	r2, [r0, #0]
 800f758:	e7f9      	b.n	800f74e <_calloc_r+0x12>
 800f75a:	462a      	mov	r2, r5
 800f75c:	4621      	mov	r1, r4
 800f75e:	f7fd fbac 	bl	800ceba <memset>
 800f762:	e7f5      	b.n	800f750 <_calloc_r+0x14>

0800f764 <rshift>:
 800f764:	6903      	ldr	r3, [r0, #16]
 800f766:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f76a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f76e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f772:	f100 0414 	add.w	r4, r0, #20
 800f776:	dd45      	ble.n	800f804 <rshift+0xa0>
 800f778:	f011 011f 	ands.w	r1, r1, #31
 800f77c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f780:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f784:	d10c      	bne.n	800f7a0 <rshift+0x3c>
 800f786:	f100 0710 	add.w	r7, r0, #16
 800f78a:	4629      	mov	r1, r5
 800f78c:	42b1      	cmp	r1, r6
 800f78e:	d334      	bcc.n	800f7fa <rshift+0x96>
 800f790:	1a9b      	subs	r3, r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	1eea      	subs	r2, r5, #3
 800f796:	4296      	cmp	r6, r2
 800f798:	bf38      	it	cc
 800f79a:	2300      	movcc	r3, #0
 800f79c:	4423      	add	r3, r4
 800f79e:	e015      	b.n	800f7cc <rshift+0x68>
 800f7a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f7a4:	f1c1 0820 	rsb	r8, r1, #32
 800f7a8:	40cf      	lsrs	r7, r1
 800f7aa:	f105 0e04 	add.w	lr, r5, #4
 800f7ae:	46a1      	mov	r9, r4
 800f7b0:	4576      	cmp	r6, lr
 800f7b2:	46f4      	mov	ip, lr
 800f7b4:	d815      	bhi.n	800f7e2 <rshift+0x7e>
 800f7b6:	1a9a      	subs	r2, r3, r2
 800f7b8:	0092      	lsls	r2, r2, #2
 800f7ba:	3a04      	subs	r2, #4
 800f7bc:	3501      	adds	r5, #1
 800f7be:	42ae      	cmp	r6, r5
 800f7c0:	bf38      	it	cc
 800f7c2:	2200      	movcc	r2, #0
 800f7c4:	18a3      	adds	r3, r4, r2
 800f7c6:	50a7      	str	r7, [r4, r2]
 800f7c8:	b107      	cbz	r7, 800f7cc <rshift+0x68>
 800f7ca:	3304      	adds	r3, #4
 800f7cc:	1b1a      	subs	r2, r3, r4
 800f7ce:	42a3      	cmp	r3, r4
 800f7d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f7d4:	bf08      	it	eq
 800f7d6:	2300      	moveq	r3, #0
 800f7d8:	6102      	str	r2, [r0, #16]
 800f7da:	bf08      	it	eq
 800f7dc:	6143      	streq	r3, [r0, #20]
 800f7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7e2:	f8dc c000 	ldr.w	ip, [ip]
 800f7e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f7ea:	ea4c 0707 	orr.w	r7, ip, r7
 800f7ee:	f849 7b04 	str.w	r7, [r9], #4
 800f7f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f7f6:	40cf      	lsrs	r7, r1
 800f7f8:	e7da      	b.n	800f7b0 <rshift+0x4c>
 800f7fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800f7fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800f802:	e7c3      	b.n	800f78c <rshift+0x28>
 800f804:	4623      	mov	r3, r4
 800f806:	e7e1      	b.n	800f7cc <rshift+0x68>

0800f808 <__hexdig_fun>:
 800f808:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f80c:	2b09      	cmp	r3, #9
 800f80e:	d802      	bhi.n	800f816 <__hexdig_fun+0xe>
 800f810:	3820      	subs	r0, #32
 800f812:	b2c0      	uxtb	r0, r0
 800f814:	4770      	bx	lr
 800f816:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f81a:	2b05      	cmp	r3, #5
 800f81c:	d801      	bhi.n	800f822 <__hexdig_fun+0x1a>
 800f81e:	3847      	subs	r0, #71	@ 0x47
 800f820:	e7f7      	b.n	800f812 <__hexdig_fun+0xa>
 800f822:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f826:	2b05      	cmp	r3, #5
 800f828:	d801      	bhi.n	800f82e <__hexdig_fun+0x26>
 800f82a:	3827      	subs	r0, #39	@ 0x27
 800f82c:	e7f1      	b.n	800f812 <__hexdig_fun+0xa>
 800f82e:	2000      	movs	r0, #0
 800f830:	4770      	bx	lr
	...

0800f834 <__gethex>:
 800f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f838:	b085      	sub	sp, #20
 800f83a:	468a      	mov	sl, r1
 800f83c:	9302      	str	r3, [sp, #8]
 800f83e:	680b      	ldr	r3, [r1, #0]
 800f840:	9001      	str	r0, [sp, #4]
 800f842:	4690      	mov	r8, r2
 800f844:	1c9c      	adds	r4, r3, #2
 800f846:	46a1      	mov	r9, r4
 800f848:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f84c:	2830      	cmp	r0, #48	@ 0x30
 800f84e:	d0fa      	beq.n	800f846 <__gethex+0x12>
 800f850:	eba9 0303 	sub.w	r3, r9, r3
 800f854:	f1a3 0b02 	sub.w	fp, r3, #2
 800f858:	f7ff ffd6 	bl	800f808 <__hexdig_fun>
 800f85c:	4605      	mov	r5, r0
 800f85e:	2800      	cmp	r0, #0
 800f860:	d168      	bne.n	800f934 <__gethex+0x100>
 800f862:	49a0      	ldr	r1, [pc, #640]	@ (800fae4 <__gethex+0x2b0>)
 800f864:	2201      	movs	r2, #1
 800f866:	4648      	mov	r0, r9
 800f868:	f7fd fb2f 	bl	800ceca <strncmp>
 800f86c:	4607      	mov	r7, r0
 800f86e:	2800      	cmp	r0, #0
 800f870:	d167      	bne.n	800f942 <__gethex+0x10e>
 800f872:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f876:	4626      	mov	r6, r4
 800f878:	f7ff ffc6 	bl	800f808 <__hexdig_fun>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d062      	beq.n	800f946 <__gethex+0x112>
 800f880:	4623      	mov	r3, r4
 800f882:	7818      	ldrb	r0, [r3, #0]
 800f884:	2830      	cmp	r0, #48	@ 0x30
 800f886:	4699      	mov	r9, r3
 800f888:	f103 0301 	add.w	r3, r3, #1
 800f88c:	d0f9      	beq.n	800f882 <__gethex+0x4e>
 800f88e:	f7ff ffbb 	bl	800f808 <__hexdig_fun>
 800f892:	fab0 f580 	clz	r5, r0
 800f896:	096d      	lsrs	r5, r5, #5
 800f898:	f04f 0b01 	mov.w	fp, #1
 800f89c:	464a      	mov	r2, r9
 800f89e:	4616      	mov	r6, r2
 800f8a0:	3201      	adds	r2, #1
 800f8a2:	7830      	ldrb	r0, [r6, #0]
 800f8a4:	f7ff ffb0 	bl	800f808 <__hexdig_fun>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d1f8      	bne.n	800f89e <__gethex+0x6a>
 800f8ac:	498d      	ldr	r1, [pc, #564]	@ (800fae4 <__gethex+0x2b0>)
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f7fd fb0a 	bl	800ceca <strncmp>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d13f      	bne.n	800f93a <__gethex+0x106>
 800f8ba:	b944      	cbnz	r4, 800f8ce <__gethex+0x9a>
 800f8bc:	1c74      	adds	r4, r6, #1
 800f8be:	4622      	mov	r2, r4
 800f8c0:	4616      	mov	r6, r2
 800f8c2:	3201      	adds	r2, #1
 800f8c4:	7830      	ldrb	r0, [r6, #0]
 800f8c6:	f7ff ff9f 	bl	800f808 <__hexdig_fun>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d1f8      	bne.n	800f8c0 <__gethex+0x8c>
 800f8ce:	1ba4      	subs	r4, r4, r6
 800f8d0:	00a7      	lsls	r7, r4, #2
 800f8d2:	7833      	ldrb	r3, [r6, #0]
 800f8d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f8d8:	2b50      	cmp	r3, #80	@ 0x50
 800f8da:	d13e      	bne.n	800f95a <__gethex+0x126>
 800f8dc:	7873      	ldrb	r3, [r6, #1]
 800f8de:	2b2b      	cmp	r3, #43	@ 0x2b
 800f8e0:	d033      	beq.n	800f94a <__gethex+0x116>
 800f8e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800f8e4:	d034      	beq.n	800f950 <__gethex+0x11c>
 800f8e6:	1c71      	adds	r1, r6, #1
 800f8e8:	2400      	movs	r4, #0
 800f8ea:	7808      	ldrb	r0, [r1, #0]
 800f8ec:	f7ff ff8c 	bl	800f808 <__hexdig_fun>
 800f8f0:	1e43      	subs	r3, r0, #1
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	2b18      	cmp	r3, #24
 800f8f6:	d830      	bhi.n	800f95a <__gethex+0x126>
 800f8f8:	f1a0 0210 	sub.w	r2, r0, #16
 800f8fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f900:	f7ff ff82 	bl	800f808 <__hexdig_fun>
 800f904:	f100 3cff 	add.w	ip, r0, #4294967295
 800f908:	fa5f fc8c 	uxtb.w	ip, ip
 800f90c:	f1bc 0f18 	cmp.w	ip, #24
 800f910:	f04f 030a 	mov.w	r3, #10
 800f914:	d91e      	bls.n	800f954 <__gethex+0x120>
 800f916:	b104      	cbz	r4, 800f91a <__gethex+0xe6>
 800f918:	4252      	negs	r2, r2
 800f91a:	4417      	add	r7, r2
 800f91c:	f8ca 1000 	str.w	r1, [sl]
 800f920:	b1ed      	cbz	r5, 800f95e <__gethex+0x12a>
 800f922:	f1bb 0f00 	cmp.w	fp, #0
 800f926:	bf0c      	ite	eq
 800f928:	2506      	moveq	r5, #6
 800f92a:	2500      	movne	r5, #0
 800f92c:	4628      	mov	r0, r5
 800f92e:	b005      	add	sp, #20
 800f930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f934:	2500      	movs	r5, #0
 800f936:	462c      	mov	r4, r5
 800f938:	e7b0      	b.n	800f89c <__gethex+0x68>
 800f93a:	2c00      	cmp	r4, #0
 800f93c:	d1c7      	bne.n	800f8ce <__gethex+0x9a>
 800f93e:	4627      	mov	r7, r4
 800f940:	e7c7      	b.n	800f8d2 <__gethex+0x9e>
 800f942:	464e      	mov	r6, r9
 800f944:	462f      	mov	r7, r5
 800f946:	2501      	movs	r5, #1
 800f948:	e7c3      	b.n	800f8d2 <__gethex+0x9e>
 800f94a:	2400      	movs	r4, #0
 800f94c:	1cb1      	adds	r1, r6, #2
 800f94e:	e7cc      	b.n	800f8ea <__gethex+0xb6>
 800f950:	2401      	movs	r4, #1
 800f952:	e7fb      	b.n	800f94c <__gethex+0x118>
 800f954:	fb03 0002 	mla	r0, r3, r2, r0
 800f958:	e7ce      	b.n	800f8f8 <__gethex+0xc4>
 800f95a:	4631      	mov	r1, r6
 800f95c:	e7de      	b.n	800f91c <__gethex+0xe8>
 800f95e:	eba6 0309 	sub.w	r3, r6, r9
 800f962:	3b01      	subs	r3, #1
 800f964:	4629      	mov	r1, r5
 800f966:	2b07      	cmp	r3, #7
 800f968:	dc0a      	bgt.n	800f980 <__gethex+0x14c>
 800f96a:	9801      	ldr	r0, [sp, #4]
 800f96c:	f7fe fa1e 	bl	800ddac <_Balloc>
 800f970:	4604      	mov	r4, r0
 800f972:	b940      	cbnz	r0, 800f986 <__gethex+0x152>
 800f974:	4b5c      	ldr	r3, [pc, #368]	@ (800fae8 <__gethex+0x2b4>)
 800f976:	4602      	mov	r2, r0
 800f978:	21e4      	movs	r1, #228	@ 0xe4
 800f97a:	485c      	ldr	r0, [pc, #368]	@ (800faec <__gethex+0x2b8>)
 800f97c:	f7ff fec0 	bl	800f700 <__assert_func>
 800f980:	3101      	adds	r1, #1
 800f982:	105b      	asrs	r3, r3, #1
 800f984:	e7ef      	b.n	800f966 <__gethex+0x132>
 800f986:	f100 0a14 	add.w	sl, r0, #20
 800f98a:	2300      	movs	r3, #0
 800f98c:	4655      	mov	r5, sl
 800f98e:	469b      	mov	fp, r3
 800f990:	45b1      	cmp	r9, r6
 800f992:	d337      	bcc.n	800fa04 <__gethex+0x1d0>
 800f994:	f845 bb04 	str.w	fp, [r5], #4
 800f998:	eba5 050a 	sub.w	r5, r5, sl
 800f99c:	10ad      	asrs	r5, r5, #2
 800f99e:	6125      	str	r5, [r4, #16]
 800f9a0:	4658      	mov	r0, fp
 800f9a2:	f7fe faf5 	bl	800df90 <__hi0bits>
 800f9a6:	016d      	lsls	r5, r5, #5
 800f9a8:	f8d8 6000 	ldr.w	r6, [r8]
 800f9ac:	1a2d      	subs	r5, r5, r0
 800f9ae:	42b5      	cmp	r5, r6
 800f9b0:	dd54      	ble.n	800fa5c <__gethex+0x228>
 800f9b2:	1bad      	subs	r5, r5, r6
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f7fe fe86 	bl	800e6c8 <__any_on>
 800f9bc:	4681      	mov	r9, r0
 800f9be:	b178      	cbz	r0, 800f9e0 <__gethex+0x1ac>
 800f9c0:	1e6b      	subs	r3, r5, #1
 800f9c2:	1159      	asrs	r1, r3, #5
 800f9c4:	f003 021f 	and.w	r2, r3, #31
 800f9c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f9cc:	f04f 0901 	mov.w	r9, #1
 800f9d0:	fa09 f202 	lsl.w	r2, r9, r2
 800f9d4:	420a      	tst	r2, r1
 800f9d6:	d003      	beq.n	800f9e0 <__gethex+0x1ac>
 800f9d8:	454b      	cmp	r3, r9
 800f9da:	dc36      	bgt.n	800fa4a <__gethex+0x216>
 800f9dc:	f04f 0902 	mov.w	r9, #2
 800f9e0:	4629      	mov	r1, r5
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f7ff febe 	bl	800f764 <rshift>
 800f9e8:	442f      	add	r7, r5
 800f9ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9ee:	42bb      	cmp	r3, r7
 800f9f0:	da42      	bge.n	800fa78 <__gethex+0x244>
 800f9f2:	9801      	ldr	r0, [sp, #4]
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f7fe fa19 	bl	800de2c <_Bfree>
 800f9fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	6013      	str	r3, [r2, #0]
 800fa00:	25a3      	movs	r5, #163	@ 0xa3
 800fa02:	e793      	b.n	800f92c <__gethex+0xf8>
 800fa04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fa08:	2a2e      	cmp	r2, #46	@ 0x2e
 800fa0a:	d012      	beq.n	800fa32 <__gethex+0x1fe>
 800fa0c:	2b20      	cmp	r3, #32
 800fa0e:	d104      	bne.n	800fa1a <__gethex+0x1e6>
 800fa10:	f845 bb04 	str.w	fp, [r5], #4
 800fa14:	f04f 0b00 	mov.w	fp, #0
 800fa18:	465b      	mov	r3, fp
 800fa1a:	7830      	ldrb	r0, [r6, #0]
 800fa1c:	9303      	str	r3, [sp, #12]
 800fa1e:	f7ff fef3 	bl	800f808 <__hexdig_fun>
 800fa22:	9b03      	ldr	r3, [sp, #12]
 800fa24:	f000 000f 	and.w	r0, r0, #15
 800fa28:	4098      	lsls	r0, r3
 800fa2a:	ea4b 0b00 	orr.w	fp, fp, r0
 800fa2e:	3304      	adds	r3, #4
 800fa30:	e7ae      	b.n	800f990 <__gethex+0x15c>
 800fa32:	45b1      	cmp	r9, r6
 800fa34:	d8ea      	bhi.n	800fa0c <__gethex+0x1d8>
 800fa36:	492b      	ldr	r1, [pc, #172]	@ (800fae4 <__gethex+0x2b0>)
 800fa38:	9303      	str	r3, [sp, #12]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f7fd fa44 	bl	800ceca <strncmp>
 800fa42:	9b03      	ldr	r3, [sp, #12]
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d1e1      	bne.n	800fa0c <__gethex+0x1d8>
 800fa48:	e7a2      	b.n	800f990 <__gethex+0x15c>
 800fa4a:	1ea9      	subs	r1, r5, #2
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f7fe fe3b 	bl	800e6c8 <__any_on>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d0c2      	beq.n	800f9dc <__gethex+0x1a8>
 800fa56:	f04f 0903 	mov.w	r9, #3
 800fa5a:	e7c1      	b.n	800f9e0 <__gethex+0x1ac>
 800fa5c:	da09      	bge.n	800fa72 <__gethex+0x23e>
 800fa5e:	1b75      	subs	r5, r6, r5
 800fa60:	4621      	mov	r1, r4
 800fa62:	9801      	ldr	r0, [sp, #4]
 800fa64:	462a      	mov	r2, r5
 800fa66:	f7fe fbf9 	bl	800e25c <__lshift>
 800fa6a:	1b7f      	subs	r7, r7, r5
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	f100 0a14 	add.w	sl, r0, #20
 800fa72:	f04f 0900 	mov.w	r9, #0
 800fa76:	e7b8      	b.n	800f9ea <__gethex+0x1b6>
 800fa78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fa7c:	42bd      	cmp	r5, r7
 800fa7e:	dd6f      	ble.n	800fb60 <__gethex+0x32c>
 800fa80:	1bed      	subs	r5, r5, r7
 800fa82:	42ae      	cmp	r6, r5
 800fa84:	dc34      	bgt.n	800faf0 <__gethex+0x2bc>
 800fa86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d022      	beq.n	800fad4 <__gethex+0x2a0>
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d024      	beq.n	800fadc <__gethex+0x2a8>
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d115      	bne.n	800fac2 <__gethex+0x28e>
 800fa96:	42ae      	cmp	r6, r5
 800fa98:	d113      	bne.n	800fac2 <__gethex+0x28e>
 800fa9a:	2e01      	cmp	r6, #1
 800fa9c:	d10b      	bne.n	800fab6 <__gethex+0x282>
 800fa9e:	9a02      	ldr	r2, [sp, #8]
 800faa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	2301      	movs	r3, #1
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	f8ca 3000 	str.w	r3, [sl]
 800faae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fab0:	2562      	movs	r5, #98	@ 0x62
 800fab2:	601c      	str	r4, [r3, #0]
 800fab4:	e73a      	b.n	800f92c <__gethex+0xf8>
 800fab6:	1e71      	subs	r1, r6, #1
 800fab8:	4620      	mov	r0, r4
 800faba:	f7fe fe05 	bl	800e6c8 <__any_on>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d1ed      	bne.n	800fa9e <__gethex+0x26a>
 800fac2:	9801      	ldr	r0, [sp, #4]
 800fac4:	4621      	mov	r1, r4
 800fac6:	f7fe f9b1 	bl	800de2c <_Bfree>
 800faca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800facc:	2300      	movs	r3, #0
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	2550      	movs	r5, #80	@ 0x50
 800fad2:	e72b      	b.n	800f92c <__gethex+0xf8>
 800fad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1f3      	bne.n	800fac2 <__gethex+0x28e>
 800fada:	e7e0      	b.n	800fa9e <__gethex+0x26a>
 800fadc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d1dd      	bne.n	800fa9e <__gethex+0x26a>
 800fae2:	e7ee      	b.n	800fac2 <__gethex+0x28e>
 800fae4:	08010800 	.word	0x08010800
 800fae8:	0801069a 	.word	0x0801069a
 800faec:	080108ad 	.word	0x080108ad
 800faf0:	1e6f      	subs	r7, r5, #1
 800faf2:	f1b9 0f00 	cmp.w	r9, #0
 800faf6:	d130      	bne.n	800fb5a <__gethex+0x326>
 800faf8:	b127      	cbz	r7, 800fb04 <__gethex+0x2d0>
 800fafa:	4639      	mov	r1, r7
 800fafc:	4620      	mov	r0, r4
 800fafe:	f7fe fde3 	bl	800e6c8 <__any_on>
 800fb02:	4681      	mov	r9, r0
 800fb04:	117a      	asrs	r2, r7, #5
 800fb06:	2301      	movs	r3, #1
 800fb08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fb0c:	f007 071f 	and.w	r7, r7, #31
 800fb10:	40bb      	lsls	r3, r7
 800fb12:	4213      	tst	r3, r2
 800fb14:	4629      	mov	r1, r5
 800fb16:	4620      	mov	r0, r4
 800fb18:	bf18      	it	ne
 800fb1a:	f049 0902 	orrne.w	r9, r9, #2
 800fb1e:	f7ff fe21 	bl	800f764 <rshift>
 800fb22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fb26:	1b76      	subs	r6, r6, r5
 800fb28:	2502      	movs	r5, #2
 800fb2a:	f1b9 0f00 	cmp.w	r9, #0
 800fb2e:	d047      	beq.n	800fbc0 <__gethex+0x38c>
 800fb30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d015      	beq.n	800fb64 <__gethex+0x330>
 800fb38:	2b03      	cmp	r3, #3
 800fb3a:	d017      	beq.n	800fb6c <__gethex+0x338>
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d109      	bne.n	800fb54 <__gethex+0x320>
 800fb40:	f019 0f02 	tst.w	r9, #2
 800fb44:	d006      	beq.n	800fb54 <__gethex+0x320>
 800fb46:	f8da 3000 	ldr.w	r3, [sl]
 800fb4a:	ea49 0903 	orr.w	r9, r9, r3
 800fb4e:	f019 0f01 	tst.w	r9, #1
 800fb52:	d10e      	bne.n	800fb72 <__gethex+0x33e>
 800fb54:	f045 0510 	orr.w	r5, r5, #16
 800fb58:	e032      	b.n	800fbc0 <__gethex+0x38c>
 800fb5a:	f04f 0901 	mov.w	r9, #1
 800fb5e:	e7d1      	b.n	800fb04 <__gethex+0x2d0>
 800fb60:	2501      	movs	r5, #1
 800fb62:	e7e2      	b.n	800fb2a <__gethex+0x2f6>
 800fb64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb66:	f1c3 0301 	rsb	r3, r3, #1
 800fb6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d0f0      	beq.n	800fb54 <__gethex+0x320>
 800fb72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fb76:	f104 0314 	add.w	r3, r4, #20
 800fb7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fb7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fb82:	f04f 0c00 	mov.w	ip, #0
 800fb86:	4618      	mov	r0, r3
 800fb88:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fb90:	d01b      	beq.n	800fbca <__gethex+0x396>
 800fb92:	3201      	adds	r2, #1
 800fb94:	6002      	str	r2, [r0, #0]
 800fb96:	2d02      	cmp	r5, #2
 800fb98:	f104 0314 	add.w	r3, r4, #20
 800fb9c:	d13c      	bne.n	800fc18 <__gethex+0x3e4>
 800fb9e:	f8d8 2000 	ldr.w	r2, [r8]
 800fba2:	3a01      	subs	r2, #1
 800fba4:	42b2      	cmp	r2, r6
 800fba6:	d109      	bne.n	800fbbc <__gethex+0x388>
 800fba8:	1171      	asrs	r1, r6, #5
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fbb0:	f006 061f 	and.w	r6, r6, #31
 800fbb4:	fa02 f606 	lsl.w	r6, r2, r6
 800fbb8:	421e      	tst	r6, r3
 800fbba:	d13a      	bne.n	800fc32 <__gethex+0x3fe>
 800fbbc:	f045 0520 	orr.w	r5, r5, #32
 800fbc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbc2:	601c      	str	r4, [r3, #0]
 800fbc4:	9b02      	ldr	r3, [sp, #8]
 800fbc6:	601f      	str	r7, [r3, #0]
 800fbc8:	e6b0      	b.n	800f92c <__gethex+0xf8>
 800fbca:	4299      	cmp	r1, r3
 800fbcc:	f843 cc04 	str.w	ip, [r3, #-4]
 800fbd0:	d8d9      	bhi.n	800fb86 <__gethex+0x352>
 800fbd2:	68a3      	ldr	r3, [r4, #8]
 800fbd4:	459b      	cmp	fp, r3
 800fbd6:	db17      	blt.n	800fc08 <__gethex+0x3d4>
 800fbd8:	6861      	ldr	r1, [r4, #4]
 800fbda:	9801      	ldr	r0, [sp, #4]
 800fbdc:	3101      	adds	r1, #1
 800fbde:	f7fe f8e5 	bl	800ddac <_Balloc>
 800fbe2:	4681      	mov	r9, r0
 800fbe4:	b918      	cbnz	r0, 800fbee <__gethex+0x3ba>
 800fbe6:	4b1a      	ldr	r3, [pc, #104]	@ (800fc50 <__gethex+0x41c>)
 800fbe8:	4602      	mov	r2, r0
 800fbea:	2184      	movs	r1, #132	@ 0x84
 800fbec:	e6c5      	b.n	800f97a <__gethex+0x146>
 800fbee:	6922      	ldr	r2, [r4, #16]
 800fbf0:	3202      	adds	r2, #2
 800fbf2:	f104 010c 	add.w	r1, r4, #12
 800fbf6:	0092      	lsls	r2, r2, #2
 800fbf8:	300c      	adds	r0, #12
 800fbfa:	f7ff fd6b 	bl	800f6d4 <memcpy>
 800fbfe:	4621      	mov	r1, r4
 800fc00:	9801      	ldr	r0, [sp, #4]
 800fc02:	f7fe f913 	bl	800de2c <_Bfree>
 800fc06:	464c      	mov	r4, r9
 800fc08:	6923      	ldr	r3, [r4, #16]
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc10:	6122      	str	r2, [r4, #16]
 800fc12:	2201      	movs	r2, #1
 800fc14:	615a      	str	r2, [r3, #20]
 800fc16:	e7be      	b.n	800fb96 <__gethex+0x362>
 800fc18:	6922      	ldr	r2, [r4, #16]
 800fc1a:	455a      	cmp	r2, fp
 800fc1c:	dd0b      	ble.n	800fc36 <__gethex+0x402>
 800fc1e:	2101      	movs	r1, #1
 800fc20:	4620      	mov	r0, r4
 800fc22:	f7ff fd9f 	bl	800f764 <rshift>
 800fc26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc2a:	3701      	adds	r7, #1
 800fc2c:	42bb      	cmp	r3, r7
 800fc2e:	f6ff aee0 	blt.w	800f9f2 <__gethex+0x1be>
 800fc32:	2501      	movs	r5, #1
 800fc34:	e7c2      	b.n	800fbbc <__gethex+0x388>
 800fc36:	f016 061f 	ands.w	r6, r6, #31
 800fc3a:	d0fa      	beq.n	800fc32 <__gethex+0x3fe>
 800fc3c:	4453      	add	r3, sl
 800fc3e:	f1c6 0620 	rsb	r6, r6, #32
 800fc42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fc46:	f7fe f9a3 	bl	800df90 <__hi0bits>
 800fc4a:	42b0      	cmp	r0, r6
 800fc4c:	dbe7      	blt.n	800fc1e <__gethex+0x3ea>
 800fc4e:	e7f0      	b.n	800fc32 <__gethex+0x3fe>
 800fc50:	0801069a 	.word	0x0801069a

0800fc54 <L_shift>:
 800fc54:	f1c2 0208 	rsb	r2, r2, #8
 800fc58:	0092      	lsls	r2, r2, #2
 800fc5a:	b570      	push	{r4, r5, r6, lr}
 800fc5c:	f1c2 0620 	rsb	r6, r2, #32
 800fc60:	6843      	ldr	r3, [r0, #4]
 800fc62:	6804      	ldr	r4, [r0, #0]
 800fc64:	fa03 f506 	lsl.w	r5, r3, r6
 800fc68:	432c      	orrs	r4, r5
 800fc6a:	40d3      	lsrs	r3, r2
 800fc6c:	6004      	str	r4, [r0, #0]
 800fc6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fc72:	4288      	cmp	r0, r1
 800fc74:	d3f4      	bcc.n	800fc60 <L_shift+0xc>
 800fc76:	bd70      	pop	{r4, r5, r6, pc}

0800fc78 <__match>:
 800fc78:	b530      	push	{r4, r5, lr}
 800fc7a:	6803      	ldr	r3, [r0, #0]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc82:	b914      	cbnz	r4, 800fc8a <__match+0x12>
 800fc84:	6003      	str	r3, [r0, #0]
 800fc86:	2001      	movs	r0, #1
 800fc88:	bd30      	pop	{r4, r5, pc}
 800fc8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fc92:	2d19      	cmp	r5, #25
 800fc94:	bf98      	it	ls
 800fc96:	3220      	addls	r2, #32
 800fc98:	42a2      	cmp	r2, r4
 800fc9a:	d0f0      	beq.n	800fc7e <__match+0x6>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	e7f3      	b.n	800fc88 <__match+0x10>

0800fca0 <__hexnan>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	680b      	ldr	r3, [r1, #0]
 800fca6:	6801      	ldr	r1, [r0, #0]
 800fca8:	115e      	asrs	r6, r3, #5
 800fcaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fcae:	f013 031f 	ands.w	r3, r3, #31
 800fcb2:	b087      	sub	sp, #28
 800fcb4:	bf18      	it	ne
 800fcb6:	3604      	addne	r6, #4
 800fcb8:	2500      	movs	r5, #0
 800fcba:	1f37      	subs	r7, r6, #4
 800fcbc:	4682      	mov	sl, r0
 800fcbe:	4690      	mov	r8, r2
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	f846 5c04 	str.w	r5, [r6, #-4]
 800fcc6:	46b9      	mov	r9, r7
 800fcc8:	463c      	mov	r4, r7
 800fcca:	9502      	str	r5, [sp, #8]
 800fccc:	46ab      	mov	fp, r5
 800fcce:	784a      	ldrb	r2, [r1, #1]
 800fcd0:	1c4b      	adds	r3, r1, #1
 800fcd2:	9303      	str	r3, [sp, #12]
 800fcd4:	b342      	cbz	r2, 800fd28 <__hexnan+0x88>
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	9105      	str	r1, [sp, #20]
 800fcda:	9204      	str	r2, [sp, #16]
 800fcdc:	f7ff fd94 	bl	800f808 <__hexdig_fun>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d151      	bne.n	800fd88 <__hexnan+0xe8>
 800fce4:	9a04      	ldr	r2, [sp, #16]
 800fce6:	9905      	ldr	r1, [sp, #20]
 800fce8:	2a20      	cmp	r2, #32
 800fcea:	d818      	bhi.n	800fd1e <__hexnan+0x7e>
 800fcec:	9b02      	ldr	r3, [sp, #8]
 800fcee:	459b      	cmp	fp, r3
 800fcf0:	dd13      	ble.n	800fd1a <__hexnan+0x7a>
 800fcf2:	454c      	cmp	r4, r9
 800fcf4:	d206      	bcs.n	800fd04 <__hexnan+0x64>
 800fcf6:	2d07      	cmp	r5, #7
 800fcf8:	dc04      	bgt.n	800fd04 <__hexnan+0x64>
 800fcfa:	462a      	mov	r2, r5
 800fcfc:	4649      	mov	r1, r9
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f7ff ffa8 	bl	800fc54 <L_shift>
 800fd04:	4544      	cmp	r4, r8
 800fd06:	d952      	bls.n	800fdae <__hexnan+0x10e>
 800fd08:	2300      	movs	r3, #0
 800fd0a:	f1a4 0904 	sub.w	r9, r4, #4
 800fd0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd12:	f8cd b008 	str.w	fp, [sp, #8]
 800fd16:	464c      	mov	r4, r9
 800fd18:	461d      	mov	r5, r3
 800fd1a:	9903      	ldr	r1, [sp, #12]
 800fd1c:	e7d7      	b.n	800fcce <__hexnan+0x2e>
 800fd1e:	2a29      	cmp	r2, #41	@ 0x29
 800fd20:	d157      	bne.n	800fdd2 <__hexnan+0x132>
 800fd22:	3102      	adds	r1, #2
 800fd24:	f8ca 1000 	str.w	r1, [sl]
 800fd28:	f1bb 0f00 	cmp.w	fp, #0
 800fd2c:	d051      	beq.n	800fdd2 <__hexnan+0x132>
 800fd2e:	454c      	cmp	r4, r9
 800fd30:	d206      	bcs.n	800fd40 <__hexnan+0xa0>
 800fd32:	2d07      	cmp	r5, #7
 800fd34:	dc04      	bgt.n	800fd40 <__hexnan+0xa0>
 800fd36:	462a      	mov	r2, r5
 800fd38:	4649      	mov	r1, r9
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7ff ff8a 	bl	800fc54 <L_shift>
 800fd40:	4544      	cmp	r4, r8
 800fd42:	d936      	bls.n	800fdb2 <__hexnan+0x112>
 800fd44:	f1a8 0204 	sub.w	r2, r8, #4
 800fd48:	4623      	mov	r3, r4
 800fd4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fd4e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fd52:	429f      	cmp	r7, r3
 800fd54:	d2f9      	bcs.n	800fd4a <__hexnan+0xaa>
 800fd56:	1b3b      	subs	r3, r7, r4
 800fd58:	f023 0303 	bic.w	r3, r3, #3
 800fd5c:	3304      	adds	r3, #4
 800fd5e:	3401      	adds	r4, #1
 800fd60:	3e03      	subs	r6, #3
 800fd62:	42b4      	cmp	r4, r6
 800fd64:	bf88      	it	hi
 800fd66:	2304      	movhi	r3, #4
 800fd68:	4443      	add	r3, r8
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f843 2b04 	str.w	r2, [r3], #4
 800fd70:	429f      	cmp	r7, r3
 800fd72:	d2fb      	bcs.n	800fd6c <__hexnan+0xcc>
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	b91b      	cbnz	r3, 800fd80 <__hexnan+0xe0>
 800fd78:	4547      	cmp	r7, r8
 800fd7a:	d128      	bne.n	800fdce <__hexnan+0x12e>
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	603b      	str	r3, [r7, #0]
 800fd80:	2005      	movs	r0, #5
 800fd82:	b007      	add	sp, #28
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	3501      	adds	r5, #1
 800fd8a:	2d08      	cmp	r5, #8
 800fd8c:	f10b 0b01 	add.w	fp, fp, #1
 800fd90:	dd06      	ble.n	800fda0 <__hexnan+0x100>
 800fd92:	4544      	cmp	r4, r8
 800fd94:	d9c1      	bls.n	800fd1a <__hexnan+0x7a>
 800fd96:	2300      	movs	r3, #0
 800fd98:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd9c:	2501      	movs	r5, #1
 800fd9e:	3c04      	subs	r4, #4
 800fda0:	6822      	ldr	r2, [r4, #0]
 800fda2:	f000 000f 	and.w	r0, r0, #15
 800fda6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fdaa:	6020      	str	r0, [r4, #0]
 800fdac:	e7b5      	b.n	800fd1a <__hexnan+0x7a>
 800fdae:	2508      	movs	r5, #8
 800fdb0:	e7b3      	b.n	800fd1a <__hexnan+0x7a>
 800fdb2:	9b01      	ldr	r3, [sp, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d0dd      	beq.n	800fd74 <__hexnan+0xd4>
 800fdb8:	f1c3 0320 	rsb	r3, r3, #32
 800fdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800fdc0:	40da      	lsrs	r2, r3
 800fdc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	f846 3c04 	str.w	r3, [r6, #-4]
 800fdcc:	e7d2      	b.n	800fd74 <__hexnan+0xd4>
 800fdce:	3f04      	subs	r7, #4
 800fdd0:	e7d0      	b.n	800fd74 <__hexnan+0xd4>
 800fdd2:	2004      	movs	r0, #4
 800fdd4:	e7d5      	b.n	800fd82 <__hexnan+0xe2>

0800fdd6 <__ascii_mbtowc>:
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	b901      	cbnz	r1, 800fddc <__ascii_mbtowc+0x6>
 800fdda:	a901      	add	r1, sp, #4
 800fddc:	b142      	cbz	r2, 800fdf0 <__ascii_mbtowc+0x1a>
 800fdde:	b14b      	cbz	r3, 800fdf4 <__ascii_mbtowc+0x1e>
 800fde0:	7813      	ldrb	r3, [r2, #0]
 800fde2:	600b      	str	r3, [r1, #0]
 800fde4:	7812      	ldrb	r2, [r2, #0]
 800fde6:	1e10      	subs	r0, r2, #0
 800fde8:	bf18      	it	ne
 800fdea:	2001      	movne	r0, #1
 800fdec:	b002      	add	sp, #8
 800fdee:	4770      	bx	lr
 800fdf0:	4610      	mov	r0, r2
 800fdf2:	e7fb      	b.n	800fdec <__ascii_mbtowc+0x16>
 800fdf4:	f06f 0001 	mvn.w	r0, #1
 800fdf8:	e7f8      	b.n	800fdec <__ascii_mbtowc+0x16>

0800fdfa <_realloc_r>:
 800fdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfe:	4680      	mov	r8, r0
 800fe00:	4615      	mov	r5, r2
 800fe02:	460c      	mov	r4, r1
 800fe04:	b921      	cbnz	r1, 800fe10 <_realloc_r+0x16>
 800fe06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	f7fd bf42 	b.w	800dc94 <_malloc_r>
 800fe10:	b92a      	cbnz	r2, 800fe1e <_realloc_r+0x24>
 800fe12:	f7fd fecb 	bl	800dbac <_free_r>
 800fe16:	2400      	movs	r4, #0
 800fe18:	4620      	mov	r0, r4
 800fe1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe1e:	f000 f840 	bl	800fea2 <_malloc_usable_size_r>
 800fe22:	4285      	cmp	r5, r0
 800fe24:	4606      	mov	r6, r0
 800fe26:	d802      	bhi.n	800fe2e <_realloc_r+0x34>
 800fe28:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fe2c:	d8f4      	bhi.n	800fe18 <_realloc_r+0x1e>
 800fe2e:	4629      	mov	r1, r5
 800fe30:	4640      	mov	r0, r8
 800fe32:	f7fd ff2f 	bl	800dc94 <_malloc_r>
 800fe36:	4607      	mov	r7, r0
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d0ec      	beq.n	800fe16 <_realloc_r+0x1c>
 800fe3c:	42b5      	cmp	r5, r6
 800fe3e:	462a      	mov	r2, r5
 800fe40:	4621      	mov	r1, r4
 800fe42:	bf28      	it	cs
 800fe44:	4632      	movcs	r2, r6
 800fe46:	f7ff fc45 	bl	800f6d4 <memcpy>
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	f7fd fead 	bl	800dbac <_free_r>
 800fe52:	463c      	mov	r4, r7
 800fe54:	e7e0      	b.n	800fe18 <_realloc_r+0x1e>

0800fe56 <__ascii_wctomb>:
 800fe56:	4603      	mov	r3, r0
 800fe58:	4608      	mov	r0, r1
 800fe5a:	b141      	cbz	r1, 800fe6e <__ascii_wctomb+0x18>
 800fe5c:	2aff      	cmp	r2, #255	@ 0xff
 800fe5e:	d904      	bls.n	800fe6a <__ascii_wctomb+0x14>
 800fe60:	228a      	movs	r2, #138	@ 0x8a
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	f04f 30ff 	mov.w	r0, #4294967295
 800fe68:	4770      	bx	lr
 800fe6a:	700a      	strb	r2, [r1, #0]
 800fe6c:	2001      	movs	r0, #1
 800fe6e:	4770      	bx	lr

0800fe70 <fiprintf>:
 800fe70:	b40e      	push	{r1, r2, r3}
 800fe72:	b503      	push	{r0, r1, lr}
 800fe74:	4601      	mov	r1, r0
 800fe76:	ab03      	add	r3, sp, #12
 800fe78:	4805      	ldr	r0, [pc, #20]	@ (800fe90 <fiprintf+0x20>)
 800fe7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe7e:	6800      	ldr	r0, [r0, #0]
 800fe80:	9301      	str	r3, [sp, #4]
 800fe82:	f000 f83f 	bl	800ff04 <_vfiprintf_r>
 800fe86:	b002      	add	sp, #8
 800fe88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe8c:	b003      	add	sp, #12
 800fe8e:	4770      	bx	lr
 800fe90:	24000030 	.word	0x24000030

0800fe94 <abort>:
 800fe94:	b508      	push	{r3, lr}
 800fe96:	2006      	movs	r0, #6
 800fe98:	f000 fa08 	bl	80102ac <raise>
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	f7f1 ff3d 	bl	8001d1c <_exit>

0800fea2 <_malloc_usable_size_r>:
 800fea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fea6:	1f18      	subs	r0, r3, #4
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	bfbc      	itt	lt
 800feac:	580b      	ldrlt	r3, [r1, r0]
 800feae:	18c0      	addlt	r0, r0, r3
 800feb0:	4770      	bx	lr

0800feb2 <__sfputc_r>:
 800feb2:	6893      	ldr	r3, [r2, #8]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	b410      	push	{r4}
 800feba:	6093      	str	r3, [r2, #8]
 800febc:	da08      	bge.n	800fed0 <__sfputc_r+0x1e>
 800febe:	6994      	ldr	r4, [r2, #24]
 800fec0:	42a3      	cmp	r3, r4
 800fec2:	db01      	blt.n	800fec8 <__sfputc_r+0x16>
 800fec4:	290a      	cmp	r1, #10
 800fec6:	d103      	bne.n	800fed0 <__sfputc_r+0x1e>
 800fec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fecc:	f000 b932 	b.w	8010134 <__swbuf_r>
 800fed0:	6813      	ldr	r3, [r2, #0]
 800fed2:	1c58      	adds	r0, r3, #1
 800fed4:	6010      	str	r0, [r2, #0]
 800fed6:	7019      	strb	r1, [r3, #0]
 800fed8:	4608      	mov	r0, r1
 800feda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <__sfputs_r>:
 800fee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee2:	4606      	mov	r6, r0
 800fee4:	460f      	mov	r7, r1
 800fee6:	4614      	mov	r4, r2
 800fee8:	18d5      	adds	r5, r2, r3
 800feea:	42ac      	cmp	r4, r5
 800feec:	d101      	bne.n	800fef2 <__sfputs_r+0x12>
 800feee:	2000      	movs	r0, #0
 800fef0:	e007      	b.n	800ff02 <__sfputs_r+0x22>
 800fef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fef6:	463a      	mov	r2, r7
 800fef8:	4630      	mov	r0, r6
 800fefa:	f7ff ffda 	bl	800feb2 <__sfputc_r>
 800fefe:	1c43      	adds	r3, r0, #1
 800ff00:	d1f3      	bne.n	800feea <__sfputs_r+0xa>
 800ff02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff04 <_vfiprintf_r>:
 800ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff08:	460d      	mov	r5, r1
 800ff0a:	b09d      	sub	sp, #116	@ 0x74
 800ff0c:	4614      	mov	r4, r2
 800ff0e:	4698      	mov	r8, r3
 800ff10:	4606      	mov	r6, r0
 800ff12:	b118      	cbz	r0, 800ff1c <_vfiprintf_r+0x18>
 800ff14:	6a03      	ldr	r3, [r0, #32]
 800ff16:	b90b      	cbnz	r3, 800ff1c <_vfiprintf_r+0x18>
 800ff18:	f7fc ff02 	bl	800cd20 <__sinit>
 800ff1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff1e:	07d9      	lsls	r1, r3, #31
 800ff20:	d405      	bmi.n	800ff2e <_vfiprintf_r+0x2a>
 800ff22:	89ab      	ldrh	r3, [r5, #12]
 800ff24:	059a      	lsls	r2, r3, #22
 800ff26:	d402      	bmi.n	800ff2e <_vfiprintf_r+0x2a>
 800ff28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff2a:	f7fd f856 	bl	800cfda <__retarget_lock_acquire_recursive>
 800ff2e:	89ab      	ldrh	r3, [r5, #12]
 800ff30:	071b      	lsls	r3, r3, #28
 800ff32:	d501      	bpl.n	800ff38 <_vfiprintf_r+0x34>
 800ff34:	692b      	ldr	r3, [r5, #16]
 800ff36:	b99b      	cbnz	r3, 800ff60 <_vfiprintf_r+0x5c>
 800ff38:	4629      	mov	r1, r5
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f000 f938 	bl	80101b0 <__swsetup_r>
 800ff40:	b170      	cbz	r0, 800ff60 <_vfiprintf_r+0x5c>
 800ff42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff44:	07dc      	lsls	r4, r3, #31
 800ff46:	d504      	bpl.n	800ff52 <_vfiprintf_r+0x4e>
 800ff48:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4c:	b01d      	add	sp, #116	@ 0x74
 800ff4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff52:	89ab      	ldrh	r3, [r5, #12]
 800ff54:	0598      	lsls	r0, r3, #22
 800ff56:	d4f7      	bmi.n	800ff48 <_vfiprintf_r+0x44>
 800ff58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff5a:	f7fd f83f 	bl	800cfdc <__retarget_lock_release_recursive>
 800ff5e:	e7f3      	b.n	800ff48 <_vfiprintf_r+0x44>
 800ff60:	2300      	movs	r3, #0
 800ff62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff64:	2320      	movs	r3, #32
 800ff66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff6e:	2330      	movs	r3, #48	@ 0x30
 800ff70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010120 <_vfiprintf_r+0x21c>
 800ff74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff78:	f04f 0901 	mov.w	r9, #1
 800ff7c:	4623      	mov	r3, r4
 800ff7e:	469a      	mov	sl, r3
 800ff80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff84:	b10a      	cbz	r2, 800ff8a <_vfiprintf_r+0x86>
 800ff86:	2a25      	cmp	r2, #37	@ 0x25
 800ff88:	d1f9      	bne.n	800ff7e <_vfiprintf_r+0x7a>
 800ff8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ff8e:	d00b      	beq.n	800ffa8 <_vfiprintf_r+0xa4>
 800ff90:	465b      	mov	r3, fp
 800ff92:	4622      	mov	r2, r4
 800ff94:	4629      	mov	r1, r5
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff ffa2 	bl	800fee0 <__sfputs_r>
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	f000 80a7 	beq.w	80100f0 <_vfiprintf_r+0x1ec>
 800ffa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffa4:	445a      	add	r2, fp
 800ffa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffa8:	f89a 3000 	ldrb.w	r3, [sl]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 809f 	beq.w	80100f0 <_vfiprintf_r+0x1ec>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffbc:	f10a 0a01 	add.w	sl, sl, #1
 800ffc0:	9304      	str	r3, [sp, #16]
 800ffc2:	9307      	str	r3, [sp, #28]
 800ffc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffca:	4654      	mov	r4, sl
 800ffcc:	2205      	movs	r2, #5
 800ffce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffd2:	4853      	ldr	r0, [pc, #332]	@ (8010120 <_vfiprintf_r+0x21c>)
 800ffd4:	f7f0 f984 	bl	80002e0 <memchr>
 800ffd8:	9a04      	ldr	r2, [sp, #16]
 800ffda:	b9d8      	cbnz	r0, 8010014 <_vfiprintf_r+0x110>
 800ffdc:	06d1      	lsls	r1, r2, #27
 800ffde:	bf44      	itt	mi
 800ffe0:	2320      	movmi	r3, #32
 800ffe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffe6:	0713      	lsls	r3, r2, #28
 800ffe8:	bf44      	itt	mi
 800ffea:	232b      	movmi	r3, #43	@ 0x2b
 800ffec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fff0:	f89a 3000 	ldrb.w	r3, [sl]
 800fff4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fff6:	d015      	beq.n	8010024 <_vfiprintf_r+0x120>
 800fff8:	9a07      	ldr	r2, [sp, #28]
 800fffa:	4654      	mov	r4, sl
 800fffc:	2000      	movs	r0, #0
 800fffe:	f04f 0c0a 	mov.w	ip, #10
 8010002:	4621      	mov	r1, r4
 8010004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010008:	3b30      	subs	r3, #48	@ 0x30
 801000a:	2b09      	cmp	r3, #9
 801000c:	d94b      	bls.n	80100a6 <_vfiprintf_r+0x1a2>
 801000e:	b1b0      	cbz	r0, 801003e <_vfiprintf_r+0x13a>
 8010010:	9207      	str	r2, [sp, #28]
 8010012:	e014      	b.n	801003e <_vfiprintf_r+0x13a>
 8010014:	eba0 0308 	sub.w	r3, r0, r8
 8010018:	fa09 f303 	lsl.w	r3, r9, r3
 801001c:	4313      	orrs	r3, r2
 801001e:	9304      	str	r3, [sp, #16]
 8010020:	46a2      	mov	sl, r4
 8010022:	e7d2      	b.n	800ffca <_vfiprintf_r+0xc6>
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	1d19      	adds	r1, r3, #4
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	9103      	str	r1, [sp, #12]
 801002c:	2b00      	cmp	r3, #0
 801002e:	bfbb      	ittet	lt
 8010030:	425b      	neglt	r3, r3
 8010032:	f042 0202 	orrlt.w	r2, r2, #2
 8010036:	9307      	strge	r3, [sp, #28]
 8010038:	9307      	strlt	r3, [sp, #28]
 801003a:	bfb8      	it	lt
 801003c:	9204      	strlt	r2, [sp, #16]
 801003e:	7823      	ldrb	r3, [r4, #0]
 8010040:	2b2e      	cmp	r3, #46	@ 0x2e
 8010042:	d10a      	bne.n	801005a <_vfiprintf_r+0x156>
 8010044:	7863      	ldrb	r3, [r4, #1]
 8010046:	2b2a      	cmp	r3, #42	@ 0x2a
 8010048:	d132      	bne.n	80100b0 <_vfiprintf_r+0x1ac>
 801004a:	9b03      	ldr	r3, [sp, #12]
 801004c:	1d1a      	adds	r2, r3, #4
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	9203      	str	r2, [sp, #12]
 8010052:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010056:	3402      	adds	r4, #2
 8010058:	9305      	str	r3, [sp, #20]
 801005a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010130 <_vfiprintf_r+0x22c>
 801005e:	7821      	ldrb	r1, [r4, #0]
 8010060:	2203      	movs	r2, #3
 8010062:	4650      	mov	r0, sl
 8010064:	f7f0 f93c 	bl	80002e0 <memchr>
 8010068:	b138      	cbz	r0, 801007a <_vfiprintf_r+0x176>
 801006a:	9b04      	ldr	r3, [sp, #16]
 801006c:	eba0 000a 	sub.w	r0, r0, sl
 8010070:	2240      	movs	r2, #64	@ 0x40
 8010072:	4082      	lsls	r2, r0
 8010074:	4313      	orrs	r3, r2
 8010076:	3401      	adds	r4, #1
 8010078:	9304      	str	r3, [sp, #16]
 801007a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801007e:	4829      	ldr	r0, [pc, #164]	@ (8010124 <_vfiprintf_r+0x220>)
 8010080:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010084:	2206      	movs	r2, #6
 8010086:	f7f0 f92b 	bl	80002e0 <memchr>
 801008a:	2800      	cmp	r0, #0
 801008c:	d03f      	beq.n	801010e <_vfiprintf_r+0x20a>
 801008e:	4b26      	ldr	r3, [pc, #152]	@ (8010128 <_vfiprintf_r+0x224>)
 8010090:	bb1b      	cbnz	r3, 80100da <_vfiprintf_r+0x1d6>
 8010092:	9b03      	ldr	r3, [sp, #12]
 8010094:	3307      	adds	r3, #7
 8010096:	f023 0307 	bic.w	r3, r3, #7
 801009a:	3308      	adds	r3, #8
 801009c:	9303      	str	r3, [sp, #12]
 801009e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100a0:	443b      	add	r3, r7
 80100a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80100a4:	e76a      	b.n	800ff7c <_vfiprintf_r+0x78>
 80100a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80100aa:	460c      	mov	r4, r1
 80100ac:	2001      	movs	r0, #1
 80100ae:	e7a8      	b.n	8010002 <_vfiprintf_r+0xfe>
 80100b0:	2300      	movs	r3, #0
 80100b2:	3401      	adds	r4, #1
 80100b4:	9305      	str	r3, [sp, #20]
 80100b6:	4619      	mov	r1, r3
 80100b8:	f04f 0c0a 	mov.w	ip, #10
 80100bc:	4620      	mov	r0, r4
 80100be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100c2:	3a30      	subs	r2, #48	@ 0x30
 80100c4:	2a09      	cmp	r2, #9
 80100c6:	d903      	bls.n	80100d0 <_vfiprintf_r+0x1cc>
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d0c6      	beq.n	801005a <_vfiprintf_r+0x156>
 80100cc:	9105      	str	r1, [sp, #20]
 80100ce:	e7c4      	b.n	801005a <_vfiprintf_r+0x156>
 80100d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80100d4:	4604      	mov	r4, r0
 80100d6:	2301      	movs	r3, #1
 80100d8:	e7f0      	b.n	80100bc <_vfiprintf_r+0x1b8>
 80100da:	ab03      	add	r3, sp, #12
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	462a      	mov	r2, r5
 80100e0:	4b12      	ldr	r3, [pc, #72]	@ (801012c <_vfiprintf_r+0x228>)
 80100e2:	a904      	add	r1, sp, #16
 80100e4:	4630      	mov	r0, r6
 80100e6:	f7fb ffdb 	bl	800c0a0 <_printf_float>
 80100ea:	4607      	mov	r7, r0
 80100ec:	1c78      	adds	r0, r7, #1
 80100ee:	d1d6      	bne.n	801009e <_vfiprintf_r+0x19a>
 80100f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100f2:	07d9      	lsls	r1, r3, #31
 80100f4:	d405      	bmi.n	8010102 <_vfiprintf_r+0x1fe>
 80100f6:	89ab      	ldrh	r3, [r5, #12]
 80100f8:	059a      	lsls	r2, r3, #22
 80100fa:	d402      	bmi.n	8010102 <_vfiprintf_r+0x1fe>
 80100fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100fe:	f7fc ff6d 	bl	800cfdc <__retarget_lock_release_recursive>
 8010102:	89ab      	ldrh	r3, [r5, #12]
 8010104:	065b      	lsls	r3, r3, #25
 8010106:	f53f af1f 	bmi.w	800ff48 <_vfiprintf_r+0x44>
 801010a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801010c:	e71e      	b.n	800ff4c <_vfiprintf_r+0x48>
 801010e:	ab03      	add	r3, sp, #12
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	462a      	mov	r2, r5
 8010114:	4b05      	ldr	r3, [pc, #20]	@ (801012c <_vfiprintf_r+0x228>)
 8010116:	a904      	add	r1, sp, #16
 8010118:	4630      	mov	r0, r6
 801011a:	f7fc fa49 	bl	800c5b0 <_printf_i>
 801011e:	e7e4      	b.n	80100ea <_vfiprintf_r+0x1e6>
 8010120:	08010858 	.word	0x08010858
 8010124:	08010862 	.word	0x08010862
 8010128:	0800c0a1 	.word	0x0800c0a1
 801012c:	0800fee1 	.word	0x0800fee1
 8010130:	0801085e 	.word	0x0801085e

08010134 <__swbuf_r>:
 8010134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010136:	460e      	mov	r6, r1
 8010138:	4614      	mov	r4, r2
 801013a:	4605      	mov	r5, r0
 801013c:	b118      	cbz	r0, 8010146 <__swbuf_r+0x12>
 801013e:	6a03      	ldr	r3, [r0, #32]
 8010140:	b90b      	cbnz	r3, 8010146 <__swbuf_r+0x12>
 8010142:	f7fc fded 	bl	800cd20 <__sinit>
 8010146:	69a3      	ldr	r3, [r4, #24]
 8010148:	60a3      	str	r3, [r4, #8]
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	071a      	lsls	r2, r3, #28
 801014e:	d501      	bpl.n	8010154 <__swbuf_r+0x20>
 8010150:	6923      	ldr	r3, [r4, #16]
 8010152:	b943      	cbnz	r3, 8010166 <__swbuf_r+0x32>
 8010154:	4621      	mov	r1, r4
 8010156:	4628      	mov	r0, r5
 8010158:	f000 f82a 	bl	80101b0 <__swsetup_r>
 801015c:	b118      	cbz	r0, 8010166 <__swbuf_r+0x32>
 801015e:	f04f 37ff 	mov.w	r7, #4294967295
 8010162:	4638      	mov	r0, r7
 8010164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010166:	6823      	ldr	r3, [r4, #0]
 8010168:	6922      	ldr	r2, [r4, #16]
 801016a:	1a98      	subs	r0, r3, r2
 801016c:	6963      	ldr	r3, [r4, #20]
 801016e:	b2f6      	uxtb	r6, r6
 8010170:	4283      	cmp	r3, r0
 8010172:	4637      	mov	r7, r6
 8010174:	dc05      	bgt.n	8010182 <__swbuf_r+0x4e>
 8010176:	4621      	mov	r1, r4
 8010178:	4628      	mov	r0, r5
 801017a:	f7ff fa59 	bl	800f630 <_fflush_r>
 801017e:	2800      	cmp	r0, #0
 8010180:	d1ed      	bne.n	801015e <__swbuf_r+0x2a>
 8010182:	68a3      	ldr	r3, [r4, #8]
 8010184:	3b01      	subs	r3, #1
 8010186:	60a3      	str	r3, [r4, #8]
 8010188:	6823      	ldr	r3, [r4, #0]
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	6022      	str	r2, [r4, #0]
 801018e:	701e      	strb	r6, [r3, #0]
 8010190:	6962      	ldr	r2, [r4, #20]
 8010192:	1c43      	adds	r3, r0, #1
 8010194:	429a      	cmp	r2, r3
 8010196:	d004      	beq.n	80101a2 <__swbuf_r+0x6e>
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	07db      	lsls	r3, r3, #31
 801019c:	d5e1      	bpl.n	8010162 <__swbuf_r+0x2e>
 801019e:	2e0a      	cmp	r6, #10
 80101a0:	d1df      	bne.n	8010162 <__swbuf_r+0x2e>
 80101a2:	4621      	mov	r1, r4
 80101a4:	4628      	mov	r0, r5
 80101a6:	f7ff fa43 	bl	800f630 <_fflush_r>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d0d9      	beq.n	8010162 <__swbuf_r+0x2e>
 80101ae:	e7d6      	b.n	801015e <__swbuf_r+0x2a>

080101b0 <__swsetup_r>:
 80101b0:	b538      	push	{r3, r4, r5, lr}
 80101b2:	4b29      	ldr	r3, [pc, #164]	@ (8010258 <__swsetup_r+0xa8>)
 80101b4:	4605      	mov	r5, r0
 80101b6:	6818      	ldr	r0, [r3, #0]
 80101b8:	460c      	mov	r4, r1
 80101ba:	b118      	cbz	r0, 80101c4 <__swsetup_r+0x14>
 80101bc:	6a03      	ldr	r3, [r0, #32]
 80101be:	b90b      	cbnz	r3, 80101c4 <__swsetup_r+0x14>
 80101c0:	f7fc fdae 	bl	800cd20 <__sinit>
 80101c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101c8:	0719      	lsls	r1, r3, #28
 80101ca:	d422      	bmi.n	8010212 <__swsetup_r+0x62>
 80101cc:	06da      	lsls	r2, r3, #27
 80101ce:	d407      	bmi.n	80101e0 <__swsetup_r+0x30>
 80101d0:	2209      	movs	r2, #9
 80101d2:	602a      	str	r2, [r5, #0]
 80101d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101d8:	81a3      	strh	r3, [r4, #12]
 80101da:	f04f 30ff 	mov.w	r0, #4294967295
 80101de:	e033      	b.n	8010248 <__swsetup_r+0x98>
 80101e0:	0758      	lsls	r0, r3, #29
 80101e2:	d512      	bpl.n	801020a <__swsetup_r+0x5a>
 80101e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101e6:	b141      	cbz	r1, 80101fa <__swsetup_r+0x4a>
 80101e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d002      	beq.n	80101f6 <__swsetup_r+0x46>
 80101f0:	4628      	mov	r0, r5
 80101f2:	f7fd fcdb 	bl	800dbac <_free_r>
 80101f6:	2300      	movs	r3, #0
 80101f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	2300      	movs	r3, #0
 8010204:	6063      	str	r3, [r4, #4]
 8010206:	6923      	ldr	r3, [r4, #16]
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	f043 0308 	orr.w	r3, r3, #8
 8010210:	81a3      	strh	r3, [r4, #12]
 8010212:	6923      	ldr	r3, [r4, #16]
 8010214:	b94b      	cbnz	r3, 801022a <__swsetup_r+0x7a>
 8010216:	89a3      	ldrh	r3, [r4, #12]
 8010218:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801021c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010220:	d003      	beq.n	801022a <__swsetup_r+0x7a>
 8010222:	4621      	mov	r1, r4
 8010224:	4628      	mov	r0, r5
 8010226:	f000 f883 	bl	8010330 <__smakebuf_r>
 801022a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801022e:	f013 0201 	ands.w	r2, r3, #1
 8010232:	d00a      	beq.n	801024a <__swsetup_r+0x9a>
 8010234:	2200      	movs	r2, #0
 8010236:	60a2      	str	r2, [r4, #8]
 8010238:	6962      	ldr	r2, [r4, #20]
 801023a:	4252      	negs	r2, r2
 801023c:	61a2      	str	r2, [r4, #24]
 801023e:	6922      	ldr	r2, [r4, #16]
 8010240:	b942      	cbnz	r2, 8010254 <__swsetup_r+0xa4>
 8010242:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010246:	d1c5      	bne.n	80101d4 <__swsetup_r+0x24>
 8010248:	bd38      	pop	{r3, r4, r5, pc}
 801024a:	0799      	lsls	r1, r3, #30
 801024c:	bf58      	it	pl
 801024e:	6962      	ldrpl	r2, [r4, #20]
 8010250:	60a2      	str	r2, [r4, #8]
 8010252:	e7f4      	b.n	801023e <__swsetup_r+0x8e>
 8010254:	2000      	movs	r0, #0
 8010256:	e7f7      	b.n	8010248 <__swsetup_r+0x98>
 8010258:	24000030 	.word	0x24000030

0801025c <_raise_r>:
 801025c:	291f      	cmp	r1, #31
 801025e:	b538      	push	{r3, r4, r5, lr}
 8010260:	4605      	mov	r5, r0
 8010262:	460c      	mov	r4, r1
 8010264:	d904      	bls.n	8010270 <_raise_r+0x14>
 8010266:	2316      	movs	r3, #22
 8010268:	6003      	str	r3, [r0, #0]
 801026a:	f04f 30ff 	mov.w	r0, #4294967295
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010272:	b112      	cbz	r2, 801027a <_raise_r+0x1e>
 8010274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010278:	b94b      	cbnz	r3, 801028e <_raise_r+0x32>
 801027a:	4628      	mov	r0, r5
 801027c:	f000 f830 	bl	80102e0 <_getpid_r>
 8010280:	4622      	mov	r2, r4
 8010282:	4601      	mov	r1, r0
 8010284:	4628      	mov	r0, r5
 8010286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801028a:	f000 b817 	b.w	80102bc <_kill_r>
 801028e:	2b01      	cmp	r3, #1
 8010290:	d00a      	beq.n	80102a8 <_raise_r+0x4c>
 8010292:	1c59      	adds	r1, r3, #1
 8010294:	d103      	bne.n	801029e <_raise_r+0x42>
 8010296:	2316      	movs	r3, #22
 8010298:	6003      	str	r3, [r0, #0]
 801029a:	2001      	movs	r0, #1
 801029c:	e7e7      	b.n	801026e <_raise_r+0x12>
 801029e:	2100      	movs	r1, #0
 80102a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80102a4:	4620      	mov	r0, r4
 80102a6:	4798      	blx	r3
 80102a8:	2000      	movs	r0, #0
 80102aa:	e7e0      	b.n	801026e <_raise_r+0x12>

080102ac <raise>:
 80102ac:	4b02      	ldr	r3, [pc, #8]	@ (80102b8 <raise+0xc>)
 80102ae:	4601      	mov	r1, r0
 80102b0:	6818      	ldr	r0, [r3, #0]
 80102b2:	f7ff bfd3 	b.w	801025c <_raise_r>
 80102b6:	bf00      	nop
 80102b8:	24000030 	.word	0x24000030

080102bc <_kill_r>:
 80102bc:	b538      	push	{r3, r4, r5, lr}
 80102be:	4d07      	ldr	r5, [pc, #28]	@ (80102dc <_kill_r+0x20>)
 80102c0:	2300      	movs	r3, #0
 80102c2:	4604      	mov	r4, r0
 80102c4:	4608      	mov	r0, r1
 80102c6:	4611      	mov	r1, r2
 80102c8:	602b      	str	r3, [r5, #0]
 80102ca:	f7f1 fd17 	bl	8001cfc <_kill>
 80102ce:	1c43      	adds	r3, r0, #1
 80102d0:	d102      	bne.n	80102d8 <_kill_r+0x1c>
 80102d2:	682b      	ldr	r3, [r5, #0]
 80102d4:	b103      	cbz	r3, 80102d8 <_kill_r+0x1c>
 80102d6:	6023      	str	r3, [r4, #0]
 80102d8:	bd38      	pop	{r3, r4, r5, pc}
 80102da:	bf00      	nop
 80102dc:	240005dc 	.word	0x240005dc

080102e0 <_getpid_r>:
 80102e0:	f7f1 bd04 	b.w	8001cec <_getpid>

080102e4 <__swhatbuf_r>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	460c      	mov	r4, r1
 80102e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ec:	2900      	cmp	r1, #0
 80102ee:	b096      	sub	sp, #88	@ 0x58
 80102f0:	4615      	mov	r5, r2
 80102f2:	461e      	mov	r6, r3
 80102f4:	da0d      	bge.n	8010312 <__swhatbuf_r+0x2e>
 80102f6:	89a3      	ldrh	r3, [r4, #12]
 80102f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102fc:	f04f 0100 	mov.w	r1, #0
 8010300:	bf14      	ite	ne
 8010302:	2340      	movne	r3, #64	@ 0x40
 8010304:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010308:	2000      	movs	r0, #0
 801030a:	6031      	str	r1, [r6, #0]
 801030c:	602b      	str	r3, [r5, #0]
 801030e:	b016      	add	sp, #88	@ 0x58
 8010310:	bd70      	pop	{r4, r5, r6, pc}
 8010312:	466a      	mov	r2, sp
 8010314:	f000 f848 	bl	80103a8 <_fstat_r>
 8010318:	2800      	cmp	r0, #0
 801031a:	dbec      	blt.n	80102f6 <__swhatbuf_r+0x12>
 801031c:	9901      	ldr	r1, [sp, #4]
 801031e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010322:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010326:	4259      	negs	r1, r3
 8010328:	4159      	adcs	r1, r3
 801032a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801032e:	e7eb      	b.n	8010308 <__swhatbuf_r+0x24>

08010330 <__smakebuf_r>:
 8010330:	898b      	ldrh	r3, [r1, #12]
 8010332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010334:	079d      	lsls	r5, r3, #30
 8010336:	4606      	mov	r6, r0
 8010338:	460c      	mov	r4, r1
 801033a:	d507      	bpl.n	801034c <__smakebuf_r+0x1c>
 801033c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010340:	6023      	str	r3, [r4, #0]
 8010342:	6123      	str	r3, [r4, #16]
 8010344:	2301      	movs	r3, #1
 8010346:	6163      	str	r3, [r4, #20]
 8010348:	b003      	add	sp, #12
 801034a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801034c:	ab01      	add	r3, sp, #4
 801034e:	466a      	mov	r2, sp
 8010350:	f7ff ffc8 	bl	80102e4 <__swhatbuf_r>
 8010354:	9f00      	ldr	r7, [sp, #0]
 8010356:	4605      	mov	r5, r0
 8010358:	4639      	mov	r1, r7
 801035a:	4630      	mov	r0, r6
 801035c:	f7fd fc9a 	bl	800dc94 <_malloc_r>
 8010360:	b948      	cbnz	r0, 8010376 <__smakebuf_r+0x46>
 8010362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010366:	059a      	lsls	r2, r3, #22
 8010368:	d4ee      	bmi.n	8010348 <__smakebuf_r+0x18>
 801036a:	f023 0303 	bic.w	r3, r3, #3
 801036e:	f043 0302 	orr.w	r3, r3, #2
 8010372:	81a3      	strh	r3, [r4, #12]
 8010374:	e7e2      	b.n	801033c <__smakebuf_r+0xc>
 8010376:	89a3      	ldrh	r3, [r4, #12]
 8010378:	6020      	str	r0, [r4, #0]
 801037a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801037e:	81a3      	strh	r3, [r4, #12]
 8010380:	9b01      	ldr	r3, [sp, #4]
 8010382:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010386:	b15b      	cbz	r3, 80103a0 <__smakebuf_r+0x70>
 8010388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801038c:	4630      	mov	r0, r6
 801038e:	f000 f81d 	bl	80103cc <_isatty_r>
 8010392:	b128      	cbz	r0, 80103a0 <__smakebuf_r+0x70>
 8010394:	89a3      	ldrh	r3, [r4, #12]
 8010396:	f023 0303 	bic.w	r3, r3, #3
 801039a:	f043 0301 	orr.w	r3, r3, #1
 801039e:	81a3      	strh	r3, [r4, #12]
 80103a0:	89a3      	ldrh	r3, [r4, #12]
 80103a2:	431d      	orrs	r5, r3
 80103a4:	81a5      	strh	r5, [r4, #12]
 80103a6:	e7cf      	b.n	8010348 <__smakebuf_r+0x18>

080103a8 <_fstat_r>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	4d07      	ldr	r5, [pc, #28]	@ (80103c8 <_fstat_r+0x20>)
 80103ac:	2300      	movs	r3, #0
 80103ae:	4604      	mov	r4, r0
 80103b0:	4608      	mov	r0, r1
 80103b2:	4611      	mov	r1, r2
 80103b4:	602b      	str	r3, [r5, #0]
 80103b6:	f7f1 fd01 	bl	8001dbc <_fstat>
 80103ba:	1c43      	adds	r3, r0, #1
 80103bc:	d102      	bne.n	80103c4 <_fstat_r+0x1c>
 80103be:	682b      	ldr	r3, [r5, #0]
 80103c0:	b103      	cbz	r3, 80103c4 <_fstat_r+0x1c>
 80103c2:	6023      	str	r3, [r4, #0]
 80103c4:	bd38      	pop	{r3, r4, r5, pc}
 80103c6:	bf00      	nop
 80103c8:	240005dc 	.word	0x240005dc

080103cc <_isatty_r>:
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4d06      	ldr	r5, [pc, #24]	@ (80103e8 <_isatty_r+0x1c>)
 80103d0:	2300      	movs	r3, #0
 80103d2:	4604      	mov	r4, r0
 80103d4:	4608      	mov	r0, r1
 80103d6:	602b      	str	r3, [r5, #0]
 80103d8:	f7f1 fd00 	bl	8001ddc <_isatty>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d102      	bne.n	80103e6 <_isatty_r+0x1a>
 80103e0:	682b      	ldr	r3, [r5, #0]
 80103e2:	b103      	cbz	r3, 80103e6 <_isatty_r+0x1a>
 80103e4:	6023      	str	r3, [r4, #0]
 80103e6:	bd38      	pop	{r3, r4, r5, pc}
 80103e8:	240005dc 	.word	0x240005dc

080103ec <_init>:
 80103ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ee:	bf00      	nop
 80103f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f2:	bc08      	pop	{r3}
 80103f4:	469e      	mov	lr, r3
 80103f6:	4770      	bx	lr

080103f8 <_fini>:
 80103f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fa:	bf00      	nop
 80103fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fe:	bc08      	pop	{r3}
 8010400:	469e      	mov	lr, r3
 8010402:	4770      	bx	lr
